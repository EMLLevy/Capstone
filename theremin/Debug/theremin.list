
theremin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8dc  080002b0  080002b0  000102b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008ec  0800ab8c  0800ab8c  0001ab8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b478  0800b478  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800b478  0800b478  0001b478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b480  0800b480  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b480  0800b480  0001b480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b484  0800b484  0001b484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  24000000  0800b488  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  24000080  0800b508  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240003e8  0800b508  000203e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025c7c  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c2f  00000000  00000000  00045d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001740  00000000  00000000  00049960  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015c8  00000000  00000000  0004b0a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00033d77  00000000  00000000  0004c668  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015462  00000000  00000000  000803df  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00156357  00000000  00000000  00095841  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ebb98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a10  00000000  00000000  001ebc14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000080 	.word	0x24000080
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800ab74 	.word	0x0800ab74

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000084 	.word	0x24000084
 80002ec:	0800ab74 	.word	0x0800ab74

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:
  * @brief  The application entry point.
  * Run the theremin.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	; 0x50
 80005f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f001 fa6f 	bl	8001ad8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f8d3 	bl	80007a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 fbed 	bl	8000ddc <MX_GPIO_Init>
  MX_DMA_Init();
 8000602:	f000 fbb3 	bl	8000d6c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000606:	f000 fb5d 	bl	8000cc4 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800060a:	f000 fba7 	bl	8000d5c <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 800060e:	f000 f999 	bl	8000944 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000612:	f000 fa11 	bl	8000a38 <MX_DAC1_Init>
  MX_TIM6_Init();
 8000616:	f000 fae9 	bl	8000bec <MX_TIM6_Init>
  MX_TIM2_Init();
 800061a:	f000 fa3f 	bl	8000a9c <MX_TIM2_Init>
  MX_TIM7_Init();
 800061e:	f000 fb1b 	bl	8000c58 <MX_TIM7_Init>
  MX_TIM5_Init();
 8000622:	f000 fa8f 	bl	8000b44 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize NCO structure to create sine waves */
  s_ref = init_nco(1. / 100., 0);
 8000626:	eddf 0a4e 	vldr	s1, [pc, #312]	; 8000760 <main+0x170>
 800062a:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8000764 <main+0x174>
 800062e:	f000 fd83 	bl	8001138 <init_nco>
 8000632:	63b8      	str	r0, [r7, #56]	; 0x38
  sin_buffer = calloc(BLOCKSIZE, sizeof(uint16_t));
 8000634:	2102      	movs	r1, #2
 8000636:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800063a:	f009 fdcf 	bl	800a1dc <calloc>
 800063e:	4603      	mov	r3, r0
 8000640:	637b      	str	r3, [r7, #52]	; 0x34

  if ((sin_buffer == NULL)) {
 8000642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000644:	2b00      	cmp	r3, #0
 8000646:	d105      	bne.n	8000654 <main+0x64>
	  printf("Failed to allocate memory for arrays\n");
 8000648:	4847      	ldr	r0, [pc, #284]	; (8000768 <main+0x178>)
 800064a:	f009 ff2f 	bl	800a4ac <puts>
	  exit(EXIT_FAILURE);
 800064e:	2001      	movs	r0, #1
 8000650:	f009 fdd2 	bl	800a1f8 <exit>
  }

  /* Start TIM6 and DAC with DMA */
  HAL_TIM_Base_Start(&htim6);
 8000654:	4845      	ldr	r0, [pc, #276]	; (800076c <main+0x17c>)
 8000656:	f007 ffc5 	bl	80085e4 <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800065a:	2100      	movs	r1, #0
 800065c:	4844      	ldr	r0, [pc, #272]	; (8000770 <main+0x180>)
 800065e:	f002 fb2c 	bl	8002cba <HAL_DAC_Start>

  set_blocksize(BLOCKSIZE);
 8000662:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000666:	f000 fe65 	bl	8001334 <set_blocksize>
  dac_buff = (uint16_t *) malloc(sizeof(uint16_t)*BLOCKSIZE*2);
 800066a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800066e:	f009 fdfb 	bl	800a268 <malloc>
 8000672:	4603      	mov	r3, r0
 8000674:	461a      	mov	r2, r3
 8000676:	4b3f      	ldr	r3, [pc, #252]	; (8000774 <main+0x184>)
 8000678:	601a      	str	r2, [r3, #0]

  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)sin_buffer, BLOCKSIZE, DAC_ALIGN_12B_R);
 800067a:	2300      	movs	r3, #0
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000682:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000684:	2100      	movs	r1, #0
 8000686:	483a      	ldr	r0, [pc, #232]	; (8000770 <main+0x180>)
 8000688:	f002 fb6a 	bl	8002d60 <HAL_DAC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  /* Timer to update and change frequencies with */
  HAL_TIM_Base_Start_IT(&htim7);
 800068c:	483a      	ldr	r0, [pc, #232]	; (8000778 <main+0x188>)
 800068e:	f007 ffd7 	bl	8008640 <HAL_TIM_Base_Start_IT>

  /* Timers to count up input pulses */
  HAL_TIM_Base_Start(&htim2);
 8000692:	483a      	ldr	r0, [pc, #232]	; (800077c <main+0x18c>)
 8000694:	f007 ffa6 	bl	80085e4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim5);
 8000698:	4839      	ldr	r0, [pc, #228]	; (8000780 <main+0x190>)
 800069a:	f007 ffa3 	bl	80085e4 <HAL_TIM_Base_Start>
  i = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	647b      	str	r3, [r7, #68]	; 0x44

  while (1)
  {

	  /* Trigger every MILLISECONDS ms */
	  if (update_freq_flag) {
 80006a2:	4b38      	ldr	r3, [pc, #224]	; (8000784 <main+0x194>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d04a      	beq.n	8000742 <main+0x152>

//		  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);

		  /* Calculate the frequency to oscillate at */
		  freq = (int)((freq_timer_count * 1000 - REF_PITCH_OSC_FREQ));
 80006ac:	4b36      	ldr	r3, [pc, #216]	; (8000788 <main+0x198>)
 80006ae:	edd3 7a00 	vldr	s15, [r3]
 80006b2:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800078c <main+0x19c>
 80006b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006ba:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8000790 <main+0x1a0>
 80006be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80006c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006c6:	ee17 3a90 	vmov	r3, s15
 80006ca:	643b      	str	r3, [r7, #64]	; 0x40

		  /* Calculate the volume level */
		  vol = (int)((vol_timer_count * 1000 - REF_VOL_OSC_FREQ)) ;
 80006cc:	4b31      	ldr	r3, [pc, #196]	; (8000794 <main+0x1a4>)
 80006ce:	edd3 7a00 	vldr	s15, [r3]
 80006d2:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800078c <main+0x19c>
 80006d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006da:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8000798 <main+0x1a8>
 80006de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80006e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006e6:	ee17 3a90 	vmov	r3, s15
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c

		  /* Take the absolute value of the difference */
		  if (freq < 0)
 80006ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	da02      	bge.n	80006f8 <main+0x108>
			  freq = -freq;
 80006f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006f4:	425b      	negs	r3, r3
 80006f6:	643b      	str	r3, [r7, #64]	; 0x40
		  if (vol < 0)
 80006f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	da02      	bge.n	8000704 <main+0x114>
			  vol = -vol;
 80006fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000700:	425b      	negs	r3, r3
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c

		  if (freq > 4000)
 8000704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000706:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800070a:	dd02      	ble.n	8000712 <main+0x122>
			  freq = 4000;
 800070c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8000710:	643b      	str	r3, [r7, #64]	; 0x40
		  /* Inform serial bus of the current output frequency */
//		  uart_buf_len = sprintf(uart_buf, "%dHz, %dHz\r\n", (int)(freq_timer_count * 1000), freq);
//		  HAL_UART_Transmit(&huart3, uart_buf, uart_buf_len, 100);

		  /* Generate sine wave at desired frequency and amplitude */
		  nco_set_frequency(s_ref, (float)freq / 50000.);
 8000712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000714:	ee07 3a90 	vmov	s15, r3
 8000718:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800071c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800079c <main+0x1ac>
 8000720:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000724:	eeb0 0a66 	vmov.f32	s0, s13
 8000728:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800072a:	f000 fdaf 	bl	800128c <nco_set_frequency>
		  nco_set_amplitude(s_ref, vol);
 800072e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000730:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000732:	f000 fdc7 	bl	80012c4 <nco_set_amplitude>

		  update_freq_flag = 0;
 8000736:	4b13      	ldr	r3, [pc, #76]	; (8000784 <main+0x194>)
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
		  i++;
 800073c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800073e:	3301      	adds	r3, #1
 8000740:	647b      	str	r3, [r7, #68]	; 0x44
//		  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
	  }
//	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);

	  /* Set DAC output samples if the previous block is complete*/
	  if (dac_comp_flag) {
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <main+0x1b0>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	b2db      	uxtb	r3, r3
 8000748:	2b00      	cmp	r3, #0
 800074a:	d0aa      	beq.n	80006a2 <main+0xb2>
//		  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
		  nco_get_samples(s_ref, sin_buffer, BLOCKSIZE);
 800074c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000750:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000752:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000754:	f000 fd3c 	bl	80011d0 <nco_get_samples>
		  dac_comp_flag = 0;
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <main+0x1b0>)
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]
	  if (update_freq_flag) {
 800075e:	e7a0      	b.n	80006a2 <main+0xb2>
 8000760:	00000000 	.word	0x00000000
 8000764:	3c23d70a 	.word	0x3c23d70a
 8000768:	0800ab8c 	.word	0x0800ab8c
 800076c:	240002f8 	.word	0x240002f8
 8000770:	240000b8 	.word	0x240000b8
 8000774:	240000a8 	.word	0x240000a8
 8000778:	24000390 	.word	0x24000390
 800077c:	24000344 	.word	0x24000344
 8000780:	240001d0 	.word	0x240001d0
 8000784:	240003dc 	.word	0x240003dc
 8000788:	2400009c 	.word	0x2400009c
 800078c:	447a0000 	.word	0x447a0000
 8000790:	48751e00 	.word	0x48751e00
 8000794:	240000a0 	.word	0x240000a0
 8000798:	487de800 	.word	0x487de800
 800079c:	47435000 	.word	0x47435000
 80007a0:	24000000 	.word	0x24000000

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b0ca      	sub	sp, #296	; 0x128
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80007ae:	224c      	movs	r2, #76	; 0x4c
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f009 fd60 	bl	800a278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80007bc:	2220      	movs	r2, #32
 80007be:	2100      	movs	r1, #0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f009 fd59 	bl	800a278 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	4618      	mov	r0, r3
 80007ca:	23b8      	movs	r3, #184	; 0xb8
 80007cc:	461a      	mov	r2, r3
 80007ce:	2100      	movs	r1, #0
 80007d0:	f009 fd52 	bl	800a278 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007d4:	2004      	movs	r0, #4
 80007d6:	f005 f8af 	bl	8005938 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007da:	463b      	mov	r3, r7
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	4b55      	ldr	r3, [pc, #340]	; (8000938 <SystemClock_Config+0x194>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a54      	ldr	r2, [pc, #336]	; (8000938 <SystemClock_Config+0x194>)
 80007e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	4b52      	ldr	r3, [pc, #328]	; (8000938 <SystemClock_Config+0x194>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80007f4:	463b      	mov	r3, r7
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	463b      	mov	r3, r7
 80007fa:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007fc:	bf00      	nop
 80007fe:	4b4e      	ldr	r3, [pc, #312]	; (8000938 <SystemClock_Config+0x194>)
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800080a:	d1f8      	bne.n	80007fe <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800080c:	4b4b      	ldr	r3, [pc, #300]	; (800093c <SystemClock_Config+0x198>)
 800080e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000810:	f023 0303 	bic.w	r3, r3, #3
 8000814:	4a49      	ldr	r2, [pc, #292]	; (800093c <SystemClock_Config+0x198>)
 8000816:	f043 0302 	orr.w	r3, r3, #2
 800081a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 800081c:	2329      	movs	r3, #41	; 0x29
 800081e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000822:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000826:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800082a:	2301      	movs	r3, #1
 800082c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000830:	2301      	movs	r3, #1
 8000832:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000836:	2302      	movs	r3, #2
 8000838:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083c:	2302      	movs	r3, #2
 800083e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000842:	2301      	movs	r3, #1
 8000844:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000848:	2318      	movs	r3, #24
 800084a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800084e:	2302      	movs	r3, #2
 8000850:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000854:	2304      	movs	r3, #4
 8000856:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLR = 2;
 800085a:	2302      	movs	r3, #2
 800085c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000860:	230c      	movs	r3, #12
 8000862:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000866:	2300      	movs	r3, #0
 8000868:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000872:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000876:	4618      	mov	r0, r3
 8000878:	f005 f8b8 	bl	80059ec <HAL_RCC_OscConfig>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000882:	f000 fc51 	bl	8001128 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000886:	233f      	movs	r3, #63	; 0x3f
 8000888:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088c:	2303      	movs	r3, #3
 800088e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800089e:	2300      	movs	r3, #0
 80008a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008b6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80008ba:	2102      	movs	r1, #2
 80008bc:	4618      	mov	r0, r3
 80008be:	f005 fc7d 	bl	80061bc <HAL_RCC_ClockConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0x128>
  {
    Error_Handler();
 80008c8:	f000 fc2e 	bl	8001128 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_ADC
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	4a1c      	ldr	r2, [pc, #112]	; (8000940 <SystemClock_Config+0x19c>)
 80008d0:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	2201      	movs	r2, #1
 80008d6:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2210      	movs	r2, #16
 80008dc:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	2202      	movs	r2, #2
 80008e2:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	2202      	movs	r2, #2
 80008e8:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	2202      	movs	r2, #2
 80008ee:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	22c0      	movs	r2, #192	; 0xc0
 80008f4:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2200      	movs	r2, #0
 80008fa:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	2200      	movs	r2, #0
 8000906:	67da      	str	r2, [r3, #124]	; 0x7c
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800090e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	2200      	movs	r2, #0
 8000916:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4618      	mov	r0, r3
 800091e:	f005 ffd1 	bl	80068c4 <HAL_RCCEx_PeriphCLKConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <SystemClock_Config+0x188>
  {
    Error_Handler();
 8000928:	f000 fbfe 	bl	8001128 <Error_Handler>
  }
}
 800092c:	bf00      	nop
 800092e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	58024800 	.word	0x58024800
 800093c:	58024400 	.word	0x58024400
 8000940:	000c0002 	.word	0x000c0002

08000944 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08a      	sub	sp, #40	; 0x28
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000956:	463b      	mov	r3, r7
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
 8000964:	615a      	str	r2, [r3, #20]
 8000966:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000968:	4b30      	ldr	r3, [pc, #192]	; (8000a2c <MX_ADC1_Init+0xe8>)
 800096a:	4a31      	ldr	r2, [pc, #196]	; (8000a30 <MX_ADC1_Init+0xec>)
 800096c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800096e:	4b2f      	ldr	r3, [pc, #188]	; (8000a2c <MX_ADC1_Init+0xe8>)
 8000970:	2200      	movs	r2, #0
 8000972:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000974:	4b2d      	ldr	r3, [pc, #180]	; (8000a2c <MX_ADC1_Init+0xe8>)
 8000976:	2208      	movs	r2, #8
 8000978:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800097a:	4b2c      	ldr	r3, [pc, #176]	; (8000a2c <MX_ADC1_Init+0xe8>)
 800097c:	2200      	movs	r2, #0
 800097e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000980:	4b2a      	ldr	r3, [pc, #168]	; (8000a2c <MX_ADC1_Init+0xe8>)
 8000982:	2204      	movs	r2, #4
 8000984:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000986:	4b29      	ldr	r3, [pc, #164]	; (8000a2c <MX_ADC1_Init+0xe8>)
 8000988:	2200      	movs	r2, #0
 800098a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800098c:	4b27      	ldr	r3, [pc, #156]	; (8000a2c <MX_ADC1_Init+0xe8>)
 800098e:	2201      	movs	r2, #1
 8000990:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000992:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <MX_ADC1_Init+0xe8>)
 8000994:	2201      	movs	r2, #1
 8000996:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000998:	4b24      	ldr	r3, [pc, #144]	; (8000a2c <MX_ADC1_Init+0xe8>)
 800099a:	2200      	movs	r2, #0
 800099c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 800099e:	4b23      	ldr	r3, [pc, #140]	; (8000a2c <MX_ADC1_Init+0xe8>)
 80009a0:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 80009a4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80009a6:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <MX_ADC1_Init+0xe8>)
 80009a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80009ae:	4b1f      	ldr	r3, [pc, #124]	; (8000a2c <MX_ADC1_Init+0xe8>)
 80009b0:	2203      	movs	r2, #3
 80009b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009b4:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <MX_ADC1_Init+0xe8>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009ba:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <MX_ADC1_Init+0xe8>)
 80009bc:	2200      	movs	r2, #0
 80009be:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80009c0:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <MX_ADC1_Init+0xe8>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009c8:	4818      	ldr	r0, [pc, #96]	; (8000a2c <MX_ADC1_Init+0xe8>)
 80009ca:	f001 fac5 	bl	8001f58 <HAL_ADC_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80009d4:	f000 fba8 	bl	8001128 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009d8:	2300      	movs	r3, #0
 80009da:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	4812      	ldr	r0, [pc, #72]	; (8000a2c <MX_ADC1_Init+0xe8>)
 80009e4:	f001 ffa0 	bl	8002928 <HAL_ADCEx_MultiModeConfigChannel>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80009ee:	f000 fb9b 	bl	8001128 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <MX_ADC1_Init+0xf0>)
 80009f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009f6:	2306      	movs	r3, #6
 80009f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009fe:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a02:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a04:	2304      	movs	r3, #4
 8000a06:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a10:	463b      	mov	r3, r7
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_ADC1_Init+0xe8>)
 8000a16:	f001 fbf9 	bl	800220c <HAL_ADC_ConfigChannel>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000a20:	f000 fb82 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	3728      	adds	r7, #40	; 0x28
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	2400021c 	.word	0x2400021c
 8000a30:	40022000 	.word	0x40022000
 8000a34:	14f00020 	.word	0x14f00020

08000a38 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	; 0x28
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	2224      	movs	r2, #36	; 0x24
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f009 fc17 	bl	800a278 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000a4a:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <MX_DAC1_Init+0x5c>)
 8000a4c:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <MX_DAC1_Init+0x60>)
 8000a4e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000a50:	4810      	ldr	r0, [pc, #64]	; (8000a94 <MX_DAC1_Init+0x5c>)
 8000a52:	f002 f910 	bl	8002c76 <HAL_DAC_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000a5c:	f000 fb64 	bl	8001128 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000a64:	2316      	movs	r3, #22
 8000a66:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2200      	movs	r2, #0
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4806      	ldr	r0, [pc, #24]	; (8000a94 <MX_DAC1_Init+0x5c>)
 8000a7c:	f002 fa42 	bl	8002f04 <HAL_DAC_ConfigChannel>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000a86:	f000 fb4f 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	3728      	adds	r7, #40	; 0x28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	240000b8 	.word	0x240000b8
 8000a98:	40007400 	.word	0x40007400

08000a9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000aa2:	f107 030c 	add.w	r3, r7, #12
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000abc:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <MX_TIM2_Init+0xa4>)
 8000abe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ac2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ac4:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <MX_TIM2_Init+0xa4>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aca:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <MX_TIM2_Init+0xa4>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <MX_TIM2_Init+0xa4>)
 8000ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad8:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <MX_TIM2_Init+0xa4>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ade:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <MX_TIM2_Init+0xa4>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ae4:	4816      	ldr	r0, [pc, #88]	; (8000b40 <MX_TIM2_Init+0xa4>)
 8000ae6:	f007 fd25 	bl	8008534 <HAL_TIM_Base_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000af0:	f000 fb1a 	bl	8001128 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000af4:	2307      	movs	r3, #7
 8000af6:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000af8:	2350      	movs	r3, #80	; 0x50
 8000afa:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 1;
 8000b00:	2301      	movs	r3, #1
 8000b02:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	4619      	mov	r1, r3
 8000b0a:	480d      	ldr	r0, [pc, #52]	; (8000b40 <MX_TIM2_Init+0xa4>)
 8000b0c:	f007 feed 	bl	80088ea <HAL_TIM_SlaveConfigSynchro>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000b16:	f000 fb07 	bl	8001128 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b22:	463b      	mov	r3, r7
 8000b24:	4619      	mov	r1, r3
 8000b26:	4806      	ldr	r0, [pc, #24]	; (8000b40 <MX_TIM2_Init+0xa4>)
 8000b28:	f008 f92e 	bl	8008d88 <HAL_TIMEx_MasterConfigSynchronization>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000b32:	f000 faf9 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b36:	bf00      	nop
 8000b38:	3720      	adds	r7, #32
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	24000344 	.word	0x24000344

08000b44 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b4a:	f107 030c 	add.w	r3, r7, #12
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
 8000b58:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b64:	4b1f      	ldr	r3, [pc, #124]	; (8000be4 <MX_TIM5_Init+0xa0>)
 8000b66:	4a20      	ldr	r2, [pc, #128]	; (8000be8 <MX_TIM5_Init+0xa4>)
 8000b68:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000b6a:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <MX_TIM5_Init+0xa0>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b70:	4b1c      	ldr	r3, [pc, #112]	; (8000be4 <MX_TIM5_Init+0xa0>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000b76:	4b1b      	ldr	r3, [pc, #108]	; (8000be4 <MX_TIM5_Init+0xa0>)
 8000b78:	f04f 32ff 	mov.w	r2, #4294967295
 8000b7c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b7e:	4b19      	ldr	r3, [pc, #100]	; (8000be4 <MX_TIM5_Init+0xa0>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b84:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <MX_TIM5_Init+0xa0>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000b8a:	4816      	ldr	r0, [pc, #88]	; (8000be4 <MX_TIM5_Init+0xa0>)
 8000b8c:	f007 fcd2 	bl	8008534 <HAL_TIM_Base_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8000b96:	f000 fac7 	bl	8001128 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000b9a:	2307      	movs	r3, #7
 8000b9c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8000b9e:	2360      	movs	r3, #96	; 0x60
 8000ba0:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 1;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000baa:	f107 030c 	add.w	r3, r7, #12
 8000bae:	4619      	mov	r1, r3
 8000bb0:	480c      	ldr	r0, [pc, #48]	; (8000be4 <MX_TIM5_Init+0xa0>)
 8000bb2:	f007 fe9a 	bl	80088ea <HAL_TIM_SlaveConfigSynchro>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000bbc:	f000 fab4 	bl	8001128 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000bc8:	463b      	mov	r3, r7
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4805      	ldr	r0, [pc, #20]	; (8000be4 <MX_TIM5_Init+0xa0>)
 8000bce:	f008 f8db 	bl	8008d88 <HAL_TIMEx_MasterConfigSynchronization>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000bd8:	f000 faa6 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000bdc:	bf00      	nop
 8000bde:	3720      	adds	r7, #32
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	240001d0 	.word	0x240001d0
 8000be8:	40000c00 	.word	0x40000c00

08000bec <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000bfc:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <MX_TIM6_Init+0x64>)
 8000bfe:	4a15      	ldr	r2, [pc, #84]	; (8000c54 <MX_TIM6_Init+0x68>)
 8000c00:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000c02:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <MX_TIM6_Init+0x64>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c08:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <MX_TIM6_Init+0x64>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1919;//960 - 1;
 8000c0e:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <MX_TIM6_Init+0x64>)
 8000c10:	f240 727f 	movw	r2, #1919	; 0x77f
 8000c14:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c16:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <MX_TIM6_Init+0x64>)
 8000c18:	2280      	movs	r2, #128	; 0x80
 8000c1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000c1c:	480c      	ldr	r0, [pc, #48]	; (8000c50 <MX_TIM6_Init+0x64>)
 8000c1e:	f007 fc89 	bl	8008534 <HAL_TIM_Base_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000c28:	f000 fa7e 	bl	8001128 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c2c:	2320      	movs	r3, #32
 8000c2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	4619      	mov	r1, r3
 8000c38:	4805      	ldr	r0, [pc, #20]	; (8000c50 <MX_TIM6_Init+0x64>)
 8000c3a:	f008 f8a5 	bl	8008d88 <HAL_TIMEx_MasterConfigSynchronization>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000c44:	f000 fa70 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	240002f8 	.word	0x240002f8
 8000c54:	40001000 	.word	0x40001000

08000c58 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000c68:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <MX_TIM7_Init+0x64>)
 8000c6a:	4a15      	ldr	r2, [pc, #84]	; (8000cc0 <MX_TIM7_Init+0x68>)
 8000c6c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 96-1;
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <MX_TIM7_Init+0x64>)
 8000c70:	225f      	movs	r2, #95	; 0x5f
 8000c72:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c74:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <MX_TIM7_Init+0x64>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <MX_TIM7_Init+0x64>)
 8000c7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c80:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <MX_TIM7_Init+0x64>)
 8000c84:	2280      	movs	r2, #128	; 0x80
 8000c86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000c88:	480c      	ldr	r0, [pc, #48]	; (8000cbc <MX_TIM7_Init+0x64>)
 8000c8a:	f007 fc53 	bl	8008534 <HAL_TIM_Base_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000c94:	f000 fa48 	bl	8001128 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4805      	ldr	r0, [pc, #20]	; (8000cbc <MX_TIM7_Init+0x64>)
 8000ca6:	f008 f86f 	bl	8008d88 <HAL_TIMEx_MasterConfigSynchronization>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000cb0:	f000 fa3a 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000cb4:	bf00      	nop
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	24000390 	.word	0x24000390
 8000cc0:	40001400 	.word	0x40001400

08000cc4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cc8:	4b22      	ldr	r3, [pc, #136]	; (8000d54 <MX_USART3_UART_Init+0x90>)
 8000cca:	4a23      	ldr	r2, [pc, #140]	; (8000d58 <MX_USART3_UART_Init+0x94>)
 8000ccc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cce:	4b21      	ldr	r3, [pc, #132]	; (8000d54 <MX_USART3_UART_Init+0x90>)
 8000cd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cd4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd6:	4b1f      	ldr	r3, [pc, #124]	; (8000d54 <MX_USART3_UART_Init+0x90>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cdc:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <MX_USART3_UART_Init+0x90>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	; (8000d54 <MX_USART3_UART_Init+0x90>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ce8:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <MX_USART3_UART_Init+0x90>)
 8000cea:	220c      	movs	r2, #12
 8000cec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <MX_USART3_UART_Init+0x90>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf4:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <MX_USART3_UART_Init+0x90>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cfa:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <MX_USART3_UART_Init+0x90>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d00:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <MX_USART3_UART_Init+0x90>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d06:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <MX_USART3_UART_Init+0x90>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d0c:	4811      	ldr	r0, [pc, #68]	; (8000d54 <MX_USART3_UART_Init+0x90>)
 8000d0e:	f008 f8e1 	bl	8008ed4 <HAL_UART_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d18:	f000 fa06 	bl	8001128 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	480d      	ldr	r0, [pc, #52]	; (8000d54 <MX_USART3_UART_Init+0x90>)
 8000d20:	f009 f977 	bl	800a012 <HAL_UARTEx_SetTxFifoThreshold>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d2a:	f000 f9fd 	bl	8001128 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4808      	ldr	r0, [pc, #32]	; (8000d54 <MX_USART3_UART_Init+0x90>)
 8000d32:	f009 f9ac 	bl	800a08e <HAL_UARTEx_SetRxFifoThreshold>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d3c:	f000 f9f4 	bl	8001128 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d40:	4804      	ldr	r0, [pc, #16]	; (8000d54 <MX_USART3_UART_Init+0x90>)
 8000d42:	f009 f92d 	bl	8009fa0 <HAL_UARTEx_DisableFifoMode>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d4c:	f000 f9ec 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	240000cc 	.word	0x240000cc
 8000d58:	40004800 	.word	0x40004800

08000d5c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
	...

08000d6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d72:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <MX_DMA_Init+0x6c>)
 8000d74:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000d78:	4a17      	ldr	r2, [pc, #92]	; (8000dd8 <MX_DMA_Init+0x6c>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000d82:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <MX_DMA_Init+0x6c>)
 8000d84:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <MX_DMA_Init+0x6c>)
 8000d92:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000d96:	4a10      	ldr	r2, [pc, #64]	; (8000dd8 <MX_DMA_Init+0x6c>)
 8000d98:	f043 0302 	orr.w	r3, r3, #2
 8000d9c:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000da0:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <MX_DMA_Init+0x6c>)
 8000da2:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	603b      	str	r3, [r7, #0]
 8000dac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2100      	movs	r1, #0
 8000db2:	200b      	movs	r0, #11
 8000db4:	f001 ff2b 	bl	8002c0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000db8:	200b      	movs	r0, #11
 8000dba:	f001 ff42 	bl	8002c42 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2038      	movs	r0, #56	; 0x38
 8000dc4:	f001 ff23 	bl	8002c0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000dc8:	2038      	movs	r0, #56	; 0x38
 8000dca:	f001 ff3a 	bl	8002c42 <HAL_NVIC_EnableIRQ>

}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	58024400 	.word	0x58024400

08000ddc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08e      	sub	sp, #56	; 0x38
 8000de0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
 8000df0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df2:	4b87      	ldr	r3, [pc, #540]	; (8001010 <MX_GPIO_Init+0x234>)
 8000df4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000df8:	4a85      	ldr	r2, [pc, #532]	; (8001010 <MX_GPIO_Init+0x234>)
 8000dfa:	f043 0304 	orr.w	r3, r3, #4
 8000dfe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e02:	4b83      	ldr	r3, [pc, #524]	; (8001010 <MX_GPIO_Init+0x234>)
 8000e04:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e08:	f003 0304 	and.w	r3, r3, #4
 8000e0c:	623b      	str	r3, [r7, #32]
 8000e0e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e10:	4b7f      	ldr	r3, [pc, #508]	; (8001010 <MX_GPIO_Init+0x234>)
 8000e12:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e16:	4a7e      	ldr	r2, [pc, #504]	; (8001010 <MX_GPIO_Init+0x234>)
 8000e18:	f043 0320 	orr.w	r3, r3, #32
 8000e1c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e20:	4b7b      	ldr	r3, [pc, #492]	; (8001010 <MX_GPIO_Init+0x234>)
 8000e22:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e26:	f003 0320 	and.w	r3, r3, #32
 8000e2a:	61fb      	str	r3, [r7, #28]
 8000e2c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e2e:	4b78      	ldr	r3, [pc, #480]	; (8001010 <MX_GPIO_Init+0x234>)
 8000e30:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e34:	4a76      	ldr	r2, [pc, #472]	; (8001010 <MX_GPIO_Init+0x234>)
 8000e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e3a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e3e:	4b74      	ldr	r3, [pc, #464]	; (8001010 <MX_GPIO_Init+0x234>)
 8000e40:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e48:	61bb      	str	r3, [r7, #24]
 8000e4a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4c:	4b70      	ldr	r3, [pc, #448]	; (8001010 <MX_GPIO_Init+0x234>)
 8000e4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e52:	4a6f      	ldr	r2, [pc, #444]	; (8001010 <MX_GPIO_Init+0x234>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e5c:	4b6c      	ldr	r3, [pc, #432]	; (8001010 <MX_GPIO_Init+0x234>)
 8000e5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6a:	4b69      	ldr	r3, [pc, #420]	; (8001010 <MX_GPIO_Init+0x234>)
 8000e6c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e70:	4a67      	ldr	r2, [pc, #412]	; (8001010 <MX_GPIO_Init+0x234>)
 8000e72:	f043 0302 	orr.w	r3, r3, #2
 8000e76:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e7a:	4b65      	ldr	r3, [pc, #404]	; (8001010 <MX_GPIO_Init+0x234>)
 8000e7c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e88:	4b61      	ldr	r3, [pc, #388]	; (8001010 <MX_GPIO_Init+0x234>)
 8000e8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e8e:	4a60      	ldr	r2, [pc, #384]	; (8001010 <MX_GPIO_Init+0x234>)
 8000e90:	f043 0308 	orr.w	r3, r3, #8
 8000e94:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e98:	4b5d      	ldr	r3, [pc, #372]	; (8001010 <MX_GPIO_Init+0x234>)
 8000e9a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e9e:	f003 0308 	and.w	r3, r3, #8
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ea6:	4b5a      	ldr	r3, [pc, #360]	; (8001010 <MX_GPIO_Init+0x234>)
 8000ea8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eac:	4a58      	ldr	r2, [pc, #352]	; (8001010 <MX_GPIO_Init+0x234>)
 8000eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eb2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000eb6:	4b56      	ldr	r3, [pc, #344]	; (8001010 <MX_GPIO_Init+0x234>)
 8000eb8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ec4:	4b52      	ldr	r3, [pc, #328]	; (8001010 <MX_GPIO_Init+0x234>)
 8000ec6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eca:	4a51      	ldr	r2, [pc, #324]	; (8001010 <MX_GPIO_Init+0x234>)
 8000ecc:	f043 0310 	orr.w	r3, r3, #16
 8000ed0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ed4:	4b4e      	ldr	r3, [pc, #312]	; (8001010 <MX_GPIO_Init+0x234>)
 8000ed6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eda:	f003 0310 	and.w	r3, r3, #16
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ee8:	484a      	ldr	r0, [pc, #296]	; (8001014 <MX_GPIO_Init+0x238>)
 8000eea:	f004 fcf1 	bl	80058d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f244 0101 	movw	r1, #16385	; 0x4001
 8000ef4:	4848      	ldr	r0, [pc, #288]	; (8001018 <MX_GPIO_Init+0x23c>)
 8000ef6:	f004 fceb 	bl	80058d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2102      	movs	r1, #2
 8000efe:	4847      	ldr	r0, [pc, #284]	; (800101c <MX_GPIO_Init+0x240>)
 8000f00:	f004 fce6 	bl	80058d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f16:	4619      	mov	r1, r3
 8000f18:	4841      	ldr	r0, [pc, #260]	; (8001020 <MX_GPIO_Init+0x244>)
 8000f1a:	f004 fb29 	bl	8005570 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000f1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f24:	2301      	movs	r3, #1
 8000f26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f34:	4619      	mov	r1, r3
 8000f36:	4837      	ldr	r0, [pc, #220]	; (8001014 <MX_GPIO_Init+0x238>)
 8000f38:	f004 fb1a 	bl	8005570 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000f3c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f42:	2301      	movs	r3, #1
 8000f44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f52:	4619      	mov	r1, r3
 8000f54:	4830      	ldr	r0, [pc, #192]	; (8001018 <MX_GPIO_Init+0x23c>)
 8000f56:	f004 fb0b 	bl	8005570 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000f5a:	2380      	movs	r3, #128	; 0x80
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f5e:	4b31      	ldr	r3, [pc, #196]	; (8001024 <MX_GPIO_Init+0x248>)
 8000f60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	482e      	ldr	r0, [pc, #184]	; (8001028 <MX_GPIO_Init+0x24c>)
 8000f6e:	f004 faff 	bl	8005570 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000f72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f84:	4619      	mov	r1, r3
 8000f86:	4829      	ldr	r0, [pc, #164]	; (800102c <MX_GPIO_Init+0x250>)
 8000f88:	f004 faf2 	bl	8005570 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000f8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	2302      	movs	r3, #2
 8000f94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000f9e:	230a      	movs	r3, #10
 8000fa0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4820      	ldr	r0, [pc, #128]	; (800102c <MX_GPIO_Init+0x250>)
 8000faa:	f004 fae1 	bl	8005570 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000fae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4819      	ldr	r0, [pc, #100]	; (800102c <MX_GPIO_Init+0x250>)
 8000fc8:	f004 fad2 	bl	8005570 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fcc:	23c0      	movs	r3, #192	; 0xc0
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fdc:	2307      	movs	r3, #7
 8000fde:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	480c      	ldr	r0, [pc, #48]	; (8001018 <MX_GPIO_Init+0x23c>)
 8000fe8:	f004 fac2 	bl	8005570 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fec:	2302      	movs	r3, #2
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ffc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001000:	4619      	mov	r1, r3
 8001002:	4806      	ldr	r0, [pc, #24]	; (800101c <MX_GPIO_Init+0x240>)
 8001004:	f004 fab4 	bl	8005570 <HAL_GPIO_Init>

}
 8001008:	bf00      	nop
 800100a:	3738      	adds	r7, #56	; 0x38
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	58024400 	.word	0x58024400
 8001014:	58021400 	.word	0x58021400
 8001018:	58020400 	.word	0x58020400
 800101c:	58021000 	.word	0x58021000
 8001020:	58020800 	.word	0x58020800
 8001024:	11110000 	.word	0x11110000
 8001028:	58021800 	.word	0x58021800
 800102c:	58020000 	.word	0x58020000

08001030 <HAL_TIM_PeriodElapsedCallback>:
/**
  * @brief  This function is executed every millisecond.
  * This adds up all measured input pulses on timers 2 and 5, and then averages to find the average frequency.
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);

	if (ms == 0){
 8001038:	4b2d      	ldr	r3, [pc, #180]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d107      	bne.n	8001050 <HAL_TIM_PeriodElapsedCallback+0x20>
		freq_timer_count = 0;
 8001040:	4b2c      	ldr	r3, [pc, #176]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
		vol_timer_count = 0;
 8001048:	4b2b      	ldr	r3, [pc, #172]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
	}
	freq_timer_count += __HAL_TIM_GET_COUNTER(&htim2);
 8001050:	4b2a      	ldr	r3, [pc, #168]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001056:	ee07 3a90 	vmov	s15, r3
 800105a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800105e:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001060:	edd3 7a00 	vldr	s15, [r3]
 8001064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001068:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800106a:	edc3 7a00 	vstr	s15, [r3]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800106e:	4b23      	ldr	r3, [pc, #140]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2200      	movs	r2, #0
 8001074:	625a      	str	r2, [r3, #36]	; 0x24
	vol_timer_count += __HAL_TIM_GET_COUNTER(&htim5);
 8001076:	4b22      	ldr	r3, [pc, #136]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107c:	ee07 3a90 	vmov	s15, r3
 8001080:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001084:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001086:	edd3 7a00 	vldr	s15, [r3]
 800108a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800108e:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001090:	edc3 7a00 	vstr	s15, [r3]
	__HAL_TIM_SET_COUNTER(&htim5, 0);
 8001094:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2200      	movs	r2, #0
 800109a:	625a      	str	r2, [r3, #36]	; 0x24
	ms++;
 800109c:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	3301      	adds	r3, #1
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80010a6:	701a      	strb	r2, [r3, #0]
	if (ms == MILLISECONDS) {
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b0a      	cmp	r3, #10
 80010ae:	d119      	bne.n	80010e4 <HAL_TIM_PeriodElapsedCallback+0xb4>
		update_freq_flag = 1;
 80010b0:	4b14      	ldr	r3, [pc, #80]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	701a      	strb	r2, [r3, #0]
		freq_timer_count /= MILLISECONDS;
 80010b6:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80010b8:	ed93 7a00 	vldr	s14, [r3]
 80010bc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80010c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010c4:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80010c6:	edc3 7a00 	vstr	s15, [r3]
		vol_timer_count /= MILLISECONDS;
 80010ca:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80010cc:	ed93 7a00 	vldr	s14, [r3]
 80010d0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80010d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010d8:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80010da:	edc3 7a00 	vstr	s15, [r3]
		ms = 0;
 80010de:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
	}
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	240000a4 	.word	0x240000a4
 80010f4:	2400009c 	.word	0x2400009c
 80010f8:	240000a0 	.word	0x240000a0
 80010fc:	24000344 	.word	0x24000344
 8001100:	240001d0 	.word	0x240001d0
 8001104:	240003dc 	.word	0x240003dc

08001108 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1 (DAC_HandleTypeDef * hdac) {
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
	dac_comp_flag = 1;
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <HAL_DAC_ConvCpltCallbackCh1+0x1c>)
 8001112:	2201      	movs	r2, #1
 8001114:	701a      	strb	r2, [r3, #0]
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	24000000 	.word	0x24000000

08001128 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <init_nco>:
 * @returns pointer to an initialized structure of type #NCO_T which may
 * be used to get NCO samples.
 */

NCO_T *init_nco(  float f0,            //!< [in] Frequency in cycles per sample
                  float theta){        //!< [in] Offset angle in radians
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001142:	edc7 0a00 	vstr	s1, [r7]

    //Allocate memory for s
    NCO_T *s = malloc(sizeof(NCO_T));
 8001146:	2010      	movs	r0, #16
 8001148:	f009 f88e 	bl	800a268 <malloc>
 800114c:	4603      	mov	r3, r0
 800114e:	60fb      	str	r3, [r7, #12]
    if (s == NULL) {
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d105      	bne.n	8001162 <init_nco+0x2a>
        printf("Failed to allocate memory for s\n");
 8001156:	481c      	ldr	r0, [pc, #112]	; (80011c8 <init_nco+0x90>)
 8001158:	f009 f9a8 	bl	800a4ac <puts>
        exit(EXIT_FAILURE);
 800115c:	2001      	movs	r0, #1
 800115e:	f009 f84b 	bl	800a1f8 <exit>
    }

    //Initialize struct variables
    s->f0 = (int)(f0 * 2 * (1u << 31));
 8001162:	edd7 7a01 	vldr	s15, [r7, #4]
 8001166:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800116a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80011cc <init_nco+0x94>
 800116e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001172:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001176:	ee17 2a90 	vmov	r2, s15
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	601a      	str	r2, [r3, #0]
    s->theta = (int)((theta * 2 * (1u << 31))/(2.*PI));
 800117e:	edd7 7a00 	vldr	s15, [r7]
 8001182:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001186:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80011cc <init_nco+0x94>
 800118a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800118e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001192:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80011c0 <init_nco+0x88>
 8001196:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800119a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800119e:	ee17 2a90 	vmov	r2, s15
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	605a      	str	r2, [r3, #4]
    s->acc = 0;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2200      	movs	r2, #0
 80011aa:	60da      	str	r2, [r3, #12]
    s->amp = 0;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f04f 0200 	mov.w	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]

    //Return pointer to struct NCO_T
    return s;
 80011b4:	68fb      	ldr	r3, [r7, #12]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	53c8d4f1 	.word	0x53c8d4f1
 80011c4:	401921fb 	.word	0x401921fb
 80011c8:	0800abb4 	.word	0x0800abb4
 80011cc:	4f000000 	.word	0x4f000000

080011d0 <nco_get_samples>:
 * phase discontinuities from one call to the next.
 */

void nco_get_samples(NCO_T *s,         //!< [in,out] Pointer to NCO_T struct.
                     uint16_t *y,         //!< [out] Pointer to an array for storage of output samples.
                     int n_samples){   //!< [in] Number of NCO output samples to generate.
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
	unsigned int i;
	unsigned int kprime;
	unsigned int index;

	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80011dc:	2101      	movs	r1, #1
 80011de:	4828      	ldr	r0, [pc, #160]	; (8001280 <nco_get_samples+0xb0>)
 80011e0:	f004 fb8f 	bl	8005902 <HAL_GPIO_TogglePin>
	for (i = 0; i < n_samples; i++) {
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
 80011e8:	e03d      	b.n	8001266 <nco_get_samples+0x96>

        if ((i == 0) && (s->acc == 0)) {
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d103      	bne.n	80011f8 <nco_get_samples+0x28>
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d008      	beq.n	800120a <nco_get_samples+0x3a>
        } else {
            /* Keep track of where we are in the sine wave */
            s->acc += s->f0;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	461a      	mov	r2, r3
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4413      	add	r3, r2
 8001204:	461a      	mov	r2, r3
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	60da      	str	r2, [r3, #12]
        }

        kprime = s->acc + s->theta;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	461a      	mov	r2, r3
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	4413      	add	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]

        index = kprime >> 23;
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	0ddb      	lsrs	r3, r3, #23
 800121c:	617b      	str	r3, [r7, #20]

        /* Convert from float to 12-bit */
        y[i] = (unsigned int)((cosine[index] + 1) * 2047) * s->amp;
 800121e:	4a19      	ldr	r2, [pc, #100]	; (8001284 <nco_get_samples+0xb4>)
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4413      	add	r3, r2
 8001226:	edd3 7a00 	vldr	s15, [r3]
 800122a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800122e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001232:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001288 <nco_get_samples+0xb8>
 8001236:	ee67 7a87 	vmul.f32	s15, s15, s14
 800123a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800123e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	edd3 7a02 	vldr	s15, [r3, #8]
 8001248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	68ba      	ldr	r2, [r7, #8]
 8001252:	4413      	add	r3, r2
 8001254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001258:	ee17 2a90 	vmov	r2, s15
 800125c:	b292      	uxth	r2, r2
 800125e:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < n_samples; i++) {
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	3301      	adds	r3, #1
 8001264:	61fb      	str	r3, [r7, #28]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69fa      	ldr	r2, [r7, #28]
 800126a:	429a      	cmp	r2, r3
 800126c:	d3bd      	bcc.n	80011ea <nco_get_samples+0x1a>
	}
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800126e:	2101      	movs	r1, #1
 8001270:	4803      	ldr	r0, [pc, #12]	; (8001280 <nco_get_samples+0xb0>)
 8001272:	f004 fb46 	bl	8005902 <HAL_GPIO_TogglePin>
}
 8001276:	bf00      	nop
 8001278:	3720      	adds	r7, #32
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	58020400 	.word	0x58020400
 8001284:	0800abe4 	.word	0x0800abe4
 8001288:	44ffe000 	.word	0x44ffe000

0800128c <nco_set_frequency>:
 * @returns On return, The NCO_T structure s is modified so that subsequent calls to nco_get_samples()
 * will operate at frequency f_new (without loss of phase continuity).
 */

void nco_set_frequency( NCO_T *s,      //!< [in,out] Pointer to NCO_T struct.
                        float f_new){  //!< [in] New NCO frequency (in cycles/sample).
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	ed87 0a00 	vstr	s0, [r7]
    s->f0 = (int)(f_new * 2 * (1u << 31));
 8001298:	edd7 7a00 	vldr	s15, [r7]
 800129c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012a0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80012c0 <nco_set_frequency+0x34>
 80012a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ac:	ee17 2a90 	vmov	r2, s15
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	601a      	str	r2, [r3, #0]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	4f000000 	.word	0x4f000000

080012c4 <nco_set_amplitude>:
 * @returns On return, The NCO_T structure s is modified so that subsequent calls to nco_get_samples()
 * will operate with the amplitude given by amp
 */

void nco_set_amplitude(	NCO_T *s,
						int amp){
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
	if (amp <= 5000) {
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d4:	4293      	cmp	r3, r2
 80012d6:	dc20      	bgt.n	800131a <nco_set_amplitude+0x56>
		amp = 5000 - amp;
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	f241 3388 	movw	r3, #5000	; 0x1388
 80012de:	1a9b      	subs	r3, r3, r2
 80012e0:	603b      	str	r3, [r7, #0]
		s->amp = (float)amp / 10000.;
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	ee07 3a90 	vmov	s15, r3
 80012e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ec:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001330 <nco_set_amplitude+0x6c>
 80012f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	edc3 7a02 	vstr	s15, [r3, #8]
		/* Don't want to saturate the output */
		if (s->amp > 1) {
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8001300:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001304:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130c:	dc00      	bgt.n	8001310 <nco_set_amplitude+0x4c>
			s->amp = 0;
		}
	}else {
		s->amp = 0.0;
	}
}
 800130e:	e008      	b.n	8001322 <nco_set_amplitude+0x5e>
			s->amp = 0;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f04f 0200 	mov.w	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
}
 8001318:	e003      	b.n	8001322 <nco_set_amplitude+0x5e>
		s->amp = 0.0;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	461c4000 	.word	0x461c4000

08001334 <set_blocksize>:
/*!
 * @brief Set the block size of half the ADC buffer.
 *
 * @returns On return, the blocksize and buffersize are updated
 */
void set_blocksize( uint32_t new_blocksize) {
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	ADC_blocksize = new_blocksize;
 800133c:	4a06      	ldr	r2, [pc, #24]	; (8001358 <set_blocksize+0x24>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6013      	str	r3, [r2, #0]
	ADC_buffer_len = 2 * new_blocksize;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	4a05      	ldr	r2, [pc, #20]	; (800135c <set_blocksize+0x28>)
 8001348:	6013      	str	r3, [r2, #0]
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	24000004 	.word	0x24000004
 800135c:	24000008 	.word	0x24000008

08001360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001366:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <HAL_MspInit+0x30>)
 8001368:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800136c:	4a08      	ldr	r2, [pc, #32]	; (8001390 <HAL_MspInit+0x30>)
 800136e:	f043 0302 	orr.w	r3, r3, #2
 8001372:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_MspInit+0x30>)
 8001378:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800137c:	f003 0302 	and.w	r3, r3, #2
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	58024400 	.word	0x58024400

08001394 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08a      	sub	sp, #40	; 0x28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a30      	ldr	r2, [pc, #192]	; (8001474 <HAL_ADC_MspInit+0xe0>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d159      	bne.n	800146a <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80013b6:	4b30      	ldr	r3, [pc, #192]	; (8001478 <HAL_ADC_MspInit+0xe4>)
 80013b8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80013bc:	4a2e      	ldr	r2, [pc, #184]	; (8001478 <HAL_ADC_MspInit+0xe4>)
 80013be:	f043 0320 	orr.w	r3, r3, #32
 80013c2:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80013c6:	4b2c      	ldr	r3, [pc, #176]	; (8001478 <HAL_ADC_MspInit+0xe4>)
 80013c8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80013cc:	f003 0320 	and.w	r3, r3, #32
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d4:	4b28      	ldr	r3, [pc, #160]	; (8001478 <HAL_ADC_MspInit+0xe4>)
 80013d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013da:	4a27      	ldr	r2, [pc, #156]	; (8001478 <HAL_ADC_MspInit+0xe4>)
 80013dc:	f043 0302 	orr.w	r3, r3, #2
 80013e0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013e4:	4b24      	ldr	r3, [pc, #144]	; (8001478 <HAL_ADC_MspInit+0xe4>)
 80013e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013f2:	2302      	movs	r3, #2
 80013f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013f6:	2303      	movs	r3, #3
 80013f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	4619      	mov	r1, r3
 8001404:	481d      	ldr	r0, [pc, #116]	; (800147c <HAL_ADC_MspInit+0xe8>)
 8001406:	f004 f8b3 	bl	8005570 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800140a:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <HAL_ADC_MspInit+0xec>)
 800140c:	4a1d      	ldr	r2, [pc, #116]	; (8001484 <HAL_ADC_MspInit+0xf0>)
 800140e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <HAL_ADC_MspInit+0xec>)
 8001412:	2209      	movs	r2, #9
 8001414:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001416:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <HAL_ADC_MspInit+0xec>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800141c:	4b18      	ldr	r3, [pc, #96]	; (8001480 <HAL_ADC_MspInit+0xec>)
 800141e:	2200      	movs	r2, #0
 8001420:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001422:	4b17      	ldr	r3, [pc, #92]	; (8001480 <HAL_ADC_MspInit+0xec>)
 8001424:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001428:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <HAL_ADC_MspInit+0xec>)
 800142c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001430:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001432:	4b13      	ldr	r3, [pc, #76]	; (8001480 <HAL_ADC_MspInit+0xec>)
 8001434:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001438:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800143a:	4b11      	ldr	r3, [pc, #68]	; (8001480 <HAL_ADC_MspInit+0xec>)
 800143c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001440:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001442:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <HAL_ADC_MspInit+0xec>)
 8001444:	2200      	movs	r2, #0
 8001446:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001448:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <HAL_ADC_MspInit+0xec>)
 800144a:	2200      	movs	r2, #0
 800144c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800144e:	480c      	ldr	r0, [pc, #48]	; (8001480 <HAL_ADC_MspInit+0xec>)
 8001450:	f001 ff12 	bl	8003278 <HAL_DMA_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <HAL_ADC_MspInit+0xca>
    {
      Error_Handler();
 800145a:	f7ff fe65 	bl	8001128 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a07      	ldr	r2, [pc, #28]	; (8001480 <HAL_ADC_MspInit+0xec>)
 8001462:	64da      	str	r2, [r3, #76]	; 0x4c
 8001464:	4a06      	ldr	r2, [pc, #24]	; (8001480 <HAL_ADC_MspInit+0xec>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800146a:	bf00      	nop
 800146c:	3728      	adds	r7, #40	; 0x28
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40022000 	.word	0x40022000
 8001478:	58024400 	.word	0x58024400
 800147c:	58020400 	.word	0x58020400
 8001480:	24000280 	.word	0x24000280
 8001484:	40020010 	.word	0x40020010

08001488 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	; 0x28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a30      	ldr	r2, [pc, #192]	; (8001568 <HAL_DAC_MspInit+0xe0>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d159      	bne.n	800155e <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80014aa:	4b30      	ldr	r3, [pc, #192]	; (800156c <HAL_DAC_MspInit+0xe4>)
 80014ac:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80014b0:	4a2e      	ldr	r2, [pc, #184]	; (800156c <HAL_DAC_MspInit+0xe4>)
 80014b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80014b6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80014ba:	4b2c      	ldr	r3, [pc, #176]	; (800156c <HAL_DAC_MspInit+0xe4>)
 80014bc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80014c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c8:	4b28      	ldr	r3, [pc, #160]	; (800156c <HAL_DAC_MspInit+0xe4>)
 80014ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014ce:	4a27      	ldr	r2, [pc, #156]	; (800156c <HAL_DAC_MspInit+0xe4>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80014d8:	4b24      	ldr	r3, [pc, #144]	; (800156c <HAL_DAC_MspInit+0xe4>)
 80014da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014e6:	2310      	movs	r3, #16
 80014e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ea:	2303      	movs	r3, #3
 80014ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	4619      	mov	r1, r3
 80014f8:	481d      	ldr	r0, [pc, #116]	; (8001570 <HAL_DAC_MspInit+0xe8>)
 80014fa:	f004 f839 	bl	8005570 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA2_Stream0;
 80014fe:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <HAL_DAC_MspInit+0xec>)
 8001500:	4a1d      	ldr	r2, [pc, #116]	; (8001578 <HAL_DAC_MspInit+0xf0>)
 8001502:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001504:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <HAL_DAC_MspInit+0xec>)
 8001506:	2243      	movs	r2, #67	; 0x43
 8001508:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800150a:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <HAL_DAC_MspInit+0xec>)
 800150c:	2240      	movs	r2, #64	; 0x40
 800150e:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001510:	4b18      	ldr	r3, [pc, #96]	; (8001574 <HAL_DAC_MspInit+0xec>)
 8001512:	2200      	movs	r2, #0
 8001514:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001516:	4b17      	ldr	r3, [pc, #92]	; (8001574 <HAL_DAC_MspInit+0xec>)
 8001518:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800151c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <HAL_DAC_MspInit+0xec>)
 8001520:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001524:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001526:	4b13      	ldr	r3, [pc, #76]	; (8001574 <HAL_DAC_MspInit+0xec>)
 8001528:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800152c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <HAL_DAC_MspInit+0xec>)
 8001530:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001534:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001536:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <HAL_DAC_MspInit+0xec>)
 8001538:	2200      	movs	r2, #0
 800153a:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800153c:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <HAL_DAC_MspInit+0xec>)
 800153e:	2200      	movs	r2, #0
 8001540:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001542:	480c      	ldr	r0, [pc, #48]	; (8001574 <HAL_DAC_MspInit+0xec>)
 8001544:	f001 fe98 	bl	8003278 <HAL_DMA_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800154e:	f7ff fdeb 	bl	8001128 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a07      	ldr	r2, [pc, #28]	; (8001574 <HAL_DAC_MspInit+0xec>)
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	4a06      	ldr	r2, [pc, #24]	; (8001574 <HAL_DAC_MspInit+0xec>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800155e:	bf00      	nop
 8001560:	3728      	adds	r7, #40	; 0x28
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40007400 	.word	0x40007400
 800156c:	58024400 	.word	0x58024400
 8001570:	58020000 	.word	0x58020000
 8001574:	24000158 	.word	0x24000158
 8001578:	40020410 	.word	0x40020410

0800157c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08e      	sub	sp, #56	; 0x38
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800159c:	d12e      	bne.n	80015fc <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800159e:	4b4c      	ldr	r3, [pc, #304]	; (80016d0 <HAL_TIM_Base_MspInit+0x154>)
 80015a0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80015a4:	4a4a      	ldr	r2, [pc, #296]	; (80016d0 <HAL_TIM_Base_MspInit+0x154>)
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80015ae:	4b48      	ldr	r3, [pc, #288]	; (80016d0 <HAL_TIM_Base_MspInit+0x154>)
 80015b0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	623b      	str	r3, [r7, #32]
 80015ba:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015bc:	4b44      	ldr	r3, [pc, #272]	; (80016d0 <HAL_TIM_Base_MspInit+0x154>)
 80015be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015c2:	4a43      	ldr	r2, [pc, #268]	; (80016d0 <HAL_TIM_Base_MspInit+0x154>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80015cc:	4b40      	ldr	r3, [pc, #256]	; (80016d0 <HAL_TIM_Base_MspInit+0x154>)
 80015ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	61fb      	str	r3, [r7, #28]
 80015d8:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015da:	2301      	movs	r3, #1
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015de:	2302      	movs	r3, #2
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e6:	2303      	movs	r3, #3
 80015e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015ea:	2301      	movs	r3, #1
 80015ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f2:	4619      	mov	r1, r3
 80015f4:	4837      	ldr	r0, [pc, #220]	; (80016d4 <HAL_TIM_Base_MspInit+0x158>)
 80015f6:	f003 ffbb 	bl	8005570 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80015fa:	e064      	b.n	80016c6 <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM5)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a35      	ldr	r2, [pc, #212]	; (80016d8 <HAL_TIM_Base_MspInit+0x15c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d12e      	bne.n	8001664 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001606:	4b32      	ldr	r3, [pc, #200]	; (80016d0 <HAL_TIM_Base_MspInit+0x154>)
 8001608:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800160c:	4a30      	ldr	r2, [pc, #192]	; (80016d0 <HAL_TIM_Base_MspInit+0x154>)
 800160e:	f043 0308 	orr.w	r3, r3, #8
 8001612:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001616:	4b2e      	ldr	r3, [pc, #184]	; (80016d0 <HAL_TIM_Base_MspInit+0x154>)
 8001618:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800161c:	f003 0308 	and.w	r3, r3, #8
 8001620:	61bb      	str	r3, [r7, #24]
 8001622:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001624:	4b2a      	ldr	r3, [pc, #168]	; (80016d0 <HAL_TIM_Base_MspInit+0x154>)
 8001626:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800162a:	4a29      	ldr	r2, [pc, #164]	; (80016d0 <HAL_TIM_Base_MspInit+0x154>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001634:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <HAL_TIM_Base_MspInit+0x154>)
 8001636:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001642:	2302      	movs	r3, #2
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164e:	2303      	movs	r3, #3
 8001650:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001652:	2302      	movs	r3, #2
 8001654:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165a:	4619      	mov	r1, r3
 800165c:	481d      	ldr	r0, [pc, #116]	; (80016d4 <HAL_TIM_Base_MspInit+0x158>)
 800165e:	f003 ff87 	bl	8005570 <HAL_GPIO_Init>
}
 8001662:	e030      	b.n	80016c6 <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM6)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a1c      	ldr	r2, [pc, #112]	; (80016dc <HAL_TIM_Base_MspInit+0x160>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d10f      	bne.n	800168e <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800166e:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <HAL_TIM_Base_MspInit+0x154>)
 8001670:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001674:	4a16      	ldr	r2, [pc, #88]	; (80016d0 <HAL_TIM_Base_MspInit+0x154>)
 8001676:	f043 0310 	orr.w	r3, r3, #16
 800167a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800167e:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <HAL_TIM_Base_MspInit+0x154>)
 8001680:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001684:	f003 0310 	and.w	r3, r3, #16
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	693b      	ldr	r3, [r7, #16]
}
 800168c:	e01b      	b.n	80016c6 <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM7)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a13      	ldr	r2, [pc, #76]	; (80016e0 <HAL_TIM_Base_MspInit+0x164>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d116      	bne.n	80016c6 <HAL_TIM_Base_MspInit+0x14a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001698:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <HAL_TIM_Base_MspInit+0x154>)
 800169a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800169e:	4a0c      	ldr	r2, [pc, #48]	; (80016d0 <HAL_TIM_Base_MspInit+0x154>)
 80016a0:	f043 0320 	orr.w	r3, r3, #32
 80016a4:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <HAL_TIM_Base_MspInit+0x154>)
 80016aa:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80016ae:	f003 0320 	and.w	r3, r3, #32
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2100      	movs	r1, #0
 80016ba:	2037      	movs	r0, #55	; 0x37
 80016bc:	f001 faa7 	bl	8002c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80016c0:	2037      	movs	r0, #55	; 0x37
 80016c2:	f001 fabe 	bl	8002c42 <HAL_NVIC_EnableIRQ>
}
 80016c6:	bf00      	nop
 80016c8:	3738      	adds	r7, #56	; 0x38
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	58024400 	.word	0x58024400
 80016d4:	58020000 	.word	0x58020000
 80016d8:	40000c00 	.word	0x40000c00
 80016dc:	40001000 	.word	0x40001000
 80016e0:	40001400 	.word	0x40001400

080016e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08a      	sub	sp, #40	; 0x28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a1a      	ldr	r2, [pc, #104]	; (800176c <HAL_UART_MspInit+0x88>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d12e      	bne.n	8001764 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001706:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <HAL_UART_MspInit+0x8c>)
 8001708:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800170c:	4a18      	ldr	r2, [pc, #96]	; (8001770 <HAL_UART_MspInit+0x8c>)
 800170e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001712:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001716:	4b16      	ldr	r3, [pc, #88]	; (8001770 <HAL_UART_MspInit+0x8c>)
 8001718:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800171c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <HAL_UART_MspInit+0x8c>)
 8001726:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800172a:	4a11      	ldr	r2, [pc, #68]	; (8001770 <HAL_UART_MspInit+0x8c>)
 800172c:	f043 0308 	orr.w	r3, r3, #8
 8001730:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001734:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <HAL_UART_MspInit+0x8c>)
 8001736:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800173a:	f003 0308 	and.w	r3, r3, #8
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001742:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001754:	2307      	movs	r3, #7
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4619      	mov	r1, r3
 800175e:	4805      	ldr	r0, [pc, #20]	; (8001774 <HAL_UART_MspInit+0x90>)
 8001760:	f003 ff06 	bl	8005570 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001764:	bf00      	nop
 8001766:	3728      	adds	r7, #40	; 0x28
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40004800 	.word	0x40004800
 8001770:	58024400 	.word	0x58024400
 8001774:	58020c00 	.word	0x58020c00

08001778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800178a:	e7fe      	b.n	800178a <HardFault_Handler+0x4>

0800178c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001790:	e7fe      	b.n	8001790 <MemManage_Handler+0x4>

08001792 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001796:	e7fe      	b.n	8001796 <BusFault_Handler+0x4>

08001798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800179c:	e7fe      	b.n	800179c <UsageFault_Handler+0x4>

0800179e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017cc:	f000 f9f6 	bl	8001bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017d8:	4802      	ldr	r0, [pc, #8]	; (80017e4 <DMA1_Stream0_IRQHandler+0x10>)
 80017da:	f002 fb47 	bl	8003e6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	24000280 	.word	0x24000280

080017e8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <TIM7_IRQHandler+0x10>)
 80017ee:	f006 ff5d 	bl	80086ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	24000390 	.word	0x24000390

080017fc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <DMA2_Stream0_IRQHandler+0x10>)
 8001802:	f002 fb33 	bl	8003e6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	24000158 	.word	0x24000158

08001810 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800181a:	f008 fce7 	bl	800a1ec <__errno>
 800181e:	4602      	mov	r2, r0
 8001820:	2316      	movs	r3, #22
 8001822:	6013      	str	r3, [r2, #0]
	return -1;
 8001824:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <_exit>:

void _exit (int status)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001838:	f04f 31ff 	mov.w	r1, #4294967295
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff ffe7 	bl	8001810 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001842:	e7fe      	b.n	8001842 <_exit+0x12>

08001844 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	e00a      	b.n	800186c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001856:	f3af 8000 	nop.w
 800185a:	4601      	mov	r1, r0
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	1c5a      	adds	r2, r3, #1
 8001860:	60ba      	str	r2, [r7, #8]
 8001862:	b2ca      	uxtb	r2, r1
 8001864:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	3301      	adds	r3, #1
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	429a      	cmp	r2, r3
 8001872:	dbf0      	blt.n	8001856 <_read+0x12>
	}

return len;
 8001874:	687b      	ldr	r3, [r7, #4]
}
 8001876:	4618      	mov	r0, r3
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b086      	sub	sp, #24
 8001882:	af00      	add	r7, sp, #0
 8001884:	60f8      	str	r0, [r7, #12]
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	e009      	b.n	80018a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	1c5a      	adds	r2, r3, #1
 8001894:	60ba      	str	r2, [r7, #8]
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	3301      	adds	r3, #1
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	dbf1      	blt.n	8001890 <_write+0x12>
	}
	return len;
 80018ac:	687b      	ldr	r3, [r7, #4]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <_close>:

int _close(int file)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
	return -1;
 80018be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
 80018d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018de:	605a      	str	r2, [r3, #4]
	return 0;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <_isatty>:

int _isatty(int file)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
	return 1;
 80018f6:	2301      	movs	r3, #1
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
	return 0;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3714      	adds	r7, #20
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001928:	4a14      	ldr	r2, [pc, #80]	; (800197c <_sbrk+0x5c>)
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <_sbrk+0x60>)
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001934:	4b13      	ldr	r3, [pc, #76]	; (8001984 <_sbrk+0x64>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d102      	bne.n	8001942 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800193c:	4b11      	ldr	r3, [pc, #68]	; (8001984 <_sbrk+0x64>)
 800193e:	4a12      	ldr	r2, [pc, #72]	; (8001988 <_sbrk+0x68>)
 8001940:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001942:	4b10      	ldr	r3, [pc, #64]	; (8001984 <_sbrk+0x64>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	429a      	cmp	r2, r3
 800194e:	d207      	bcs.n	8001960 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001950:	f008 fc4c 	bl	800a1ec <__errno>
 8001954:	4602      	mov	r2, r0
 8001956:	230c      	movs	r3, #12
 8001958:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800195a:	f04f 33ff 	mov.w	r3, #4294967295
 800195e:	e009      	b.n	8001974 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001960:	4b08      	ldr	r3, [pc, #32]	; (8001984 <_sbrk+0x64>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001966:	4b07      	ldr	r3, [pc, #28]	; (8001984 <_sbrk+0x64>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	4a05      	ldr	r2, [pc, #20]	; (8001984 <_sbrk+0x64>)
 8001970:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001972:	68fb      	ldr	r3, [r7, #12]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	24100000 	.word	0x24100000
 8001980:	00000400 	.word	0x00000400
 8001984:	240000ac 	.word	0x240000ac
 8001988:	240003e8 	.word	0x240003e8

0800198c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001990:	4b34      	ldr	r3, [pc, #208]	; (8001a64 <SystemInit+0xd8>)
 8001992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001996:	4a33      	ldr	r2, [pc, #204]	; (8001a64 <SystemInit+0xd8>)
 8001998:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800199c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019a0:	4b31      	ldr	r3, [pc, #196]	; (8001a68 <SystemInit+0xdc>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 030f 	and.w	r3, r3, #15
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d807      	bhi.n	80019bc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019ac:	4b2e      	ldr	r3, [pc, #184]	; (8001a68 <SystemInit+0xdc>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f023 030f 	bic.w	r3, r3, #15
 80019b4:	4a2c      	ldr	r2, [pc, #176]	; (8001a68 <SystemInit+0xdc>)
 80019b6:	f043 0303 	orr.w	r3, r3, #3
 80019ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80019bc:	4b2b      	ldr	r3, [pc, #172]	; (8001a6c <SystemInit+0xe0>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a2a      	ldr	r2, [pc, #168]	; (8001a6c <SystemInit+0xe0>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80019c8:	4b28      	ldr	r3, [pc, #160]	; (8001a6c <SystemInit+0xe0>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80019ce:	4b27      	ldr	r3, [pc, #156]	; (8001a6c <SystemInit+0xe0>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	4926      	ldr	r1, [pc, #152]	; (8001a6c <SystemInit+0xe0>)
 80019d4:	4b26      	ldr	r3, [pc, #152]	; (8001a70 <SystemInit+0xe4>)
 80019d6:	4013      	ands	r3, r2
 80019d8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019da:	4b23      	ldr	r3, [pc, #140]	; (8001a68 <SystemInit+0xdc>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	2b03      	cmp	r3, #3
 80019e4:	d907      	bls.n	80019f6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019e6:	4b20      	ldr	r3, [pc, #128]	; (8001a68 <SystemInit+0xdc>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f023 030f 	bic.w	r3, r3, #15
 80019ee:	4a1e      	ldr	r2, [pc, #120]	; (8001a68 <SystemInit+0xdc>)
 80019f0:	f043 0303 	orr.w	r3, r3, #3
 80019f4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80019f6:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <SystemInit+0xe0>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <SystemInit+0xe0>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001a02:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <SystemInit+0xe0>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a08:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <SystemInit+0xe0>)
 8001a0a:	4a1a      	ldr	r2, [pc, #104]	; (8001a74 <SystemInit+0xe8>)
 8001a0c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a0e:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <SystemInit+0xe0>)
 8001a10:	4a19      	ldr	r2, [pc, #100]	; (8001a78 <SystemInit+0xec>)
 8001a12:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a14:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <SystemInit+0xe0>)
 8001a16:	4a19      	ldr	r2, [pc, #100]	; (8001a7c <SystemInit+0xf0>)
 8001a18:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a1a:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <SystemInit+0xe0>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a20:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <SystemInit+0xe0>)
 8001a22:	4a16      	ldr	r2, [pc, #88]	; (8001a7c <SystemInit+0xf0>)
 8001a24:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a26:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <SystemInit+0xe0>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <SystemInit+0xe0>)
 8001a2e:	4a13      	ldr	r2, [pc, #76]	; (8001a7c <SystemInit+0xf0>)
 8001a30:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001a32:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <SystemInit+0xe0>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <SystemInit+0xe0>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a0b      	ldr	r2, [pc, #44]	; (8001a6c <SystemInit+0xe0>)
 8001a3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a42:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a44:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <SystemInit+0xe0>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001a4a:	4b0d      	ldr	r3, [pc, #52]	; (8001a80 <SystemInit+0xf4>)
 8001a4c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001a50:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a52:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <SystemInit+0xd8>)
 8001a54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a58:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	e000ed00 	.word	0xe000ed00
 8001a68:	52002000 	.word	0x52002000
 8001a6c:	58024400 	.word	0x58024400
 8001a70:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a74:	02020200 	.word	0x02020200
 8001a78:	01ff0000 	.word	0x01ff0000
 8001a7c:	01010280 	.word	0x01010280
 8001a80:	52004000 	.word	0x52004000

08001a84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001abc <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001a88:	f7ff ff80 	bl	800198c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001a8c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a8e:	e003      	b.n	8001a98 <LoopCopyDataInit>

08001a90 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a90:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001a92:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a94:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a96:	3104      	adds	r1, #4

08001a98 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a98:	480a      	ldr	r0, [pc, #40]	; (8001ac4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001a9c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a9e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001aa0:	d3f6      	bcc.n	8001a90 <CopyDataInit>
  ldr  r2, =_sbss
 8001aa2:	4a0a      	ldr	r2, [pc, #40]	; (8001acc <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001aa4:	e002      	b.n	8001aac <LoopFillZerobss>

08001aa6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001aa6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001aa8:	f842 3b04 	str.w	r3, [r2], #4

08001aac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001aac:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001aae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ab0:	d3f9      	bcc.n	8001aa6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001ab2:	f008 fbb5 	bl	800a220 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ab6:	f7fe fd9b 	bl	80005f0 <main>
  bx  lr
 8001aba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001abc:	24100000 	.word	0x24100000
  ldr  r3, =_sidata
 8001ac0:	0800b488 	.word	0x0800b488
  ldr  r0, =_sdata
 8001ac4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001ac8:	24000080 	.word	0x24000080
  ldr  r2, =_sbss
 8001acc:	24000080 	.word	0x24000080
  ldr  r3, = _ebss
 8001ad0:	240003e8 	.word	0x240003e8

08001ad4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ad4:	e7fe      	b.n	8001ad4 <ADC_IRQHandler>
	...

08001ad8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ade:	2003      	movs	r0, #3
 8001ae0:	f001 f88a 	bl	8002bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001ae4:	f004 fd20 	bl	8006528 <HAL_RCC_GetSysClockFreq>
 8001ae8:	4601      	mov	r1, r0
 8001aea:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <HAL_Init+0x68>)
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	0a1b      	lsrs	r3, r3, #8
 8001af0:	f003 030f 	and.w	r3, r3, #15
 8001af4:	4a13      	ldr	r2, [pc, #76]	; (8001b44 <HAL_Init+0x6c>)
 8001af6:	5cd3      	ldrb	r3, [r2, r3]
 8001af8:	f003 031f 	and.w	r3, r3, #31
 8001afc:	fa21 f303 	lsr.w	r3, r1, r3
 8001b00:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001b02:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <HAL_Init+0x68>)
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	4a0e      	ldr	r2, [pc, #56]	; (8001b44 <HAL_Init+0x6c>)
 8001b0c:	5cd3      	ldrb	r3, [r2, r3]
 8001b0e:	f003 031f 	and.w	r3, r3, #31
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	fa22 f303 	lsr.w	r3, r2, r3
 8001b18:	4a0b      	ldr	r2, [pc, #44]	; (8001b48 <HAL_Init+0x70>)
 8001b1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b1c:	4a0b      	ldr	r2, [pc, #44]	; (8001b4c <HAL_Init+0x74>)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b22:	2000      	movs	r0, #0
 8001b24:	f000 f814 	bl	8001b50 <HAL_InitTick>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e002      	b.n	8001b38 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b32:	f7ff fc15 	bl	8001360 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	58024400 	.word	0x58024400
 8001b44:	0800b3e4 	.word	0x0800b3e4
 8001b48:	24000010 	.word	0x24000010
 8001b4c:	2400000c 	.word	0x2400000c

08001b50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b58:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <HAL_InitTick+0x60>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e021      	b.n	8001ba8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b64:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <HAL_InitTick+0x64>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <HAL_InitTick+0x60>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f001 f86f 	bl	8002c5e <HAL_SYSTICK_Config>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e00e      	b.n	8001ba8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b0f      	cmp	r3, #15
 8001b8e:	d80a      	bhi.n	8001ba6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b90:	2200      	movs	r2, #0
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	f04f 30ff 	mov.w	r0, #4294967295
 8001b98:	f001 f839 	bl	8002c0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b9c:	4a06      	ldr	r2, [pc, #24]	; (8001bb8 <HAL_InitTick+0x68>)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e000      	b.n	8001ba8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	24000018 	.word	0x24000018
 8001bb4:	2400000c 	.word	0x2400000c
 8001bb8:	24000014 	.word	0x24000014

08001bbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_IncTick+0x20>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_IncTick+0x24>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4413      	add	r3, r2
 8001bcc:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <HAL_IncTick+0x24>)
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	24000018 	.word	0x24000018
 8001be0:	240003e0 	.word	0x240003e0

08001be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return uwTick;
 8001be8:	4b03      	ldr	r3, [pc, #12]	; (8001bf8 <HAL_GetTick+0x14>)
 8001bea:	681b      	ldr	r3, [r3, #0]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	240003e0 	.word	0x240003e0

08001bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c04:	f7ff ffee 	bl	8001be4 <HAL_GetTick>
 8001c08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c14:	d005      	beq.n	8001c22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c16:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <HAL_Delay+0x40>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4413      	add	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c22:	bf00      	nop
 8001c24:	f7ff ffde 	bl	8001be4 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d8f7      	bhi.n	8001c24 <HAL_Delay+0x28>
  {
  }
}
 8001c34:	bf00      	nop
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	24000018 	.word	0x24000018

08001c40 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	431a      	orrs	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	609a      	str	r2, [r3, #8]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b087      	sub	sp, #28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
 8001cb4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	3360      	adds	r3, #96	; 0x60
 8001cba:	461a      	mov	r2, r3
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	430b      	orrs	r3, r1
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001cdc:	bf00      	nop
 8001cde:	371c      	adds	r7, #28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	f003 031f 	and.w	r3, r3, #31
 8001d02:	6879      	ldr	r1, [r7, #4]
 8001d04:	fa01 f303 	lsl.w	r3, r1, r3
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	611a      	str	r2, [r3, #16]
}
 8001d0e:	bf00      	nop
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b087      	sub	sp, #28
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	60f8      	str	r0, [r7, #12]
 8001d22:	60b9      	str	r1, [r7, #8]
 8001d24:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	3360      	adds	r3, #96	; 0x60
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	601a      	str	r2, [r3, #0]
  }
}
 8001d44:	bf00      	nop
 8001d46:	371c      	adds	r7, #28
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b087      	sub	sp, #28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	3330      	adds	r3, #48	; 0x30
 8001d60:	461a      	mov	r2, r3
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	0a1b      	lsrs	r3, r3, #8
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	f003 030c 	and.w	r3, r3, #12
 8001d6c:	4413      	add	r3, r2
 8001d6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	f003 031f 	and.w	r3, r3, #31
 8001d7a:	211f      	movs	r1, #31
 8001d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	401a      	ands	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	0e9b      	lsrs	r3, r3, #26
 8001d88:	f003 011f 	and.w	r1, r3, #31
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	f003 031f 	and.w	r3, r3, #31
 8001d92:	fa01 f303 	lsl.w	r3, r1, r3
 8001d96:	431a      	orrs	r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d9c:	bf00      	nop
 8001d9e:	371c      	adds	r7, #28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b087      	sub	sp, #28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	3314      	adds	r3, #20
 8001db8:	461a      	mov	r2, r3
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	0e5b      	lsrs	r3, r3, #25
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	4413      	add	r3, r2
 8001dc6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	0d1b      	lsrs	r3, r3, #20
 8001dd0:	f003 031f 	and.w	r3, r3, #31
 8001dd4:	2107      	movs	r1, #7
 8001dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	401a      	ands	r2, r3
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	0d1b      	lsrs	r3, r3, #20
 8001de2:	f003 031f 	and.w	r3, r3, #31
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dec:	431a      	orrs	r2, r3
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001df2:	bf00      	nop
 8001df4:	371c      	adds	r7, #28
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f003 0318 	and.w	r3, r3, #24
 8001e22:	4908      	ldr	r1, [pc, #32]	; (8001e44 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e24:	40d9      	lsrs	r1, r3
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	400b      	ands	r3, r1
 8001e2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001e36:	bf00      	nop
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	000fffff 	.word	0x000fffff

08001e48 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6093      	str	r3, [r2, #8]
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	5fffffc0 	.word	0x5fffffc0

08001e6c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e80:	d101      	bne.n	8001e86 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e82:	2301      	movs	r3, #1
 8001e84:	e000      	b.n	8001e88 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <LL_ADC_EnableInternalRegulator+0x24>)
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	6fffffc0 	.word	0x6fffffc0

08001ebc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ecc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ed0:	d101      	bne.n	8001ed6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <LL_ADC_IsEnabled+0x18>
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e000      	b.n	8001efe <LL_ADC_IsEnabled+0x1a>
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 0304 	and.w	r3, r3, #4
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	d101      	bne.n	8001f22 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 0308 	and.w	r3, r3, #8
 8001f40:	2b08      	cmp	r3, #8
 8001f42:	d101      	bne.n	8001f48 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f44:	2301      	movs	r3, #1
 8001f46:	e000      	b.n	8001f4a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
	...

08001f58 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f58:	b590      	push	{r4, r7, lr}
 8001f5a:	b089      	sub	sp, #36	; 0x24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f60:	2300      	movs	r3, #0
 8001f62:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e137      	b.n	80021e2 <HAL_ADC_Init+0x28a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d109      	bne.n	8001f94 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7ff fa07 	bl	8001394 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff ff67 	bl	8001e6c <LL_ADC_IsDeepPowerDownEnabled>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d004      	beq.n	8001fae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff ff4d 	bl	8001e48 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff ff82 	bl	8001ebc <LL_ADC_IsInternalRegulatorEnabled>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d113      	bne.n	8001fe6 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff ff66 	bl	8001e94 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001fc8:	4b88      	ldr	r3, [pc, #544]	; (80021ec <HAL_ADC_Init+0x294>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	099b      	lsrs	r3, r3, #6
 8001fce:	4a88      	ldr	r2, [pc, #544]	; (80021f0 <HAL_ADC_Init+0x298>)
 8001fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd4:	099b      	lsrs	r3, r3, #6
 8001fd6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fd8:	e002      	b.n	8001fe0 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f9      	bne.n	8001fda <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff ff66 	bl	8001ebc <LL_ADC_IsInternalRegulatorEnabled>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10d      	bne.n	8002012 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffa:	f043 0210 	orr.w	r2, r3, #16
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002006:	f043 0201 	orr.w	r2, r3, #1
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff ff77 	bl	8001f0a <LL_ADC_REG_IsConversionOngoing>
 800201c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002022:	f003 0310 	and.w	r3, r3, #16
 8002026:	2b00      	cmp	r3, #0
 8002028:	f040 80d2 	bne.w	80021d0 <HAL_ADC_Init+0x278>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	2b00      	cmp	r3, #0
 8002030:	f040 80ce 	bne.w	80021d0 <HAL_ADC_Init+0x278>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002038:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800203c:	f043 0202 	orr.w	r2, r3, #2
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff ff4b 	bl	8001ee4 <LL_ADC_IsEnabled>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d110      	bne.n	8002076 <HAL_ADC_Init+0x11e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002054:	4867      	ldr	r0, [pc, #412]	; (80021f4 <HAL_ADC_Init+0x29c>)
 8002056:	f7ff ff45 	bl	8001ee4 <LL_ADC_IsEnabled>
 800205a:	4604      	mov	r4, r0
 800205c:	4866      	ldr	r0, [pc, #408]	; (80021f8 <HAL_ADC_Init+0x2a0>)
 800205e:	f7ff ff41 	bl	8001ee4 <LL_ADC_IsEnabled>
 8002062:	4603      	mov	r3, r0
 8002064:	4323      	orrs	r3, r4
 8002066:	2b00      	cmp	r3, #0
 8002068:	d105      	bne.n	8002076 <HAL_ADC_Init+0x11e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	4619      	mov	r1, r3
 8002070:	4862      	ldr	r0, [pc, #392]	; (80021fc <HAL_ADC_Init+0x2a4>)
 8002072:	f7ff fde5 	bl	8001c40 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	7d5b      	ldrb	r3, [r3, #21]
 800207a:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002080:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8002086:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	7f1b      	ldrb	r3, [r3, #28]
 800208c:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	7f1b      	ldrb	r3, [r3, #28]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d106      	bne.n	80020a8 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	3b01      	subs	r3, #1
 80020a0:	045b      	lsls	r3, r3, #17
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d009      	beq.n	80020c4 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020bc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	4b4d      	ldr	r3, [pc, #308]	; (8002200 <HAL_ADC_Init+0x2a8>)
 80020cc:	4013      	ands	r3, r2
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	6812      	ldr	r2, [r2, #0]
 80020d2:	69b9      	ldr	r1, [r7, #24]
 80020d4:	430b      	orrs	r3, r1
 80020d6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff ff14 	bl	8001f0a <LL_ADC_REG_IsConversionOngoing>
 80020e2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ff21 	bl	8001f30 <LL_ADC_INJ_IsConversionOngoing>
 80020ee:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d14a      	bne.n	800218c <HAL_ADC_Init+0x234>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d147      	bne.n	800218c <HAL_ADC_Init+0x234>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	7d1b      	ldrb	r3, [r3, #20]
 8002100:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68da      	ldr	r2, [r3, #12]
 8002110:	4b3c      	ldr	r3, [pc, #240]	; (8002204 <HAL_ADC_Init+0x2ac>)
 8002112:	4013      	ands	r3, r2
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6812      	ldr	r2, [r2, #0]
 8002118:	69b9      	ldr	r1, [r7, #24]
 800211a:	430b      	orrs	r3, r1
 800211c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002124:	2b01      	cmp	r3, #1
 8002126:	d11b      	bne.n	8002160 <HAL_ADC_Init+0x208>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	691a      	ldr	r2, [r3, #16]
 8002134:	4b34      	ldr	r3, [pc, #208]	; (8002208 <HAL_ADC_Init+0x2b0>)
 8002136:	4013      	ands	r3, r2
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800213c:	3a01      	subs	r2, #1
 800213e:	0411      	lsls	r1, r2, #16
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002144:	4311      	orrs	r1, r2
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800214a:	4311      	orrs	r1, r2
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002150:	430a      	orrs	r2, r1
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f042 0201 	orr.w	r2, r2, #1
 800215c:	611a      	str	r2, [r3, #16]
 800215e:	e007      	b.n	8002170 <HAL_ADC_Init+0x218>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	691a      	ldr	r2, [r3, #16]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0201 	bic.w	r2, r2, #1
 800216e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 faee 	bl	8002768 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d10c      	bne.n	80021ae <HAL_ADC_Init+0x256>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	f023 010f 	bic.w	r1, r3, #15
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	1e5a      	subs	r2, r3, #1
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	631a      	str	r2, [r3, #48]	; 0x30
 80021ac:	e007      	b.n	80021be <HAL_ADC_Init+0x266>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 020f 	bic.w	r2, r2, #15
 80021bc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c2:	f023 0303 	bic.w	r3, r3, #3
 80021c6:	f043 0201 	orr.w	r2, r3, #1
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	655a      	str	r2, [r3, #84]	; 0x54
 80021ce:	e007      	b.n	80021e0 <HAL_ADC_Init+0x288>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d4:	f043 0210 	orr.w	r2, r3, #16
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3724      	adds	r7, #36	; 0x24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd90      	pop	{r4, r7, pc}
 80021ea:	bf00      	nop
 80021ec:	2400000c 	.word	0x2400000c
 80021f0:	053e2d63 	.word	0x053e2d63
 80021f4:	40022000 	.word	0x40022000
 80021f8:	40022100 	.word	0x40022100
 80021fc:	40022300 	.word	0x40022300
 8002200:	fff0c003 	.word	0xfff0c003
 8002204:	ffffbffc 	.word	0xffffbffc
 8002208:	fc00f81e 	.word	0xfc00f81e

0800220c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800220c:	b590      	push	{r4, r7, lr}
 800220e:	b099      	sub	sp, #100	; 0x64
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002216:	2300      	movs	r3, #0
 8002218:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	4aa1      	ldr	r2, [pc, #644]	; (80024ac <HAL_ADC_ConfigChannel+0x2a0>)
 8002226:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800222e:	2b01      	cmp	r3, #1
 8002230:	d101      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x2a>
 8002232:	2302      	movs	r3, #2
 8002234:	e283      	b.n	800273e <HAL_ADC_ConfigChannel+0x532>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff fe61 	bl	8001f0a <LL_ADC_REG_IsConversionOngoing>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	f040 8268 	bne.w	8002720 <HAL_ADC_ConfigChannel+0x514>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002258:	2b00      	cmp	r3, #0
 800225a:	d108      	bne.n	800226e <HAL_ADC_ConfigChannel+0x62>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	0e9b      	lsrs	r3, r3, #26
 8002262:	f003 031f 	and.w	r3, r3, #31
 8002266:	2201      	movs	r2, #1
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	e00f      	b.n	800228e <HAL_ADC_ConfigChannel+0x82>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002276:	fa93 f3a3 	rbit	r3, r3
 800227a:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800227c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800227e:	fab3 f383 	clz	r3, r3
 8002282:	b2db      	uxtb	r3, r3
 8002284:	f003 031f 	and.w	r3, r3, #31
 8002288:	2201      	movs	r2, #1
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	6812      	ldr	r2, [r2, #0]
 8002292:	69d1      	ldr	r1, [r2, #28]
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	430b      	orrs	r3, r1
 800229a:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6818      	ldr	r0, [r3, #0]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	6859      	ldr	r1, [r3, #4]
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	461a      	mov	r2, r3
 80022aa:	f7ff fd51 	bl	8001d50 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff fe29 	bl	8001f0a <LL_ADC_REG_IsConversionOngoing>
 80022b8:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff fe36 	bl	8001f30 <LL_ADC_INJ_IsConversionOngoing>
 80022c4:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f040 80a0 	bne.w	800240e <HAL_ADC_ConfigChannel+0x202>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f040 809c 	bne.w	800240e <HAL_ADC_ConfigChannel+0x202>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6818      	ldr	r0, [r3, #0]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	6819      	ldr	r1, [r3, #0]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	461a      	mov	r2, r3
 80022e4:	f7ff fd60 	bl	8001da8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	f003 0310 	and.w	r3, r3, #16
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10b      	bne.n	800230e <HAL_ADC_ConfigChannel+0x102>
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	695a      	ldr	r2, [r3, #20]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	089b      	lsrs	r3, r3, #2
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	e00a      	b.n	8002324 <HAL_ADC_ConfigChannel+0x118>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	695a      	ldr	r2, [r3, #20]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	089b      	lsrs	r3, r3, #2
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	2b04      	cmp	r3, #4
 800232c:	d027      	beq.n	800237e <HAL_ADC_ConfigChannel+0x172>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6818      	ldr	r0, [r3, #0]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	6919      	ldr	r1, [r3, #16]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800233c:	f7ff fcb4 	bl	8001ca8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6818      	ldr	r0, [r3, #0]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	6919      	ldr	r1, [r3, #16]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	7e5b      	ldrb	r3, [r3, #25]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d102      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x14a>
 8002350:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002354:	e000      	b.n	8002358 <HAL_ADC_ConfigChannel+0x14c>
 8002356:	2300      	movs	r3, #0
 8002358:	461a      	mov	r2, r3
 800235a:	f7ff fcde 	bl	8001d1a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6818      	ldr	r0, [r3, #0]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	6919      	ldr	r1, [r3, #16]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	7e1b      	ldrb	r3, [r3, #24]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d102      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x168>
 800236e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002372:	e000      	b.n	8002376 <HAL_ADC_ConfigChannel+0x16a>
 8002374:	2300      	movs	r3, #0
 8002376:	461a      	mov	r2, r3
 8002378:	f7ff fcb6 	bl	8001ce8 <LL_ADC_SetDataRightShift>
 800237c:	e047      	b.n	800240e <HAL_ADC_ConfigChannel+0x202>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002384:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	069b      	lsls	r3, r3, #26
 800238e:	429a      	cmp	r2, r3
 8002390:	d107      	bne.n	80023a2 <HAL_ADC_ConfigChannel+0x196>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023a0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	069b      	lsls	r3, r3, #26
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d107      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x1ba>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023c4:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	069b      	lsls	r3, r3, #26
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d107      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x1de>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023e8:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	069b      	lsls	r3, r3, #26
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d107      	bne.n	800240e <HAL_ADC_ConfigChannel+0x202>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800240c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff fd66 	bl	8001ee4 <LL_ADC_IsEnabled>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	f040 8189 	bne.w	8002732 <HAL_ADC_ConfigChannel+0x526>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6818      	ldr	r0, [r3, #0]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	6819      	ldr	r1, [r3, #0]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	461a      	mov	r2, r3
 800242e:	f7ff fce7 	bl	8001e00 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	4a1d      	ldr	r2, [pc, #116]	; (80024ac <HAL_ADC_ConfigChannel+0x2a0>)
 8002438:	4293      	cmp	r3, r2
 800243a:	f040 80ff 	bne.w	800263c <HAL_ADC_ConfigChannel+0x430>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10b      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x25a>
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	0e9b      	lsrs	r3, r3, #26
 8002454:	3301      	adds	r3, #1
 8002456:	f003 031f 	and.w	r3, r3, #31
 800245a:	2b09      	cmp	r3, #9
 800245c:	bf94      	ite	ls
 800245e:	2301      	movls	r3, #1
 8002460:	2300      	movhi	r3, #0
 8002462:	b2db      	uxtb	r3, r3
 8002464:	e012      	b.n	800248c <HAL_ADC_ConfigChannel+0x280>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800246e:	fa93 f3a3 	rbit	r3, r3
 8002472:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002476:	fab3 f383 	clz	r3, r3
 800247a:	b2db      	uxtb	r3, r3
 800247c:	3301      	adds	r3, #1
 800247e:	f003 031f 	and.w	r3, r3, #31
 8002482:	2b09      	cmp	r3, #9
 8002484:	bf94      	ite	ls
 8002486:	2301      	movls	r3, #1
 8002488:	2300      	movhi	r3, #0
 800248a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800248c:	2b00      	cmp	r3, #0
 800248e:	d066      	beq.n	800255e <HAL_ADC_ConfigChannel+0x352>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002498:	2b00      	cmp	r3, #0
 800249a:	d109      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x2a4>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	0e9b      	lsrs	r3, r3, #26
 80024a2:	3301      	adds	r3, #1
 80024a4:	069b      	lsls	r3, r3, #26
 80024a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024aa:	e010      	b.n	80024ce <HAL_ADC_ConfigChannel+0x2c2>
 80024ac:	47ff0000 	.word	0x47ff0000
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b8:	fa93 f3a3 	rbit	r3, r3
 80024bc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80024be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024c0:	fab3 f383 	clz	r3, r3
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	3301      	adds	r3, #1
 80024c8:	069b      	lsls	r3, r3, #26
 80024ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d109      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x2e2>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	0e9b      	lsrs	r3, r3, #26
 80024e0:	3301      	adds	r3, #1
 80024e2:	f003 031f 	and.w	r3, r3, #31
 80024e6:	2101      	movs	r1, #1
 80024e8:	fa01 f303 	lsl.w	r3, r1, r3
 80024ec:	e010      	b.n	8002510 <HAL_ADC_ConfigChannel+0x304>
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f6:	fa93 f3a3 	rbit	r3, r3
 80024fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80024fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fe:	fab3 f383 	clz	r3, r3
 8002502:	b2db      	uxtb	r3, r3
 8002504:	3301      	adds	r3, #1
 8002506:	f003 031f 	and.w	r3, r3, #31
 800250a:	2101      	movs	r1, #1
 800250c:	fa01 f303 	lsl.w	r3, r1, r3
 8002510:	ea42 0103 	orr.w	r1, r2, r3
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10a      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x32a>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	0e9b      	lsrs	r3, r3, #26
 8002526:	3301      	adds	r3, #1
 8002528:	f003 021f 	and.w	r2, r3, #31
 800252c:	4613      	mov	r3, r2
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	4413      	add	r3, r2
 8002532:	051b      	lsls	r3, r3, #20
 8002534:	e011      	b.n	800255a <HAL_ADC_ConfigChannel+0x34e>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253e:	fa93 f3a3 	rbit	r3, r3
 8002542:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	fab3 f383 	clz	r3, r3
 800254a:	b2db      	uxtb	r3, r3
 800254c:	3301      	adds	r3, #1
 800254e:	f003 021f 	and.w	r2, r3, #31
 8002552:	4613      	mov	r3, r2
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	4413      	add	r3, r2
 8002558:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800255a:	430b      	orrs	r3, r1
 800255c:	e069      	b.n	8002632 <HAL_ADC_ConfigChannel+0x426>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002566:	2b00      	cmp	r3, #0
 8002568:	d107      	bne.n	800257a <HAL_ADC_ConfigChannel+0x36e>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	0e9b      	lsrs	r3, r3, #26
 8002570:	3301      	adds	r3, #1
 8002572:	069b      	lsls	r3, r3, #26
 8002574:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002578:	e00e      	b.n	8002598 <HAL_ADC_ConfigChannel+0x38c>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002580:	6a3b      	ldr	r3, [r7, #32]
 8002582:	fa93 f3a3 	rbit	r3, r3
 8002586:	61fb      	str	r3, [r7, #28]
  return result;
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	fab3 f383 	clz	r3, r3
 800258e:	b2db      	uxtb	r3, r3
 8002590:	3301      	adds	r3, #1
 8002592:	069b      	lsls	r3, r3, #26
 8002594:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d109      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x3ac>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	0e9b      	lsrs	r3, r3, #26
 80025aa:	3301      	adds	r3, #1
 80025ac:	f003 031f 	and.w	r3, r3, #31
 80025b0:	2101      	movs	r1, #1
 80025b2:	fa01 f303 	lsl.w	r3, r1, r3
 80025b6:	e010      	b.n	80025da <HAL_ADC_ConfigChannel+0x3ce>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	fa93 f3a3 	rbit	r3, r3
 80025c4:	617b      	str	r3, [r7, #20]
  return result;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	fab3 f383 	clz	r3, r3
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	3301      	adds	r3, #1
 80025d0:	f003 031f 	and.w	r3, r3, #31
 80025d4:	2101      	movs	r1, #1
 80025d6:	fa01 f303 	lsl.w	r3, r1, r3
 80025da:	ea42 0103 	orr.w	r1, r2, r3
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10d      	bne.n	8002606 <HAL_ADC_ConfigChannel+0x3fa>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	0e9b      	lsrs	r3, r3, #26
 80025f0:	3301      	adds	r3, #1
 80025f2:	f003 021f 	and.w	r2, r3, #31
 80025f6:	4613      	mov	r3, r2
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	4413      	add	r3, r2
 80025fc:	3b1e      	subs	r3, #30
 80025fe:	051b      	lsls	r3, r3, #20
 8002600:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002604:	e014      	b.n	8002630 <HAL_ADC_ConfigChannel+0x424>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	fa93 f3a3 	rbit	r3, r3
 8002612:	60fb      	str	r3, [r7, #12]
  return result;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	fab3 f383 	clz	r3, r3
 800261a:	b2db      	uxtb	r3, r3
 800261c:	3301      	adds	r3, #1
 800261e:	f003 021f 	and.w	r2, r3, #31
 8002622:	4613      	mov	r3, r2
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	4413      	add	r3, r2
 8002628:	3b1e      	subs	r3, #30
 800262a:	051b      	lsls	r3, r3, #20
 800262c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002630:	430b      	orrs	r3, r1
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	6892      	ldr	r2, [r2, #8]
 8002636:	4619      	mov	r1, r3
 8002638:	f7ff fbb6 	bl	8001da8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	da76      	bge.n	8002732 <HAL_ADC_ConfigChannel+0x526>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002644:	4840      	ldr	r0, [pc, #256]	; (8002748 <HAL_ADC_ConfigChannel+0x53c>)
 8002646:	f7ff fb21 	bl	8001c8c <LL_ADC_GetCommonPathInternalCh>
 800264a:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800264c:	483f      	ldr	r0, [pc, #252]	; (800274c <HAL_ADC_ConfigChannel+0x540>)
 800264e:	f7ff fc49 	bl	8001ee4 <LL_ADC_IsEnabled>
 8002652:	4604      	mov	r4, r0
 8002654:	483e      	ldr	r0, [pc, #248]	; (8002750 <HAL_ADC_ConfigChannel+0x544>)
 8002656:	f7ff fc45 	bl	8001ee4 <LL_ADC_IsEnabled>
 800265a:	4603      	mov	r3, r0
 800265c:	4323      	orrs	r3, r4
 800265e:	2b00      	cmp	r3, #0
 8002660:	d154      	bne.n	800270c <HAL_ADC_ConfigChannel+0x500>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a3b      	ldr	r2, [pc, #236]	; (8002754 <HAL_ADC_ConfigChannel+0x548>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d121      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x4a4>
 800266c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800266e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d11c      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x4a4>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a35      	ldr	r2, [pc, #212]	; (8002750 <HAL_ADC_ConfigChannel+0x544>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d158      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002682:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002686:	4619      	mov	r1, r3
 8002688:	482f      	ldr	r0, [pc, #188]	; (8002748 <HAL_ADC_ConfigChannel+0x53c>)
 800268a:	f7ff faec 	bl	8001c66 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800268e:	4b32      	ldr	r3, [pc, #200]	; (8002758 <HAL_ADC_ConfigChannel+0x54c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	099b      	lsrs	r3, r3, #6
 8002694:	4a31      	ldr	r2, [pc, #196]	; (800275c <HAL_ADC_ConfigChannel+0x550>)
 8002696:	fba2 2303 	umull	r2, r3, r2, r3
 800269a:	099b      	lsrs	r3, r3, #6
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80026a0:	e002      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x49c>
              {
                wait_loop_index--;
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	3b01      	subs	r3, #1
 80026a6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f9      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x496>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026ae:	e040      	b.n	8002732 <HAL_ADC_ConfigChannel+0x526>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a2a      	ldr	r2, [pc, #168]	; (8002760 <HAL_ADC_ConfigChannel+0x554>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d111      	bne.n	80026de <HAL_ADC_ConfigChannel+0x4d2>
 80026ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10c      	bne.n	80026de <HAL_ADC_ConfigChannel+0x4d2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a21      	ldr	r2, [pc, #132]	; (8002750 <HAL_ADC_ConfigChannel+0x544>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d131      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80026ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026d4:	4619      	mov	r1, r3
 80026d6:	481c      	ldr	r0, [pc, #112]	; (8002748 <HAL_ADC_ConfigChannel+0x53c>)
 80026d8:	f7ff fac5 	bl	8001c66 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026dc:	e029      	b.n	8002732 <HAL_ADC_ConfigChannel+0x526>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a20      	ldr	r2, [pc, #128]	; (8002764 <HAL_ADC_ConfigChannel+0x558>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d124      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x526>
 80026e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d11f      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x526>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a16      	ldr	r2, [pc, #88]	; (8002750 <HAL_ADC_ConfigChannel+0x544>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d11a      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80026fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002702:	4619      	mov	r1, r3
 8002704:	4810      	ldr	r0, [pc, #64]	; (8002748 <HAL_ADC_ConfigChannel+0x53c>)
 8002706:	f7ff faae 	bl	8001c66 <LL_ADC_SetCommonPathInternalCh>
 800270a:	e012      	b.n	8002732 <HAL_ADC_ConfigChannel+0x526>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002710:	f043 0220 	orr.w	r2, r3, #32
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800271e:	e008      	b.n	8002732 <HAL_ADC_ConfigChannel+0x526>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002724:	f043 0220 	orr.w	r2, r3, #32
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800273a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800273e:	4618      	mov	r0, r3
 8002740:	3764      	adds	r7, #100	; 0x64
 8002742:	46bd      	mov	sp, r7
 8002744:	bd90      	pop	{r4, r7, pc}
 8002746:	bf00      	nop
 8002748:	40022300 	.word	0x40022300
 800274c:	40022000 	.word	0x40022000
 8002750:	40022100 	.word	0x40022100
 8002754:	cb840000 	.word	0xcb840000
 8002758:	2400000c 	.word	0x2400000c
 800275c:	053e2d63 	.word	0x053e2d63
 8002760:	bac04000 	.word	0xbac04000
 8002764:	cfb80000 	.word	0xcfb80000

08002768 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002770:	4b56      	ldr	r3, [pc, #344]	; (80028cc <ADC_ConfigureBoostMode+0x164>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d01a      	beq.n	80027b2 <ADC_ConfigureBoostMode+0x4a>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800277c:	f004 f846 	bl	800680c <HAL_RCC_GetHCLKFreq>
 8002780:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800278a:	d006      	beq.n	800279a <ADC_ConfigureBoostMode+0x32>
 800278c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002790:	d00b      	beq.n	80027aa <ADC_ConfigureBoostMode+0x42>
 8002792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002796:	d000      	beq.n	800279a <ADC_ConfigureBoostMode+0x32>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8002798:	e05d      	b.n	8002856 <ADC_ConfigureBoostMode+0xee>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	0c1b      	lsrs	r3, r3, #16
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a6:	60fb      	str	r3, [r7, #12]
        break;
 80027a8:	e055      	b.n	8002856 <ADC_ConfigureBoostMode+0xee>
        freq /= 4UL;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	089b      	lsrs	r3, r3, #2
 80027ae:	60fb      	str	r3, [r7, #12]
        break;
 80027b0:	e051      	b.n	8002856 <ADC_ConfigureBoostMode+0xee>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80027b2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80027b6:	f004 ff39 	bl	800762c <HAL_RCCEx_GetPeriphCLKFreq>
 80027ba:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80027c4:	d02a      	beq.n	800281c <ADC_ConfigureBoostMode+0xb4>
 80027c6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80027ca:	d813      	bhi.n	80027f4 <ADC_ConfigureBoostMode+0x8c>
 80027cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80027d0:	d024      	beq.n	800281c <ADC_ConfigureBoostMode+0xb4>
 80027d2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80027d6:	d806      	bhi.n	80027e6 <ADC_ConfigureBoostMode+0x7e>
 80027d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80027dc:	d01e      	beq.n	800281c <ADC_ConfigureBoostMode+0xb4>
 80027de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80027e2:	d01b      	beq.n	800281c <ADC_ConfigureBoostMode+0xb4>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 80027e4:	e037      	b.n	8002856 <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 80027e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027ea:	d017      	beq.n	800281c <ADC_ConfigureBoostMode+0xb4>
 80027ec:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80027f0:	d014      	beq.n	800281c <ADC_ConfigureBoostMode+0xb4>
        break;
 80027f2:	e030      	b.n	8002856 <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 80027f4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80027f8:	d021      	beq.n	800283e <ADC_ConfigureBoostMode+0xd6>
 80027fa:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80027fe:	d806      	bhi.n	800280e <ADC_ConfigureBoostMode+0xa6>
 8002800:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002804:	d013      	beq.n	800282e <ADC_ConfigureBoostMode+0xc6>
 8002806:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800280a:	d014      	beq.n	8002836 <ADC_ConfigureBoostMode+0xce>
        break;
 800280c:	e023      	b.n	8002856 <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 800280e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002812:	d018      	beq.n	8002846 <ADC_ConfigureBoostMode+0xde>
 8002814:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002818:	d019      	beq.n	800284e <ADC_ConfigureBoostMode+0xe6>
        break;
 800281a:	e01c      	b.n	8002856 <ADC_ConfigureBoostMode+0xee>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	0c9b      	lsrs	r3, r3, #18
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	fbb2 f3f3 	udiv	r3, r2, r3
 800282a:	60fb      	str	r3, [r7, #12]
        break;
 800282c:	e013      	b.n	8002856 <ADC_ConfigureBoostMode+0xee>
        freq /= 16UL;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	091b      	lsrs	r3, r3, #4
 8002832:	60fb      	str	r3, [r7, #12]
        break;
 8002834:	e00f      	b.n	8002856 <ADC_ConfigureBoostMode+0xee>
        freq /= 32UL;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	095b      	lsrs	r3, r3, #5
 800283a:	60fb      	str	r3, [r7, #12]
        break;
 800283c:	e00b      	b.n	8002856 <ADC_ConfigureBoostMode+0xee>
        freq /= 64UL;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	099b      	lsrs	r3, r3, #6
 8002842:	60fb      	str	r3, [r7, #12]
        break;
 8002844:	e007      	b.n	8002856 <ADC_ConfigureBoostMode+0xee>
        freq /= 128UL;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	09db      	lsrs	r3, r3, #7
 800284a:	60fb      	str	r3, [r7, #12]
        break;
 800284c:	e003      	b.n	8002856 <ADC_ConfigureBoostMode+0xee>
        freq /= 256UL;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	0a1b      	lsrs	r3, r3, #8
 8002852:	60fb      	str	r3, [r7, #12]
        break;
 8002854:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	085b      	lsrs	r3, r3, #1
 800285a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4a1c      	ldr	r2, [pc, #112]	; (80028d0 <ADC_ConfigureBoostMode+0x168>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d808      	bhi.n	8002876 <ADC_ConfigureBoostMode+0x10e>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002872:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002874:	e025      	b.n	80028c2 <ADC_ConfigureBoostMode+0x15a>
  else if (freq <= 12500000UL)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	4a16      	ldr	r2, [pc, #88]	; (80028d4 <ADC_ConfigureBoostMode+0x16c>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d80a      	bhi.n	8002894 <ADC_ConfigureBoostMode+0x12c>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002890:	609a      	str	r2, [r3, #8]
}
 8002892:	e016      	b.n	80028c2 <ADC_ConfigureBoostMode+0x15a>
  else if (freq <= 25000000UL)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4a10      	ldr	r2, [pc, #64]	; (80028d8 <ADC_ConfigureBoostMode+0x170>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d80a      	bhi.n	80028b2 <ADC_ConfigureBoostMode+0x14a>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ae:	609a      	str	r2, [r3, #8]
}
 80028b0:	e007      	b.n	80028c2 <ADC_ConfigureBoostMode+0x15a>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80028c0:	609a      	str	r2, [r3, #8]
}
 80028c2:	bf00      	nop
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40022300 	.word	0x40022300
 80028d0:	005f5e10 	.word	0x005f5e10
 80028d4:	00bebc20 	.word	0x00bebc20
 80028d8:	017d7840 	.word	0x017d7840

080028dc <LL_ADC_IsEnabled>:
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d101      	bne.n	80028f4 <LL_ADC_IsEnabled+0x18>
 80028f0:	2301      	movs	r3, #1
 80028f2:	e000      	b.n	80028f6 <LL_ADC_IsEnabled+0x1a>
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <LL_ADC_REG_IsConversionOngoing>:
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 0304 	and.w	r3, r3, #4
 8002912:	2b04      	cmp	r3, #4
 8002914:	d101      	bne.n	800291a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002916:	2301      	movs	r3, #1
 8002918:	e000      	b.n	800291c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002928:	b590      	push	{r4, r7, lr}
 800292a:	b09f      	sub	sp, #124	; 0x7c
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002932:	2300      	movs	r3, #0
 8002934:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800293e:	2b01      	cmp	r3, #1
 8002940:	d101      	bne.n	8002946 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002942:	2302      	movs	r3, #2
 8002944:	e07c      	b.n	8002a40 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a3d      	ldr	r2, [pc, #244]	; (8002a48 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d102      	bne.n	800295e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002958:	4b3c      	ldr	r3, [pc, #240]	; (8002a4c <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 800295a:	60bb      	str	r3, [r7, #8]
 800295c:	e001      	b.n	8002962 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800295e:	2300      	movs	r3, #0
 8002960:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10b      	bne.n	8002980 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296c:	f043 0220 	orr.w	r2, r3, #32
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e05f      	b.n	8002a40 <HAL_ADCEx_MultiModeConfigChannel+0x118>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff ffbd 	bl	8002902 <LL_ADC_REG_IsConversionOngoing>
 8002988:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff ffb7 	bl	8002902 <LL_ADC_REG_IsConversionOngoing>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d141      	bne.n	8002a1e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800299a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800299c:	2b00      	cmp	r3, #0
 800299e:	d13e      	bne.n	8002a1e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80029a0:	4b2b      	ldr	r3, [pc, #172]	; (8002a50 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80029a2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d020      	beq.n	80029ee <HAL_ADCEx_MultiModeConfigChannel+0xc6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80029ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	431a      	orrs	r2, r3
 80029ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029bc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029be:	4822      	ldr	r0, [pc, #136]	; (8002a48 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 80029c0:	f7ff ff8c 	bl	80028dc <LL_ADC_IsEnabled>
 80029c4:	4604      	mov	r4, r0
 80029c6:	4821      	ldr	r0, [pc, #132]	; (8002a4c <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 80029c8:	f7ff ff88 	bl	80028dc <LL_ADC_IsEnabled>
 80029cc:	4603      	mov	r3, r0
 80029ce:	4323      	orrs	r3, r4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d12e      	bne.n	8002a32 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80029d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	4b1e      	ldr	r3, [pc, #120]	; (8002a54 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80029da:	4013      	ands	r3, r2
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	6811      	ldr	r1, [r2, #0]
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	6892      	ldr	r2, [r2, #8]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	431a      	orrs	r2, r3
 80029e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ea:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029ec:	e021      	b.n	8002a32 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80029ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029f8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029fa:	4813      	ldr	r0, [pc, #76]	; (8002a48 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 80029fc:	f7ff ff6e 	bl	80028dc <LL_ADC_IsEnabled>
 8002a00:	4604      	mov	r4, r0
 8002a02:	4812      	ldr	r0, [pc, #72]	; (8002a4c <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 8002a04:	f7ff ff6a 	bl	80028dc <LL_ADC_IsEnabled>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	4323      	orrs	r3, r4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d110      	bne.n	8002a32 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	4b0f      	ldr	r3, [pc, #60]	; (8002a54 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002a16:	4013      	ands	r3, r2
 8002a18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a1a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a1c:	e009      	b.n	8002a32 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a22:	f043 0220 	orr.w	r2, r3, #32
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002a30:	e000      	b.n	8002a34 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a32:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a3c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	377c      	adds	r7, #124	; 0x7c
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd90      	pop	{r4, r7, pc}
 8002a48:	40022000 	.word	0x40022000
 8002a4c:	40022100 	.word	0x40022100
 8002a50:	40022300 	.word	0x40022300
 8002a54:	fffff0e0 	.word	0xfffff0e0

08002a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <__NVIC_SetPriorityGrouping+0x40>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a74:	4013      	ands	r3, r2
 8002a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a80:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <__NVIC_SetPriorityGrouping+0x44>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a86:	4a04      	ldr	r2, [pc, #16]	; (8002a98 <__NVIC_SetPriorityGrouping+0x40>)
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	60d3      	str	r3, [r2, #12]
}
 8002a8c:	bf00      	nop
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	e000ed00 	.word	0xe000ed00
 8002a9c:	05fa0000 	.word	0x05fa0000

08002aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aa4:	4b04      	ldr	r3, [pc, #16]	; (8002ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	0a1b      	lsrs	r3, r3, #8
 8002aaa:	f003 0307 	and.w	r3, r3, #7
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	e000ed00 	.word	0xe000ed00

08002abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ac6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	db0b      	blt.n	8002ae6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ace:	88fb      	ldrh	r3, [r7, #6]
 8002ad0:	f003 021f 	and.w	r2, r3, #31
 8002ad4:	4907      	ldr	r1, [pc, #28]	; (8002af4 <__NVIC_EnableIRQ+0x38>)
 8002ad6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ada:	095b      	lsrs	r3, r3, #5
 8002adc:	2001      	movs	r0, #1
 8002ade:	fa00 f202 	lsl.w	r2, r0, r2
 8002ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	e000e100 	.word	0xe000e100

08002af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	6039      	str	r1, [r7, #0]
 8002b02:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	db0a      	blt.n	8002b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	490c      	ldr	r1, [pc, #48]	; (8002b44 <__NVIC_SetPriority+0x4c>)
 8002b12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b16:	0112      	lsls	r2, r2, #4
 8002b18:	b2d2      	uxtb	r2, r2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b20:	e00a      	b.n	8002b38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	4908      	ldr	r1, [pc, #32]	; (8002b48 <__NVIC_SetPriority+0x50>)
 8002b28:	88fb      	ldrh	r3, [r7, #6]
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	3b04      	subs	r3, #4
 8002b30:	0112      	lsls	r2, r2, #4
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	440b      	add	r3, r1
 8002b36:	761a      	strb	r2, [r3, #24]
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	e000e100 	.word	0xe000e100
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b089      	sub	sp, #36	; 0x24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f1c3 0307 	rsb	r3, r3, #7
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	bf28      	it	cs
 8002b6a:	2304      	movcs	r3, #4
 8002b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	3304      	adds	r3, #4
 8002b72:	2b06      	cmp	r3, #6
 8002b74:	d902      	bls.n	8002b7c <NVIC_EncodePriority+0x30>
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	3b03      	subs	r3, #3
 8002b7a:	e000      	b.n	8002b7e <NVIC_EncodePriority+0x32>
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b80:	f04f 32ff 	mov.w	r2, #4294967295
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	43da      	mvns	r2, r3
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	401a      	ands	r2, r3
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b94:	f04f 31ff 	mov.w	r1, #4294967295
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9e:	43d9      	mvns	r1, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba4:	4313      	orrs	r3, r2
         );
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3724      	adds	r7, #36	; 0x24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
	...

08002bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bc4:	d301      	bcc.n	8002bca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e00f      	b.n	8002bea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bca:	4a0a      	ldr	r2, [pc, #40]	; (8002bf4 <SysTick_Config+0x40>)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bd2:	210f      	movs	r1, #15
 8002bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd8:	f7ff ff8e 	bl	8002af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bdc:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <SysTick_Config+0x40>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002be2:	4b04      	ldr	r3, [pc, #16]	; (8002bf4 <SysTick_Config+0x40>)
 8002be4:	2207      	movs	r2, #7
 8002be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	e000e010 	.word	0xe000e010

08002bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7ff ff29 	bl	8002a58 <__NVIC_SetPriorityGrouping>
}
 8002c06:	bf00      	nop
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b086      	sub	sp, #24
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	4603      	mov	r3, r0
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	607a      	str	r2, [r7, #4]
 8002c1a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c1c:	f7ff ff40 	bl	8002aa0 <__NVIC_GetPriorityGrouping>
 8002c20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	68b9      	ldr	r1, [r7, #8]
 8002c26:	6978      	ldr	r0, [r7, #20]
 8002c28:	f7ff ff90 	bl	8002b4c <NVIC_EncodePriority>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c32:	4611      	mov	r1, r2
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff ff5f 	bl	8002af8 <__NVIC_SetPriority>
}
 8002c3a:	bf00      	nop
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b082      	sub	sp, #8
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	4603      	mov	r3, r0
 8002c4a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff ff33 	bl	8002abc <__NVIC_EnableIRQ>
}
 8002c56:	bf00      	nop
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b082      	sub	sp, #8
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7ff ffa4 	bl	8002bb4 <SysTick_Config>
 8002c6c:	4603      	mov	r3, r0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b082      	sub	sp, #8
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e014      	b.n	8002cb2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	791b      	ldrb	r3, [r3, #4]
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d105      	bne.n	8002c9e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7fe fbf5 	bl	8001488 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
 8002cc2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	795b      	ldrb	r3, [r3, #5]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d101      	bne.n	8002cd0 <HAL_DAC_Start+0x16>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	e040      	b.n	8002d52 <HAL_DAC_Start+0x98>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2202      	movs	r2, #2
 8002cda:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6819      	ldr	r1, [r3, #0]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	f003 0310 	and.w	r3, r3, #16
 8002ce8:	2201      	movs	r2, #1
 8002cea:	409a      	lsls	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10f      	bne.n	8002d1a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d11d      	bne.n	8002d44 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0201 	orr.w	r2, r2, #1
 8002d16:	605a      	str	r2, [r3, #4]
 8002d18:	e014      	b.n	8002d44 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	f003 0310 	and.w	r3, r3, #16
 8002d2a:	2102      	movs	r1, #2
 8002d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d107      	bne.n	8002d44 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0202 	orr.w	r2, r2, #2
 8002d42:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
	...

08002d60 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
 8002d6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	795b      	ldrb	r3, [r3, #5]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d101      	bne.n	8002d7e <HAL_DAC_Start_DMA+0x1e>
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	e09e      	b.n	8002ebc <HAL_DAC_Start_DMA+0x15c>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2201      	movs	r2, #1
 8002d82:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2202      	movs	r2, #2
 8002d88:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d12a      	bne.n	8002de6 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	4a4b      	ldr	r2, [pc, #300]	; (8002ec4 <HAL_DAC_Start_DMA+0x164>)
 8002d96:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	4a4a      	ldr	r2, [pc, #296]	; (8002ec8 <HAL_DAC_Start_DMA+0x168>)
 8002d9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	4a49      	ldr	r2, [pc, #292]	; (8002ecc <HAL_DAC_Start_DMA+0x16c>)
 8002da6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002db6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d009      	beq.n	8002dd2 <HAL_DAC_Start_DMA+0x72>
 8002dbe:	2b08      	cmp	r3, #8
 8002dc0:	d00c      	beq.n	8002ddc <HAL_DAC_Start_DMA+0x7c>
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d000      	beq.n	8002dc8 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002dc6:	e039      	b.n	8002e3c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	3308      	adds	r3, #8
 8002dce:	613b      	str	r3, [r7, #16]
        break;
 8002dd0:	e034      	b.n	8002e3c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	330c      	adds	r3, #12
 8002dd8:	613b      	str	r3, [r7, #16]
        break;
 8002dda:	e02f      	b.n	8002e3c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	3310      	adds	r3, #16
 8002de2:	613b      	str	r3, [r7, #16]
        break;
 8002de4:	e02a      	b.n	8002e3c <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	4a39      	ldr	r2, [pc, #228]	; (8002ed0 <HAL_DAC_Start_DMA+0x170>)
 8002dec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	4a38      	ldr	r2, [pc, #224]	; (8002ed4 <HAL_DAC_Start_DMA+0x174>)
 8002df4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	4a37      	ldr	r2, [pc, #220]	; (8002ed8 <HAL_DAC_Start_DMA+0x178>)
 8002dfc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e0c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002e0e:	6a3b      	ldr	r3, [r7, #32]
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d009      	beq.n	8002e28 <HAL_DAC_Start_DMA+0xc8>
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	d00c      	beq.n	8002e32 <HAL_DAC_Start_DMA+0xd2>
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d000      	beq.n	8002e1e <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002e1c:	e00e      	b.n	8002e3c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	3314      	adds	r3, #20
 8002e24:	613b      	str	r3, [r7, #16]
        break;
 8002e26:	e009      	b.n	8002e3c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	3318      	adds	r3, #24
 8002e2e:	613b      	str	r3, [r7, #16]
        break;
 8002e30:	e004      	b.n	8002e3c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	331c      	adds	r3, #28
 8002e38:	613b      	str	r3, [r7, #16]
        break;
 8002e3a:	bf00      	nop
    }
  }

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d111      	bne.n	8002e66 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e50:	601a      	str	r2, [r3, #0]

   /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6898      	ldr	r0, [r3, #8]
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	f000 fd9c 	bl	8003998 <HAL_DMA_Start_IT>
 8002e60:	4603      	mov	r3, r0
 8002e62:	75fb      	strb	r3, [r7, #23]
 8002e64:	e010      	b.n	8002e88 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002e74:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	68d8      	ldr	r0, [r3, #12]
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	f000 fd8a 	bl	8003998 <HAL_DMA_Start_IT>
 8002e84:	4603      	mov	r3, r0
 8002e86:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002e8e:	7dfb      	ldrb	r3, [r7, #23]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10c      	bne.n	8002eae <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6819      	ldr	r1, [r3, #0]
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	f003 0310 	and.w	r3, r3, #16
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	409a      	lsls	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	e005      	b.n	8002eba <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	f043 0204 	orr.w	r2, r3, #4
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	08003165 	.word	0x08003165
 8002ec8:	08003187 	.word	0x08003187
 8002ecc:	080031a3 	.word	0x080031a3
 8002ed0:	0800320d 	.word	0x0800320d
 8002ed4:	0800322f 	.word	0x0800322f
 8002ed8:	0800324b 	.word	0x0800324b

08002edc <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b088      	sub	sp, #32
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	795b      	ldrb	r3, [r3, #5]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d101      	bne.n	8002f1c <HAL_DAC_ConfigChannel+0x18>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e11d      	b.n	8003158 <HAL_DAC_ConfigChannel+0x254>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2202      	movs	r2, #2
 8002f26:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	d174      	bne.n	800301a <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002f30:	f7fe fe58 	bl	8001be4 <HAL_GetTick>
 8002f34:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d134      	bne.n	8002fa6 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f3c:	e011      	b.n	8002f62 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002f3e:	f7fe fe51 	bl	8001be4 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d90a      	bls.n	8002f62 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	f043 0208 	orr.w	r2, r3, #8
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2203      	movs	r2, #3
 8002f5c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e0fa      	b.n	8003158 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f68:	4b7d      	ldr	r3, [pc, #500]	; (8003160 <HAL_DAC_ConfigChannel+0x25c>)
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1e6      	bne.n	8002f3e <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8002f70:	2001      	movs	r0, #1
 8002f72:	f7fe fe43 	bl	8001bfc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	6992      	ldr	r2, [r2, #24]
 8002f7e:	641a      	str	r2, [r3, #64]	; 0x40
 8002f80:	e01e      	b.n	8002fc0 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002f82:	f7fe fe2f 	bl	8001be4 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d90a      	bls.n	8002fa6 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	f043 0208 	orr.w	r2, r3, #8
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2203      	movs	r2, #3
 8002fa0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e0d8      	b.n	8003158 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	dbe8      	blt.n	8002f82 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8002fb0:	2001      	movs	r0, #1
 8002fb2:	f7fe fe23 	bl	8001bfc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	6992      	ldr	r2, [r2, #24]
 8002fbe:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f003 0310 	and.w	r3, r3, #16
 8002fcc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	ea02 0103 	and.w	r1, r2, r3
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	69da      	ldr	r2, [r3, #28]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f003 0310 	and.w	r3, r3, #16
 8002fe4:	409a      	lsls	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f003 0310 	and.w	r3, r3, #16
 8002ffa:	21ff      	movs	r1, #255	; 0xff
 8002ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8003000:	43db      	mvns	r3, r3
 8003002:	ea02 0103 	and.w	r1, r2, r3
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	6a1a      	ldr	r2, [r3, #32]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f003 0310 	and.w	r3, r3, #16
 8003010:	409a      	lsls	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d11d      	bne.n	800305e <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003028:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f003 0310 	and.w	r3, r3, #16
 8003030:	221f      	movs	r2, #31
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	43db      	mvns	r3, r3
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	4013      	ands	r3, r2
 800303c:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f003 0310 	and.w	r3, r3, #16
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	4313      	orrs	r3, r2
 8003054:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003064:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f003 0310 	and.w	r3, r3, #16
 800306c:	2207      	movs	r2, #7
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43db      	mvns	r3, r3
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	4013      	ands	r3, r2
 8003078:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d102      	bne.n	8003088 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8003082:	2300      	movs	r3, #0
 8003084:	61fb      	str	r3, [r7, #28]
 8003086:	e00f      	b.n	80030a8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	2b02      	cmp	r3, #2
 800308e:	d102      	bne.n	8003096 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003090:	2301      	movs	r3, #1
 8003092:	61fb      	str	r3, [r7, #28]
 8003094:	e008      	b.n	80030a8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d102      	bne.n	80030a4 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800309e:	2301      	movs	r3, #1
 80030a0:	61fb      	str	r3, [r7, #28]
 80030a2:	e001      	b.n	80030a8 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80030a4:	2300      	movs	r3, #0
 80030a6:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	69fa      	ldr	r2, [r7, #28]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f003 0310 	and.w	r3, r3, #16
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6819      	ldr	r1, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f003 0310 	and.w	r3, r3, #16
 80030de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	43da      	mvns	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	400a      	ands	r2, r1
 80030ee:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f003 0310 	and.w	r3, r3, #16
 80030fe:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43db      	mvns	r3, r3
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	4013      	ands	r3, r2
 800310c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f003 0310 	and.w	r3, r3, #16
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	4313      	orrs	r3, r2
 8003124:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6819      	ldr	r1, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f003 0310 	and.w	r3, r3, #16
 800313a:	22c0      	movs	r2, #192	; 0xc0
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	43da      	mvns	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	400a      	ands	r2, r1
 8003148:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2201      	movs	r2, #1
 800314e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3720      	adds	r7, #32
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	20008000 	.word	0x20008000

08003164 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003170:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f7fd ffc8 	bl	8001108 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2201      	movs	r2, #1
 800317c:	711a      	strb	r2, [r3, #4]
}
 800317e:	bf00      	nop
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b084      	sub	sp, #16
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003192:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f7ff fea1 	bl	8002edc <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800319a:	bf00      	nop
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b084      	sub	sp, #16
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	f043 0204 	orr.w	r2, r3, #4
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f7ff fe97 	bl	8002ef0 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2201      	movs	r2, #1
 80031c6:	711a      	strb	r2, [r3, #4]
}
 80031c8:	bf00      	nop
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003218:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f7ff ffd8 	bl	80031d0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2201      	movs	r2, #1
 8003224:	711a      	strb	r2, [r3, #4]
}
 8003226:	bf00      	nop
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b084      	sub	sp, #16
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f7ff ffd1 	bl	80031e4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003242:	bf00      	nop
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b084      	sub	sp, #16
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003256:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	f043 0204 	orr.w	r2, r3, #4
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f7ff ffc7 	bl	80031f8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2201      	movs	r2, #1
 800326e:	711a      	strb	r2, [r3, #4]
}
 8003270:	bf00      	nop
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003280:	f7fe fcb0 	bl	8001be4 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e37f      	b.n	8003990 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a66      	ldr	r2, [pc, #408]	; (8003430 <HAL_DMA_Init+0x1b8>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d04a      	beq.n	8003330 <HAL_DMA_Init+0xb8>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a65      	ldr	r2, [pc, #404]	; (8003434 <HAL_DMA_Init+0x1bc>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d045      	beq.n	8003330 <HAL_DMA_Init+0xb8>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a63      	ldr	r2, [pc, #396]	; (8003438 <HAL_DMA_Init+0x1c0>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d040      	beq.n	8003330 <HAL_DMA_Init+0xb8>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a62      	ldr	r2, [pc, #392]	; (800343c <HAL_DMA_Init+0x1c4>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d03b      	beq.n	8003330 <HAL_DMA_Init+0xb8>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a60      	ldr	r2, [pc, #384]	; (8003440 <HAL_DMA_Init+0x1c8>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d036      	beq.n	8003330 <HAL_DMA_Init+0xb8>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a5f      	ldr	r2, [pc, #380]	; (8003444 <HAL_DMA_Init+0x1cc>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d031      	beq.n	8003330 <HAL_DMA_Init+0xb8>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a5d      	ldr	r2, [pc, #372]	; (8003448 <HAL_DMA_Init+0x1d0>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d02c      	beq.n	8003330 <HAL_DMA_Init+0xb8>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a5c      	ldr	r2, [pc, #368]	; (800344c <HAL_DMA_Init+0x1d4>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d027      	beq.n	8003330 <HAL_DMA_Init+0xb8>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a5a      	ldr	r2, [pc, #360]	; (8003450 <HAL_DMA_Init+0x1d8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d022      	beq.n	8003330 <HAL_DMA_Init+0xb8>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a59      	ldr	r2, [pc, #356]	; (8003454 <HAL_DMA_Init+0x1dc>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d01d      	beq.n	8003330 <HAL_DMA_Init+0xb8>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a57      	ldr	r2, [pc, #348]	; (8003458 <HAL_DMA_Init+0x1e0>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d018      	beq.n	8003330 <HAL_DMA_Init+0xb8>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a56      	ldr	r2, [pc, #344]	; (800345c <HAL_DMA_Init+0x1e4>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d013      	beq.n	8003330 <HAL_DMA_Init+0xb8>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a54      	ldr	r2, [pc, #336]	; (8003460 <HAL_DMA_Init+0x1e8>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d00e      	beq.n	8003330 <HAL_DMA_Init+0xb8>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a53      	ldr	r2, [pc, #332]	; (8003464 <HAL_DMA_Init+0x1ec>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d009      	beq.n	8003330 <HAL_DMA_Init+0xb8>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a51      	ldr	r2, [pc, #324]	; (8003468 <HAL_DMA_Init+0x1f0>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d004      	beq.n	8003330 <HAL_DMA_Init+0xb8>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a50      	ldr	r2, [pc, #320]	; (800346c <HAL_DMA_Init+0x1f4>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d101      	bne.n	8003334 <HAL_DMA_Init+0xbc>
 8003330:	2301      	movs	r3, #1
 8003332:	e000      	b.n	8003336 <HAL_DMA_Init+0xbe>
 8003334:	2300      	movs	r3, #0
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 813c 	beq.w	80035b4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2202      	movs	r2, #2
 8003348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a37      	ldr	r2, [pc, #220]	; (8003430 <HAL_DMA_Init+0x1b8>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d04a      	beq.n	80033ec <HAL_DMA_Init+0x174>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a36      	ldr	r2, [pc, #216]	; (8003434 <HAL_DMA_Init+0x1bc>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d045      	beq.n	80033ec <HAL_DMA_Init+0x174>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a34      	ldr	r2, [pc, #208]	; (8003438 <HAL_DMA_Init+0x1c0>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d040      	beq.n	80033ec <HAL_DMA_Init+0x174>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a33      	ldr	r2, [pc, #204]	; (800343c <HAL_DMA_Init+0x1c4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d03b      	beq.n	80033ec <HAL_DMA_Init+0x174>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a31      	ldr	r2, [pc, #196]	; (8003440 <HAL_DMA_Init+0x1c8>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d036      	beq.n	80033ec <HAL_DMA_Init+0x174>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a30      	ldr	r2, [pc, #192]	; (8003444 <HAL_DMA_Init+0x1cc>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d031      	beq.n	80033ec <HAL_DMA_Init+0x174>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a2e      	ldr	r2, [pc, #184]	; (8003448 <HAL_DMA_Init+0x1d0>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d02c      	beq.n	80033ec <HAL_DMA_Init+0x174>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a2d      	ldr	r2, [pc, #180]	; (800344c <HAL_DMA_Init+0x1d4>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d027      	beq.n	80033ec <HAL_DMA_Init+0x174>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a2b      	ldr	r2, [pc, #172]	; (8003450 <HAL_DMA_Init+0x1d8>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d022      	beq.n	80033ec <HAL_DMA_Init+0x174>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a2a      	ldr	r2, [pc, #168]	; (8003454 <HAL_DMA_Init+0x1dc>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d01d      	beq.n	80033ec <HAL_DMA_Init+0x174>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a28      	ldr	r2, [pc, #160]	; (8003458 <HAL_DMA_Init+0x1e0>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d018      	beq.n	80033ec <HAL_DMA_Init+0x174>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a27      	ldr	r2, [pc, #156]	; (800345c <HAL_DMA_Init+0x1e4>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d013      	beq.n	80033ec <HAL_DMA_Init+0x174>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a25      	ldr	r2, [pc, #148]	; (8003460 <HAL_DMA_Init+0x1e8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d00e      	beq.n	80033ec <HAL_DMA_Init+0x174>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a24      	ldr	r2, [pc, #144]	; (8003464 <HAL_DMA_Init+0x1ec>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d009      	beq.n	80033ec <HAL_DMA_Init+0x174>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a22      	ldr	r2, [pc, #136]	; (8003468 <HAL_DMA_Init+0x1f0>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d004      	beq.n	80033ec <HAL_DMA_Init+0x174>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a21      	ldr	r2, [pc, #132]	; (800346c <HAL_DMA_Init+0x1f4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d108      	bne.n	80033fe <HAL_DMA_Init+0x186>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0201 	bic.w	r2, r2, #1
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	e007      	b.n	800340e <HAL_DMA_Init+0x196>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0201 	bic.w	r2, r2, #1
 800340c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800340e:	e02f      	b.n	8003470 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003410:	f7fe fbe8 	bl	8001be4 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b05      	cmp	r3, #5
 800341c:	d928      	bls.n	8003470 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2220      	movs	r2, #32
 8003422:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2203      	movs	r2, #3
 8003428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e2af      	b.n	8003990 <HAL_DMA_Init+0x718>
 8003430:	40020010 	.word	0x40020010
 8003434:	40020028 	.word	0x40020028
 8003438:	40020040 	.word	0x40020040
 800343c:	40020058 	.word	0x40020058
 8003440:	40020070 	.word	0x40020070
 8003444:	40020088 	.word	0x40020088
 8003448:	400200a0 	.word	0x400200a0
 800344c:	400200b8 	.word	0x400200b8
 8003450:	40020410 	.word	0x40020410
 8003454:	40020428 	.word	0x40020428
 8003458:	40020440 	.word	0x40020440
 800345c:	40020458 	.word	0x40020458
 8003460:	40020470 	.word	0x40020470
 8003464:	40020488 	.word	0x40020488
 8003468:	400204a0 	.word	0x400204a0
 800346c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1c8      	bne.n	8003410 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	4b73      	ldr	r3, [pc, #460]	; (8003658 <HAL_DMA_Init+0x3e0>)
 800348a:	4013      	ands	r3, r2
 800348c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003496:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034a2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ae:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d107      	bne.n	80034d4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034cc:	4313      	orrs	r3, r2
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	617b      	str	r3, [r7, #20]
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b28      	cmp	r3, #40	; 0x28
 80034da:	d903      	bls.n	80034e4 <HAL_DMA_Init+0x26c>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2b2e      	cmp	r3, #46	; 0x2e
 80034e2:	d91f      	bls.n	8003524 <HAL_DMA_Init+0x2ac>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	2b3e      	cmp	r3, #62	; 0x3e
 80034ea:	d903      	bls.n	80034f4 <HAL_DMA_Init+0x27c>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b42      	cmp	r3, #66	; 0x42
 80034f2:	d917      	bls.n	8003524 <HAL_DMA_Init+0x2ac>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	2b46      	cmp	r3, #70	; 0x46
 80034fa:	d903      	bls.n	8003504 <HAL_DMA_Init+0x28c>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	2b48      	cmp	r3, #72	; 0x48
 8003502:	d90f      	bls.n	8003524 <HAL_DMA_Init+0x2ac>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2b4e      	cmp	r3, #78	; 0x4e
 800350a:	d903      	bls.n	8003514 <HAL_DMA_Init+0x29c>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b52      	cmp	r3, #82	; 0x52
 8003512:	d907      	bls.n	8003524 <HAL_DMA_Init+0x2ac>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b73      	cmp	r3, #115	; 0x73
 800351a:	d905      	bls.n	8003528 <HAL_DMA_Init+0x2b0>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b77      	cmp	r3, #119	; 0x77
 8003522:	d801      	bhi.n	8003528 <HAL_DMA_Init+0x2b0>
 8003524:	2301      	movs	r3, #1
 8003526:	e000      	b.n	800352a <HAL_DMA_Init+0x2b2>
 8003528:	2300      	movs	r3, #0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003534:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f023 0307 	bic.w	r3, r3, #7
 800354c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	4313      	orrs	r3, r2
 8003556:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	2b04      	cmp	r3, #4
 800355e:	d117      	bne.n	8003590 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	4313      	orrs	r3, r2
 8003568:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00e      	beq.n	8003590 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f001 fe72 	bl	800525c <DMA_CheckFifoParam>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d008      	beq.n	8003590 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2240      	movs	r2, #64	; 0x40
 8003582:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e1ff      	b.n	8003990 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f001 fdad 	bl	80050f8 <DMA_CalcBaseAndBitshift>
 800359e:	4603      	mov	r3, r0
 80035a0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a6:	f003 031f 	and.w	r3, r3, #31
 80035aa:	223f      	movs	r2, #63	; 0x3f
 80035ac:	409a      	lsls	r2, r3
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	609a      	str	r2, [r3, #8]
 80035b2:	e0fe      	b.n	80037b2 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a28      	ldr	r2, [pc, #160]	; (800365c <HAL_DMA_Init+0x3e4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d04a      	beq.n	8003654 <HAL_DMA_Init+0x3dc>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a27      	ldr	r2, [pc, #156]	; (8003660 <HAL_DMA_Init+0x3e8>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d045      	beq.n	8003654 <HAL_DMA_Init+0x3dc>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a25      	ldr	r2, [pc, #148]	; (8003664 <HAL_DMA_Init+0x3ec>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d040      	beq.n	8003654 <HAL_DMA_Init+0x3dc>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a24      	ldr	r2, [pc, #144]	; (8003668 <HAL_DMA_Init+0x3f0>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d03b      	beq.n	8003654 <HAL_DMA_Init+0x3dc>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a22      	ldr	r2, [pc, #136]	; (800366c <HAL_DMA_Init+0x3f4>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d036      	beq.n	8003654 <HAL_DMA_Init+0x3dc>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a21      	ldr	r2, [pc, #132]	; (8003670 <HAL_DMA_Init+0x3f8>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d031      	beq.n	8003654 <HAL_DMA_Init+0x3dc>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a1f      	ldr	r2, [pc, #124]	; (8003674 <HAL_DMA_Init+0x3fc>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d02c      	beq.n	8003654 <HAL_DMA_Init+0x3dc>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a1e      	ldr	r2, [pc, #120]	; (8003678 <HAL_DMA_Init+0x400>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d027      	beq.n	8003654 <HAL_DMA_Init+0x3dc>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a1c      	ldr	r2, [pc, #112]	; (800367c <HAL_DMA_Init+0x404>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d022      	beq.n	8003654 <HAL_DMA_Init+0x3dc>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a1b      	ldr	r2, [pc, #108]	; (8003680 <HAL_DMA_Init+0x408>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d01d      	beq.n	8003654 <HAL_DMA_Init+0x3dc>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a19      	ldr	r2, [pc, #100]	; (8003684 <HAL_DMA_Init+0x40c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d018      	beq.n	8003654 <HAL_DMA_Init+0x3dc>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a18      	ldr	r2, [pc, #96]	; (8003688 <HAL_DMA_Init+0x410>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d013      	beq.n	8003654 <HAL_DMA_Init+0x3dc>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a16      	ldr	r2, [pc, #88]	; (800368c <HAL_DMA_Init+0x414>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00e      	beq.n	8003654 <HAL_DMA_Init+0x3dc>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a15      	ldr	r2, [pc, #84]	; (8003690 <HAL_DMA_Init+0x418>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d009      	beq.n	8003654 <HAL_DMA_Init+0x3dc>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a13      	ldr	r2, [pc, #76]	; (8003694 <HAL_DMA_Init+0x41c>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d004      	beq.n	8003654 <HAL_DMA_Init+0x3dc>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a12      	ldr	r2, [pc, #72]	; (8003698 <HAL_DMA_Init+0x420>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d123      	bne.n	800369c <HAL_DMA_Init+0x424>
 8003654:	2301      	movs	r3, #1
 8003656:	e022      	b.n	800369e <HAL_DMA_Init+0x426>
 8003658:	fe10803f 	.word	0xfe10803f
 800365c:	48022c08 	.word	0x48022c08
 8003660:	48022c1c 	.word	0x48022c1c
 8003664:	48022c30 	.word	0x48022c30
 8003668:	48022c44 	.word	0x48022c44
 800366c:	48022c58 	.word	0x48022c58
 8003670:	48022c6c 	.word	0x48022c6c
 8003674:	48022c80 	.word	0x48022c80
 8003678:	48022c94 	.word	0x48022c94
 800367c:	58025408 	.word	0x58025408
 8003680:	5802541c 	.word	0x5802541c
 8003684:	58025430 	.word	0x58025430
 8003688:	58025444 	.word	0x58025444
 800368c:	58025458 	.word	0x58025458
 8003690:	5802546c 	.word	0x5802546c
 8003694:	58025480 	.word	0x58025480
 8003698:	58025494 	.word	0x58025494
 800369c:	2300      	movs	r3, #0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d07e      	beq.n	80037a0 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a80      	ldr	r2, [pc, #512]	; (80038a8 <HAL_DMA_Init+0x630>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d021      	beq.n	80036f0 <HAL_DMA_Init+0x478>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a7e      	ldr	r2, [pc, #504]	; (80038ac <HAL_DMA_Init+0x634>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d01c      	beq.n	80036f0 <HAL_DMA_Init+0x478>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a7d      	ldr	r2, [pc, #500]	; (80038b0 <HAL_DMA_Init+0x638>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d017      	beq.n	80036f0 <HAL_DMA_Init+0x478>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a7b      	ldr	r2, [pc, #492]	; (80038b4 <HAL_DMA_Init+0x63c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d012      	beq.n	80036f0 <HAL_DMA_Init+0x478>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a7a      	ldr	r2, [pc, #488]	; (80038b8 <HAL_DMA_Init+0x640>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d00d      	beq.n	80036f0 <HAL_DMA_Init+0x478>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a78      	ldr	r2, [pc, #480]	; (80038bc <HAL_DMA_Init+0x644>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d008      	beq.n	80036f0 <HAL_DMA_Init+0x478>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a77      	ldr	r2, [pc, #476]	; (80038c0 <HAL_DMA_Init+0x648>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d003      	beq.n	80036f0 <HAL_DMA_Init+0x478>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a75      	ldr	r2, [pc, #468]	; (80038c4 <HAL_DMA_Init+0x64c>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2202      	movs	r2, #2
 80036fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	4b6e      	ldr	r3, [pc, #440]	; (80038c8 <HAL_DMA_Init+0x650>)
 800370e:	4013      	ands	r3, r2
 8003710:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	2b40      	cmp	r3, #64	; 0x40
 8003718:	d008      	beq.n	800372c <HAL_DMA_Init+0x4b4>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	2b80      	cmp	r3, #128	; 0x80
 8003720:	d102      	bne.n	8003728 <HAL_DMA_Init+0x4b0>
 8003722:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003726:	e002      	b.n	800372e <HAL_DMA_Init+0x4b6>
 8003728:	2300      	movs	r3, #0
 800372a:	e000      	b.n	800372e <HAL_DMA_Init+0x4b6>
 800372c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	68d2      	ldr	r2, [r2, #12]
 8003732:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003734:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800373c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003744:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800374c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003754:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800375c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	4313      	orrs	r3, r2
 8003762:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	461a      	mov	r2, r3
 8003772:	4b56      	ldr	r3, [pc, #344]	; (80038cc <HAL_DMA_Init+0x654>)
 8003774:	4413      	add	r3, r2
 8003776:	4a56      	ldr	r2, [pc, #344]	; (80038d0 <HAL_DMA_Init+0x658>)
 8003778:	fba2 2303 	umull	r2, r3, r2, r3
 800377c:	091b      	lsrs	r3, r3, #4
 800377e:	009a      	lsls	r2, r3, #2
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f001 fcb7 	bl	80050f8 <DMA_CalcBaseAndBitshift>
 800378a:	4603      	mov	r3, r0
 800378c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003792:	f003 031f 	and.w	r3, r3, #31
 8003796:	2201      	movs	r2, #1
 8003798:	409a      	lsls	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	605a      	str	r2, [r3, #4]
 800379e:	e008      	b.n	80037b2 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2240      	movs	r2, #64	; 0x40
 80037a4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2203      	movs	r2, #3
 80037aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e0ee      	b.n	8003990 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a47      	ldr	r2, [pc, #284]	; (80038d4 <HAL_DMA_Init+0x65c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d072      	beq.n	80038a2 <HAL_DMA_Init+0x62a>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a45      	ldr	r2, [pc, #276]	; (80038d8 <HAL_DMA_Init+0x660>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d06d      	beq.n	80038a2 <HAL_DMA_Init+0x62a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a44      	ldr	r2, [pc, #272]	; (80038dc <HAL_DMA_Init+0x664>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d068      	beq.n	80038a2 <HAL_DMA_Init+0x62a>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a42      	ldr	r2, [pc, #264]	; (80038e0 <HAL_DMA_Init+0x668>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d063      	beq.n	80038a2 <HAL_DMA_Init+0x62a>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a41      	ldr	r2, [pc, #260]	; (80038e4 <HAL_DMA_Init+0x66c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d05e      	beq.n	80038a2 <HAL_DMA_Init+0x62a>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a3f      	ldr	r2, [pc, #252]	; (80038e8 <HAL_DMA_Init+0x670>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d059      	beq.n	80038a2 <HAL_DMA_Init+0x62a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a3e      	ldr	r2, [pc, #248]	; (80038ec <HAL_DMA_Init+0x674>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d054      	beq.n	80038a2 <HAL_DMA_Init+0x62a>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a3c      	ldr	r2, [pc, #240]	; (80038f0 <HAL_DMA_Init+0x678>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d04f      	beq.n	80038a2 <HAL_DMA_Init+0x62a>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a3b      	ldr	r2, [pc, #236]	; (80038f4 <HAL_DMA_Init+0x67c>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d04a      	beq.n	80038a2 <HAL_DMA_Init+0x62a>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a39      	ldr	r2, [pc, #228]	; (80038f8 <HAL_DMA_Init+0x680>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d045      	beq.n	80038a2 <HAL_DMA_Init+0x62a>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a38      	ldr	r2, [pc, #224]	; (80038fc <HAL_DMA_Init+0x684>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d040      	beq.n	80038a2 <HAL_DMA_Init+0x62a>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a36      	ldr	r2, [pc, #216]	; (8003900 <HAL_DMA_Init+0x688>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d03b      	beq.n	80038a2 <HAL_DMA_Init+0x62a>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a35      	ldr	r2, [pc, #212]	; (8003904 <HAL_DMA_Init+0x68c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d036      	beq.n	80038a2 <HAL_DMA_Init+0x62a>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a33      	ldr	r2, [pc, #204]	; (8003908 <HAL_DMA_Init+0x690>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d031      	beq.n	80038a2 <HAL_DMA_Init+0x62a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a32      	ldr	r2, [pc, #200]	; (800390c <HAL_DMA_Init+0x694>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d02c      	beq.n	80038a2 <HAL_DMA_Init+0x62a>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a30      	ldr	r2, [pc, #192]	; (8003910 <HAL_DMA_Init+0x698>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d027      	beq.n	80038a2 <HAL_DMA_Init+0x62a>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a14      	ldr	r2, [pc, #80]	; (80038a8 <HAL_DMA_Init+0x630>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d022      	beq.n	80038a2 <HAL_DMA_Init+0x62a>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a12      	ldr	r2, [pc, #72]	; (80038ac <HAL_DMA_Init+0x634>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d01d      	beq.n	80038a2 <HAL_DMA_Init+0x62a>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a11      	ldr	r2, [pc, #68]	; (80038b0 <HAL_DMA_Init+0x638>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d018      	beq.n	80038a2 <HAL_DMA_Init+0x62a>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a0f      	ldr	r2, [pc, #60]	; (80038b4 <HAL_DMA_Init+0x63c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d013      	beq.n	80038a2 <HAL_DMA_Init+0x62a>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a0e      	ldr	r2, [pc, #56]	; (80038b8 <HAL_DMA_Init+0x640>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d00e      	beq.n	80038a2 <HAL_DMA_Init+0x62a>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a0c      	ldr	r2, [pc, #48]	; (80038bc <HAL_DMA_Init+0x644>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d009      	beq.n	80038a2 <HAL_DMA_Init+0x62a>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a0b      	ldr	r2, [pc, #44]	; (80038c0 <HAL_DMA_Init+0x648>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d004      	beq.n	80038a2 <HAL_DMA_Init+0x62a>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a09      	ldr	r2, [pc, #36]	; (80038c4 <HAL_DMA_Init+0x64c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d138      	bne.n	8003914 <HAL_DMA_Init+0x69c>
 80038a2:	2301      	movs	r3, #1
 80038a4:	e037      	b.n	8003916 <HAL_DMA_Init+0x69e>
 80038a6:	bf00      	nop
 80038a8:	58025408 	.word	0x58025408
 80038ac:	5802541c 	.word	0x5802541c
 80038b0:	58025430 	.word	0x58025430
 80038b4:	58025444 	.word	0x58025444
 80038b8:	58025458 	.word	0x58025458
 80038bc:	5802546c 	.word	0x5802546c
 80038c0:	58025480 	.word	0x58025480
 80038c4:	58025494 	.word	0x58025494
 80038c8:	fffe000f 	.word	0xfffe000f
 80038cc:	a7fdabf8 	.word	0xa7fdabf8
 80038d0:	cccccccd 	.word	0xcccccccd
 80038d4:	40020010 	.word	0x40020010
 80038d8:	40020028 	.word	0x40020028
 80038dc:	40020040 	.word	0x40020040
 80038e0:	40020058 	.word	0x40020058
 80038e4:	40020070 	.word	0x40020070
 80038e8:	40020088 	.word	0x40020088
 80038ec:	400200a0 	.word	0x400200a0
 80038f0:	400200b8 	.word	0x400200b8
 80038f4:	40020410 	.word	0x40020410
 80038f8:	40020428 	.word	0x40020428
 80038fc:	40020440 	.word	0x40020440
 8003900:	40020458 	.word	0x40020458
 8003904:	40020470 	.word	0x40020470
 8003908:	40020488 	.word	0x40020488
 800390c:	400204a0 	.word	0x400204a0
 8003910:	400204b8 	.word	0x400204b8
 8003914:	2300      	movs	r3, #0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d032      	beq.n	8003980 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f001 fd1a 	bl	8005354 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	2b80      	cmp	r3, #128	; 0x80
 8003926:	d102      	bne.n	800392e <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003936:	b2d2      	uxtb	r2, r2
 8003938:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003942:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d010      	beq.n	800396e <HAL_DMA_Init+0x6f6>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	2b08      	cmp	r3, #8
 8003952:	d80c      	bhi.n	800396e <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f001 fd97 	bl	8005488 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800396a:	605a      	str	r2, [r3, #4]
 800396c:	e008      	b.n	8003980 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
 80039a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e226      	b.n	8003e02 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d101      	bne.n	80039c2 <HAL_DMA_Start_IT+0x2a>
 80039be:	2302      	movs	r3, #2
 80039c0:	e21f      	b.n	8003e02 <HAL_DMA_Start_IT+0x46a>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	f040 820a 	bne.w	8003dec <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2202      	movs	r2, #2
 80039dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a68      	ldr	r2, [pc, #416]	; (8003b8c <HAL_DMA_Start_IT+0x1f4>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d04a      	beq.n	8003a86 <HAL_DMA_Start_IT+0xee>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a66      	ldr	r2, [pc, #408]	; (8003b90 <HAL_DMA_Start_IT+0x1f8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d045      	beq.n	8003a86 <HAL_DMA_Start_IT+0xee>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a65      	ldr	r2, [pc, #404]	; (8003b94 <HAL_DMA_Start_IT+0x1fc>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d040      	beq.n	8003a86 <HAL_DMA_Start_IT+0xee>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a63      	ldr	r2, [pc, #396]	; (8003b98 <HAL_DMA_Start_IT+0x200>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d03b      	beq.n	8003a86 <HAL_DMA_Start_IT+0xee>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a62      	ldr	r2, [pc, #392]	; (8003b9c <HAL_DMA_Start_IT+0x204>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d036      	beq.n	8003a86 <HAL_DMA_Start_IT+0xee>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a60      	ldr	r2, [pc, #384]	; (8003ba0 <HAL_DMA_Start_IT+0x208>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d031      	beq.n	8003a86 <HAL_DMA_Start_IT+0xee>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a5f      	ldr	r2, [pc, #380]	; (8003ba4 <HAL_DMA_Start_IT+0x20c>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d02c      	beq.n	8003a86 <HAL_DMA_Start_IT+0xee>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a5d      	ldr	r2, [pc, #372]	; (8003ba8 <HAL_DMA_Start_IT+0x210>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d027      	beq.n	8003a86 <HAL_DMA_Start_IT+0xee>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a5c      	ldr	r2, [pc, #368]	; (8003bac <HAL_DMA_Start_IT+0x214>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d022      	beq.n	8003a86 <HAL_DMA_Start_IT+0xee>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a5a      	ldr	r2, [pc, #360]	; (8003bb0 <HAL_DMA_Start_IT+0x218>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d01d      	beq.n	8003a86 <HAL_DMA_Start_IT+0xee>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a59      	ldr	r2, [pc, #356]	; (8003bb4 <HAL_DMA_Start_IT+0x21c>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d018      	beq.n	8003a86 <HAL_DMA_Start_IT+0xee>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a57      	ldr	r2, [pc, #348]	; (8003bb8 <HAL_DMA_Start_IT+0x220>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d013      	beq.n	8003a86 <HAL_DMA_Start_IT+0xee>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a56      	ldr	r2, [pc, #344]	; (8003bbc <HAL_DMA_Start_IT+0x224>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d00e      	beq.n	8003a86 <HAL_DMA_Start_IT+0xee>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a54      	ldr	r2, [pc, #336]	; (8003bc0 <HAL_DMA_Start_IT+0x228>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d009      	beq.n	8003a86 <HAL_DMA_Start_IT+0xee>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a53      	ldr	r2, [pc, #332]	; (8003bc4 <HAL_DMA_Start_IT+0x22c>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d004      	beq.n	8003a86 <HAL_DMA_Start_IT+0xee>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a51      	ldr	r2, [pc, #324]	; (8003bc8 <HAL_DMA_Start_IT+0x230>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d108      	bne.n	8003a98 <HAL_DMA_Start_IT+0x100>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 0201 	bic.w	r2, r2, #1
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	e007      	b.n	8003aa8 <HAL_DMA_Start_IT+0x110>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0201 	bic.w	r2, r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	68b9      	ldr	r1, [r7, #8]
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f001 f93e 	bl	8004d30 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a34      	ldr	r2, [pc, #208]	; (8003b8c <HAL_DMA_Start_IT+0x1f4>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d04a      	beq.n	8003b54 <HAL_DMA_Start_IT+0x1bc>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a33      	ldr	r2, [pc, #204]	; (8003b90 <HAL_DMA_Start_IT+0x1f8>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d045      	beq.n	8003b54 <HAL_DMA_Start_IT+0x1bc>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a31      	ldr	r2, [pc, #196]	; (8003b94 <HAL_DMA_Start_IT+0x1fc>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d040      	beq.n	8003b54 <HAL_DMA_Start_IT+0x1bc>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a30      	ldr	r2, [pc, #192]	; (8003b98 <HAL_DMA_Start_IT+0x200>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d03b      	beq.n	8003b54 <HAL_DMA_Start_IT+0x1bc>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a2e      	ldr	r2, [pc, #184]	; (8003b9c <HAL_DMA_Start_IT+0x204>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d036      	beq.n	8003b54 <HAL_DMA_Start_IT+0x1bc>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a2d      	ldr	r2, [pc, #180]	; (8003ba0 <HAL_DMA_Start_IT+0x208>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d031      	beq.n	8003b54 <HAL_DMA_Start_IT+0x1bc>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a2b      	ldr	r2, [pc, #172]	; (8003ba4 <HAL_DMA_Start_IT+0x20c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d02c      	beq.n	8003b54 <HAL_DMA_Start_IT+0x1bc>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a2a      	ldr	r2, [pc, #168]	; (8003ba8 <HAL_DMA_Start_IT+0x210>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d027      	beq.n	8003b54 <HAL_DMA_Start_IT+0x1bc>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a28      	ldr	r2, [pc, #160]	; (8003bac <HAL_DMA_Start_IT+0x214>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d022      	beq.n	8003b54 <HAL_DMA_Start_IT+0x1bc>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a27      	ldr	r2, [pc, #156]	; (8003bb0 <HAL_DMA_Start_IT+0x218>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d01d      	beq.n	8003b54 <HAL_DMA_Start_IT+0x1bc>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a25      	ldr	r2, [pc, #148]	; (8003bb4 <HAL_DMA_Start_IT+0x21c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d018      	beq.n	8003b54 <HAL_DMA_Start_IT+0x1bc>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a24      	ldr	r2, [pc, #144]	; (8003bb8 <HAL_DMA_Start_IT+0x220>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d013      	beq.n	8003b54 <HAL_DMA_Start_IT+0x1bc>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a22      	ldr	r2, [pc, #136]	; (8003bbc <HAL_DMA_Start_IT+0x224>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d00e      	beq.n	8003b54 <HAL_DMA_Start_IT+0x1bc>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a21      	ldr	r2, [pc, #132]	; (8003bc0 <HAL_DMA_Start_IT+0x228>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d009      	beq.n	8003b54 <HAL_DMA_Start_IT+0x1bc>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a1f      	ldr	r2, [pc, #124]	; (8003bc4 <HAL_DMA_Start_IT+0x22c>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d004      	beq.n	8003b54 <HAL_DMA_Start_IT+0x1bc>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a1e      	ldr	r2, [pc, #120]	; (8003bc8 <HAL_DMA_Start_IT+0x230>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d101      	bne.n	8003b58 <HAL_DMA_Start_IT+0x1c0>
 8003b54:	2301      	movs	r3, #1
 8003b56:	e000      	b.n	8003b5a <HAL_DMA_Start_IT+0x1c2>
 8003b58:	2300      	movs	r3, #0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d036      	beq.n	8003bcc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f023 021e 	bic.w	r2, r3, #30
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f042 0216 	orr.w	r2, r2, #22
 8003b70:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d03e      	beq.n	8003bf8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f042 0208 	orr.w	r2, r2, #8
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	e035      	b.n	8003bf8 <HAL_DMA_Start_IT+0x260>
 8003b8c:	40020010 	.word	0x40020010
 8003b90:	40020028 	.word	0x40020028
 8003b94:	40020040 	.word	0x40020040
 8003b98:	40020058 	.word	0x40020058
 8003b9c:	40020070 	.word	0x40020070
 8003ba0:	40020088 	.word	0x40020088
 8003ba4:	400200a0 	.word	0x400200a0
 8003ba8:	400200b8 	.word	0x400200b8
 8003bac:	40020410 	.word	0x40020410
 8003bb0:	40020428 	.word	0x40020428
 8003bb4:	40020440 	.word	0x40020440
 8003bb8:	40020458 	.word	0x40020458
 8003bbc:	40020470 	.word	0x40020470
 8003bc0:	40020488 	.word	0x40020488
 8003bc4:	400204a0 	.word	0x400204a0
 8003bc8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f023 020e 	bic.w	r2, r3, #14
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 020a 	orr.w	r2, r2, #10
 8003bde:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d007      	beq.n	8003bf8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 0204 	orr.w	r2, r2, #4
 8003bf6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a83      	ldr	r2, [pc, #524]	; (8003e0c <HAL_DMA_Start_IT+0x474>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d072      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x350>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a82      	ldr	r2, [pc, #520]	; (8003e10 <HAL_DMA_Start_IT+0x478>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d06d      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x350>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a80      	ldr	r2, [pc, #512]	; (8003e14 <HAL_DMA_Start_IT+0x47c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d068      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x350>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a7f      	ldr	r2, [pc, #508]	; (8003e18 <HAL_DMA_Start_IT+0x480>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d063      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x350>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a7d      	ldr	r2, [pc, #500]	; (8003e1c <HAL_DMA_Start_IT+0x484>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d05e      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x350>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a7c      	ldr	r2, [pc, #496]	; (8003e20 <HAL_DMA_Start_IT+0x488>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d059      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x350>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a7a      	ldr	r2, [pc, #488]	; (8003e24 <HAL_DMA_Start_IT+0x48c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d054      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x350>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a79      	ldr	r2, [pc, #484]	; (8003e28 <HAL_DMA_Start_IT+0x490>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d04f      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x350>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a77      	ldr	r2, [pc, #476]	; (8003e2c <HAL_DMA_Start_IT+0x494>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d04a      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x350>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a76      	ldr	r2, [pc, #472]	; (8003e30 <HAL_DMA_Start_IT+0x498>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d045      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x350>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a74      	ldr	r2, [pc, #464]	; (8003e34 <HAL_DMA_Start_IT+0x49c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d040      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x350>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a73      	ldr	r2, [pc, #460]	; (8003e38 <HAL_DMA_Start_IT+0x4a0>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d03b      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x350>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a71      	ldr	r2, [pc, #452]	; (8003e3c <HAL_DMA_Start_IT+0x4a4>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d036      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x350>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a70      	ldr	r2, [pc, #448]	; (8003e40 <HAL_DMA_Start_IT+0x4a8>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d031      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x350>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a6e      	ldr	r2, [pc, #440]	; (8003e44 <HAL_DMA_Start_IT+0x4ac>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d02c      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x350>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a6d      	ldr	r2, [pc, #436]	; (8003e48 <HAL_DMA_Start_IT+0x4b0>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d027      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x350>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a6b      	ldr	r2, [pc, #428]	; (8003e4c <HAL_DMA_Start_IT+0x4b4>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d022      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x350>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a6a      	ldr	r2, [pc, #424]	; (8003e50 <HAL_DMA_Start_IT+0x4b8>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d01d      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x350>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a68      	ldr	r2, [pc, #416]	; (8003e54 <HAL_DMA_Start_IT+0x4bc>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d018      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x350>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a67      	ldr	r2, [pc, #412]	; (8003e58 <HAL_DMA_Start_IT+0x4c0>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d013      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x350>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a65      	ldr	r2, [pc, #404]	; (8003e5c <HAL_DMA_Start_IT+0x4c4>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d00e      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x350>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a64      	ldr	r2, [pc, #400]	; (8003e60 <HAL_DMA_Start_IT+0x4c8>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d009      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x350>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a62      	ldr	r2, [pc, #392]	; (8003e64 <HAL_DMA_Start_IT+0x4cc>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d004      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x350>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a61      	ldr	r2, [pc, #388]	; (8003e68 <HAL_DMA_Start_IT+0x4d0>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d101      	bne.n	8003cec <HAL_DMA_Start_IT+0x354>
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e000      	b.n	8003cee <HAL_DMA_Start_IT+0x356>
 8003cec:	2300      	movs	r3, #0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d01a      	beq.n	8003d28 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d007      	beq.n	8003d10 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d0e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d007      	beq.n	8003d28 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d26:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a37      	ldr	r2, [pc, #220]	; (8003e0c <HAL_DMA_Start_IT+0x474>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d04a      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x430>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a36      	ldr	r2, [pc, #216]	; (8003e10 <HAL_DMA_Start_IT+0x478>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d045      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x430>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a34      	ldr	r2, [pc, #208]	; (8003e14 <HAL_DMA_Start_IT+0x47c>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d040      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x430>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a33      	ldr	r2, [pc, #204]	; (8003e18 <HAL_DMA_Start_IT+0x480>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d03b      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x430>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a31      	ldr	r2, [pc, #196]	; (8003e1c <HAL_DMA_Start_IT+0x484>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d036      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x430>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a30      	ldr	r2, [pc, #192]	; (8003e20 <HAL_DMA_Start_IT+0x488>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d031      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x430>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a2e      	ldr	r2, [pc, #184]	; (8003e24 <HAL_DMA_Start_IT+0x48c>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d02c      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x430>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a2d      	ldr	r2, [pc, #180]	; (8003e28 <HAL_DMA_Start_IT+0x490>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d027      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x430>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a2b      	ldr	r2, [pc, #172]	; (8003e2c <HAL_DMA_Start_IT+0x494>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d022      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x430>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a2a      	ldr	r2, [pc, #168]	; (8003e30 <HAL_DMA_Start_IT+0x498>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d01d      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x430>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a28      	ldr	r2, [pc, #160]	; (8003e34 <HAL_DMA_Start_IT+0x49c>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d018      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x430>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a27      	ldr	r2, [pc, #156]	; (8003e38 <HAL_DMA_Start_IT+0x4a0>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d013      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x430>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a25      	ldr	r2, [pc, #148]	; (8003e3c <HAL_DMA_Start_IT+0x4a4>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d00e      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x430>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a24      	ldr	r2, [pc, #144]	; (8003e40 <HAL_DMA_Start_IT+0x4a8>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d009      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x430>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a22      	ldr	r2, [pc, #136]	; (8003e44 <HAL_DMA_Start_IT+0x4ac>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d004      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x430>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a21      	ldr	r2, [pc, #132]	; (8003e48 <HAL_DMA_Start_IT+0x4b0>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d108      	bne.n	8003dda <HAL_DMA_Start_IT+0x442>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0201 	orr.w	r2, r2, #1
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	e012      	b.n	8003e00 <HAL_DMA_Start_IT+0x468>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f042 0201 	orr.w	r2, r2, #1
 8003de8:	601a      	str	r2, [r3, #0]
 8003dea:	e009      	b.n	8003e00 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dfa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40020010 	.word	0x40020010
 8003e10:	40020028 	.word	0x40020028
 8003e14:	40020040 	.word	0x40020040
 8003e18:	40020058 	.word	0x40020058
 8003e1c:	40020070 	.word	0x40020070
 8003e20:	40020088 	.word	0x40020088
 8003e24:	400200a0 	.word	0x400200a0
 8003e28:	400200b8 	.word	0x400200b8
 8003e2c:	40020410 	.word	0x40020410
 8003e30:	40020428 	.word	0x40020428
 8003e34:	40020440 	.word	0x40020440
 8003e38:	40020458 	.word	0x40020458
 8003e3c:	40020470 	.word	0x40020470
 8003e40:	40020488 	.word	0x40020488
 8003e44:	400204a0 	.word	0x400204a0
 8003e48:	400204b8 	.word	0x400204b8
 8003e4c:	58025408 	.word	0x58025408
 8003e50:	5802541c 	.word	0x5802541c
 8003e54:	58025430 	.word	0x58025430
 8003e58:	58025444 	.word	0x58025444
 8003e5c:	58025458 	.word	0x58025458
 8003e60:	5802546c 	.word	0x5802546c
 8003e64:	58025480 	.word	0x58025480
 8003e68:	58025494 	.word	0x58025494

08003e6c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b08a      	sub	sp, #40	; 0x28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e78:	4b67      	ldr	r3, [pc, #412]	; (8004018 <HAL_DMA_IRQHandler+0x1ac>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a67      	ldr	r2, [pc, #412]	; (800401c <HAL_DMA_IRQHandler+0x1b0>)
 8003e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e82:	0a9b      	lsrs	r3, r3, #10
 8003e84:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e90:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a5f      	ldr	r2, [pc, #380]	; (8004020 <HAL_DMA_IRQHandler+0x1b4>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d04a      	beq.n	8003f3e <HAL_DMA_IRQHandler+0xd2>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a5d      	ldr	r2, [pc, #372]	; (8004024 <HAL_DMA_IRQHandler+0x1b8>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d045      	beq.n	8003f3e <HAL_DMA_IRQHandler+0xd2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a5c      	ldr	r2, [pc, #368]	; (8004028 <HAL_DMA_IRQHandler+0x1bc>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d040      	beq.n	8003f3e <HAL_DMA_IRQHandler+0xd2>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a5a      	ldr	r2, [pc, #360]	; (800402c <HAL_DMA_IRQHandler+0x1c0>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d03b      	beq.n	8003f3e <HAL_DMA_IRQHandler+0xd2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a59      	ldr	r2, [pc, #356]	; (8004030 <HAL_DMA_IRQHandler+0x1c4>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d036      	beq.n	8003f3e <HAL_DMA_IRQHandler+0xd2>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a57      	ldr	r2, [pc, #348]	; (8004034 <HAL_DMA_IRQHandler+0x1c8>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d031      	beq.n	8003f3e <HAL_DMA_IRQHandler+0xd2>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a56      	ldr	r2, [pc, #344]	; (8004038 <HAL_DMA_IRQHandler+0x1cc>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d02c      	beq.n	8003f3e <HAL_DMA_IRQHandler+0xd2>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a54      	ldr	r2, [pc, #336]	; (800403c <HAL_DMA_IRQHandler+0x1d0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d027      	beq.n	8003f3e <HAL_DMA_IRQHandler+0xd2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a53      	ldr	r2, [pc, #332]	; (8004040 <HAL_DMA_IRQHandler+0x1d4>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d022      	beq.n	8003f3e <HAL_DMA_IRQHandler+0xd2>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a51      	ldr	r2, [pc, #324]	; (8004044 <HAL_DMA_IRQHandler+0x1d8>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d01d      	beq.n	8003f3e <HAL_DMA_IRQHandler+0xd2>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a50      	ldr	r2, [pc, #320]	; (8004048 <HAL_DMA_IRQHandler+0x1dc>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d018      	beq.n	8003f3e <HAL_DMA_IRQHandler+0xd2>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a4e      	ldr	r2, [pc, #312]	; (800404c <HAL_DMA_IRQHandler+0x1e0>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d013      	beq.n	8003f3e <HAL_DMA_IRQHandler+0xd2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a4d      	ldr	r2, [pc, #308]	; (8004050 <HAL_DMA_IRQHandler+0x1e4>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d00e      	beq.n	8003f3e <HAL_DMA_IRQHandler+0xd2>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a4b      	ldr	r2, [pc, #300]	; (8004054 <HAL_DMA_IRQHandler+0x1e8>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d009      	beq.n	8003f3e <HAL_DMA_IRQHandler+0xd2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a4a      	ldr	r2, [pc, #296]	; (8004058 <HAL_DMA_IRQHandler+0x1ec>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d004      	beq.n	8003f3e <HAL_DMA_IRQHandler+0xd2>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a48      	ldr	r2, [pc, #288]	; (800405c <HAL_DMA_IRQHandler+0x1f0>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d101      	bne.n	8003f42 <HAL_DMA_IRQHandler+0xd6>
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e000      	b.n	8003f44 <HAL_DMA_IRQHandler+0xd8>
 8003f42:	2300      	movs	r3, #0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 842b 	beq.w	80047a0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4e:	f003 031f 	and.w	r3, r3, #31
 8003f52:	2208      	movs	r2, #8
 8003f54:	409a      	lsls	r2, r3
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 80a2 	beq.w	80040a4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a2e      	ldr	r2, [pc, #184]	; (8004020 <HAL_DMA_IRQHandler+0x1b4>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d04a      	beq.n	8004000 <HAL_DMA_IRQHandler+0x194>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a2d      	ldr	r2, [pc, #180]	; (8004024 <HAL_DMA_IRQHandler+0x1b8>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d045      	beq.n	8004000 <HAL_DMA_IRQHandler+0x194>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a2b      	ldr	r2, [pc, #172]	; (8004028 <HAL_DMA_IRQHandler+0x1bc>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d040      	beq.n	8004000 <HAL_DMA_IRQHandler+0x194>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a2a      	ldr	r2, [pc, #168]	; (800402c <HAL_DMA_IRQHandler+0x1c0>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d03b      	beq.n	8004000 <HAL_DMA_IRQHandler+0x194>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a28      	ldr	r2, [pc, #160]	; (8004030 <HAL_DMA_IRQHandler+0x1c4>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d036      	beq.n	8004000 <HAL_DMA_IRQHandler+0x194>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a27      	ldr	r2, [pc, #156]	; (8004034 <HAL_DMA_IRQHandler+0x1c8>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d031      	beq.n	8004000 <HAL_DMA_IRQHandler+0x194>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a25      	ldr	r2, [pc, #148]	; (8004038 <HAL_DMA_IRQHandler+0x1cc>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d02c      	beq.n	8004000 <HAL_DMA_IRQHandler+0x194>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a24      	ldr	r2, [pc, #144]	; (800403c <HAL_DMA_IRQHandler+0x1d0>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d027      	beq.n	8004000 <HAL_DMA_IRQHandler+0x194>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a22      	ldr	r2, [pc, #136]	; (8004040 <HAL_DMA_IRQHandler+0x1d4>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d022      	beq.n	8004000 <HAL_DMA_IRQHandler+0x194>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a21      	ldr	r2, [pc, #132]	; (8004044 <HAL_DMA_IRQHandler+0x1d8>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d01d      	beq.n	8004000 <HAL_DMA_IRQHandler+0x194>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a1f      	ldr	r2, [pc, #124]	; (8004048 <HAL_DMA_IRQHandler+0x1dc>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d018      	beq.n	8004000 <HAL_DMA_IRQHandler+0x194>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a1e      	ldr	r2, [pc, #120]	; (800404c <HAL_DMA_IRQHandler+0x1e0>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d013      	beq.n	8004000 <HAL_DMA_IRQHandler+0x194>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a1c      	ldr	r2, [pc, #112]	; (8004050 <HAL_DMA_IRQHandler+0x1e4>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d00e      	beq.n	8004000 <HAL_DMA_IRQHandler+0x194>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a1b      	ldr	r2, [pc, #108]	; (8004054 <HAL_DMA_IRQHandler+0x1e8>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d009      	beq.n	8004000 <HAL_DMA_IRQHandler+0x194>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a19      	ldr	r2, [pc, #100]	; (8004058 <HAL_DMA_IRQHandler+0x1ec>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d004      	beq.n	8004000 <HAL_DMA_IRQHandler+0x194>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a18      	ldr	r2, [pc, #96]	; (800405c <HAL_DMA_IRQHandler+0x1f0>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d12f      	bne.n	8004060 <HAL_DMA_IRQHandler+0x1f4>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0304 	and.w	r3, r3, #4
 800400a:	2b00      	cmp	r3, #0
 800400c:	bf14      	ite	ne
 800400e:	2301      	movne	r3, #1
 8004010:	2300      	moveq	r3, #0
 8004012:	b2db      	uxtb	r3, r3
 8004014:	e02e      	b.n	8004074 <HAL_DMA_IRQHandler+0x208>
 8004016:	bf00      	nop
 8004018:	2400000c 	.word	0x2400000c
 800401c:	1b4e81b5 	.word	0x1b4e81b5
 8004020:	40020010 	.word	0x40020010
 8004024:	40020028 	.word	0x40020028
 8004028:	40020040 	.word	0x40020040
 800402c:	40020058 	.word	0x40020058
 8004030:	40020070 	.word	0x40020070
 8004034:	40020088 	.word	0x40020088
 8004038:	400200a0 	.word	0x400200a0
 800403c:	400200b8 	.word	0x400200b8
 8004040:	40020410 	.word	0x40020410
 8004044:	40020428 	.word	0x40020428
 8004048:	40020440 	.word	0x40020440
 800404c:	40020458 	.word	0x40020458
 8004050:	40020470 	.word	0x40020470
 8004054:	40020488 	.word	0x40020488
 8004058:	400204a0 	.word	0x400204a0
 800405c:	400204b8 	.word	0x400204b8
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b00      	cmp	r3, #0
 800406c:	bf14      	ite	ne
 800406e:	2301      	movne	r3, #1
 8004070:	2300      	moveq	r3, #0
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b00      	cmp	r3, #0
 8004076:	d015      	beq.n	80040a4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0204 	bic.w	r2, r2, #4
 8004086:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800408c:	f003 031f 	and.w	r3, r3, #31
 8004090:	2208      	movs	r2, #8
 8004092:	409a      	lsls	r2, r3
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409c:	f043 0201 	orr.w	r2, r3, #1
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a8:	f003 031f 	and.w	r3, r3, #31
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	fa22 f303 	lsr.w	r3, r2, r3
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d06e      	beq.n	8004198 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a69      	ldr	r2, [pc, #420]	; (8004264 <HAL_DMA_IRQHandler+0x3f8>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d04a      	beq.n	800415a <HAL_DMA_IRQHandler+0x2ee>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a67      	ldr	r2, [pc, #412]	; (8004268 <HAL_DMA_IRQHandler+0x3fc>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d045      	beq.n	800415a <HAL_DMA_IRQHandler+0x2ee>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a66      	ldr	r2, [pc, #408]	; (800426c <HAL_DMA_IRQHandler+0x400>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d040      	beq.n	800415a <HAL_DMA_IRQHandler+0x2ee>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a64      	ldr	r2, [pc, #400]	; (8004270 <HAL_DMA_IRQHandler+0x404>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d03b      	beq.n	800415a <HAL_DMA_IRQHandler+0x2ee>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a63      	ldr	r2, [pc, #396]	; (8004274 <HAL_DMA_IRQHandler+0x408>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d036      	beq.n	800415a <HAL_DMA_IRQHandler+0x2ee>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a61      	ldr	r2, [pc, #388]	; (8004278 <HAL_DMA_IRQHandler+0x40c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d031      	beq.n	800415a <HAL_DMA_IRQHandler+0x2ee>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a60      	ldr	r2, [pc, #384]	; (800427c <HAL_DMA_IRQHandler+0x410>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d02c      	beq.n	800415a <HAL_DMA_IRQHandler+0x2ee>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a5e      	ldr	r2, [pc, #376]	; (8004280 <HAL_DMA_IRQHandler+0x414>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d027      	beq.n	800415a <HAL_DMA_IRQHandler+0x2ee>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a5d      	ldr	r2, [pc, #372]	; (8004284 <HAL_DMA_IRQHandler+0x418>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d022      	beq.n	800415a <HAL_DMA_IRQHandler+0x2ee>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a5b      	ldr	r2, [pc, #364]	; (8004288 <HAL_DMA_IRQHandler+0x41c>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d01d      	beq.n	800415a <HAL_DMA_IRQHandler+0x2ee>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a5a      	ldr	r2, [pc, #360]	; (800428c <HAL_DMA_IRQHandler+0x420>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d018      	beq.n	800415a <HAL_DMA_IRQHandler+0x2ee>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a58      	ldr	r2, [pc, #352]	; (8004290 <HAL_DMA_IRQHandler+0x424>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d013      	beq.n	800415a <HAL_DMA_IRQHandler+0x2ee>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a57      	ldr	r2, [pc, #348]	; (8004294 <HAL_DMA_IRQHandler+0x428>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d00e      	beq.n	800415a <HAL_DMA_IRQHandler+0x2ee>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a55      	ldr	r2, [pc, #340]	; (8004298 <HAL_DMA_IRQHandler+0x42c>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d009      	beq.n	800415a <HAL_DMA_IRQHandler+0x2ee>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a54      	ldr	r2, [pc, #336]	; (800429c <HAL_DMA_IRQHandler+0x430>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d004      	beq.n	800415a <HAL_DMA_IRQHandler+0x2ee>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a52      	ldr	r2, [pc, #328]	; (80042a0 <HAL_DMA_IRQHandler+0x434>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d10a      	bne.n	8004170 <HAL_DMA_IRQHandler+0x304>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004164:	2b00      	cmp	r3, #0
 8004166:	bf14      	ite	ne
 8004168:	2301      	movne	r3, #1
 800416a:	2300      	moveq	r3, #0
 800416c:	b2db      	uxtb	r3, r3
 800416e:	e003      	b.n	8004178 <HAL_DMA_IRQHandler+0x30c>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2300      	movs	r3, #0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00d      	beq.n	8004198 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004180:	f003 031f 	and.w	r3, r3, #31
 8004184:	2201      	movs	r2, #1
 8004186:	409a      	lsls	r2, r3
 8004188:	6a3b      	ldr	r3, [r7, #32]
 800418a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004190:	f043 0202 	orr.w	r2, r3, #2
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800419c:	f003 031f 	and.w	r3, r3, #31
 80041a0:	2204      	movs	r2, #4
 80041a2:	409a      	lsls	r2, r3
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	4013      	ands	r3, r2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 808f 	beq.w	80042cc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a2c      	ldr	r2, [pc, #176]	; (8004264 <HAL_DMA_IRQHandler+0x3f8>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d04a      	beq.n	800424e <HAL_DMA_IRQHandler+0x3e2>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a2a      	ldr	r2, [pc, #168]	; (8004268 <HAL_DMA_IRQHandler+0x3fc>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d045      	beq.n	800424e <HAL_DMA_IRQHandler+0x3e2>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a29      	ldr	r2, [pc, #164]	; (800426c <HAL_DMA_IRQHandler+0x400>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d040      	beq.n	800424e <HAL_DMA_IRQHandler+0x3e2>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a27      	ldr	r2, [pc, #156]	; (8004270 <HAL_DMA_IRQHandler+0x404>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d03b      	beq.n	800424e <HAL_DMA_IRQHandler+0x3e2>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a26      	ldr	r2, [pc, #152]	; (8004274 <HAL_DMA_IRQHandler+0x408>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d036      	beq.n	800424e <HAL_DMA_IRQHandler+0x3e2>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a24      	ldr	r2, [pc, #144]	; (8004278 <HAL_DMA_IRQHandler+0x40c>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d031      	beq.n	800424e <HAL_DMA_IRQHandler+0x3e2>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a23      	ldr	r2, [pc, #140]	; (800427c <HAL_DMA_IRQHandler+0x410>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d02c      	beq.n	800424e <HAL_DMA_IRQHandler+0x3e2>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a21      	ldr	r2, [pc, #132]	; (8004280 <HAL_DMA_IRQHandler+0x414>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d027      	beq.n	800424e <HAL_DMA_IRQHandler+0x3e2>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a20      	ldr	r2, [pc, #128]	; (8004284 <HAL_DMA_IRQHandler+0x418>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d022      	beq.n	800424e <HAL_DMA_IRQHandler+0x3e2>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a1e      	ldr	r2, [pc, #120]	; (8004288 <HAL_DMA_IRQHandler+0x41c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d01d      	beq.n	800424e <HAL_DMA_IRQHandler+0x3e2>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a1d      	ldr	r2, [pc, #116]	; (800428c <HAL_DMA_IRQHandler+0x420>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d018      	beq.n	800424e <HAL_DMA_IRQHandler+0x3e2>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a1b      	ldr	r2, [pc, #108]	; (8004290 <HAL_DMA_IRQHandler+0x424>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d013      	beq.n	800424e <HAL_DMA_IRQHandler+0x3e2>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a1a      	ldr	r2, [pc, #104]	; (8004294 <HAL_DMA_IRQHandler+0x428>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d00e      	beq.n	800424e <HAL_DMA_IRQHandler+0x3e2>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a18      	ldr	r2, [pc, #96]	; (8004298 <HAL_DMA_IRQHandler+0x42c>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d009      	beq.n	800424e <HAL_DMA_IRQHandler+0x3e2>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a17      	ldr	r2, [pc, #92]	; (800429c <HAL_DMA_IRQHandler+0x430>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d004      	beq.n	800424e <HAL_DMA_IRQHandler+0x3e2>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a15      	ldr	r2, [pc, #84]	; (80042a0 <HAL_DMA_IRQHandler+0x434>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d12a      	bne.n	80042a4 <HAL_DMA_IRQHandler+0x438>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	bf14      	ite	ne
 800425c:	2301      	movne	r3, #1
 800425e:	2300      	moveq	r3, #0
 8004260:	b2db      	uxtb	r3, r3
 8004262:	e023      	b.n	80042ac <HAL_DMA_IRQHandler+0x440>
 8004264:	40020010 	.word	0x40020010
 8004268:	40020028 	.word	0x40020028
 800426c:	40020040 	.word	0x40020040
 8004270:	40020058 	.word	0x40020058
 8004274:	40020070 	.word	0x40020070
 8004278:	40020088 	.word	0x40020088
 800427c:	400200a0 	.word	0x400200a0
 8004280:	400200b8 	.word	0x400200b8
 8004284:	40020410 	.word	0x40020410
 8004288:	40020428 	.word	0x40020428
 800428c:	40020440 	.word	0x40020440
 8004290:	40020458 	.word	0x40020458
 8004294:	40020470 	.word	0x40020470
 8004298:	40020488 	.word	0x40020488
 800429c:	400204a0 	.word	0x400204a0
 80042a0:	400204b8 	.word	0x400204b8
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2300      	movs	r3, #0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00d      	beq.n	80042cc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b4:	f003 031f 	and.w	r3, r3, #31
 80042b8:	2204      	movs	r2, #4
 80042ba:	409a      	lsls	r2, r3
 80042bc:	6a3b      	ldr	r3, [r7, #32]
 80042be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c4:	f043 0204 	orr.w	r2, r3, #4
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d0:	f003 031f 	and.w	r3, r3, #31
 80042d4:	2210      	movs	r2, #16
 80042d6:	409a      	lsls	r2, r3
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	4013      	ands	r3, r2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 80a6 	beq.w	800442e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a85      	ldr	r2, [pc, #532]	; (80044fc <HAL_DMA_IRQHandler+0x690>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d04a      	beq.n	8004382 <HAL_DMA_IRQHandler+0x516>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a83      	ldr	r2, [pc, #524]	; (8004500 <HAL_DMA_IRQHandler+0x694>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d045      	beq.n	8004382 <HAL_DMA_IRQHandler+0x516>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a82      	ldr	r2, [pc, #520]	; (8004504 <HAL_DMA_IRQHandler+0x698>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d040      	beq.n	8004382 <HAL_DMA_IRQHandler+0x516>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a80      	ldr	r2, [pc, #512]	; (8004508 <HAL_DMA_IRQHandler+0x69c>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d03b      	beq.n	8004382 <HAL_DMA_IRQHandler+0x516>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a7f      	ldr	r2, [pc, #508]	; (800450c <HAL_DMA_IRQHandler+0x6a0>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d036      	beq.n	8004382 <HAL_DMA_IRQHandler+0x516>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a7d      	ldr	r2, [pc, #500]	; (8004510 <HAL_DMA_IRQHandler+0x6a4>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d031      	beq.n	8004382 <HAL_DMA_IRQHandler+0x516>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a7c      	ldr	r2, [pc, #496]	; (8004514 <HAL_DMA_IRQHandler+0x6a8>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d02c      	beq.n	8004382 <HAL_DMA_IRQHandler+0x516>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a7a      	ldr	r2, [pc, #488]	; (8004518 <HAL_DMA_IRQHandler+0x6ac>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d027      	beq.n	8004382 <HAL_DMA_IRQHandler+0x516>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a79      	ldr	r2, [pc, #484]	; (800451c <HAL_DMA_IRQHandler+0x6b0>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d022      	beq.n	8004382 <HAL_DMA_IRQHandler+0x516>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a77      	ldr	r2, [pc, #476]	; (8004520 <HAL_DMA_IRQHandler+0x6b4>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d01d      	beq.n	8004382 <HAL_DMA_IRQHandler+0x516>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a76      	ldr	r2, [pc, #472]	; (8004524 <HAL_DMA_IRQHandler+0x6b8>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d018      	beq.n	8004382 <HAL_DMA_IRQHandler+0x516>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a74      	ldr	r2, [pc, #464]	; (8004528 <HAL_DMA_IRQHandler+0x6bc>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d013      	beq.n	8004382 <HAL_DMA_IRQHandler+0x516>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a73      	ldr	r2, [pc, #460]	; (800452c <HAL_DMA_IRQHandler+0x6c0>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d00e      	beq.n	8004382 <HAL_DMA_IRQHandler+0x516>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a71      	ldr	r2, [pc, #452]	; (8004530 <HAL_DMA_IRQHandler+0x6c4>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d009      	beq.n	8004382 <HAL_DMA_IRQHandler+0x516>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a70      	ldr	r2, [pc, #448]	; (8004534 <HAL_DMA_IRQHandler+0x6c8>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d004      	beq.n	8004382 <HAL_DMA_IRQHandler+0x516>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a6e      	ldr	r2, [pc, #440]	; (8004538 <HAL_DMA_IRQHandler+0x6cc>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d10a      	bne.n	8004398 <HAL_DMA_IRQHandler+0x52c>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0308 	and.w	r3, r3, #8
 800438c:	2b00      	cmp	r3, #0
 800438e:	bf14      	ite	ne
 8004390:	2301      	movne	r3, #1
 8004392:	2300      	moveq	r3, #0
 8004394:	b2db      	uxtb	r3, r3
 8004396:	e009      	b.n	80043ac <HAL_DMA_IRQHandler+0x540>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0304 	and.w	r3, r3, #4
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	bf14      	ite	ne
 80043a6:	2301      	movne	r3, #1
 80043a8:	2300      	moveq	r3, #0
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d03e      	beq.n	800442e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b4:	f003 031f 	and.w	r3, r3, #31
 80043b8:	2210      	movs	r2, #16
 80043ba:	409a      	lsls	r2, r3
 80043bc:	6a3b      	ldr	r3, [r7, #32]
 80043be:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d018      	beq.n	8004400 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d108      	bne.n	80043ee <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d024      	beq.n	800442e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	4798      	blx	r3
 80043ec:	e01f      	b.n	800442e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d01b      	beq.n	800442e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	4798      	blx	r3
 80043fe:	e016      	b.n	800442e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440a:	2b00      	cmp	r3, #0
 800440c:	d107      	bne.n	800441e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 0208 	bic.w	r2, r2, #8
 800441c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004432:	f003 031f 	and.w	r3, r3, #31
 8004436:	2220      	movs	r2, #32
 8004438:	409a      	lsls	r2, r3
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	4013      	ands	r3, r2
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 8110 	beq.w	8004664 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a2c      	ldr	r2, [pc, #176]	; (80044fc <HAL_DMA_IRQHandler+0x690>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d04a      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x678>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a2b      	ldr	r2, [pc, #172]	; (8004500 <HAL_DMA_IRQHandler+0x694>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d045      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x678>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a29      	ldr	r2, [pc, #164]	; (8004504 <HAL_DMA_IRQHandler+0x698>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d040      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x678>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a28      	ldr	r2, [pc, #160]	; (8004508 <HAL_DMA_IRQHandler+0x69c>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d03b      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x678>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a26      	ldr	r2, [pc, #152]	; (800450c <HAL_DMA_IRQHandler+0x6a0>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d036      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x678>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a25      	ldr	r2, [pc, #148]	; (8004510 <HAL_DMA_IRQHandler+0x6a4>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d031      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x678>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a23      	ldr	r2, [pc, #140]	; (8004514 <HAL_DMA_IRQHandler+0x6a8>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d02c      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x678>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a22      	ldr	r2, [pc, #136]	; (8004518 <HAL_DMA_IRQHandler+0x6ac>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d027      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x678>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a20      	ldr	r2, [pc, #128]	; (800451c <HAL_DMA_IRQHandler+0x6b0>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d022      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x678>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a1f      	ldr	r2, [pc, #124]	; (8004520 <HAL_DMA_IRQHandler+0x6b4>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d01d      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x678>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a1d      	ldr	r2, [pc, #116]	; (8004524 <HAL_DMA_IRQHandler+0x6b8>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d018      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x678>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a1c      	ldr	r2, [pc, #112]	; (8004528 <HAL_DMA_IRQHandler+0x6bc>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d013      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x678>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a1a      	ldr	r2, [pc, #104]	; (800452c <HAL_DMA_IRQHandler+0x6c0>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d00e      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x678>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a19      	ldr	r2, [pc, #100]	; (8004530 <HAL_DMA_IRQHandler+0x6c4>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d009      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x678>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a17      	ldr	r2, [pc, #92]	; (8004534 <HAL_DMA_IRQHandler+0x6c8>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d004      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x678>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a16      	ldr	r2, [pc, #88]	; (8004538 <HAL_DMA_IRQHandler+0x6cc>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d12b      	bne.n	800453c <HAL_DMA_IRQHandler+0x6d0>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0310 	and.w	r3, r3, #16
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	bf14      	ite	ne
 80044f2:	2301      	movne	r3, #1
 80044f4:	2300      	moveq	r3, #0
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	e02a      	b.n	8004550 <HAL_DMA_IRQHandler+0x6e4>
 80044fa:	bf00      	nop
 80044fc:	40020010 	.word	0x40020010
 8004500:	40020028 	.word	0x40020028
 8004504:	40020040 	.word	0x40020040
 8004508:	40020058 	.word	0x40020058
 800450c:	40020070 	.word	0x40020070
 8004510:	40020088 	.word	0x40020088
 8004514:	400200a0 	.word	0x400200a0
 8004518:	400200b8 	.word	0x400200b8
 800451c:	40020410 	.word	0x40020410
 8004520:	40020428 	.word	0x40020428
 8004524:	40020440 	.word	0x40020440
 8004528:	40020458 	.word	0x40020458
 800452c:	40020470 	.word	0x40020470
 8004530:	40020488 	.word	0x40020488
 8004534:	400204a0 	.word	0x400204a0
 8004538:	400204b8 	.word	0x400204b8
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	bf14      	ite	ne
 800454a:	2301      	movne	r3, #1
 800454c:	2300      	moveq	r3, #0
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 8087 	beq.w	8004664 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800455a:	f003 031f 	and.w	r3, r3, #31
 800455e:	2220      	movs	r2, #32
 8004560:	409a      	lsls	r2, r3
 8004562:	6a3b      	ldr	r3, [r7, #32]
 8004564:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b04      	cmp	r3, #4
 8004570:	d139      	bne.n	80045e6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f022 0216 	bic.w	r2, r2, #22
 8004580:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	695a      	ldr	r2, [r3, #20]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004590:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	2b00      	cmp	r3, #0
 8004598:	d103      	bne.n	80045a2 <HAL_DMA_IRQHandler+0x736>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d007      	beq.n	80045b2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 0208 	bic.w	r2, r2, #8
 80045b0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b6:	f003 031f 	and.w	r3, r3, #31
 80045ba:	223f      	movs	r2, #63	; 0x3f
 80045bc:	409a      	lsls	r2, r3
 80045be:	6a3b      	ldr	r3, [r7, #32]
 80045c0:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f000 8382 	beq.w	8004ce0 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	4798      	blx	r3
          }
          return;
 80045e4:	e37c      	b.n	8004ce0 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d018      	beq.n	8004626 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d108      	bne.n	8004614 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004606:	2b00      	cmp	r3, #0
 8004608:	d02c      	beq.n	8004664 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	4798      	blx	r3
 8004612:	e027      	b.n	8004664 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004618:	2b00      	cmp	r3, #0
 800461a:	d023      	beq.n	8004664 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	4798      	blx	r3
 8004624:	e01e      	b.n	8004664 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10f      	bne.n	8004654 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 0210 	bic.w	r2, r2, #16
 8004642:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 833e 	beq.w	8004cea <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 8088 	beq.w	800478c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2204      	movs	r2, #4
 8004680:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a8e      	ldr	r2, [pc, #568]	; (80048c4 <HAL_DMA_IRQHandler+0xa58>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d04a      	beq.n	8004724 <HAL_DMA_IRQHandler+0x8b8>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a8d      	ldr	r2, [pc, #564]	; (80048c8 <HAL_DMA_IRQHandler+0xa5c>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d045      	beq.n	8004724 <HAL_DMA_IRQHandler+0x8b8>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a8b      	ldr	r2, [pc, #556]	; (80048cc <HAL_DMA_IRQHandler+0xa60>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d040      	beq.n	8004724 <HAL_DMA_IRQHandler+0x8b8>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a8a      	ldr	r2, [pc, #552]	; (80048d0 <HAL_DMA_IRQHandler+0xa64>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d03b      	beq.n	8004724 <HAL_DMA_IRQHandler+0x8b8>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a88      	ldr	r2, [pc, #544]	; (80048d4 <HAL_DMA_IRQHandler+0xa68>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d036      	beq.n	8004724 <HAL_DMA_IRQHandler+0x8b8>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a87      	ldr	r2, [pc, #540]	; (80048d8 <HAL_DMA_IRQHandler+0xa6c>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d031      	beq.n	8004724 <HAL_DMA_IRQHandler+0x8b8>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a85      	ldr	r2, [pc, #532]	; (80048dc <HAL_DMA_IRQHandler+0xa70>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d02c      	beq.n	8004724 <HAL_DMA_IRQHandler+0x8b8>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a84      	ldr	r2, [pc, #528]	; (80048e0 <HAL_DMA_IRQHandler+0xa74>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d027      	beq.n	8004724 <HAL_DMA_IRQHandler+0x8b8>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a82      	ldr	r2, [pc, #520]	; (80048e4 <HAL_DMA_IRQHandler+0xa78>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d022      	beq.n	8004724 <HAL_DMA_IRQHandler+0x8b8>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a81      	ldr	r2, [pc, #516]	; (80048e8 <HAL_DMA_IRQHandler+0xa7c>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d01d      	beq.n	8004724 <HAL_DMA_IRQHandler+0x8b8>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a7f      	ldr	r2, [pc, #508]	; (80048ec <HAL_DMA_IRQHandler+0xa80>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d018      	beq.n	8004724 <HAL_DMA_IRQHandler+0x8b8>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a7e      	ldr	r2, [pc, #504]	; (80048f0 <HAL_DMA_IRQHandler+0xa84>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d013      	beq.n	8004724 <HAL_DMA_IRQHandler+0x8b8>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a7c      	ldr	r2, [pc, #496]	; (80048f4 <HAL_DMA_IRQHandler+0xa88>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00e      	beq.n	8004724 <HAL_DMA_IRQHandler+0x8b8>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a7b      	ldr	r2, [pc, #492]	; (80048f8 <HAL_DMA_IRQHandler+0xa8c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d009      	beq.n	8004724 <HAL_DMA_IRQHandler+0x8b8>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a79      	ldr	r2, [pc, #484]	; (80048fc <HAL_DMA_IRQHandler+0xa90>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d004      	beq.n	8004724 <HAL_DMA_IRQHandler+0x8b8>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a78      	ldr	r2, [pc, #480]	; (8004900 <HAL_DMA_IRQHandler+0xa94>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d108      	bne.n	8004736 <HAL_DMA_IRQHandler+0x8ca>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0201 	bic.w	r2, r2, #1
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	e007      	b.n	8004746 <HAL_DMA_IRQHandler+0x8da>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 0201 	bic.w	r2, r2, #1
 8004744:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	3301      	adds	r3, #1
 800474a:	60fb      	str	r3, [r7, #12]
 800474c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800474e:	429a      	cmp	r2, r3
 8004750:	d307      	bcc.n	8004762 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1f2      	bne.n	8004746 <HAL_DMA_IRQHandler+0x8da>
 8004760:	e000      	b.n	8004764 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004762:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d004      	beq.n	8004784 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2203      	movs	r2, #3
 800477e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004782:	e003      	b.n	800478c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 82aa 	beq.w	8004cea <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	4798      	blx	r3
 800479e:	e2a4      	b.n	8004cea <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a57      	ldr	r2, [pc, #348]	; (8004904 <HAL_DMA_IRQHandler+0xa98>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d04a      	beq.n	8004840 <HAL_DMA_IRQHandler+0x9d4>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a56      	ldr	r2, [pc, #344]	; (8004908 <HAL_DMA_IRQHandler+0xa9c>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d045      	beq.n	8004840 <HAL_DMA_IRQHandler+0x9d4>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a54      	ldr	r2, [pc, #336]	; (800490c <HAL_DMA_IRQHandler+0xaa0>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d040      	beq.n	8004840 <HAL_DMA_IRQHandler+0x9d4>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a53      	ldr	r2, [pc, #332]	; (8004910 <HAL_DMA_IRQHandler+0xaa4>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d03b      	beq.n	8004840 <HAL_DMA_IRQHandler+0x9d4>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a51      	ldr	r2, [pc, #324]	; (8004914 <HAL_DMA_IRQHandler+0xaa8>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d036      	beq.n	8004840 <HAL_DMA_IRQHandler+0x9d4>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a50      	ldr	r2, [pc, #320]	; (8004918 <HAL_DMA_IRQHandler+0xaac>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d031      	beq.n	8004840 <HAL_DMA_IRQHandler+0x9d4>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a4e      	ldr	r2, [pc, #312]	; (800491c <HAL_DMA_IRQHandler+0xab0>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d02c      	beq.n	8004840 <HAL_DMA_IRQHandler+0x9d4>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a4d      	ldr	r2, [pc, #308]	; (8004920 <HAL_DMA_IRQHandler+0xab4>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d027      	beq.n	8004840 <HAL_DMA_IRQHandler+0x9d4>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a4b      	ldr	r2, [pc, #300]	; (8004924 <HAL_DMA_IRQHandler+0xab8>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d022      	beq.n	8004840 <HAL_DMA_IRQHandler+0x9d4>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a4a      	ldr	r2, [pc, #296]	; (8004928 <HAL_DMA_IRQHandler+0xabc>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d01d      	beq.n	8004840 <HAL_DMA_IRQHandler+0x9d4>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a48      	ldr	r2, [pc, #288]	; (800492c <HAL_DMA_IRQHandler+0xac0>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d018      	beq.n	8004840 <HAL_DMA_IRQHandler+0x9d4>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a47      	ldr	r2, [pc, #284]	; (8004930 <HAL_DMA_IRQHandler+0xac4>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d013      	beq.n	8004840 <HAL_DMA_IRQHandler+0x9d4>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a45      	ldr	r2, [pc, #276]	; (8004934 <HAL_DMA_IRQHandler+0xac8>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d00e      	beq.n	8004840 <HAL_DMA_IRQHandler+0x9d4>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a44      	ldr	r2, [pc, #272]	; (8004938 <HAL_DMA_IRQHandler+0xacc>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d009      	beq.n	8004840 <HAL_DMA_IRQHandler+0x9d4>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a42      	ldr	r2, [pc, #264]	; (800493c <HAL_DMA_IRQHandler+0xad0>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d004      	beq.n	8004840 <HAL_DMA_IRQHandler+0x9d4>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a41      	ldr	r2, [pc, #260]	; (8004940 <HAL_DMA_IRQHandler+0xad4>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d101      	bne.n	8004844 <HAL_DMA_IRQHandler+0x9d8>
 8004840:	2301      	movs	r3, #1
 8004842:	e000      	b.n	8004846 <HAL_DMA_IRQHandler+0x9da>
 8004844:	2300      	movs	r3, #0
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 824f 	beq.w	8004cea <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004858:	f003 031f 	and.w	r3, r3, #31
 800485c:	2204      	movs	r2, #4
 800485e:	409a      	lsls	r2, r3
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	4013      	ands	r3, r2
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 80dd 	beq.w	8004a24 <HAL_DMA_IRQHandler+0xbb8>
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 80d7 	beq.w	8004a24 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800487a:	f003 031f 	and.w	r3, r3, #31
 800487e:	2204      	movs	r2, #4
 8004880:	409a      	lsls	r2, r3
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d059      	beq.n	8004944 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d109      	bne.n	80048ae <HAL_DMA_IRQHandler+0xa42>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 8220 	beq.w	8004ce4 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048ac:	e21a      	b.n	8004ce4 <HAL_DMA_IRQHandler+0xe78>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f000 8216 	beq.w	8004ce4 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048c0:	e210      	b.n	8004ce4 <HAL_DMA_IRQHandler+0xe78>
 80048c2:	bf00      	nop
 80048c4:	40020010 	.word	0x40020010
 80048c8:	40020028 	.word	0x40020028
 80048cc:	40020040 	.word	0x40020040
 80048d0:	40020058 	.word	0x40020058
 80048d4:	40020070 	.word	0x40020070
 80048d8:	40020088 	.word	0x40020088
 80048dc:	400200a0 	.word	0x400200a0
 80048e0:	400200b8 	.word	0x400200b8
 80048e4:	40020410 	.word	0x40020410
 80048e8:	40020428 	.word	0x40020428
 80048ec:	40020440 	.word	0x40020440
 80048f0:	40020458 	.word	0x40020458
 80048f4:	40020470 	.word	0x40020470
 80048f8:	40020488 	.word	0x40020488
 80048fc:	400204a0 	.word	0x400204a0
 8004900:	400204b8 	.word	0x400204b8
 8004904:	48022c08 	.word	0x48022c08
 8004908:	48022c1c 	.word	0x48022c1c
 800490c:	48022c30 	.word	0x48022c30
 8004910:	48022c44 	.word	0x48022c44
 8004914:	48022c58 	.word	0x48022c58
 8004918:	48022c6c 	.word	0x48022c6c
 800491c:	48022c80 	.word	0x48022c80
 8004920:	48022c94 	.word	0x48022c94
 8004924:	58025408 	.word	0x58025408
 8004928:	5802541c 	.word	0x5802541c
 800492c:	58025430 	.word	0x58025430
 8004930:	58025444 	.word	0x58025444
 8004934:	58025458 	.word	0x58025458
 8004938:	5802546c 	.word	0x5802546c
 800493c:	58025480 	.word	0x58025480
 8004940:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	f003 0320 	and.w	r3, r3, #32
 800494a:	2b00      	cmp	r3, #0
 800494c:	d160      	bne.n	8004a10 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a8c      	ldr	r2, [pc, #560]	; (8004b84 <HAL_DMA_IRQHandler+0xd18>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d04a      	beq.n	80049ee <HAL_DMA_IRQHandler+0xb82>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a8a      	ldr	r2, [pc, #552]	; (8004b88 <HAL_DMA_IRQHandler+0xd1c>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d045      	beq.n	80049ee <HAL_DMA_IRQHandler+0xb82>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a89      	ldr	r2, [pc, #548]	; (8004b8c <HAL_DMA_IRQHandler+0xd20>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d040      	beq.n	80049ee <HAL_DMA_IRQHandler+0xb82>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a87      	ldr	r2, [pc, #540]	; (8004b90 <HAL_DMA_IRQHandler+0xd24>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d03b      	beq.n	80049ee <HAL_DMA_IRQHandler+0xb82>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a86      	ldr	r2, [pc, #536]	; (8004b94 <HAL_DMA_IRQHandler+0xd28>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d036      	beq.n	80049ee <HAL_DMA_IRQHandler+0xb82>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a84      	ldr	r2, [pc, #528]	; (8004b98 <HAL_DMA_IRQHandler+0xd2c>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d031      	beq.n	80049ee <HAL_DMA_IRQHandler+0xb82>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a83      	ldr	r2, [pc, #524]	; (8004b9c <HAL_DMA_IRQHandler+0xd30>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d02c      	beq.n	80049ee <HAL_DMA_IRQHandler+0xb82>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a81      	ldr	r2, [pc, #516]	; (8004ba0 <HAL_DMA_IRQHandler+0xd34>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d027      	beq.n	80049ee <HAL_DMA_IRQHandler+0xb82>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a80      	ldr	r2, [pc, #512]	; (8004ba4 <HAL_DMA_IRQHandler+0xd38>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d022      	beq.n	80049ee <HAL_DMA_IRQHandler+0xb82>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a7e      	ldr	r2, [pc, #504]	; (8004ba8 <HAL_DMA_IRQHandler+0xd3c>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d01d      	beq.n	80049ee <HAL_DMA_IRQHandler+0xb82>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a7d      	ldr	r2, [pc, #500]	; (8004bac <HAL_DMA_IRQHandler+0xd40>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d018      	beq.n	80049ee <HAL_DMA_IRQHandler+0xb82>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a7b      	ldr	r2, [pc, #492]	; (8004bb0 <HAL_DMA_IRQHandler+0xd44>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d013      	beq.n	80049ee <HAL_DMA_IRQHandler+0xb82>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a7a      	ldr	r2, [pc, #488]	; (8004bb4 <HAL_DMA_IRQHandler+0xd48>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d00e      	beq.n	80049ee <HAL_DMA_IRQHandler+0xb82>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a78      	ldr	r2, [pc, #480]	; (8004bb8 <HAL_DMA_IRQHandler+0xd4c>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d009      	beq.n	80049ee <HAL_DMA_IRQHandler+0xb82>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a77      	ldr	r2, [pc, #476]	; (8004bbc <HAL_DMA_IRQHandler+0xd50>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d004      	beq.n	80049ee <HAL_DMA_IRQHandler+0xb82>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a75      	ldr	r2, [pc, #468]	; (8004bc0 <HAL_DMA_IRQHandler+0xd54>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d108      	bne.n	8004a00 <HAL_DMA_IRQHandler+0xb94>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 0208 	bic.w	r2, r2, #8
 80049fc:	601a      	str	r2, [r3, #0]
 80049fe:	e007      	b.n	8004a10 <HAL_DMA_IRQHandler+0xba4>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f022 0204 	bic.w	r2, r2, #4
 8004a0e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f000 8165 	beq.w	8004ce4 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a22:	e15f      	b.n	8004ce4 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a28:	f003 031f 	and.w	r3, r3, #31
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	409a      	lsls	r2, r3
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	4013      	ands	r3, r2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 80c5 	beq.w	8004bc4 <HAL_DMA_IRQHandler+0xd58>
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 80bf 	beq.w	8004bc4 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a4a:	f003 031f 	and.w	r3, r3, #31
 8004a4e:	2202      	movs	r2, #2
 8004a50:	409a      	lsls	r2, r3
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d018      	beq.n	8004a92 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d109      	bne.n	8004a7e <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 813a 	beq.w	8004ce8 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a7c:	e134      	b.n	8004ce8 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f000 8130 	beq.w	8004ce8 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a90:	e12a      	b.n	8004ce8 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	f003 0320 	and.w	r3, r3, #32
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d168      	bne.n	8004b6e <HAL_DMA_IRQHandler+0xd02>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a38      	ldr	r2, [pc, #224]	; (8004b84 <HAL_DMA_IRQHandler+0xd18>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d04a      	beq.n	8004b3c <HAL_DMA_IRQHandler+0xcd0>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a37      	ldr	r2, [pc, #220]	; (8004b88 <HAL_DMA_IRQHandler+0xd1c>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d045      	beq.n	8004b3c <HAL_DMA_IRQHandler+0xcd0>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a35      	ldr	r2, [pc, #212]	; (8004b8c <HAL_DMA_IRQHandler+0xd20>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d040      	beq.n	8004b3c <HAL_DMA_IRQHandler+0xcd0>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a34      	ldr	r2, [pc, #208]	; (8004b90 <HAL_DMA_IRQHandler+0xd24>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d03b      	beq.n	8004b3c <HAL_DMA_IRQHandler+0xcd0>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a32      	ldr	r2, [pc, #200]	; (8004b94 <HAL_DMA_IRQHandler+0xd28>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d036      	beq.n	8004b3c <HAL_DMA_IRQHandler+0xcd0>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a31      	ldr	r2, [pc, #196]	; (8004b98 <HAL_DMA_IRQHandler+0xd2c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d031      	beq.n	8004b3c <HAL_DMA_IRQHandler+0xcd0>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a2f      	ldr	r2, [pc, #188]	; (8004b9c <HAL_DMA_IRQHandler+0xd30>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d02c      	beq.n	8004b3c <HAL_DMA_IRQHandler+0xcd0>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a2e      	ldr	r2, [pc, #184]	; (8004ba0 <HAL_DMA_IRQHandler+0xd34>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d027      	beq.n	8004b3c <HAL_DMA_IRQHandler+0xcd0>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a2c      	ldr	r2, [pc, #176]	; (8004ba4 <HAL_DMA_IRQHandler+0xd38>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d022      	beq.n	8004b3c <HAL_DMA_IRQHandler+0xcd0>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a2b      	ldr	r2, [pc, #172]	; (8004ba8 <HAL_DMA_IRQHandler+0xd3c>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d01d      	beq.n	8004b3c <HAL_DMA_IRQHandler+0xcd0>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a29      	ldr	r2, [pc, #164]	; (8004bac <HAL_DMA_IRQHandler+0xd40>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d018      	beq.n	8004b3c <HAL_DMA_IRQHandler+0xcd0>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a28      	ldr	r2, [pc, #160]	; (8004bb0 <HAL_DMA_IRQHandler+0xd44>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d013      	beq.n	8004b3c <HAL_DMA_IRQHandler+0xcd0>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a26      	ldr	r2, [pc, #152]	; (8004bb4 <HAL_DMA_IRQHandler+0xd48>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d00e      	beq.n	8004b3c <HAL_DMA_IRQHandler+0xcd0>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a25      	ldr	r2, [pc, #148]	; (8004bb8 <HAL_DMA_IRQHandler+0xd4c>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d009      	beq.n	8004b3c <HAL_DMA_IRQHandler+0xcd0>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a23      	ldr	r2, [pc, #140]	; (8004bbc <HAL_DMA_IRQHandler+0xd50>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d004      	beq.n	8004b3c <HAL_DMA_IRQHandler+0xcd0>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a22      	ldr	r2, [pc, #136]	; (8004bc0 <HAL_DMA_IRQHandler+0xd54>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d108      	bne.n	8004b4e <HAL_DMA_IRQHandler+0xce2>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 0214 	bic.w	r2, r2, #20
 8004b4a:	601a      	str	r2, [r3, #0]
 8004b4c:	e007      	b.n	8004b5e <HAL_DMA_IRQHandler+0xcf2>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 020a 	bic.w	r2, r2, #10
 8004b5c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f000 80b8 	beq.w	8004ce8 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b80:	e0b2      	b.n	8004ce8 <HAL_DMA_IRQHandler+0xe7c>
 8004b82:	bf00      	nop
 8004b84:	40020010 	.word	0x40020010
 8004b88:	40020028 	.word	0x40020028
 8004b8c:	40020040 	.word	0x40020040
 8004b90:	40020058 	.word	0x40020058
 8004b94:	40020070 	.word	0x40020070
 8004b98:	40020088 	.word	0x40020088
 8004b9c:	400200a0 	.word	0x400200a0
 8004ba0:	400200b8 	.word	0x400200b8
 8004ba4:	40020410 	.word	0x40020410
 8004ba8:	40020428 	.word	0x40020428
 8004bac:	40020440 	.word	0x40020440
 8004bb0:	40020458 	.word	0x40020458
 8004bb4:	40020470 	.word	0x40020470
 8004bb8:	40020488 	.word	0x40020488
 8004bbc:	400204a0 	.word	0x400204a0
 8004bc0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc8:	f003 031f 	and.w	r3, r3, #31
 8004bcc:	2208      	movs	r2, #8
 8004bce:	409a      	lsls	r2, r3
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 8088 	beq.w	8004cea <HAL_DMA_IRQHandler+0xe7e>
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	f003 0308 	and.w	r3, r3, #8
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f000 8082 	beq.w	8004cea <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a41      	ldr	r2, [pc, #260]	; (8004cf0 <HAL_DMA_IRQHandler+0xe84>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d04a      	beq.n	8004c86 <HAL_DMA_IRQHandler+0xe1a>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a3f      	ldr	r2, [pc, #252]	; (8004cf4 <HAL_DMA_IRQHandler+0xe88>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d045      	beq.n	8004c86 <HAL_DMA_IRQHandler+0xe1a>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a3e      	ldr	r2, [pc, #248]	; (8004cf8 <HAL_DMA_IRQHandler+0xe8c>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d040      	beq.n	8004c86 <HAL_DMA_IRQHandler+0xe1a>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a3c      	ldr	r2, [pc, #240]	; (8004cfc <HAL_DMA_IRQHandler+0xe90>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d03b      	beq.n	8004c86 <HAL_DMA_IRQHandler+0xe1a>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a3b      	ldr	r2, [pc, #236]	; (8004d00 <HAL_DMA_IRQHandler+0xe94>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d036      	beq.n	8004c86 <HAL_DMA_IRQHandler+0xe1a>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a39      	ldr	r2, [pc, #228]	; (8004d04 <HAL_DMA_IRQHandler+0xe98>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d031      	beq.n	8004c86 <HAL_DMA_IRQHandler+0xe1a>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a38      	ldr	r2, [pc, #224]	; (8004d08 <HAL_DMA_IRQHandler+0xe9c>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d02c      	beq.n	8004c86 <HAL_DMA_IRQHandler+0xe1a>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a36      	ldr	r2, [pc, #216]	; (8004d0c <HAL_DMA_IRQHandler+0xea0>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d027      	beq.n	8004c86 <HAL_DMA_IRQHandler+0xe1a>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a35      	ldr	r2, [pc, #212]	; (8004d10 <HAL_DMA_IRQHandler+0xea4>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d022      	beq.n	8004c86 <HAL_DMA_IRQHandler+0xe1a>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a33      	ldr	r2, [pc, #204]	; (8004d14 <HAL_DMA_IRQHandler+0xea8>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d01d      	beq.n	8004c86 <HAL_DMA_IRQHandler+0xe1a>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a32      	ldr	r2, [pc, #200]	; (8004d18 <HAL_DMA_IRQHandler+0xeac>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d018      	beq.n	8004c86 <HAL_DMA_IRQHandler+0xe1a>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a30      	ldr	r2, [pc, #192]	; (8004d1c <HAL_DMA_IRQHandler+0xeb0>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d013      	beq.n	8004c86 <HAL_DMA_IRQHandler+0xe1a>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a2f      	ldr	r2, [pc, #188]	; (8004d20 <HAL_DMA_IRQHandler+0xeb4>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d00e      	beq.n	8004c86 <HAL_DMA_IRQHandler+0xe1a>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a2d      	ldr	r2, [pc, #180]	; (8004d24 <HAL_DMA_IRQHandler+0xeb8>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d009      	beq.n	8004c86 <HAL_DMA_IRQHandler+0xe1a>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a2c      	ldr	r2, [pc, #176]	; (8004d28 <HAL_DMA_IRQHandler+0xebc>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d004      	beq.n	8004c86 <HAL_DMA_IRQHandler+0xe1a>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a2a      	ldr	r2, [pc, #168]	; (8004d2c <HAL_DMA_IRQHandler+0xec0>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d108      	bne.n	8004c98 <HAL_DMA_IRQHandler+0xe2c>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 021c 	bic.w	r2, r2, #28
 8004c94:	601a      	str	r2, [r3, #0]
 8004c96:	e007      	b.n	8004ca8 <HAL_DMA_IRQHandler+0xe3c>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 020e 	bic.w	r2, r2, #14
 8004ca6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cac:	f003 031f 	and.w	r3, r3, #31
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	409a      	lsls	r2, r3
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d009      	beq.n	8004cea <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	4798      	blx	r3
 8004cde:	e004      	b.n	8004cea <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004ce0:	bf00      	nop
 8004ce2:	e002      	b.n	8004cea <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ce4:	bf00      	nop
 8004ce6:	e000      	b.n	8004cea <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ce8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004cea:	3728      	adds	r7, #40	; 0x28
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	40020010 	.word	0x40020010
 8004cf4:	40020028 	.word	0x40020028
 8004cf8:	40020040 	.word	0x40020040
 8004cfc:	40020058 	.word	0x40020058
 8004d00:	40020070 	.word	0x40020070
 8004d04:	40020088 	.word	0x40020088
 8004d08:	400200a0 	.word	0x400200a0
 8004d0c:	400200b8 	.word	0x400200b8
 8004d10:	40020410 	.word	0x40020410
 8004d14:	40020428 	.word	0x40020428
 8004d18:	40020440 	.word	0x40020440
 8004d1c:	40020458 	.word	0x40020458
 8004d20:	40020470 	.word	0x40020470
 8004d24:	40020488 	.word	0x40020488
 8004d28:	400204a0 	.word	0x400204a0
 8004d2c:	400204b8 	.word	0x400204b8

08004d30 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b087      	sub	sp, #28
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
 8004d3c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d42:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d48:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a84      	ldr	r2, [pc, #528]	; (8004f60 <DMA_SetConfig+0x230>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d072      	beq.n	8004e3a <DMA_SetConfig+0x10a>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a82      	ldr	r2, [pc, #520]	; (8004f64 <DMA_SetConfig+0x234>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d06d      	beq.n	8004e3a <DMA_SetConfig+0x10a>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a81      	ldr	r2, [pc, #516]	; (8004f68 <DMA_SetConfig+0x238>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d068      	beq.n	8004e3a <DMA_SetConfig+0x10a>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a7f      	ldr	r2, [pc, #508]	; (8004f6c <DMA_SetConfig+0x23c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d063      	beq.n	8004e3a <DMA_SetConfig+0x10a>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a7e      	ldr	r2, [pc, #504]	; (8004f70 <DMA_SetConfig+0x240>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d05e      	beq.n	8004e3a <DMA_SetConfig+0x10a>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a7c      	ldr	r2, [pc, #496]	; (8004f74 <DMA_SetConfig+0x244>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d059      	beq.n	8004e3a <DMA_SetConfig+0x10a>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a7b      	ldr	r2, [pc, #492]	; (8004f78 <DMA_SetConfig+0x248>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d054      	beq.n	8004e3a <DMA_SetConfig+0x10a>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a79      	ldr	r2, [pc, #484]	; (8004f7c <DMA_SetConfig+0x24c>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d04f      	beq.n	8004e3a <DMA_SetConfig+0x10a>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a78      	ldr	r2, [pc, #480]	; (8004f80 <DMA_SetConfig+0x250>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d04a      	beq.n	8004e3a <DMA_SetConfig+0x10a>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a76      	ldr	r2, [pc, #472]	; (8004f84 <DMA_SetConfig+0x254>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d045      	beq.n	8004e3a <DMA_SetConfig+0x10a>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a75      	ldr	r2, [pc, #468]	; (8004f88 <DMA_SetConfig+0x258>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d040      	beq.n	8004e3a <DMA_SetConfig+0x10a>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a73      	ldr	r2, [pc, #460]	; (8004f8c <DMA_SetConfig+0x25c>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d03b      	beq.n	8004e3a <DMA_SetConfig+0x10a>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a72      	ldr	r2, [pc, #456]	; (8004f90 <DMA_SetConfig+0x260>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d036      	beq.n	8004e3a <DMA_SetConfig+0x10a>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a70      	ldr	r2, [pc, #448]	; (8004f94 <DMA_SetConfig+0x264>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d031      	beq.n	8004e3a <DMA_SetConfig+0x10a>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a6f      	ldr	r2, [pc, #444]	; (8004f98 <DMA_SetConfig+0x268>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d02c      	beq.n	8004e3a <DMA_SetConfig+0x10a>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a6d      	ldr	r2, [pc, #436]	; (8004f9c <DMA_SetConfig+0x26c>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d027      	beq.n	8004e3a <DMA_SetConfig+0x10a>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a6c      	ldr	r2, [pc, #432]	; (8004fa0 <DMA_SetConfig+0x270>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d022      	beq.n	8004e3a <DMA_SetConfig+0x10a>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a6a      	ldr	r2, [pc, #424]	; (8004fa4 <DMA_SetConfig+0x274>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d01d      	beq.n	8004e3a <DMA_SetConfig+0x10a>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a69      	ldr	r2, [pc, #420]	; (8004fa8 <DMA_SetConfig+0x278>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d018      	beq.n	8004e3a <DMA_SetConfig+0x10a>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a67      	ldr	r2, [pc, #412]	; (8004fac <DMA_SetConfig+0x27c>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d013      	beq.n	8004e3a <DMA_SetConfig+0x10a>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a66      	ldr	r2, [pc, #408]	; (8004fb0 <DMA_SetConfig+0x280>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d00e      	beq.n	8004e3a <DMA_SetConfig+0x10a>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a64      	ldr	r2, [pc, #400]	; (8004fb4 <DMA_SetConfig+0x284>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d009      	beq.n	8004e3a <DMA_SetConfig+0x10a>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a63      	ldr	r2, [pc, #396]	; (8004fb8 <DMA_SetConfig+0x288>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d004      	beq.n	8004e3a <DMA_SetConfig+0x10a>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a61      	ldr	r2, [pc, #388]	; (8004fbc <DMA_SetConfig+0x28c>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d101      	bne.n	8004e3e <DMA_SetConfig+0x10e>
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e000      	b.n	8004e40 <DMA_SetConfig+0x110>
 8004e3e:	2300      	movs	r3, #0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00d      	beq.n	8004e60 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004e4c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d004      	beq.n	8004e60 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004e5e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a3e      	ldr	r2, [pc, #248]	; (8004f60 <DMA_SetConfig+0x230>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d04a      	beq.n	8004f00 <DMA_SetConfig+0x1d0>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a3d      	ldr	r2, [pc, #244]	; (8004f64 <DMA_SetConfig+0x234>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d045      	beq.n	8004f00 <DMA_SetConfig+0x1d0>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a3b      	ldr	r2, [pc, #236]	; (8004f68 <DMA_SetConfig+0x238>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d040      	beq.n	8004f00 <DMA_SetConfig+0x1d0>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a3a      	ldr	r2, [pc, #232]	; (8004f6c <DMA_SetConfig+0x23c>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d03b      	beq.n	8004f00 <DMA_SetConfig+0x1d0>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a38      	ldr	r2, [pc, #224]	; (8004f70 <DMA_SetConfig+0x240>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d036      	beq.n	8004f00 <DMA_SetConfig+0x1d0>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a37      	ldr	r2, [pc, #220]	; (8004f74 <DMA_SetConfig+0x244>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d031      	beq.n	8004f00 <DMA_SetConfig+0x1d0>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a35      	ldr	r2, [pc, #212]	; (8004f78 <DMA_SetConfig+0x248>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d02c      	beq.n	8004f00 <DMA_SetConfig+0x1d0>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a34      	ldr	r2, [pc, #208]	; (8004f7c <DMA_SetConfig+0x24c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d027      	beq.n	8004f00 <DMA_SetConfig+0x1d0>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a32      	ldr	r2, [pc, #200]	; (8004f80 <DMA_SetConfig+0x250>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d022      	beq.n	8004f00 <DMA_SetConfig+0x1d0>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a31      	ldr	r2, [pc, #196]	; (8004f84 <DMA_SetConfig+0x254>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d01d      	beq.n	8004f00 <DMA_SetConfig+0x1d0>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a2f      	ldr	r2, [pc, #188]	; (8004f88 <DMA_SetConfig+0x258>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d018      	beq.n	8004f00 <DMA_SetConfig+0x1d0>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a2e      	ldr	r2, [pc, #184]	; (8004f8c <DMA_SetConfig+0x25c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d013      	beq.n	8004f00 <DMA_SetConfig+0x1d0>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a2c      	ldr	r2, [pc, #176]	; (8004f90 <DMA_SetConfig+0x260>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d00e      	beq.n	8004f00 <DMA_SetConfig+0x1d0>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a2b      	ldr	r2, [pc, #172]	; (8004f94 <DMA_SetConfig+0x264>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d009      	beq.n	8004f00 <DMA_SetConfig+0x1d0>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a29      	ldr	r2, [pc, #164]	; (8004f98 <DMA_SetConfig+0x268>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d004      	beq.n	8004f00 <DMA_SetConfig+0x1d0>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a28      	ldr	r2, [pc, #160]	; (8004f9c <DMA_SetConfig+0x26c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d101      	bne.n	8004f04 <DMA_SetConfig+0x1d4>
 8004f00:	2301      	movs	r3, #1
 8004f02:	e000      	b.n	8004f06 <DMA_SetConfig+0x1d6>
 8004f04:	2300      	movs	r3, #0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d05a      	beq.n	8004fc0 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f0e:	f003 031f 	and.w	r3, r3, #31
 8004f12:	223f      	movs	r2, #63	; 0x3f
 8004f14:	409a      	lsls	r2, r3
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f28:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	2b40      	cmp	r3, #64	; 0x40
 8004f38:	d108      	bne.n	8004f4c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004f4a:	e0af      	b.n	80050ac <DMA_SetConfig+0x37c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	60da      	str	r2, [r3, #12]
}
 8004f5c:	e0a6      	b.n	80050ac <DMA_SetConfig+0x37c>
 8004f5e:	bf00      	nop
 8004f60:	40020010 	.word	0x40020010
 8004f64:	40020028 	.word	0x40020028
 8004f68:	40020040 	.word	0x40020040
 8004f6c:	40020058 	.word	0x40020058
 8004f70:	40020070 	.word	0x40020070
 8004f74:	40020088 	.word	0x40020088
 8004f78:	400200a0 	.word	0x400200a0
 8004f7c:	400200b8 	.word	0x400200b8
 8004f80:	40020410 	.word	0x40020410
 8004f84:	40020428 	.word	0x40020428
 8004f88:	40020440 	.word	0x40020440
 8004f8c:	40020458 	.word	0x40020458
 8004f90:	40020470 	.word	0x40020470
 8004f94:	40020488 	.word	0x40020488
 8004f98:	400204a0 	.word	0x400204a0
 8004f9c:	400204b8 	.word	0x400204b8
 8004fa0:	58025408 	.word	0x58025408
 8004fa4:	5802541c 	.word	0x5802541c
 8004fa8:	58025430 	.word	0x58025430
 8004fac:	58025444 	.word	0x58025444
 8004fb0:	58025458 	.word	0x58025458
 8004fb4:	5802546c 	.word	0x5802546c
 8004fb8:	58025480 	.word	0x58025480
 8004fbc:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a3c      	ldr	r2, [pc, #240]	; (80050b8 <DMA_SetConfig+0x388>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d04a      	beq.n	8005060 <DMA_SetConfig+0x330>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a3b      	ldr	r2, [pc, #236]	; (80050bc <DMA_SetConfig+0x38c>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d045      	beq.n	8005060 <DMA_SetConfig+0x330>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a39      	ldr	r2, [pc, #228]	; (80050c0 <DMA_SetConfig+0x390>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d040      	beq.n	8005060 <DMA_SetConfig+0x330>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a38      	ldr	r2, [pc, #224]	; (80050c4 <DMA_SetConfig+0x394>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d03b      	beq.n	8005060 <DMA_SetConfig+0x330>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a36      	ldr	r2, [pc, #216]	; (80050c8 <DMA_SetConfig+0x398>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d036      	beq.n	8005060 <DMA_SetConfig+0x330>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a35      	ldr	r2, [pc, #212]	; (80050cc <DMA_SetConfig+0x39c>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d031      	beq.n	8005060 <DMA_SetConfig+0x330>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a33      	ldr	r2, [pc, #204]	; (80050d0 <DMA_SetConfig+0x3a0>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d02c      	beq.n	8005060 <DMA_SetConfig+0x330>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a32      	ldr	r2, [pc, #200]	; (80050d4 <DMA_SetConfig+0x3a4>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d027      	beq.n	8005060 <DMA_SetConfig+0x330>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a30      	ldr	r2, [pc, #192]	; (80050d8 <DMA_SetConfig+0x3a8>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d022      	beq.n	8005060 <DMA_SetConfig+0x330>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a2f      	ldr	r2, [pc, #188]	; (80050dc <DMA_SetConfig+0x3ac>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d01d      	beq.n	8005060 <DMA_SetConfig+0x330>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a2d      	ldr	r2, [pc, #180]	; (80050e0 <DMA_SetConfig+0x3b0>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d018      	beq.n	8005060 <DMA_SetConfig+0x330>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a2c      	ldr	r2, [pc, #176]	; (80050e4 <DMA_SetConfig+0x3b4>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d013      	beq.n	8005060 <DMA_SetConfig+0x330>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a2a      	ldr	r2, [pc, #168]	; (80050e8 <DMA_SetConfig+0x3b8>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d00e      	beq.n	8005060 <DMA_SetConfig+0x330>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a29      	ldr	r2, [pc, #164]	; (80050ec <DMA_SetConfig+0x3bc>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d009      	beq.n	8005060 <DMA_SetConfig+0x330>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a27      	ldr	r2, [pc, #156]	; (80050f0 <DMA_SetConfig+0x3c0>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d004      	beq.n	8005060 <DMA_SetConfig+0x330>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a26      	ldr	r2, [pc, #152]	; (80050f4 <DMA_SetConfig+0x3c4>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d101      	bne.n	8005064 <DMA_SetConfig+0x334>
 8005060:	2301      	movs	r3, #1
 8005062:	e000      	b.n	8005066 <DMA_SetConfig+0x336>
 8005064:	2300      	movs	r3, #0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d020      	beq.n	80050ac <DMA_SetConfig+0x37c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800506e:	f003 031f 	and.w	r3, r3, #31
 8005072:	2201      	movs	r2, #1
 8005074:	409a      	lsls	r2, r3
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	2b40      	cmp	r3, #64	; 0x40
 8005088:	d108      	bne.n	800509c <DMA_SetConfig+0x36c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	60da      	str	r2, [r3, #12]
}
 800509a:	e007      	b.n	80050ac <DMA_SetConfig+0x37c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	60da      	str	r2, [r3, #12]
}
 80050ac:	bf00      	nop
 80050ae:	371c      	adds	r7, #28
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr
 80050b8:	48022c08 	.word	0x48022c08
 80050bc:	48022c1c 	.word	0x48022c1c
 80050c0:	48022c30 	.word	0x48022c30
 80050c4:	48022c44 	.word	0x48022c44
 80050c8:	48022c58 	.word	0x48022c58
 80050cc:	48022c6c 	.word	0x48022c6c
 80050d0:	48022c80 	.word	0x48022c80
 80050d4:	48022c94 	.word	0x48022c94
 80050d8:	58025408 	.word	0x58025408
 80050dc:	5802541c 	.word	0x5802541c
 80050e0:	58025430 	.word	0x58025430
 80050e4:	58025444 	.word	0x58025444
 80050e8:	58025458 	.word	0x58025458
 80050ec:	5802546c 	.word	0x5802546c
 80050f0:	58025480 	.word	0x58025480
 80050f4:	58025494 	.word	0x58025494

080050f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a42      	ldr	r2, [pc, #264]	; (8005210 <DMA_CalcBaseAndBitshift+0x118>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d04a      	beq.n	80051a0 <DMA_CalcBaseAndBitshift+0xa8>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a41      	ldr	r2, [pc, #260]	; (8005214 <DMA_CalcBaseAndBitshift+0x11c>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d045      	beq.n	80051a0 <DMA_CalcBaseAndBitshift+0xa8>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a3f      	ldr	r2, [pc, #252]	; (8005218 <DMA_CalcBaseAndBitshift+0x120>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d040      	beq.n	80051a0 <DMA_CalcBaseAndBitshift+0xa8>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a3e      	ldr	r2, [pc, #248]	; (800521c <DMA_CalcBaseAndBitshift+0x124>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d03b      	beq.n	80051a0 <DMA_CalcBaseAndBitshift+0xa8>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a3c      	ldr	r2, [pc, #240]	; (8005220 <DMA_CalcBaseAndBitshift+0x128>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d036      	beq.n	80051a0 <DMA_CalcBaseAndBitshift+0xa8>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a3b      	ldr	r2, [pc, #236]	; (8005224 <DMA_CalcBaseAndBitshift+0x12c>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d031      	beq.n	80051a0 <DMA_CalcBaseAndBitshift+0xa8>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a39      	ldr	r2, [pc, #228]	; (8005228 <DMA_CalcBaseAndBitshift+0x130>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d02c      	beq.n	80051a0 <DMA_CalcBaseAndBitshift+0xa8>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a38      	ldr	r2, [pc, #224]	; (800522c <DMA_CalcBaseAndBitshift+0x134>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d027      	beq.n	80051a0 <DMA_CalcBaseAndBitshift+0xa8>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a36      	ldr	r2, [pc, #216]	; (8005230 <DMA_CalcBaseAndBitshift+0x138>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d022      	beq.n	80051a0 <DMA_CalcBaseAndBitshift+0xa8>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a35      	ldr	r2, [pc, #212]	; (8005234 <DMA_CalcBaseAndBitshift+0x13c>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d01d      	beq.n	80051a0 <DMA_CalcBaseAndBitshift+0xa8>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a33      	ldr	r2, [pc, #204]	; (8005238 <DMA_CalcBaseAndBitshift+0x140>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d018      	beq.n	80051a0 <DMA_CalcBaseAndBitshift+0xa8>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a32      	ldr	r2, [pc, #200]	; (800523c <DMA_CalcBaseAndBitshift+0x144>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d013      	beq.n	80051a0 <DMA_CalcBaseAndBitshift+0xa8>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a30      	ldr	r2, [pc, #192]	; (8005240 <DMA_CalcBaseAndBitshift+0x148>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d00e      	beq.n	80051a0 <DMA_CalcBaseAndBitshift+0xa8>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a2f      	ldr	r2, [pc, #188]	; (8005244 <DMA_CalcBaseAndBitshift+0x14c>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d009      	beq.n	80051a0 <DMA_CalcBaseAndBitshift+0xa8>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a2d      	ldr	r2, [pc, #180]	; (8005248 <DMA_CalcBaseAndBitshift+0x150>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d004      	beq.n	80051a0 <DMA_CalcBaseAndBitshift+0xa8>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a2c      	ldr	r2, [pc, #176]	; (800524c <DMA_CalcBaseAndBitshift+0x154>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d101      	bne.n	80051a4 <DMA_CalcBaseAndBitshift+0xac>
 80051a0:	2301      	movs	r3, #1
 80051a2:	e000      	b.n	80051a6 <DMA_CalcBaseAndBitshift+0xae>
 80051a4:	2300      	movs	r3, #0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d024      	beq.n	80051f4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	3b10      	subs	r3, #16
 80051b2:	4a27      	ldr	r2, [pc, #156]	; (8005250 <DMA_CalcBaseAndBitshift+0x158>)
 80051b4:	fba2 2303 	umull	r2, r3, r2, r3
 80051b8:	091b      	lsrs	r3, r3, #4
 80051ba:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f003 0307 	and.w	r3, r3, #7
 80051c2:	4a24      	ldr	r2, [pc, #144]	; (8005254 <DMA_CalcBaseAndBitshift+0x15c>)
 80051c4:	5cd3      	ldrb	r3, [r2, r3]
 80051c6:	461a      	mov	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2b03      	cmp	r3, #3
 80051d0:	d908      	bls.n	80051e4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	461a      	mov	r2, r3
 80051d8:	4b1f      	ldr	r3, [pc, #124]	; (8005258 <DMA_CalcBaseAndBitshift+0x160>)
 80051da:	4013      	ands	r3, r2
 80051dc:	1d1a      	adds	r2, r3, #4
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	659a      	str	r2, [r3, #88]	; 0x58
 80051e2:	e00d      	b.n	8005200 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	461a      	mov	r2, r3
 80051ea:	4b1b      	ldr	r3, [pc, #108]	; (8005258 <DMA_CalcBaseAndBitshift+0x160>)
 80051ec:	4013      	ands	r3, r2
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	6593      	str	r3, [r2, #88]	; 0x58
 80051f2:	e005      	b.n	8005200 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005204:	4618      	mov	r0, r3
 8005206:	3714      	adds	r7, #20
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr
 8005210:	40020010 	.word	0x40020010
 8005214:	40020028 	.word	0x40020028
 8005218:	40020040 	.word	0x40020040
 800521c:	40020058 	.word	0x40020058
 8005220:	40020070 	.word	0x40020070
 8005224:	40020088 	.word	0x40020088
 8005228:	400200a0 	.word	0x400200a0
 800522c:	400200b8 	.word	0x400200b8
 8005230:	40020410 	.word	0x40020410
 8005234:	40020428 	.word	0x40020428
 8005238:	40020440 	.word	0x40020440
 800523c:	40020458 	.word	0x40020458
 8005240:	40020470 	.word	0x40020470
 8005244:	40020488 	.word	0x40020488
 8005248:	400204a0 	.word	0x400204a0
 800524c:	400204b8 	.word	0x400204b8
 8005250:	aaaaaaab 	.word	0xaaaaaaab
 8005254:	0800b3f4 	.word	0x0800b3f4
 8005258:	fffffc00 	.word	0xfffffc00

0800525c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005264:	2300      	movs	r3, #0
 8005266:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d120      	bne.n	80052b2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005274:	2b03      	cmp	r3, #3
 8005276:	d858      	bhi.n	800532a <DMA_CheckFifoParam+0xce>
 8005278:	a201      	add	r2, pc, #4	; (adr r2, 8005280 <DMA_CheckFifoParam+0x24>)
 800527a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527e:	bf00      	nop
 8005280:	08005291 	.word	0x08005291
 8005284:	080052a3 	.word	0x080052a3
 8005288:	08005291 	.word	0x08005291
 800528c:	0800532b 	.word	0x0800532b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005294:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d048      	beq.n	800532e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80052a0:	e045      	b.n	800532e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80052aa:	d142      	bne.n	8005332 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80052b0:	e03f      	b.n	8005332 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052ba:	d123      	bne.n	8005304 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c0:	2b03      	cmp	r3, #3
 80052c2:	d838      	bhi.n	8005336 <DMA_CheckFifoParam+0xda>
 80052c4:	a201      	add	r2, pc, #4	; (adr r2, 80052cc <DMA_CheckFifoParam+0x70>)
 80052c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ca:	bf00      	nop
 80052cc:	080052dd 	.word	0x080052dd
 80052d0:	080052e3 	.word	0x080052e3
 80052d4:	080052dd 	.word	0x080052dd
 80052d8:	080052f5 	.word	0x080052f5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	73fb      	strb	r3, [r7, #15]
        break;
 80052e0:	e030      	b.n	8005344 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d025      	beq.n	800533a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80052f2:	e022      	b.n	800533a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80052fc:	d11f      	bne.n	800533e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005302:	e01c      	b.n	800533e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005308:	2b02      	cmp	r3, #2
 800530a:	d902      	bls.n	8005312 <DMA_CheckFifoParam+0xb6>
 800530c:	2b03      	cmp	r3, #3
 800530e:	d003      	beq.n	8005318 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005310:	e018      	b.n	8005344 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	73fb      	strb	r3, [r7, #15]
        break;
 8005316:	e015      	b.n	8005344 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00e      	beq.n	8005342 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	73fb      	strb	r3, [r7, #15]
    break;
 8005328:	e00b      	b.n	8005342 <DMA_CheckFifoParam+0xe6>
        break;
 800532a:	bf00      	nop
 800532c:	e00a      	b.n	8005344 <DMA_CheckFifoParam+0xe8>
        break;
 800532e:	bf00      	nop
 8005330:	e008      	b.n	8005344 <DMA_CheckFifoParam+0xe8>
        break;
 8005332:	bf00      	nop
 8005334:	e006      	b.n	8005344 <DMA_CheckFifoParam+0xe8>
        break;
 8005336:	bf00      	nop
 8005338:	e004      	b.n	8005344 <DMA_CheckFifoParam+0xe8>
        break;
 800533a:	bf00      	nop
 800533c:	e002      	b.n	8005344 <DMA_CheckFifoParam+0xe8>
        break;
 800533e:	bf00      	nop
 8005340:	e000      	b.n	8005344 <DMA_CheckFifoParam+0xe8>
    break;
 8005342:	bf00      	nop
    }
  }

  return status;
 8005344:	7bfb      	ldrb	r3, [r7, #15]
}
 8005346:	4618      	mov	r0, r3
 8005348:	3714      	adds	r7, #20
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop

08005354 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a38      	ldr	r2, [pc, #224]	; (8005448 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d022      	beq.n	80053b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a36      	ldr	r2, [pc, #216]	; (800544c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d01d      	beq.n	80053b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a35      	ldr	r2, [pc, #212]	; (8005450 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d018      	beq.n	80053b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a33      	ldr	r2, [pc, #204]	; (8005454 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d013      	beq.n	80053b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a32      	ldr	r2, [pc, #200]	; (8005458 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d00e      	beq.n	80053b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a30      	ldr	r2, [pc, #192]	; (800545c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d009      	beq.n	80053b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a2f      	ldr	r2, [pc, #188]	; (8005460 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d004      	beq.n	80053b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a2d      	ldr	r2, [pc, #180]	; (8005464 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d101      	bne.n	80053b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80053b2:	2301      	movs	r3, #1
 80053b4:	e000      	b.n	80053b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80053b6:	2300      	movs	r3, #0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d01a      	beq.n	80053f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	3b08      	subs	r3, #8
 80053c4:	4a28      	ldr	r2, [pc, #160]	; (8005468 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80053c6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ca:	091b      	lsrs	r3, r3, #4
 80053cc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	4b26      	ldr	r3, [pc, #152]	; (800546c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80053d2:	4413      	add	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	461a      	mov	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a24      	ldr	r2, [pc, #144]	; (8005470 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80053e0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f003 031f 	and.w	r3, r3, #31
 80053e8:	2201      	movs	r2, #1
 80053ea:	409a      	lsls	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80053f0:	e024      	b.n	800543c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	3b10      	subs	r3, #16
 80053fa:	4a1e      	ldr	r2, [pc, #120]	; (8005474 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80053fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005400:	091b      	lsrs	r3, r3, #4
 8005402:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	4a1c      	ldr	r2, [pc, #112]	; (8005478 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d806      	bhi.n	800541a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	4a1b      	ldr	r2, [pc, #108]	; (800547c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d902      	bls.n	800541a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	3308      	adds	r3, #8
 8005418:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	4b18      	ldr	r3, [pc, #96]	; (8005480 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800541e:	4413      	add	r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	461a      	mov	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a16      	ldr	r2, [pc, #88]	; (8005484 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800542c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f003 031f 	and.w	r3, r3, #31
 8005434:	2201      	movs	r2, #1
 8005436:	409a      	lsls	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800543c:	bf00      	nop
 800543e:	3714      	adds	r7, #20
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr
 8005448:	58025408 	.word	0x58025408
 800544c:	5802541c 	.word	0x5802541c
 8005450:	58025430 	.word	0x58025430
 8005454:	58025444 	.word	0x58025444
 8005458:	58025458 	.word	0x58025458
 800545c:	5802546c 	.word	0x5802546c
 8005460:	58025480 	.word	0x58025480
 8005464:	58025494 	.word	0x58025494
 8005468:	cccccccd 	.word	0xcccccccd
 800546c:	16009600 	.word	0x16009600
 8005470:	58025880 	.word	0x58025880
 8005474:	aaaaaaab 	.word	0xaaaaaaab
 8005478:	400204b8 	.word	0x400204b8
 800547c:	4002040f 	.word	0x4002040f
 8005480:	10008200 	.word	0x10008200
 8005484:	40020880 	.word	0x40020880

08005488 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	b2db      	uxtb	r3, r3
 8005496:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d04a      	beq.n	8005534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d847      	bhi.n	8005534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a25      	ldr	r2, [pc, #148]	; (8005540 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d022      	beq.n	80054f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a24      	ldr	r2, [pc, #144]	; (8005544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d01d      	beq.n	80054f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a22      	ldr	r2, [pc, #136]	; (8005548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d018      	beq.n	80054f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a21      	ldr	r2, [pc, #132]	; (800554c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d013      	beq.n	80054f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a1f      	ldr	r2, [pc, #124]	; (8005550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d00e      	beq.n	80054f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a1e      	ldr	r2, [pc, #120]	; (8005554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d009      	beq.n	80054f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a1c      	ldr	r2, [pc, #112]	; (8005558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d004      	beq.n	80054f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a1b      	ldr	r2, [pc, #108]	; (800555c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d101      	bne.n	80054f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80054f4:	2301      	movs	r3, #1
 80054f6:	e000      	b.n	80054fa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80054f8:	2300      	movs	r3, #0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00a      	beq.n	8005514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	4b17      	ldr	r3, [pc, #92]	; (8005560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005502:	4413      	add	r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	461a      	mov	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a15      	ldr	r2, [pc, #84]	; (8005564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005510:	671a      	str	r2, [r3, #112]	; 0x70
 8005512:	e009      	b.n	8005528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	4b14      	ldr	r3, [pc, #80]	; (8005568 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005518:	4413      	add	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	461a      	mov	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a11      	ldr	r2, [pc, #68]	; (800556c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005526:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	3b01      	subs	r3, #1
 800552c:	2201      	movs	r2, #1
 800552e:	409a      	lsls	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005534:	bf00      	nop
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	58025408 	.word	0x58025408
 8005544:	5802541c 	.word	0x5802541c
 8005548:	58025430 	.word	0x58025430
 800554c:	58025444 	.word	0x58025444
 8005550:	58025458 	.word	0x58025458
 8005554:	5802546c 	.word	0x5802546c
 8005558:	58025480 	.word	0x58025480
 800555c:	58025494 	.word	0x58025494
 8005560:	1600963f 	.word	0x1600963f
 8005564:	58025940 	.word	0x58025940
 8005568:	1000823f 	.word	0x1000823f
 800556c:	40020940 	.word	0x40020940

08005570 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005570:	b480      	push	{r7}
 8005572:	b089      	sub	sp, #36	; 0x24
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800557a:	2300      	movs	r3, #0
 800557c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800557e:	4b89      	ldr	r3, [pc, #548]	; (80057a4 <HAL_GPIO_Init+0x234>)
 8005580:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005582:	e194      	b.n	80058ae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	2101      	movs	r1, #1
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	fa01 f303 	lsl.w	r3, r1, r3
 8005590:	4013      	ands	r3, r2
 8005592:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	2b00      	cmp	r3, #0
 8005598:	f000 8186 	beq.w	80058a8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d00b      	beq.n	80055bc <HAL_GPIO_Init+0x4c>
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d007      	beq.n	80055bc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80055b0:	2b11      	cmp	r3, #17
 80055b2:	d003      	beq.n	80055bc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	2b12      	cmp	r3, #18
 80055ba:	d130      	bne.n	800561e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	005b      	lsls	r3, r3, #1
 80055c6:	2203      	movs	r2, #3
 80055c8:	fa02 f303 	lsl.w	r3, r2, r3
 80055cc:	43db      	mvns	r3, r3
 80055ce:	69ba      	ldr	r2, [r7, #24]
 80055d0:	4013      	ands	r3, r2
 80055d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	68da      	ldr	r2, [r3, #12]
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	005b      	lsls	r3, r3, #1
 80055dc:	fa02 f303 	lsl.w	r3, r2, r3
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80055f2:	2201      	movs	r2, #1
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	fa02 f303 	lsl.w	r3, r2, r3
 80055fa:	43db      	mvns	r3, r3
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	4013      	ands	r3, r2
 8005600:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	091b      	lsrs	r3, r3, #4
 8005608:	f003 0201 	and.w	r2, r3, #1
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	fa02 f303 	lsl.w	r3, r2, r3
 8005612:	69ba      	ldr	r2, [r7, #24]
 8005614:	4313      	orrs	r3, r2
 8005616:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	005b      	lsls	r3, r3, #1
 8005628:	2203      	movs	r2, #3
 800562a:	fa02 f303 	lsl.w	r3, r2, r3
 800562e:	43db      	mvns	r3, r3
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	4013      	ands	r3, r2
 8005634:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	689a      	ldr	r2, [r3, #8]
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	fa02 f303 	lsl.w	r3, r2, r3
 8005642:	69ba      	ldr	r2, [r7, #24]
 8005644:	4313      	orrs	r3, r2
 8005646:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	69ba      	ldr	r2, [r7, #24]
 800564c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	2b02      	cmp	r3, #2
 8005654:	d003      	beq.n	800565e <HAL_GPIO_Init+0xee>
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	2b12      	cmp	r3, #18
 800565c:	d123      	bne.n	80056a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	08da      	lsrs	r2, r3, #3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	3208      	adds	r2, #8
 8005666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800566a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	f003 0307 	and.w	r3, r3, #7
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	220f      	movs	r2, #15
 8005676:	fa02 f303 	lsl.w	r3, r2, r3
 800567a:	43db      	mvns	r3, r3
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	4013      	ands	r3, r2
 8005680:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	691a      	ldr	r2, [r3, #16]
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	f003 0307 	and.w	r3, r3, #7
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	fa02 f303 	lsl.w	r3, r2, r3
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	4313      	orrs	r3, r2
 8005696:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	08da      	lsrs	r2, r3, #3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	3208      	adds	r2, #8
 80056a0:	69b9      	ldr	r1, [r7, #24]
 80056a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	005b      	lsls	r3, r3, #1
 80056b0:	2203      	movs	r2, #3
 80056b2:	fa02 f303 	lsl.w	r3, r2, r3
 80056b6:	43db      	mvns	r3, r3
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	4013      	ands	r3, r2
 80056bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f003 0203 	and.w	r2, r3, #3
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	005b      	lsls	r3, r3, #1
 80056ca:	fa02 f303 	lsl.w	r3, r2, r3
 80056ce:	69ba      	ldr	r2, [r7, #24]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	69ba      	ldr	r2, [r7, #24]
 80056d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f000 80e0 	beq.w	80058a8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056e8:	4b2f      	ldr	r3, [pc, #188]	; (80057a8 <HAL_GPIO_Init+0x238>)
 80056ea:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80056ee:	4a2e      	ldr	r2, [pc, #184]	; (80057a8 <HAL_GPIO_Init+0x238>)
 80056f0:	f043 0302 	orr.w	r3, r3, #2
 80056f4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80056f8:	4b2b      	ldr	r3, [pc, #172]	; (80057a8 <HAL_GPIO_Init+0x238>)
 80056fa:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80056fe:	f003 0302 	and.w	r3, r3, #2
 8005702:	60fb      	str	r3, [r7, #12]
 8005704:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005706:	4a29      	ldr	r2, [pc, #164]	; (80057ac <HAL_GPIO_Init+0x23c>)
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	089b      	lsrs	r3, r3, #2
 800570c:	3302      	adds	r3, #2
 800570e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005712:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	f003 0303 	and.w	r3, r3, #3
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	220f      	movs	r2, #15
 800571e:	fa02 f303 	lsl.w	r3, r2, r3
 8005722:	43db      	mvns	r3, r3
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	4013      	ands	r3, r2
 8005728:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a20      	ldr	r2, [pc, #128]	; (80057b0 <HAL_GPIO_Init+0x240>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d052      	beq.n	80057d8 <HAL_GPIO_Init+0x268>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a1f      	ldr	r2, [pc, #124]	; (80057b4 <HAL_GPIO_Init+0x244>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d031      	beq.n	800579e <HAL_GPIO_Init+0x22e>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a1e      	ldr	r2, [pc, #120]	; (80057b8 <HAL_GPIO_Init+0x248>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d02b      	beq.n	800579a <HAL_GPIO_Init+0x22a>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a1d      	ldr	r2, [pc, #116]	; (80057bc <HAL_GPIO_Init+0x24c>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d025      	beq.n	8005796 <HAL_GPIO_Init+0x226>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a1c      	ldr	r2, [pc, #112]	; (80057c0 <HAL_GPIO_Init+0x250>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d01f      	beq.n	8005792 <HAL_GPIO_Init+0x222>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a1b      	ldr	r2, [pc, #108]	; (80057c4 <HAL_GPIO_Init+0x254>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d019      	beq.n	800578e <HAL_GPIO_Init+0x21e>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a1a      	ldr	r2, [pc, #104]	; (80057c8 <HAL_GPIO_Init+0x258>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d013      	beq.n	800578a <HAL_GPIO_Init+0x21a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a19      	ldr	r2, [pc, #100]	; (80057cc <HAL_GPIO_Init+0x25c>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d00d      	beq.n	8005786 <HAL_GPIO_Init+0x216>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a18      	ldr	r2, [pc, #96]	; (80057d0 <HAL_GPIO_Init+0x260>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d007      	beq.n	8005782 <HAL_GPIO_Init+0x212>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a17      	ldr	r2, [pc, #92]	; (80057d4 <HAL_GPIO_Init+0x264>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d101      	bne.n	800577e <HAL_GPIO_Init+0x20e>
 800577a:	2309      	movs	r3, #9
 800577c:	e02d      	b.n	80057da <HAL_GPIO_Init+0x26a>
 800577e:	230a      	movs	r3, #10
 8005780:	e02b      	b.n	80057da <HAL_GPIO_Init+0x26a>
 8005782:	2308      	movs	r3, #8
 8005784:	e029      	b.n	80057da <HAL_GPIO_Init+0x26a>
 8005786:	2307      	movs	r3, #7
 8005788:	e027      	b.n	80057da <HAL_GPIO_Init+0x26a>
 800578a:	2306      	movs	r3, #6
 800578c:	e025      	b.n	80057da <HAL_GPIO_Init+0x26a>
 800578e:	2305      	movs	r3, #5
 8005790:	e023      	b.n	80057da <HAL_GPIO_Init+0x26a>
 8005792:	2304      	movs	r3, #4
 8005794:	e021      	b.n	80057da <HAL_GPIO_Init+0x26a>
 8005796:	2303      	movs	r3, #3
 8005798:	e01f      	b.n	80057da <HAL_GPIO_Init+0x26a>
 800579a:	2302      	movs	r3, #2
 800579c:	e01d      	b.n	80057da <HAL_GPIO_Init+0x26a>
 800579e:	2301      	movs	r3, #1
 80057a0:	e01b      	b.n	80057da <HAL_GPIO_Init+0x26a>
 80057a2:	bf00      	nop
 80057a4:	58000080 	.word	0x58000080
 80057a8:	58024400 	.word	0x58024400
 80057ac:	58000400 	.word	0x58000400
 80057b0:	58020000 	.word	0x58020000
 80057b4:	58020400 	.word	0x58020400
 80057b8:	58020800 	.word	0x58020800
 80057bc:	58020c00 	.word	0x58020c00
 80057c0:	58021000 	.word	0x58021000
 80057c4:	58021400 	.word	0x58021400
 80057c8:	58021800 	.word	0x58021800
 80057cc:	58021c00 	.word	0x58021c00
 80057d0:	58022000 	.word	0x58022000
 80057d4:	58022400 	.word	0x58022400
 80057d8:	2300      	movs	r3, #0
 80057da:	69fa      	ldr	r2, [r7, #28]
 80057dc:	f002 0203 	and.w	r2, r2, #3
 80057e0:	0092      	lsls	r2, r2, #2
 80057e2:	4093      	lsls	r3, r2
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057ea:	4938      	ldr	r1, [pc, #224]	; (80058cc <HAL_GPIO_Init+0x35c>)
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	089b      	lsrs	r3, r3, #2
 80057f0:	3302      	adds	r3, #2
 80057f2:	69ba      	ldr	r2, [r7, #24]
 80057f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	43db      	mvns	r3, r3
 8005802:	69ba      	ldr	r2, [r7, #24]
 8005804:	4013      	ands	r3, r2
 8005806:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d003      	beq.n	800581c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	4313      	orrs	r3, r2
 800581a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	43db      	mvns	r3, r3
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	4013      	ands	r3, r2
 8005830:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	4313      	orrs	r3, r2
 8005844:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800584c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	43db      	mvns	r3, r3
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	4013      	ands	r3, r2
 800585c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d003      	beq.n	8005872 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800586a:	69ba      	ldr	r2, [r7, #24]
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	4313      	orrs	r3, r2
 8005870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005872:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800587a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	43db      	mvns	r3, r3
 8005886:	69ba      	ldr	r2, [r7, #24]
 8005888:	4013      	ands	r3, r2
 800588a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d003      	beq.n	80058a0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	4313      	orrs	r3, r2
 800589e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80058a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	3301      	adds	r3, #1
 80058ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	fa22 f303 	lsr.w	r3, r2, r3
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f47f ae63 	bne.w	8005584 <HAL_GPIO_Init+0x14>
  }
}
 80058be:	bf00      	nop
 80058c0:	3724      	adds	r7, #36	; 0x24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	58000400 	.word	0x58000400

080058d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	460b      	mov	r3, r1
 80058da:	807b      	strh	r3, [r7, #2]
 80058dc:	4613      	mov	r3, r2
 80058de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80058e0:	787b      	ldrb	r3, [r7, #1]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d003      	beq.n	80058ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058e6:	887a      	ldrh	r2, [r7, #2]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80058ec:	e003      	b.n	80058f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80058ee:	887b      	ldrh	r3, [r7, #2]
 80058f0:	041a      	lsls	r2, r3, #16
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	619a      	str	r2, [r3, #24]
}
 80058f6:	bf00      	nop
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005902:	b480      	push	{r7}
 8005904:	b083      	sub	sp, #12
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
 800590a:	460b      	mov	r3, r1
 800590c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	695a      	ldr	r2, [r3, #20]
 8005912:	887b      	ldrh	r3, [r7, #2]
 8005914:	401a      	ands	r2, r3
 8005916:	887b      	ldrh	r3, [r7, #2]
 8005918:	429a      	cmp	r2, r3
 800591a:	d104      	bne.n	8005926 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800591c:	887b      	ldrh	r3, [r7, #2]
 800591e:	041a      	lsls	r2, r3, #16
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005924:	e002      	b.n	800592c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005926:	887a      	ldrh	r2, [r7, #2]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	619a      	str	r2, [r3, #24]
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005940:	4b29      	ldr	r3, [pc, #164]	; (80059e8 <HAL_PWREx_ConfigSupply+0xb0>)
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f003 0307 	and.w	r3, r3, #7
 8005948:	2b06      	cmp	r3, #6
 800594a:	d00a      	beq.n	8005962 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800594c:	4b26      	ldr	r3, [pc, #152]	; (80059e8 <HAL_PWREx_ConfigSupply+0xb0>)
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	429a      	cmp	r2, r3
 8005958:	d001      	beq.n	800595e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e040      	b.n	80059e0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800595e:	2300      	movs	r3, #0
 8005960:	e03e      	b.n	80059e0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005962:	4b21      	ldr	r3, [pc, #132]	; (80059e8 <HAL_PWREx_ConfigSupply+0xb0>)
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800596a:	491f      	ldr	r1, [pc, #124]	; (80059e8 <HAL_PWREx_ConfigSupply+0xb0>)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4313      	orrs	r3, r2
 8005970:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005972:	f7fc f937 	bl	8001be4 <HAL_GetTick>
 8005976:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005978:	e009      	b.n	800598e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800597a:	f7fc f933 	bl	8001be4 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005988:	d901      	bls.n	800598e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e028      	b.n	80059e0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800598e:	4b16      	ldr	r3, [pc, #88]	; (80059e8 <HAL_PWREx_ConfigSupply+0xb0>)
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005996:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800599a:	d1ee      	bne.n	800597a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b1e      	cmp	r3, #30
 80059a0:	d008      	beq.n	80059b4 <HAL_PWREx_ConfigSupply+0x7c>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b2e      	cmp	r3, #46	; 0x2e
 80059a6:	d005      	beq.n	80059b4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b1d      	cmp	r3, #29
 80059ac:	d002      	beq.n	80059b4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b2d      	cmp	r3, #45	; 0x2d
 80059b2:	d114      	bne.n	80059de <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80059b4:	f7fc f916 	bl	8001be4 <HAL_GetTick>
 80059b8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80059ba:	e009      	b.n	80059d0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80059bc:	f7fc f912 	bl	8001be4 <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059ca:	d901      	bls.n	80059d0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e007      	b.n	80059e0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80059d0:	4b05      	ldr	r3, [pc, #20]	; (80059e8 <HAL_PWREx_ConfigSupply+0xb0>)
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059dc:	d1ee      	bne.n	80059bc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	58024800 	.word	0x58024800

080059ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b08c      	sub	sp, #48	; 0x30
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e3d7      	b.n	80061ae <HAL_RCC_OscConfig+0x7c2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f000 80b3 	beq.w	8005b72 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a0c:	4b90      	ldr	r3, [pc, #576]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a14:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a16:	4b8e      	ldr	r3, [pc, #568]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1e:	2b10      	cmp	r3, #16
 8005a20:	d007      	beq.n	8005a32 <HAL_RCC_OscConfig+0x46>
 8005a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a24:	2b18      	cmp	r3, #24
 8005a26:	d112      	bne.n	8005a4e <HAL_RCC_OscConfig+0x62>
 8005a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2a:	f003 0303 	and.w	r3, r3, #3
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d10d      	bne.n	8005a4e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a32:	4b87      	ldr	r3, [pc, #540]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f000 8098 	beq.w	8005b70 <HAL_RCC_OscConfig+0x184>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f040 8093 	bne.w	8005b70 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e3af      	b.n	80061ae <HAL_RCC_OscConfig+0x7c2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a56:	d106      	bne.n	8005a66 <HAL_RCC_OscConfig+0x7a>
 8005a58:	4b7d      	ldr	r3, [pc, #500]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a7c      	ldr	r2, [pc, #496]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005a5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a62:	6013      	str	r3, [r2, #0]
 8005a64:	e058      	b.n	8005b18 <HAL_RCC_OscConfig+0x12c>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d112      	bne.n	8005a94 <HAL_RCC_OscConfig+0xa8>
 8005a6e:	4b78      	ldr	r3, [pc, #480]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a77      	ldr	r2, [pc, #476]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005a74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a78:	6013      	str	r3, [r2, #0]
 8005a7a:	4b75      	ldr	r3, [pc, #468]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a74      	ldr	r2, [pc, #464]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005a80:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005a84:	6013      	str	r3, [r2, #0]
 8005a86:	4b72      	ldr	r3, [pc, #456]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a71      	ldr	r2, [pc, #452]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005a8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a90:	6013      	str	r3, [r2, #0]
 8005a92:	e041      	b.n	8005b18 <HAL_RCC_OscConfig+0x12c>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a9c:	d112      	bne.n	8005ac4 <HAL_RCC_OscConfig+0xd8>
 8005a9e:	4b6c      	ldr	r3, [pc, #432]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a6b      	ldr	r2, [pc, #428]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005aa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005aa8:	6013      	str	r3, [r2, #0]
 8005aaa:	4b69      	ldr	r3, [pc, #420]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a68      	ldr	r2, [pc, #416]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005ab0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005ab4:	6013      	str	r3, [r2, #0]
 8005ab6:	4b66      	ldr	r3, [pc, #408]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a65      	ldr	r2, [pc, #404]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ac0:	6013      	str	r3, [r2, #0]
 8005ac2:	e029      	b.n	8005b18 <HAL_RCC_OscConfig+0x12c>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8005acc:	d112      	bne.n	8005af4 <HAL_RCC_OscConfig+0x108>
 8005ace:	4b60      	ldr	r3, [pc, #384]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a5f      	ldr	r2, [pc, #380]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ad8:	6013      	str	r3, [r2, #0]
 8005ada:	4b5d      	ldr	r3, [pc, #372]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a5c      	ldr	r2, [pc, #368]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005ae0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ae4:	6013      	str	r3, [r2, #0]
 8005ae6:	4b5a      	ldr	r3, [pc, #360]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a59      	ldr	r2, [pc, #356]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005af0:	6013      	str	r3, [r2, #0]
 8005af2:	e011      	b.n	8005b18 <HAL_RCC_OscConfig+0x12c>
 8005af4:	4b56      	ldr	r3, [pc, #344]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a55      	ldr	r2, [pc, #340]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005afa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005afe:	6013      	str	r3, [r2, #0]
 8005b00:	4b53      	ldr	r3, [pc, #332]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a52      	ldr	r2, [pc, #328]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b0a:	6013      	str	r3, [r2, #0]
 8005b0c:	4b50      	ldr	r3, [pc, #320]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a4f      	ldr	r2, [pc, #316]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005b12:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005b16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d013      	beq.n	8005b48 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b20:	f7fc f860 	bl	8001be4 <HAL_GetTick>
 8005b24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b26:	e008      	b.n	8005b3a <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b28:	f7fc f85c 	bl	8001be4 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b64      	cmp	r3, #100	; 0x64
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e339      	b.n	80061ae <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b3a:	4b45      	ldr	r3, [pc, #276]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d0f0      	beq.n	8005b28 <HAL_RCC_OscConfig+0x13c>
 8005b46:	e014      	b.n	8005b72 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b48:	f7fc f84c 	bl	8001be4 <HAL_GetTick>
 8005b4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b4e:	e008      	b.n	8005b62 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b50:	f7fc f848 	bl	8001be4 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	2b64      	cmp	r3, #100	; 0x64
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e325      	b.n	80061ae <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b62:	4b3b      	ldr	r3, [pc, #236]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1f0      	bne.n	8005b50 <HAL_RCC_OscConfig+0x164>
 8005b6e:	e000      	b.n	8005b72 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0302 	and.w	r3, r3, #2
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d070      	beq.n	8005c60 <HAL_RCC_OscConfig+0x274>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b7e:	4b34      	ldr	r3, [pc, #208]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b86:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b88:	4b31      	ldr	r3, [pc, #196]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005b8e:	6a3b      	ldr	r3, [r7, #32]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d007      	beq.n	8005ba4 <HAL_RCC_OscConfig+0x1b8>
 8005b94:	6a3b      	ldr	r3, [r7, #32]
 8005b96:	2b18      	cmp	r3, #24
 8005b98:	d11b      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x1e6>
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	f003 0303 	and.w	r3, r3, #3
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d116      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x1e6>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ba4:	4b2a      	ldr	r3, [pc, #168]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0304 	and.w	r3, r3, #4
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d005      	beq.n	8005bbc <HAL_RCC_OscConfig+0x1d0>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d101      	bne.n	8005bbc <HAL_RCC_OscConfig+0x1d0>
      {
        return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e2f8      	b.n	80061ae <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bbc:	4b24      	ldr	r3, [pc, #144]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	061b      	lsls	r3, r3, #24
 8005bca:	4921      	ldr	r1, [pc, #132]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bd0:	e046      	b.n	8005c60 <HAL_RCC_OscConfig+0x274>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d026      	beq.n	8005c28 <HAL_RCC_OscConfig+0x23c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005bda:	4b1d      	ldr	r3, [pc, #116]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f023 0219 	bic.w	r2, r3, #25
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	491a      	ldr	r1, [pc, #104]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bec:	f7fb fffa 	bl	8001be4 <HAL_GetTick>
 8005bf0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005bf2:	e008      	b.n	8005c06 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bf4:	f7fb fff6 	bl	8001be4 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d901      	bls.n	8005c06 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e2d3      	b.n	80061ae <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c06:	4b12      	ldr	r3, [pc, #72]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0304 	and.w	r3, r3, #4
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d0f0      	beq.n	8005bf4 <HAL_RCC_OscConfig+0x208>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c12:	4b0f      	ldr	r3, [pc, #60]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	061b      	lsls	r3, r3, #24
 8005c20:	490b      	ldr	r1, [pc, #44]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	604b      	str	r3, [r1, #4]
 8005c26:	e01b      	b.n	8005c60 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c28:	4b09      	ldr	r3, [pc, #36]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a08      	ldr	r2, [pc, #32]	; (8005c50 <HAL_RCC_OscConfig+0x264>)
 8005c2e:	f023 0301 	bic.w	r3, r3, #1
 8005c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c34:	f7fb ffd6 	bl	8001be4 <HAL_GetTick>
 8005c38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005c3a:	e00b      	b.n	8005c54 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c3c:	f7fb ffd2 	bl	8001be4 <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d904      	bls.n	8005c54 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e2af      	b.n	80061ae <HAL_RCC_OscConfig+0x7c2>
 8005c4e:	bf00      	nop
 8005c50:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005c54:	4b99      	ldr	r3, [pc, #612]	; (8005ebc <HAL_RCC_OscConfig+0x4d0>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0304 	and.w	r3, r3, #4
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1ed      	bne.n	8005c3c <HAL_RCC_OscConfig+0x250>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0310 	and.w	r3, r3, #16
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d06a      	beq.n	8005d42 <HAL_RCC_OscConfig+0x356>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c6c:	4b93      	ldr	r3, [pc, #588]	; (8005ebc <HAL_RCC_OscConfig+0x4d0>)
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c74:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c76:	4b91      	ldr	r3, [pc, #580]	; (8005ebc <HAL_RCC_OscConfig+0x4d0>)
 8005c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	2b08      	cmp	r3, #8
 8005c80:	d007      	beq.n	8005c92 <HAL_RCC_OscConfig+0x2a6>
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	2b18      	cmp	r3, #24
 8005c86:	d11b      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x2d4>
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	f003 0303 	and.w	r3, r3, #3
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d116      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c92:	4b8a      	ldr	r3, [pc, #552]	; (8005ebc <HAL_RCC_OscConfig+0x4d0>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d005      	beq.n	8005caa <HAL_RCC_OscConfig+0x2be>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	2b80      	cmp	r3, #128	; 0x80
 8005ca4:	d001      	beq.n	8005caa <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e281      	b.n	80061ae <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005caa:	4b84      	ldr	r3, [pc, #528]	; (8005ebc <HAL_RCC_OscConfig+0x4d0>)
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	061b      	lsls	r3, r3, #24
 8005cb8:	4980      	ldr	r1, [pc, #512]	; (8005ebc <HAL_RCC_OscConfig+0x4d0>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005cbe:	e040      	b.n	8005d42 <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	69db      	ldr	r3, [r3, #28]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d023      	beq.n	8005d10 <HAL_RCC_OscConfig+0x324>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005cc8:	4b7c      	ldr	r3, [pc, #496]	; (8005ebc <HAL_RCC_OscConfig+0x4d0>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a7b      	ldr	r2, [pc, #492]	; (8005ebc <HAL_RCC_OscConfig+0x4d0>)
 8005cce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cd4:	f7fb ff86 	bl	8001be4 <HAL_GetTick>
 8005cd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005cda:	e008      	b.n	8005cee <HAL_RCC_OscConfig+0x302>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005cdc:	f7fb ff82 	bl	8001be4 <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d901      	bls.n	8005cee <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e25f      	b.n	80061ae <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005cee:	4b73      	ldr	r3, [pc, #460]	; (8005ebc <HAL_RCC_OscConfig+0x4d0>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d0f0      	beq.n	8005cdc <HAL_RCC_OscConfig+0x2f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005cfa:	4b70      	ldr	r3, [pc, #448]	; (8005ebc <HAL_RCC_OscConfig+0x4d0>)
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	061b      	lsls	r3, r3, #24
 8005d08:	496c      	ldr	r1, [pc, #432]	; (8005ebc <HAL_RCC_OscConfig+0x4d0>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	60cb      	str	r3, [r1, #12]
 8005d0e:	e018      	b.n	8005d42 <HAL_RCC_OscConfig+0x356>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005d10:	4b6a      	ldr	r3, [pc, #424]	; (8005ebc <HAL_RCC_OscConfig+0x4d0>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a69      	ldr	r2, [pc, #420]	; (8005ebc <HAL_RCC_OscConfig+0x4d0>)
 8005d16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d1c:	f7fb ff62 	bl	8001be4 <HAL_GetTick>
 8005d20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005d22:	e008      	b.n	8005d36 <HAL_RCC_OscConfig+0x34a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005d24:	f7fb ff5e 	bl	8001be4 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_OscConfig+0x34a>
          {
            return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e23b      	b.n	80061ae <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005d36:	4b61      	ldr	r3, [pc, #388]	; (8005ebc <HAL_RCC_OscConfig+0x4d0>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1f0      	bne.n	8005d24 <HAL_RCC_OscConfig+0x338>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0308 	and.w	r3, r3, #8
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d036      	beq.n	8005dbc <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d019      	beq.n	8005d8a <HAL_RCC_OscConfig+0x39e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d56:	4b59      	ldr	r3, [pc, #356]	; (8005ebc <HAL_RCC_OscConfig+0x4d0>)
 8005d58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d5a:	4a58      	ldr	r2, [pc, #352]	; (8005ebc <HAL_RCC_OscConfig+0x4d0>)
 8005d5c:	f043 0301 	orr.w	r3, r3, #1
 8005d60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d62:	f7fb ff3f 	bl	8001be4 <HAL_GetTick>
 8005d66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005d68:	e008      	b.n	8005d7c <HAL_RCC_OscConfig+0x390>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d6a:	f7fb ff3b 	bl	8001be4 <HAL_GetTick>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d901      	bls.n	8005d7c <HAL_RCC_OscConfig+0x390>
        {
          return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e218      	b.n	80061ae <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005d7c:	4b4f      	ldr	r3, [pc, #316]	; (8005ebc <HAL_RCC_OscConfig+0x4d0>)
 8005d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d80:	f003 0302 	and.w	r3, r3, #2
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d0f0      	beq.n	8005d6a <HAL_RCC_OscConfig+0x37e>
 8005d88:	e018      	b.n	8005dbc <HAL_RCC_OscConfig+0x3d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d8a:	4b4c      	ldr	r3, [pc, #304]	; (8005ebc <HAL_RCC_OscConfig+0x4d0>)
 8005d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d8e:	4a4b      	ldr	r2, [pc, #300]	; (8005ebc <HAL_RCC_OscConfig+0x4d0>)
 8005d90:	f023 0301 	bic.w	r3, r3, #1
 8005d94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d96:	f7fb ff25 	bl	8001be4 <HAL_GetTick>
 8005d9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005d9c:	e008      	b.n	8005db0 <HAL_RCC_OscConfig+0x3c4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d9e:	f7fb ff21 	bl	8001be4 <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d901      	bls.n	8005db0 <HAL_RCC_OscConfig+0x3c4>
        {
          return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e1fe      	b.n	80061ae <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005db0:	4b42      	ldr	r3, [pc, #264]	; (8005ebc <HAL_RCC_OscConfig+0x4d0>)
 8005db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1f0      	bne.n	8005d9e <HAL_RCC_OscConfig+0x3b2>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0320 	and.w	r3, r3, #32
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d036      	beq.n	8005e36 <HAL_RCC_OscConfig+0x44a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	699b      	ldr	r3, [r3, #24]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d019      	beq.n	8005e04 <HAL_RCC_OscConfig+0x418>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005dd0:	4b3a      	ldr	r3, [pc, #232]	; (8005ebc <HAL_RCC_OscConfig+0x4d0>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a39      	ldr	r2, [pc, #228]	; (8005ebc <HAL_RCC_OscConfig+0x4d0>)
 8005dd6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005dda:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005ddc:	f7fb ff02 	bl	8001be4 <HAL_GetTick>
 8005de0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005de2:	e008      	b.n	8005df6 <HAL_RCC_OscConfig+0x40a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005de4:	f7fb fefe 	bl	8001be4 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d901      	bls.n	8005df6 <HAL_RCC_OscConfig+0x40a>
        {
          return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e1db      	b.n	80061ae <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005df6:	4b31      	ldr	r3, [pc, #196]	; (8005ebc <HAL_RCC_OscConfig+0x4d0>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d0f0      	beq.n	8005de4 <HAL_RCC_OscConfig+0x3f8>
 8005e02:	e018      	b.n	8005e36 <HAL_RCC_OscConfig+0x44a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005e04:	4b2d      	ldr	r3, [pc, #180]	; (8005ebc <HAL_RCC_OscConfig+0x4d0>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a2c      	ldr	r2, [pc, #176]	; (8005ebc <HAL_RCC_OscConfig+0x4d0>)
 8005e0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e0e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005e10:	f7fb fee8 	bl	8001be4 <HAL_GetTick>
 8005e14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e16:	e008      	b.n	8005e2a <HAL_RCC_OscConfig+0x43e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005e18:	f7fb fee4 	bl	8001be4 <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d901      	bls.n	8005e2a <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e1c1      	b.n	80061ae <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e2a:	4b24      	ldr	r3, [pc, #144]	; (8005ebc <HAL_RCC_OscConfig+0x4d0>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1f0      	bne.n	8005e18 <HAL_RCC_OscConfig+0x42c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0304 	and.w	r3, r3, #4
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f000 80af 	beq.w	8005fa2 <HAL_RCC_OscConfig+0x5b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005e44:	4b1e      	ldr	r3, [pc, #120]	; (8005ec0 <HAL_RCC_OscConfig+0x4d4>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a1d      	ldr	r2, [pc, #116]	; (8005ec0 <HAL_RCC_OscConfig+0x4d4>)
 8005e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e50:	f7fb fec8 	bl	8001be4 <HAL_GetTick>
 8005e54:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e56:	e008      	b.n	8005e6a <HAL_RCC_OscConfig+0x47e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005e58:	f7fb fec4 	bl	8001be4 <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	2b64      	cmp	r3, #100	; 0x64
 8005e64:	d901      	bls.n	8005e6a <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e1a1      	b.n	80061ae <HAL_RCC_OscConfig+0x7c2>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e6a:	4b15      	ldr	r3, [pc, #84]	; (8005ec0 <HAL_RCC_OscConfig+0x4d4>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d0f0      	beq.n	8005e58 <HAL_RCC_OscConfig+0x46c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d106      	bne.n	8005e8c <HAL_RCC_OscConfig+0x4a0>
 8005e7e:	4b0f      	ldr	r3, [pc, #60]	; (8005ebc <HAL_RCC_OscConfig+0x4d0>)
 8005e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e82:	4a0e      	ldr	r2, [pc, #56]	; (8005ebc <HAL_RCC_OscConfig+0x4d0>)
 8005e84:	f043 0301 	orr.w	r3, r3, #1
 8005e88:	6713      	str	r3, [r2, #112]	; 0x70
 8005e8a:	e05b      	b.n	8005f44 <HAL_RCC_OscConfig+0x558>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d117      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x4d8>
 8005e94:	4b09      	ldr	r3, [pc, #36]	; (8005ebc <HAL_RCC_OscConfig+0x4d0>)
 8005e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e98:	4a08      	ldr	r2, [pc, #32]	; (8005ebc <HAL_RCC_OscConfig+0x4d0>)
 8005e9a:	f023 0301 	bic.w	r3, r3, #1
 8005e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8005ea0:	4b06      	ldr	r3, [pc, #24]	; (8005ebc <HAL_RCC_OscConfig+0x4d0>)
 8005ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea4:	4a05      	ldr	r2, [pc, #20]	; (8005ebc <HAL_RCC_OscConfig+0x4d0>)
 8005ea6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8005eac:	4b03      	ldr	r3, [pc, #12]	; (8005ebc <HAL_RCC_OscConfig+0x4d0>)
 8005eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb0:	4a02      	ldr	r2, [pc, #8]	; (8005ebc <HAL_RCC_OscConfig+0x4d0>)
 8005eb2:	f023 0304 	bic.w	r3, r3, #4
 8005eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8005eb8:	e044      	b.n	8005f44 <HAL_RCC_OscConfig+0x558>
 8005eba:	bf00      	nop
 8005ebc:	58024400 	.word	0x58024400
 8005ec0:	58024800 	.word	0x58024800
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	2b05      	cmp	r3, #5
 8005eca:	d112      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x506>
 8005ecc:	4b95      	ldr	r3, [pc, #596]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 8005ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed0:	4a94      	ldr	r2, [pc, #592]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 8005ed2:	f043 0304 	orr.w	r3, r3, #4
 8005ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ed8:	4b92      	ldr	r3, [pc, #584]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 8005eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005edc:	4a91      	ldr	r2, [pc, #580]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 8005ede:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ee4:	4b8f      	ldr	r3, [pc, #572]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 8005ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee8:	4a8e      	ldr	r2, [pc, #568]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 8005eea:	f043 0301 	orr.w	r3, r3, #1
 8005eee:	6713      	str	r3, [r2, #112]	; 0x70
 8005ef0:	e028      	b.n	8005f44 <HAL_RCC_OscConfig+0x558>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	2b85      	cmp	r3, #133	; 0x85
 8005ef8:	d112      	bne.n	8005f20 <HAL_RCC_OscConfig+0x534>
 8005efa:	4b8a      	ldr	r3, [pc, #552]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 8005efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005efe:	4a89      	ldr	r2, [pc, #548]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 8005f00:	f043 0304 	orr.w	r3, r3, #4
 8005f04:	6713      	str	r3, [r2, #112]	; 0x70
 8005f06:	4b87      	ldr	r3, [pc, #540]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 8005f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f0a:	4a86      	ldr	r2, [pc, #536]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 8005f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f10:	6713      	str	r3, [r2, #112]	; 0x70
 8005f12:	4b84      	ldr	r3, [pc, #528]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 8005f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f16:	4a83      	ldr	r2, [pc, #524]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 8005f18:	f043 0301 	orr.w	r3, r3, #1
 8005f1c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f1e:	e011      	b.n	8005f44 <HAL_RCC_OscConfig+0x558>
 8005f20:	4b80      	ldr	r3, [pc, #512]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 8005f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f24:	4a7f      	ldr	r2, [pc, #508]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 8005f26:	f023 0301 	bic.w	r3, r3, #1
 8005f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f2c:	4b7d      	ldr	r3, [pc, #500]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 8005f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f30:	4a7c      	ldr	r2, [pc, #496]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 8005f32:	f023 0304 	bic.w	r3, r3, #4
 8005f36:	6713      	str	r3, [r2, #112]	; 0x70
 8005f38:	4b7a      	ldr	r3, [pc, #488]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 8005f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f3c:	4a79      	ldr	r2, [pc, #484]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 8005f3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d015      	beq.n	8005f78 <HAL_RCC_OscConfig+0x58c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f4c:	f7fb fe4a 	bl	8001be4 <HAL_GetTick>
 8005f50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f52:	e00a      	b.n	8005f6a <HAL_RCC_OscConfig+0x57e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f54:	f7fb fe46 	bl	8001be4 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d901      	bls.n	8005f6a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e121      	b.n	80061ae <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f6a:	4b6e      	ldr	r3, [pc, #440]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 8005f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d0ee      	beq.n	8005f54 <HAL_RCC_OscConfig+0x568>
 8005f76:	e014      	b.n	8005fa2 <HAL_RCC_OscConfig+0x5b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f78:	f7fb fe34 	bl	8001be4 <HAL_GetTick>
 8005f7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f7e:	e00a      	b.n	8005f96 <HAL_RCC_OscConfig+0x5aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f80:	f7fb fe30 	bl	8001be4 <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d901      	bls.n	8005f96 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e10b      	b.n	80061ae <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f96:	4b63      	ldr	r3, [pc, #396]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 8005f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f9a:	f003 0302 	and.w	r3, r3, #2
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1ee      	bne.n	8005f80 <HAL_RCC_OscConfig+0x594>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f000 8100 	beq.w	80061ac <HAL_RCC_OscConfig+0x7c0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005fac:	4b5d      	ldr	r3, [pc, #372]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fb4:	2b18      	cmp	r3, #24
 8005fb6:	f000 80bb 	beq.w	8006130 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	f040 8095 	bne.w	80060ee <HAL_RCC_OscConfig+0x702>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fc4:	4b57      	ldr	r3, [pc, #348]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a56      	ldr	r2, [pc, #344]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 8005fca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fd0:	f7fb fe08 	bl	8001be4 <HAL_GetTick>
 8005fd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005fd6:	e008      	b.n	8005fea <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fd8:	f7fb fe04 	bl	8001be4 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d901      	bls.n	8005fea <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e0e1      	b.n	80061ae <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005fea:	4b4e      	ldr	r3, [pc, #312]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1f0      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x5ec>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ff6:	4b4b      	ldr	r3, [pc, #300]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 8005ff8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ffa:	4b4b      	ldr	r3, [pc, #300]	; (8006128 <HAL_RCC_OscConfig+0x73c>)
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006006:	0112      	lsls	r2, r2, #4
 8006008:	430a      	orrs	r2, r1
 800600a:	4946      	ldr	r1, [pc, #280]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 800600c:	4313      	orrs	r3, r2
 800600e:	628b      	str	r3, [r1, #40]	; 0x28
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006014:	3b01      	subs	r3, #1
 8006016:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800601e:	3b01      	subs	r3, #1
 8006020:	025b      	lsls	r3, r3, #9
 8006022:	b29b      	uxth	r3, r3
 8006024:	431a      	orrs	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602a:	3b01      	subs	r3, #1
 800602c:	041b      	lsls	r3, r3, #16
 800602e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006032:	431a      	orrs	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006038:	3b01      	subs	r3, #1
 800603a:	061b      	lsls	r3, r3, #24
 800603c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006040:	4938      	ldr	r1, [pc, #224]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 8006042:	4313      	orrs	r3, r2
 8006044:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006046:	4b37      	ldr	r3, [pc, #220]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 8006048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604a:	4a36      	ldr	r2, [pc, #216]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 800604c:	f023 0301 	bic.w	r3, r3, #1
 8006050:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006052:	4b34      	ldr	r3, [pc, #208]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 8006054:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006056:	4b35      	ldr	r3, [pc, #212]	; (800612c <HAL_RCC_OscConfig+0x740>)
 8006058:	4013      	ands	r3, r2
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800605e:	00d2      	lsls	r2, r2, #3
 8006060:	4930      	ldr	r1, [pc, #192]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 8006062:	4313      	orrs	r3, r2
 8006064:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006066:	4b2f      	ldr	r3, [pc, #188]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 8006068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606a:	f023 020c 	bic.w	r2, r3, #12
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006072:	492c      	ldr	r1, [pc, #176]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 8006074:	4313      	orrs	r3, r2
 8006076:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006078:	4b2a      	ldr	r3, [pc, #168]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 800607a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607c:	f023 0202 	bic.w	r2, r3, #2
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006084:	4927      	ldr	r1, [pc, #156]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 8006086:	4313      	orrs	r3, r2
 8006088:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800608a:	4b26      	ldr	r3, [pc, #152]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 800608c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608e:	4a25      	ldr	r2, [pc, #148]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 8006090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006094:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006096:	4b23      	ldr	r3, [pc, #140]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 8006098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609a:	4a22      	ldr	r2, [pc, #136]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 800609c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80060a2:	4b20      	ldr	r3, [pc, #128]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 80060a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a6:	4a1f      	ldr	r2, [pc, #124]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 80060a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80060ae:	4b1d      	ldr	r3, [pc, #116]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 80060b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b2:	4a1c      	ldr	r2, [pc, #112]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 80060b4:	f043 0301 	orr.w	r3, r3, #1
 80060b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060ba:	4b1a      	ldr	r3, [pc, #104]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a19      	ldr	r2, [pc, #100]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 80060c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060c6:	f7fb fd8d 	bl	8001be4 <HAL_GetTick>
 80060ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80060cc:	e008      	b.n	80060e0 <HAL_RCC_OscConfig+0x6f4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060ce:	f7fb fd89 	bl	8001be4 <HAL_GetTick>
 80060d2:	4602      	mov	r2, r0
 80060d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d901      	bls.n	80060e0 <HAL_RCC_OscConfig+0x6f4>
          {
            return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e066      	b.n	80061ae <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80060e0:	4b10      	ldr	r3, [pc, #64]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d0f0      	beq.n	80060ce <HAL_RCC_OscConfig+0x6e2>
 80060ec:	e05e      	b.n	80061ac <HAL_RCC_OscConfig+0x7c0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ee:	4b0d      	ldr	r3, [pc, #52]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a0c      	ldr	r2, [pc, #48]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 80060f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060fa:	f7fb fd73 	bl	8001be4 <HAL_GetTick>
 80060fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006100:	e008      	b.n	8006114 <HAL_RCC_OscConfig+0x728>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006102:	f7fb fd6f 	bl	8001be4 <HAL_GetTick>
 8006106:	4602      	mov	r2, r0
 8006108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	2b02      	cmp	r3, #2
 800610e:	d901      	bls.n	8006114 <HAL_RCC_OscConfig+0x728>
          {
            return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e04c      	b.n	80061ae <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006114:	4b03      	ldr	r3, [pc, #12]	; (8006124 <HAL_RCC_OscConfig+0x738>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d1f0      	bne.n	8006102 <HAL_RCC_OscConfig+0x716>
 8006120:	e044      	b.n	80061ac <HAL_RCC_OscConfig+0x7c0>
 8006122:	bf00      	nop
 8006124:	58024400 	.word	0x58024400
 8006128:	fffffc0c 	.word	0xfffffc0c
 800612c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006130:	4b21      	ldr	r3, [pc, #132]	; (80061b8 <HAL_RCC_OscConfig+0x7cc>)
 8006132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006134:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006136:	4b20      	ldr	r3, [pc, #128]	; (80061b8 <HAL_RCC_OscConfig+0x7cc>)
 8006138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006140:	2b01      	cmp	r3, #1
 8006142:	d031      	beq.n	80061a8 <HAL_RCC_OscConfig+0x7bc>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	f003 0203 	and.w	r2, r3, #3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800614e:	429a      	cmp	r2, r3
 8006150:	d12a      	bne.n	80061a8 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	091b      	lsrs	r3, r3, #4
 8006156:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800615e:	429a      	cmp	r2, r3
 8006160:	d122      	bne.n	80061a8 <HAL_RCC_OscConfig+0x7bc>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800616c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800616e:	429a      	cmp	r2, r3
 8006170:	d11a      	bne.n	80061a8 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	0a5b      	lsrs	r3, r3, #9
 8006176:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800617e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006180:	429a      	cmp	r2, r3
 8006182:	d111      	bne.n	80061a8 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	0c1b      	lsrs	r3, r3, #16
 8006188:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006190:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006192:	429a      	cmp	r2, r3
 8006194:	d108      	bne.n	80061a8 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	0e1b      	lsrs	r3, r3, #24
 800619a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061a2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d001      	beq.n	80061ac <HAL_RCC_OscConfig+0x7c0>
      {
        return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e000      	b.n	80061ae <HAL_RCC_OscConfig+0x7c2>
      }
    }
  }
  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3730      	adds	r7, #48	; 0x30
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	58024400 	.word	0x58024400

080061bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d101      	bne.n	80061d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e19c      	b.n	800650a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061d0:	4b8a      	ldr	r3, [pc, #552]	; (80063fc <HAL_RCC_ClockConfig+0x240>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 030f 	and.w	r3, r3, #15
 80061d8:	683a      	ldr	r2, [r7, #0]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d910      	bls.n	8006200 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061de:	4b87      	ldr	r3, [pc, #540]	; (80063fc <HAL_RCC_ClockConfig+0x240>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f023 020f 	bic.w	r2, r3, #15
 80061e6:	4985      	ldr	r1, [pc, #532]	; (80063fc <HAL_RCC_ClockConfig+0x240>)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ee:	4b83      	ldr	r3, [pc, #524]	; (80063fc <HAL_RCC_ClockConfig+0x240>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 030f 	and.w	r3, r3, #15
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d001      	beq.n	8006200 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e184      	b.n	800650a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0304 	and.w	r3, r3, #4
 8006208:	2b00      	cmp	r3, #0
 800620a:	d010      	beq.n	800622e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	691a      	ldr	r2, [r3, #16]
 8006210:	4b7b      	ldr	r3, [pc, #492]	; (8006400 <HAL_RCC_ClockConfig+0x244>)
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006218:	429a      	cmp	r2, r3
 800621a:	d908      	bls.n	800622e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800621c:	4b78      	ldr	r3, [pc, #480]	; (8006400 <HAL_RCC_ClockConfig+0x244>)
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	4975      	ldr	r1, [pc, #468]	; (8006400 <HAL_RCC_ClockConfig+0x244>)
 800622a:	4313      	orrs	r3, r2
 800622c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 0308 	and.w	r3, r3, #8
 8006236:	2b00      	cmp	r3, #0
 8006238:	d010      	beq.n	800625c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	695a      	ldr	r2, [r3, #20]
 800623e:	4b70      	ldr	r3, [pc, #448]	; (8006400 <HAL_RCC_ClockConfig+0x244>)
 8006240:	69db      	ldr	r3, [r3, #28]
 8006242:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006246:	429a      	cmp	r2, r3
 8006248:	d908      	bls.n	800625c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800624a:	4b6d      	ldr	r3, [pc, #436]	; (8006400 <HAL_RCC_ClockConfig+0x244>)
 800624c:	69db      	ldr	r3, [r3, #28]
 800624e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	496a      	ldr	r1, [pc, #424]	; (8006400 <HAL_RCC_ClockConfig+0x244>)
 8006258:	4313      	orrs	r3, r2
 800625a:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0310 	and.w	r3, r3, #16
 8006264:	2b00      	cmp	r3, #0
 8006266:	d010      	beq.n	800628a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	699a      	ldr	r2, [r3, #24]
 800626c:	4b64      	ldr	r3, [pc, #400]	; (8006400 <HAL_RCC_ClockConfig+0x244>)
 800626e:	69db      	ldr	r3, [r3, #28]
 8006270:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006274:	429a      	cmp	r2, r3
 8006276:	d908      	bls.n	800628a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006278:	4b61      	ldr	r3, [pc, #388]	; (8006400 <HAL_RCC_ClockConfig+0x244>)
 800627a:	69db      	ldr	r3, [r3, #28]
 800627c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	495e      	ldr	r1, [pc, #376]	; (8006400 <HAL_RCC_ClockConfig+0x244>)
 8006286:	4313      	orrs	r3, r2
 8006288:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0320 	and.w	r3, r3, #32
 8006292:	2b00      	cmp	r3, #0
 8006294:	d010      	beq.n	80062b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	69da      	ldr	r2, [r3, #28]
 800629a:	4b59      	ldr	r3, [pc, #356]	; (8006400 <HAL_RCC_ClockConfig+0x244>)
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d908      	bls.n	80062b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80062a6:	4b56      	ldr	r3, [pc, #344]	; (8006400 <HAL_RCC_ClockConfig+0x244>)
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	69db      	ldr	r3, [r3, #28]
 80062b2:	4953      	ldr	r1, [pc, #332]	; (8006400 <HAL_RCC_ClockConfig+0x244>)
 80062b4:	4313      	orrs	r3, r2
 80062b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0302 	and.w	r3, r3, #2
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d010      	beq.n	80062e6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68da      	ldr	r2, [r3, #12]
 80062c8:	4b4d      	ldr	r3, [pc, #308]	; (8006400 <HAL_RCC_ClockConfig+0x244>)
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	f003 030f 	and.w	r3, r3, #15
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d908      	bls.n	80062e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062d4:	4b4a      	ldr	r3, [pc, #296]	; (8006400 <HAL_RCC_ClockConfig+0x244>)
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	f023 020f 	bic.w	r2, r3, #15
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	4947      	ldr	r1, [pc, #284]	; (8006400 <HAL_RCC_ClockConfig+0x244>)
 80062e2:	4313      	orrs	r3, r2
 80062e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d055      	beq.n	800639e <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80062f2:	4b43      	ldr	r3, [pc, #268]	; (8006400 <HAL_RCC_ClockConfig+0x244>)
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	4940      	ldr	r1, [pc, #256]	; (8006400 <HAL_RCC_ClockConfig+0x244>)
 8006300:	4313      	orrs	r3, r2
 8006302:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	2b02      	cmp	r3, #2
 800630a:	d107      	bne.n	800631c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800630c:	4b3c      	ldr	r3, [pc, #240]	; (8006400 <HAL_RCC_ClockConfig+0x244>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d121      	bne.n	800635c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e0f6      	b.n	800650a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	2b03      	cmp	r3, #3
 8006322:	d107      	bne.n	8006334 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006324:	4b36      	ldr	r3, [pc, #216]	; (8006400 <HAL_RCC_ClockConfig+0x244>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800632c:	2b00      	cmp	r3, #0
 800632e:	d115      	bne.n	800635c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e0ea      	b.n	800650a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d107      	bne.n	800634c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800633c:	4b30      	ldr	r3, [pc, #192]	; (8006400 <HAL_RCC_ClockConfig+0x244>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006344:	2b00      	cmp	r3, #0
 8006346:	d109      	bne.n	800635c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e0de      	b.n	800650a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800634c:	4b2c      	ldr	r3, [pc, #176]	; (8006400 <HAL_RCC_ClockConfig+0x244>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 0304 	and.w	r3, r3, #4
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e0d6      	b.n	800650a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800635c:	4b28      	ldr	r3, [pc, #160]	; (8006400 <HAL_RCC_ClockConfig+0x244>)
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	f023 0207 	bic.w	r2, r3, #7
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	4925      	ldr	r1, [pc, #148]	; (8006400 <HAL_RCC_ClockConfig+0x244>)
 800636a:	4313      	orrs	r3, r2
 800636c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800636e:	f7fb fc39 	bl	8001be4 <HAL_GetTick>
 8006372:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006374:	e00a      	b.n	800638c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006376:	f7fb fc35 	bl	8001be4 <HAL_GetTick>
 800637a:	4602      	mov	r2, r0
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	f241 3288 	movw	r2, #5000	; 0x1388
 8006384:	4293      	cmp	r3, r2
 8006386:	d901      	bls.n	800638c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e0be      	b.n	800650a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800638c:	4b1c      	ldr	r3, [pc, #112]	; (8006400 <HAL_RCC_ClockConfig+0x244>)
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	00db      	lsls	r3, r3, #3
 800639a:	429a      	cmp	r2, r3
 800639c:	d1eb      	bne.n	8006376 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0302 	and.w	r3, r3, #2
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d010      	beq.n	80063cc <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68da      	ldr	r2, [r3, #12]
 80063ae:	4b14      	ldr	r3, [pc, #80]	; (8006400 <HAL_RCC_ClockConfig+0x244>)
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	f003 030f 	and.w	r3, r3, #15
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d208      	bcs.n	80063cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063ba:	4b11      	ldr	r3, [pc, #68]	; (8006400 <HAL_RCC_ClockConfig+0x244>)
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	f023 020f 	bic.w	r2, r3, #15
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	490e      	ldr	r1, [pc, #56]	; (8006400 <HAL_RCC_ClockConfig+0x244>)
 80063c8:	4313      	orrs	r3, r2
 80063ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063cc:	4b0b      	ldr	r3, [pc, #44]	; (80063fc <HAL_RCC_ClockConfig+0x240>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 030f 	and.w	r3, r3, #15
 80063d4:	683a      	ldr	r2, [r7, #0]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d214      	bcs.n	8006404 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063da:	4b08      	ldr	r3, [pc, #32]	; (80063fc <HAL_RCC_ClockConfig+0x240>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f023 020f 	bic.w	r2, r3, #15
 80063e2:	4906      	ldr	r1, [pc, #24]	; (80063fc <HAL_RCC_ClockConfig+0x240>)
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063ea:	4b04      	ldr	r3, [pc, #16]	; (80063fc <HAL_RCC_ClockConfig+0x240>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 030f 	and.w	r3, r3, #15
 80063f2:	683a      	ldr	r2, [r7, #0]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d005      	beq.n	8006404 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e086      	b.n	800650a <HAL_RCC_ClockConfig+0x34e>
 80063fc:	52002000 	.word	0x52002000
 8006400:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0304 	and.w	r3, r3, #4
 800640c:	2b00      	cmp	r3, #0
 800640e:	d010      	beq.n	8006432 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	691a      	ldr	r2, [r3, #16]
 8006414:	4b3f      	ldr	r3, [pc, #252]	; (8006514 <HAL_RCC_ClockConfig+0x358>)
 8006416:	699b      	ldr	r3, [r3, #24]
 8006418:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800641c:	429a      	cmp	r2, r3
 800641e:	d208      	bcs.n	8006432 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006420:	4b3c      	ldr	r3, [pc, #240]	; (8006514 <HAL_RCC_ClockConfig+0x358>)
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	4939      	ldr	r1, [pc, #228]	; (8006514 <HAL_RCC_ClockConfig+0x358>)
 800642e:	4313      	orrs	r3, r2
 8006430:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0308 	and.w	r3, r3, #8
 800643a:	2b00      	cmp	r3, #0
 800643c:	d010      	beq.n	8006460 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	695a      	ldr	r2, [r3, #20]
 8006442:	4b34      	ldr	r3, [pc, #208]	; (8006514 <HAL_RCC_ClockConfig+0x358>)
 8006444:	69db      	ldr	r3, [r3, #28]
 8006446:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800644a:	429a      	cmp	r2, r3
 800644c:	d208      	bcs.n	8006460 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800644e:	4b31      	ldr	r3, [pc, #196]	; (8006514 <HAL_RCC_ClockConfig+0x358>)
 8006450:	69db      	ldr	r3, [r3, #28]
 8006452:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	492e      	ldr	r1, [pc, #184]	; (8006514 <HAL_RCC_ClockConfig+0x358>)
 800645c:	4313      	orrs	r3, r2
 800645e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0310 	and.w	r3, r3, #16
 8006468:	2b00      	cmp	r3, #0
 800646a:	d010      	beq.n	800648e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	699a      	ldr	r2, [r3, #24]
 8006470:	4b28      	ldr	r3, [pc, #160]	; (8006514 <HAL_RCC_ClockConfig+0x358>)
 8006472:	69db      	ldr	r3, [r3, #28]
 8006474:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006478:	429a      	cmp	r2, r3
 800647a:	d208      	bcs.n	800648e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800647c:	4b25      	ldr	r3, [pc, #148]	; (8006514 <HAL_RCC_ClockConfig+0x358>)
 800647e:	69db      	ldr	r3, [r3, #28]
 8006480:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	4922      	ldr	r1, [pc, #136]	; (8006514 <HAL_RCC_ClockConfig+0x358>)
 800648a:	4313      	orrs	r3, r2
 800648c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0320 	and.w	r3, r3, #32
 8006496:	2b00      	cmp	r3, #0
 8006498:	d010      	beq.n	80064bc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	69da      	ldr	r2, [r3, #28]
 800649e:	4b1d      	ldr	r3, [pc, #116]	; (8006514 <HAL_RCC_ClockConfig+0x358>)
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d208      	bcs.n	80064bc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80064aa:	4b1a      	ldr	r3, [pc, #104]	; (8006514 <HAL_RCC_ClockConfig+0x358>)
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	69db      	ldr	r3, [r3, #28]
 80064b6:	4917      	ldr	r1, [pc, #92]	; (8006514 <HAL_RCC_ClockConfig+0x358>)
 80064b8:	4313      	orrs	r3, r2
 80064ba:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80064bc:	f000 f834 	bl	8006528 <HAL_RCC_GetSysClockFreq>
 80064c0:	4601      	mov	r1, r0
 80064c2:	4b14      	ldr	r3, [pc, #80]	; (8006514 <HAL_RCC_ClockConfig+0x358>)
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	0a1b      	lsrs	r3, r3, #8
 80064c8:	f003 030f 	and.w	r3, r3, #15
 80064cc:	4a12      	ldr	r2, [pc, #72]	; (8006518 <HAL_RCC_ClockConfig+0x35c>)
 80064ce:	5cd3      	ldrb	r3, [r2, r3]
 80064d0:	f003 031f 	and.w	r3, r3, #31
 80064d4:	fa21 f303 	lsr.w	r3, r1, r3
 80064d8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80064da:	4b0e      	ldr	r3, [pc, #56]	; (8006514 <HAL_RCC_ClockConfig+0x358>)
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	f003 030f 	and.w	r3, r3, #15
 80064e2:	4a0d      	ldr	r2, [pc, #52]	; (8006518 <HAL_RCC_ClockConfig+0x35c>)
 80064e4:	5cd3      	ldrb	r3, [r2, r3]
 80064e6:	f003 031f 	and.w	r3, r3, #31
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	fa22 f303 	lsr.w	r3, r2, r3
 80064f0:	4a0a      	ldr	r2, [pc, #40]	; (800651c <HAL_RCC_ClockConfig+0x360>)
 80064f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80064f4:	4a0a      	ldr	r2, [pc, #40]	; (8006520 <HAL_RCC_ClockConfig+0x364>)
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80064fa:	4b0a      	ldr	r3, [pc, #40]	; (8006524 <HAL_RCC_ClockConfig+0x368>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4618      	mov	r0, r3
 8006500:	f7fb fb26 	bl	8001b50 <HAL_InitTick>
 8006504:	4603      	mov	r3, r0
 8006506:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006508:	7bfb      	ldrb	r3, [r7, #15]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3718      	adds	r7, #24
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	58024400 	.word	0x58024400
 8006518:	0800b3e4 	.word	0x0800b3e4
 800651c:	24000010 	.word	0x24000010
 8006520:	2400000c 	.word	0x2400000c
 8006524:	24000014 	.word	0x24000014

08006528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006528:	b480      	push	{r7}
 800652a:	b089      	sub	sp, #36	; 0x24
 800652c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800652e:	4baf      	ldr	r3, [pc, #700]	; (80067ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006536:	2b18      	cmp	r3, #24
 8006538:	f200 814e 	bhi.w	80067d8 <HAL_RCC_GetSysClockFreq+0x2b0>
 800653c:	a201      	add	r2, pc, #4	; (adr r2, 8006544 <HAL_RCC_GetSysClockFreq+0x1c>)
 800653e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006542:	bf00      	nop
 8006544:	080065a9 	.word	0x080065a9
 8006548:	080067d9 	.word	0x080067d9
 800654c:	080067d9 	.word	0x080067d9
 8006550:	080067d9 	.word	0x080067d9
 8006554:	080067d9 	.word	0x080067d9
 8006558:	080067d9 	.word	0x080067d9
 800655c:	080067d9 	.word	0x080067d9
 8006560:	080067d9 	.word	0x080067d9
 8006564:	080065cf 	.word	0x080065cf
 8006568:	080067d9 	.word	0x080067d9
 800656c:	080067d9 	.word	0x080067d9
 8006570:	080067d9 	.word	0x080067d9
 8006574:	080067d9 	.word	0x080067d9
 8006578:	080067d9 	.word	0x080067d9
 800657c:	080067d9 	.word	0x080067d9
 8006580:	080067d9 	.word	0x080067d9
 8006584:	080065d5 	.word	0x080065d5
 8006588:	080067d9 	.word	0x080067d9
 800658c:	080067d9 	.word	0x080067d9
 8006590:	080067d9 	.word	0x080067d9
 8006594:	080067d9 	.word	0x080067d9
 8006598:	080067d9 	.word	0x080067d9
 800659c:	080067d9 	.word	0x080067d9
 80065a0:	080067d9 	.word	0x080067d9
 80065a4:	080065db 	.word	0x080065db
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065a8:	4b90      	ldr	r3, [pc, #576]	; (80067ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0320 	and.w	r3, r3, #32
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d009      	beq.n	80065c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80065b4:	4b8d      	ldr	r3, [pc, #564]	; (80067ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	08db      	lsrs	r3, r3, #3
 80065ba:	f003 0303 	and.w	r3, r3, #3
 80065be:	4a8c      	ldr	r2, [pc, #560]	; (80067f0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80065c0:	fa22 f303 	lsr.w	r3, r2, r3
 80065c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80065c6:	e10a      	b.n	80067de <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80065c8:	4b89      	ldr	r3, [pc, #548]	; (80067f0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80065ca:	61bb      	str	r3, [r7, #24]
    break;
 80065cc:	e107      	b.n	80067de <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80065ce:	4b89      	ldr	r3, [pc, #548]	; (80067f4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80065d0:	61bb      	str	r3, [r7, #24]
    break;
 80065d2:	e104      	b.n	80067de <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80065d4:	4b88      	ldr	r3, [pc, #544]	; (80067f8 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80065d6:	61bb      	str	r3, [r7, #24]
    break;
 80065d8:	e101      	b.n	80067de <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80065da:	4b84      	ldr	r3, [pc, #528]	; (80067ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80065dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065de:	f003 0303 	and.w	r3, r3, #3
 80065e2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80065e4:	4b81      	ldr	r3, [pc, #516]	; (80067ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80065e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e8:	091b      	lsrs	r3, r3, #4
 80065ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065ee:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80065f0:	4b7e      	ldr	r3, [pc, #504]	; (80067ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80065f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f4:	f003 0301 	and.w	r3, r3, #1
 80065f8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80065fa:	4b7c      	ldr	r3, [pc, #496]	; (80067ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80065fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065fe:	08db      	lsrs	r3, r3, #3
 8006600:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	fb02 f303 	mul.w	r3, r2, r3
 800660a:	ee07 3a90 	vmov	s15, r3
 800660e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006612:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	2b00      	cmp	r3, #0
 800661a:	f000 80da 	beq.w	80067d2 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	2b01      	cmp	r3, #1
 8006622:	d05a      	beq.n	80066da <HAL_RCC_GetSysClockFreq+0x1b2>
 8006624:	2b01      	cmp	r3, #1
 8006626:	d302      	bcc.n	800662e <HAL_RCC_GetSysClockFreq+0x106>
 8006628:	2b02      	cmp	r3, #2
 800662a:	d078      	beq.n	800671e <HAL_RCC_GetSysClockFreq+0x1f6>
 800662c:	e099      	b.n	8006762 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800662e:	4b6f      	ldr	r3, [pc, #444]	; (80067ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 0320 	and.w	r3, r3, #32
 8006636:	2b00      	cmp	r3, #0
 8006638:	d02d      	beq.n	8006696 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800663a:	4b6c      	ldr	r3, [pc, #432]	; (80067ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	08db      	lsrs	r3, r3, #3
 8006640:	f003 0303 	and.w	r3, r3, #3
 8006644:	4a6a      	ldr	r2, [pc, #424]	; (80067f0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006646:	fa22 f303 	lsr.w	r3, r2, r3
 800664a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	ee07 3a90 	vmov	s15, r3
 8006652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	ee07 3a90 	vmov	s15, r3
 800665c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006660:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006664:	4b61      	ldr	r3, [pc, #388]	; (80067ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800666c:	ee07 3a90 	vmov	s15, r3
 8006670:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006674:	ed97 6a02 	vldr	s12, [r7, #8]
 8006678:	eddf 5a60 	vldr	s11, [pc, #384]	; 80067fc <HAL_RCC_GetSysClockFreq+0x2d4>
 800667c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006680:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006684:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006688:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800668c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006690:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006694:	e087      	b.n	80067a6 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	ee07 3a90 	vmov	s15, r3
 800669c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066a0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006800 <HAL_RCC_GetSysClockFreq+0x2d8>
 80066a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066a8:	4b50      	ldr	r3, [pc, #320]	; (80067ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80066aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066b0:	ee07 3a90 	vmov	s15, r3
 80066b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80066bc:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80067fc <HAL_RCC_GetSysClockFreq+0x2d4>
 80066c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066d8:	e065      	b.n	80067a6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	ee07 3a90 	vmov	s15, r3
 80066e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066e4:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006804 <HAL_RCC_GetSysClockFreq+0x2dc>
 80066e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066ec:	4b3f      	ldr	r3, [pc, #252]	; (80067ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80066ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066f4:	ee07 3a90 	vmov	s15, r3
 80066f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8006700:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80067fc <HAL_RCC_GetSysClockFreq+0x2d4>
 8006704:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006708:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800670c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006710:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006718:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800671c:	e043      	b.n	80067a6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	ee07 3a90 	vmov	s15, r3
 8006724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006728:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006808 <HAL_RCC_GetSysClockFreq+0x2e0>
 800672c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006730:	4b2e      	ldr	r3, [pc, #184]	; (80067ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006738:	ee07 3a90 	vmov	s15, r3
 800673c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006740:	ed97 6a02 	vldr	s12, [r7, #8]
 8006744:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80067fc <HAL_RCC_GetSysClockFreq+0x2d4>
 8006748:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800674c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006750:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006754:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006758:	ee67 7a27 	vmul.f32	s15, s14, s15
 800675c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006760:	e021      	b.n	80067a6 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	ee07 3a90 	vmov	s15, r3
 8006768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800676c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006804 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006770:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006774:	4b1d      	ldr	r3, [pc, #116]	; (80067ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800677c:	ee07 3a90 	vmov	s15, r3
 8006780:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006784:	ed97 6a02 	vldr	s12, [r7, #8]
 8006788:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80067fc <HAL_RCC_GetSysClockFreq+0x2d4>
 800678c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006790:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006794:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006798:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800679c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067a4:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80067a6:	4b11      	ldr	r3, [pc, #68]	; (80067ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 80067a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067aa:	0a5b      	lsrs	r3, r3, #9
 80067ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067b0:	3301      	adds	r3, #1
 80067b2:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	ee07 3a90 	vmov	s15, r3
 80067ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80067be:	edd7 6a07 	vldr	s13, [r7, #28]
 80067c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067ca:	ee17 3a90 	vmov	r3, s15
 80067ce:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80067d0:	e005      	b.n	80067de <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80067d2:	2300      	movs	r3, #0
 80067d4:	61bb      	str	r3, [r7, #24]
    break;
 80067d6:	e002      	b.n	80067de <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80067d8:	4b06      	ldr	r3, [pc, #24]	; (80067f4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80067da:	61bb      	str	r3, [r7, #24]
    break;
 80067dc:	bf00      	nop
  }

  return sysclockfreq;
 80067de:	69bb      	ldr	r3, [r7, #24]
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3724      	adds	r7, #36	; 0x24
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr
 80067ec:	58024400 	.word	0x58024400
 80067f0:	03d09000 	.word	0x03d09000
 80067f4:	003d0900 	.word	0x003d0900
 80067f8:	007a1200 	.word	0x007a1200
 80067fc:	46000000 	.word	0x46000000
 8006800:	4c742400 	.word	0x4c742400
 8006804:	4a742400 	.word	0x4a742400
 8006808:	4af42400 	.word	0x4af42400

0800680c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8006812:	f7ff fe89 	bl	8006528 <HAL_RCC_GetSysClockFreq>
 8006816:	4601      	mov	r1, r0
 8006818:	4b10      	ldr	r3, [pc, #64]	; (800685c <HAL_RCC_GetHCLKFreq+0x50>)
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	0a1b      	lsrs	r3, r3, #8
 800681e:	f003 030f 	and.w	r3, r3, #15
 8006822:	4a0f      	ldr	r2, [pc, #60]	; (8006860 <HAL_RCC_GetHCLKFreq+0x54>)
 8006824:	5cd3      	ldrb	r3, [r2, r3]
 8006826:	f003 031f 	and.w	r3, r3, #31
 800682a:	fa21 f303 	lsr.w	r3, r1, r3
 800682e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006830:	4b0a      	ldr	r3, [pc, #40]	; (800685c <HAL_RCC_GetHCLKFreq+0x50>)
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	f003 030f 	and.w	r3, r3, #15
 8006838:	4a09      	ldr	r2, [pc, #36]	; (8006860 <HAL_RCC_GetHCLKFreq+0x54>)
 800683a:	5cd3      	ldrb	r3, [r2, r3]
 800683c:	f003 031f 	and.w	r3, r3, #31
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	fa22 f303 	lsr.w	r3, r2, r3
 8006846:	4a07      	ldr	r2, [pc, #28]	; (8006864 <HAL_RCC_GetHCLKFreq+0x58>)
 8006848:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800684a:	4a07      	ldr	r2, [pc, #28]	; (8006868 <HAL_RCC_GetHCLKFreq+0x5c>)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006850:	4b04      	ldr	r3, [pc, #16]	; (8006864 <HAL_RCC_GetHCLKFreq+0x58>)
 8006852:	681b      	ldr	r3, [r3, #0]
}
 8006854:	4618      	mov	r0, r3
 8006856:	3708      	adds	r7, #8
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	58024400 	.word	0x58024400
 8006860:	0800b3e4 	.word	0x0800b3e4
 8006864:	24000010 	.word	0x24000010
 8006868:	2400000c 	.word	0x2400000c

0800686c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8006870:	f7ff ffcc 	bl	800680c <HAL_RCC_GetHCLKFreq>
 8006874:	4601      	mov	r1, r0
 8006876:	4b06      	ldr	r3, [pc, #24]	; (8006890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006878:	69db      	ldr	r3, [r3, #28]
 800687a:	091b      	lsrs	r3, r3, #4
 800687c:	f003 0307 	and.w	r3, r3, #7
 8006880:	4a04      	ldr	r2, [pc, #16]	; (8006894 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006882:	5cd3      	ldrb	r3, [r2, r3]
 8006884:	f003 031f 	and.w	r3, r3, #31
 8006888:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 800688c:	4618      	mov	r0, r3
 800688e:	bd80      	pop	{r7, pc}
 8006890:	58024400 	.word	0x58024400
 8006894:	0800b3e4 	.word	0x0800b3e4

08006898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800689c:	f7ff ffb6 	bl	800680c <HAL_RCC_GetHCLKFreq>
 80068a0:	4601      	mov	r1, r0
 80068a2:	4b06      	ldr	r3, [pc, #24]	; (80068bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80068a4:	69db      	ldr	r3, [r3, #28]
 80068a6:	0a1b      	lsrs	r3, r3, #8
 80068a8:	f003 0307 	and.w	r3, r3, #7
 80068ac:	4a04      	ldr	r2, [pc, #16]	; (80068c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80068ae:	5cd3      	ldrb	r3, [r2, r3]
 80068b0:	f003 031f 	and.w	r3, r3, #31
 80068b4:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	58024400 	.word	0x58024400
 80068c0:	0800b3e4 	.word	0x0800b3e4

080068c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b086      	sub	sp, #24
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80068cc:	2300      	movs	r3, #0
 80068ce:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80068d0:	2300      	movs	r3, #0
 80068d2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d03d      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068e8:	d013      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80068ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068ee:	d802      	bhi.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d007      	beq.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80068f4:	e01f      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80068f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068fa:	d013      	beq.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80068fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006900:	d01c      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006902:	e018      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006904:	4bad      	ldr	r3, [pc, #692]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006908:	4aac      	ldr	r2, [pc, #688]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800690a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800690e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006910:	e015      	b.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	3304      	adds	r3, #4
 8006916:	2102      	movs	r1, #2
 8006918:	4618      	mov	r0, r3
 800691a:	f001 fca7 	bl	800826c <RCCEx_PLL2_Config>
 800691e:	4603      	mov	r3, r0
 8006920:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006922:	e00c      	b.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	3324      	adds	r3, #36	; 0x24
 8006928:	2102      	movs	r1, #2
 800692a:	4618      	mov	r0, r3
 800692c:	f001 fd50 	bl	80083d0 <RCCEx_PLL3_Config>
 8006930:	4603      	mov	r3, r0
 8006932:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006934:	e003      	b.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	75fb      	strb	r3, [r7, #23]
      break;
 800693a:	e000      	b.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800693c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800693e:	7dfb      	ldrb	r3, [r7, #23]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d109      	bne.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006944:	4b9d      	ldr	r3, [pc, #628]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006948:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006950:	499a      	ldr	r1, [pc, #616]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006952:	4313      	orrs	r3, r2
 8006954:	650b      	str	r3, [r1, #80]	; 0x50
 8006956:	e001      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006958:	7dfb      	ldrb	r3, [r7, #23]
 800695a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006964:	2b00      	cmp	r3, #0
 8006966:	d03d      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800696c:	2b04      	cmp	r3, #4
 800696e:	d826      	bhi.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006970:	a201      	add	r2, pc, #4	; (adr r2, 8006978 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006976:	bf00      	nop
 8006978:	0800698d 	.word	0x0800698d
 800697c:	0800699b 	.word	0x0800699b
 8006980:	080069ad 	.word	0x080069ad
 8006984:	080069c5 	.word	0x080069c5
 8006988:	080069c5 	.word	0x080069c5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800698c:	4b8b      	ldr	r3, [pc, #556]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800698e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006990:	4a8a      	ldr	r2, [pc, #552]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006996:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006998:	e015      	b.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	3304      	adds	r3, #4
 800699e:	2100      	movs	r1, #0
 80069a0:	4618      	mov	r0, r3
 80069a2:	f001 fc63 	bl	800826c <RCCEx_PLL2_Config>
 80069a6:	4603      	mov	r3, r0
 80069a8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80069aa:	e00c      	b.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	3324      	adds	r3, #36	; 0x24
 80069b0:	2100      	movs	r1, #0
 80069b2:	4618      	mov	r0, r3
 80069b4:	f001 fd0c 	bl	80083d0 <RCCEx_PLL3_Config>
 80069b8:	4603      	mov	r3, r0
 80069ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80069bc:	e003      	b.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	75fb      	strb	r3, [r7, #23]
      break;
 80069c2:	e000      	b.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80069c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069c6:	7dfb      	ldrb	r3, [r7, #23]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d109      	bne.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80069cc:	4b7b      	ldr	r3, [pc, #492]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80069ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069d0:	f023 0207 	bic.w	r2, r3, #7
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d8:	4978      	ldr	r1, [pc, #480]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80069da:	4313      	orrs	r3, r2
 80069dc:	650b      	str	r3, [r1, #80]	; 0x50
 80069de:	e001      	b.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069e0:	7dfb      	ldrb	r3, [r7, #23]
 80069e2:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d043      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069f4:	2b80      	cmp	r3, #128	; 0x80
 80069f6:	d01f      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80069f8:	2b80      	cmp	r3, #128	; 0x80
 80069fa:	d804      	bhi.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x142>
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00b      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006a00:	2b40      	cmp	r3, #64	; 0x40
 8006a02:	d010      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8006a04:	e021      	b.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a0a:	d021      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006a0c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006a10:	d020      	beq.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006a12:	2bc0      	cmp	r3, #192	; 0xc0
 8006a14:	d020      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8006a16:	e018      	b.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a18:	4b68      	ldr	r3, [pc, #416]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1c:	4a67      	ldr	r2, [pc, #412]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006a1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8006a24:	e019      	b.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x196>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	3304      	adds	r3, #4
 8006a2a:	2100      	movs	r1, #0
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f001 fc1d 	bl	800826c <RCCEx_PLL2_Config>
 8006a32:	4603      	mov	r3, r0
 8006a34:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8006a36:	e010      	b.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x196>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	3324      	adds	r3, #36	; 0x24
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f001 fcc6 	bl	80083d0 <RCCEx_PLL3_Config>
 8006a44:	4603      	mov	r3, r0
 8006a46:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8006a48:	e007      	b.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x196>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	75fb      	strb	r3, [r7, #23]
      break;
 8006a4e:	e004      	b.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 8006a50:	bf00      	nop
 8006a52:	e002      	b.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 8006a54:	bf00      	nop
 8006a56:	e000      	b.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 8006a58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a5a:	7dfb      	ldrb	r3, [r7, #23]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d109      	bne.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8006a60:	4b56      	ldr	r3, [pc, #344]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a64:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a6c:	4953      	ldr	r1, [pc, #332]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	650b      	str	r3, [r1, #80]	; 0x50
 8006a72:	e001      	b.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a74:	7dfb      	ldrb	r3, [r7, #23]
 8006a76:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d047      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a8c:	d022      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8006a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a92:	d805      	bhi.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00d      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8006a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a9c:	d011      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8006a9e:	e022      	b.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006aa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006aa4:	d022      	beq.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x228>
 8006aa6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006aaa:	d021      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8006aac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006ab0:	d020      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006ab2:	e018      	b.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x222>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ab4:	4b41      	ldr	r3, [pc, #260]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab8:	4a40      	ldr	r2, [pc, #256]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006aba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006abe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006ac0:	e019      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x232>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	3304      	adds	r3, #4
 8006ac6:	2100      	movs	r1, #0
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f001 fbcf 	bl	800826c <RCCEx_PLL2_Config>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006ad2:	e010      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x232>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	3324      	adds	r3, #36	; 0x24
 8006ad8:	2100      	movs	r1, #0
 8006ada:	4618      	mov	r0, r3
 8006adc:	f001 fc78 	bl	80083d0 <RCCEx_PLL3_Config>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006ae4:	e007      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x232>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	75fb      	strb	r3, [r7, #23]
      break;
 8006aea:	e004      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 8006aec:	bf00      	nop
 8006aee:	e002      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 8006af0:	bf00      	nop
 8006af2:	e000      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 8006af4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006af6:	7dfb      	ldrb	r3, [r7, #23]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d109      	bne.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8006afc:	4b2f      	ldr	r3, [pc, #188]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b00:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b08:	492c      	ldr	r1, [pc, #176]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	650b      	str	r3, [r1, #80]	; 0x50
 8006b0e:	e001      	b.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x250>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b10:	7dfb      	ldrb	r3, [r7, #23]
 8006b12:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d032      	beq.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b24:	2b10      	cmp	r3, #16
 8006b26:	d009      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8006b28:	2b10      	cmp	r3, #16
 8006b2a:	d802      	bhi.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d018      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x29e>
 8006b30:	e014      	b.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006b32:	2b20      	cmp	r3, #32
 8006b34:	d009      	beq.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006b36:	2b30      	cmp	r3, #48	; 0x30
 8006b38:	d015      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 8006b3a:	e00f      	b.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x298>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b3c:	4b1f      	ldr	r3, [pc, #124]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b40:	4a1e      	ldr	r2, [pc, #120]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006b42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006b48:	e00e      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x2a4>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	3304      	adds	r3, #4
 8006b4e:	2102      	movs	r1, #2
 8006b50:	4618      	mov	r0, r3
 8006b52:	f001 fb8b 	bl	800826c <RCCEx_PLL2_Config>
 8006b56:	4603      	mov	r3, r0
 8006b58:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006b5a:	e005      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b60:	e002      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      break;
 8006b62:	bf00      	nop
 8006b64:	e000      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      break;
 8006b66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b68:	7dfb      	ldrb	r3, [r7, #23]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d109      	bne.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006b6e:	4b13      	ldr	r3, [pc, #76]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b72:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b7a:	4910      	ldr	r1, [pc, #64]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006b80:	e001      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b82:	7dfb      	ldrb	r3, [r7, #23]
 8006b84:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d044      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b9a:	d021      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8006b9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ba0:	d805      	bhi.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x2ea>
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00c      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006baa:	d010      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8006bac:	e021      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006bae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006bb2:	d021      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x334>
 8006bb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bb8:	d020      	beq.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x338>
 8006bba:	e01a      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006bbc:	58024400 	.word	0x58024400
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bc0:	4ba6      	ldr	r3, [pc, #664]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc4:	4aa5      	ldr	r2, [pc, #660]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006bcc:	e017      	b.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x33a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	3304      	adds	r3, #4
 8006bd2:	2100      	movs	r1, #0
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f001 fb49 	bl	800826c <RCCEx_PLL2_Config>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006bde:	e00e      	b.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x33a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	3324      	adds	r3, #36	; 0x24
 8006be4:	2100      	movs	r1, #0
 8006be6:	4618      	mov	r0, r3
 8006be8:	f001 fbf2 	bl	80083d0 <RCCEx_PLL3_Config>
 8006bec:	4603      	mov	r3, r0
 8006bee:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006bf0:	e005      	b.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x33a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	75fb      	strb	r3, [r7, #23]
      break;
 8006bf6:	e002      	b.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x33a>
      break;
 8006bf8:	bf00      	nop
 8006bfa:	e000      	b.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x33a>
      break;
 8006bfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bfe:	7dfb      	ldrb	r3, [r7, #23]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d109      	bne.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x354>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006c04:	4b95      	ldr	r3, [pc, #596]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c08:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c10:	4992      	ldr	r1, [pc, #584]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006c12:	4313      	orrs	r3, r2
 8006c14:	650b      	str	r3, [r1, #80]	; 0x50
 8006c16:	e001      	b.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x358>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c18:	7dfb      	ldrb	r3, [r7, #23]
 8006c1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d042      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x3ea>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c30:	d01b      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 8006c32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c36:	d805      	bhi.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x380>
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d022      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x3be>
 8006c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c40:	d00a      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x394>
 8006c42:	e01b      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8006c44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c48:	d01d      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8006c4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c4e:	d01c      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8006c50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c54:	d01b      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8006c56:	e011      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	2101      	movs	r1, #1
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f001 fb04 	bl	800826c <RCCEx_PLL2_Config>
 8006c64:	4603      	mov	r3, r0
 8006c66:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006c68:	e012      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	3324      	adds	r3, #36	; 0x24
 8006c6e:	2101      	movs	r1, #1
 8006c70:	4618      	mov	r0, r3
 8006c72:	f001 fbad 	bl	80083d0 <RCCEx_PLL3_Config>
 8006c76:	4603      	mov	r3, r0
 8006c78:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006c7a:	e009      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	75fb      	strb	r3, [r7, #23]
      break;
 8006c80:	e006      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006c82:	bf00      	nop
 8006c84:	e004      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006c86:	bf00      	nop
 8006c88:	e002      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006c8a:	bf00      	nop
 8006c8c:	e000      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006c8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c90:	7dfb      	ldrb	r3, [r7, #23]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d109      	bne.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006c96:	4b71      	ldr	r3, [pc, #452]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c9a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ca2:	496e      	ldr	r1, [pc, #440]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	650b      	str	r3, [r1, #80]	; 0x50
 8006ca8:	e001      	b.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006caa:	7dfb      	ldrb	r3, [r7, #23]
 8006cac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d049      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006cc0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006cc4:	d02a      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x458>
 8006cc6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006cca:	d808      	bhi.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006ccc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cd0:	d00f      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006cd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cd6:	d015      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d021      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8006cdc:	e01b      	b.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8006cde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ce2:	d01f      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8006ce4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006ce8:	d01e      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8006cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cee:	d01d      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x468>
 8006cf0:	e011      	b.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x452>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	3304      	adds	r3, #4
 8006cf6:	2101      	movs	r1, #1
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f001 fab7 	bl	800826c <RCCEx_PLL2_Config>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006d02:	e014      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	3324      	adds	r3, #36	; 0x24
 8006d08:	2101      	movs	r1, #1
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f001 fb60 	bl	80083d0 <RCCEx_PLL3_Config>
 8006d10:	4603      	mov	r3, r0
 8006d12:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006d14:	e00b      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x46a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	75fb      	strb	r3, [r7, #23]
      break;
 8006d1a:	e008      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006d1c:	bf00      	nop
 8006d1e:	e006      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006d20:	bf00      	nop
 8006d22:	e004      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006d24:	bf00      	nop
 8006d26:	e002      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006d28:	bf00      	nop
 8006d2a:	e000      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006d2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d2e:	7dfb      	ldrb	r3, [r7, #23]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10a      	bne.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x486>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006d34:	4b49      	ldr	r3, [pc, #292]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d38:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006d42:	4946      	ldr	r1, [pc, #280]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006d44:	4313      	orrs	r3, r2
 8006d46:	658b      	str	r3, [r1, #88]	; 0x58
 8006d48:	e001      	b.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d4a:	7dfb      	ldrb	r3, [r7, #23]
 8006d4c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d02d      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d62:	d005      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8006d64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d68:	d009      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d013      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006d6e:	e00f      	b.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d70:	4b3a      	ldr	r3, [pc, #232]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d74:	4a39      	ldr	r2, [pc, #228]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006d7c:	e00c      	b.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x4d4>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	3304      	adds	r3, #4
 8006d82:	2101      	movs	r1, #1
 8006d84:	4618      	mov	r0, r3
 8006d86:	f001 fa71 	bl	800826c <RCCEx_PLL2_Config>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006d8e:	e003      	b.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	75fb      	strb	r3, [r7, #23]
      break;
 8006d94:	e000      	b.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      break;
 8006d96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d98:	7dfb      	ldrb	r3, [r7, #23]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d109      	bne.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006d9e:	4b2f      	ldr	r3, [pc, #188]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006da0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006da2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006daa:	492c      	ldr	r1, [pc, #176]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006dac:	4313      	orrs	r3, r2
 8006dae:	650b      	str	r3, [r1, #80]	; 0x50
 8006db0:	e001      	b.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006db2:	7dfb      	ldrb	r3, [r7, #23]
 8006db4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d031      	beq.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x562>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc6:	2b03      	cmp	r3, #3
 8006dc8:	d81a      	bhi.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x53c>
 8006dca:	a201      	add	r2, pc, #4	; (adr r2, 8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd0:	08006e07 	.word	0x08006e07
 8006dd4:	08006de1 	.word	0x08006de1
 8006dd8:	08006def 	.word	0x08006def
 8006ddc:	08006e07 	.word	0x08006e07
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006de0:	4b1e      	ldr	r3, [pc, #120]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de4:	4a1d      	ldr	r2, [pc, #116]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006dec:	e00c      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x544>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	3304      	adds	r3, #4
 8006df2:	2102      	movs	r1, #2
 8006df4:	4618      	mov	r0, r3
 8006df6:	f001 fa39 	bl	800826c <RCCEx_PLL2_Config>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006dfe:	e003      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x544>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	75fb      	strb	r3, [r7, #23]
      break;
 8006e04:	e000      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x544>
      break;
 8006e06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e08:	7dfb      	ldrb	r3, [r7, #23]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d109      	bne.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006e0e:	4b13      	ldr	r3, [pc, #76]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e12:	f023 0203 	bic.w	r2, r3, #3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e1a:	4910      	ldr	r1, [pc, #64]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006e20:	e001      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x562>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e22:	7dfb      	ldrb	r3, [r7, #23]
 8006e24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f000 808a 	beq.w	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x684>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e34:	4b0a      	ldr	r3, [pc, #40]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a09      	ldr	r2, [pc, #36]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8006e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e3e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e40:	f7fa fed0 	bl	8001be4 <HAL_GetTick>
 8006e44:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e46:	e00d      	b.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e48:	f7fa fecc 	bl	8001be4 <HAL_GetTick>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	2b64      	cmp	r3, #100	; 0x64
 8006e54:	d906      	bls.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        ret = HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	75fb      	strb	r3, [r7, #23]
        break;
 8006e5a:	e009      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8006e5c:	58024400 	.word	0x58024400
 8006e60:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e64:	4bba      	ldr	r3, [pc, #744]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0x88c>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d0eb      	beq.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x584>
      }
    }

    if(ret == HAL_OK)
 8006e70:	7dfb      	ldrb	r3, [r7, #23]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d166      	bne.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006e76:	4bb7      	ldr	r3, [pc, #732]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006e78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e80:	4053      	eors	r3, r2
 8006e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d013      	beq.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e8a:	4bb2      	ldr	r3, [pc, #712]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e92:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e94:	4baf      	ldr	r3, [pc, #700]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e98:	4aae      	ldr	r2, [pc, #696]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006e9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e9e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ea0:	4bac      	ldr	r3, [pc, #688]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea4:	4aab      	ldr	r2, [pc, #684]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006eaa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006eac:	4aa9      	ldr	r2, [pc, #676]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006eb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ebc:	d115      	bne.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x626>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ebe:	f7fa fe91 	bl	8001be4 <HAL_GetTick>
 8006ec2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ec4:	e00b      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x61a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ec6:	f7fa fe8d 	bl	8001be4 <HAL_GetTick>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d902      	bls.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x61a>
          {
            ret = HAL_TIMEOUT;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	75fb      	strb	r3, [r7, #23]
            break;
 8006edc:	e005      	b.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x626>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ede:	4b9d      	ldr	r3, [pc, #628]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ee2:	f003 0302 	and.w	r3, r3, #2
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d0ed      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x602>
          }
        }
      }

      if(ret == HAL_OK)
 8006eea:	7dfb      	ldrb	r3, [r7, #23]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d126      	bne.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006efa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006efe:	d10d      	bne.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x658>
 8006f00:	4b94      	ldr	r3, [pc, #592]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f0e:	0919      	lsrs	r1, r3, #4
 8006f10:	4b91      	ldr	r3, [pc, #580]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8006f12:	400b      	ands	r3, r1
 8006f14:	498f      	ldr	r1, [pc, #572]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	610b      	str	r3, [r1, #16]
 8006f1a:	e005      	b.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006f1c:	4b8d      	ldr	r3, [pc, #564]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	4a8c      	ldr	r2, [pc, #560]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f22:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006f26:	6113      	str	r3, [r2, #16]
 8006f28:	4b8a      	ldr	r3, [pc, #552]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f36:	4987      	ldr	r1, [pc, #540]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	670b      	str	r3, [r1, #112]	; 0x70
 8006f3c:	e004      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x684>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006f3e:	7dfb      	ldrb	r3, [r7, #23]
 8006f40:	75bb      	strb	r3, [r7, #22]
 8006f42:	e001      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x684>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f44:	7dfb      	ldrb	r3, [r7, #23]
 8006f46:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0301 	and.w	r3, r3, #1
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d07f      	beq.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x790>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f5a:	2b28      	cmp	r3, #40	; 0x28
 8006f5c:	d866      	bhi.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x768>
 8006f5e:	a201      	add	r2, pc, #4	; (adr r2, 8006f64 <HAL_RCCEx_PeriphCLKConfig+0x6a0>)
 8006f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f64:	08007033 	.word	0x08007033
 8006f68:	0800702d 	.word	0x0800702d
 8006f6c:	0800702d 	.word	0x0800702d
 8006f70:	0800702d 	.word	0x0800702d
 8006f74:	0800702d 	.word	0x0800702d
 8006f78:	0800702d 	.word	0x0800702d
 8006f7c:	0800702d 	.word	0x0800702d
 8006f80:	0800702d 	.word	0x0800702d
 8006f84:	08007009 	.word	0x08007009
 8006f88:	0800702d 	.word	0x0800702d
 8006f8c:	0800702d 	.word	0x0800702d
 8006f90:	0800702d 	.word	0x0800702d
 8006f94:	0800702d 	.word	0x0800702d
 8006f98:	0800702d 	.word	0x0800702d
 8006f9c:	0800702d 	.word	0x0800702d
 8006fa0:	0800702d 	.word	0x0800702d
 8006fa4:	0800701b 	.word	0x0800701b
 8006fa8:	0800702d 	.word	0x0800702d
 8006fac:	0800702d 	.word	0x0800702d
 8006fb0:	0800702d 	.word	0x0800702d
 8006fb4:	0800702d 	.word	0x0800702d
 8006fb8:	0800702d 	.word	0x0800702d
 8006fbc:	0800702d 	.word	0x0800702d
 8006fc0:	0800702d 	.word	0x0800702d
 8006fc4:	08007033 	.word	0x08007033
 8006fc8:	0800702d 	.word	0x0800702d
 8006fcc:	0800702d 	.word	0x0800702d
 8006fd0:	0800702d 	.word	0x0800702d
 8006fd4:	0800702d 	.word	0x0800702d
 8006fd8:	0800702d 	.word	0x0800702d
 8006fdc:	0800702d 	.word	0x0800702d
 8006fe0:	0800702d 	.word	0x0800702d
 8006fe4:	08007033 	.word	0x08007033
 8006fe8:	0800702d 	.word	0x0800702d
 8006fec:	0800702d 	.word	0x0800702d
 8006ff0:	0800702d 	.word	0x0800702d
 8006ff4:	0800702d 	.word	0x0800702d
 8006ff8:	0800702d 	.word	0x0800702d
 8006ffc:	0800702d 	.word	0x0800702d
 8007000:	0800702d 	.word	0x0800702d
 8007004:	08007033 	.word	0x08007033
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	3304      	adds	r3, #4
 800700c:	2101      	movs	r1, #1
 800700e:	4618      	mov	r0, r3
 8007010:	f001 f92c 	bl	800826c <RCCEx_PLL2_Config>
 8007014:	4603      	mov	r3, r0
 8007016:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007018:	e00c      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x770>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	3324      	adds	r3, #36	; 0x24
 800701e:	2101      	movs	r1, #1
 8007020:	4618      	mov	r0, r3
 8007022:	f001 f9d5 	bl	80083d0 <RCCEx_PLL3_Config>
 8007026:	4603      	mov	r3, r0
 8007028:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800702a:	e003      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x770>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	75fb      	strb	r3, [r7, #23]
      break;
 8007030:	e000      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x770>
      break;
 8007032:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007034:	7dfb      	ldrb	r3, [r7, #23]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10a      	bne.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x78c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800703a:	4b46      	ldr	r3, [pc, #280]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800703c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800703e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007048:	4942      	ldr	r1, [pc, #264]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800704a:	4313      	orrs	r3, r2
 800704c:	654b      	str	r3, [r1, #84]	; 0x54
 800704e:	e001      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x790>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007050:	7dfb      	ldrb	r3, [r7, #23]
 8007052:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0302 	and.w	r3, r3, #2
 800705c:	2b00      	cmp	r3, #0
 800705e:	d038      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007064:	2b05      	cmp	r3, #5
 8007066:	d821      	bhi.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x7e8>
 8007068:	a201      	add	r2, pc, #4	; (adr r2, 8007070 <HAL_RCCEx_PeriphCLKConfig+0x7ac>)
 800706a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800706e:	bf00      	nop
 8007070:	080070b3 	.word	0x080070b3
 8007074:	08007089 	.word	0x08007089
 8007078:	0800709b 	.word	0x0800709b
 800707c:	080070b3 	.word	0x080070b3
 8007080:	080070b3 	.word	0x080070b3
 8007084:	080070b3 	.word	0x080070b3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	3304      	adds	r3, #4
 800708c:	2101      	movs	r1, #1
 800708e:	4618      	mov	r0, r3
 8007090:	f001 f8ec 	bl	800826c <RCCEx_PLL2_Config>
 8007094:	4603      	mov	r3, r0
 8007096:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007098:	e00c      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	3324      	adds	r3, #36	; 0x24
 800709e:	2101      	movs	r1, #1
 80070a0:	4618      	mov	r0, r3
 80070a2:	f001 f995 	bl	80083d0 <RCCEx_PLL3_Config>
 80070a6:	4603      	mov	r3, r0
 80070a8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80070aa:	e003      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	75fb      	strb	r3, [r7, #23]
      break;
 80070b0:	e000      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      break;
 80070b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070b4:	7dfb      	ldrb	r3, [r7, #23]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d109      	bne.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x80a>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80070ba:	4b26      	ldr	r3, [pc, #152]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80070bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070be:	f023 0207 	bic.w	r2, r3, #7
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070c6:	4923      	ldr	r1, [pc, #140]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80070c8:	4313      	orrs	r3, r2
 80070ca:	654b      	str	r3, [r1, #84]	; 0x54
 80070cc:	e001      	b.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070ce:	7dfb      	ldrb	r3, [r7, #23]
 80070d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0304 	and.w	r3, r3, #4
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d040      	beq.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x89c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80070e4:	2b05      	cmp	r3, #5
 80070e6:	d821      	bhi.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x868>
 80070e8:	a201      	add	r2, pc, #4	; (adr r2, 80070f0 <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 80070ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ee:	bf00      	nop
 80070f0:	08007133 	.word	0x08007133
 80070f4:	08007109 	.word	0x08007109
 80070f8:	0800711b 	.word	0x0800711b
 80070fc:	08007133 	.word	0x08007133
 8007100:	08007133 	.word	0x08007133
 8007104:	08007133 	.word	0x08007133
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	3304      	adds	r3, #4
 800710c:	2101      	movs	r1, #1
 800710e:	4618      	mov	r0, r3
 8007110:	f001 f8ac 	bl	800826c <RCCEx_PLL2_Config>
 8007114:	4603      	mov	r3, r0
 8007116:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007118:	e00c      	b.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x870>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	3324      	adds	r3, #36	; 0x24
 800711e:	2101      	movs	r1, #1
 8007120:	4618      	mov	r0, r3
 8007122:	f001 f955 	bl	80083d0 <RCCEx_PLL3_Config>
 8007126:	4603      	mov	r3, r0
 8007128:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800712a:	e003      	b.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x870>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	75fb      	strb	r3, [r7, #23]
      break;
 8007130:	e000      	b.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x870>
      break;
 8007132:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007134:	7dfb      	ldrb	r3, [r7, #23]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d110      	bne.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x898>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800713a:	4b06      	ldr	r3, [pc, #24]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800713c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800713e:	f023 0207 	bic.w	r2, r3, #7
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007148:	4902      	ldr	r1, [pc, #8]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800714a:	4313      	orrs	r3, r2
 800714c:	658b      	str	r3, [r1, #88]	; 0x58
 800714e:	e007      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 8007150:	58024800 	.word	0x58024800
 8007154:	58024400 	.word	0x58024400
 8007158:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800715c:	7dfb      	ldrb	r3, [r7, #23]
 800715e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0320 	and.w	r3, r3, #32
 8007168:	2b00      	cmp	r3, #0
 800716a:	d044      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007172:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007176:	d01b      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8007178:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800717c:	d805      	bhi.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 800717e:	2b00      	cmp	r3, #0
 8007180:	d022      	beq.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x904>
 8007182:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007186:	d00a      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x8da>
 8007188:	e01b      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800718a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800718e:	d01d      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x908>
 8007190:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007194:	d01c      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x90c>
 8007196:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800719a:	d01b      	beq.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x910>
 800719c:	e011      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	3304      	adds	r3, #4
 80071a2:	2100      	movs	r1, #0
 80071a4:	4618      	mov	r0, r3
 80071a6:	f001 f861 	bl	800826c <RCCEx_PLL2_Config>
 80071aa:	4603      	mov	r3, r0
 80071ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80071ae:	e012      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x912>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	3324      	adds	r3, #36	; 0x24
 80071b4:	2102      	movs	r1, #2
 80071b6:	4618      	mov	r0, r3
 80071b8:	f001 f90a 	bl	80083d0 <RCCEx_PLL3_Config>
 80071bc:	4603      	mov	r3, r0
 80071be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80071c0:	e009      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	75fb      	strb	r3, [r7, #23]
      break;
 80071c6:	e006      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 80071c8:	bf00      	nop
 80071ca:	e004      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 80071cc:	bf00      	nop
 80071ce:	e002      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 80071d0:	bf00      	nop
 80071d2:	e000      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 80071d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071d6:	7dfb      	ldrb	r3, [r7, #23]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10a      	bne.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80071dc:	4bb3      	ldr	r3, [pc, #716]	; (80074ac <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80071de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071e0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071ea:	49b0      	ldr	r1, [pc, #704]	; (80074ac <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80071ec:	4313      	orrs	r3, r2
 80071ee:	654b      	str	r3, [r1, #84]	; 0x54
 80071f0:	e001      	b.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x932>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071f2:	7dfb      	ldrb	r3, [r7, #23]
 80071f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d044      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x9c8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007208:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800720c:	d01b      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x982>
 800720e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007212:	d805      	bhi.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007214:	2b00      	cmp	r3, #0
 8007216:	d022      	beq.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x99a>
 8007218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800721c:	d00a      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x970>
 800721e:	e01b      	b.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x994>
 8007220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007224:	d01d      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x99e>
 8007226:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800722a:	d01c      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 800722c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007230:	d01b      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8007232:	e011      	b.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x994>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	3304      	adds	r3, #4
 8007238:	2100      	movs	r1, #0
 800723a:	4618      	mov	r0, r3
 800723c:	f001 f816 	bl	800826c <RCCEx_PLL2_Config>
 8007240:	4603      	mov	r3, r0
 8007242:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007244:	e012      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x9a8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	3324      	adds	r3, #36	; 0x24
 800724a:	2102      	movs	r1, #2
 800724c:	4618      	mov	r0, r3
 800724e:	f001 f8bf 	bl	80083d0 <RCCEx_PLL3_Config>
 8007252:	4603      	mov	r3, r0
 8007254:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007256:	e009      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	75fb      	strb	r3, [r7, #23]
      break;
 800725c:	e006      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 800725e:	bf00      	nop
 8007260:	e004      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 8007262:	bf00      	nop
 8007264:	e002      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 8007266:	bf00      	nop
 8007268:	e000      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 800726a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800726c:	7dfb      	ldrb	r3, [r7, #23]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10a      	bne.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x9c4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007272:	4b8e      	ldr	r3, [pc, #568]	; (80074ac <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007276:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007280:	498a      	ldr	r1, [pc, #552]	; (80074ac <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007282:	4313      	orrs	r3, r2
 8007284:	658b      	str	r3, [r1, #88]	; 0x58
 8007286:	e001      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x9c8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007288:	7dfb      	ldrb	r3, [r7, #23]
 800728a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007294:	2b00      	cmp	r3, #0
 8007296:	d044      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800729e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072a2:	d01b      	beq.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0xa18>
 80072a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072a8:	d805      	bhi.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d022      	beq.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80072ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072b2:	d00a      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0xa06>
 80072b4:	e01b      	b.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 80072b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072ba:	d01d      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80072bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80072c0:	d01c      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0xa38>
 80072c2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80072c6:	d01b      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 80072c8:	e011      	b.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	3304      	adds	r3, #4
 80072ce:	2100      	movs	r1, #0
 80072d0:	4618      	mov	r0, r3
 80072d2:	f000 ffcb 	bl	800826c <RCCEx_PLL2_Config>
 80072d6:	4603      	mov	r3, r0
 80072d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80072da:	e012      	b.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	3324      	adds	r3, #36	; 0x24
 80072e0:	2102      	movs	r1, #2
 80072e2:	4618      	mov	r0, r3
 80072e4:	f001 f874 	bl	80083d0 <RCCEx_PLL3_Config>
 80072e8:	4603      	mov	r3, r0
 80072ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80072ec:	e009      	b.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	75fb      	strb	r3, [r7, #23]
      break;
 80072f2:	e006      	b.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 80072f4:	bf00      	nop
 80072f6:	e004      	b.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 80072f8:	bf00      	nop
 80072fa:	e002      	b.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 80072fc:	bf00      	nop
 80072fe:	e000      	b.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 8007300:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007302:	7dfb      	ldrb	r3, [r7, #23]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d10a      	bne.n	800731e <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007308:	4b68      	ldr	r3, [pc, #416]	; (80074ac <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800730a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800730c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007316:	4965      	ldr	r1, [pc, #404]	; (80074ac <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007318:	4313      	orrs	r3, r2
 800731a:	658b      	str	r3, [r1, #88]	; 0x58
 800731c:	e001      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800731e:	7dfb      	ldrb	r3, [r7, #23]
 8007320:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f003 0308 	and.w	r3, r3, #8
 800732a:	2b00      	cmp	r3, #0
 800732c:	d01a      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007338:	d10a      	bne.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	3324      	adds	r3, #36	; 0x24
 800733e:	2102      	movs	r1, #2
 8007340:	4618      	mov	r0, r3
 8007342:	f001 f845 	bl	80083d0 <RCCEx_PLL3_Config>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d001      	beq.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
        {
          status = HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007350:	4b56      	ldr	r3, [pc, #344]	; (80074ac <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007354:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800735e:	4953      	ldr	r1, [pc, #332]	; (80074ac <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007360:	4313      	orrs	r3, r2
 8007362:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 0310 	and.w	r3, r3, #16
 800736c:	2b00      	cmp	r3, #0
 800736e:	d01a      	beq.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800737a:	d10a      	bne.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	3324      	adds	r3, #36	; 0x24
 8007380:	2102      	movs	r1, #2
 8007382:	4618      	mov	r0, r3
 8007384:	f001 f824 	bl	80083d0 <RCCEx_PLL3_Config>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d001      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0xace>
      {
        status = HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007392:	4b46      	ldr	r3, [pc, #280]	; (80074ac <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007396:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80073a0:	4942      	ldr	r1, [pc, #264]	; (80074ac <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80073a2:	4313      	orrs	r3, r2
 80073a4:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d030      	beq.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80073b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073bc:	d00d      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0xb16>
 80073be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073c2:	d016      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d111      	bne.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0xb28>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	3304      	adds	r3, #4
 80073cc:	2100      	movs	r1, #0
 80073ce:	4618      	mov	r0, r3
 80073d0:	f000 ff4c 	bl	800826c <RCCEx_PLL2_Config>
 80073d4:	4603      	mov	r3, r0
 80073d6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80073d8:	e00c      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	3324      	adds	r3, #36	; 0x24
 80073de:	2102      	movs	r1, #2
 80073e0:	4618      	mov	r0, r3
 80073e2:	f000 fff5 	bl	80083d0 <RCCEx_PLL3_Config>
 80073e6:	4603      	mov	r3, r0
 80073e8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80073ea:	e003      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	75fb      	strb	r3, [r7, #23]
      break;
 80073f0:	e000      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80073f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073f4:	7dfb      	ldrb	r3, [r7, #23]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d10a      	bne.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80073fa:	4b2c      	ldr	r3, [pc, #176]	; (80074ac <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80073fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007408:	4928      	ldr	r1, [pc, #160]	; (80074ac <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800740a:	4313      	orrs	r3, r2
 800740c:	658b      	str	r3, [r1, #88]	; 0x58
 800740e:	e001      	b.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007410:	7dfb      	ldrb	r3, [r7, #23]
 8007412:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800741c:	2b00      	cmp	r3, #0
 800741e:	d02f      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007426:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800742a:	d00c      	beq.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800742c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007430:	d015      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0xb9a>
 8007432:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007436:	d10f      	bne.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0xb94>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007438:	4b1c      	ldr	r3, [pc, #112]	; (80074ac <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800743a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743c:	4a1b      	ldr	r2, [pc, #108]	; (80074ac <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800743e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007442:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007444:	e00c      	b.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0xb9c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	3324      	adds	r3, #36	; 0x24
 800744a:	2101      	movs	r1, #1
 800744c:	4618      	mov	r0, r3
 800744e:	f000 ffbf 	bl	80083d0 <RCCEx_PLL3_Config>
 8007452:	4603      	mov	r3, r0
 8007454:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007456:	e003      	b.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	75fb      	strb	r3, [r7, #23]
      break;
 800745c:	e000      	b.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      break;
 800745e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007460:	7dfb      	ldrb	r3, [r7, #23]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d10a      	bne.n	800747c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007466:	4b11      	ldr	r3, [pc, #68]	; (80074ac <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800746a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007474:	490d      	ldr	r1, [pc, #52]	; (80074ac <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007476:	4313      	orrs	r3, r2
 8007478:	654b      	str	r3, [r1, #84]	; 0x54
 800747a:	e001      	b.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800747c:	7dfb      	ldrb	r3, [r7, #23]
 800747e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007488:	2b00      	cmp	r3, #0
 800748a:	d02c      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007490:	2b00      	cmp	r3, #0
 8007492:	d003      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8007494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007498:	d00a      	beq.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 800749a:	e012      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800749c:	4b03      	ldr	r3, [pc, #12]	; (80074ac <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800749e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a0:	4a02      	ldr	r2, [pc, #8]	; (80074ac <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80074a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80074a8:	e00e      	b.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0xc04>
 80074aa:	bf00      	nop
 80074ac:	58024400 	.word	0x58024400

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	3304      	adds	r3, #4
 80074b4:	2102      	movs	r1, #2
 80074b6:	4618      	mov	r0, r3
 80074b8:	f000 fed8 	bl	800826c <RCCEx_PLL2_Config>
 80074bc:	4603      	mov	r3, r0
 80074be:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80074c0:	e002      	b.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0xc04>

    default:
      ret = HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	75fb      	strb	r3, [r7, #23]
      break;
 80074c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074c8:	7dfb      	ldrb	r3, [r7, #23]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d109      	bne.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80074ce:	4b56      	ldr	r3, [pc, #344]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80074d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074da:	4953      	ldr	r1, [pc, #332]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80074dc:	4313      	orrs	r3, r2
 80074de:	64cb      	str	r3, [r1, #76]	; 0x4c
 80074e0:	e001      	b.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074e2:	7dfb      	ldrb	r3, [r7, #23]
 80074e4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00a      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0xc44>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	3324      	adds	r3, #36	; 0x24
 80074f6:	2102      	movs	r1, #2
 80074f8:	4618      	mov	r0, r3
 80074fa:	f000 ff69 	bl	80083d0 <RCCEx_PLL3_Config>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d001      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0xc44>
    {
      status=HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007510:	2b00      	cmp	r3, #0
 8007512:	d031      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800751a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800751e:	d00c      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8007520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007524:	d802      	bhi.n	800752c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007526:	2b00      	cmp	r3, #0
 8007528:	d011      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0xc8a>
 800752a:	e00d      	b.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800752c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007530:	d00f      	beq.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0xc8e>
 8007532:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007536:	d00e      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007538:	e006      	b.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xc84>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800753a:	4b3b      	ldr	r3, [pc, #236]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800753c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753e:	4a3a      	ldr	r2, [pc, #232]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007544:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007546:	e007      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	75fb      	strb	r3, [r7, #23]
      break;
 800754c:	e004      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 800754e:	bf00      	nop
 8007550:	e002      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 8007552:	bf00      	nop
 8007554:	e000      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 8007556:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007558:	7dfb      	ldrb	r3, [r7, #23]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d10a      	bne.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800755e:	4b32      	ldr	r3, [pc, #200]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007562:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800756c:	492e      	ldr	r1, [pc, #184]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800756e:	4313      	orrs	r3, r2
 8007570:	654b      	str	r3, [r1, #84]	; 0x54
 8007572:	e001      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007574:	7dfb      	ldrb	r3, [r7, #23]
 8007576:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007580:	2b00      	cmp	r3, #0
 8007582:	d008      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007584:	4b28      	ldr	r3, [pc, #160]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007588:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007590:	4925      	ldr	r1, [pc, #148]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007592:	4313      	orrs	r3, r2
 8007594:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d008      	beq.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80075a2:	4b21      	ldr	r3, [pc, #132]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80075a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075a6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075ae:	491e      	ldr	r1, [pc, #120]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80075b0:	4313      	orrs	r3, r2
 80075b2:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d008      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80075c0:	4b19      	ldr	r3, [pc, #100]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80075c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075c4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075cc:	4916      	ldr	r1, [pc, #88]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80075ce:	4313      	orrs	r3, r2
 80075d0:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00d      	beq.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0xd36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80075de:	4b12      	ldr	r3, [pc, #72]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	4a11      	ldr	r2, [pc, #68]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80075e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80075e8:	6113      	str	r3, [r2, #16]
 80075ea:	4b0f      	ldr	r3, [pc, #60]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80075ec:	691a      	ldr	r2, [r3, #16]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80075f4:	490c      	ldr	r1, [pc, #48]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80075f6:	4313      	orrs	r3, r2
 80075f8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	da08      	bge.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0xd50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007602:	4b09      	ldr	r3, [pc, #36]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007606:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800760e:	4906      	ldr	r1, [pc, #24]	; (8007628 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007610:	4313      	orrs	r3, r2
 8007612:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007614:	7dbb      	ldrb	r3, [r7, #22]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d101      	bne.n	800761e <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    return HAL_OK;
 800761a:	2300      	movs	r3, #0
 800761c:	e000      	b.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
  }
  return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
}
 8007620:	4618      	mov	r0, r3
 8007622:	3718      	adds	r7, #24
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	58024400 	.word	0x58024400

0800762c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b090      	sub	sp, #64	; 0x40
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800763a:	d150      	bne.n	80076de <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800763c:	4ba1      	ldr	r3, [pc, #644]	; (80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800763e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007640:	f003 0307 	and.w	r3, r3, #7
 8007644:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007648:	2b04      	cmp	r3, #4
 800764a:	d844      	bhi.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800764c:	a201      	add	r2, pc, #4	; (adr r2, 8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800764e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007652:	bf00      	nop
 8007654:	08007669 	.word	0x08007669
 8007658:	08007679 	.word	0x08007679
 800765c:	08007689 	.word	0x08007689
 8007660:	080076d1 	.word	0x080076d1
 8007664:	08007699 	.word	0x08007699
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800766c:	4618      	mov	r0, r3
 800766e:	f000 fcb1 	bl	8007fd4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007674:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007676:	e1ef      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007678:	f107 0318 	add.w	r3, r7, #24
 800767c:	4618      	mov	r0, r3
 800767e:	f000 fa11 	bl	8007aa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007686:	e1e7      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007688:	f107 030c 	add.w	r3, r7, #12
 800768c:	4618      	mov	r0, r3
 800768e:	f000 fb55 	bl	8007d3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007696:	e1df      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007698:	4b8a      	ldr	r3, [pc, #552]	; (80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800769a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800769c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80076a0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80076a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d102      	bne.n	80076ae <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80076a8:	4b87      	ldr	r3, [pc, #540]	; (80078c8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80076aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80076ac:	e1d4      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80076ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076b4:	d102      	bne.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 80076b6:	4b85      	ldr	r3, [pc, #532]	; (80078cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80076b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076ba:	e1cd      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80076bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076c2:	d102      	bne.n	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 80076c4:	4b82      	ldr	r3, [pc, #520]	; (80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80076c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076c8:	e1c6      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 80076ca:	2300      	movs	r3, #0
 80076cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076ce:	e1c3      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80076d0:	4b80      	ldr	r3, [pc, #512]	; (80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80076d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076d4:	e1c0      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      default :
        {
          frequency = 0;
 80076d6:	2300      	movs	r3, #0
 80076d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076da:	bf00      	nop
 80076dc:	e1bc      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076e4:	d14f      	bne.n	8007786 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 80076e6:	4b77      	ldr	r3, [pc, #476]	; (80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80076e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076ea:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80076ee:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80076f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f2:	2b80      	cmp	r3, #128	; 0x80
 80076f4:	d01c      	beq.n	8007730 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80076f6:	2b80      	cmp	r3, #128	; 0x80
 80076f8:	d804      	bhi.n	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d008      	beq.n	8007710 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 80076fe:	2b40      	cmp	r3, #64	; 0x40
 8007700:	d00e      	beq.n	8007720 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007702:	e03c      	b.n	800777e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8007704:	2bc0      	cmp	r3, #192	; 0xc0
 8007706:	d037      	beq.n	8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800770c:	d018      	beq.n	8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800770e:	e036      	b.n	800777e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007714:	4618      	mov	r0, r3
 8007716:	f000 fc5d 	bl	8007fd4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800771a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800771e:	e19b      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007720:	f107 0318 	add.w	r3, r7, #24
 8007724:	4618      	mov	r0, r3
 8007726:	f000 f9bd 	bl	8007aa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800772e:	e193      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007730:	f107 030c 	add.w	r3, r7, #12
 8007734:	4618      	mov	r0, r3
 8007736:	f000 fb01 	bl	8007d3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800773e:	e18b      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007740:	4b60      	ldr	r3, [pc, #384]	; (80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007744:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007748:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800774a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800774c:	2b00      	cmp	r3, #0
 800774e:	d102      	bne.n	8007756 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007750:	4b5d      	ldr	r3, [pc, #372]	; (80078c8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007752:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007754:	e180      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007758:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800775c:	d102      	bne.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800775e:	4b5b      	ldr	r3, [pc, #364]	; (80078cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007760:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007762:	e179      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800776a:	d102      	bne.n	8007772 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800776c:	4b58      	ldr	r3, [pc, #352]	; (80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800776e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007770:	e172      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 8007772:	2300      	movs	r3, #0
 8007774:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007776:	e16f      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007778:	4b56      	ldr	r3, [pc, #344]	; (80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800777a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800777c:	e16c      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 800777e:	2300      	movs	r3, #0
 8007780:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007782:	bf00      	nop
 8007784:	e168      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800778c:	d153      	bne.n	8007836 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 800778e:	4b4d      	ldr	r3, [pc, #308]	; (80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007792:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8007796:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800779e:	d01f      	beq.n	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80077a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077a4:	d805      	bhi.n	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00a      	beq.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80077aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077ae:	d00f      	beq.n	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80077b0:	e03d      	b.n	800782e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 80077b2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80077b6:	d037      	beq.n	8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80077b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077bc:	d018      	beq.n	80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 80077be:	e036      	b.n	800782e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80077c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077c4:	4618      	mov	r0, r3
 80077c6:	f000 fc05 	bl	8007fd4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80077ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077ce:	e143      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077d0:	f107 0318 	add.w	r3, r7, #24
 80077d4:	4618      	mov	r0, r3
 80077d6:	f000 f965 	bl	8007aa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077de:	e13b      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077e0:	f107 030c 	add.w	r3, r7, #12
 80077e4:	4618      	mov	r0, r3
 80077e6:	f000 faa9 	bl	8007d3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077ee:	e133      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80077f0:	4b34      	ldr	r3, [pc, #208]	; (80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80077f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80077f8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80077fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d102      	bne.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007800:	4b31      	ldr	r3, [pc, #196]	; (80078c8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007802:	63fb      	str	r3, [r7, #60]	; 0x3c
          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }
          break;
 8007804:	e128      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007808:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800780c:	d102      	bne.n	8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800780e:	4b2f      	ldr	r3, [pc, #188]	; (80078cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007810:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007812:	e121      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007816:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800781a:	d102      	bne.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 800781c:	4b2c      	ldr	r3, [pc, #176]	; (80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800781e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007820:	e11a      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 8007822:	2300      	movs	r3, #0
 8007824:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007826:	e117      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007828:	4b2a      	ldr	r3, [pc, #168]	; (80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800782a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800782c:	e114      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 800782e:	2300      	movs	r3, #0
 8007830:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007832:	bf00      	nop
 8007834:	e110      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800783c:	d15d      	bne.n	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800783e:	4b21      	ldr	r3, [pc, #132]	; (80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007842:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007846:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800784a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800784e:	d01f      	beq.n	8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007850:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007854:	d805      	bhi.n	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007856:	2b00      	cmp	r3, #0
 8007858:	d00a      	beq.n	8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800785a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800785e:	d00f      	beq.n	8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8007860:	e047      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8007862:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007866:	d041      	beq.n	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8007868:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800786c:	d018      	beq.n	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800786e:	e040      	b.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007874:	4618      	mov	r0, r3
 8007876:	f000 fbad 	bl	8007fd4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800787a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800787e:	e0eb      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007880:	f107 0318 	add.w	r3, r7, #24
 8007884:	4618      	mov	r0, r3
 8007886:	f000 f90d 	bl	8007aa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800788e:	e0e3      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007890:	f107 030c 	add.w	r3, r7, #12
 8007894:	4618      	mov	r0, r3
 8007896:	f000 fa51 	bl	8007d3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800789e:	e0db      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80078a0:	4b08      	ldr	r3, [pc, #32]	; (80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80078a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80078a8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80078aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d102      	bne.n	80078b6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80078b0:	4b05      	ldr	r3, [pc, #20]	; (80078c8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80078b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80078b4:	e0d0      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80078b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078bc:	d10c      	bne.n	80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 80078be:	4b03      	ldr	r3, [pc, #12]	; (80078cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80078c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078c2:	e0c9      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
 80078c4:	58024400 	.word	0x58024400
 80078c8:	03d09000 	.word	0x03d09000
 80078cc:	003d0900 	.word	0x003d0900
 80078d0:	007a1200 	.word	0x007a1200
 80078d4:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80078d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078de:	d102      	bne.n	80078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 80078e0:	4b60      	ldr	r3, [pc, #384]	; (8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80078e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078e4:	e0b8      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 80078e6:	2300      	movs	r3, #0
 80078e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078ea:	e0b5      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80078ec:	4b5e      	ldr	r3, [pc, #376]	; (8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 80078ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078f0:	e0b2      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      default :
        {
          frequency = 0;
 80078f2:	2300      	movs	r3, #0
 80078f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078f6:	bf00      	nop
 80078f8:	e0ae      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007900:	d13d      	bne.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0x352>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007902:	4b5a      	ldr	r3, [pc, #360]	; (8007a6c <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8007904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007906:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800790a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800790c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007912:	d00c      	beq.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8007914:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007918:	d011      	beq.n	800793e <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 800791a:	2b00      	cmp	r3, #0
 800791c:	d12b      	bne.n	8007976 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800791e:	f107 0318 	add.w	r3, r7, #24
 8007922:	4618      	mov	r0, r3
 8007924:	f000 f8be 	bl	8007aa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800792c:	e094      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800792e:	f107 030c 	add.w	r3, r7, #12
 8007932:	4618      	mov	r0, r3
 8007934:	f000 fa02 	bl	8007d3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800793c:	e08c      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800793e:	4b4b      	ldr	r3, [pc, #300]	; (8007a6c <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8007940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007942:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007946:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800794a:	2b00      	cmp	r3, #0
 800794c:	d102      	bne.n	8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800794e:	4b48      	ldr	r3, [pc, #288]	; (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x444>)
 8007950:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007952:	e081      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007956:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800795a:	d102      	bne.n	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0x336>
            frequency = CSI_VALUE;
 800795c:	4b45      	ldr	r3, [pc, #276]	; (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x448>)
 800795e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007960:	e07a      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007964:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007968:	d102      	bne.n	8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
            frequency = HSE_VALUE;
 800796a:	4b3e      	ldr	r3, [pc, #248]	; (8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 800796c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800796e:	e073      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 8007970:	2300      	movs	r3, #0
 8007972:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007974:	e070      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 8007976:	2300      	movs	r3, #0
 8007978:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800797a:	bf00      	nop
 800797c:	e06c      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007984:	d11f      	bne.n	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007986:	4b39      	ldr	r3, [pc, #228]	; (8007a6c <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8007988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800798a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800798e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007992:	2b00      	cmp	r3, #0
 8007994:	d003      	beq.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800799a:	d008      	beq.n	80079ae <HAL_RCCEx_GetPeriphCLKFreq+0x382>
 800799c:	e00f      	b.n	80079be <HAL_RCCEx_GetPeriphCLKFreq+0x392>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800799e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 fb16 	bl	8007fd4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80079a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079ac:	e054      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079ae:	f107 0318 	add.w	r3, r7, #24
 80079b2:	4618      	mov	r0, r3
 80079b4:	f000 f876 	bl	8007aa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80079b8:	6a3b      	ldr	r3, [r7, #32]
 80079ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079bc:	e04c      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 80079be:	2300      	movs	r3, #0
 80079c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079c2:	bf00      	nop
 80079c4:	e048      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079cc:	d142      	bne.n	8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80079ce:	4b27      	ldr	r3, [pc, #156]	; (8007a6c <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 80079d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079d2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80079d6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80079d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80079de:	d029      	beq.n	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x408>
 80079e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80079e4:	d808      	bhi.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80079e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079ea:	d013      	beq.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80079ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079f0:	d018      	beq.n	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00a      	beq.n	8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 80079f6:	e029      	b.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 80079f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079fc:	d020      	beq.n	8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 80079fe:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007a02:	d020      	beq.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 8007a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a08:	d017      	beq.n	8007a3a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8007a0a:	e01f      	b.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007a0c:	f000 f834 	bl	8007a78 <HAL_RCCEx_GetD3PCLK1Freq>
 8007a10:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007a12:	e021      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a14:	f107 0318 	add.w	r3, r7, #24
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f000 f843 	bl	8007aa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a22:	e019      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a24:	f107 030c 	add.w	r3, r7, #12
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f000 f987 	bl	8007d3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a32:	e011      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8007a34:	4b0e      	ldr	r3, [pc, #56]	; (8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x444>)
 8007a36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a38:	e00e      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8007a3a:	4b0e      	ldr	r3, [pc, #56]	; (8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x448>)
 8007a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a3e:	e00b      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8007a40:	4b08      	ldr	r3, [pc, #32]	; (8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8007a42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a44:	e008      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007a46:	4b08      	ldr	r3, [pc, #32]	; (8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 8007a48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a4a:	e005      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a50:	bf00      	nop
 8007a52:	e001      	b.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else
    {
      frequency = 0;
 8007a54:	2300      	movs	r3, #0
 8007a56:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3740      	adds	r7, #64	; 0x40
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	007a1200 	.word	0x007a1200
 8007a68:	00bb8000 	.word	0x00bb8000
 8007a6c:	58024400 	.word	0x58024400
 8007a70:	03d09000 	.word	0x03d09000
 8007a74:	003d0900 	.word	0x003d0900

08007a78 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8007a7c:	f7fe fec6 	bl	800680c <HAL_RCC_GetHCLKFreq>
 8007a80:	4601      	mov	r1, r0
 8007a82:	4b06      	ldr	r3, [pc, #24]	; (8007a9c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007a84:	6a1b      	ldr	r3, [r3, #32]
 8007a86:	091b      	lsrs	r3, r3, #4
 8007a88:	f003 0307 	and.w	r3, r3, #7
 8007a8c:	4a04      	ldr	r2, [pc, #16]	; (8007aa0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007a8e:	5cd3      	ldrb	r3, [r2, r3]
 8007a90:	f003 031f 	and.w	r3, r3, #31
 8007a94:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	58024400 	.word	0x58024400
 8007aa0:	0800b3e4 	.word	0x0800b3e4

08007aa4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b089      	sub	sp, #36	; 0x24
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007aac:	4b9d      	ldr	r3, [pc, #628]	; (8007d24 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab0:	f003 0303 	and.w	r3, r3, #3
 8007ab4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007ab6:	4b9b      	ldr	r3, [pc, #620]	; (8007d24 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aba:	0b1b      	lsrs	r3, r3, #12
 8007abc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ac0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007ac2:	4b98      	ldr	r3, [pc, #608]	; (8007d24 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac6:	091b      	lsrs	r3, r3, #4
 8007ac8:	f003 0301 	and.w	r3, r3, #1
 8007acc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007ace:	4b95      	ldr	r3, [pc, #596]	; (8007d24 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ad2:	08db      	lsrs	r3, r3, #3
 8007ad4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ad8:	693a      	ldr	r2, [r7, #16]
 8007ada:	fb02 f303 	mul.w	r3, r2, r3
 8007ade:	ee07 3a90 	vmov	s15, r3
 8007ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ae6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f000 810a 	beq.w	8007d06 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d05a      	beq.n	8007bae <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d302      	bcc.n	8007b02 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	d078      	beq.n	8007bf2 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8007b00:	e099      	b.n	8007c36 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b02:	4b88      	ldr	r3, [pc, #544]	; (8007d24 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 0320 	and.w	r3, r3, #32
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d02d      	beq.n	8007b6a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b0e:	4b85      	ldr	r3, [pc, #532]	; (8007d24 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	08db      	lsrs	r3, r3, #3
 8007b14:	f003 0303 	and.w	r3, r3, #3
 8007b18:	4a83      	ldr	r2, [pc, #524]	; (8007d28 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b1e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	ee07 3a90 	vmov	s15, r3
 8007b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	ee07 3a90 	vmov	s15, r3
 8007b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b38:	4b7a      	ldr	r3, [pc, #488]	; (8007d24 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b40:	ee07 3a90 	vmov	s15, r3
 8007b44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b48:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b4c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007d2c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007b50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b64:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007b68:	e087      	b.n	8007c7a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	ee07 3a90 	vmov	s15, r3
 8007b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b74:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007d30 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007b78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b7c:	4b69      	ldr	r3, [pc, #420]	; (8007d24 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b84:	ee07 3a90 	vmov	s15, r3
 8007b88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b90:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007d2c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007b94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ba0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ba8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007bac:	e065      	b.n	8007c7a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	ee07 3a90 	vmov	s15, r3
 8007bb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bb8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007d34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007bbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bc0:	4b58      	ldr	r3, [pc, #352]	; (8007d24 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bc8:	ee07 3a90 	vmov	s15, r3
 8007bcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bd0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bd4:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007d2c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007bd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007be0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007be4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007be8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007bf0:	e043      	b.n	8007c7a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	ee07 3a90 	vmov	s15, r3
 8007bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bfc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007d38 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8007c00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c04:	4b47      	ldr	r3, [pc, #284]	; (8007d24 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c0c:	ee07 3a90 	vmov	s15, r3
 8007c10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c14:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c18:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007d2c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007c1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c30:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c34:	e021      	b.n	8007c7a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	ee07 3a90 	vmov	s15, r3
 8007c3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c40:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007d34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007c44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c48:	4b36      	ldr	r3, [pc, #216]	; (8007d24 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c50:	ee07 3a90 	vmov	s15, r3
 8007c54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c58:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c5c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007d2c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007c60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c74:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c78:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007c7a:	4b2a      	ldr	r3, [pc, #168]	; (8007d24 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c7e:	0a5b      	lsrs	r3, r3, #9
 8007c80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c84:	ee07 3a90 	vmov	s15, r3
 8007c88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c94:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ca0:	ee17 2a90 	vmov	r2, s15
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007ca8:	4b1e      	ldr	r3, [pc, #120]	; (8007d24 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cac:	0c1b      	lsrs	r3, r3, #16
 8007cae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cb2:	ee07 3a90 	vmov	s15, r3
 8007cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cce:	ee17 2a90 	vmov	r2, s15
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007cd6:	4b13      	ldr	r3, [pc, #76]	; (8007d24 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cda:	0e1b      	lsrs	r3, r3, #24
 8007cdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ce0:	ee07 3a90 	vmov	s15, r3
 8007ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ce8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cf0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cfc:	ee17 2a90 	vmov	r2, s15
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007d04:	e008      	b.n	8007d18 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	609a      	str	r2, [r3, #8]
}
 8007d18:	bf00      	nop
 8007d1a:	3724      	adds	r7, #36	; 0x24
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr
 8007d24:	58024400 	.word	0x58024400
 8007d28:	03d09000 	.word	0x03d09000
 8007d2c:	46000000 	.word	0x46000000
 8007d30:	4c742400 	.word	0x4c742400
 8007d34:	4a742400 	.word	0x4a742400
 8007d38:	4af42400 	.word	0x4af42400

08007d3c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b089      	sub	sp, #36	; 0x24
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d44:	4b9d      	ldr	r3, [pc, #628]	; (8007fbc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d48:	f003 0303 	and.w	r3, r3, #3
 8007d4c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007d4e:	4b9b      	ldr	r3, [pc, #620]	; (8007fbc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d52:	0d1b      	lsrs	r3, r3, #20
 8007d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d58:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007d5a:	4b98      	ldr	r3, [pc, #608]	; (8007fbc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5e:	0a1b      	lsrs	r3, r3, #8
 8007d60:	f003 0301 	and.w	r3, r3, #1
 8007d64:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007d66:	4b95      	ldr	r3, [pc, #596]	; (8007fbc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d6a:	08db      	lsrs	r3, r3, #3
 8007d6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d70:	693a      	ldr	r2, [r7, #16]
 8007d72:	fb02 f303 	mul.w	r3, r2, r3
 8007d76:	ee07 3a90 	vmov	s15, r3
 8007d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f000 810a 	beq.w	8007f9e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d05a      	beq.n	8007e46 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d302      	bcc.n	8007d9a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8007d94:	2b02      	cmp	r3, #2
 8007d96:	d078      	beq.n	8007e8a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8007d98:	e099      	b.n	8007ece <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d9a:	4b88      	ldr	r3, [pc, #544]	; (8007fbc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f003 0320 	and.w	r3, r3, #32
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d02d      	beq.n	8007e02 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007da6:	4b85      	ldr	r3, [pc, #532]	; (8007fbc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	08db      	lsrs	r3, r3, #3
 8007dac:	f003 0303 	and.w	r3, r3, #3
 8007db0:	4a83      	ldr	r2, [pc, #524]	; (8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007db2:	fa22 f303 	lsr.w	r3, r2, r3
 8007db6:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	ee07 3a90 	vmov	s15, r3
 8007dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	ee07 3a90 	vmov	s15, r3
 8007dc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dd0:	4b7a      	ldr	r3, [pc, #488]	; (8007fbc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dd8:	ee07 3a90 	vmov	s15, r3
 8007ddc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007de0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007de4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007de8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007df0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007df4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007df8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dfc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007e00:	e087      	b.n	8007f12 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	ee07 3a90 	vmov	s15, r3
 8007e08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e0c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8007e10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e14:	4b69      	ldr	r3, [pc, #420]	; (8007fbc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e1c:	ee07 3a90 	vmov	s15, r3
 8007e20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e24:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e28:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007e2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e40:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e44:	e065      	b.n	8007f12 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	ee07 3a90 	vmov	s15, r3
 8007e4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e50:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007e54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e58:	4b58      	ldr	r3, [pc, #352]	; (8007fbc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e60:	ee07 3a90 	vmov	s15, r3
 8007e64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e68:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e6c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007e70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e84:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e88:	e043      	b.n	8007f12 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	ee07 3a90 	vmov	s15, r3
 8007e90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e94:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8007e98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e9c:	4b47      	ldr	r3, [pc, #284]	; (8007fbc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ea4:	ee07 3a90 	vmov	s15, r3
 8007ea8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eac:	ed97 6a03 	vldr	s12, [r7, #12]
 8007eb0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007eb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ebc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ec0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ec4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ec8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ecc:	e021      	b.n	8007f12 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	ee07 3a90 	vmov	s15, r3
 8007ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ed8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007fcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007edc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ee0:	4b36      	ldr	r3, [pc, #216]	; (8007fbc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ee8:	ee07 3a90 	vmov	s15, r3
 8007eec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ef0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ef4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007ef8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007efc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f0c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f10:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007f12:	4b2a      	ldr	r3, [pc, #168]	; (8007fbc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f16:	0a5b      	lsrs	r3, r3, #9
 8007f18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f1c:	ee07 3a90 	vmov	s15, r3
 8007f20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f38:	ee17 2a90 	vmov	r2, s15
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007f40:	4b1e      	ldr	r3, [pc, #120]	; (8007fbc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f44:	0c1b      	lsrs	r3, r3, #16
 8007f46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f4a:	ee07 3a90 	vmov	s15, r3
 8007f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f66:	ee17 2a90 	vmov	r2, s15
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007f6e:	4b13      	ldr	r3, [pc, #76]	; (8007fbc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f72:	0e1b      	lsrs	r3, r3, #24
 8007f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f78:	ee07 3a90 	vmov	s15, r3
 8007f7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f88:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f94:	ee17 2a90 	vmov	r2, s15
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007f9c:	e008      	b.n	8007fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	609a      	str	r2, [r3, #8]
}
 8007fb0:	bf00      	nop
 8007fb2:	3724      	adds	r7, #36	; 0x24
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr
 8007fbc:	58024400 	.word	0x58024400
 8007fc0:	03d09000 	.word	0x03d09000
 8007fc4:	46000000 	.word	0x46000000
 8007fc8:	4c742400 	.word	0x4c742400
 8007fcc:	4a742400 	.word	0x4a742400
 8007fd0:	4af42400 	.word	0x4af42400

08007fd4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b089      	sub	sp, #36	; 0x24
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007fdc:	4b9d      	ldr	r3, [pc, #628]	; (8008254 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe0:	f003 0303 	and.w	r3, r3, #3
 8007fe4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007fe6:	4b9b      	ldr	r3, [pc, #620]	; (8008254 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fea:	091b      	lsrs	r3, r3, #4
 8007fec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ff0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007ff2:	4b98      	ldr	r3, [pc, #608]	; (8008254 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff6:	f003 0301 	and.w	r3, r3, #1
 8007ffa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007ffc:	4b95      	ldr	r3, [pc, #596]	; (8008254 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008000:	08db      	lsrs	r3, r3, #3
 8008002:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008006:	693a      	ldr	r2, [r7, #16]
 8008008:	fb02 f303 	mul.w	r3, r2, r3
 800800c:	ee07 3a90 	vmov	s15, r3
 8008010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008014:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	2b00      	cmp	r3, #0
 800801c:	f000 810a 	beq.w	8008234 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	2b01      	cmp	r3, #1
 8008024:	d05a      	beq.n	80080dc <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8008026:	2b01      	cmp	r3, #1
 8008028:	d302      	bcc.n	8008030 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800802a:	2b02      	cmp	r3, #2
 800802c:	d078      	beq.n	8008120 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800802e:	e099      	b.n	8008164 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008030:	4b88      	ldr	r3, [pc, #544]	; (8008254 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 0320 	and.w	r3, r3, #32
 8008038:	2b00      	cmp	r3, #0
 800803a:	d02d      	beq.n	8008098 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800803c:	4b85      	ldr	r3, [pc, #532]	; (8008254 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	08db      	lsrs	r3, r3, #3
 8008042:	f003 0303 	and.w	r3, r3, #3
 8008046:	4a84      	ldr	r2, [pc, #528]	; (8008258 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8008048:	fa22 f303 	lsr.w	r3, r2, r3
 800804c:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	ee07 3a90 	vmov	s15, r3
 8008054:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	ee07 3a90 	vmov	s15, r3
 800805e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008066:	4b7b      	ldr	r3, [pc, #492]	; (8008254 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800806a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800806e:	ee07 3a90 	vmov	s15, r3
 8008072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008076:	ed97 6a03 	vldr	s12, [r7, #12]
 800807a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800825c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800807e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800808a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800808e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008092:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008096:	e087      	b.n	80081a8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	ee07 3a90 	vmov	s15, r3
 800809e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008260 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 80080a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080aa:	4b6a      	ldr	r3, [pc, #424]	; (8008254 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80080ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080b2:	ee07 3a90 	vmov	s15, r3
 80080b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80080be:	eddf 5a67 	vldr	s11, [pc, #412]	; 800825c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80080c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080da:	e065      	b.n	80081a8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	ee07 3a90 	vmov	s15, r3
 80080e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008264 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80080ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080ee:	4b59      	ldr	r3, [pc, #356]	; (8008254 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80080f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080f6:	ee07 3a90 	vmov	s15, r3
 80080fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008102:	eddf 5a56 	vldr	s11, [pc, #344]	; 800825c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800810a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800810e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800811a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800811e:	e043      	b.n	80081a8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	ee07 3a90 	vmov	s15, r3
 8008126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800812a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008268 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800812e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008132:	4b48      	ldr	r3, [pc, #288]	; (8008254 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800813a:	ee07 3a90 	vmov	s15, r3
 800813e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008142:	ed97 6a03 	vldr	s12, [r7, #12]
 8008146:	eddf 5a45 	vldr	s11, [pc, #276]	; 800825c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800814a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800814e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800815a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800815e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008162:	e021      	b.n	80081a8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	ee07 3a90 	vmov	s15, r3
 800816a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800816e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008264 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008176:	4b37      	ldr	r3, [pc, #220]	; (8008254 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800817a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800817e:	ee07 3a90 	vmov	s15, r3
 8008182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008186:	ed97 6a03 	vldr	s12, [r7, #12]
 800818a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800825c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800818e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800819a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800819e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081a6:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80081a8:	4b2a      	ldr	r3, [pc, #168]	; (8008254 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80081aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ac:	0a5b      	lsrs	r3, r3, #9
 80081ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081b2:	ee07 3a90 	vmov	s15, r3
 80081b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80081c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081ce:	ee17 2a90 	vmov	r2, s15
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80081d6:	4b1f      	ldr	r3, [pc, #124]	; (8008254 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80081d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081da:	0c1b      	lsrs	r3, r3, #16
 80081dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081e0:	ee07 3a90 	vmov	s15, r3
 80081e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80081f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081fc:	ee17 2a90 	vmov	r2, s15
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008204:	4b13      	ldr	r3, [pc, #76]	; (8008254 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008208:	0e1b      	lsrs	r3, r3, #24
 800820a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800820e:	ee07 3a90 	vmov	s15, r3
 8008212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008216:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800821a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800821e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008222:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008226:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800822a:	ee17 2a90 	vmov	r2, s15
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008232:	e008      	b.n	8008246 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	609a      	str	r2, [r3, #8]
}
 8008246:	bf00      	nop
 8008248:	3724      	adds	r7, #36	; 0x24
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	58024400 	.word	0x58024400
 8008258:	03d09000 	.word	0x03d09000
 800825c:	46000000 	.word	0x46000000
 8008260:	4c742400 	.word	0x4c742400
 8008264:	4a742400 	.word	0x4a742400
 8008268:	4af42400 	.word	0x4af42400

0800826c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008276:	2300      	movs	r3, #0
 8008278:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800827a:	4b53      	ldr	r3, [pc, #332]	; (80083c8 <RCCEx_PLL2_Config+0x15c>)
 800827c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800827e:	f003 0303 	and.w	r3, r3, #3
 8008282:	2b03      	cmp	r3, #3
 8008284:	d101      	bne.n	800828a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008286:	2301      	movs	r3, #1
 8008288:	e099      	b.n	80083be <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800828a:	4b4f      	ldr	r3, [pc, #316]	; (80083c8 <RCCEx_PLL2_Config+0x15c>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a4e      	ldr	r2, [pc, #312]	; (80083c8 <RCCEx_PLL2_Config+0x15c>)
 8008290:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008294:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008296:	f7f9 fca5 	bl	8001be4 <HAL_GetTick>
 800829a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800829c:	e008      	b.n	80082b0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800829e:	f7f9 fca1 	bl	8001be4 <HAL_GetTick>
 80082a2:	4602      	mov	r2, r0
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	1ad3      	subs	r3, r2, r3
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d901      	bls.n	80082b0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e086      	b.n	80083be <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80082b0:	4b45      	ldr	r3, [pc, #276]	; (80083c8 <RCCEx_PLL2_Config+0x15c>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1f0      	bne.n	800829e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80082bc:	4b42      	ldr	r3, [pc, #264]	; (80083c8 <RCCEx_PLL2_Config+0x15c>)
 80082be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	031b      	lsls	r3, r3, #12
 80082ca:	493f      	ldr	r1, [pc, #252]	; (80083c8 <RCCEx_PLL2_Config+0x15c>)
 80082cc:	4313      	orrs	r3, r2
 80082ce:	628b      	str	r3, [r1, #40]	; 0x28
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	3b01      	subs	r3, #1
 80082d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	3b01      	subs	r3, #1
 80082e0:	025b      	lsls	r3, r3, #9
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	431a      	orrs	r2, r3
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	3b01      	subs	r3, #1
 80082ec:	041b      	lsls	r3, r3, #16
 80082ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80082f2:	431a      	orrs	r2, r3
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	3b01      	subs	r3, #1
 80082fa:	061b      	lsls	r3, r3, #24
 80082fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008300:	4931      	ldr	r1, [pc, #196]	; (80083c8 <RCCEx_PLL2_Config+0x15c>)
 8008302:	4313      	orrs	r3, r2
 8008304:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008306:	4b30      	ldr	r3, [pc, #192]	; (80083c8 <RCCEx_PLL2_Config+0x15c>)
 8008308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800830a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	695b      	ldr	r3, [r3, #20]
 8008312:	492d      	ldr	r1, [pc, #180]	; (80083c8 <RCCEx_PLL2_Config+0x15c>)
 8008314:	4313      	orrs	r3, r2
 8008316:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008318:	4b2b      	ldr	r3, [pc, #172]	; (80083c8 <RCCEx_PLL2_Config+0x15c>)
 800831a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800831c:	f023 0220 	bic.w	r2, r3, #32
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	699b      	ldr	r3, [r3, #24]
 8008324:	4928      	ldr	r1, [pc, #160]	; (80083c8 <RCCEx_PLL2_Config+0x15c>)
 8008326:	4313      	orrs	r3, r2
 8008328:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800832a:	4b27      	ldr	r3, [pc, #156]	; (80083c8 <RCCEx_PLL2_Config+0x15c>)
 800832c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800832e:	4a26      	ldr	r2, [pc, #152]	; (80083c8 <RCCEx_PLL2_Config+0x15c>)
 8008330:	f023 0310 	bic.w	r3, r3, #16
 8008334:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008336:	4b24      	ldr	r3, [pc, #144]	; (80083c8 <RCCEx_PLL2_Config+0x15c>)
 8008338:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800833a:	4b24      	ldr	r3, [pc, #144]	; (80083cc <RCCEx_PLL2_Config+0x160>)
 800833c:	4013      	ands	r3, r2
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	69d2      	ldr	r2, [r2, #28]
 8008342:	00d2      	lsls	r2, r2, #3
 8008344:	4920      	ldr	r1, [pc, #128]	; (80083c8 <RCCEx_PLL2_Config+0x15c>)
 8008346:	4313      	orrs	r3, r2
 8008348:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800834a:	4b1f      	ldr	r3, [pc, #124]	; (80083c8 <RCCEx_PLL2_Config+0x15c>)
 800834c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800834e:	4a1e      	ldr	r2, [pc, #120]	; (80083c8 <RCCEx_PLL2_Config+0x15c>)
 8008350:	f043 0310 	orr.w	r3, r3, #16
 8008354:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d106      	bne.n	800836a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800835c:	4b1a      	ldr	r3, [pc, #104]	; (80083c8 <RCCEx_PLL2_Config+0x15c>)
 800835e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008360:	4a19      	ldr	r2, [pc, #100]	; (80083c8 <RCCEx_PLL2_Config+0x15c>)
 8008362:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008366:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008368:	e00f      	b.n	800838a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	2b01      	cmp	r3, #1
 800836e:	d106      	bne.n	800837e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008370:	4b15      	ldr	r3, [pc, #84]	; (80083c8 <RCCEx_PLL2_Config+0x15c>)
 8008372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008374:	4a14      	ldr	r2, [pc, #80]	; (80083c8 <RCCEx_PLL2_Config+0x15c>)
 8008376:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800837a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800837c:	e005      	b.n	800838a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800837e:	4b12      	ldr	r3, [pc, #72]	; (80083c8 <RCCEx_PLL2_Config+0x15c>)
 8008380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008382:	4a11      	ldr	r2, [pc, #68]	; (80083c8 <RCCEx_PLL2_Config+0x15c>)
 8008384:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008388:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800838a:	4b0f      	ldr	r3, [pc, #60]	; (80083c8 <RCCEx_PLL2_Config+0x15c>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a0e      	ldr	r2, [pc, #56]	; (80083c8 <RCCEx_PLL2_Config+0x15c>)
 8008390:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008394:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008396:	f7f9 fc25 	bl	8001be4 <HAL_GetTick>
 800839a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800839c:	e008      	b.n	80083b0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800839e:	f7f9 fc21 	bl	8001be4 <HAL_GetTick>
 80083a2:	4602      	mov	r2, r0
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	1ad3      	subs	r3, r2, r3
 80083a8:	2b02      	cmp	r3, #2
 80083aa:	d901      	bls.n	80083b0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80083ac:	2303      	movs	r3, #3
 80083ae:	e006      	b.n	80083be <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80083b0:	4b05      	ldr	r3, [pc, #20]	; (80083c8 <RCCEx_PLL2_Config+0x15c>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d0f0      	beq.n	800839e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80083bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3710      	adds	r7, #16
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	58024400 	.word	0x58024400
 80083cc:	ffff0007 	.word	0xffff0007

080083d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80083da:	2300      	movs	r3, #0
 80083dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80083de:	4b53      	ldr	r3, [pc, #332]	; (800852c <RCCEx_PLL3_Config+0x15c>)
 80083e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e2:	f003 0303 	and.w	r3, r3, #3
 80083e6:	2b03      	cmp	r3, #3
 80083e8:	d101      	bne.n	80083ee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	e099      	b.n	8008522 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80083ee:	4b4f      	ldr	r3, [pc, #316]	; (800852c <RCCEx_PLL3_Config+0x15c>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a4e      	ldr	r2, [pc, #312]	; (800852c <RCCEx_PLL3_Config+0x15c>)
 80083f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083fa:	f7f9 fbf3 	bl	8001be4 <HAL_GetTick>
 80083fe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008400:	e008      	b.n	8008414 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008402:	f7f9 fbef 	bl	8001be4 <HAL_GetTick>
 8008406:	4602      	mov	r2, r0
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	1ad3      	subs	r3, r2, r3
 800840c:	2b02      	cmp	r3, #2
 800840e:	d901      	bls.n	8008414 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008410:	2303      	movs	r3, #3
 8008412:	e086      	b.n	8008522 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008414:	4b45      	ldr	r3, [pc, #276]	; (800852c <RCCEx_PLL3_Config+0x15c>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800841c:	2b00      	cmp	r3, #0
 800841e:	d1f0      	bne.n	8008402 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008420:	4b42      	ldr	r3, [pc, #264]	; (800852c <RCCEx_PLL3_Config+0x15c>)
 8008422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008424:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	051b      	lsls	r3, r3, #20
 800842e:	493f      	ldr	r1, [pc, #252]	; (800852c <RCCEx_PLL3_Config+0x15c>)
 8008430:	4313      	orrs	r3, r2
 8008432:	628b      	str	r3, [r1, #40]	; 0x28
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	3b01      	subs	r3, #1
 800843a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	3b01      	subs	r3, #1
 8008444:	025b      	lsls	r3, r3, #9
 8008446:	b29b      	uxth	r3, r3
 8008448:	431a      	orrs	r2, r3
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	3b01      	subs	r3, #1
 8008450:	041b      	lsls	r3, r3, #16
 8008452:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008456:	431a      	orrs	r2, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	691b      	ldr	r3, [r3, #16]
 800845c:	3b01      	subs	r3, #1
 800845e:	061b      	lsls	r3, r3, #24
 8008460:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008464:	4931      	ldr	r1, [pc, #196]	; (800852c <RCCEx_PLL3_Config+0x15c>)
 8008466:	4313      	orrs	r3, r2
 8008468:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800846a:	4b30      	ldr	r3, [pc, #192]	; (800852c <RCCEx_PLL3_Config+0x15c>)
 800846c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800846e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	695b      	ldr	r3, [r3, #20]
 8008476:	492d      	ldr	r1, [pc, #180]	; (800852c <RCCEx_PLL3_Config+0x15c>)
 8008478:	4313      	orrs	r3, r2
 800847a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800847c:	4b2b      	ldr	r3, [pc, #172]	; (800852c <RCCEx_PLL3_Config+0x15c>)
 800847e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008480:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	4928      	ldr	r1, [pc, #160]	; (800852c <RCCEx_PLL3_Config+0x15c>)
 800848a:	4313      	orrs	r3, r2
 800848c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800848e:	4b27      	ldr	r3, [pc, #156]	; (800852c <RCCEx_PLL3_Config+0x15c>)
 8008490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008492:	4a26      	ldr	r2, [pc, #152]	; (800852c <RCCEx_PLL3_Config+0x15c>)
 8008494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008498:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800849a:	4b24      	ldr	r3, [pc, #144]	; (800852c <RCCEx_PLL3_Config+0x15c>)
 800849c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800849e:	4b24      	ldr	r3, [pc, #144]	; (8008530 <RCCEx_PLL3_Config+0x160>)
 80084a0:	4013      	ands	r3, r2
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	69d2      	ldr	r2, [r2, #28]
 80084a6:	00d2      	lsls	r2, r2, #3
 80084a8:	4920      	ldr	r1, [pc, #128]	; (800852c <RCCEx_PLL3_Config+0x15c>)
 80084aa:	4313      	orrs	r3, r2
 80084ac:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80084ae:	4b1f      	ldr	r3, [pc, #124]	; (800852c <RCCEx_PLL3_Config+0x15c>)
 80084b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b2:	4a1e      	ldr	r2, [pc, #120]	; (800852c <RCCEx_PLL3_Config+0x15c>)
 80084b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d106      	bne.n	80084ce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80084c0:	4b1a      	ldr	r3, [pc, #104]	; (800852c <RCCEx_PLL3_Config+0x15c>)
 80084c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c4:	4a19      	ldr	r2, [pc, #100]	; (800852c <RCCEx_PLL3_Config+0x15c>)
 80084c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80084ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80084cc:	e00f      	b.n	80084ee <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d106      	bne.n	80084e2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80084d4:	4b15      	ldr	r3, [pc, #84]	; (800852c <RCCEx_PLL3_Config+0x15c>)
 80084d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d8:	4a14      	ldr	r2, [pc, #80]	; (800852c <RCCEx_PLL3_Config+0x15c>)
 80084da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80084de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80084e0:	e005      	b.n	80084ee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80084e2:	4b12      	ldr	r3, [pc, #72]	; (800852c <RCCEx_PLL3_Config+0x15c>)
 80084e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e6:	4a11      	ldr	r2, [pc, #68]	; (800852c <RCCEx_PLL3_Config+0x15c>)
 80084e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80084ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80084ee:	4b0f      	ldr	r3, [pc, #60]	; (800852c <RCCEx_PLL3_Config+0x15c>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a0e      	ldr	r2, [pc, #56]	; (800852c <RCCEx_PLL3_Config+0x15c>)
 80084f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084fa:	f7f9 fb73 	bl	8001be4 <HAL_GetTick>
 80084fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008500:	e008      	b.n	8008514 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008502:	f7f9 fb6f 	bl	8001be4 <HAL_GetTick>
 8008506:	4602      	mov	r2, r0
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	1ad3      	subs	r3, r2, r3
 800850c:	2b02      	cmp	r3, #2
 800850e:	d901      	bls.n	8008514 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008510:	2303      	movs	r3, #3
 8008512:	e006      	b.n	8008522 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008514:	4b05      	ldr	r3, [pc, #20]	; (800852c <RCCEx_PLL3_Config+0x15c>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800851c:	2b00      	cmp	r3, #0
 800851e:	d0f0      	beq.n	8008502 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008520:	7bfb      	ldrb	r3, [r7, #15]
}
 8008522:	4618      	mov	r0, r3
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	58024400 	.word	0x58024400
 8008530:	ffff0007 	.word	0xffff0007

08008534 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d101      	bne.n	8008546 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	e049      	b.n	80085da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800854c:	b2db      	uxtb	r3, r3
 800854e:	2b00      	cmp	r3, #0
 8008550:	d106      	bne.n	8008560 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f7f9 f80e 	bl	800157c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2202      	movs	r2, #2
 8008564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	3304      	adds	r3, #4
 8008570:	4619      	mov	r1, r3
 8008572:	4610      	mov	r0, r2
 8008574:	f000 fa24 	bl	80089c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2201      	movs	r2, #1
 8008584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2201      	movs	r2, #1
 800858c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2201      	movs	r2, #1
 8008594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085d8:	2300      	movs	r3, #0
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3708      	adds	r7, #8
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
	...

080085e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d001      	beq.n	80085fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	e019      	b.n	8008630 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2202      	movs	r2, #2
 8008600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	689a      	ldr	r2, [r3, #8]
 800860a:	4b0c      	ldr	r3, [pc, #48]	; (800863c <HAL_TIM_Base_Start+0x58>)
 800860c:	4013      	ands	r3, r2
 800860e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2b06      	cmp	r3, #6
 8008614:	d00b      	beq.n	800862e <HAL_TIM_Base_Start+0x4a>
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800861c:	d007      	beq.n	800862e <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f042 0201 	orr.w	r2, r2, #1
 800862c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800862e:	2300      	movs	r3, #0
}
 8008630:	4618      	mov	r0, r3
 8008632:	3714      	adds	r7, #20
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr
 800863c:	00010007 	.word	0x00010007

08008640 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008640:	b480      	push	{r7}
 8008642:	b085      	sub	sp, #20
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800864e:	b2db      	uxtb	r3, r3
 8008650:	2b01      	cmp	r3, #1
 8008652:	d001      	beq.n	8008658 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008654:	2301      	movs	r3, #1
 8008656:	e021      	b.n	800869c <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2202      	movs	r2, #2
 800865c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	68da      	ldr	r2, [r3, #12]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f042 0201 	orr.w	r2, r2, #1
 800866e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	689a      	ldr	r2, [r3, #8]
 8008676:	4b0c      	ldr	r3, [pc, #48]	; (80086a8 <HAL_TIM_Base_Start_IT+0x68>)
 8008678:	4013      	ands	r3, r2
 800867a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2b06      	cmp	r3, #6
 8008680:	d00b      	beq.n	800869a <HAL_TIM_Base_Start_IT+0x5a>
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008688:	d007      	beq.n	800869a <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f042 0201 	orr.w	r2, r2, #1
 8008698:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3714      	adds	r7, #20
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr
 80086a8:	00010007 	.word	0x00010007

080086ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	f003 0302 	and.w	r3, r3, #2
 80086be:	2b02      	cmp	r3, #2
 80086c0:	d122      	bne.n	8008708 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	f003 0302 	and.w	r3, r3, #2
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	d11b      	bne.n	8008708 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f06f 0202 	mvn.w	r2, #2
 80086d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2201      	movs	r2, #1
 80086de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	699b      	ldr	r3, [r3, #24]
 80086e6:	f003 0303 	and.w	r3, r3, #3
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d003      	beq.n	80086f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 f947 	bl	8008982 <HAL_TIM_IC_CaptureCallback>
 80086f4:	e005      	b.n	8008702 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 f939 	bl	800896e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 f94a 	bl	8008996 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	691b      	ldr	r3, [r3, #16]
 800870e:	f003 0304 	and.w	r3, r3, #4
 8008712:	2b04      	cmp	r3, #4
 8008714:	d122      	bne.n	800875c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	f003 0304 	and.w	r3, r3, #4
 8008720:	2b04      	cmp	r3, #4
 8008722:	d11b      	bne.n	800875c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f06f 0204 	mvn.w	r2, #4
 800872c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2202      	movs	r2, #2
 8008732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	699b      	ldr	r3, [r3, #24]
 800873a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800873e:	2b00      	cmp	r3, #0
 8008740:	d003      	beq.n	800874a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 f91d 	bl	8008982 <HAL_TIM_IC_CaptureCallback>
 8008748:	e005      	b.n	8008756 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f90f 	bl	800896e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 f920 	bl	8008996 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	691b      	ldr	r3, [r3, #16]
 8008762:	f003 0308 	and.w	r3, r3, #8
 8008766:	2b08      	cmp	r3, #8
 8008768:	d122      	bne.n	80087b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	f003 0308 	and.w	r3, r3, #8
 8008774:	2b08      	cmp	r3, #8
 8008776:	d11b      	bne.n	80087b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f06f 0208 	mvn.w	r2, #8
 8008780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2204      	movs	r2, #4
 8008786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	69db      	ldr	r3, [r3, #28]
 800878e:	f003 0303 	and.w	r3, r3, #3
 8008792:	2b00      	cmp	r3, #0
 8008794:	d003      	beq.n	800879e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 f8f3 	bl	8008982 <HAL_TIM_IC_CaptureCallback>
 800879c:	e005      	b.n	80087aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 f8e5 	bl	800896e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 f8f6 	bl	8008996 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	691b      	ldr	r3, [r3, #16]
 80087b6:	f003 0310 	and.w	r3, r3, #16
 80087ba:	2b10      	cmp	r3, #16
 80087bc:	d122      	bne.n	8008804 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	f003 0310 	and.w	r3, r3, #16
 80087c8:	2b10      	cmp	r3, #16
 80087ca:	d11b      	bne.n	8008804 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f06f 0210 	mvn.w	r2, #16
 80087d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2208      	movs	r2, #8
 80087da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	69db      	ldr	r3, [r3, #28]
 80087e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d003      	beq.n	80087f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 f8c9 	bl	8008982 <HAL_TIM_IC_CaptureCallback>
 80087f0:	e005      	b.n	80087fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 f8bb 	bl	800896e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 f8cc 	bl	8008996 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	691b      	ldr	r3, [r3, #16]
 800880a:	f003 0301 	and.w	r3, r3, #1
 800880e:	2b01      	cmp	r3, #1
 8008810:	d10e      	bne.n	8008830 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	f003 0301 	and.w	r3, r3, #1
 800881c:	2b01      	cmp	r3, #1
 800881e:	d107      	bne.n	8008830 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f06f 0201 	mvn.w	r2, #1
 8008828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f7f8 fc00 	bl	8001030 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	691b      	ldr	r3, [r3, #16]
 8008836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800883a:	2b80      	cmp	r3, #128	; 0x80
 800883c:	d10e      	bne.n	800885c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008848:	2b80      	cmp	r3, #128	; 0x80
 800884a:	d107      	bne.n	800885c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 fb28 	bl	8008eac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	691b      	ldr	r3, [r3, #16]
 8008862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800886a:	d10e      	bne.n	800888a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008876:	2b80      	cmp	r3, #128	; 0x80
 8008878:	d107      	bne.n	800888a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 fb1b 	bl	8008ec0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	691b      	ldr	r3, [r3, #16]
 8008890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008894:	2b40      	cmp	r3, #64	; 0x40
 8008896:	d10e      	bne.n	80088b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088a2:	2b40      	cmp	r3, #64	; 0x40
 80088a4:	d107      	bne.n	80088b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80088ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 f87a 	bl	80089aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	691b      	ldr	r3, [r3, #16]
 80088bc:	f003 0320 	and.w	r3, r3, #32
 80088c0:	2b20      	cmp	r3, #32
 80088c2:	d10e      	bne.n	80088e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	f003 0320 	and.w	r3, r3, #32
 80088ce:	2b20      	cmp	r3, #32
 80088d0:	d107      	bne.n	80088e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f06f 0220 	mvn.w	r2, #32
 80088da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 fadb 	bl	8008e98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80088e2:	bf00      	nop
 80088e4:	3708      	adds	r7, #8
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b082      	sub	sp, #8
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
 80088f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d101      	bne.n	8008902 <HAL_TIM_SlaveConfigSynchro+0x18>
 80088fe:	2302      	movs	r3, #2
 8008900:	e031      	b.n	8008966 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2201      	movs	r2, #1
 8008906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2202      	movs	r2, #2
 800890e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008912:	6839      	ldr	r1, [r7, #0]
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 f8ed 	bl	8008af4 <TIM_SlaveTimer_SetConfig>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d009      	beq.n	8008934 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8008930:	2301      	movs	r3, #1
 8008932:	e018      	b.n	8008966 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68da      	ldr	r2, [r3, #12]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008942:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68da      	ldr	r2, [r3, #12]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008952:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008964:	2300      	movs	r3, #0
}
 8008966:	4618      	mov	r0, r3
 8008968:	3708      	adds	r7, #8
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}

0800896e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800896e:	b480      	push	{r7}
 8008970:	b083      	sub	sp, #12
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008976:	bf00      	nop
 8008978:	370c      	adds	r7, #12
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr

08008982 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008982:	b480      	push	{r7}
 8008984:	b083      	sub	sp, #12
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800898a:	bf00      	nop
 800898c:	370c      	adds	r7, #12
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr

08008996 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008996:	b480      	push	{r7}
 8008998:	b083      	sub	sp, #12
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800899e:	bf00      	nop
 80089a0:	370c      	adds	r7, #12
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr

080089aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80089aa:	b480      	push	{r7}
 80089ac:	b083      	sub	sp, #12
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80089b2:	bf00      	nop
 80089b4:	370c      	adds	r7, #12
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
	...

080089c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b085      	sub	sp, #20
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a40      	ldr	r2, [pc, #256]	; (8008ad4 <TIM_Base_SetConfig+0x114>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d013      	beq.n	8008a00 <TIM_Base_SetConfig+0x40>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089de:	d00f      	beq.n	8008a00 <TIM_Base_SetConfig+0x40>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	4a3d      	ldr	r2, [pc, #244]	; (8008ad8 <TIM_Base_SetConfig+0x118>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d00b      	beq.n	8008a00 <TIM_Base_SetConfig+0x40>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	4a3c      	ldr	r2, [pc, #240]	; (8008adc <TIM_Base_SetConfig+0x11c>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d007      	beq.n	8008a00 <TIM_Base_SetConfig+0x40>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4a3b      	ldr	r2, [pc, #236]	; (8008ae0 <TIM_Base_SetConfig+0x120>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d003      	beq.n	8008a00 <TIM_Base_SetConfig+0x40>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4a3a      	ldr	r2, [pc, #232]	; (8008ae4 <TIM_Base_SetConfig+0x124>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d108      	bne.n	8008a12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	68fa      	ldr	r2, [r7, #12]
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4a2f      	ldr	r2, [pc, #188]	; (8008ad4 <TIM_Base_SetConfig+0x114>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d01f      	beq.n	8008a5a <TIM_Base_SetConfig+0x9a>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a20:	d01b      	beq.n	8008a5a <TIM_Base_SetConfig+0x9a>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4a2c      	ldr	r2, [pc, #176]	; (8008ad8 <TIM_Base_SetConfig+0x118>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d017      	beq.n	8008a5a <TIM_Base_SetConfig+0x9a>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4a2b      	ldr	r2, [pc, #172]	; (8008adc <TIM_Base_SetConfig+0x11c>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d013      	beq.n	8008a5a <TIM_Base_SetConfig+0x9a>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	4a2a      	ldr	r2, [pc, #168]	; (8008ae0 <TIM_Base_SetConfig+0x120>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d00f      	beq.n	8008a5a <TIM_Base_SetConfig+0x9a>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4a29      	ldr	r2, [pc, #164]	; (8008ae4 <TIM_Base_SetConfig+0x124>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d00b      	beq.n	8008a5a <TIM_Base_SetConfig+0x9a>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	4a28      	ldr	r2, [pc, #160]	; (8008ae8 <TIM_Base_SetConfig+0x128>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d007      	beq.n	8008a5a <TIM_Base_SetConfig+0x9a>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	4a27      	ldr	r2, [pc, #156]	; (8008aec <TIM_Base_SetConfig+0x12c>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d003      	beq.n	8008a5a <TIM_Base_SetConfig+0x9a>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	4a26      	ldr	r2, [pc, #152]	; (8008af0 <TIM_Base_SetConfig+0x130>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d108      	bne.n	8008a6c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	68fa      	ldr	r2, [r7, #12]
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	695b      	ldr	r3, [r3, #20]
 8008a76:	4313      	orrs	r3, r2
 8008a78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	68fa      	ldr	r2, [r7, #12]
 8008a7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	689a      	ldr	r2, [r3, #8]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	4a10      	ldr	r2, [pc, #64]	; (8008ad4 <TIM_Base_SetConfig+0x114>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d00f      	beq.n	8008ab8 <TIM_Base_SetConfig+0xf8>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	4a12      	ldr	r2, [pc, #72]	; (8008ae4 <TIM_Base_SetConfig+0x124>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d00b      	beq.n	8008ab8 <TIM_Base_SetConfig+0xf8>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	4a11      	ldr	r2, [pc, #68]	; (8008ae8 <TIM_Base_SetConfig+0x128>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d007      	beq.n	8008ab8 <TIM_Base_SetConfig+0xf8>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	4a10      	ldr	r2, [pc, #64]	; (8008aec <TIM_Base_SetConfig+0x12c>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d003      	beq.n	8008ab8 <TIM_Base_SetConfig+0xf8>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	4a0f      	ldr	r2, [pc, #60]	; (8008af0 <TIM_Base_SetConfig+0x130>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d103      	bne.n	8008ac0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	691a      	ldr	r2, [r3, #16]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	615a      	str	r2, [r3, #20]
}
 8008ac6:	bf00      	nop
 8008ac8:	3714      	adds	r7, #20
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	40010000 	.word	0x40010000
 8008ad8:	40000400 	.word	0x40000400
 8008adc:	40000800 	.word	0x40000800
 8008ae0:	40000c00 	.word	0x40000c00
 8008ae4:	40010400 	.word	0x40010400
 8008ae8:	40014000 	.word	0x40014000
 8008aec:	40014400 	.word	0x40014400
 8008af0:	40014800 	.word	0x40014800

08008af4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b086      	sub	sp, #24
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b06:	697a      	ldr	r2, [r7, #20]
 8008b08:	4b56      	ldr	r3, [pc, #344]	; (8008c64 <TIM_SlaveTimer_SetConfig+0x170>)
 8008b0a:	4013      	ands	r3, r2
 8008b0c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	697a      	ldr	r2, [r7, #20]
 8008b14:	4313      	orrs	r3, r2
 8008b16:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008b18:	697a      	ldr	r2, [r7, #20]
 8008b1a:	4b53      	ldr	r3, [pc, #332]	; (8008c68 <TIM_SlaveTimer_SetConfig+0x174>)
 8008b1c:	4013      	ands	r3, r2
 8008b1e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	697a      	ldr	r2, [r7, #20]
 8008b26:	4313      	orrs	r3, r2
 8008b28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	697a      	ldr	r2, [r7, #20]
 8008b30:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b3a:	f000 808c 	beq.w	8008c56 <TIM_SlaveTimer_SetConfig+0x162>
 8008b3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b42:	d818      	bhi.n	8008b76 <TIM_SlaveTimer_SetConfig+0x82>
 8008b44:	2b30      	cmp	r3, #48	; 0x30
 8008b46:	f000 8086 	beq.w	8008c56 <TIM_SlaveTimer_SetConfig+0x162>
 8008b4a:	2b30      	cmp	r3, #48	; 0x30
 8008b4c:	d807      	bhi.n	8008b5e <TIM_SlaveTimer_SetConfig+0x6a>
 8008b4e:	2b10      	cmp	r3, #16
 8008b50:	f000 8081 	beq.w	8008c56 <TIM_SlaveTimer_SetConfig+0x162>
 8008b54:	2b20      	cmp	r3, #32
 8008b56:	d07e      	beq.n	8008c56 <TIM_SlaveTimer_SetConfig+0x162>
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d07c      	beq.n	8008c56 <TIM_SlaveTimer_SetConfig+0x162>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8008b5c:	e07c      	b.n	8008c58 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8008b5e:	2b50      	cmp	r3, #80	; 0x50
 8008b60:	d065      	beq.n	8008c2e <TIM_SlaveTimer_SetConfig+0x13a>
 8008b62:	2b50      	cmp	r3, #80	; 0x50
 8008b64:	d802      	bhi.n	8008b6c <TIM_SlaveTimer_SetConfig+0x78>
 8008b66:	2b40      	cmp	r3, #64	; 0x40
 8008b68:	d038      	beq.n	8008bdc <TIM_SlaveTimer_SetConfig+0xe8>
      break;
 8008b6a:	e075      	b.n	8008c58 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8008b6c:	2b60      	cmp	r3, #96	; 0x60
 8008b6e:	d068      	beq.n	8008c42 <TIM_SlaveTimer_SetConfig+0x14e>
 8008b70:	2b70      	cmp	r3, #112	; 0x70
 8008b72:	d028      	beq.n	8008bc6 <TIM_SlaveTimer_SetConfig+0xd2>
      break;
 8008b74:	e070      	b.n	8008c58 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8008b76:	4a3d      	ldr	r2, [pc, #244]	; (8008c6c <TIM_SlaveTimer_SetConfig+0x178>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d06c      	beq.n	8008c56 <TIM_SlaveTimer_SetConfig+0x162>
 8008b7c:	4a3b      	ldr	r2, [pc, #236]	; (8008c6c <TIM_SlaveTimer_SetConfig+0x178>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d810      	bhi.n	8008ba4 <TIM_SlaveTimer_SetConfig+0xb0>
 8008b82:	4a3b      	ldr	r2, [pc, #236]	; (8008c70 <TIM_SlaveTimer_SetConfig+0x17c>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d066      	beq.n	8008c56 <TIM_SlaveTimer_SetConfig+0x162>
 8008b88:	4a39      	ldr	r2, [pc, #228]	; (8008c70 <TIM_SlaveTimer_SetConfig+0x17c>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d803      	bhi.n	8008b96 <TIM_SlaveTimer_SetConfig+0xa2>
 8008b8e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008b92:	d060      	beq.n	8008c56 <TIM_SlaveTimer_SetConfig+0x162>
      break;
 8008b94:	e060      	b.n	8008c58 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8008b96:	4a37      	ldr	r2, [pc, #220]	; (8008c74 <TIM_SlaveTimer_SetConfig+0x180>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d05c      	beq.n	8008c56 <TIM_SlaveTimer_SetConfig+0x162>
 8008b9c:	4a36      	ldr	r2, [pc, #216]	; (8008c78 <TIM_SlaveTimer_SetConfig+0x184>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d059      	beq.n	8008c56 <TIM_SlaveTimer_SetConfig+0x162>
      break;
 8008ba2:	e059      	b.n	8008c58 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8008ba4:	4a35      	ldr	r2, [pc, #212]	; (8008c7c <TIM_SlaveTimer_SetConfig+0x188>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d055      	beq.n	8008c56 <TIM_SlaveTimer_SetConfig+0x162>
 8008baa:	4a34      	ldr	r2, [pc, #208]	; (8008c7c <TIM_SlaveTimer_SetConfig+0x188>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d803      	bhi.n	8008bb8 <TIM_SlaveTimer_SetConfig+0xc4>
 8008bb0:	4a33      	ldr	r2, [pc, #204]	; (8008c80 <TIM_SlaveTimer_SetConfig+0x18c>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d04f      	beq.n	8008c56 <TIM_SlaveTimer_SetConfig+0x162>
      break;
 8008bb6:	e04f      	b.n	8008c58 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8008bb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bbc:	d04b      	beq.n	8008c56 <TIM_SlaveTimer_SetConfig+0x162>
 8008bbe:	4a31      	ldr	r2, [pc, #196]	; (8008c84 <TIM_SlaveTimer_SetConfig+0x190>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d048      	beq.n	8008c56 <TIM_SlaveTimer_SetConfig+0x162>
      break;
 8008bc4:	e048      	b.n	8008c58 <TIM_SlaveTimer_SetConfig+0x164>
      TIM_ETR_SetConfig(htim->Instance,
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6818      	ldr	r0, [r3, #0]
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	68d9      	ldr	r1, [r3, #12]
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	689a      	ldr	r2, [r3, #8]
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	f000 f8b6 	bl	8008d46 <TIM_ETR_SetConfig>
      break;
 8008bda:	e03d      	b.n	8008c58 <TIM_SlaveTimer_SetConfig+0x164>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2b05      	cmp	r3, #5
 8008be2:	d101      	bne.n	8008be8 <TIM_SlaveTimer_SetConfig+0xf4>
        return HAL_ERROR;
 8008be4:	2301      	movs	r3, #1
 8008be6:	e038      	b.n	8008c5a <TIM_SlaveTimer_SetConfig+0x166>
      tmpccer = htim->Instance->CCER;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	6a1b      	ldr	r3, [r3, #32]
 8008bee:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	6a1a      	ldr	r2, [r3, #32]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f022 0201 	bic.w	r2, r2, #1
 8008bfe:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	699b      	ldr	r3, [r3, #24]
 8008c06:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c0e:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	691b      	ldr	r3, [r3, #16]
 8008c14:	011b      	lsls	r3, r3, #4
 8008c16:	68fa      	ldr	r2, [r7, #12]
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	68fa      	ldr	r2, [r7, #12]
 8008c22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	693a      	ldr	r2, [r7, #16]
 8008c2a:	621a      	str	r2, [r3, #32]
      break;
 8008c2c:	e014      	b.n	8008c58 <TIM_SlaveTimer_SetConfig+0x164>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6818      	ldr	r0, [r3, #0]
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	6899      	ldr	r1, [r3, #8]
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	691b      	ldr	r3, [r3, #16]
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	f000 f824 	bl	8008c88 <TIM_TI1_ConfigInputStage>
      break;
 8008c40:	e00a      	b.n	8008c58 <TIM_SlaveTimer_SetConfig+0x164>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6818      	ldr	r0, [r3, #0]
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	6899      	ldr	r1, [r3, #8]
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	691b      	ldr	r3, [r3, #16]
 8008c4e:	461a      	mov	r2, r3
 8008c50:	f000 f849 	bl	8008ce6 <TIM_TI2_ConfigInputStage>
      break;
 8008c54:	e000      	b.n	8008c58 <TIM_SlaveTimer_SetConfig+0x164>
      break;
 8008c56:	bf00      	nop
  }
  return HAL_OK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3718      	adds	r7, #24
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	ffcfff8f 	.word	0xffcfff8f
 8008c68:	fffefff8 	.word	0xfffefff8
 8008c6c:	00100050 	.word	0x00100050
 8008c70:	00100020 	.word	0x00100020
 8008c74:	00100030 	.word	0x00100030
 8008c78:	00100040 	.word	0x00100040
 8008c7c:	00100070 	.word	0x00100070
 8008c80:	00100060 	.word	0x00100060
 8008c84:	00200010 	.word	0x00200010

08008c88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b087      	sub	sp, #28
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	6a1b      	ldr	r3, [r3, #32]
 8008c98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	6a1b      	ldr	r3, [r3, #32]
 8008c9e:	f023 0201 	bic.w	r2, r3, #1
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	699b      	ldr	r3, [r3, #24]
 8008caa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008cb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	011b      	lsls	r3, r3, #4
 8008cb8:	693a      	ldr	r2, [r7, #16]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	f023 030a 	bic.w	r3, r3, #10
 8008cc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008cc6:	697a      	ldr	r2, [r7, #20]
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	693a      	ldr	r2, [r7, #16]
 8008cd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	697a      	ldr	r2, [r7, #20]
 8008cd8:	621a      	str	r2, [r3, #32]
}
 8008cda:	bf00      	nop
 8008cdc:	371c      	adds	r7, #28
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr

08008ce6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ce6:	b480      	push	{r7}
 8008ce8:	b087      	sub	sp, #28
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	60f8      	str	r0, [r7, #12]
 8008cee:	60b9      	str	r1, [r7, #8]
 8008cf0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	6a1b      	ldr	r3, [r3, #32]
 8008cf6:	f023 0210 	bic.w	r2, r3, #16
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	699b      	ldr	r3, [r3, #24]
 8008d02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6a1b      	ldr	r3, [r3, #32]
 8008d08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	031b      	lsls	r3, r3, #12
 8008d16:	697a      	ldr	r2, [r7, #20]
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	011b      	lsls	r3, r3, #4
 8008d28:	693a      	ldr	r2, [r7, #16]
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	697a      	ldr	r2, [r7, #20]
 8008d32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	693a      	ldr	r2, [r7, #16]
 8008d38:	621a      	str	r2, [r3, #32]
}
 8008d3a:	bf00      	nop
 8008d3c:	371c      	adds	r7, #28
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr

08008d46 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d46:	b480      	push	{r7}
 8008d48:	b087      	sub	sp, #28
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	60f8      	str	r0, [r7, #12]
 8008d4e:	60b9      	str	r1, [r7, #8]
 8008d50:	607a      	str	r2, [r7, #4]
 8008d52:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d60:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	021a      	lsls	r2, r3, #8
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	431a      	orrs	r2, r3
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	697a      	ldr	r2, [r7, #20]
 8008d70:	4313      	orrs	r3, r2
 8008d72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	697a      	ldr	r2, [r7, #20]
 8008d78:	609a      	str	r2, [r3, #8]
}
 8008d7a:	bf00      	nop
 8008d7c:	371c      	adds	r7, #28
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr
	...

08008d88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b085      	sub	sp, #20
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d101      	bne.n	8008da0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d9c:	2302      	movs	r3, #2
 8008d9e:	e068      	b.n	8008e72 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2202      	movs	r2, #2
 8008dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a2e      	ldr	r2, [pc, #184]	; (8008e80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d004      	beq.n	8008dd4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a2d      	ldr	r2, [pc, #180]	; (8008e84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d108      	bne.n	8008de6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008dda:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	68fa      	ldr	r2, [r7, #12]
 8008de2:	4313      	orrs	r3, r2
 8008de4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	68fa      	ldr	r2, [r7, #12]
 8008df4:	4313      	orrs	r3, r2
 8008df6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	68fa      	ldr	r2, [r7, #12]
 8008dfe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a1e      	ldr	r2, [pc, #120]	; (8008e80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d01d      	beq.n	8008e46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e12:	d018      	beq.n	8008e46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a1b      	ldr	r2, [pc, #108]	; (8008e88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d013      	beq.n	8008e46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a1a      	ldr	r2, [pc, #104]	; (8008e8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d00e      	beq.n	8008e46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a18      	ldr	r2, [pc, #96]	; (8008e90 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d009      	beq.n	8008e46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a13      	ldr	r2, [pc, #76]	; (8008e84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d004      	beq.n	8008e46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a14      	ldr	r2, [pc, #80]	; (8008e94 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d10c      	bne.n	8008e60 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	68ba      	ldr	r2, [r7, #8]
 8008e54:	4313      	orrs	r3, r2
 8008e56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	68ba      	ldr	r2, [r7, #8]
 8008e5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3714      	adds	r7, #20
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	40010000 	.word	0x40010000
 8008e84:	40010400 	.word	0x40010400
 8008e88:	40000400 	.word	0x40000400
 8008e8c:	40000800 	.word	0x40000800
 8008e90:	40000c00 	.word	0x40000c00
 8008e94:	40001800 	.word	0x40001800

08008e98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008eb4:	bf00      	nop
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008ec8:	bf00      	nop
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d101      	bne.n	8008ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e042      	b.n	8008f6c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d106      	bne.n	8008efe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f7f8 fbf3 	bl	80016e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2224      	movs	r2, #36	; 0x24
 8008f02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f022 0201 	bic.w	r2, r2, #1
 8008f14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 f82c 	bl	8008f74 <UART_SetConfig>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d101      	bne.n	8008f26 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	e022      	b.n	8008f6c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d002      	beq.n	8008f34 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 fecc 	bl	8009ccc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	685a      	ldr	r2, [r3, #4]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008f42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	689a      	ldr	r2, [r3, #8]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008f52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f042 0201 	orr.w	r2, r2, #1
 8008f62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 ff53 	bl	8009e10 <UART_CheckIdleState>
 8008f6a:	4603      	mov	r3, r0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3708      	adds	r7, #8
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f74:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008f78:	b08e      	sub	sp, #56	; 0x38
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	689a      	ldr	r2, [r3, #8]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	691b      	ldr	r3, [r3, #16]
 8008f8c:	431a      	orrs	r2, r3
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	695b      	ldr	r3, [r3, #20]
 8008f92:	431a      	orrs	r2, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	69db      	ldr	r3, [r3, #28]
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	4bc1      	ldr	r3, [pc, #772]	; (80092b4 <UART_SetConfig+0x340>)
 8008fae:	4013      	ands	r3, r2
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	6812      	ldr	r2, [r2, #0]
 8008fb4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008fb6:	430b      	orrs	r3, r1
 8008fb8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	68da      	ldr	r2, [r3, #12]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	430a      	orrs	r2, r1
 8008fce:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	699b      	ldr	r3, [r3, #24]
 8008fd4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4ab7      	ldr	r2, [pc, #732]	; (80092b8 <UART_SetConfig+0x344>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d004      	beq.n	8008fea <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6a1b      	ldr	r3, [r3, #32]
 8008fe4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	689a      	ldr	r2, [r3, #8]
 8008ff0:	4bb2      	ldr	r3, [pc, #712]	; (80092bc <UART_SetConfig+0x348>)
 8008ff2:	4013      	ands	r3, r2
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	6812      	ldr	r2, [r2, #0]
 8008ff8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008ffa:	430b      	orrs	r3, r1
 8008ffc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009004:	f023 010f 	bic.w	r1, r3, #15
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	430a      	orrs	r2, r1
 8009012:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4aa9      	ldr	r2, [pc, #676]	; (80092c0 <UART_SetConfig+0x34c>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d177      	bne.n	800910e <UART_SetConfig+0x19a>
 800901e:	4ba9      	ldr	r3, [pc, #676]	; (80092c4 <UART_SetConfig+0x350>)
 8009020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009022:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009026:	2b28      	cmp	r3, #40	; 0x28
 8009028:	d86c      	bhi.n	8009104 <UART_SetConfig+0x190>
 800902a:	a201      	add	r2, pc, #4	; (adr r2, 8009030 <UART_SetConfig+0xbc>)
 800902c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009030:	080090d5 	.word	0x080090d5
 8009034:	08009105 	.word	0x08009105
 8009038:	08009105 	.word	0x08009105
 800903c:	08009105 	.word	0x08009105
 8009040:	08009105 	.word	0x08009105
 8009044:	08009105 	.word	0x08009105
 8009048:	08009105 	.word	0x08009105
 800904c:	08009105 	.word	0x08009105
 8009050:	080090dd 	.word	0x080090dd
 8009054:	08009105 	.word	0x08009105
 8009058:	08009105 	.word	0x08009105
 800905c:	08009105 	.word	0x08009105
 8009060:	08009105 	.word	0x08009105
 8009064:	08009105 	.word	0x08009105
 8009068:	08009105 	.word	0x08009105
 800906c:	08009105 	.word	0x08009105
 8009070:	080090e5 	.word	0x080090e5
 8009074:	08009105 	.word	0x08009105
 8009078:	08009105 	.word	0x08009105
 800907c:	08009105 	.word	0x08009105
 8009080:	08009105 	.word	0x08009105
 8009084:	08009105 	.word	0x08009105
 8009088:	08009105 	.word	0x08009105
 800908c:	08009105 	.word	0x08009105
 8009090:	080090ed 	.word	0x080090ed
 8009094:	08009105 	.word	0x08009105
 8009098:	08009105 	.word	0x08009105
 800909c:	08009105 	.word	0x08009105
 80090a0:	08009105 	.word	0x08009105
 80090a4:	08009105 	.word	0x08009105
 80090a8:	08009105 	.word	0x08009105
 80090ac:	08009105 	.word	0x08009105
 80090b0:	080090f5 	.word	0x080090f5
 80090b4:	08009105 	.word	0x08009105
 80090b8:	08009105 	.word	0x08009105
 80090bc:	08009105 	.word	0x08009105
 80090c0:	08009105 	.word	0x08009105
 80090c4:	08009105 	.word	0x08009105
 80090c8:	08009105 	.word	0x08009105
 80090cc:	08009105 	.word	0x08009105
 80090d0:	080090fd 	.word	0x080090fd
 80090d4:	2301      	movs	r3, #1
 80090d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090da:	e339      	b.n	8009750 <UART_SetConfig+0x7dc>
 80090dc:	2304      	movs	r3, #4
 80090de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090e2:	e335      	b.n	8009750 <UART_SetConfig+0x7dc>
 80090e4:	2308      	movs	r3, #8
 80090e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090ea:	e331      	b.n	8009750 <UART_SetConfig+0x7dc>
 80090ec:	2310      	movs	r3, #16
 80090ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090f2:	e32d      	b.n	8009750 <UART_SetConfig+0x7dc>
 80090f4:	2320      	movs	r3, #32
 80090f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090fa:	e329      	b.n	8009750 <UART_SetConfig+0x7dc>
 80090fc:	2340      	movs	r3, #64	; 0x40
 80090fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009102:	e325      	b.n	8009750 <UART_SetConfig+0x7dc>
 8009104:	2380      	movs	r3, #128	; 0x80
 8009106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800910a:	bf00      	nop
 800910c:	e320      	b.n	8009750 <UART_SetConfig+0x7dc>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a6d      	ldr	r2, [pc, #436]	; (80092c8 <UART_SetConfig+0x354>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d132      	bne.n	800917e <UART_SetConfig+0x20a>
 8009118:	4b6a      	ldr	r3, [pc, #424]	; (80092c4 <UART_SetConfig+0x350>)
 800911a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800911c:	f003 0307 	and.w	r3, r3, #7
 8009120:	2b05      	cmp	r3, #5
 8009122:	d827      	bhi.n	8009174 <UART_SetConfig+0x200>
 8009124:	a201      	add	r2, pc, #4	; (adr r2, 800912c <UART_SetConfig+0x1b8>)
 8009126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800912a:	bf00      	nop
 800912c:	08009145 	.word	0x08009145
 8009130:	0800914d 	.word	0x0800914d
 8009134:	08009155 	.word	0x08009155
 8009138:	0800915d 	.word	0x0800915d
 800913c:	08009165 	.word	0x08009165
 8009140:	0800916d 	.word	0x0800916d
 8009144:	2300      	movs	r3, #0
 8009146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800914a:	e301      	b.n	8009750 <UART_SetConfig+0x7dc>
 800914c:	2304      	movs	r3, #4
 800914e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009152:	e2fd      	b.n	8009750 <UART_SetConfig+0x7dc>
 8009154:	2308      	movs	r3, #8
 8009156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800915a:	e2f9      	b.n	8009750 <UART_SetConfig+0x7dc>
 800915c:	2310      	movs	r3, #16
 800915e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009162:	e2f5      	b.n	8009750 <UART_SetConfig+0x7dc>
 8009164:	2320      	movs	r3, #32
 8009166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800916a:	e2f1      	b.n	8009750 <UART_SetConfig+0x7dc>
 800916c:	2340      	movs	r3, #64	; 0x40
 800916e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009172:	e2ed      	b.n	8009750 <UART_SetConfig+0x7dc>
 8009174:	2380      	movs	r3, #128	; 0x80
 8009176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800917a:	bf00      	nop
 800917c:	e2e8      	b.n	8009750 <UART_SetConfig+0x7dc>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a52      	ldr	r2, [pc, #328]	; (80092cc <UART_SetConfig+0x358>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d132      	bne.n	80091ee <UART_SetConfig+0x27a>
 8009188:	4b4e      	ldr	r3, [pc, #312]	; (80092c4 <UART_SetConfig+0x350>)
 800918a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800918c:	f003 0307 	and.w	r3, r3, #7
 8009190:	2b05      	cmp	r3, #5
 8009192:	d827      	bhi.n	80091e4 <UART_SetConfig+0x270>
 8009194:	a201      	add	r2, pc, #4	; (adr r2, 800919c <UART_SetConfig+0x228>)
 8009196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800919a:	bf00      	nop
 800919c:	080091b5 	.word	0x080091b5
 80091a0:	080091bd 	.word	0x080091bd
 80091a4:	080091c5 	.word	0x080091c5
 80091a8:	080091cd 	.word	0x080091cd
 80091ac:	080091d5 	.word	0x080091d5
 80091b0:	080091dd 	.word	0x080091dd
 80091b4:	2300      	movs	r3, #0
 80091b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091ba:	e2c9      	b.n	8009750 <UART_SetConfig+0x7dc>
 80091bc:	2304      	movs	r3, #4
 80091be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091c2:	e2c5      	b.n	8009750 <UART_SetConfig+0x7dc>
 80091c4:	2308      	movs	r3, #8
 80091c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091ca:	e2c1      	b.n	8009750 <UART_SetConfig+0x7dc>
 80091cc:	2310      	movs	r3, #16
 80091ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091d2:	e2bd      	b.n	8009750 <UART_SetConfig+0x7dc>
 80091d4:	2320      	movs	r3, #32
 80091d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091da:	e2b9      	b.n	8009750 <UART_SetConfig+0x7dc>
 80091dc:	2340      	movs	r3, #64	; 0x40
 80091de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091e2:	e2b5      	b.n	8009750 <UART_SetConfig+0x7dc>
 80091e4:	2380      	movs	r3, #128	; 0x80
 80091e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091ea:	bf00      	nop
 80091ec:	e2b0      	b.n	8009750 <UART_SetConfig+0x7dc>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a37      	ldr	r2, [pc, #220]	; (80092d0 <UART_SetConfig+0x35c>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d132      	bne.n	800925e <UART_SetConfig+0x2ea>
 80091f8:	4b32      	ldr	r3, [pc, #200]	; (80092c4 <UART_SetConfig+0x350>)
 80091fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091fc:	f003 0307 	and.w	r3, r3, #7
 8009200:	2b05      	cmp	r3, #5
 8009202:	d827      	bhi.n	8009254 <UART_SetConfig+0x2e0>
 8009204:	a201      	add	r2, pc, #4	; (adr r2, 800920c <UART_SetConfig+0x298>)
 8009206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800920a:	bf00      	nop
 800920c:	08009225 	.word	0x08009225
 8009210:	0800922d 	.word	0x0800922d
 8009214:	08009235 	.word	0x08009235
 8009218:	0800923d 	.word	0x0800923d
 800921c:	08009245 	.word	0x08009245
 8009220:	0800924d 	.word	0x0800924d
 8009224:	2300      	movs	r3, #0
 8009226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800922a:	e291      	b.n	8009750 <UART_SetConfig+0x7dc>
 800922c:	2304      	movs	r3, #4
 800922e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009232:	e28d      	b.n	8009750 <UART_SetConfig+0x7dc>
 8009234:	2308      	movs	r3, #8
 8009236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800923a:	e289      	b.n	8009750 <UART_SetConfig+0x7dc>
 800923c:	2310      	movs	r3, #16
 800923e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009242:	e285      	b.n	8009750 <UART_SetConfig+0x7dc>
 8009244:	2320      	movs	r3, #32
 8009246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800924a:	e281      	b.n	8009750 <UART_SetConfig+0x7dc>
 800924c:	2340      	movs	r3, #64	; 0x40
 800924e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009252:	e27d      	b.n	8009750 <UART_SetConfig+0x7dc>
 8009254:	2380      	movs	r3, #128	; 0x80
 8009256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800925a:	bf00      	nop
 800925c:	e278      	b.n	8009750 <UART_SetConfig+0x7dc>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a1c      	ldr	r2, [pc, #112]	; (80092d4 <UART_SetConfig+0x360>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d144      	bne.n	80092f2 <UART_SetConfig+0x37e>
 8009268:	4b16      	ldr	r3, [pc, #88]	; (80092c4 <UART_SetConfig+0x350>)
 800926a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800926c:	f003 0307 	and.w	r3, r3, #7
 8009270:	2b05      	cmp	r3, #5
 8009272:	d839      	bhi.n	80092e8 <UART_SetConfig+0x374>
 8009274:	a201      	add	r2, pc, #4	; (adr r2, 800927c <UART_SetConfig+0x308>)
 8009276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800927a:	bf00      	nop
 800927c:	08009295 	.word	0x08009295
 8009280:	0800929d 	.word	0x0800929d
 8009284:	080092a5 	.word	0x080092a5
 8009288:	080092ad 	.word	0x080092ad
 800928c:	080092d9 	.word	0x080092d9
 8009290:	080092e1 	.word	0x080092e1
 8009294:	2300      	movs	r3, #0
 8009296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800929a:	e259      	b.n	8009750 <UART_SetConfig+0x7dc>
 800929c:	2304      	movs	r3, #4
 800929e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092a2:	e255      	b.n	8009750 <UART_SetConfig+0x7dc>
 80092a4:	2308      	movs	r3, #8
 80092a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092aa:	e251      	b.n	8009750 <UART_SetConfig+0x7dc>
 80092ac:	2310      	movs	r3, #16
 80092ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092b2:	e24d      	b.n	8009750 <UART_SetConfig+0x7dc>
 80092b4:	cfff69f3 	.word	0xcfff69f3
 80092b8:	58000c00 	.word	0x58000c00
 80092bc:	11fff4ff 	.word	0x11fff4ff
 80092c0:	40011000 	.word	0x40011000
 80092c4:	58024400 	.word	0x58024400
 80092c8:	40004400 	.word	0x40004400
 80092cc:	40004800 	.word	0x40004800
 80092d0:	40004c00 	.word	0x40004c00
 80092d4:	40005000 	.word	0x40005000
 80092d8:	2320      	movs	r3, #32
 80092da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092de:	e237      	b.n	8009750 <UART_SetConfig+0x7dc>
 80092e0:	2340      	movs	r3, #64	; 0x40
 80092e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092e6:	e233      	b.n	8009750 <UART_SetConfig+0x7dc>
 80092e8:	2380      	movs	r3, #128	; 0x80
 80092ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092ee:	bf00      	nop
 80092f0:	e22e      	b.n	8009750 <UART_SetConfig+0x7dc>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4ab5      	ldr	r2, [pc, #724]	; (80095cc <UART_SetConfig+0x658>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d178      	bne.n	80093ee <UART_SetConfig+0x47a>
 80092fc:	4bb4      	ldr	r3, [pc, #720]	; (80095d0 <UART_SetConfig+0x65c>)
 80092fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009300:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009304:	2b28      	cmp	r3, #40	; 0x28
 8009306:	d86d      	bhi.n	80093e4 <UART_SetConfig+0x470>
 8009308:	a201      	add	r2, pc, #4	; (adr r2, 8009310 <UART_SetConfig+0x39c>)
 800930a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800930e:	bf00      	nop
 8009310:	080093b5 	.word	0x080093b5
 8009314:	080093e5 	.word	0x080093e5
 8009318:	080093e5 	.word	0x080093e5
 800931c:	080093e5 	.word	0x080093e5
 8009320:	080093e5 	.word	0x080093e5
 8009324:	080093e5 	.word	0x080093e5
 8009328:	080093e5 	.word	0x080093e5
 800932c:	080093e5 	.word	0x080093e5
 8009330:	080093bd 	.word	0x080093bd
 8009334:	080093e5 	.word	0x080093e5
 8009338:	080093e5 	.word	0x080093e5
 800933c:	080093e5 	.word	0x080093e5
 8009340:	080093e5 	.word	0x080093e5
 8009344:	080093e5 	.word	0x080093e5
 8009348:	080093e5 	.word	0x080093e5
 800934c:	080093e5 	.word	0x080093e5
 8009350:	080093c5 	.word	0x080093c5
 8009354:	080093e5 	.word	0x080093e5
 8009358:	080093e5 	.word	0x080093e5
 800935c:	080093e5 	.word	0x080093e5
 8009360:	080093e5 	.word	0x080093e5
 8009364:	080093e5 	.word	0x080093e5
 8009368:	080093e5 	.word	0x080093e5
 800936c:	080093e5 	.word	0x080093e5
 8009370:	080093cd 	.word	0x080093cd
 8009374:	080093e5 	.word	0x080093e5
 8009378:	080093e5 	.word	0x080093e5
 800937c:	080093e5 	.word	0x080093e5
 8009380:	080093e5 	.word	0x080093e5
 8009384:	080093e5 	.word	0x080093e5
 8009388:	080093e5 	.word	0x080093e5
 800938c:	080093e5 	.word	0x080093e5
 8009390:	080093d5 	.word	0x080093d5
 8009394:	080093e5 	.word	0x080093e5
 8009398:	080093e5 	.word	0x080093e5
 800939c:	080093e5 	.word	0x080093e5
 80093a0:	080093e5 	.word	0x080093e5
 80093a4:	080093e5 	.word	0x080093e5
 80093a8:	080093e5 	.word	0x080093e5
 80093ac:	080093e5 	.word	0x080093e5
 80093b0:	080093dd 	.word	0x080093dd
 80093b4:	2301      	movs	r3, #1
 80093b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093ba:	e1c9      	b.n	8009750 <UART_SetConfig+0x7dc>
 80093bc:	2304      	movs	r3, #4
 80093be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093c2:	e1c5      	b.n	8009750 <UART_SetConfig+0x7dc>
 80093c4:	2308      	movs	r3, #8
 80093c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093ca:	e1c1      	b.n	8009750 <UART_SetConfig+0x7dc>
 80093cc:	2310      	movs	r3, #16
 80093ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093d2:	e1bd      	b.n	8009750 <UART_SetConfig+0x7dc>
 80093d4:	2320      	movs	r3, #32
 80093d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093da:	e1b9      	b.n	8009750 <UART_SetConfig+0x7dc>
 80093dc:	2340      	movs	r3, #64	; 0x40
 80093de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093e2:	e1b5      	b.n	8009750 <UART_SetConfig+0x7dc>
 80093e4:	2380      	movs	r3, #128	; 0x80
 80093e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093ea:	bf00      	nop
 80093ec:	e1b0      	b.n	8009750 <UART_SetConfig+0x7dc>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a78      	ldr	r2, [pc, #480]	; (80095d4 <UART_SetConfig+0x660>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d132      	bne.n	800945e <UART_SetConfig+0x4ea>
 80093f8:	4b75      	ldr	r3, [pc, #468]	; (80095d0 <UART_SetConfig+0x65c>)
 80093fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093fc:	f003 0307 	and.w	r3, r3, #7
 8009400:	2b05      	cmp	r3, #5
 8009402:	d827      	bhi.n	8009454 <UART_SetConfig+0x4e0>
 8009404:	a201      	add	r2, pc, #4	; (adr r2, 800940c <UART_SetConfig+0x498>)
 8009406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800940a:	bf00      	nop
 800940c:	08009425 	.word	0x08009425
 8009410:	0800942d 	.word	0x0800942d
 8009414:	08009435 	.word	0x08009435
 8009418:	0800943d 	.word	0x0800943d
 800941c:	08009445 	.word	0x08009445
 8009420:	0800944d 	.word	0x0800944d
 8009424:	2300      	movs	r3, #0
 8009426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800942a:	e191      	b.n	8009750 <UART_SetConfig+0x7dc>
 800942c:	2304      	movs	r3, #4
 800942e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009432:	e18d      	b.n	8009750 <UART_SetConfig+0x7dc>
 8009434:	2308      	movs	r3, #8
 8009436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800943a:	e189      	b.n	8009750 <UART_SetConfig+0x7dc>
 800943c:	2310      	movs	r3, #16
 800943e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009442:	e185      	b.n	8009750 <UART_SetConfig+0x7dc>
 8009444:	2320      	movs	r3, #32
 8009446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800944a:	e181      	b.n	8009750 <UART_SetConfig+0x7dc>
 800944c:	2340      	movs	r3, #64	; 0x40
 800944e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009452:	e17d      	b.n	8009750 <UART_SetConfig+0x7dc>
 8009454:	2380      	movs	r3, #128	; 0x80
 8009456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800945a:	bf00      	nop
 800945c:	e178      	b.n	8009750 <UART_SetConfig+0x7dc>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a5d      	ldr	r2, [pc, #372]	; (80095d8 <UART_SetConfig+0x664>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d132      	bne.n	80094ce <UART_SetConfig+0x55a>
 8009468:	4b59      	ldr	r3, [pc, #356]	; (80095d0 <UART_SetConfig+0x65c>)
 800946a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800946c:	f003 0307 	and.w	r3, r3, #7
 8009470:	2b05      	cmp	r3, #5
 8009472:	d827      	bhi.n	80094c4 <UART_SetConfig+0x550>
 8009474:	a201      	add	r2, pc, #4	; (adr r2, 800947c <UART_SetConfig+0x508>)
 8009476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800947a:	bf00      	nop
 800947c:	08009495 	.word	0x08009495
 8009480:	0800949d 	.word	0x0800949d
 8009484:	080094a5 	.word	0x080094a5
 8009488:	080094ad 	.word	0x080094ad
 800948c:	080094b5 	.word	0x080094b5
 8009490:	080094bd 	.word	0x080094bd
 8009494:	2300      	movs	r3, #0
 8009496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800949a:	e159      	b.n	8009750 <UART_SetConfig+0x7dc>
 800949c:	2304      	movs	r3, #4
 800949e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094a2:	e155      	b.n	8009750 <UART_SetConfig+0x7dc>
 80094a4:	2308      	movs	r3, #8
 80094a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094aa:	e151      	b.n	8009750 <UART_SetConfig+0x7dc>
 80094ac:	2310      	movs	r3, #16
 80094ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094b2:	e14d      	b.n	8009750 <UART_SetConfig+0x7dc>
 80094b4:	2320      	movs	r3, #32
 80094b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094ba:	e149      	b.n	8009750 <UART_SetConfig+0x7dc>
 80094bc:	2340      	movs	r3, #64	; 0x40
 80094be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094c2:	e145      	b.n	8009750 <UART_SetConfig+0x7dc>
 80094c4:	2380      	movs	r3, #128	; 0x80
 80094c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094ca:	bf00      	nop
 80094cc:	e140      	b.n	8009750 <UART_SetConfig+0x7dc>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a42      	ldr	r2, [pc, #264]	; (80095dc <UART_SetConfig+0x668>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	f040 8083 	bne.w	80095e0 <UART_SetConfig+0x66c>
 80094da:	4b3d      	ldr	r3, [pc, #244]	; (80095d0 <UART_SetConfig+0x65c>)
 80094dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80094e2:	2b28      	cmp	r3, #40	; 0x28
 80094e4:	d86c      	bhi.n	80095c0 <UART_SetConfig+0x64c>
 80094e6:	a201      	add	r2, pc, #4	; (adr r2, 80094ec <UART_SetConfig+0x578>)
 80094e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ec:	08009591 	.word	0x08009591
 80094f0:	080095c1 	.word	0x080095c1
 80094f4:	080095c1 	.word	0x080095c1
 80094f8:	080095c1 	.word	0x080095c1
 80094fc:	080095c1 	.word	0x080095c1
 8009500:	080095c1 	.word	0x080095c1
 8009504:	080095c1 	.word	0x080095c1
 8009508:	080095c1 	.word	0x080095c1
 800950c:	08009599 	.word	0x08009599
 8009510:	080095c1 	.word	0x080095c1
 8009514:	080095c1 	.word	0x080095c1
 8009518:	080095c1 	.word	0x080095c1
 800951c:	080095c1 	.word	0x080095c1
 8009520:	080095c1 	.word	0x080095c1
 8009524:	080095c1 	.word	0x080095c1
 8009528:	080095c1 	.word	0x080095c1
 800952c:	080095a1 	.word	0x080095a1
 8009530:	080095c1 	.word	0x080095c1
 8009534:	080095c1 	.word	0x080095c1
 8009538:	080095c1 	.word	0x080095c1
 800953c:	080095c1 	.word	0x080095c1
 8009540:	080095c1 	.word	0x080095c1
 8009544:	080095c1 	.word	0x080095c1
 8009548:	080095c1 	.word	0x080095c1
 800954c:	080095a9 	.word	0x080095a9
 8009550:	080095c1 	.word	0x080095c1
 8009554:	080095c1 	.word	0x080095c1
 8009558:	080095c1 	.word	0x080095c1
 800955c:	080095c1 	.word	0x080095c1
 8009560:	080095c1 	.word	0x080095c1
 8009564:	080095c1 	.word	0x080095c1
 8009568:	080095c1 	.word	0x080095c1
 800956c:	080095b1 	.word	0x080095b1
 8009570:	080095c1 	.word	0x080095c1
 8009574:	080095c1 	.word	0x080095c1
 8009578:	080095c1 	.word	0x080095c1
 800957c:	080095c1 	.word	0x080095c1
 8009580:	080095c1 	.word	0x080095c1
 8009584:	080095c1 	.word	0x080095c1
 8009588:	080095c1 	.word	0x080095c1
 800958c:	080095b9 	.word	0x080095b9
 8009590:	2301      	movs	r3, #1
 8009592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009596:	e0db      	b.n	8009750 <UART_SetConfig+0x7dc>
 8009598:	2304      	movs	r3, #4
 800959a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800959e:	e0d7      	b.n	8009750 <UART_SetConfig+0x7dc>
 80095a0:	2308      	movs	r3, #8
 80095a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095a6:	e0d3      	b.n	8009750 <UART_SetConfig+0x7dc>
 80095a8:	2310      	movs	r3, #16
 80095aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095ae:	e0cf      	b.n	8009750 <UART_SetConfig+0x7dc>
 80095b0:	2320      	movs	r3, #32
 80095b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095b6:	e0cb      	b.n	8009750 <UART_SetConfig+0x7dc>
 80095b8:	2340      	movs	r3, #64	; 0x40
 80095ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095be:	e0c7      	b.n	8009750 <UART_SetConfig+0x7dc>
 80095c0:	2380      	movs	r3, #128	; 0x80
 80095c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095c6:	bf00      	nop
 80095c8:	e0c2      	b.n	8009750 <UART_SetConfig+0x7dc>
 80095ca:	bf00      	nop
 80095cc:	40011400 	.word	0x40011400
 80095d0:	58024400 	.word	0x58024400
 80095d4:	40007800 	.word	0x40007800
 80095d8:	40007c00 	.word	0x40007c00
 80095dc:	40011800 	.word	0x40011800
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4ab2      	ldr	r2, [pc, #712]	; (80098b0 <UART_SetConfig+0x93c>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d177      	bne.n	80096da <UART_SetConfig+0x766>
 80095ea:	4bb2      	ldr	r3, [pc, #712]	; (80098b4 <UART_SetConfig+0x940>)
 80095ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80095f2:	2b28      	cmp	r3, #40	; 0x28
 80095f4:	d86c      	bhi.n	80096d0 <UART_SetConfig+0x75c>
 80095f6:	a201      	add	r2, pc, #4	; (adr r2, 80095fc <UART_SetConfig+0x688>)
 80095f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095fc:	080096a1 	.word	0x080096a1
 8009600:	080096d1 	.word	0x080096d1
 8009604:	080096d1 	.word	0x080096d1
 8009608:	080096d1 	.word	0x080096d1
 800960c:	080096d1 	.word	0x080096d1
 8009610:	080096d1 	.word	0x080096d1
 8009614:	080096d1 	.word	0x080096d1
 8009618:	080096d1 	.word	0x080096d1
 800961c:	080096a9 	.word	0x080096a9
 8009620:	080096d1 	.word	0x080096d1
 8009624:	080096d1 	.word	0x080096d1
 8009628:	080096d1 	.word	0x080096d1
 800962c:	080096d1 	.word	0x080096d1
 8009630:	080096d1 	.word	0x080096d1
 8009634:	080096d1 	.word	0x080096d1
 8009638:	080096d1 	.word	0x080096d1
 800963c:	080096b1 	.word	0x080096b1
 8009640:	080096d1 	.word	0x080096d1
 8009644:	080096d1 	.word	0x080096d1
 8009648:	080096d1 	.word	0x080096d1
 800964c:	080096d1 	.word	0x080096d1
 8009650:	080096d1 	.word	0x080096d1
 8009654:	080096d1 	.word	0x080096d1
 8009658:	080096d1 	.word	0x080096d1
 800965c:	080096b9 	.word	0x080096b9
 8009660:	080096d1 	.word	0x080096d1
 8009664:	080096d1 	.word	0x080096d1
 8009668:	080096d1 	.word	0x080096d1
 800966c:	080096d1 	.word	0x080096d1
 8009670:	080096d1 	.word	0x080096d1
 8009674:	080096d1 	.word	0x080096d1
 8009678:	080096d1 	.word	0x080096d1
 800967c:	080096c1 	.word	0x080096c1
 8009680:	080096d1 	.word	0x080096d1
 8009684:	080096d1 	.word	0x080096d1
 8009688:	080096d1 	.word	0x080096d1
 800968c:	080096d1 	.word	0x080096d1
 8009690:	080096d1 	.word	0x080096d1
 8009694:	080096d1 	.word	0x080096d1
 8009698:	080096d1 	.word	0x080096d1
 800969c:	080096c9 	.word	0x080096c9
 80096a0:	2301      	movs	r3, #1
 80096a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096a6:	e053      	b.n	8009750 <UART_SetConfig+0x7dc>
 80096a8:	2304      	movs	r3, #4
 80096aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ae:	e04f      	b.n	8009750 <UART_SetConfig+0x7dc>
 80096b0:	2308      	movs	r3, #8
 80096b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096b6:	e04b      	b.n	8009750 <UART_SetConfig+0x7dc>
 80096b8:	2310      	movs	r3, #16
 80096ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096be:	e047      	b.n	8009750 <UART_SetConfig+0x7dc>
 80096c0:	2320      	movs	r3, #32
 80096c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096c6:	e043      	b.n	8009750 <UART_SetConfig+0x7dc>
 80096c8:	2340      	movs	r3, #64	; 0x40
 80096ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ce:	e03f      	b.n	8009750 <UART_SetConfig+0x7dc>
 80096d0:	2380      	movs	r3, #128	; 0x80
 80096d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096d6:	bf00      	nop
 80096d8:	e03a      	b.n	8009750 <UART_SetConfig+0x7dc>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a76      	ldr	r2, [pc, #472]	; (80098b8 <UART_SetConfig+0x944>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d132      	bne.n	800974a <UART_SetConfig+0x7d6>
 80096e4:	4b73      	ldr	r3, [pc, #460]	; (80098b4 <UART_SetConfig+0x940>)
 80096e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096e8:	f003 0307 	and.w	r3, r3, #7
 80096ec:	2b05      	cmp	r3, #5
 80096ee:	d827      	bhi.n	8009740 <UART_SetConfig+0x7cc>
 80096f0:	a201      	add	r2, pc, #4	; (adr r2, 80096f8 <UART_SetConfig+0x784>)
 80096f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f6:	bf00      	nop
 80096f8:	08009711 	.word	0x08009711
 80096fc:	08009719 	.word	0x08009719
 8009700:	08009721 	.word	0x08009721
 8009704:	08009729 	.word	0x08009729
 8009708:	08009731 	.word	0x08009731
 800970c:	08009739 	.word	0x08009739
 8009710:	2302      	movs	r3, #2
 8009712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009716:	e01b      	b.n	8009750 <UART_SetConfig+0x7dc>
 8009718:	2304      	movs	r3, #4
 800971a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800971e:	e017      	b.n	8009750 <UART_SetConfig+0x7dc>
 8009720:	2308      	movs	r3, #8
 8009722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009726:	e013      	b.n	8009750 <UART_SetConfig+0x7dc>
 8009728:	2310      	movs	r3, #16
 800972a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800972e:	e00f      	b.n	8009750 <UART_SetConfig+0x7dc>
 8009730:	2320      	movs	r3, #32
 8009732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009736:	e00b      	b.n	8009750 <UART_SetConfig+0x7dc>
 8009738:	2340      	movs	r3, #64	; 0x40
 800973a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800973e:	e007      	b.n	8009750 <UART_SetConfig+0x7dc>
 8009740:	2380      	movs	r3, #128	; 0x80
 8009742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009746:	bf00      	nop
 8009748:	e002      	b.n	8009750 <UART_SetConfig+0x7dc>
 800974a:	2380      	movs	r3, #128	; 0x80
 800974c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a58      	ldr	r2, [pc, #352]	; (80098b8 <UART_SetConfig+0x944>)
 8009756:	4293      	cmp	r3, r2
 8009758:	f040 80b6 	bne.w	80098c8 <UART_SetConfig+0x954>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800975c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009760:	2b08      	cmp	r3, #8
 8009762:	d019      	beq.n	8009798 <UART_SetConfig+0x824>
 8009764:	2b08      	cmp	r3, #8
 8009766:	dc04      	bgt.n	8009772 <UART_SetConfig+0x7fe>
 8009768:	2b02      	cmp	r3, #2
 800976a:	d009      	beq.n	8009780 <UART_SetConfig+0x80c>
 800976c:	2b04      	cmp	r3, #4
 800976e:	d00b      	beq.n	8009788 <UART_SetConfig+0x814>
 8009770:	e034      	b.n	80097dc <UART_SetConfig+0x868>
 8009772:	2b20      	cmp	r3, #32
 8009774:	d02b      	beq.n	80097ce <UART_SetConfig+0x85a>
 8009776:	2b40      	cmp	r3, #64	; 0x40
 8009778:	d02c      	beq.n	80097d4 <UART_SetConfig+0x860>
 800977a:	2b10      	cmp	r3, #16
 800977c:	d014      	beq.n	80097a8 <UART_SetConfig+0x834>
 800977e:	e02d      	b.n	80097dc <UART_SetConfig+0x868>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009780:	f7fe f97a 	bl	8007a78 <HAL_RCCEx_GetD3PCLK1Freq>
 8009784:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009786:	e02f      	b.n	80097e8 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009788:	f107 0314 	add.w	r3, r7, #20
 800978c:	4618      	mov	r0, r3
 800978e:	f7fe f989 	bl	8007aa4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009792:	69bb      	ldr	r3, [r7, #24]
 8009794:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009796:	e027      	b.n	80097e8 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009798:	f107 0308 	add.w	r3, r7, #8
 800979c:	4618      	mov	r0, r3
 800979e:	f7fe facd 	bl	8007d3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097a6:	e01f      	b.n	80097e8 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097a8:	4b42      	ldr	r3, [pc, #264]	; (80098b4 <UART_SetConfig+0x940>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f003 0320 	and.w	r3, r3, #32
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d009      	beq.n	80097c8 <UART_SetConfig+0x854>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80097b4:	4b3f      	ldr	r3, [pc, #252]	; (80098b4 <UART_SetConfig+0x940>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	08db      	lsrs	r3, r3, #3
 80097ba:	f003 0303 	and.w	r3, r3, #3
 80097be:	4a3f      	ldr	r2, [pc, #252]	; (80098bc <UART_SetConfig+0x948>)
 80097c0:	fa22 f303 	lsr.w	r3, r2, r3
 80097c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80097c6:	e00f      	b.n	80097e8 <UART_SetConfig+0x874>
          pclk = (uint32_t) HSI_VALUE;
 80097c8:	4b3c      	ldr	r3, [pc, #240]	; (80098bc <UART_SetConfig+0x948>)
 80097ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097cc:	e00c      	b.n	80097e8 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80097ce:	4b3c      	ldr	r3, [pc, #240]	; (80098c0 <UART_SetConfig+0x94c>)
 80097d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097d2:	e009      	b.n	80097e8 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097da:	e005      	b.n	80097e8 <UART_SetConfig+0x874>
      default:
        pclk = 0U;
 80097dc:	2300      	movs	r3, #0
 80097de:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80097e0:	2301      	movs	r3, #1
 80097e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80097e6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80097e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	f000 8251 	beq.w	8009c92 <UART_SetConfig+0xd1e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f4:	4a33      	ldr	r2, [pc, #204]	; (80098c4 <UART_SetConfig+0x950>)
 80097f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097fa:	461a      	mov	r2, r3
 80097fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8009802:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	685a      	ldr	r2, [r3, #4]
 8009808:	4613      	mov	r3, r2
 800980a:	005b      	lsls	r3, r3, #1
 800980c:	4413      	add	r3, r2
 800980e:	6a3a      	ldr	r2, [r7, #32]
 8009810:	429a      	cmp	r2, r3
 8009812:	d305      	bcc.n	8009820 <UART_SetConfig+0x8ac>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800981a:	6a3a      	ldr	r2, [r7, #32]
 800981c:	429a      	cmp	r2, r3
 800981e:	d903      	bls.n	8009828 <UART_SetConfig+0x8b4>
      {
        ret = HAL_ERROR;
 8009820:	2301      	movs	r3, #1
 8009822:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009826:	e234      	b.n	8009c92 <UART_SetConfig+0xd1e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800982a:	4618      	mov	r0, r3
 800982c:	f04f 0100 	mov.w	r1, #0
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009834:	4a23      	ldr	r2, [pc, #140]	; (80098c4 <UART_SetConfig+0x950>)
 8009836:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800983a:	b29b      	uxth	r3, r3
 800983c:	f04f 0400 	mov.w	r4, #0
 8009840:	461a      	mov	r2, r3
 8009842:	4623      	mov	r3, r4
 8009844:	f7f6 fd54 	bl	80002f0 <__aeabi_uldivmod>
 8009848:	4603      	mov	r3, r0
 800984a:	460c      	mov	r4, r1
 800984c:	4619      	mov	r1, r3
 800984e:	4622      	mov	r2, r4
 8009850:	f04f 0300 	mov.w	r3, #0
 8009854:	f04f 0400 	mov.w	r4, #0
 8009858:	0214      	lsls	r4, r2, #8
 800985a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800985e:	020b      	lsls	r3, r1, #8
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	6852      	ldr	r2, [r2, #4]
 8009864:	0852      	lsrs	r2, r2, #1
 8009866:	4611      	mov	r1, r2
 8009868:	f04f 0200 	mov.w	r2, #0
 800986c:	eb13 0b01 	adds.w	fp, r3, r1
 8009870:	eb44 0c02 	adc.w	ip, r4, r2
 8009874:	4658      	mov	r0, fp
 8009876:	4661      	mov	r1, ip
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	f04f 0400 	mov.w	r4, #0
 8009880:	461a      	mov	r2, r3
 8009882:	4623      	mov	r3, r4
 8009884:	f7f6 fd34 	bl	80002f0 <__aeabi_uldivmod>
 8009888:	4603      	mov	r3, r0
 800988a:	460c      	mov	r4, r1
 800988c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800988e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009890:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009894:	d308      	bcc.n	80098a8 <UART_SetConfig+0x934>
 8009896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009898:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800989c:	d204      	bcs.n	80098a8 <UART_SetConfig+0x934>
        {
          huart->Instance->BRR = usartdiv;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098a4:	60da      	str	r2, [r3, #12]
 80098a6:	e1f4      	b.n	8009c92 <UART_SetConfig+0xd1e>
        }
        else
        {
          ret = HAL_ERROR;
 80098a8:	2301      	movs	r3, #1
 80098aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80098ae:	e1f0      	b.n	8009c92 <UART_SetConfig+0xd1e>
 80098b0:	40011c00 	.word	0x40011c00
 80098b4:	58024400 	.word	0x58024400
 80098b8:	58000c00 	.word	0x58000c00
 80098bc:	03d09000 	.word	0x03d09000
 80098c0:	003d0900 	.word	0x003d0900
 80098c4:	0800b3fc 	.word	0x0800b3fc
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	69db      	ldr	r3, [r3, #28]
 80098cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098d0:	f040 80f8 	bne.w	8009ac4 <UART_SetConfig+0xb50>
  {
    switch (clocksource)
 80098d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80098d8:	2b40      	cmp	r3, #64	; 0x40
 80098da:	f200 80b7 	bhi.w	8009a4c <UART_SetConfig+0xad8>
 80098de:	a201      	add	r2, pc, #4	; (adr r2, 80098e4 <UART_SetConfig+0x970>)
 80098e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e4:	080099e9 	.word	0x080099e9
 80098e8:	080099f1 	.word	0x080099f1
 80098ec:	08009a4d 	.word	0x08009a4d
 80098f0:	08009a4d 	.word	0x08009a4d
 80098f4:	080099f9 	.word	0x080099f9
 80098f8:	08009a4d 	.word	0x08009a4d
 80098fc:	08009a4d 	.word	0x08009a4d
 8009900:	08009a4d 	.word	0x08009a4d
 8009904:	08009a09 	.word	0x08009a09
 8009908:	08009a4d 	.word	0x08009a4d
 800990c:	08009a4d 	.word	0x08009a4d
 8009910:	08009a4d 	.word	0x08009a4d
 8009914:	08009a4d 	.word	0x08009a4d
 8009918:	08009a4d 	.word	0x08009a4d
 800991c:	08009a4d 	.word	0x08009a4d
 8009920:	08009a4d 	.word	0x08009a4d
 8009924:	08009a19 	.word	0x08009a19
 8009928:	08009a4d 	.word	0x08009a4d
 800992c:	08009a4d 	.word	0x08009a4d
 8009930:	08009a4d 	.word	0x08009a4d
 8009934:	08009a4d 	.word	0x08009a4d
 8009938:	08009a4d 	.word	0x08009a4d
 800993c:	08009a4d 	.word	0x08009a4d
 8009940:	08009a4d 	.word	0x08009a4d
 8009944:	08009a4d 	.word	0x08009a4d
 8009948:	08009a4d 	.word	0x08009a4d
 800994c:	08009a4d 	.word	0x08009a4d
 8009950:	08009a4d 	.word	0x08009a4d
 8009954:	08009a4d 	.word	0x08009a4d
 8009958:	08009a4d 	.word	0x08009a4d
 800995c:	08009a4d 	.word	0x08009a4d
 8009960:	08009a4d 	.word	0x08009a4d
 8009964:	08009a3f 	.word	0x08009a3f
 8009968:	08009a4d 	.word	0x08009a4d
 800996c:	08009a4d 	.word	0x08009a4d
 8009970:	08009a4d 	.word	0x08009a4d
 8009974:	08009a4d 	.word	0x08009a4d
 8009978:	08009a4d 	.word	0x08009a4d
 800997c:	08009a4d 	.word	0x08009a4d
 8009980:	08009a4d 	.word	0x08009a4d
 8009984:	08009a4d 	.word	0x08009a4d
 8009988:	08009a4d 	.word	0x08009a4d
 800998c:	08009a4d 	.word	0x08009a4d
 8009990:	08009a4d 	.word	0x08009a4d
 8009994:	08009a4d 	.word	0x08009a4d
 8009998:	08009a4d 	.word	0x08009a4d
 800999c:	08009a4d 	.word	0x08009a4d
 80099a0:	08009a4d 	.word	0x08009a4d
 80099a4:	08009a4d 	.word	0x08009a4d
 80099a8:	08009a4d 	.word	0x08009a4d
 80099ac:	08009a4d 	.word	0x08009a4d
 80099b0:	08009a4d 	.word	0x08009a4d
 80099b4:	08009a4d 	.word	0x08009a4d
 80099b8:	08009a4d 	.word	0x08009a4d
 80099bc:	08009a4d 	.word	0x08009a4d
 80099c0:	08009a4d 	.word	0x08009a4d
 80099c4:	08009a4d 	.word	0x08009a4d
 80099c8:	08009a4d 	.word	0x08009a4d
 80099cc:	08009a4d 	.word	0x08009a4d
 80099d0:	08009a4d 	.word	0x08009a4d
 80099d4:	08009a4d 	.word	0x08009a4d
 80099d8:	08009a4d 	.word	0x08009a4d
 80099dc:	08009a4d 	.word	0x08009a4d
 80099e0:	08009a4d 	.word	0x08009a4d
 80099e4:	08009a45 	.word	0x08009a45
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099e8:	f7fc ff40 	bl	800686c <HAL_RCC_GetPCLK1Freq>
 80099ec:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80099ee:	e033      	b.n	8009a58 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80099f0:	f7fc ff52 	bl	8006898 <HAL_RCC_GetPCLK2Freq>
 80099f4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80099f6:	e02f      	b.n	8009a58 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099f8:	f107 0314 	add.w	r3, r7, #20
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7fe f851 	bl	8007aa4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009a02:	69bb      	ldr	r3, [r7, #24]
 8009a04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a06:	e027      	b.n	8009a58 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a08:	f107 0308 	add.w	r3, r7, #8
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f7fe f995 	bl	8007d3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a16:	e01f      	b.n	8009a58 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a18:	4ba8      	ldr	r3, [pc, #672]	; (8009cbc <UART_SetConfig+0xd48>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f003 0320 	and.w	r3, r3, #32
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d009      	beq.n	8009a38 <UART_SetConfig+0xac4>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009a24:	4ba5      	ldr	r3, [pc, #660]	; (8009cbc <UART_SetConfig+0xd48>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	08db      	lsrs	r3, r3, #3
 8009a2a:	f003 0303 	and.w	r3, r3, #3
 8009a2e:	4aa4      	ldr	r2, [pc, #656]	; (8009cc0 <UART_SetConfig+0xd4c>)
 8009a30:	fa22 f303 	lsr.w	r3, r2, r3
 8009a34:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009a36:	e00f      	b.n	8009a58 <UART_SetConfig+0xae4>
          pclk = (uint32_t) HSI_VALUE;
 8009a38:	4ba1      	ldr	r3, [pc, #644]	; (8009cc0 <UART_SetConfig+0xd4c>)
 8009a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a3c:	e00c      	b.n	8009a58 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009a3e:	4ba1      	ldr	r3, [pc, #644]	; (8009cc4 <UART_SetConfig+0xd50>)
 8009a40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a42:	e009      	b.n	8009a58 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a4a:	e005      	b.n	8009a58 <UART_SetConfig+0xae4>
      default:
        pclk = 0U;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009a50:	2301      	movs	r3, #1
 8009a52:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009a56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	f000 8119 	beq.w	8009c92 <UART_SetConfig+0xd1e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a64:	4a98      	ldr	r2, [pc, #608]	; (8009cc8 <UART_SetConfig+0xd54>)
 8009a66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a72:	005a      	lsls	r2, r3, #1
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	085b      	lsrs	r3, r3, #1
 8009a7a:	441a      	add	r2, r3
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a8a:	2b0f      	cmp	r3, #15
 8009a8c:	d916      	bls.n	8009abc <UART_SetConfig+0xb48>
 8009a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a94:	d212      	bcs.n	8009abc <UART_SetConfig+0xb48>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	f023 030f 	bic.w	r3, r3, #15
 8009a9e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa2:	085b      	lsrs	r3, r3, #1
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	f003 0307 	and.w	r3, r3, #7
 8009aaa:	b29a      	uxth	r2, r3
 8009aac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009ab8:	60da      	str	r2, [r3, #12]
 8009aba:	e0ea      	b.n	8009c92 <UART_SetConfig+0xd1e>
      }
      else
      {
        ret = HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009ac2:	e0e6      	b.n	8009c92 <UART_SetConfig+0xd1e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009ac4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009ac8:	2b40      	cmp	r3, #64	; 0x40
 8009aca:	f200 80b7 	bhi.w	8009c3c <UART_SetConfig+0xcc8>
 8009ace:	a201      	add	r2, pc, #4	; (adr r2, 8009ad4 <UART_SetConfig+0xb60>)
 8009ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad4:	08009bd9 	.word	0x08009bd9
 8009ad8:	08009be1 	.word	0x08009be1
 8009adc:	08009c3d 	.word	0x08009c3d
 8009ae0:	08009c3d 	.word	0x08009c3d
 8009ae4:	08009be9 	.word	0x08009be9
 8009ae8:	08009c3d 	.word	0x08009c3d
 8009aec:	08009c3d 	.word	0x08009c3d
 8009af0:	08009c3d 	.word	0x08009c3d
 8009af4:	08009bf9 	.word	0x08009bf9
 8009af8:	08009c3d 	.word	0x08009c3d
 8009afc:	08009c3d 	.word	0x08009c3d
 8009b00:	08009c3d 	.word	0x08009c3d
 8009b04:	08009c3d 	.word	0x08009c3d
 8009b08:	08009c3d 	.word	0x08009c3d
 8009b0c:	08009c3d 	.word	0x08009c3d
 8009b10:	08009c3d 	.word	0x08009c3d
 8009b14:	08009c09 	.word	0x08009c09
 8009b18:	08009c3d 	.word	0x08009c3d
 8009b1c:	08009c3d 	.word	0x08009c3d
 8009b20:	08009c3d 	.word	0x08009c3d
 8009b24:	08009c3d 	.word	0x08009c3d
 8009b28:	08009c3d 	.word	0x08009c3d
 8009b2c:	08009c3d 	.word	0x08009c3d
 8009b30:	08009c3d 	.word	0x08009c3d
 8009b34:	08009c3d 	.word	0x08009c3d
 8009b38:	08009c3d 	.word	0x08009c3d
 8009b3c:	08009c3d 	.word	0x08009c3d
 8009b40:	08009c3d 	.word	0x08009c3d
 8009b44:	08009c3d 	.word	0x08009c3d
 8009b48:	08009c3d 	.word	0x08009c3d
 8009b4c:	08009c3d 	.word	0x08009c3d
 8009b50:	08009c3d 	.word	0x08009c3d
 8009b54:	08009c2f 	.word	0x08009c2f
 8009b58:	08009c3d 	.word	0x08009c3d
 8009b5c:	08009c3d 	.word	0x08009c3d
 8009b60:	08009c3d 	.word	0x08009c3d
 8009b64:	08009c3d 	.word	0x08009c3d
 8009b68:	08009c3d 	.word	0x08009c3d
 8009b6c:	08009c3d 	.word	0x08009c3d
 8009b70:	08009c3d 	.word	0x08009c3d
 8009b74:	08009c3d 	.word	0x08009c3d
 8009b78:	08009c3d 	.word	0x08009c3d
 8009b7c:	08009c3d 	.word	0x08009c3d
 8009b80:	08009c3d 	.word	0x08009c3d
 8009b84:	08009c3d 	.word	0x08009c3d
 8009b88:	08009c3d 	.word	0x08009c3d
 8009b8c:	08009c3d 	.word	0x08009c3d
 8009b90:	08009c3d 	.word	0x08009c3d
 8009b94:	08009c3d 	.word	0x08009c3d
 8009b98:	08009c3d 	.word	0x08009c3d
 8009b9c:	08009c3d 	.word	0x08009c3d
 8009ba0:	08009c3d 	.word	0x08009c3d
 8009ba4:	08009c3d 	.word	0x08009c3d
 8009ba8:	08009c3d 	.word	0x08009c3d
 8009bac:	08009c3d 	.word	0x08009c3d
 8009bb0:	08009c3d 	.word	0x08009c3d
 8009bb4:	08009c3d 	.word	0x08009c3d
 8009bb8:	08009c3d 	.word	0x08009c3d
 8009bbc:	08009c3d 	.word	0x08009c3d
 8009bc0:	08009c3d 	.word	0x08009c3d
 8009bc4:	08009c3d 	.word	0x08009c3d
 8009bc8:	08009c3d 	.word	0x08009c3d
 8009bcc:	08009c3d 	.word	0x08009c3d
 8009bd0:	08009c3d 	.word	0x08009c3d
 8009bd4:	08009c35 	.word	0x08009c35
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bd8:	f7fc fe48 	bl	800686c <HAL_RCC_GetPCLK1Freq>
 8009bdc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009bde:	e033      	b.n	8009c48 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009be0:	f7fc fe5a 	bl	8006898 <HAL_RCC_GetPCLK2Freq>
 8009be4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009be6:	e02f      	b.n	8009c48 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009be8:	f107 0314 	add.w	r3, r7, #20
 8009bec:	4618      	mov	r0, r3
 8009bee:	f7fd ff59 	bl	8007aa4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009bf6:	e027      	b.n	8009c48 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bf8:	f107 0308 	add.w	r3, r7, #8
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f7fe f89d 	bl	8007d3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c06:	e01f      	b.n	8009c48 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c08:	4b2c      	ldr	r3, [pc, #176]	; (8009cbc <UART_SetConfig+0xd48>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f003 0320 	and.w	r3, r3, #32
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d009      	beq.n	8009c28 <UART_SetConfig+0xcb4>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c14:	4b29      	ldr	r3, [pc, #164]	; (8009cbc <UART_SetConfig+0xd48>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	08db      	lsrs	r3, r3, #3
 8009c1a:	f003 0303 	and.w	r3, r3, #3
 8009c1e:	4a28      	ldr	r2, [pc, #160]	; (8009cc0 <UART_SetConfig+0xd4c>)
 8009c20:	fa22 f303 	lsr.w	r3, r2, r3
 8009c24:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c26:	e00f      	b.n	8009c48 <UART_SetConfig+0xcd4>
          pclk = (uint32_t) HSI_VALUE;
 8009c28:	4b25      	ldr	r3, [pc, #148]	; (8009cc0 <UART_SetConfig+0xd4c>)
 8009c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c2c:	e00c      	b.n	8009c48 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c2e:	4b25      	ldr	r3, [pc, #148]	; (8009cc4 <UART_SetConfig+0xd50>)
 8009c30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c32:	e009      	b.n	8009c48 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c3a:	e005      	b.n	8009c48 <UART_SetConfig+0xcd4>
      default:
        pclk = 0U;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009c40:	2301      	movs	r3, #1
 8009c42:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009c46:	bf00      	nop
    }

    if (pclk != 0U)
 8009c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d021      	beq.n	8009c92 <UART_SetConfig+0xd1e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c52:	4a1d      	ldr	r2, [pc, #116]	; (8009cc8 <UART_SetConfig+0xd54>)
 8009c54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c58:	461a      	mov	r2, r3
 8009c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c5c:	fbb3 f2f2 	udiv	r2, r3, r2
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	085b      	lsrs	r3, r3, #1
 8009c66:	441a      	add	r2, r3
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c70:	b29b      	uxth	r3, r3
 8009c72:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c76:	2b0f      	cmp	r3, #15
 8009c78:	d908      	bls.n	8009c8c <UART_SetConfig+0xd18>
 8009c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c80:	d204      	bcs.n	8009c8c <UART_SetConfig+0xd18>
      {
        huart->Instance->BRR = usartdiv;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c88:	60da      	str	r2, [r3, #12]
 8009c8a:	e002      	b.n	8009c92 <UART_SetConfig+0xd1e>
      }
      else
      {
        ret = HAL_ERROR;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2201      	movs	r2, #1
 8009c96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2200      	movs	r2, #0
 8009cac:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009cae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3738      	adds	r7, #56	; 0x38
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8009cbc:	58024400 	.word	0x58024400
 8009cc0:	03d09000 	.word	0x03d09000
 8009cc4:	003d0900 	.word	0x003d0900
 8009cc8:	0800b3fc 	.word	0x0800b3fc

08009ccc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b083      	sub	sp, #12
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cd8:	f003 0301 	and.w	r3, r3, #1
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d00a      	beq.n	8009cf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	430a      	orrs	r2, r1
 8009cf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cfa:	f003 0302 	and.w	r3, r3, #2
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d00a      	beq.n	8009d18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	430a      	orrs	r2, r1
 8009d16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d1c:	f003 0304 	and.w	r3, r3, #4
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d00a      	beq.n	8009d3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	430a      	orrs	r2, r1
 8009d38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d3e:	f003 0308 	and.w	r3, r3, #8
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d00a      	beq.n	8009d5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	430a      	orrs	r2, r1
 8009d5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d60:	f003 0310 	and.w	r3, r3, #16
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d00a      	beq.n	8009d7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	689b      	ldr	r3, [r3, #8]
 8009d6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	430a      	orrs	r2, r1
 8009d7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d82:	f003 0320 	and.w	r3, r3, #32
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d00a      	beq.n	8009da0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	430a      	orrs	r2, r1
 8009d9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d01a      	beq.n	8009de2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	430a      	orrs	r2, r1
 8009dc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009dca:	d10a      	bne.n	8009de2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	430a      	orrs	r2, r1
 8009de0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00a      	beq.n	8009e04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	430a      	orrs	r2, r1
 8009e02:	605a      	str	r2, [r3, #4]
  }
}
 8009e04:	bf00      	nop
 8009e06:	370c      	adds	r7, #12
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr

08009e10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b086      	sub	sp, #24
 8009e14:	af02      	add	r7, sp, #8
 8009e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009e20:	f7f7 fee0 	bl	8001be4 <HAL_GetTick>
 8009e24:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f003 0308 	and.w	r3, r3, #8
 8009e30:	2b08      	cmp	r3, #8
 8009e32:	d10e      	bne.n	8009e52 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e38:	9300      	str	r3, [sp, #0]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 f82c 	bl	8009ea0 <UART_WaitOnFlagUntilTimeout>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d001      	beq.n	8009e52 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e4e:	2303      	movs	r3, #3
 8009e50:	e022      	b.n	8009e98 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f003 0304 	and.w	r3, r3, #4
 8009e5c:	2b04      	cmp	r3, #4
 8009e5e:	d10e      	bne.n	8009e7e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e64:	9300      	str	r3, [sp, #0]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 f816 	bl	8009ea0 <UART_WaitOnFlagUntilTimeout>
 8009e74:	4603      	mov	r3, r0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d001      	beq.n	8009e7e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e7a:	2303      	movs	r3, #3
 8009e7c:	e00c      	b.n	8009e98 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2220      	movs	r2, #32
 8009e82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2220      	movs	r2, #32
 8009e8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2200      	movs	r2, #0
 8009e92:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009e96:	2300      	movs	r3, #0
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3710      	adds	r7, #16
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	603b      	str	r3, [r7, #0]
 8009eac:	4613      	mov	r3, r2
 8009eae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009eb0:	e062      	b.n	8009f78 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009eb2:	69bb      	ldr	r3, [r7, #24]
 8009eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eb8:	d05e      	beq.n	8009f78 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009eba:	f7f7 fe93 	bl	8001be4 <HAL_GetTick>
 8009ebe:	4602      	mov	r2, r0
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	1ad3      	subs	r3, r2, r3
 8009ec4:	69ba      	ldr	r2, [r7, #24]
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d302      	bcc.n	8009ed0 <UART_WaitOnFlagUntilTimeout+0x30>
 8009eca:	69bb      	ldr	r3, [r7, #24]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d11d      	bne.n	8009f0c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009ede:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	689a      	ldr	r2, [r3, #8]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f022 0201 	bic.w	r2, r2, #1
 8009eee:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2220      	movs	r2, #32
 8009ef4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2220      	movs	r2, #32
 8009efc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2200      	movs	r2, #0
 8009f04:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009f08:	2303      	movs	r3, #3
 8009f0a:	e045      	b.n	8009f98 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f003 0304 	and.w	r3, r3, #4
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d02e      	beq.n	8009f78 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	69db      	ldr	r3, [r3, #28]
 8009f20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f28:	d126      	bne.n	8009f78 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f32:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009f42:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	689a      	ldr	r2, [r3, #8]
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f022 0201 	bic.w	r2, r2, #1
 8009f52:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2220      	movs	r2, #32
 8009f58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2220      	movs	r2, #32
 8009f60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2220      	movs	r2, #32
 8009f68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8009f74:	2303      	movs	r3, #3
 8009f76:	e00f      	b.n	8009f98 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	69da      	ldr	r2, [r3, #28]
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	4013      	ands	r3, r2
 8009f82:	68ba      	ldr	r2, [r7, #8]
 8009f84:	429a      	cmp	r2, r3
 8009f86:	bf0c      	ite	eq
 8009f88:	2301      	moveq	r3, #1
 8009f8a:	2300      	movne	r3, #0
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	461a      	mov	r2, r3
 8009f90:	79fb      	ldrb	r3, [r7, #7]
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d08d      	beq.n	8009eb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009f96:	2300      	movs	r3, #0
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3710      	adds	r7, #16
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b085      	sub	sp, #20
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	d101      	bne.n	8009fb6 <HAL_UARTEx_DisableFifoMode+0x16>
 8009fb2:	2302      	movs	r3, #2
 8009fb4:	e027      	b.n	800a006 <HAL_UARTEx_DisableFifoMode+0x66>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2201      	movs	r2, #1
 8009fba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2224      	movs	r2, #36	; 0x24
 8009fc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f022 0201 	bic.w	r2, r2, #1
 8009fdc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009fe4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	68fa      	ldr	r2, [r7, #12]
 8009ff2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2220      	movs	r2, #32
 8009ff8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2200      	movs	r2, #0
 800a000:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a004:	2300      	movs	r3, #0
}
 800a006:	4618      	mov	r0, r3
 800a008:	3714      	adds	r7, #20
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr

0800a012 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a012:	b580      	push	{r7, lr}
 800a014:	b084      	sub	sp, #16
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
 800a01a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a022:	2b01      	cmp	r3, #1
 800a024:	d101      	bne.n	800a02a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a026:	2302      	movs	r3, #2
 800a028:	e02d      	b.n	800a086 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2201      	movs	r2, #1
 800a02e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2224      	movs	r2, #36	; 0x24
 800a036:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	681a      	ldr	r2, [r3, #0]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f022 0201 	bic.w	r2, r2, #1
 800a050:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	689b      	ldr	r3, [r3, #8]
 800a058:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	683a      	ldr	r2, [r7, #0]
 800a062:	430a      	orrs	r2, r1
 800a064:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 f850 	bl	800a10c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	68fa      	ldr	r2, [r7, #12]
 800a072:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2220      	movs	r2, #32
 800a078:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2200      	movs	r2, #0
 800a080:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a084:	2300      	movs	r3, #0
}
 800a086:	4618      	mov	r0, r3
 800a088:	3710      	adds	r7, #16
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}

0800a08e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	b084      	sub	sp, #16
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
 800a096:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	d101      	bne.n	800a0a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a0a2:	2302      	movs	r3, #2
 800a0a4:	e02d      	b.n	800a102 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2224      	movs	r2, #36	; 0x24
 800a0b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	681a      	ldr	r2, [r3, #0]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f022 0201 	bic.w	r2, r2, #1
 800a0cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	689b      	ldr	r3, [r3, #8]
 800a0d4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	683a      	ldr	r2, [r7, #0]
 800a0de:	430a      	orrs	r2, r1
 800a0e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f000 f812 	bl	800a10c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	68fa      	ldr	r2, [r7, #12]
 800a0ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2220      	movs	r2, #32
 800a0f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3710      	adds	r7, #16
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
	...

0800a10c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b089      	sub	sp, #36	; 0x24
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a114:	4a2f      	ldr	r2, [pc, #188]	; (800a1d4 <UARTEx_SetNbDataToProcess+0xc8>)
 800a116:	f107 0314 	add.w	r3, r7, #20
 800a11a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a11e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a122:	4a2d      	ldr	r2, [pc, #180]	; (800a1d8 <UARTEx_SetNbDataToProcess+0xcc>)
 800a124:	f107 030c 	add.w	r3, r7, #12
 800a128:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a12c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a134:	2b00      	cmp	r3, #0
 800a136:	d108      	bne.n	800a14a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2201      	movs	r2, #1
 800a13c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2201      	movs	r2, #1
 800a144:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a148:	e03d      	b.n	800a1c6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a14a:	2310      	movs	r3, #16
 800a14c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a14e:	2310      	movs	r3, #16
 800a150:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	689b      	ldr	r3, [r3, #8]
 800a158:	0e5b      	lsrs	r3, r3, #25
 800a15a:	b2db      	uxtb	r3, r3
 800a15c:	f003 0307 	and.w	r3, r3, #7
 800a160:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	689b      	ldr	r3, [r3, #8]
 800a168:	0f5b      	lsrs	r3, r3, #29
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	f003 0307 	and.w	r3, r3, #7
 800a170:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a172:	7fbb      	ldrb	r3, [r7, #30]
 800a174:	7f3a      	ldrb	r2, [r7, #28]
 800a176:	f107 0120 	add.w	r1, r7, #32
 800a17a:	440a      	add	r2, r1
 800a17c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a180:	fb02 f303 	mul.w	r3, r2, r3
 800a184:	7f3a      	ldrb	r2, [r7, #28]
 800a186:	f107 0120 	add.w	r1, r7, #32
 800a18a:	440a      	add	r2, r1
 800a18c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a190:	fb93 f3f2 	sdiv	r3, r3, r2
 800a194:	b29a      	uxth	r2, r3
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a19c:	7ffb      	ldrb	r3, [r7, #31]
 800a19e:	7f7a      	ldrb	r2, [r7, #29]
 800a1a0:	f107 0120 	add.w	r1, r7, #32
 800a1a4:	440a      	add	r2, r1
 800a1a6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a1aa:	fb02 f303 	mul.w	r3, r2, r3
 800a1ae:	7f7a      	ldrb	r2, [r7, #29]
 800a1b0:	f107 0120 	add.w	r1, r7, #32
 800a1b4:	440a      	add	r2, r1
 800a1b6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a1ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1be:	b29a      	uxth	r2, r3
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a1c6:	bf00      	nop
 800a1c8:	3724      	adds	r7, #36	; 0x24
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr
 800a1d2:	bf00      	nop
 800a1d4:	0800abd4 	.word	0x0800abd4
 800a1d8:	0800abdc 	.word	0x0800abdc

0800a1dc <calloc>:
 800a1dc:	4b02      	ldr	r3, [pc, #8]	; (800a1e8 <calloc+0xc>)
 800a1de:	460a      	mov	r2, r1
 800a1e0:	4601      	mov	r1, r0
 800a1e2:	6818      	ldr	r0, [r3, #0]
 800a1e4:	f000 b850 	b.w	800a288 <_calloc_r>
 800a1e8:	2400001c 	.word	0x2400001c

0800a1ec <__errno>:
 800a1ec:	4b01      	ldr	r3, [pc, #4]	; (800a1f4 <__errno+0x8>)
 800a1ee:	6818      	ldr	r0, [r3, #0]
 800a1f0:	4770      	bx	lr
 800a1f2:	bf00      	nop
 800a1f4:	2400001c 	.word	0x2400001c

0800a1f8 <exit>:
 800a1f8:	b508      	push	{r3, lr}
 800a1fa:	4b07      	ldr	r3, [pc, #28]	; (800a218 <exit+0x20>)
 800a1fc:	4604      	mov	r4, r0
 800a1fe:	b113      	cbz	r3, 800a206 <exit+0xe>
 800a200:	2100      	movs	r1, #0
 800a202:	f3af 8000 	nop.w
 800a206:	4b05      	ldr	r3, [pc, #20]	; (800a21c <exit+0x24>)
 800a208:	6818      	ldr	r0, [r3, #0]
 800a20a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a20c:	b103      	cbz	r3, 800a210 <exit+0x18>
 800a20e:	4798      	blx	r3
 800a210:	4620      	mov	r0, r4
 800a212:	f7f7 fb0d 	bl	8001830 <_exit>
 800a216:	bf00      	nop
 800a218:	00000000 	.word	0x00000000
 800a21c:	0800b414 	.word	0x0800b414

0800a220 <__libc_init_array>:
 800a220:	b570      	push	{r4, r5, r6, lr}
 800a222:	4e0d      	ldr	r6, [pc, #52]	; (800a258 <__libc_init_array+0x38>)
 800a224:	4c0d      	ldr	r4, [pc, #52]	; (800a25c <__libc_init_array+0x3c>)
 800a226:	1ba4      	subs	r4, r4, r6
 800a228:	10a4      	asrs	r4, r4, #2
 800a22a:	2500      	movs	r5, #0
 800a22c:	42a5      	cmp	r5, r4
 800a22e:	d109      	bne.n	800a244 <__libc_init_array+0x24>
 800a230:	4e0b      	ldr	r6, [pc, #44]	; (800a260 <__libc_init_array+0x40>)
 800a232:	4c0c      	ldr	r4, [pc, #48]	; (800a264 <__libc_init_array+0x44>)
 800a234:	f000 fc9e 	bl	800ab74 <_init>
 800a238:	1ba4      	subs	r4, r4, r6
 800a23a:	10a4      	asrs	r4, r4, #2
 800a23c:	2500      	movs	r5, #0
 800a23e:	42a5      	cmp	r5, r4
 800a240:	d105      	bne.n	800a24e <__libc_init_array+0x2e>
 800a242:	bd70      	pop	{r4, r5, r6, pc}
 800a244:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a248:	4798      	blx	r3
 800a24a:	3501      	adds	r5, #1
 800a24c:	e7ee      	b.n	800a22c <__libc_init_array+0xc>
 800a24e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a252:	4798      	blx	r3
 800a254:	3501      	adds	r5, #1
 800a256:	e7f2      	b.n	800a23e <__libc_init_array+0x1e>
 800a258:	0800b480 	.word	0x0800b480
 800a25c:	0800b480 	.word	0x0800b480
 800a260:	0800b480 	.word	0x0800b480
 800a264:	0800b484 	.word	0x0800b484

0800a268 <malloc>:
 800a268:	4b02      	ldr	r3, [pc, #8]	; (800a274 <malloc+0xc>)
 800a26a:	4601      	mov	r1, r0
 800a26c:	6818      	ldr	r0, [r3, #0]
 800a26e:	f000 b867 	b.w	800a340 <_malloc_r>
 800a272:	bf00      	nop
 800a274:	2400001c 	.word	0x2400001c

0800a278 <memset>:
 800a278:	4402      	add	r2, r0
 800a27a:	4603      	mov	r3, r0
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d100      	bne.n	800a282 <memset+0xa>
 800a280:	4770      	bx	lr
 800a282:	f803 1b01 	strb.w	r1, [r3], #1
 800a286:	e7f9      	b.n	800a27c <memset+0x4>

0800a288 <_calloc_r>:
 800a288:	b538      	push	{r3, r4, r5, lr}
 800a28a:	fb02 f401 	mul.w	r4, r2, r1
 800a28e:	4621      	mov	r1, r4
 800a290:	f000 f856 	bl	800a340 <_malloc_r>
 800a294:	4605      	mov	r5, r0
 800a296:	b118      	cbz	r0, 800a2a0 <_calloc_r+0x18>
 800a298:	4622      	mov	r2, r4
 800a29a:	2100      	movs	r1, #0
 800a29c:	f7ff ffec 	bl	800a278 <memset>
 800a2a0:	4628      	mov	r0, r5
 800a2a2:	bd38      	pop	{r3, r4, r5, pc}

0800a2a4 <_free_r>:
 800a2a4:	b538      	push	{r3, r4, r5, lr}
 800a2a6:	4605      	mov	r5, r0
 800a2a8:	2900      	cmp	r1, #0
 800a2aa:	d045      	beq.n	800a338 <_free_r+0x94>
 800a2ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2b0:	1f0c      	subs	r4, r1, #4
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	bfb8      	it	lt
 800a2b6:	18e4      	addlt	r4, r4, r3
 800a2b8:	f000 fbae 	bl	800aa18 <__malloc_lock>
 800a2bc:	4a1f      	ldr	r2, [pc, #124]	; (800a33c <_free_r+0x98>)
 800a2be:	6813      	ldr	r3, [r2, #0]
 800a2c0:	4610      	mov	r0, r2
 800a2c2:	b933      	cbnz	r3, 800a2d2 <_free_r+0x2e>
 800a2c4:	6063      	str	r3, [r4, #4]
 800a2c6:	6014      	str	r4, [r2, #0]
 800a2c8:	4628      	mov	r0, r5
 800a2ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2ce:	f000 bba4 	b.w	800aa1a <__malloc_unlock>
 800a2d2:	42a3      	cmp	r3, r4
 800a2d4:	d90c      	bls.n	800a2f0 <_free_r+0x4c>
 800a2d6:	6821      	ldr	r1, [r4, #0]
 800a2d8:	1862      	adds	r2, r4, r1
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	bf04      	itt	eq
 800a2de:	681a      	ldreq	r2, [r3, #0]
 800a2e0:	685b      	ldreq	r3, [r3, #4]
 800a2e2:	6063      	str	r3, [r4, #4]
 800a2e4:	bf04      	itt	eq
 800a2e6:	1852      	addeq	r2, r2, r1
 800a2e8:	6022      	streq	r2, [r4, #0]
 800a2ea:	6004      	str	r4, [r0, #0]
 800a2ec:	e7ec      	b.n	800a2c8 <_free_r+0x24>
 800a2ee:	4613      	mov	r3, r2
 800a2f0:	685a      	ldr	r2, [r3, #4]
 800a2f2:	b10a      	cbz	r2, 800a2f8 <_free_r+0x54>
 800a2f4:	42a2      	cmp	r2, r4
 800a2f6:	d9fa      	bls.n	800a2ee <_free_r+0x4a>
 800a2f8:	6819      	ldr	r1, [r3, #0]
 800a2fa:	1858      	adds	r0, r3, r1
 800a2fc:	42a0      	cmp	r0, r4
 800a2fe:	d10b      	bne.n	800a318 <_free_r+0x74>
 800a300:	6820      	ldr	r0, [r4, #0]
 800a302:	4401      	add	r1, r0
 800a304:	1858      	adds	r0, r3, r1
 800a306:	4282      	cmp	r2, r0
 800a308:	6019      	str	r1, [r3, #0]
 800a30a:	d1dd      	bne.n	800a2c8 <_free_r+0x24>
 800a30c:	6810      	ldr	r0, [r2, #0]
 800a30e:	6852      	ldr	r2, [r2, #4]
 800a310:	605a      	str	r2, [r3, #4]
 800a312:	4401      	add	r1, r0
 800a314:	6019      	str	r1, [r3, #0]
 800a316:	e7d7      	b.n	800a2c8 <_free_r+0x24>
 800a318:	d902      	bls.n	800a320 <_free_r+0x7c>
 800a31a:	230c      	movs	r3, #12
 800a31c:	602b      	str	r3, [r5, #0]
 800a31e:	e7d3      	b.n	800a2c8 <_free_r+0x24>
 800a320:	6820      	ldr	r0, [r4, #0]
 800a322:	1821      	adds	r1, r4, r0
 800a324:	428a      	cmp	r2, r1
 800a326:	bf04      	itt	eq
 800a328:	6811      	ldreq	r1, [r2, #0]
 800a32a:	6852      	ldreq	r2, [r2, #4]
 800a32c:	6062      	str	r2, [r4, #4]
 800a32e:	bf04      	itt	eq
 800a330:	1809      	addeq	r1, r1, r0
 800a332:	6021      	streq	r1, [r4, #0]
 800a334:	605c      	str	r4, [r3, #4]
 800a336:	e7c7      	b.n	800a2c8 <_free_r+0x24>
 800a338:	bd38      	pop	{r3, r4, r5, pc}
 800a33a:	bf00      	nop
 800a33c:	240000b0 	.word	0x240000b0

0800a340 <_malloc_r>:
 800a340:	b570      	push	{r4, r5, r6, lr}
 800a342:	1ccd      	adds	r5, r1, #3
 800a344:	f025 0503 	bic.w	r5, r5, #3
 800a348:	3508      	adds	r5, #8
 800a34a:	2d0c      	cmp	r5, #12
 800a34c:	bf38      	it	cc
 800a34e:	250c      	movcc	r5, #12
 800a350:	2d00      	cmp	r5, #0
 800a352:	4606      	mov	r6, r0
 800a354:	db01      	blt.n	800a35a <_malloc_r+0x1a>
 800a356:	42a9      	cmp	r1, r5
 800a358:	d903      	bls.n	800a362 <_malloc_r+0x22>
 800a35a:	230c      	movs	r3, #12
 800a35c:	6033      	str	r3, [r6, #0]
 800a35e:	2000      	movs	r0, #0
 800a360:	bd70      	pop	{r4, r5, r6, pc}
 800a362:	f000 fb59 	bl	800aa18 <__malloc_lock>
 800a366:	4a21      	ldr	r2, [pc, #132]	; (800a3ec <_malloc_r+0xac>)
 800a368:	6814      	ldr	r4, [r2, #0]
 800a36a:	4621      	mov	r1, r4
 800a36c:	b991      	cbnz	r1, 800a394 <_malloc_r+0x54>
 800a36e:	4c20      	ldr	r4, [pc, #128]	; (800a3f0 <_malloc_r+0xb0>)
 800a370:	6823      	ldr	r3, [r4, #0]
 800a372:	b91b      	cbnz	r3, 800a37c <_malloc_r+0x3c>
 800a374:	4630      	mov	r0, r6
 800a376:	f000 f8a1 	bl	800a4bc <_sbrk_r>
 800a37a:	6020      	str	r0, [r4, #0]
 800a37c:	4629      	mov	r1, r5
 800a37e:	4630      	mov	r0, r6
 800a380:	f000 f89c 	bl	800a4bc <_sbrk_r>
 800a384:	1c43      	adds	r3, r0, #1
 800a386:	d124      	bne.n	800a3d2 <_malloc_r+0x92>
 800a388:	230c      	movs	r3, #12
 800a38a:	6033      	str	r3, [r6, #0]
 800a38c:	4630      	mov	r0, r6
 800a38e:	f000 fb44 	bl	800aa1a <__malloc_unlock>
 800a392:	e7e4      	b.n	800a35e <_malloc_r+0x1e>
 800a394:	680b      	ldr	r3, [r1, #0]
 800a396:	1b5b      	subs	r3, r3, r5
 800a398:	d418      	bmi.n	800a3cc <_malloc_r+0x8c>
 800a39a:	2b0b      	cmp	r3, #11
 800a39c:	d90f      	bls.n	800a3be <_malloc_r+0x7e>
 800a39e:	600b      	str	r3, [r1, #0]
 800a3a0:	50cd      	str	r5, [r1, r3]
 800a3a2:	18cc      	adds	r4, r1, r3
 800a3a4:	4630      	mov	r0, r6
 800a3a6:	f000 fb38 	bl	800aa1a <__malloc_unlock>
 800a3aa:	f104 000b 	add.w	r0, r4, #11
 800a3ae:	1d23      	adds	r3, r4, #4
 800a3b0:	f020 0007 	bic.w	r0, r0, #7
 800a3b4:	1ac3      	subs	r3, r0, r3
 800a3b6:	d0d3      	beq.n	800a360 <_malloc_r+0x20>
 800a3b8:	425a      	negs	r2, r3
 800a3ba:	50e2      	str	r2, [r4, r3]
 800a3bc:	e7d0      	b.n	800a360 <_malloc_r+0x20>
 800a3be:	428c      	cmp	r4, r1
 800a3c0:	684b      	ldr	r3, [r1, #4]
 800a3c2:	bf16      	itet	ne
 800a3c4:	6063      	strne	r3, [r4, #4]
 800a3c6:	6013      	streq	r3, [r2, #0]
 800a3c8:	460c      	movne	r4, r1
 800a3ca:	e7eb      	b.n	800a3a4 <_malloc_r+0x64>
 800a3cc:	460c      	mov	r4, r1
 800a3ce:	6849      	ldr	r1, [r1, #4]
 800a3d0:	e7cc      	b.n	800a36c <_malloc_r+0x2c>
 800a3d2:	1cc4      	adds	r4, r0, #3
 800a3d4:	f024 0403 	bic.w	r4, r4, #3
 800a3d8:	42a0      	cmp	r0, r4
 800a3da:	d005      	beq.n	800a3e8 <_malloc_r+0xa8>
 800a3dc:	1a21      	subs	r1, r4, r0
 800a3de:	4630      	mov	r0, r6
 800a3e0:	f000 f86c 	bl	800a4bc <_sbrk_r>
 800a3e4:	3001      	adds	r0, #1
 800a3e6:	d0cf      	beq.n	800a388 <_malloc_r+0x48>
 800a3e8:	6025      	str	r5, [r4, #0]
 800a3ea:	e7db      	b.n	800a3a4 <_malloc_r+0x64>
 800a3ec:	240000b0 	.word	0x240000b0
 800a3f0:	240000b4 	.word	0x240000b4

0800a3f4 <_puts_r>:
 800a3f4:	b570      	push	{r4, r5, r6, lr}
 800a3f6:	460e      	mov	r6, r1
 800a3f8:	4605      	mov	r5, r0
 800a3fa:	b118      	cbz	r0, 800a404 <_puts_r+0x10>
 800a3fc:	6983      	ldr	r3, [r0, #24]
 800a3fe:	b90b      	cbnz	r3, 800a404 <_puts_r+0x10>
 800a400:	f000 fa1c 	bl	800a83c <__sinit>
 800a404:	69ab      	ldr	r3, [r5, #24]
 800a406:	68ac      	ldr	r4, [r5, #8]
 800a408:	b913      	cbnz	r3, 800a410 <_puts_r+0x1c>
 800a40a:	4628      	mov	r0, r5
 800a40c:	f000 fa16 	bl	800a83c <__sinit>
 800a410:	4b23      	ldr	r3, [pc, #140]	; (800a4a0 <_puts_r+0xac>)
 800a412:	429c      	cmp	r4, r3
 800a414:	d117      	bne.n	800a446 <_puts_r+0x52>
 800a416:	686c      	ldr	r4, [r5, #4]
 800a418:	89a3      	ldrh	r3, [r4, #12]
 800a41a:	071b      	lsls	r3, r3, #28
 800a41c:	d51d      	bpl.n	800a45a <_puts_r+0x66>
 800a41e:	6923      	ldr	r3, [r4, #16]
 800a420:	b1db      	cbz	r3, 800a45a <_puts_r+0x66>
 800a422:	3e01      	subs	r6, #1
 800a424:	68a3      	ldr	r3, [r4, #8]
 800a426:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a42a:	3b01      	subs	r3, #1
 800a42c:	60a3      	str	r3, [r4, #8]
 800a42e:	b9e9      	cbnz	r1, 800a46c <_puts_r+0x78>
 800a430:	2b00      	cmp	r3, #0
 800a432:	da2e      	bge.n	800a492 <_puts_r+0x9e>
 800a434:	4622      	mov	r2, r4
 800a436:	210a      	movs	r1, #10
 800a438:	4628      	mov	r0, r5
 800a43a:	f000 f84f 	bl	800a4dc <__swbuf_r>
 800a43e:	3001      	adds	r0, #1
 800a440:	d011      	beq.n	800a466 <_puts_r+0x72>
 800a442:	200a      	movs	r0, #10
 800a444:	e011      	b.n	800a46a <_puts_r+0x76>
 800a446:	4b17      	ldr	r3, [pc, #92]	; (800a4a4 <_puts_r+0xb0>)
 800a448:	429c      	cmp	r4, r3
 800a44a:	d101      	bne.n	800a450 <_puts_r+0x5c>
 800a44c:	68ac      	ldr	r4, [r5, #8]
 800a44e:	e7e3      	b.n	800a418 <_puts_r+0x24>
 800a450:	4b15      	ldr	r3, [pc, #84]	; (800a4a8 <_puts_r+0xb4>)
 800a452:	429c      	cmp	r4, r3
 800a454:	bf08      	it	eq
 800a456:	68ec      	ldreq	r4, [r5, #12]
 800a458:	e7de      	b.n	800a418 <_puts_r+0x24>
 800a45a:	4621      	mov	r1, r4
 800a45c:	4628      	mov	r0, r5
 800a45e:	f000 f88f 	bl	800a580 <__swsetup_r>
 800a462:	2800      	cmp	r0, #0
 800a464:	d0dd      	beq.n	800a422 <_puts_r+0x2e>
 800a466:	f04f 30ff 	mov.w	r0, #4294967295
 800a46a:	bd70      	pop	{r4, r5, r6, pc}
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	da04      	bge.n	800a47a <_puts_r+0x86>
 800a470:	69a2      	ldr	r2, [r4, #24]
 800a472:	429a      	cmp	r2, r3
 800a474:	dc06      	bgt.n	800a484 <_puts_r+0x90>
 800a476:	290a      	cmp	r1, #10
 800a478:	d004      	beq.n	800a484 <_puts_r+0x90>
 800a47a:	6823      	ldr	r3, [r4, #0]
 800a47c:	1c5a      	adds	r2, r3, #1
 800a47e:	6022      	str	r2, [r4, #0]
 800a480:	7019      	strb	r1, [r3, #0]
 800a482:	e7cf      	b.n	800a424 <_puts_r+0x30>
 800a484:	4622      	mov	r2, r4
 800a486:	4628      	mov	r0, r5
 800a488:	f000 f828 	bl	800a4dc <__swbuf_r>
 800a48c:	3001      	adds	r0, #1
 800a48e:	d1c9      	bne.n	800a424 <_puts_r+0x30>
 800a490:	e7e9      	b.n	800a466 <_puts_r+0x72>
 800a492:	6823      	ldr	r3, [r4, #0]
 800a494:	200a      	movs	r0, #10
 800a496:	1c5a      	adds	r2, r3, #1
 800a498:	6022      	str	r2, [r4, #0]
 800a49a:	7018      	strb	r0, [r3, #0]
 800a49c:	e7e5      	b.n	800a46a <_puts_r+0x76>
 800a49e:	bf00      	nop
 800a4a0:	0800b438 	.word	0x0800b438
 800a4a4:	0800b458 	.word	0x0800b458
 800a4a8:	0800b418 	.word	0x0800b418

0800a4ac <puts>:
 800a4ac:	4b02      	ldr	r3, [pc, #8]	; (800a4b8 <puts+0xc>)
 800a4ae:	4601      	mov	r1, r0
 800a4b0:	6818      	ldr	r0, [r3, #0]
 800a4b2:	f7ff bf9f 	b.w	800a3f4 <_puts_r>
 800a4b6:	bf00      	nop
 800a4b8:	2400001c 	.word	0x2400001c

0800a4bc <_sbrk_r>:
 800a4bc:	b538      	push	{r3, r4, r5, lr}
 800a4be:	4c06      	ldr	r4, [pc, #24]	; (800a4d8 <_sbrk_r+0x1c>)
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	4605      	mov	r5, r0
 800a4c4:	4608      	mov	r0, r1
 800a4c6:	6023      	str	r3, [r4, #0]
 800a4c8:	f7f7 fa2a 	bl	8001920 <_sbrk>
 800a4cc:	1c43      	adds	r3, r0, #1
 800a4ce:	d102      	bne.n	800a4d6 <_sbrk_r+0x1a>
 800a4d0:	6823      	ldr	r3, [r4, #0]
 800a4d2:	b103      	cbz	r3, 800a4d6 <_sbrk_r+0x1a>
 800a4d4:	602b      	str	r3, [r5, #0]
 800a4d6:	bd38      	pop	{r3, r4, r5, pc}
 800a4d8:	240003e4 	.word	0x240003e4

0800a4dc <__swbuf_r>:
 800a4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4de:	460e      	mov	r6, r1
 800a4e0:	4614      	mov	r4, r2
 800a4e2:	4605      	mov	r5, r0
 800a4e4:	b118      	cbz	r0, 800a4ee <__swbuf_r+0x12>
 800a4e6:	6983      	ldr	r3, [r0, #24]
 800a4e8:	b90b      	cbnz	r3, 800a4ee <__swbuf_r+0x12>
 800a4ea:	f000 f9a7 	bl	800a83c <__sinit>
 800a4ee:	4b21      	ldr	r3, [pc, #132]	; (800a574 <__swbuf_r+0x98>)
 800a4f0:	429c      	cmp	r4, r3
 800a4f2:	d12a      	bne.n	800a54a <__swbuf_r+0x6e>
 800a4f4:	686c      	ldr	r4, [r5, #4]
 800a4f6:	69a3      	ldr	r3, [r4, #24]
 800a4f8:	60a3      	str	r3, [r4, #8]
 800a4fa:	89a3      	ldrh	r3, [r4, #12]
 800a4fc:	071a      	lsls	r2, r3, #28
 800a4fe:	d52e      	bpl.n	800a55e <__swbuf_r+0x82>
 800a500:	6923      	ldr	r3, [r4, #16]
 800a502:	b363      	cbz	r3, 800a55e <__swbuf_r+0x82>
 800a504:	6923      	ldr	r3, [r4, #16]
 800a506:	6820      	ldr	r0, [r4, #0]
 800a508:	1ac0      	subs	r0, r0, r3
 800a50a:	6963      	ldr	r3, [r4, #20]
 800a50c:	b2f6      	uxtb	r6, r6
 800a50e:	4283      	cmp	r3, r0
 800a510:	4637      	mov	r7, r6
 800a512:	dc04      	bgt.n	800a51e <__swbuf_r+0x42>
 800a514:	4621      	mov	r1, r4
 800a516:	4628      	mov	r0, r5
 800a518:	f000 f926 	bl	800a768 <_fflush_r>
 800a51c:	bb28      	cbnz	r0, 800a56a <__swbuf_r+0x8e>
 800a51e:	68a3      	ldr	r3, [r4, #8]
 800a520:	3b01      	subs	r3, #1
 800a522:	60a3      	str	r3, [r4, #8]
 800a524:	6823      	ldr	r3, [r4, #0]
 800a526:	1c5a      	adds	r2, r3, #1
 800a528:	6022      	str	r2, [r4, #0]
 800a52a:	701e      	strb	r6, [r3, #0]
 800a52c:	6963      	ldr	r3, [r4, #20]
 800a52e:	3001      	adds	r0, #1
 800a530:	4283      	cmp	r3, r0
 800a532:	d004      	beq.n	800a53e <__swbuf_r+0x62>
 800a534:	89a3      	ldrh	r3, [r4, #12]
 800a536:	07db      	lsls	r3, r3, #31
 800a538:	d519      	bpl.n	800a56e <__swbuf_r+0x92>
 800a53a:	2e0a      	cmp	r6, #10
 800a53c:	d117      	bne.n	800a56e <__swbuf_r+0x92>
 800a53e:	4621      	mov	r1, r4
 800a540:	4628      	mov	r0, r5
 800a542:	f000 f911 	bl	800a768 <_fflush_r>
 800a546:	b190      	cbz	r0, 800a56e <__swbuf_r+0x92>
 800a548:	e00f      	b.n	800a56a <__swbuf_r+0x8e>
 800a54a:	4b0b      	ldr	r3, [pc, #44]	; (800a578 <__swbuf_r+0x9c>)
 800a54c:	429c      	cmp	r4, r3
 800a54e:	d101      	bne.n	800a554 <__swbuf_r+0x78>
 800a550:	68ac      	ldr	r4, [r5, #8]
 800a552:	e7d0      	b.n	800a4f6 <__swbuf_r+0x1a>
 800a554:	4b09      	ldr	r3, [pc, #36]	; (800a57c <__swbuf_r+0xa0>)
 800a556:	429c      	cmp	r4, r3
 800a558:	bf08      	it	eq
 800a55a:	68ec      	ldreq	r4, [r5, #12]
 800a55c:	e7cb      	b.n	800a4f6 <__swbuf_r+0x1a>
 800a55e:	4621      	mov	r1, r4
 800a560:	4628      	mov	r0, r5
 800a562:	f000 f80d 	bl	800a580 <__swsetup_r>
 800a566:	2800      	cmp	r0, #0
 800a568:	d0cc      	beq.n	800a504 <__swbuf_r+0x28>
 800a56a:	f04f 37ff 	mov.w	r7, #4294967295
 800a56e:	4638      	mov	r0, r7
 800a570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a572:	bf00      	nop
 800a574:	0800b438 	.word	0x0800b438
 800a578:	0800b458 	.word	0x0800b458
 800a57c:	0800b418 	.word	0x0800b418

0800a580 <__swsetup_r>:
 800a580:	4b32      	ldr	r3, [pc, #200]	; (800a64c <__swsetup_r+0xcc>)
 800a582:	b570      	push	{r4, r5, r6, lr}
 800a584:	681d      	ldr	r5, [r3, #0]
 800a586:	4606      	mov	r6, r0
 800a588:	460c      	mov	r4, r1
 800a58a:	b125      	cbz	r5, 800a596 <__swsetup_r+0x16>
 800a58c:	69ab      	ldr	r3, [r5, #24]
 800a58e:	b913      	cbnz	r3, 800a596 <__swsetup_r+0x16>
 800a590:	4628      	mov	r0, r5
 800a592:	f000 f953 	bl	800a83c <__sinit>
 800a596:	4b2e      	ldr	r3, [pc, #184]	; (800a650 <__swsetup_r+0xd0>)
 800a598:	429c      	cmp	r4, r3
 800a59a:	d10f      	bne.n	800a5bc <__swsetup_r+0x3c>
 800a59c:	686c      	ldr	r4, [r5, #4]
 800a59e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5a2:	b29a      	uxth	r2, r3
 800a5a4:	0715      	lsls	r5, r2, #28
 800a5a6:	d42c      	bmi.n	800a602 <__swsetup_r+0x82>
 800a5a8:	06d0      	lsls	r0, r2, #27
 800a5aa:	d411      	bmi.n	800a5d0 <__swsetup_r+0x50>
 800a5ac:	2209      	movs	r2, #9
 800a5ae:	6032      	str	r2, [r6, #0]
 800a5b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5b4:	81a3      	strh	r3, [r4, #12]
 800a5b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ba:	e03e      	b.n	800a63a <__swsetup_r+0xba>
 800a5bc:	4b25      	ldr	r3, [pc, #148]	; (800a654 <__swsetup_r+0xd4>)
 800a5be:	429c      	cmp	r4, r3
 800a5c0:	d101      	bne.n	800a5c6 <__swsetup_r+0x46>
 800a5c2:	68ac      	ldr	r4, [r5, #8]
 800a5c4:	e7eb      	b.n	800a59e <__swsetup_r+0x1e>
 800a5c6:	4b24      	ldr	r3, [pc, #144]	; (800a658 <__swsetup_r+0xd8>)
 800a5c8:	429c      	cmp	r4, r3
 800a5ca:	bf08      	it	eq
 800a5cc:	68ec      	ldreq	r4, [r5, #12]
 800a5ce:	e7e6      	b.n	800a59e <__swsetup_r+0x1e>
 800a5d0:	0751      	lsls	r1, r2, #29
 800a5d2:	d512      	bpl.n	800a5fa <__swsetup_r+0x7a>
 800a5d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5d6:	b141      	cbz	r1, 800a5ea <__swsetup_r+0x6a>
 800a5d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5dc:	4299      	cmp	r1, r3
 800a5de:	d002      	beq.n	800a5e6 <__swsetup_r+0x66>
 800a5e0:	4630      	mov	r0, r6
 800a5e2:	f7ff fe5f 	bl	800a2a4 <_free_r>
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	6363      	str	r3, [r4, #52]	; 0x34
 800a5ea:	89a3      	ldrh	r3, [r4, #12]
 800a5ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a5f0:	81a3      	strh	r3, [r4, #12]
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	6063      	str	r3, [r4, #4]
 800a5f6:	6923      	ldr	r3, [r4, #16]
 800a5f8:	6023      	str	r3, [r4, #0]
 800a5fa:	89a3      	ldrh	r3, [r4, #12]
 800a5fc:	f043 0308 	orr.w	r3, r3, #8
 800a600:	81a3      	strh	r3, [r4, #12]
 800a602:	6923      	ldr	r3, [r4, #16]
 800a604:	b94b      	cbnz	r3, 800a61a <__swsetup_r+0x9a>
 800a606:	89a3      	ldrh	r3, [r4, #12]
 800a608:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a60c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a610:	d003      	beq.n	800a61a <__swsetup_r+0x9a>
 800a612:	4621      	mov	r1, r4
 800a614:	4630      	mov	r0, r6
 800a616:	f000 f9bf 	bl	800a998 <__smakebuf_r>
 800a61a:	89a2      	ldrh	r2, [r4, #12]
 800a61c:	f012 0301 	ands.w	r3, r2, #1
 800a620:	d00c      	beq.n	800a63c <__swsetup_r+0xbc>
 800a622:	2300      	movs	r3, #0
 800a624:	60a3      	str	r3, [r4, #8]
 800a626:	6963      	ldr	r3, [r4, #20]
 800a628:	425b      	negs	r3, r3
 800a62a:	61a3      	str	r3, [r4, #24]
 800a62c:	6923      	ldr	r3, [r4, #16]
 800a62e:	b953      	cbnz	r3, 800a646 <__swsetup_r+0xc6>
 800a630:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a634:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a638:	d1ba      	bne.n	800a5b0 <__swsetup_r+0x30>
 800a63a:	bd70      	pop	{r4, r5, r6, pc}
 800a63c:	0792      	lsls	r2, r2, #30
 800a63e:	bf58      	it	pl
 800a640:	6963      	ldrpl	r3, [r4, #20]
 800a642:	60a3      	str	r3, [r4, #8]
 800a644:	e7f2      	b.n	800a62c <__swsetup_r+0xac>
 800a646:	2000      	movs	r0, #0
 800a648:	e7f7      	b.n	800a63a <__swsetup_r+0xba>
 800a64a:	bf00      	nop
 800a64c:	2400001c 	.word	0x2400001c
 800a650:	0800b438 	.word	0x0800b438
 800a654:	0800b458 	.word	0x0800b458
 800a658:	0800b418 	.word	0x0800b418

0800a65c <__sflush_r>:
 800a65c:	898a      	ldrh	r2, [r1, #12]
 800a65e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a662:	4605      	mov	r5, r0
 800a664:	0710      	lsls	r0, r2, #28
 800a666:	460c      	mov	r4, r1
 800a668:	d458      	bmi.n	800a71c <__sflush_r+0xc0>
 800a66a:	684b      	ldr	r3, [r1, #4]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	dc05      	bgt.n	800a67c <__sflush_r+0x20>
 800a670:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a672:	2b00      	cmp	r3, #0
 800a674:	dc02      	bgt.n	800a67c <__sflush_r+0x20>
 800a676:	2000      	movs	r0, #0
 800a678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a67c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a67e:	2e00      	cmp	r6, #0
 800a680:	d0f9      	beq.n	800a676 <__sflush_r+0x1a>
 800a682:	2300      	movs	r3, #0
 800a684:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a688:	682f      	ldr	r7, [r5, #0]
 800a68a:	6a21      	ldr	r1, [r4, #32]
 800a68c:	602b      	str	r3, [r5, #0]
 800a68e:	d032      	beq.n	800a6f6 <__sflush_r+0x9a>
 800a690:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a692:	89a3      	ldrh	r3, [r4, #12]
 800a694:	075a      	lsls	r2, r3, #29
 800a696:	d505      	bpl.n	800a6a4 <__sflush_r+0x48>
 800a698:	6863      	ldr	r3, [r4, #4]
 800a69a:	1ac0      	subs	r0, r0, r3
 800a69c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a69e:	b10b      	cbz	r3, 800a6a4 <__sflush_r+0x48>
 800a6a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a6a2:	1ac0      	subs	r0, r0, r3
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a6aa:	6a21      	ldr	r1, [r4, #32]
 800a6ac:	4628      	mov	r0, r5
 800a6ae:	47b0      	blx	r6
 800a6b0:	1c43      	adds	r3, r0, #1
 800a6b2:	89a3      	ldrh	r3, [r4, #12]
 800a6b4:	d106      	bne.n	800a6c4 <__sflush_r+0x68>
 800a6b6:	6829      	ldr	r1, [r5, #0]
 800a6b8:	291d      	cmp	r1, #29
 800a6ba:	d848      	bhi.n	800a74e <__sflush_r+0xf2>
 800a6bc:	4a29      	ldr	r2, [pc, #164]	; (800a764 <__sflush_r+0x108>)
 800a6be:	40ca      	lsrs	r2, r1
 800a6c0:	07d6      	lsls	r6, r2, #31
 800a6c2:	d544      	bpl.n	800a74e <__sflush_r+0xf2>
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	6062      	str	r2, [r4, #4]
 800a6c8:	04d9      	lsls	r1, r3, #19
 800a6ca:	6922      	ldr	r2, [r4, #16]
 800a6cc:	6022      	str	r2, [r4, #0]
 800a6ce:	d504      	bpl.n	800a6da <__sflush_r+0x7e>
 800a6d0:	1c42      	adds	r2, r0, #1
 800a6d2:	d101      	bne.n	800a6d8 <__sflush_r+0x7c>
 800a6d4:	682b      	ldr	r3, [r5, #0]
 800a6d6:	b903      	cbnz	r3, 800a6da <__sflush_r+0x7e>
 800a6d8:	6560      	str	r0, [r4, #84]	; 0x54
 800a6da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6dc:	602f      	str	r7, [r5, #0]
 800a6de:	2900      	cmp	r1, #0
 800a6e0:	d0c9      	beq.n	800a676 <__sflush_r+0x1a>
 800a6e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6e6:	4299      	cmp	r1, r3
 800a6e8:	d002      	beq.n	800a6f0 <__sflush_r+0x94>
 800a6ea:	4628      	mov	r0, r5
 800a6ec:	f7ff fdda 	bl	800a2a4 <_free_r>
 800a6f0:	2000      	movs	r0, #0
 800a6f2:	6360      	str	r0, [r4, #52]	; 0x34
 800a6f4:	e7c0      	b.n	800a678 <__sflush_r+0x1c>
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	4628      	mov	r0, r5
 800a6fa:	47b0      	blx	r6
 800a6fc:	1c41      	adds	r1, r0, #1
 800a6fe:	d1c8      	bne.n	800a692 <__sflush_r+0x36>
 800a700:	682b      	ldr	r3, [r5, #0]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d0c5      	beq.n	800a692 <__sflush_r+0x36>
 800a706:	2b1d      	cmp	r3, #29
 800a708:	d001      	beq.n	800a70e <__sflush_r+0xb2>
 800a70a:	2b16      	cmp	r3, #22
 800a70c:	d101      	bne.n	800a712 <__sflush_r+0xb6>
 800a70e:	602f      	str	r7, [r5, #0]
 800a710:	e7b1      	b.n	800a676 <__sflush_r+0x1a>
 800a712:	89a3      	ldrh	r3, [r4, #12]
 800a714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a718:	81a3      	strh	r3, [r4, #12]
 800a71a:	e7ad      	b.n	800a678 <__sflush_r+0x1c>
 800a71c:	690f      	ldr	r7, [r1, #16]
 800a71e:	2f00      	cmp	r7, #0
 800a720:	d0a9      	beq.n	800a676 <__sflush_r+0x1a>
 800a722:	0793      	lsls	r3, r2, #30
 800a724:	680e      	ldr	r6, [r1, #0]
 800a726:	bf08      	it	eq
 800a728:	694b      	ldreq	r3, [r1, #20]
 800a72a:	600f      	str	r7, [r1, #0]
 800a72c:	bf18      	it	ne
 800a72e:	2300      	movne	r3, #0
 800a730:	eba6 0807 	sub.w	r8, r6, r7
 800a734:	608b      	str	r3, [r1, #8]
 800a736:	f1b8 0f00 	cmp.w	r8, #0
 800a73a:	dd9c      	ble.n	800a676 <__sflush_r+0x1a>
 800a73c:	4643      	mov	r3, r8
 800a73e:	463a      	mov	r2, r7
 800a740:	6a21      	ldr	r1, [r4, #32]
 800a742:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a744:	4628      	mov	r0, r5
 800a746:	47b0      	blx	r6
 800a748:	2800      	cmp	r0, #0
 800a74a:	dc06      	bgt.n	800a75a <__sflush_r+0xfe>
 800a74c:	89a3      	ldrh	r3, [r4, #12]
 800a74e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a752:	81a3      	strh	r3, [r4, #12]
 800a754:	f04f 30ff 	mov.w	r0, #4294967295
 800a758:	e78e      	b.n	800a678 <__sflush_r+0x1c>
 800a75a:	4407      	add	r7, r0
 800a75c:	eba8 0800 	sub.w	r8, r8, r0
 800a760:	e7e9      	b.n	800a736 <__sflush_r+0xda>
 800a762:	bf00      	nop
 800a764:	20400001 	.word	0x20400001

0800a768 <_fflush_r>:
 800a768:	b538      	push	{r3, r4, r5, lr}
 800a76a:	690b      	ldr	r3, [r1, #16]
 800a76c:	4605      	mov	r5, r0
 800a76e:	460c      	mov	r4, r1
 800a770:	b1db      	cbz	r3, 800a7aa <_fflush_r+0x42>
 800a772:	b118      	cbz	r0, 800a77c <_fflush_r+0x14>
 800a774:	6983      	ldr	r3, [r0, #24]
 800a776:	b90b      	cbnz	r3, 800a77c <_fflush_r+0x14>
 800a778:	f000 f860 	bl	800a83c <__sinit>
 800a77c:	4b0c      	ldr	r3, [pc, #48]	; (800a7b0 <_fflush_r+0x48>)
 800a77e:	429c      	cmp	r4, r3
 800a780:	d109      	bne.n	800a796 <_fflush_r+0x2e>
 800a782:	686c      	ldr	r4, [r5, #4]
 800a784:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a788:	b17b      	cbz	r3, 800a7aa <_fflush_r+0x42>
 800a78a:	4621      	mov	r1, r4
 800a78c:	4628      	mov	r0, r5
 800a78e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a792:	f7ff bf63 	b.w	800a65c <__sflush_r>
 800a796:	4b07      	ldr	r3, [pc, #28]	; (800a7b4 <_fflush_r+0x4c>)
 800a798:	429c      	cmp	r4, r3
 800a79a:	d101      	bne.n	800a7a0 <_fflush_r+0x38>
 800a79c:	68ac      	ldr	r4, [r5, #8]
 800a79e:	e7f1      	b.n	800a784 <_fflush_r+0x1c>
 800a7a0:	4b05      	ldr	r3, [pc, #20]	; (800a7b8 <_fflush_r+0x50>)
 800a7a2:	429c      	cmp	r4, r3
 800a7a4:	bf08      	it	eq
 800a7a6:	68ec      	ldreq	r4, [r5, #12]
 800a7a8:	e7ec      	b.n	800a784 <_fflush_r+0x1c>
 800a7aa:	2000      	movs	r0, #0
 800a7ac:	bd38      	pop	{r3, r4, r5, pc}
 800a7ae:	bf00      	nop
 800a7b0:	0800b438 	.word	0x0800b438
 800a7b4:	0800b458 	.word	0x0800b458
 800a7b8:	0800b418 	.word	0x0800b418

0800a7bc <std>:
 800a7bc:	2300      	movs	r3, #0
 800a7be:	b510      	push	{r4, lr}
 800a7c0:	4604      	mov	r4, r0
 800a7c2:	e9c0 3300 	strd	r3, r3, [r0]
 800a7c6:	6083      	str	r3, [r0, #8]
 800a7c8:	8181      	strh	r1, [r0, #12]
 800a7ca:	6643      	str	r3, [r0, #100]	; 0x64
 800a7cc:	81c2      	strh	r2, [r0, #14]
 800a7ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a7d2:	6183      	str	r3, [r0, #24]
 800a7d4:	4619      	mov	r1, r3
 800a7d6:	2208      	movs	r2, #8
 800a7d8:	305c      	adds	r0, #92	; 0x5c
 800a7da:	f7ff fd4d 	bl	800a278 <memset>
 800a7de:	4b05      	ldr	r3, [pc, #20]	; (800a7f4 <std+0x38>)
 800a7e0:	6263      	str	r3, [r4, #36]	; 0x24
 800a7e2:	4b05      	ldr	r3, [pc, #20]	; (800a7f8 <std+0x3c>)
 800a7e4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a7e6:	4b05      	ldr	r3, [pc, #20]	; (800a7fc <std+0x40>)
 800a7e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a7ea:	4b05      	ldr	r3, [pc, #20]	; (800a800 <std+0x44>)
 800a7ec:	6224      	str	r4, [r4, #32]
 800a7ee:	6323      	str	r3, [r4, #48]	; 0x30
 800a7f0:	bd10      	pop	{r4, pc}
 800a7f2:	bf00      	nop
 800a7f4:	0800aa1d 	.word	0x0800aa1d
 800a7f8:	0800aa3f 	.word	0x0800aa3f
 800a7fc:	0800aa77 	.word	0x0800aa77
 800a800:	0800aa9b 	.word	0x0800aa9b

0800a804 <_cleanup_r>:
 800a804:	4901      	ldr	r1, [pc, #4]	; (800a80c <_cleanup_r+0x8>)
 800a806:	f000 b885 	b.w	800a914 <_fwalk_reent>
 800a80a:	bf00      	nop
 800a80c:	0800a769 	.word	0x0800a769

0800a810 <__sfmoreglue>:
 800a810:	b570      	push	{r4, r5, r6, lr}
 800a812:	1e4a      	subs	r2, r1, #1
 800a814:	2568      	movs	r5, #104	; 0x68
 800a816:	4355      	muls	r5, r2
 800a818:	460e      	mov	r6, r1
 800a81a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a81e:	f7ff fd8f 	bl	800a340 <_malloc_r>
 800a822:	4604      	mov	r4, r0
 800a824:	b140      	cbz	r0, 800a838 <__sfmoreglue+0x28>
 800a826:	2100      	movs	r1, #0
 800a828:	e9c0 1600 	strd	r1, r6, [r0]
 800a82c:	300c      	adds	r0, #12
 800a82e:	60a0      	str	r0, [r4, #8]
 800a830:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a834:	f7ff fd20 	bl	800a278 <memset>
 800a838:	4620      	mov	r0, r4
 800a83a:	bd70      	pop	{r4, r5, r6, pc}

0800a83c <__sinit>:
 800a83c:	6983      	ldr	r3, [r0, #24]
 800a83e:	b510      	push	{r4, lr}
 800a840:	4604      	mov	r4, r0
 800a842:	bb33      	cbnz	r3, 800a892 <__sinit+0x56>
 800a844:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a848:	6503      	str	r3, [r0, #80]	; 0x50
 800a84a:	4b12      	ldr	r3, [pc, #72]	; (800a894 <__sinit+0x58>)
 800a84c:	4a12      	ldr	r2, [pc, #72]	; (800a898 <__sinit+0x5c>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	6282      	str	r2, [r0, #40]	; 0x28
 800a852:	4298      	cmp	r0, r3
 800a854:	bf04      	itt	eq
 800a856:	2301      	moveq	r3, #1
 800a858:	6183      	streq	r3, [r0, #24]
 800a85a:	f000 f81f 	bl	800a89c <__sfp>
 800a85e:	6060      	str	r0, [r4, #4]
 800a860:	4620      	mov	r0, r4
 800a862:	f000 f81b 	bl	800a89c <__sfp>
 800a866:	60a0      	str	r0, [r4, #8]
 800a868:	4620      	mov	r0, r4
 800a86a:	f000 f817 	bl	800a89c <__sfp>
 800a86e:	2200      	movs	r2, #0
 800a870:	60e0      	str	r0, [r4, #12]
 800a872:	2104      	movs	r1, #4
 800a874:	6860      	ldr	r0, [r4, #4]
 800a876:	f7ff ffa1 	bl	800a7bc <std>
 800a87a:	2201      	movs	r2, #1
 800a87c:	2109      	movs	r1, #9
 800a87e:	68a0      	ldr	r0, [r4, #8]
 800a880:	f7ff ff9c 	bl	800a7bc <std>
 800a884:	2202      	movs	r2, #2
 800a886:	2112      	movs	r1, #18
 800a888:	68e0      	ldr	r0, [r4, #12]
 800a88a:	f7ff ff97 	bl	800a7bc <std>
 800a88e:	2301      	movs	r3, #1
 800a890:	61a3      	str	r3, [r4, #24]
 800a892:	bd10      	pop	{r4, pc}
 800a894:	0800b414 	.word	0x0800b414
 800a898:	0800a805 	.word	0x0800a805

0800a89c <__sfp>:
 800a89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a89e:	4b1b      	ldr	r3, [pc, #108]	; (800a90c <__sfp+0x70>)
 800a8a0:	681e      	ldr	r6, [r3, #0]
 800a8a2:	69b3      	ldr	r3, [r6, #24]
 800a8a4:	4607      	mov	r7, r0
 800a8a6:	b913      	cbnz	r3, 800a8ae <__sfp+0x12>
 800a8a8:	4630      	mov	r0, r6
 800a8aa:	f7ff ffc7 	bl	800a83c <__sinit>
 800a8ae:	3648      	adds	r6, #72	; 0x48
 800a8b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a8b4:	3b01      	subs	r3, #1
 800a8b6:	d503      	bpl.n	800a8c0 <__sfp+0x24>
 800a8b8:	6833      	ldr	r3, [r6, #0]
 800a8ba:	b133      	cbz	r3, 800a8ca <__sfp+0x2e>
 800a8bc:	6836      	ldr	r6, [r6, #0]
 800a8be:	e7f7      	b.n	800a8b0 <__sfp+0x14>
 800a8c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a8c4:	b16d      	cbz	r5, 800a8e2 <__sfp+0x46>
 800a8c6:	3468      	adds	r4, #104	; 0x68
 800a8c8:	e7f4      	b.n	800a8b4 <__sfp+0x18>
 800a8ca:	2104      	movs	r1, #4
 800a8cc:	4638      	mov	r0, r7
 800a8ce:	f7ff ff9f 	bl	800a810 <__sfmoreglue>
 800a8d2:	6030      	str	r0, [r6, #0]
 800a8d4:	2800      	cmp	r0, #0
 800a8d6:	d1f1      	bne.n	800a8bc <__sfp+0x20>
 800a8d8:	230c      	movs	r3, #12
 800a8da:	603b      	str	r3, [r7, #0]
 800a8dc:	4604      	mov	r4, r0
 800a8de:	4620      	mov	r0, r4
 800a8e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8e2:	4b0b      	ldr	r3, [pc, #44]	; (800a910 <__sfp+0x74>)
 800a8e4:	6665      	str	r5, [r4, #100]	; 0x64
 800a8e6:	e9c4 5500 	strd	r5, r5, [r4]
 800a8ea:	60a5      	str	r5, [r4, #8]
 800a8ec:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a8f0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a8f4:	2208      	movs	r2, #8
 800a8f6:	4629      	mov	r1, r5
 800a8f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a8fc:	f7ff fcbc 	bl	800a278 <memset>
 800a900:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a904:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a908:	e7e9      	b.n	800a8de <__sfp+0x42>
 800a90a:	bf00      	nop
 800a90c:	0800b414 	.word	0x0800b414
 800a910:	ffff0001 	.word	0xffff0001

0800a914 <_fwalk_reent>:
 800a914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a918:	4680      	mov	r8, r0
 800a91a:	4689      	mov	r9, r1
 800a91c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a920:	2600      	movs	r6, #0
 800a922:	b914      	cbnz	r4, 800a92a <_fwalk_reent+0x16>
 800a924:	4630      	mov	r0, r6
 800a926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a92a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a92e:	3f01      	subs	r7, #1
 800a930:	d501      	bpl.n	800a936 <_fwalk_reent+0x22>
 800a932:	6824      	ldr	r4, [r4, #0]
 800a934:	e7f5      	b.n	800a922 <_fwalk_reent+0xe>
 800a936:	89ab      	ldrh	r3, [r5, #12]
 800a938:	2b01      	cmp	r3, #1
 800a93a:	d907      	bls.n	800a94c <_fwalk_reent+0x38>
 800a93c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a940:	3301      	adds	r3, #1
 800a942:	d003      	beq.n	800a94c <_fwalk_reent+0x38>
 800a944:	4629      	mov	r1, r5
 800a946:	4640      	mov	r0, r8
 800a948:	47c8      	blx	r9
 800a94a:	4306      	orrs	r6, r0
 800a94c:	3568      	adds	r5, #104	; 0x68
 800a94e:	e7ee      	b.n	800a92e <_fwalk_reent+0x1a>

0800a950 <__swhatbuf_r>:
 800a950:	b570      	push	{r4, r5, r6, lr}
 800a952:	460e      	mov	r6, r1
 800a954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a958:	2900      	cmp	r1, #0
 800a95a:	b096      	sub	sp, #88	; 0x58
 800a95c:	4614      	mov	r4, r2
 800a95e:	461d      	mov	r5, r3
 800a960:	da07      	bge.n	800a972 <__swhatbuf_r+0x22>
 800a962:	2300      	movs	r3, #0
 800a964:	602b      	str	r3, [r5, #0]
 800a966:	89b3      	ldrh	r3, [r6, #12]
 800a968:	061a      	lsls	r2, r3, #24
 800a96a:	d410      	bmi.n	800a98e <__swhatbuf_r+0x3e>
 800a96c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a970:	e00e      	b.n	800a990 <__swhatbuf_r+0x40>
 800a972:	466a      	mov	r2, sp
 800a974:	f000 f8b8 	bl	800aae8 <_fstat_r>
 800a978:	2800      	cmp	r0, #0
 800a97a:	dbf2      	blt.n	800a962 <__swhatbuf_r+0x12>
 800a97c:	9a01      	ldr	r2, [sp, #4]
 800a97e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a982:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a986:	425a      	negs	r2, r3
 800a988:	415a      	adcs	r2, r3
 800a98a:	602a      	str	r2, [r5, #0]
 800a98c:	e7ee      	b.n	800a96c <__swhatbuf_r+0x1c>
 800a98e:	2340      	movs	r3, #64	; 0x40
 800a990:	2000      	movs	r0, #0
 800a992:	6023      	str	r3, [r4, #0]
 800a994:	b016      	add	sp, #88	; 0x58
 800a996:	bd70      	pop	{r4, r5, r6, pc}

0800a998 <__smakebuf_r>:
 800a998:	898b      	ldrh	r3, [r1, #12]
 800a99a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a99c:	079d      	lsls	r5, r3, #30
 800a99e:	4606      	mov	r6, r0
 800a9a0:	460c      	mov	r4, r1
 800a9a2:	d507      	bpl.n	800a9b4 <__smakebuf_r+0x1c>
 800a9a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a9a8:	6023      	str	r3, [r4, #0]
 800a9aa:	6123      	str	r3, [r4, #16]
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	6163      	str	r3, [r4, #20]
 800a9b0:	b002      	add	sp, #8
 800a9b2:	bd70      	pop	{r4, r5, r6, pc}
 800a9b4:	ab01      	add	r3, sp, #4
 800a9b6:	466a      	mov	r2, sp
 800a9b8:	f7ff ffca 	bl	800a950 <__swhatbuf_r>
 800a9bc:	9900      	ldr	r1, [sp, #0]
 800a9be:	4605      	mov	r5, r0
 800a9c0:	4630      	mov	r0, r6
 800a9c2:	f7ff fcbd 	bl	800a340 <_malloc_r>
 800a9c6:	b948      	cbnz	r0, 800a9dc <__smakebuf_r+0x44>
 800a9c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9cc:	059a      	lsls	r2, r3, #22
 800a9ce:	d4ef      	bmi.n	800a9b0 <__smakebuf_r+0x18>
 800a9d0:	f023 0303 	bic.w	r3, r3, #3
 800a9d4:	f043 0302 	orr.w	r3, r3, #2
 800a9d8:	81a3      	strh	r3, [r4, #12]
 800a9da:	e7e3      	b.n	800a9a4 <__smakebuf_r+0xc>
 800a9dc:	4b0d      	ldr	r3, [pc, #52]	; (800aa14 <__smakebuf_r+0x7c>)
 800a9de:	62b3      	str	r3, [r6, #40]	; 0x28
 800a9e0:	89a3      	ldrh	r3, [r4, #12]
 800a9e2:	6020      	str	r0, [r4, #0]
 800a9e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9e8:	81a3      	strh	r3, [r4, #12]
 800a9ea:	9b00      	ldr	r3, [sp, #0]
 800a9ec:	6163      	str	r3, [r4, #20]
 800a9ee:	9b01      	ldr	r3, [sp, #4]
 800a9f0:	6120      	str	r0, [r4, #16]
 800a9f2:	b15b      	cbz	r3, 800aa0c <__smakebuf_r+0x74>
 800a9f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9f8:	4630      	mov	r0, r6
 800a9fa:	f000 f887 	bl	800ab0c <_isatty_r>
 800a9fe:	b128      	cbz	r0, 800aa0c <__smakebuf_r+0x74>
 800aa00:	89a3      	ldrh	r3, [r4, #12]
 800aa02:	f023 0303 	bic.w	r3, r3, #3
 800aa06:	f043 0301 	orr.w	r3, r3, #1
 800aa0a:	81a3      	strh	r3, [r4, #12]
 800aa0c:	89a3      	ldrh	r3, [r4, #12]
 800aa0e:	431d      	orrs	r5, r3
 800aa10:	81a5      	strh	r5, [r4, #12]
 800aa12:	e7cd      	b.n	800a9b0 <__smakebuf_r+0x18>
 800aa14:	0800a805 	.word	0x0800a805

0800aa18 <__malloc_lock>:
 800aa18:	4770      	bx	lr

0800aa1a <__malloc_unlock>:
 800aa1a:	4770      	bx	lr

0800aa1c <__sread>:
 800aa1c:	b510      	push	{r4, lr}
 800aa1e:	460c      	mov	r4, r1
 800aa20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa24:	f000 f894 	bl	800ab50 <_read_r>
 800aa28:	2800      	cmp	r0, #0
 800aa2a:	bfab      	itete	ge
 800aa2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aa2e:	89a3      	ldrhlt	r3, [r4, #12]
 800aa30:	181b      	addge	r3, r3, r0
 800aa32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aa36:	bfac      	ite	ge
 800aa38:	6563      	strge	r3, [r4, #84]	; 0x54
 800aa3a:	81a3      	strhlt	r3, [r4, #12]
 800aa3c:	bd10      	pop	{r4, pc}

0800aa3e <__swrite>:
 800aa3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa42:	461f      	mov	r7, r3
 800aa44:	898b      	ldrh	r3, [r1, #12]
 800aa46:	05db      	lsls	r3, r3, #23
 800aa48:	4605      	mov	r5, r0
 800aa4a:	460c      	mov	r4, r1
 800aa4c:	4616      	mov	r6, r2
 800aa4e:	d505      	bpl.n	800aa5c <__swrite+0x1e>
 800aa50:	2302      	movs	r3, #2
 800aa52:	2200      	movs	r2, #0
 800aa54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa58:	f000 f868 	bl	800ab2c <_lseek_r>
 800aa5c:	89a3      	ldrh	r3, [r4, #12]
 800aa5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa66:	81a3      	strh	r3, [r4, #12]
 800aa68:	4632      	mov	r2, r6
 800aa6a:	463b      	mov	r3, r7
 800aa6c:	4628      	mov	r0, r5
 800aa6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa72:	f000 b817 	b.w	800aaa4 <_write_r>

0800aa76 <__sseek>:
 800aa76:	b510      	push	{r4, lr}
 800aa78:	460c      	mov	r4, r1
 800aa7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa7e:	f000 f855 	bl	800ab2c <_lseek_r>
 800aa82:	1c43      	adds	r3, r0, #1
 800aa84:	89a3      	ldrh	r3, [r4, #12]
 800aa86:	bf15      	itete	ne
 800aa88:	6560      	strne	r0, [r4, #84]	; 0x54
 800aa8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aa8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aa92:	81a3      	strheq	r3, [r4, #12]
 800aa94:	bf18      	it	ne
 800aa96:	81a3      	strhne	r3, [r4, #12]
 800aa98:	bd10      	pop	{r4, pc}

0800aa9a <__sclose>:
 800aa9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa9e:	f000 b813 	b.w	800aac8 <_close_r>
	...

0800aaa4 <_write_r>:
 800aaa4:	b538      	push	{r3, r4, r5, lr}
 800aaa6:	4c07      	ldr	r4, [pc, #28]	; (800aac4 <_write_r+0x20>)
 800aaa8:	4605      	mov	r5, r0
 800aaaa:	4608      	mov	r0, r1
 800aaac:	4611      	mov	r1, r2
 800aaae:	2200      	movs	r2, #0
 800aab0:	6022      	str	r2, [r4, #0]
 800aab2:	461a      	mov	r2, r3
 800aab4:	f7f6 fee3 	bl	800187e <_write>
 800aab8:	1c43      	adds	r3, r0, #1
 800aaba:	d102      	bne.n	800aac2 <_write_r+0x1e>
 800aabc:	6823      	ldr	r3, [r4, #0]
 800aabe:	b103      	cbz	r3, 800aac2 <_write_r+0x1e>
 800aac0:	602b      	str	r3, [r5, #0]
 800aac2:	bd38      	pop	{r3, r4, r5, pc}
 800aac4:	240003e4 	.word	0x240003e4

0800aac8 <_close_r>:
 800aac8:	b538      	push	{r3, r4, r5, lr}
 800aaca:	4c06      	ldr	r4, [pc, #24]	; (800aae4 <_close_r+0x1c>)
 800aacc:	2300      	movs	r3, #0
 800aace:	4605      	mov	r5, r0
 800aad0:	4608      	mov	r0, r1
 800aad2:	6023      	str	r3, [r4, #0]
 800aad4:	f7f6 feef 	bl	80018b6 <_close>
 800aad8:	1c43      	adds	r3, r0, #1
 800aada:	d102      	bne.n	800aae2 <_close_r+0x1a>
 800aadc:	6823      	ldr	r3, [r4, #0]
 800aade:	b103      	cbz	r3, 800aae2 <_close_r+0x1a>
 800aae0:	602b      	str	r3, [r5, #0]
 800aae2:	bd38      	pop	{r3, r4, r5, pc}
 800aae4:	240003e4 	.word	0x240003e4

0800aae8 <_fstat_r>:
 800aae8:	b538      	push	{r3, r4, r5, lr}
 800aaea:	4c07      	ldr	r4, [pc, #28]	; (800ab08 <_fstat_r+0x20>)
 800aaec:	2300      	movs	r3, #0
 800aaee:	4605      	mov	r5, r0
 800aaf0:	4608      	mov	r0, r1
 800aaf2:	4611      	mov	r1, r2
 800aaf4:	6023      	str	r3, [r4, #0]
 800aaf6:	f7f6 feea 	bl	80018ce <_fstat>
 800aafa:	1c43      	adds	r3, r0, #1
 800aafc:	d102      	bne.n	800ab04 <_fstat_r+0x1c>
 800aafe:	6823      	ldr	r3, [r4, #0]
 800ab00:	b103      	cbz	r3, 800ab04 <_fstat_r+0x1c>
 800ab02:	602b      	str	r3, [r5, #0]
 800ab04:	bd38      	pop	{r3, r4, r5, pc}
 800ab06:	bf00      	nop
 800ab08:	240003e4 	.word	0x240003e4

0800ab0c <_isatty_r>:
 800ab0c:	b538      	push	{r3, r4, r5, lr}
 800ab0e:	4c06      	ldr	r4, [pc, #24]	; (800ab28 <_isatty_r+0x1c>)
 800ab10:	2300      	movs	r3, #0
 800ab12:	4605      	mov	r5, r0
 800ab14:	4608      	mov	r0, r1
 800ab16:	6023      	str	r3, [r4, #0]
 800ab18:	f7f6 fee9 	bl	80018ee <_isatty>
 800ab1c:	1c43      	adds	r3, r0, #1
 800ab1e:	d102      	bne.n	800ab26 <_isatty_r+0x1a>
 800ab20:	6823      	ldr	r3, [r4, #0]
 800ab22:	b103      	cbz	r3, 800ab26 <_isatty_r+0x1a>
 800ab24:	602b      	str	r3, [r5, #0]
 800ab26:	bd38      	pop	{r3, r4, r5, pc}
 800ab28:	240003e4 	.word	0x240003e4

0800ab2c <_lseek_r>:
 800ab2c:	b538      	push	{r3, r4, r5, lr}
 800ab2e:	4c07      	ldr	r4, [pc, #28]	; (800ab4c <_lseek_r+0x20>)
 800ab30:	4605      	mov	r5, r0
 800ab32:	4608      	mov	r0, r1
 800ab34:	4611      	mov	r1, r2
 800ab36:	2200      	movs	r2, #0
 800ab38:	6022      	str	r2, [r4, #0]
 800ab3a:	461a      	mov	r2, r3
 800ab3c:	f7f6 fee2 	bl	8001904 <_lseek>
 800ab40:	1c43      	adds	r3, r0, #1
 800ab42:	d102      	bne.n	800ab4a <_lseek_r+0x1e>
 800ab44:	6823      	ldr	r3, [r4, #0]
 800ab46:	b103      	cbz	r3, 800ab4a <_lseek_r+0x1e>
 800ab48:	602b      	str	r3, [r5, #0]
 800ab4a:	bd38      	pop	{r3, r4, r5, pc}
 800ab4c:	240003e4 	.word	0x240003e4

0800ab50 <_read_r>:
 800ab50:	b538      	push	{r3, r4, r5, lr}
 800ab52:	4c07      	ldr	r4, [pc, #28]	; (800ab70 <_read_r+0x20>)
 800ab54:	4605      	mov	r5, r0
 800ab56:	4608      	mov	r0, r1
 800ab58:	4611      	mov	r1, r2
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	6022      	str	r2, [r4, #0]
 800ab5e:	461a      	mov	r2, r3
 800ab60:	f7f6 fe70 	bl	8001844 <_read>
 800ab64:	1c43      	adds	r3, r0, #1
 800ab66:	d102      	bne.n	800ab6e <_read_r+0x1e>
 800ab68:	6823      	ldr	r3, [r4, #0]
 800ab6a:	b103      	cbz	r3, 800ab6e <_read_r+0x1e>
 800ab6c:	602b      	str	r3, [r5, #0]
 800ab6e:	bd38      	pop	{r3, r4, r5, pc}
 800ab70:	240003e4 	.word	0x240003e4

0800ab74 <_init>:
 800ab74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab76:	bf00      	nop
 800ab78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab7a:	bc08      	pop	{r3}
 800ab7c:	469e      	mov	lr, r3
 800ab7e:	4770      	bx	lr

0800ab80 <_fini>:
 800ab80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab82:	bf00      	nop
 800ab84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab86:	bc08      	pop	{r3}
 800ab88:	469e      	mov	lr, r3
 800ab8a:	4770      	bx	lr
