
theremin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a628  080002b0  080002b0  000102b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c4  0800a8d8  0800a8d8  0001a8d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b19c  0800b19c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800b19c  0800b19c  0001b19c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b1a4  0800b1a4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1a4  0800b1a4  0001b1a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b1a8  0800b1a8  0001b1a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  0800b1ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  24000074  0800b220  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000388  0800b220  00020388  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024c2a  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039ce  00000000  00000000  00044ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016f0  00000000  00000000  000486a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001588  00000000  00000000  00049d90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000336d3  00000000  00000000  0004b318  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000145ef  00000000  00000000  0007e9eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001561f0  00000000  00000000  00092fda  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e91ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068f4  00000000  00000000  001e9248  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000074 	.word	0x24000074
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800a8c0 	.word	0x0800a8c0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000078 	.word	0x24000078
 80002ec:	0800a8c0 	.word	0x0800a8c0

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	; 0x50
 80005f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f001 f90b 	bl	8001810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f885 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 fb4b 	bl	8000c98 <MX_GPIO_Init>
  MX_DMA_Init();
 8000602:	f000 fb11 	bl	8000c28 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000606:	f000 fabb 	bl	8000b80 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800060a:	f000 fb05 	bl	8000c18 <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 800060e:	f000 f94b 	bl	80008a8 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000612:	f000 f9c3 	bl	800099c <MX_DAC1_Init>
  MX_TIM6_Init();
 8000616:	f000 fa47 	bl	8000aa8 <MX_TIM6_Init>
  MX_TIM2_Init();
 800061a:	f000 f9f1 	bl	8000a00 <MX_TIM2_Init>
  MX_TIM7_Init();
 800061e:	f000 fa79 	bl	8000b14 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
//  s_ref = init_nco(1. / 4000., 0);
  s_ref = init_nco(1. / 100., 0);
 8000622:	eddf 0a2e 	vldr	s1, [pc, #184]	; 80006dc <main+0xec>
 8000626:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 80006e0 <main+0xf0>
 800062a:	f000 fcb5 	bl	8000f98 <init_nco>
 800062e:	63f8      	str	r0, [r7, #60]	; 0x3c
  sin_buffer = calloc(BLOCKSIZE, sizeof(uint16_t));
 8000630:	2102      	movs	r1, #2
 8000632:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000636:	f009 fc77 	bl	8009f28 <calloc>
 800063a:	4603      	mov	r3, r0
 800063c:	63bb      	str	r3, [r7, #56]	; 0x38
//	  printf("Failed to allocate memory for arrays\n");
//	  exit(EXIT_FAILURE);
//  }

  /* Start TIM6 and DAC with DMA */
  HAL_TIM_Base_Start(&htim6);
 800063e:	4829      	ldr	r0, [pc, #164]	; (80006e4 <main+0xf4>)
 8000640:	f007 fe76 	bl	8008330 <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000644:	2100      	movs	r1, #0
 8000646:	4828      	ldr	r0, [pc, #160]	; (80006e8 <main+0xf8>)
 8000648:	f002 f9d3 	bl	80029f2 <HAL_DAC_Start>


  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)sin_buffer, BLOCKSIZE, DAC_ALIGN_12B_R);
 800064c:	2300      	movs	r3, #0
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000654:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000656:	2100      	movs	r1, #0
 8000658:	4823      	ldr	r0, [pc, #140]	; (80006e8 <main+0xf8>)
 800065a:	f002 fa1d 	bl	8002a98 <HAL_DAC_Start_DMA>
  /* USER CODE BEGIN WHILE */

//  uart_buf_len = sprintf(uart_buf, "\nTesting\r\n");
//  HAL_UART_Transmit(&huart3, uart_buf, uart_buf_len, 100);
  /* Timer to update and change frequencies with */
  HAL_TIM_Base_Start_IT(&htim7);
 800065e:	4823      	ldr	r0, [pc, #140]	; (80006ec <main+0xfc>)
 8000660:	f007 fe94 	bl	800838c <HAL_TIM_Base_Start_IT>

  /* Timer to count up input pulses */
  HAL_TIM_Base_Start(&htim2);
 8000664:	4822      	ldr	r0, [pc, #136]	; (80006f0 <main+0x100>)
 8000666:	f007 fe63 	bl	8008330 <HAL_TIM_Base_Start>
  i = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	647b      	str	r3, [r7, #68]	; 0x44

  while (1)
  {

	  if (update_freq_flag) {
 800066e:	4b21      	ldr	r3, [pc, #132]	; (80006f4 <main+0x104>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	b2db      	uxtb	r3, r3
 8000674:	2b00      	cmp	r3, #0
 8000676:	d029      	beq.n	80006cc <main+0xdc>
	//	  HAL_UART_Transmit(&huart3, uart_buf, uart_buf_len, 100);

	//	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);

		  /* Calculate the frequency to oscillate at */
		  freq = (int)((timer_count * 1000 - REF_OSC_FREQ)) ;		//Round to the nearest hundred Hz
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <main+0x108>)
 800067a:	edd3 7a00 	vldr	s15, [r3]
 800067e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80006fc <main+0x10c>
 8000682:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000686:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000700 <main+0x110>
 800068a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800068e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000692:	ee17 3a90 	vmov	r3, s15
 8000696:	643b      	str	r3, [r7, #64]	; 0x40
		  if (freq < 0)
 8000698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800069a:	2b00      	cmp	r3, #0
 800069c:	da02      	bge.n	80006a4 <main+0xb4>
			  freq = -freq;
 800069e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006a0:	425b      	negs	r3, r3
 80006a2:	643b      	str	r3, [r7, #64]	; 0x40

//		  uart_buf_len = sprintf(uart_buf, "%d counts\r\n", (int)freq);
//		  HAL_UART_Transmit(&huart3, uart_buf, uart_buf_len, 100);

		//	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 4095);
		  nco_set_frequency(s_ref, (float)freq / 100000.);
 80006a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006a6:	ee07 3a90 	vmov	s15, r3
 80006aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006ae:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000704 <main+0x114>
 80006b2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80006b6:	eeb0 0a66 	vmov.f32	s0, s13
 80006ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80006bc:	f000 fd06 	bl	80010cc <nco_set_frequency>
		  update_freq_flag = 0;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <main+0x104>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]
//		  timer_count = 0;
		  i++;
 80006c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006c8:	3301      	adds	r3, #1
 80006ca:	647b      	str	r3, [r7, #68]	; 0x44
	  }
	  nco_get_samples(s_ref, sin_buffer, BLOCKSIZE);
 80006cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80006d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80006d4:	f000 fca8 	bl	8001028 <nco_get_samples>
	  if (update_freq_flag) {
 80006d8:	e7c9      	b.n	800066e <main+0x7e>
 80006da:	bf00      	nop
 80006dc:	00000000 	.word	0x00000000
 80006e0:	3c23d70a 	.word	0x3c23d70a
 80006e4:	24000298 	.word	0x24000298
 80006e8:	240000a4 	.word	0x240000a4
 80006ec:	24000330 	.word	0x24000330
 80006f0:	240002e4 	.word	0x240002e4
 80006f4:	2400037c 	.word	0x2400037c
 80006f8:	24000090 	.word	0x24000090
 80006fc:	447a0000 	.word	0x447a0000
 8000700:	48742400 	.word	0x48742400
 8000704:	47c35000 	.word	0x47c35000

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b0ca      	sub	sp, #296	; 0x128
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000712:	224c      	movs	r2, #76	; 0x4c
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f009 fc54 	bl	8009fc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000720:	2220      	movs	r2, #32
 8000722:	2100      	movs	r1, #0
 8000724:	4618      	mov	r0, r3
 8000726:	f009 fc4d 	bl	8009fc4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	4618      	mov	r0, r3
 800072e:	23b8      	movs	r3, #184	; 0xb8
 8000730:	461a      	mov	r2, r3
 8000732:	2100      	movs	r1, #0
 8000734:	f009 fc46 	bl	8009fc4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000738:	2004      	movs	r0, #4
 800073a:	f004 ffa3 	bl	8005684 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800073e:	463b      	mov	r3, r7
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	4b55      	ldr	r3, [pc, #340]	; (800089c <SystemClock_Config+0x194>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a54      	ldr	r2, [pc, #336]	; (800089c <SystemClock_Config+0x194>)
 800074a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b52      	ldr	r3, [pc, #328]	; (800089c <SystemClock_Config+0x194>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000758:	463b      	mov	r3, r7
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	463b      	mov	r3, r7
 800075e:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000760:	bf00      	nop
 8000762:	4b4e      	ldr	r3, [pc, #312]	; (800089c <SystemClock_Config+0x194>)
 8000764:	699b      	ldr	r3, [r3, #24]
 8000766:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800076a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800076e:	d1f8      	bne.n	8000762 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000770:	4b4b      	ldr	r3, [pc, #300]	; (80008a0 <SystemClock_Config+0x198>)
 8000772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000774:	f023 0303 	bic.w	r3, r3, #3
 8000778:	4a49      	ldr	r2, [pc, #292]	; (80008a0 <SystemClock_Config+0x198>)
 800077a:	f043 0302 	orr.w	r3, r3, #2
 800077e:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8000780:	2329      	movs	r3, #41	; 0x29
 8000782:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000786:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800078a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800078e:	2301      	movs	r3, #1
 8000790:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000794:	2301      	movs	r3, #1
 8000796:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079a:	2302      	movs	r3, #2
 800079c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a0:	2302      	movs	r3, #2
 80007a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007a6:	2301      	movs	r3, #1
 80007a8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLN = 24;
 80007ac:	2318      	movs	r3, #24
 80007ae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007b8:	2304      	movs	r3, #4
 80007ba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007be:	2302      	movs	r3, #2
 80007c0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007c4:	230c      	movs	r3, #12
 80007c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007ca:	2300      	movs	r3, #0
 80007cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80007da:	4618      	mov	r0, r3
 80007dc:	f004 ffac 	bl	8005738 <HAL_RCC_OscConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80007e6:	f000 fbcf 	bl	8000f88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ea:	233f      	movs	r3, #63	; 0x3f
 80007ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f0:	2303      	movs	r3, #3
 80007f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800081a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800081e:	2102      	movs	r1, #2
 8000820:	4618      	mov	r0, r3
 8000822:	f005 fb71 	bl	8005f08 <HAL_RCC_ClockConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0x128>
  {
    Error_Handler();
 800082c:	f000 fbac 	bl	8000f88 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_ADC
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	4a1c      	ldr	r2, [pc, #112]	; (80008a4 <SystemClock_Config+0x19c>)
 8000834:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	2201      	movs	r2, #1
 800083a:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2210      	movs	r2, #16
 8000840:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2202      	movs	r2, #2
 8000846:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2202      	movs	r2, #2
 800084c:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2202      	movs	r2, #2
 8000852:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	22c0      	movs	r2, #192	; 0xc0
 8000858:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2200      	movs	r2, #0
 800085e:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	2200      	movs	r2, #0
 8000864:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2200      	movs	r2, #0
 800086a:	67da      	str	r2, [r3, #124]	; 0x7c
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000872:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2200      	movs	r2, #0
 800087a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	4618      	mov	r0, r3
 8000882:	f005 fec5 	bl	8006610 <HAL_RCCEx_PeriphCLKConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0x188>
  {
    Error_Handler();
 800088c:	f000 fb7c 	bl	8000f88 <Error_Handler>
  }
}
 8000890:	bf00      	nop
 8000892:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	58024800 	.word	0x58024800
 80008a0:	58024400 	.word	0x58024400
 80008a4:	000c0002 	.word	0x000c0002

080008a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	; 0x28
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008ba:	463b      	mov	r3, r7
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
 80008c8:	615a      	str	r2, [r3, #20]
 80008ca:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80008cc:	4b30      	ldr	r3, [pc, #192]	; (8000990 <MX_ADC1_Init+0xe8>)
 80008ce:	4a31      	ldr	r2, [pc, #196]	; (8000994 <MX_ADC1_Init+0xec>)
 80008d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008d2:	4b2f      	ldr	r3, [pc, #188]	; (8000990 <MX_ADC1_Init+0xe8>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008d8:	4b2d      	ldr	r3, [pc, #180]	; (8000990 <MX_ADC1_Init+0xe8>)
 80008da:	2208      	movs	r2, #8
 80008dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008de:	4b2c      	ldr	r3, [pc, #176]	; (8000990 <MX_ADC1_Init+0xe8>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008e4:	4b2a      	ldr	r3, [pc, #168]	; (8000990 <MX_ADC1_Init+0xe8>)
 80008e6:	2204      	movs	r2, #4
 80008e8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008ea:	4b29      	ldr	r3, [pc, #164]	; (8000990 <MX_ADC1_Init+0xe8>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008f0:	4b27      	ldr	r3, [pc, #156]	; (8000990 <MX_ADC1_Init+0xe8>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80008f6:	4b26      	ldr	r3, [pc, #152]	; (8000990 <MX_ADC1_Init+0xe8>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008fc:	4b24      	ldr	r3, [pc, #144]	; (8000990 <MX_ADC1_Init+0xe8>)
 80008fe:	2200      	movs	r2, #0
 8000900:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000902:	4b23      	ldr	r3, [pc, #140]	; (8000990 <MX_ADC1_Init+0xe8>)
 8000904:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8000908:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800090a:	4b21      	ldr	r3, [pc, #132]	; (8000990 <MX_ADC1_Init+0xe8>)
 800090c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000910:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000912:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <MX_ADC1_Init+0xe8>)
 8000914:	2203      	movs	r2, #3
 8000916:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000918:	4b1d      	ldr	r3, [pc, #116]	; (8000990 <MX_ADC1_Init+0xe8>)
 800091a:	2200      	movs	r2, #0
 800091c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800091e:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <MX_ADC1_Init+0xe8>)
 8000920:	2200      	movs	r2, #0
 8000922:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000924:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <MX_ADC1_Init+0xe8>)
 8000926:	2200      	movs	r2, #0
 8000928:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800092c:	4818      	ldr	r0, [pc, #96]	; (8000990 <MX_ADC1_Init+0xe8>)
 800092e:	f001 f9af 	bl	8001c90 <HAL_ADC_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000938:	f000 fb26 	bl	8000f88 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800093c:	2300      	movs	r3, #0
 800093e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	4619      	mov	r1, r3
 8000946:	4812      	ldr	r0, [pc, #72]	; (8000990 <MX_ADC1_Init+0xe8>)
 8000948:	f001 fe8a 	bl	8002660 <HAL_ADCEx_MultiModeConfigChannel>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000952:	f000 fb19 	bl	8000f88 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <MX_ADC1_Init+0xf0>)
 8000958:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800095a:	2306      	movs	r3, #6
 800095c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800095e:	2300      	movs	r3, #0
 8000960:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000962:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000966:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000968:	2304      	movs	r3, #4
 800096a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000970:	2300      	movs	r3, #0
 8000972:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000974:	463b      	mov	r3, r7
 8000976:	4619      	mov	r1, r3
 8000978:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_ADC1_Init+0xe8>)
 800097a:	f001 fae3 	bl	8001f44 <HAL_ADC_ConfigChannel>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000984:	f000 fb00 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000988:	bf00      	nop
 800098a:	3728      	adds	r7, #40	; 0x28
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	240001bc 	.word	0x240001bc
 8000994:	40022000 	.word	0x40022000
 8000998:	14f00020 	.word	0x14f00020

0800099c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	; 0x28
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	2224      	movs	r2, #36	; 0x24
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f009 fb0b 	bl	8009fc4 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80009ae:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <MX_DAC1_Init+0x5c>)
 80009b0:	4a12      	ldr	r2, [pc, #72]	; (80009fc <MX_DAC1_Init+0x60>)
 80009b2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80009b4:	4810      	ldr	r0, [pc, #64]	; (80009f8 <MX_DAC1_Init+0x5c>)
 80009b6:	f001 fffa 	bl	80029ae <HAL_DAC_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80009c0:	f000 fae2 	bl	8000f88 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80009c8:	2316      	movs	r3, #22
 80009ca:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 80009d0:	2302      	movs	r3, #2
 80009d2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	2200      	movs	r2, #0
 80009dc:	4619      	mov	r1, r3
 80009de:	4806      	ldr	r0, [pc, #24]	; (80009f8 <MX_DAC1_Init+0x5c>)
 80009e0:	f002 f936 	bl	8002c50 <HAL_DAC_ConfigChannel>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80009ea:	f000 facd 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	3728      	adds	r7, #40	; 0x28
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	240000a4 	.word	0x240000a4
 80009fc:	40007400 	.word	0x40007400

08000a00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a06:	f107 030c 	add.w	r3, r7, #12
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a16:	463b      	mov	r3, r7
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a20:	4b20      	ldr	r3, [pc, #128]	; (8000aa4 <MX_TIM2_Init+0xa4>)
 8000a22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a28:	4b1e      	ldr	r3, [pc, #120]	; (8000aa4 <MX_TIM2_Init+0xa4>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2e:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <MX_TIM2_Init+0xa4>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a34:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <MX_TIM2_Init+0xa4>)
 8000a36:	f04f 32ff 	mov.w	r2, #4294967295
 8000a3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3c:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <MX_TIM2_Init+0xa4>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a42:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <MX_TIM2_Init+0xa4>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a48:	4816      	ldr	r0, [pc, #88]	; (8000aa4 <MX_TIM2_Init+0xa4>)
 8000a4a:	f007 fc19 	bl	8008280 <HAL_TIM_Base_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000a54:	f000 fa98 	bl	8000f88 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000a58:	2307      	movs	r3, #7
 8000a5a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000a5c:	2350      	movs	r3, #80	; 0x50
 8000a5e:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 1;
 8000a64:	2301      	movs	r3, #1
 8000a66:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	480d      	ldr	r0, [pc, #52]	; (8000aa4 <MX_TIM2_Init+0xa4>)
 8000a70:	f007 fde1 	bl	8008636 <HAL_TIM_SlaveConfigSynchro>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000a7a:	f000 fa85 	bl	8000f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a86:	463b      	mov	r3, r7
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4806      	ldr	r0, [pc, #24]	; (8000aa4 <MX_TIM2_Init+0xa4>)
 8000a8c:	f008 f822 	bl	8008ad4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000a96:	f000 fa77 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a9a:	bf00      	nop
 8000a9c:	3720      	adds	r7, #32
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	240002e4 	.word	0x240002e4

08000aa8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ab8:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <MX_TIM6_Init+0x64>)
 8000aba:	4a15      	ldr	r2, [pc, #84]	; (8000b10 <MX_TIM6_Init+0x68>)
 8000abc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000abe:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <MX_TIM6_Init+0x64>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <MX_TIM6_Init+0x64>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 960 - 1;
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <MX_TIM6_Init+0x64>)
 8000acc:	f240 32bf 	movw	r2, #959	; 0x3bf
 8000ad0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <MX_TIM6_Init+0x64>)
 8000ad4:	2280      	movs	r2, #128	; 0x80
 8000ad6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ad8:	480c      	ldr	r0, [pc, #48]	; (8000b0c <MX_TIM6_Init+0x64>)
 8000ada:	f007 fbd1 	bl	8008280 <HAL_TIM_Base_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000ae4:	f000 fa50 	bl	8000f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ae8:	2320      	movs	r3, #32
 8000aea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	4619      	mov	r1, r3
 8000af4:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_TIM6_Init+0x64>)
 8000af6:	f007 ffed 	bl	8008ad4 <HAL_TIMEx_MasterConfigSynchronization>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000b00:	f000 fa42 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b04:	bf00      	nop
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	24000298 	.word	0x24000298
 8000b10:	40001000 	.word	0x40001000

08000b14 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <MX_TIM7_Init+0x64>)
 8000b26:	4a15      	ldr	r2, [pc, #84]	; (8000b7c <MX_TIM7_Init+0x68>)
 8000b28:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 96-1;
 8000b2a:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <MX_TIM7_Init+0x64>)
 8000b2c:	225f      	movs	r2, #95	; 0x5f
 8000b2e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_TIM7_Init+0x64>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <MX_TIM7_Init+0x64>)
 8000b38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b3c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <MX_TIM7_Init+0x64>)
 8000b40:	2280      	movs	r2, #128	; 0x80
 8000b42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000b44:	480c      	ldr	r0, [pc, #48]	; (8000b78 <MX_TIM7_Init+0x64>)
 8000b46:	f007 fb9b 	bl	8008280 <HAL_TIM_Base_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000b50:	f000 fa1a 	bl	8000f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b54:	2300      	movs	r3, #0
 8000b56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4805      	ldr	r0, [pc, #20]	; (8000b78 <MX_TIM7_Init+0x64>)
 8000b62:	f007 ffb7 	bl	8008ad4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000b6c:	f000 fa0c 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	24000330 	.word	0x24000330
 8000b7c:	40001400 	.word	0x40001400

08000b80 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b84:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <MX_USART3_UART_Init+0x90>)
 8000b86:	4a23      	ldr	r2, [pc, #140]	; (8000c14 <MX_USART3_UART_Init+0x94>)
 8000b88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b8a:	4b21      	ldr	r3, [pc, #132]	; (8000c10 <MX_USART3_UART_Init+0x90>)
 8000b8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b92:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <MX_USART3_UART_Init+0x90>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b98:	4b1d      	ldr	r3, [pc, #116]	; (8000c10 <MX_USART3_UART_Init+0x90>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b9e:	4b1c      	ldr	r3, [pc, #112]	; (8000c10 <MX_USART3_UART_Init+0x90>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ba4:	4b1a      	ldr	r3, [pc, #104]	; (8000c10 <MX_USART3_UART_Init+0x90>)
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000baa:	4b19      	ldr	r3, [pc, #100]	; (8000c10 <MX_USART3_UART_Init+0x90>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb0:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <MX_USART3_UART_Init+0x90>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bb6:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <MX_USART3_UART_Init+0x90>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bbc:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <MX_USART3_UART_Init+0x90>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc2:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <MX_USART3_UART_Init+0x90>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bc8:	4811      	ldr	r0, [pc, #68]	; (8000c10 <MX_USART3_UART_Init+0x90>)
 8000bca:	f008 f829 	bl	8008c20 <HAL_UART_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000bd4:	f000 f9d8 	bl	8000f88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bd8:	2100      	movs	r1, #0
 8000bda:	480d      	ldr	r0, [pc, #52]	; (8000c10 <MX_USART3_UART_Init+0x90>)
 8000bdc:	f009 f8bf 	bl	8009d5e <HAL_UARTEx_SetTxFifoThreshold>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000be6:	f000 f9cf 	bl	8000f88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bea:	2100      	movs	r1, #0
 8000bec:	4808      	ldr	r0, [pc, #32]	; (8000c10 <MX_USART3_UART_Init+0x90>)
 8000bee:	f009 f8f4 	bl	8009dda <HAL_UARTEx_SetRxFifoThreshold>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000bf8:	f000 f9c6 	bl	8000f88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bfc:	4804      	ldr	r0, [pc, #16]	; (8000c10 <MX_USART3_UART_Init+0x90>)
 8000bfe:	f009 f875 	bl	8009cec <HAL_UARTEx_DisableFifoMode>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c08:	f000 f9be 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	240000b8 	.word	0x240000b8
 8000c14:	40004800 	.word	0x40004800

08000c18 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
	...

08000c28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c2e:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <MX_DMA_Init+0x6c>)
 8000c30:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000c34:	4a17      	ldr	r2, [pc, #92]	; (8000c94 <MX_DMA_Init+0x6c>)
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <MX_DMA_Init+0x6c>)
 8000c40:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <MX_DMA_Init+0x6c>)
 8000c4e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000c52:	4a10      	ldr	r2, [pc, #64]	; (8000c94 <MX_DMA_Init+0x6c>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000c5c:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <MX_DMA_Init+0x6c>)
 8000c5e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	200b      	movs	r0, #11
 8000c70:	f001 fe69 	bl	8002946 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c74:	200b      	movs	r0, #11
 8000c76:	f001 fe80 	bl	800297a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	2038      	movs	r0, #56	; 0x38
 8000c80:	f001 fe61 	bl	8002946 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c84:	2038      	movs	r0, #56	; 0x38
 8000c86:	f001 fe78 	bl	800297a <HAL_NVIC_EnableIRQ>

}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	58024400 	.word	0x58024400

08000c98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08e      	sub	sp, #56	; 0x38
 8000c9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
 8000cac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cae:	4b87      	ldr	r3, [pc, #540]	; (8000ecc <MX_GPIO_Init+0x234>)
 8000cb0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cb4:	4a85      	ldr	r2, [pc, #532]	; (8000ecc <MX_GPIO_Init+0x234>)
 8000cb6:	f043 0304 	orr.w	r3, r3, #4
 8000cba:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cbe:	4b83      	ldr	r3, [pc, #524]	; (8000ecc <MX_GPIO_Init+0x234>)
 8000cc0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cc4:	f003 0304 	and.w	r3, r3, #4
 8000cc8:	623b      	str	r3, [r7, #32]
 8000cca:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ccc:	4b7f      	ldr	r3, [pc, #508]	; (8000ecc <MX_GPIO_Init+0x234>)
 8000cce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cd2:	4a7e      	ldr	r2, [pc, #504]	; (8000ecc <MX_GPIO_Init+0x234>)
 8000cd4:	f043 0320 	orr.w	r3, r3, #32
 8000cd8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cdc:	4b7b      	ldr	r3, [pc, #492]	; (8000ecc <MX_GPIO_Init+0x234>)
 8000cde:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ce2:	f003 0320 	and.w	r3, r3, #32
 8000ce6:	61fb      	str	r3, [r7, #28]
 8000ce8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cea:	4b78      	ldr	r3, [pc, #480]	; (8000ecc <MX_GPIO_Init+0x234>)
 8000cec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cf0:	4a76      	ldr	r2, [pc, #472]	; (8000ecc <MX_GPIO_Init+0x234>)
 8000cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cfa:	4b74      	ldr	r3, [pc, #464]	; (8000ecc <MX_GPIO_Init+0x234>)
 8000cfc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d04:	61bb      	str	r3, [r7, #24]
 8000d06:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d08:	4b70      	ldr	r3, [pc, #448]	; (8000ecc <MX_GPIO_Init+0x234>)
 8000d0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d0e:	4a6f      	ldr	r2, [pc, #444]	; (8000ecc <MX_GPIO_Init+0x234>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d18:	4b6c      	ldr	r3, [pc, #432]	; (8000ecc <MX_GPIO_Init+0x234>)
 8000d1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	617b      	str	r3, [r7, #20]
 8000d24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d26:	4b69      	ldr	r3, [pc, #420]	; (8000ecc <MX_GPIO_Init+0x234>)
 8000d28:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d2c:	4a67      	ldr	r2, [pc, #412]	; (8000ecc <MX_GPIO_Init+0x234>)
 8000d2e:	f043 0302 	orr.w	r3, r3, #2
 8000d32:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d36:	4b65      	ldr	r3, [pc, #404]	; (8000ecc <MX_GPIO_Init+0x234>)
 8000d38:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d3c:	f003 0302 	and.w	r3, r3, #2
 8000d40:	613b      	str	r3, [r7, #16]
 8000d42:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d44:	4b61      	ldr	r3, [pc, #388]	; (8000ecc <MX_GPIO_Init+0x234>)
 8000d46:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d4a:	4a60      	ldr	r2, [pc, #384]	; (8000ecc <MX_GPIO_Init+0x234>)
 8000d4c:	f043 0308 	orr.w	r3, r3, #8
 8000d50:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d54:	4b5d      	ldr	r3, [pc, #372]	; (8000ecc <MX_GPIO_Init+0x234>)
 8000d56:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d5a:	f003 0308 	and.w	r3, r3, #8
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d62:	4b5a      	ldr	r3, [pc, #360]	; (8000ecc <MX_GPIO_Init+0x234>)
 8000d64:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d68:	4a58      	ldr	r2, [pc, #352]	; (8000ecc <MX_GPIO_Init+0x234>)
 8000d6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d6e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d72:	4b56      	ldr	r3, [pc, #344]	; (8000ecc <MX_GPIO_Init+0x234>)
 8000d74:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d80:	4b52      	ldr	r3, [pc, #328]	; (8000ecc <MX_GPIO_Init+0x234>)
 8000d82:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d86:	4a51      	ldr	r2, [pc, #324]	; (8000ecc <MX_GPIO_Init+0x234>)
 8000d88:	f043 0310 	orr.w	r3, r3, #16
 8000d8c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d90:	4b4e      	ldr	r3, [pc, #312]	; (8000ecc <MX_GPIO_Init+0x234>)
 8000d92:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d96:	f003 0310 	and.w	r3, r3, #16
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000da4:	484a      	ldr	r0, [pc, #296]	; (8000ed0 <MX_GPIO_Init+0x238>)
 8000da6:	f004 fc39 	bl	800561c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	f244 0101 	movw	r1, #16385	; 0x4001
 8000db0:	4848      	ldr	r0, [pc, #288]	; (8000ed4 <MX_GPIO_Init+0x23c>)
 8000db2:	f004 fc33 	bl	800561c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2102      	movs	r1, #2
 8000dba:	4847      	ldr	r0, [pc, #284]	; (8000ed8 <MX_GPIO_Init+0x240>)
 8000dbc:	f004 fc2e 	bl	800561c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000dc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4841      	ldr	r0, [pc, #260]	; (8000edc <MX_GPIO_Init+0x244>)
 8000dd6:	f004 fa71 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de0:	2301      	movs	r3, #1
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df0:	4619      	mov	r1, r3
 8000df2:	4837      	ldr	r0, [pc, #220]	; (8000ed0 <MX_GPIO_Init+0x238>)
 8000df4:	f004 fa62 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000df8:	f244 0301 	movw	r3, #16385	; 0x4001
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4830      	ldr	r0, [pc, #192]	; (8000ed4 <MX_GPIO_Init+0x23c>)
 8000e12:	f004 fa53 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000e16:	2380      	movs	r3, #128	; 0x80
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e1a:	4b31      	ldr	r3, [pc, #196]	; (8000ee0 <MX_GPIO_Init+0x248>)
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e26:	4619      	mov	r1, r3
 8000e28:	482e      	ldr	r0, [pc, #184]	; (8000ee4 <MX_GPIO_Init+0x24c>)
 8000e2a:	f004 fa47 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000e2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e34:	2300      	movs	r3, #0
 8000e36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e40:	4619      	mov	r1, r3
 8000e42:	4829      	ldr	r0, [pc, #164]	; (8000ee8 <MX_GPIO_Init+0x250>)
 8000e44:	f004 fa3a 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000e48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000e5a:	230a      	movs	r3, #10
 8000e5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e62:	4619      	mov	r1, r3
 8000e64:	4820      	ldr	r0, [pc, #128]	; (8000ee8 <MX_GPIO_Init+0x250>)
 8000e66:	f004 fa29 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000e6a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e80:	4619      	mov	r1, r3
 8000e82:	4819      	ldr	r0, [pc, #100]	; (8000ee8 <MX_GPIO_Init+0x250>)
 8000e84:	f004 fa1a 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e88:	23c0      	movs	r3, #192	; 0xc0
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2300      	movs	r3, #0
 8000e96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e98:	2307      	movs	r3, #7
 8000e9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480c      	ldr	r0, [pc, #48]	; (8000ed4 <MX_GPIO_Init+0x23c>)
 8000ea4:	f004 fa0a 	bl	80052bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eac:	2301      	movs	r3, #1
 8000eae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4806      	ldr	r0, [pc, #24]	; (8000ed8 <MX_GPIO_Init+0x240>)
 8000ec0:	f004 f9fc 	bl	80052bc <HAL_GPIO_Init>

}
 8000ec4:	bf00      	nop
 8000ec6:	3738      	adds	r7, #56	; 0x38
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	58024400 	.word	0x58024400
 8000ed0:	58021400 	.word	0x58021400
 8000ed4:	58020400 	.word	0x58020400
 8000ed8:	58021000 	.word	0x58021000
 8000edc:	58020800 	.word	0x58020800
 8000ee0:	11110000 	.word	0x11110000
 8000ee4:	58021800 	.word	0x58021800
 8000ee8:	58020000 	.word	0x58020000

08000eec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	481f      	ldr	r0, [pc, #124]	; (8000f74 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000ef8:	f004 fba9 	bl	800564e <HAL_GPIO_TogglePin>

	if (ms == 0)
 8000efc:	4b1e      	ldr	r3, [pc, #120]	; (8000f78 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d103      	bne.n	8000f0e <HAL_TIM_PeriodElapsedCallback+0x22>
		timer_count = 0;
 8000f06:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000f08:	f04f 0200 	mov.w	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
	timer_count += __HAL_TIM_GET_COUNTER(&htim2);
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f14:	ee07 3a90 	vmov	s15, r3
 8000f18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f1c:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000f1e:	edd3 7a00 	vldr	s15, [r3]
 8000f22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f26:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000f28:	edc3 7a00 	vstr	s15, [r3]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000f2c:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2200      	movs	r2, #0
 8000f32:	625a      	str	r2, [r3, #36]	; 0x24
	ms++;
 8000f34:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000f40:	701a      	strb	r2, [r3, #0]
	if (ms == MILLISECONDS) {
 8000f42:	4b0d      	ldr	r3, [pc, #52]	; (8000f78 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	2b0a      	cmp	r3, #10
 8000f4a:	d10f      	bne.n	8000f6c <HAL_TIM_PeriodElapsedCallback+0x80>
		update_freq_flag = 1;
 8000f4c:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	701a      	strb	r2, [r3, #0]
		timer_count /= MILLISECONDS;
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000f54:	ed93 7a00 	vldr	s14, [r3]
 8000f58:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000f5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000f62:	edc3 7a00 	vstr	s15, [r3]
		ms = 0;
 8000f66:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
	}
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	58020400 	.word	0x58020400
 8000f78:	24000094 	.word	0x24000094
 8000f7c:	24000090 	.word	0x24000090
 8000f80:	240002e4 	.word	0x240002e4
 8000f84:	2400037c 	.word	0x2400037c

08000f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <init_nco>:
 * @returns pointer to an initialized structure of type #NCO_T which may
 * be used to get NCO samples.
 */

NCO_T *init_nco(  float f0,            //!< [in] Frequency in cycles per sample
                  float theta){        //!< [in] Offset angle in radians
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fa2:	edc7 0a00 	vstr	s1, [r7]

    //Allocate memory for s
    NCO_T *s = malloc(sizeof(NCO_T));
 8000fa6:	200c      	movs	r0, #12
 8000fa8:	f009 f804 	bl	8009fb4 <malloc>
 8000fac:	4603      	mov	r3, r0
 8000fae:	60fb      	str	r3, [r7, #12]
    if (s == NULL) {
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d105      	bne.n	8000fc2 <init_nco+0x2a>
        printf("Failed to allocate memory for s\n");
 8000fb6:	481a      	ldr	r0, [pc, #104]	; (8001020 <init_nco+0x88>)
 8000fb8:	f009 f91e 	bl	800a1f8 <puts>
        exit(EXIT_FAILURE);
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f008 ffc1 	bl	8009f44 <exit>
    }

    //Initialize struct variables
    s->f0 = (int)(f0 * 2 * (1u << 31));
 8000fc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fc6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000fca:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001024 <init_nco+0x8c>
 8000fce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fd6:	ee17 2a90 	vmov	r2, s15
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	601a      	str	r2, [r3, #0]
    s->theta = (int)((theta * 2 * (1u << 31))/(2.*PI));
 8000fde:	edd7 7a00 	vldr	s15, [r7]
 8000fe2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000fe6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001024 <init_nco+0x8c>
 8000fea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fee:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000ff2:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8001018 <init_nco+0x80>
 8000ff6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ffa:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000ffe:	ee17 2a90 	vmov	r2, s15
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	605a      	str	r2, [r3, #4]
    s->acc = 0;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]

    //Return pointer to struct NCO_T
    return s;
 800100c:	68fb      	ldr	r3, [r7, #12]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	53c8d4f1 	.word	0x53c8d4f1
 800101c:	401921fb 	.word	0x401921fb
 8001020:	0800a8d8 	.word	0x0800a8d8
 8001024:	4f000000 	.word	0x4f000000

08001028 <nco_get_samples>:
 * phase discontinuities from one call to the next.
 */

void nco_get_samples(NCO_T *s,         //!< [in,out] Pointer to NCO_T struct.
                     uint16_t *y,         //!< [out] Pointer to an array for storage of output samples.
                     int n_samples){   //!< [in] Number of NCO output samples to generate.
 8001028:	b480      	push	{r7}
 800102a:	b089      	sub	sp, #36	; 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
	unsigned int i;
	unsigned int kprime;
	unsigned int index;

	for (i = 0; i < n_samples; i++) {
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
 8001038:	e039      	b.n	80010ae <nco_get_samples+0x86>

        if ((i == 0) && (s->acc == 0)) {
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d107      	bne.n	8001050 <nco_get_samples+0x28>
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d103      	bne.n	8001050 <nco_get_samples+0x28>
            s->acc = 0;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	e008      	b.n	8001062 <nco_get_samples+0x3a>
        } else {
            // k1prime[n]
            s->acc += s->f0;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	461a      	mov	r2, r3
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4413      	add	r3, r2
 800105c:	461a      	mov	r2, r3
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	609a      	str	r2, [r3, #8]
        }
        //kprime[n]
        kprime = s->acc + s->theta;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	461a      	mov	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	4413      	add	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]

        index = kprime >> 23;
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	0ddb      	lsrs	r3, r3, #23
 8001074:	617b      	str	r3, [r7, #20]
//		y[i] = index;
//        y[i] = (int)((cosine[i / 2] * 2048)/2 + 2047);
        y[i] = (unsigned int)((cosine[index] + 1) * 2047)>>1;
 8001076:	4a13      	ldr	r2, [pc, #76]	; (80010c4 <nco_get_samples+0x9c>)
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	edd3 7a00 	vldr	s15, [r3]
 8001082:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001086:	ee77 7a87 	vadd.f32	s15, s15, s14
 800108a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80010c8 <nco_get_samples+0xa0>
 800108e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001096:	ee17 3a90 	vmov	r3, s15
 800109a:	0859      	lsrs	r1, r3, #1
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	68ba      	ldr	r2, [r7, #8]
 80010a2:	4413      	add	r3, r2
 80010a4:	b28a      	uxth	r2, r1
 80010a6:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < n_samples; i++) {
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	3301      	adds	r3, #1
 80010ac:	61fb      	str	r3, [r7, #28]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69fa      	ldr	r2, [r7, #28]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d3c1      	bcc.n	800103a <nco_get_samples+0x12>
//        y[i] = (unsigned int)((cosine[index] * 4095) / 2 + 2047);
//        y[i] = cosine[i];
	}
}
 80010b6:	bf00      	nop
 80010b8:	3724      	adds	r7, #36	; 0x24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	0800a908 	.word	0x0800a908
 80010c8:	44ffe000 	.word	0x44ffe000

080010cc <nco_set_frequency>:
 * @returns On return, The NCO_T structure s is modified so that subsequent calls to nco_get_samples()
 * will operate at frequency f_new (without loss of phase continuity).
 */

void nco_set_frequency( NCO_T *s,      //!< [in,out] Pointer to NCO_T struct.
                        float f_new){  //!< [in] New NCO frequency (in cycles/sample).
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	ed87 0a00 	vstr	s0, [r7]
    s->f0 = (int)(f_new * 2 * (1u << 31));
 80010d8:	edd7 7a00 	vldr	s15, [r7]
 80010dc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010e0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001100 <nco_set_frequency+0x34>
 80010e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010ec:	ee17 2a90 	vmov	r2, s15
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	601a      	str	r2, [r3, #0]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	4f000000 	.word	0x4f000000

08001104 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110a:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <HAL_MspInit+0x30>)
 800110c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001110:	4a08      	ldr	r2, [pc, #32]	; (8001134 <HAL_MspInit+0x30>)
 8001112:	f043 0302 	orr.w	r3, r3, #2
 8001116:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_MspInit+0x30>)
 800111c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001120:	f003 0302 	and.w	r3, r3, #2
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	58024400 	.word	0x58024400

08001138 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	; 0x28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a30      	ldr	r2, [pc, #192]	; (8001218 <HAL_ADC_MspInit+0xe0>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d159      	bne.n	800120e <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800115a:	4b30      	ldr	r3, [pc, #192]	; (800121c <HAL_ADC_MspInit+0xe4>)
 800115c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001160:	4a2e      	ldr	r2, [pc, #184]	; (800121c <HAL_ADC_MspInit+0xe4>)
 8001162:	f043 0320 	orr.w	r3, r3, #32
 8001166:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800116a:	4b2c      	ldr	r3, [pc, #176]	; (800121c <HAL_ADC_MspInit+0xe4>)
 800116c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001170:	f003 0320 	and.w	r3, r3, #32
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001178:	4b28      	ldr	r3, [pc, #160]	; (800121c <HAL_ADC_MspInit+0xe4>)
 800117a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800117e:	4a27      	ldr	r2, [pc, #156]	; (800121c <HAL_ADC_MspInit+0xe4>)
 8001180:	f043 0302 	orr.w	r3, r3, #2
 8001184:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001188:	4b24      	ldr	r3, [pc, #144]	; (800121c <HAL_ADC_MspInit+0xe4>)
 800118a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001196:	2302      	movs	r3, #2
 8001198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800119a:	2303      	movs	r3, #3
 800119c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	4619      	mov	r1, r3
 80011a8:	481d      	ldr	r0, [pc, #116]	; (8001220 <HAL_ADC_MspInit+0xe8>)
 80011aa:	f004 f887 	bl	80052bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80011ae:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <HAL_ADC_MspInit+0xec>)
 80011b0:	4a1d      	ldr	r2, [pc, #116]	; (8001228 <HAL_ADC_MspInit+0xf0>)
 80011b2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <HAL_ADC_MspInit+0xec>)
 80011b6:	2209      	movs	r2, #9
 80011b8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011ba:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <HAL_ADC_MspInit+0xec>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c0:	4b18      	ldr	r3, [pc, #96]	; (8001224 <HAL_ADC_MspInit+0xec>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011c6:	4b17      	ldr	r3, [pc, #92]	; (8001224 <HAL_ADC_MspInit+0xec>)
 80011c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011cc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <HAL_ADC_MspInit+0xec>)
 80011d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011d4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011d6:	4b13      	ldr	r3, [pc, #76]	; (8001224 <HAL_ADC_MspInit+0xec>)
 80011d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <HAL_ADC_MspInit+0xec>)
 80011e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011e4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011e6:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <HAL_ADC_MspInit+0xec>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011ec:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <HAL_ADC_MspInit+0xec>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011f2:	480c      	ldr	r0, [pc, #48]	; (8001224 <HAL_ADC_MspInit+0xec>)
 80011f4:	f001 fee6 	bl	8002fc4 <HAL_DMA_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_ADC_MspInit+0xca>
    {
      Error_Handler();
 80011fe:	f7ff fec3 	bl	8000f88 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a07      	ldr	r2, [pc, #28]	; (8001224 <HAL_ADC_MspInit+0xec>)
 8001206:	64da      	str	r2, [r3, #76]	; 0x4c
 8001208:	4a06      	ldr	r2, [pc, #24]	; (8001224 <HAL_ADC_MspInit+0xec>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800120e:	bf00      	nop
 8001210:	3728      	adds	r7, #40	; 0x28
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40022000 	.word	0x40022000
 800121c:	58024400 	.word	0x58024400
 8001220:	58020400 	.word	0x58020400
 8001224:	24000220 	.word	0x24000220
 8001228:	40020010 	.word	0x40020010

0800122c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a30      	ldr	r2, [pc, #192]	; (800130c <HAL_DAC_MspInit+0xe0>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d159      	bne.n	8001302 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800124e:	4b30      	ldr	r3, [pc, #192]	; (8001310 <HAL_DAC_MspInit+0xe4>)
 8001250:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001254:	4a2e      	ldr	r2, [pc, #184]	; (8001310 <HAL_DAC_MspInit+0xe4>)
 8001256:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800125a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800125e:	4b2c      	ldr	r3, [pc, #176]	; (8001310 <HAL_DAC_MspInit+0xe4>)
 8001260:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001264:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126c:	4b28      	ldr	r3, [pc, #160]	; (8001310 <HAL_DAC_MspInit+0xe4>)
 800126e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001272:	4a27      	ldr	r2, [pc, #156]	; (8001310 <HAL_DAC_MspInit+0xe4>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800127c:	4b24      	ldr	r3, [pc, #144]	; (8001310 <HAL_DAC_MspInit+0xe4>)
 800127e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800128a:	2310      	movs	r3, #16
 800128c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800128e:	2303      	movs	r3, #3
 8001290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	4619      	mov	r1, r3
 800129c:	481d      	ldr	r0, [pc, #116]	; (8001314 <HAL_DAC_MspInit+0xe8>)
 800129e:	f004 f80d 	bl	80052bc <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA2_Stream0;
 80012a2:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <HAL_DAC_MspInit+0xec>)
 80012a4:	4a1d      	ldr	r2, [pc, #116]	; (800131c <HAL_DAC_MspInit+0xf0>)
 80012a6:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80012a8:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <HAL_DAC_MspInit+0xec>)
 80012aa:	2243      	movs	r2, #67	; 0x43
 80012ac:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012ae:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <HAL_DAC_MspInit+0xec>)
 80012b0:	2240      	movs	r2, #64	; 0x40
 80012b2:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012b4:	4b18      	ldr	r3, [pc, #96]	; (8001318 <HAL_DAC_MspInit+0xec>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80012ba:	4b17      	ldr	r3, [pc, #92]	; (8001318 <HAL_DAC_MspInit+0xec>)
 80012bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012c0:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012c2:	4b15      	ldr	r3, [pc, #84]	; (8001318 <HAL_DAC_MspInit+0xec>)
 80012c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012c8:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012ca:	4b13      	ldr	r3, [pc, #76]	; (8001318 <HAL_DAC_MspInit+0xec>)
 80012cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012d0:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <HAL_DAC_MspInit+0xec>)
 80012d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012d8:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80012da:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <HAL_DAC_MspInit+0xec>)
 80012dc:	2200      	movs	r2, #0
 80012de:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012e0:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <HAL_DAC_MspInit+0xec>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80012e6:	480c      	ldr	r0, [pc, #48]	; (8001318 <HAL_DAC_MspInit+0xec>)
 80012e8:	f001 fe6c 	bl	8002fc4 <HAL_DMA_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 80012f2:	f7ff fe49 	bl	8000f88 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a07      	ldr	r2, [pc, #28]	; (8001318 <HAL_DAC_MspInit+0xec>)
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	4a06      	ldr	r2, [pc, #24]	; (8001318 <HAL_DAC_MspInit+0xec>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001302:	bf00      	nop
 8001304:	3728      	adds	r7, #40	; 0x28
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40007400 	.word	0x40007400
 8001310:	58024400 	.word	0x58024400
 8001314:	58020000 	.word	0x58020000
 8001318:	24000144 	.word	0x24000144
 800131c:	40020410 	.word	0x40020410

08001320 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08c      	sub	sp, #48	; 0x30
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 031c 	add.w	r3, r7, #28
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001340:	d12e      	bne.n	80013a0 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001342:	4b32      	ldr	r3, [pc, #200]	; (800140c <HAL_TIM_Base_MspInit+0xec>)
 8001344:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001348:	4a30      	ldr	r2, [pc, #192]	; (800140c <HAL_TIM_Base_MspInit+0xec>)
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001352:	4b2e      	ldr	r3, [pc, #184]	; (800140c <HAL_TIM_Base_MspInit+0xec>)
 8001354:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	61bb      	str	r3, [r7, #24]
 800135e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001360:	4b2a      	ldr	r3, [pc, #168]	; (800140c <HAL_TIM_Base_MspInit+0xec>)
 8001362:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001366:	4a29      	ldr	r2, [pc, #164]	; (800140c <HAL_TIM_Base_MspInit+0xec>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001370:	4b26      	ldr	r3, [pc, #152]	; (800140c <HAL_TIM_Base_MspInit+0xec>)
 8001372:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	617b      	str	r3, [r7, #20]
 800137c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800137e:	2301      	movs	r3, #1
 8001380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138a:	2303      	movs	r3, #3
 800138c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800138e:	2301      	movs	r3, #1
 8001390:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001392:	f107 031c 	add.w	r3, r7, #28
 8001396:	4619      	mov	r1, r3
 8001398:	481d      	ldr	r0, [pc, #116]	; (8001410 <HAL_TIM_Base_MspInit+0xf0>)
 800139a:	f003 ff8f 	bl	80052bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800139e:	e030      	b.n	8001402 <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM6)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a1b      	ldr	r2, [pc, #108]	; (8001414 <HAL_TIM_Base_MspInit+0xf4>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d10f      	bne.n	80013ca <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80013aa:	4b18      	ldr	r3, [pc, #96]	; (800140c <HAL_TIM_Base_MspInit+0xec>)
 80013ac:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80013b0:	4a16      	ldr	r2, [pc, #88]	; (800140c <HAL_TIM_Base_MspInit+0xec>)
 80013b2:	f043 0310 	orr.w	r3, r3, #16
 80013b6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80013ba:	4b14      	ldr	r3, [pc, #80]	; (800140c <HAL_TIM_Base_MspInit+0xec>)
 80013bc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80013c0:	f003 0310 	and.w	r3, r3, #16
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	693b      	ldr	r3, [r7, #16]
}
 80013c8:	e01b      	b.n	8001402 <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM7)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a12      	ldr	r2, [pc, #72]	; (8001418 <HAL_TIM_Base_MspInit+0xf8>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d116      	bne.n	8001402 <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80013d4:	4b0d      	ldr	r3, [pc, #52]	; (800140c <HAL_TIM_Base_MspInit+0xec>)
 80013d6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80013da:	4a0c      	ldr	r2, [pc, #48]	; (800140c <HAL_TIM_Base_MspInit+0xec>)
 80013dc:	f043 0320 	orr.w	r3, r3, #32
 80013e0:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <HAL_TIM_Base_MspInit+0xec>)
 80013e6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80013ea:	f003 0320 	and.w	r3, r3, #32
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2100      	movs	r1, #0
 80013f6:	2037      	movs	r0, #55	; 0x37
 80013f8:	f001 faa5 	bl	8002946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80013fc:	2037      	movs	r0, #55	; 0x37
 80013fe:	f001 fabc 	bl	800297a <HAL_NVIC_EnableIRQ>
}
 8001402:	bf00      	nop
 8001404:	3730      	adds	r7, #48	; 0x30
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	58024400 	.word	0x58024400
 8001410:	58020000 	.word	0x58020000
 8001414:	40001000 	.word	0x40001000
 8001418:	40001400 	.word	0x40001400

0800141c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	; 0x28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a1a      	ldr	r2, [pc, #104]	; (80014a4 <HAL_UART_MspInit+0x88>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d12e      	bne.n	800149c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800143e:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <HAL_UART_MspInit+0x8c>)
 8001440:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001444:	4a18      	ldr	r2, [pc, #96]	; (80014a8 <HAL_UART_MspInit+0x8c>)
 8001446:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800144a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800144e:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <HAL_UART_MspInit+0x8c>)
 8001450:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001454:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <HAL_UART_MspInit+0x8c>)
 800145e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001462:	4a11      	ldr	r2, [pc, #68]	; (80014a8 <HAL_UART_MspInit+0x8c>)
 8001464:	f043 0308 	orr.w	r3, r3, #8
 8001468:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800146c:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <HAL_UART_MspInit+0x8c>)
 800146e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800147a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800147e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2300      	movs	r3, #0
 800148a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800148c:	2307      	movs	r3, #7
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	4619      	mov	r1, r3
 8001496:	4805      	ldr	r0, [pc, #20]	; (80014ac <HAL_UART_MspInit+0x90>)
 8001498:	f003 ff10 	bl	80052bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800149c:	bf00      	nop
 800149e:	3728      	adds	r7, #40	; 0x28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40004800 	.word	0x40004800
 80014a8:	58024400 	.word	0x58024400
 80014ac:	58020c00 	.word	0x58020c00

080014b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c2:	e7fe      	b.n	80014c2 <HardFault_Handler+0x4>

080014c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <MemManage_Handler+0x4>

080014ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ce:	e7fe      	b.n	80014ce <BusFault_Handler+0x4>

080014d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <UsageFault_Handler+0x4>

080014d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001504:	f000 f9f6 	bl	80018f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}

0800150c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001510:	4802      	ldr	r0, [pc, #8]	; (800151c <DMA1_Stream0_IRQHandler+0x10>)
 8001512:	f002 fb51 	bl	8003bb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	24000220 	.word	0x24000220

08001520 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001524:	4802      	ldr	r0, [pc, #8]	; (8001530 <TIM7_IRQHandler+0x10>)
 8001526:	f006 ff67 	bl	80083f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	24000330 	.word	0x24000330

08001534 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001538:	4802      	ldr	r0, [pc, #8]	; (8001544 <DMA2_Stream0_IRQHandler+0x10>)
 800153a:	f002 fb3d 	bl	8003bb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	24000144 	.word	0x24000144

08001548 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001552:	f008 fcf1 	bl	8009f38 <__errno>
 8001556:	4602      	mov	r2, r0
 8001558:	2316      	movs	r3, #22
 800155a:	6013      	str	r3, [r2, #0]
	return -1;
 800155c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <_exit>:

void _exit (int status)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001570:	f04f 31ff 	mov.w	r1, #4294967295
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff ffe7 	bl	8001548 <_kill>
	while (1) {}		/* Make sure we hang here */
 800157a:	e7fe      	b.n	800157a <_exit+0x12>

0800157c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	e00a      	b.n	80015a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800158e:	f3af 8000 	nop.w
 8001592:	4601      	mov	r1, r0
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	1c5a      	adds	r2, r3, #1
 8001598:	60ba      	str	r2, [r7, #8]
 800159a:	b2ca      	uxtb	r2, r1
 800159c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	3301      	adds	r3, #1
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	697a      	ldr	r2, [r7, #20]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	dbf0      	blt.n	800158e <_read+0x12>
	}

return len;
 80015ac:	687b      	ldr	r3, [r7, #4]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b086      	sub	sp, #24
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	60f8      	str	r0, [r7, #12]
 80015be:	60b9      	str	r1, [r7, #8]
 80015c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	e009      	b.n	80015dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	1c5a      	adds	r2, r3, #1
 80015cc:	60ba      	str	r2, [r7, #8]
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	3301      	adds	r3, #1
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	dbf1      	blt.n	80015c8 <_write+0x12>
	}
	return len;
 80015e4:	687b      	ldr	r3, [r7, #4]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <_close>:

int _close(int file)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
	return -1;
 80015f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
 800160e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001616:	605a      	str	r2, [r3, #4]
	return 0;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <_isatty>:

int _isatty(int file)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
	return 1;
 800162e:	2301      	movs	r3, #1
}
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
	return 0;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
	...

08001658 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001660:	4a14      	ldr	r2, [pc, #80]	; (80016b4 <_sbrk+0x5c>)
 8001662:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <_sbrk+0x60>)
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800166c:	4b13      	ldr	r3, [pc, #76]	; (80016bc <_sbrk+0x64>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d102      	bne.n	800167a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <_sbrk+0x64>)
 8001676:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <_sbrk+0x68>)
 8001678:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <_sbrk+0x64>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	429a      	cmp	r2, r3
 8001686:	d207      	bcs.n	8001698 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001688:	f008 fc56 	bl	8009f38 <__errno>
 800168c:	4602      	mov	r2, r0
 800168e:	230c      	movs	r3, #12
 8001690:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001692:	f04f 33ff 	mov.w	r3, #4294967295
 8001696:	e009      	b.n	80016ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001698:	4b08      	ldr	r3, [pc, #32]	; (80016bc <_sbrk+0x64>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800169e:	4b07      	ldr	r3, [pc, #28]	; (80016bc <_sbrk+0x64>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	4a05      	ldr	r2, [pc, #20]	; (80016bc <_sbrk+0x64>)
 80016a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016aa:	68fb      	ldr	r3, [r7, #12]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	24100000 	.word	0x24100000
 80016b8:	00000400 	.word	0x00000400
 80016bc:	24000098 	.word	0x24000098
 80016c0:	24000388 	.word	0x24000388

080016c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016c8:	4b34      	ldr	r3, [pc, #208]	; (800179c <SystemInit+0xd8>)
 80016ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ce:	4a33      	ldr	r2, [pc, #204]	; (800179c <SystemInit+0xd8>)
 80016d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016d8:	4b31      	ldr	r3, [pc, #196]	; (80017a0 <SystemInit+0xdc>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 030f 	and.w	r3, r3, #15
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d807      	bhi.n	80016f4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016e4:	4b2e      	ldr	r3, [pc, #184]	; (80017a0 <SystemInit+0xdc>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f023 030f 	bic.w	r3, r3, #15
 80016ec:	4a2c      	ldr	r2, [pc, #176]	; (80017a0 <SystemInit+0xdc>)
 80016ee:	f043 0303 	orr.w	r3, r3, #3
 80016f2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80016f4:	4b2b      	ldr	r3, [pc, #172]	; (80017a4 <SystemInit+0xe0>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a2a      	ldr	r2, [pc, #168]	; (80017a4 <SystemInit+0xe0>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001700:	4b28      	ldr	r3, [pc, #160]	; (80017a4 <SystemInit+0xe0>)
 8001702:	2200      	movs	r2, #0
 8001704:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001706:	4b27      	ldr	r3, [pc, #156]	; (80017a4 <SystemInit+0xe0>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	4926      	ldr	r1, [pc, #152]	; (80017a4 <SystemInit+0xe0>)
 800170c:	4b26      	ldr	r3, [pc, #152]	; (80017a8 <SystemInit+0xe4>)
 800170e:	4013      	ands	r3, r2
 8001710:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001712:	4b23      	ldr	r3, [pc, #140]	; (80017a0 <SystemInit+0xdc>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	2b03      	cmp	r3, #3
 800171c:	d907      	bls.n	800172e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800171e:	4b20      	ldr	r3, [pc, #128]	; (80017a0 <SystemInit+0xdc>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f023 030f 	bic.w	r3, r3, #15
 8001726:	4a1e      	ldr	r2, [pc, #120]	; (80017a0 <SystemInit+0xdc>)
 8001728:	f043 0303 	orr.w	r3, r3, #3
 800172c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800172e:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <SystemInit+0xe0>)
 8001730:	2200      	movs	r2, #0
 8001732:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001734:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <SystemInit+0xe0>)
 8001736:	2200      	movs	r2, #0
 8001738:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800173a:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <SystemInit+0xe0>)
 800173c:	2200      	movs	r2, #0
 800173e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001740:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <SystemInit+0xe0>)
 8001742:	4a1a      	ldr	r2, [pc, #104]	; (80017ac <SystemInit+0xe8>)
 8001744:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001746:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <SystemInit+0xe0>)
 8001748:	4a19      	ldr	r2, [pc, #100]	; (80017b0 <SystemInit+0xec>)
 800174a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800174c:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <SystemInit+0xe0>)
 800174e:	4a19      	ldr	r2, [pc, #100]	; (80017b4 <SystemInit+0xf0>)
 8001750:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001752:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <SystemInit+0xe0>)
 8001754:	2200      	movs	r2, #0
 8001756:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <SystemInit+0xe0>)
 800175a:	4a16      	ldr	r2, [pc, #88]	; (80017b4 <SystemInit+0xf0>)
 800175c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800175e:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <SystemInit+0xe0>)
 8001760:	2200      	movs	r2, #0
 8001762:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001764:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <SystemInit+0xe0>)
 8001766:	4a13      	ldr	r2, [pc, #76]	; (80017b4 <SystemInit+0xf0>)
 8001768:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800176a:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <SystemInit+0xe0>)
 800176c:	2200      	movs	r2, #0
 800176e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001770:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <SystemInit+0xe0>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a0b      	ldr	r2, [pc, #44]	; (80017a4 <SystemInit+0xe0>)
 8001776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800177a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800177c:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <SystemInit+0xe0>)
 800177e:	2200      	movs	r2, #0
 8001780:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001782:	4b0d      	ldr	r3, [pc, #52]	; (80017b8 <SystemInit+0xf4>)
 8001784:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001788:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800178a:	4b04      	ldr	r3, [pc, #16]	; (800179c <SystemInit+0xd8>)
 800178c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001790:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000ed00 	.word	0xe000ed00
 80017a0:	52002000 	.word	0x52002000
 80017a4:	58024400 	.word	0x58024400
 80017a8:	eaf6ed7f 	.word	0xeaf6ed7f
 80017ac:	02020200 	.word	0x02020200
 80017b0:	01ff0000 	.word	0x01ff0000
 80017b4:	01010280 	.word	0x01010280
 80017b8:	52004000 	.word	0x52004000

080017bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017f4 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80017c0:	f7ff ff80 	bl	80016c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80017c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80017c6:	e003      	b.n	80017d0 <LoopCopyDataInit>

080017c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017c8:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80017ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80017cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80017ce:	3104      	adds	r1, #4

080017d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80017d0:	480a      	ldr	r0, [pc, #40]	; (80017fc <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80017d2:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80017d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017d8:	d3f6      	bcc.n	80017c8 <CopyDataInit>
  ldr  r2, =_sbss
 80017da:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80017dc:	e002      	b.n	80017e4 <LoopFillZerobss>

080017de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80017de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017e0:	f842 3b04 	str.w	r3, [r2], #4

080017e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80017e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017e8:	d3f9      	bcc.n	80017de <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017ea:	f008 fbbf 	bl	8009f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ee:	f7fe feff 	bl	80005f0 <main>
  bx  lr
 80017f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017f4:	24100000 	.word	0x24100000
  ldr  r3, =_sidata
 80017f8:	0800b1ac 	.word	0x0800b1ac
  ldr  r0, =_sdata
 80017fc:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001800:	24000074 	.word	0x24000074
  ldr  r2, =_sbss
 8001804:	24000074 	.word	0x24000074
  ldr  r3, = _ebss
 8001808:	24000388 	.word	0x24000388

0800180c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800180c:	e7fe      	b.n	800180c <ADC_IRQHandler>
	...

08001810 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001816:	2003      	movs	r0, #3
 8001818:	f001 f88a 	bl	8002930 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800181c:	f004 fd2a 	bl	8006274 <HAL_RCC_GetSysClockFreq>
 8001820:	4601      	mov	r1, r0
 8001822:	4b15      	ldr	r3, [pc, #84]	; (8001878 <HAL_Init+0x68>)
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	0a1b      	lsrs	r3, r3, #8
 8001828:	f003 030f 	and.w	r3, r3, #15
 800182c:	4a13      	ldr	r2, [pc, #76]	; (800187c <HAL_Init+0x6c>)
 800182e:	5cd3      	ldrb	r3, [r2, r3]
 8001830:	f003 031f 	and.w	r3, r3, #31
 8001834:	fa21 f303 	lsr.w	r3, r1, r3
 8001838:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <HAL_Init+0x68>)
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	4a0e      	ldr	r2, [pc, #56]	; (800187c <HAL_Init+0x6c>)
 8001844:	5cd3      	ldrb	r3, [r2, r3]
 8001846:	f003 031f 	and.w	r3, r3, #31
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	fa22 f303 	lsr.w	r3, r2, r3
 8001850:	4a0b      	ldr	r2, [pc, #44]	; (8001880 <HAL_Init+0x70>)
 8001852:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001854:	4a0b      	ldr	r2, [pc, #44]	; (8001884 <HAL_Init+0x74>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800185a:	2000      	movs	r0, #0
 800185c:	f000 f814 	bl	8001888 <HAL_InitTick>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e002      	b.n	8001870 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800186a:	f7ff fc4b 	bl	8001104 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	58024400 	.word	0x58024400
 800187c:	0800b108 	.word	0x0800b108
 8001880:	24000004 	.word	0x24000004
 8001884:	24000000 	.word	0x24000000

08001888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001890:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <HAL_InitTick+0x60>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e021      	b.n	80018e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800189c:	4b13      	ldr	r3, [pc, #76]	; (80018ec <HAL_InitTick+0x64>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <HAL_InitTick+0x60>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	4619      	mov	r1, r3
 80018a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b2:	4618      	mov	r0, r3
 80018b4:	f001 f86f 	bl	8002996 <HAL_SYSTICK_Config>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e00e      	b.n	80018e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b0f      	cmp	r3, #15
 80018c6:	d80a      	bhi.n	80018de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018c8:	2200      	movs	r2, #0
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	f04f 30ff 	mov.w	r0, #4294967295
 80018d0:	f001 f839 	bl	8002946 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018d4:	4a06      	ldr	r2, [pc, #24]	; (80018f0 <HAL_InitTick+0x68>)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018da:	2300      	movs	r3, #0
 80018dc:	e000      	b.n	80018e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	2400000c 	.word	0x2400000c
 80018ec:	24000000 	.word	0x24000000
 80018f0:	24000008 	.word	0x24000008

080018f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018f8:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_IncTick+0x20>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	461a      	mov	r2, r3
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <HAL_IncTick+0x24>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4413      	add	r3, r2
 8001904:	4a04      	ldr	r2, [pc, #16]	; (8001918 <HAL_IncTick+0x24>)
 8001906:	6013      	str	r3, [r2, #0]
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	2400000c 	.word	0x2400000c
 8001918:	24000380 	.word	0x24000380

0800191c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return uwTick;
 8001920:	4b03      	ldr	r3, [pc, #12]	; (8001930 <HAL_GetTick+0x14>)
 8001922:	681b      	ldr	r3, [r3, #0]
}
 8001924:	4618      	mov	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	24000380 	.word	0x24000380

08001934 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800193c:	f7ff ffee 	bl	800191c <HAL_GetTick>
 8001940:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800194c:	d005      	beq.n	800195a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800194e:	4b09      	ldr	r3, [pc, #36]	; (8001974 <HAL_Delay+0x40>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	461a      	mov	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4413      	add	r3, r2
 8001958:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800195a:	bf00      	nop
 800195c:	f7ff ffde 	bl	800191c <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	429a      	cmp	r2, r3
 800196a:	d8f7      	bhi.n	800195c <HAL_Delay+0x28>
  {
  }
}
 800196c:	bf00      	nop
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	2400000c 	.word	0x2400000c

08001978 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	431a      	orrs	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	609a      	str	r2, [r3, #8]
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
 80019a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	431a      	orrs	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	609a      	str	r2, [r3, #8]
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b087      	sub	sp, #28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
 80019ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	3360      	adds	r3, #96	; 0x60
 80019f2:	461a      	mov	r2, r3
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	430b      	orrs	r3, r1
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001a14:	bf00      	nop
 8001a16:	371c      	adds	r7, #28
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	f003 031f 	and.w	r3, r3, #31
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a40:	431a      	orrs	r2, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	611a      	str	r2, [r3, #16]
}
 8001a46:	bf00      	nop
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b087      	sub	sp, #28
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	60f8      	str	r0, [r7, #12]
 8001a5a:	60b9      	str	r1, [r7, #8]
 8001a5c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	3360      	adds	r3, #96	; 0x60
 8001a62:	461a      	mov	r2, r3
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	431a      	orrs	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	601a      	str	r2, [r3, #0]
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	371c      	adds	r7, #28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b087      	sub	sp, #28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	3330      	adds	r3, #48	; 0x30
 8001a98:	461a      	mov	r2, r3
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	0a1b      	lsrs	r3, r3, #8
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	f003 030c 	and.w	r3, r3, #12
 8001aa4:	4413      	add	r3, r2
 8001aa6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	f003 031f 	and.w	r3, r3, #31
 8001ab2:	211f      	movs	r1, #31
 8001ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	401a      	ands	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	0e9b      	lsrs	r3, r3, #26
 8001ac0:	f003 011f 	and.w	r1, r3, #31
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	f003 031f 	and.w	r3, r3, #31
 8001aca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ad4:	bf00      	nop
 8001ad6:	371c      	adds	r7, #28
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b087      	sub	sp, #28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	3314      	adds	r3, #20
 8001af0:	461a      	mov	r2, r3
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	0e5b      	lsrs	r3, r3, #25
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	4413      	add	r3, r2
 8001afe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	0d1b      	lsrs	r3, r3, #20
 8001b08:	f003 031f 	and.w	r3, r3, #31
 8001b0c:	2107      	movs	r1, #7
 8001b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	401a      	ands	r2, r3
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	0d1b      	lsrs	r3, r3, #20
 8001b1a:	f003 031f 	and.w	r3, r3, #31
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	fa01 f303 	lsl.w	r3, r1, r3
 8001b24:	431a      	orrs	r2, r3
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b2a:	bf00      	nop
 8001b2c:	371c      	adds	r7, #28
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b50:	43db      	mvns	r3, r3
 8001b52:	401a      	ands	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f003 0318 	and.w	r3, r3, #24
 8001b5a:	4908      	ldr	r1, [pc, #32]	; (8001b7c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b5c:	40d9      	lsrs	r1, r3
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	400b      	ands	r3, r1
 8001b62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b66:	431a      	orrs	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001b6e:	bf00      	nop
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	000fffff 	.word	0x000fffff

08001b80 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001b8e:	4013      	ands	r3, r2
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6093      	str	r3, [r2, #8]
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	5fffffc0 	.word	0x5fffffc0

08001ba4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bb8:	d101      	bne.n	8001bbe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <LL_ADC_EnableInternalRegulator+0x24>)
 8001bda:	4013      	ands	r3, r2
 8001bdc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	6fffffc0 	.word	0x6fffffc0

08001bf4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c08:	d101      	bne.n	8001c0e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <LL_ADC_IsEnabled+0x18>
 8001c30:	2301      	movs	r3, #1
 8001c32:	e000      	b.n	8001c36 <LL_ADC_IsEnabled+0x1a>
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 0304 	and.w	r3, r3, #4
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d101      	bne.n	8001c5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 0308 	and.w	r3, r3, #8
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d101      	bne.n	8001c80 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e000      	b.n	8001c82 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
	...

08001c90 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c90:	b590      	push	{r4, r7, lr}
 8001c92:	b089      	sub	sp, #36	; 0x24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e137      	b.n	8001f1a <HAL_ADC_Init+0x28a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d109      	bne.n	8001ccc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff fa3d 	bl	8001138 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff67 	bl	8001ba4 <LL_ADC_IsDeepPowerDownEnabled>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d004      	beq.n	8001ce6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff4d 	bl	8001b80 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff ff82 	bl	8001bf4 <LL_ADC_IsInternalRegulatorEnabled>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d113      	bne.n	8001d1e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff ff66 	bl	8001bcc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001d00:	4b88      	ldr	r3, [pc, #544]	; (8001f24 <HAL_ADC_Init+0x294>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	099b      	lsrs	r3, r3, #6
 8001d06:	4a88      	ldr	r2, [pc, #544]	; (8001f28 <HAL_ADC_Init+0x298>)
 8001d08:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0c:	099b      	lsrs	r3, r3, #6
 8001d0e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d10:	e002      	b.n	8001d18 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	3b01      	subs	r3, #1
 8001d16:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f9      	bne.n	8001d12 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff ff66 	bl	8001bf4 <LL_ADC_IsInternalRegulatorEnabled>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d10d      	bne.n	8001d4a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d32:	f043 0210 	orr.w	r2, r3, #16
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3e:	f043 0201 	orr.w	r2, r3, #1
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff ff77 	bl	8001c42 <LL_ADC_REG_IsConversionOngoing>
 8001d54:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5a:	f003 0310 	and.w	r3, r3, #16
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f040 80d2 	bne.w	8001f08 <HAL_ADC_Init+0x278>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f040 80ce 	bne.w	8001f08 <HAL_ADC_Init+0x278>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d70:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d74:	f043 0202 	orr.w	r2, r3, #2
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ff4b 	bl	8001c1c <LL_ADC_IsEnabled>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d110      	bne.n	8001dae <HAL_ADC_Init+0x11e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d8c:	4867      	ldr	r0, [pc, #412]	; (8001f2c <HAL_ADC_Init+0x29c>)
 8001d8e:	f7ff ff45 	bl	8001c1c <LL_ADC_IsEnabled>
 8001d92:	4604      	mov	r4, r0
 8001d94:	4866      	ldr	r0, [pc, #408]	; (8001f30 <HAL_ADC_Init+0x2a0>)
 8001d96:	f7ff ff41 	bl	8001c1c <LL_ADC_IsEnabled>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4323      	orrs	r3, r4
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d105      	bne.n	8001dae <HAL_ADC_Init+0x11e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	4619      	mov	r1, r3
 8001da8:	4862      	ldr	r0, [pc, #392]	; (8001f34 <HAL_ADC_Init+0x2a4>)
 8001daa:	f7ff fde5 	bl	8001978 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	7d5b      	ldrb	r3, [r3, #21]
 8001db2:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001db8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001dbe:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	7f1b      	ldrb	r3, [r3, #28]
 8001dc4:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	7f1b      	ldrb	r3, [r3, #28]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d106      	bne.n	8001de0 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	045b      	lsls	r3, r3, #17
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d009      	beq.n	8001dfc <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68da      	ldr	r2, [r3, #12]
 8001e02:	4b4d      	ldr	r3, [pc, #308]	; (8001f38 <HAL_ADC_Init+0x2a8>)
 8001e04:	4013      	ands	r3, r2
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	6812      	ldr	r2, [r2, #0]
 8001e0a:	69b9      	ldr	r1, [r7, #24]
 8001e0c:	430b      	orrs	r3, r1
 8001e0e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff14 	bl	8001c42 <LL_ADC_REG_IsConversionOngoing>
 8001e1a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff21 	bl	8001c68 <LL_ADC_INJ_IsConversionOngoing>
 8001e26:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d14a      	bne.n	8001ec4 <HAL_ADC_Init+0x234>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d147      	bne.n	8001ec4 <HAL_ADC_Init+0x234>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	7d1b      	ldrb	r3, [r3, #20]
 8001e38:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	4b3c      	ldr	r3, [pc, #240]	; (8001f3c <HAL_ADC_Init+0x2ac>)
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6812      	ldr	r2, [r2, #0]
 8001e50:	69b9      	ldr	r1, [r7, #24]
 8001e52:	430b      	orrs	r3, r1
 8001e54:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d11b      	bne.n	8001e98 <HAL_ADC_Init+0x208>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	691a      	ldr	r2, [r3, #16]
 8001e6c:	4b34      	ldr	r3, [pc, #208]	; (8001f40 <HAL_ADC_Init+0x2b0>)
 8001e6e:	4013      	ands	r3, r2
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e74:	3a01      	subs	r2, #1
 8001e76:	0411      	lsls	r1, r2, #16
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e7c:	4311      	orrs	r1, r2
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e82:	4311      	orrs	r1, r2
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f042 0201 	orr.w	r2, r2, #1
 8001e94:	611a      	str	r2, [r3, #16]
 8001e96:	e007      	b.n	8001ea8 <HAL_ADC_Init+0x218>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	691a      	ldr	r2, [r3, #16]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 0201 	bic.w	r2, r2, #1
 8001ea6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 faee 	bl	80024a0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d10c      	bne.n	8001ee6 <HAL_ADC_Init+0x256>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	f023 010f 	bic.w	r1, r3, #15
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	1e5a      	subs	r2, r3, #1
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	631a      	str	r2, [r3, #48]	; 0x30
 8001ee4:	e007      	b.n	8001ef6 <HAL_ADC_Init+0x266>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 020f 	bic.w	r2, r2, #15
 8001ef4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efa:	f023 0303 	bic.w	r3, r3, #3
 8001efe:	f043 0201 	orr.w	r2, r3, #1
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	655a      	str	r2, [r3, #84]	; 0x54
 8001f06:	e007      	b.n	8001f18 <HAL_ADC_Init+0x288>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0c:	f043 0210 	orr.w	r2, r3, #16
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f18:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3724      	adds	r7, #36	; 0x24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd90      	pop	{r4, r7, pc}
 8001f22:	bf00      	nop
 8001f24:	24000000 	.word	0x24000000
 8001f28:	053e2d63 	.word	0x053e2d63
 8001f2c:	40022000 	.word	0x40022000
 8001f30:	40022100 	.word	0x40022100
 8001f34:	40022300 	.word	0x40022300
 8001f38:	fff0c003 	.word	0xfff0c003
 8001f3c:	ffffbffc 	.word	0xffffbffc
 8001f40:	fc00f81e 	.word	0xfc00f81e

08001f44 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f44:	b590      	push	{r4, r7, lr}
 8001f46:	b099      	sub	sp, #100	; 0x64
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	4aa1      	ldr	r2, [pc, #644]	; (80021e4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f5e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d101      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x2a>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e283      	b.n	8002476 <HAL_ADC_ConfigChannel+0x532>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff fe61 	bl	8001c42 <LL_ADC_REG_IsConversionOngoing>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f040 8268 	bne.w	8002458 <HAL_ADC_ConfigChannel+0x514>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d108      	bne.n	8001fa6 <HAL_ADC_ConfigChannel+0x62>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	0e9b      	lsrs	r3, r3, #26
 8001f9a:	f003 031f 	and.w	r3, r3, #31
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	e00f      	b.n	8001fc6 <HAL_ADC_ConfigChannel+0x82>
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fae:	fa93 f3a3 	rbit	r3, r3
 8001fb2:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fb6:	fab3 f383 	clz	r3, r3
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	f003 031f 	and.w	r3, r3, #31
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6812      	ldr	r2, [r2, #0]
 8001fca:	69d1      	ldr	r1, [r2, #28]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	430b      	orrs	r3, r1
 8001fd2:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6818      	ldr	r0, [r3, #0]
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	6859      	ldr	r1, [r3, #4]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	f7ff fd51 	bl	8001a88 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff fe29 	bl	8001c42 <LL_ADC_REG_IsConversionOngoing>
 8001ff0:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff fe36 	bl	8001c68 <LL_ADC_INJ_IsConversionOngoing>
 8001ffc:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ffe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002000:	2b00      	cmp	r3, #0
 8002002:	f040 80a0 	bne.w	8002146 <HAL_ADC_ConfigChannel+0x202>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002006:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002008:	2b00      	cmp	r3, #0
 800200a:	f040 809c 	bne.w	8002146 <HAL_ADC_ConfigChannel+0x202>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6818      	ldr	r0, [r3, #0]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	6819      	ldr	r1, [r3, #0]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	461a      	mov	r2, r3
 800201c:	f7ff fd60 	bl	8001ae0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	f003 0310 	and.w	r3, r3, #16
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10b      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x102>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	695a      	ldr	r2, [r3, #20]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	089b      	lsrs	r3, r3, #2
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	e00a      	b.n	800205c <HAL_ADC_ConfigChannel+0x118>
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	695a      	ldr	r2, [r3, #20]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	089b      	lsrs	r3, r3, #2
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	2b04      	cmp	r3, #4
 8002064:	d027      	beq.n	80020b6 <HAL_ADC_ConfigChannel+0x172>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6818      	ldr	r0, [r3, #0]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	6919      	ldr	r1, [r3, #16]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002074:	f7ff fcb4 	bl	80019e0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6818      	ldr	r0, [r3, #0]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	6919      	ldr	r1, [r3, #16]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	7e5b      	ldrb	r3, [r3, #25]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d102      	bne.n	800208e <HAL_ADC_ConfigChannel+0x14a>
 8002088:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800208c:	e000      	b.n	8002090 <HAL_ADC_ConfigChannel+0x14c>
 800208e:	2300      	movs	r3, #0
 8002090:	461a      	mov	r2, r3
 8002092:	f7ff fcde 	bl	8001a52 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6818      	ldr	r0, [r3, #0]
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	6919      	ldr	r1, [r3, #16]
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	7e1b      	ldrb	r3, [r3, #24]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d102      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x168>
 80020a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020aa:	e000      	b.n	80020ae <HAL_ADC_ConfigChannel+0x16a>
 80020ac:	2300      	movs	r3, #0
 80020ae:	461a      	mov	r2, r3
 80020b0:	f7ff fcb6 	bl	8001a20 <LL_ADC_SetDataRightShift>
 80020b4:	e047      	b.n	8002146 <HAL_ADC_ConfigChannel+0x202>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	069b      	lsls	r3, r3, #26
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d107      	bne.n	80020da <HAL_ADC_ConfigChannel+0x196>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80020d8:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	069b      	lsls	r3, r3, #26
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d107      	bne.n	80020fe <HAL_ADC_ConfigChannel+0x1ba>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80020fc:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002104:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	069b      	lsls	r3, r3, #26
 800210e:	429a      	cmp	r2, r3
 8002110:	d107      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x1de>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002120:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002128:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	069b      	lsls	r3, r3, #26
 8002132:	429a      	cmp	r2, r3
 8002134:	d107      	bne.n	8002146 <HAL_ADC_ConfigChannel+0x202>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002144:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff fd66 	bl	8001c1c <LL_ADC_IsEnabled>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	f040 8189 	bne.w	800246a <HAL_ADC_ConfigChannel+0x526>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6818      	ldr	r0, [r3, #0]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	6819      	ldr	r1, [r3, #0]
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	461a      	mov	r2, r3
 8002166:	f7ff fce7 	bl	8001b38 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	4a1d      	ldr	r2, [pc, #116]	; (80021e4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002170:	4293      	cmp	r3, r2
 8002172:	f040 80ff 	bne.w	8002374 <HAL_ADC_ConfigChannel+0x430>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10b      	bne.n	800219e <HAL_ADC_ConfigChannel+0x25a>
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	0e9b      	lsrs	r3, r3, #26
 800218c:	3301      	adds	r3, #1
 800218e:	f003 031f 	and.w	r3, r3, #31
 8002192:	2b09      	cmp	r3, #9
 8002194:	bf94      	ite	ls
 8002196:	2301      	movls	r3, #1
 8002198:	2300      	movhi	r3, #0
 800219a:	b2db      	uxtb	r3, r3
 800219c:	e012      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x280>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021a6:	fa93 f3a3 	rbit	r3, r3
 80021aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80021ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021ae:	fab3 f383 	clz	r3, r3
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	3301      	adds	r3, #1
 80021b6:	f003 031f 	and.w	r3, r3, #31
 80021ba:	2b09      	cmp	r3, #9
 80021bc:	bf94      	ite	ls
 80021be:	2301      	movls	r3, #1
 80021c0:	2300      	movhi	r3, #0
 80021c2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d066      	beq.n	8002296 <HAL_ADC_ConfigChannel+0x352>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d109      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x2a4>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	0e9b      	lsrs	r3, r3, #26
 80021da:	3301      	adds	r3, #1
 80021dc:	069b      	lsls	r3, r3, #26
 80021de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021e2:	e010      	b.n	8002206 <HAL_ADC_ConfigChannel+0x2c2>
 80021e4:	47ff0000 	.word	0x47ff0000
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f0:	fa93 f3a3 	rbit	r3, r3
 80021f4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80021f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f8:	fab3 f383 	clz	r3, r3
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	3301      	adds	r3, #1
 8002200:	069b      	lsls	r3, r3, #26
 8002202:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800220e:	2b00      	cmp	r3, #0
 8002210:	d109      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x2e2>
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	0e9b      	lsrs	r3, r3, #26
 8002218:	3301      	adds	r3, #1
 800221a:	f003 031f 	and.w	r3, r3, #31
 800221e:	2101      	movs	r1, #1
 8002220:	fa01 f303 	lsl.w	r3, r1, r3
 8002224:	e010      	b.n	8002248 <HAL_ADC_ConfigChannel+0x304>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222e:	fa93 f3a3 	rbit	r3, r3
 8002232:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002236:	fab3 f383 	clz	r3, r3
 800223a:	b2db      	uxtb	r3, r3
 800223c:	3301      	adds	r3, #1
 800223e:	f003 031f 	and.w	r3, r3, #31
 8002242:	2101      	movs	r1, #1
 8002244:	fa01 f303 	lsl.w	r3, r1, r3
 8002248:	ea42 0103 	orr.w	r1, r2, r3
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002254:	2b00      	cmp	r3, #0
 8002256:	d10a      	bne.n	800226e <HAL_ADC_ConfigChannel+0x32a>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	0e9b      	lsrs	r3, r3, #26
 800225e:	3301      	adds	r3, #1
 8002260:	f003 021f 	and.w	r2, r3, #31
 8002264:	4613      	mov	r3, r2
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	4413      	add	r3, r2
 800226a:	051b      	lsls	r3, r3, #20
 800226c:	e011      	b.n	8002292 <HAL_ADC_ConfigChannel+0x34e>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002276:	fa93 f3a3 	rbit	r3, r3
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	fab3 f383 	clz	r3, r3
 8002282:	b2db      	uxtb	r3, r3
 8002284:	3301      	adds	r3, #1
 8002286:	f003 021f 	and.w	r2, r3, #31
 800228a:	4613      	mov	r3, r2
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	4413      	add	r3, r2
 8002290:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002292:	430b      	orrs	r3, r1
 8002294:	e069      	b.n	800236a <HAL_ADC_ConfigChannel+0x426>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d107      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x36e>
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	0e9b      	lsrs	r3, r3, #26
 80022a8:	3301      	adds	r3, #1
 80022aa:	069b      	lsls	r3, r3, #26
 80022ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022b0:	e00e      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x38c>
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b8:	6a3b      	ldr	r3, [r7, #32]
 80022ba:	fa93 f3a3 	rbit	r3, r3
 80022be:	61fb      	str	r3, [r7, #28]
  return result;
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	fab3 f383 	clz	r3, r3
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	3301      	adds	r3, #1
 80022ca:	069b      	lsls	r3, r3, #26
 80022cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d109      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x3ac>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	0e9b      	lsrs	r3, r3, #26
 80022e2:	3301      	adds	r3, #1
 80022e4:	f003 031f 	and.w	r3, r3, #31
 80022e8:	2101      	movs	r1, #1
 80022ea:	fa01 f303 	lsl.w	r3, r1, r3
 80022ee:	e010      	b.n	8002312 <HAL_ADC_ConfigChannel+0x3ce>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	fa93 f3a3 	rbit	r3, r3
 80022fc:	617b      	str	r3, [r7, #20]
  return result;
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	fab3 f383 	clz	r3, r3
 8002304:	b2db      	uxtb	r3, r3
 8002306:	3301      	adds	r3, #1
 8002308:	f003 031f 	and.w	r3, r3, #31
 800230c:	2101      	movs	r1, #1
 800230e:	fa01 f303 	lsl.w	r3, r1, r3
 8002312:	ea42 0103 	orr.w	r1, r2, r3
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10d      	bne.n	800233e <HAL_ADC_ConfigChannel+0x3fa>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	0e9b      	lsrs	r3, r3, #26
 8002328:	3301      	adds	r3, #1
 800232a:	f003 021f 	and.w	r2, r3, #31
 800232e:	4613      	mov	r3, r2
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	4413      	add	r3, r2
 8002334:	3b1e      	subs	r3, #30
 8002336:	051b      	lsls	r3, r3, #20
 8002338:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800233c:	e014      	b.n	8002368 <HAL_ADC_ConfigChannel+0x424>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	fa93 f3a3 	rbit	r3, r3
 800234a:	60fb      	str	r3, [r7, #12]
  return result;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	fab3 f383 	clz	r3, r3
 8002352:	b2db      	uxtb	r3, r3
 8002354:	3301      	adds	r3, #1
 8002356:	f003 021f 	and.w	r2, r3, #31
 800235a:	4613      	mov	r3, r2
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	4413      	add	r3, r2
 8002360:	3b1e      	subs	r3, #30
 8002362:	051b      	lsls	r3, r3, #20
 8002364:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002368:	430b      	orrs	r3, r1
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	6892      	ldr	r2, [r2, #8]
 800236e:	4619      	mov	r1, r3
 8002370:	f7ff fbb6 	bl	8001ae0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	da76      	bge.n	800246a <HAL_ADC_ConfigChannel+0x526>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800237c:	4840      	ldr	r0, [pc, #256]	; (8002480 <HAL_ADC_ConfigChannel+0x53c>)
 800237e:	f7ff fb21 	bl	80019c4 <LL_ADC_GetCommonPathInternalCh>
 8002382:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002384:	483f      	ldr	r0, [pc, #252]	; (8002484 <HAL_ADC_ConfigChannel+0x540>)
 8002386:	f7ff fc49 	bl	8001c1c <LL_ADC_IsEnabled>
 800238a:	4604      	mov	r4, r0
 800238c:	483e      	ldr	r0, [pc, #248]	; (8002488 <HAL_ADC_ConfigChannel+0x544>)
 800238e:	f7ff fc45 	bl	8001c1c <LL_ADC_IsEnabled>
 8002392:	4603      	mov	r3, r0
 8002394:	4323      	orrs	r3, r4
 8002396:	2b00      	cmp	r3, #0
 8002398:	d154      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x500>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a3b      	ldr	r2, [pc, #236]	; (800248c <HAL_ADC_ConfigChannel+0x548>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d121      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x4a4>
 80023a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d11c      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x4a4>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a35      	ldr	r2, [pc, #212]	; (8002488 <HAL_ADC_ConfigChannel+0x544>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d158      	bne.n	800246a <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80023b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023be:	4619      	mov	r1, r3
 80023c0:	482f      	ldr	r0, [pc, #188]	; (8002480 <HAL_ADC_ConfigChannel+0x53c>)
 80023c2:	f7ff faec 	bl	800199e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80023c6:	4b32      	ldr	r3, [pc, #200]	; (8002490 <HAL_ADC_ConfigChannel+0x54c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	099b      	lsrs	r3, r3, #6
 80023cc:	4a31      	ldr	r2, [pc, #196]	; (8002494 <HAL_ADC_ConfigChannel+0x550>)
 80023ce:	fba2 2303 	umull	r2, r3, r2, r3
 80023d2:	099b      	lsrs	r3, r3, #6
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80023d8:	e002      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x49c>
              {
                wait_loop_index--;
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	3b01      	subs	r3, #1
 80023de:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f9      	bne.n	80023da <HAL_ADC_ConfigChannel+0x496>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023e6:	e040      	b.n	800246a <HAL_ADC_ConfigChannel+0x526>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a2a      	ldr	r2, [pc, #168]	; (8002498 <HAL_ADC_ConfigChannel+0x554>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d111      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x4d2>
 80023f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10c      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x4d2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a21      	ldr	r2, [pc, #132]	; (8002488 <HAL_ADC_ConfigChannel+0x544>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d131      	bne.n	800246a <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002408:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800240c:	4619      	mov	r1, r3
 800240e:	481c      	ldr	r0, [pc, #112]	; (8002480 <HAL_ADC_ConfigChannel+0x53c>)
 8002410:	f7ff fac5 	bl	800199e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002414:	e029      	b.n	800246a <HAL_ADC_ConfigChannel+0x526>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a20      	ldr	r2, [pc, #128]	; (800249c <HAL_ADC_ConfigChannel+0x558>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d124      	bne.n	800246a <HAL_ADC_ConfigChannel+0x526>
 8002420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d11f      	bne.n	800246a <HAL_ADC_ConfigChannel+0x526>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a16      	ldr	r2, [pc, #88]	; (8002488 <HAL_ADC_ConfigChannel+0x544>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d11a      	bne.n	800246a <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002436:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800243a:	4619      	mov	r1, r3
 800243c:	4810      	ldr	r0, [pc, #64]	; (8002480 <HAL_ADC_ConfigChannel+0x53c>)
 800243e:	f7ff faae 	bl	800199e <LL_ADC_SetCommonPathInternalCh>
 8002442:	e012      	b.n	800246a <HAL_ADC_ConfigChannel+0x526>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002448:	f043 0220 	orr.w	r2, r3, #32
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002456:	e008      	b.n	800246a <HAL_ADC_ConfigChannel+0x526>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245c:	f043 0220 	orr.w	r2, r3, #32
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002472:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8002476:	4618      	mov	r0, r3
 8002478:	3764      	adds	r7, #100	; 0x64
 800247a:	46bd      	mov	sp, r7
 800247c:	bd90      	pop	{r4, r7, pc}
 800247e:	bf00      	nop
 8002480:	40022300 	.word	0x40022300
 8002484:	40022000 	.word	0x40022000
 8002488:	40022100 	.word	0x40022100
 800248c:	cb840000 	.word	0xcb840000
 8002490:	24000000 	.word	0x24000000
 8002494:	053e2d63 	.word	0x053e2d63
 8002498:	bac04000 	.word	0xbac04000
 800249c:	cfb80000 	.word	0xcfb80000

080024a0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80024a8:	4b56      	ldr	r3, [pc, #344]	; (8002604 <ADC_ConfigureBoostMode+0x164>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d01a      	beq.n	80024ea <ADC_ConfigureBoostMode+0x4a>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80024b4:	f004 f850 	bl	8006558 <HAL_RCC_GetHCLKFreq>
 80024b8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024c2:	d006      	beq.n	80024d2 <ADC_ConfigureBoostMode+0x32>
 80024c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80024c8:	d00b      	beq.n	80024e2 <ADC_ConfigureBoostMode+0x42>
 80024ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ce:	d000      	beq.n	80024d2 <ADC_ConfigureBoostMode+0x32>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 80024d0:	e05d      	b.n	800258e <ADC_ConfigureBoostMode+0xee>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	0c1b      	lsrs	r3, r3, #16
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	fbb2 f3f3 	udiv	r3, r2, r3
 80024de:	60fb      	str	r3, [r7, #12]
        break;
 80024e0:	e055      	b.n	800258e <ADC_ConfigureBoostMode+0xee>
        freq /= 4UL;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	089b      	lsrs	r3, r3, #2
 80024e6:	60fb      	str	r3, [r7, #12]
        break;
 80024e8:	e051      	b.n	800258e <ADC_ConfigureBoostMode+0xee>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80024ea:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80024ee:	f004 ff43 	bl	8007378 <HAL_RCCEx_GetPeriphCLKFreq>
 80024f2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80024fc:	d02a      	beq.n	8002554 <ADC_ConfigureBoostMode+0xb4>
 80024fe:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002502:	d813      	bhi.n	800252c <ADC_ConfigureBoostMode+0x8c>
 8002504:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002508:	d024      	beq.n	8002554 <ADC_ConfigureBoostMode+0xb4>
 800250a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800250e:	d806      	bhi.n	800251e <ADC_ConfigureBoostMode+0x7e>
 8002510:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002514:	d01e      	beq.n	8002554 <ADC_ConfigureBoostMode+0xb4>
 8002516:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800251a:	d01b      	beq.n	8002554 <ADC_ConfigureBoostMode+0xb4>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 800251c:	e037      	b.n	800258e <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 800251e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002522:	d017      	beq.n	8002554 <ADC_ConfigureBoostMode+0xb4>
 8002524:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002528:	d014      	beq.n	8002554 <ADC_ConfigureBoostMode+0xb4>
        break;
 800252a:	e030      	b.n	800258e <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 800252c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002530:	d021      	beq.n	8002576 <ADC_ConfigureBoostMode+0xd6>
 8002532:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002536:	d806      	bhi.n	8002546 <ADC_ConfigureBoostMode+0xa6>
 8002538:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800253c:	d013      	beq.n	8002566 <ADC_ConfigureBoostMode+0xc6>
 800253e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002542:	d014      	beq.n	800256e <ADC_ConfigureBoostMode+0xce>
        break;
 8002544:	e023      	b.n	800258e <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 8002546:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800254a:	d018      	beq.n	800257e <ADC_ConfigureBoostMode+0xde>
 800254c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002550:	d019      	beq.n	8002586 <ADC_ConfigureBoostMode+0xe6>
        break;
 8002552:	e01c      	b.n	800258e <ADC_ConfigureBoostMode+0xee>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	0c9b      	lsrs	r3, r3, #18
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002562:	60fb      	str	r3, [r7, #12]
        break;
 8002564:	e013      	b.n	800258e <ADC_ConfigureBoostMode+0xee>
        freq /= 16UL;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	091b      	lsrs	r3, r3, #4
 800256a:	60fb      	str	r3, [r7, #12]
        break;
 800256c:	e00f      	b.n	800258e <ADC_ConfigureBoostMode+0xee>
        freq /= 32UL;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	095b      	lsrs	r3, r3, #5
 8002572:	60fb      	str	r3, [r7, #12]
        break;
 8002574:	e00b      	b.n	800258e <ADC_ConfigureBoostMode+0xee>
        freq /= 64UL;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	099b      	lsrs	r3, r3, #6
 800257a:	60fb      	str	r3, [r7, #12]
        break;
 800257c:	e007      	b.n	800258e <ADC_ConfigureBoostMode+0xee>
        freq /= 128UL;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	09db      	lsrs	r3, r3, #7
 8002582:	60fb      	str	r3, [r7, #12]
        break;
 8002584:	e003      	b.n	800258e <ADC_ConfigureBoostMode+0xee>
        freq /= 256UL;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	0a1b      	lsrs	r3, r3, #8
 800258a:	60fb      	str	r3, [r7, #12]
        break;
 800258c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	085b      	lsrs	r3, r3, #1
 8002592:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4a1c      	ldr	r2, [pc, #112]	; (8002608 <ADC_ConfigureBoostMode+0x168>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d808      	bhi.n	80025ae <ADC_ConfigureBoostMode+0x10e>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80025aa:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80025ac:	e025      	b.n	80025fa <ADC_ConfigureBoostMode+0x15a>
  else if (freq <= 12500000UL)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	4a16      	ldr	r2, [pc, #88]	; (800260c <ADC_ConfigureBoostMode+0x16c>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d80a      	bhi.n	80025cc <ADC_ConfigureBoostMode+0x12c>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025c8:	609a      	str	r2, [r3, #8]
}
 80025ca:	e016      	b.n	80025fa <ADC_ConfigureBoostMode+0x15a>
  else if (freq <= 25000000UL)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4a10      	ldr	r2, [pc, #64]	; (8002610 <ADC_ConfigureBoostMode+0x170>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d80a      	bhi.n	80025ea <ADC_ConfigureBoostMode+0x14a>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e6:	609a      	str	r2, [r3, #8]
}
 80025e8:	e007      	b.n	80025fa <ADC_ConfigureBoostMode+0x15a>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80025f8:	609a      	str	r2, [r3, #8]
}
 80025fa:	bf00      	nop
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40022300 	.word	0x40022300
 8002608:	005f5e10 	.word	0x005f5e10
 800260c:	00bebc20 	.word	0x00bebc20
 8002610:	017d7840 	.word	0x017d7840

08002614 <LL_ADC_IsEnabled>:
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	2b01      	cmp	r3, #1
 8002626:	d101      	bne.n	800262c <LL_ADC_IsEnabled+0x18>
 8002628:	2301      	movs	r3, #1
 800262a:	e000      	b.n	800262e <LL_ADC_IsEnabled+0x1a>
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <LL_ADC_REG_IsConversionOngoing>:
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 0304 	and.w	r3, r3, #4
 800264a:	2b04      	cmp	r3, #4
 800264c:	d101      	bne.n	8002652 <LL_ADC_REG_IsConversionOngoing+0x18>
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002660:	b590      	push	{r4, r7, lr}
 8002662:	b09f      	sub	sp, #124	; 0x7c
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800266a:	2300      	movs	r3, #0
 800266c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002676:	2b01      	cmp	r3, #1
 8002678:	d101      	bne.n	800267e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800267a:	2302      	movs	r3, #2
 800267c:	e07c      	b.n	8002778 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a3d      	ldr	r2, [pc, #244]	; (8002780 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d102      	bne.n	8002696 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002690:	4b3c      	ldr	r3, [pc, #240]	; (8002784 <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 8002692:	60bb      	str	r3, [r7, #8]
 8002694:	e001      	b.n	800269a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002696:	2300      	movs	r3, #0
 8002698:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10b      	bne.n	80026b8 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a4:	f043 0220 	orr.w	r2, r3, #32
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e05f      	b.n	8002778 <HAL_ADCEx_MultiModeConfigChannel+0x118>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff ffbd 	bl	800263a <LL_ADC_REG_IsConversionOngoing>
 80026c0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff ffb7 	bl	800263a <LL_ADC_REG_IsConversionOngoing>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d141      	bne.n	8002756 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80026d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d13e      	bne.n	8002756 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80026d8:	4b2b      	ldr	r3, [pc, #172]	; (8002788 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80026da:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d020      	beq.n	8002726 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80026e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	431a      	orrs	r2, r3
 80026f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026f4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026f6:	4822      	ldr	r0, [pc, #136]	; (8002780 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 80026f8:	f7ff ff8c 	bl	8002614 <LL_ADC_IsEnabled>
 80026fc:	4604      	mov	r4, r0
 80026fe:	4821      	ldr	r0, [pc, #132]	; (8002784 <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 8002700:	f7ff ff88 	bl	8002614 <LL_ADC_IsEnabled>
 8002704:	4603      	mov	r3, r0
 8002706:	4323      	orrs	r3, r4
 8002708:	2b00      	cmp	r3, #0
 800270a:	d12e      	bne.n	800276a <HAL_ADCEx_MultiModeConfigChannel+0x10a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800270c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	4b1e      	ldr	r3, [pc, #120]	; (800278c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002712:	4013      	ands	r3, r2
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	6811      	ldr	r1, [r2, #0]
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	6892      	ldr	r2, [r2, #8]
 800271c:	430a      	orrs	r2, r1
 800271e:	431a      	orrs	r2, r3
 8002720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002722:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002724:	e021      	b.n	800276a <HAL_ADCEx_MultiModeConfigChannel+0x10a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800272e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002730:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002732:	4813      	ldr	r0, [pc, #76]	; (8002780 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8002734:	f7ff ff6e 	bl	8002614 <LL_ADC_IsEnabled>
 8002738:	4604      	mov	r4, r0
 800273a:	4812      	ldr	r0, [pc, #72]	; (8002784 <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 800273c:	f7ff ff6a 	bl	8002614 <LL_ADC_IsEnabled>
 8002740:	4603      	mov	r3, r0
 8002742:	4323      	orrs	r3, r4
 8002744:	2b00      	cmp	r3, #0
 8002746:	d110      	bne.n	800276a <HAL_ADCEx_MultiModeConfigChannel+0x10a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	4b0f      	ldr	r3, [pc, #60]	; (800278c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800274e:	4013      	ands	r3, r2
 8002750:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002752:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002754:	e009      	b.n	800276a <HAL_ADCEx_MultiModeConfigChannel+0x10a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275a:	f043 0220 	orr.w	r2, r3, #32
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002768:	e000      	b.n	800276c <HAL_ADCEx_MultiModeConfigChannel+0x10c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800276a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002774:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002778:	4618      	mov	r0, r3
 800277a:	377c      	adds	r7, #124	; 0x7c
 800277c:	46bd      	mov	sp, r7
 800277e:	bd90      	pop	{r4, r7, pc}
 8002780:	40022000 	.word	0x40022000
 8002784:	40022100 	.word	0x40022100
 8002788:	40022300 	.word	0x40022300
 800278c:	fffff0e0 	.word	0xfffff0e0

08002790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027a0:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <__NVIC_SetPriorityGrouping+0x40>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027ac:	4013      	ands	r3, r2
 80027ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80027b8:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <__NVIC_SetPriorityGrouping+0x44>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027be:	4a04      	ldr	r2, [pc, #16]	; (80027d0 <__NVIC_SetPriorityGrouping+0x40>)
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	60d3      	str	r3, [r2, #12]
}
 80027c4:	bf00      	nop
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	e000ed00 	.word	0xe000ed00
 80027d4:	05fa0000 	.word	0x05fa0000

080027d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027dc:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <__NVIC_GetPriorityGrouping+0x18>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	0a1b      	lsrs	r3, r3, #8
 80027e2:	f003 0307 	and.w	r3, r3, #7
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	e000ed00 	.word	0xe000ed00

080027f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002802:	2b00      	cmp	r3, #0
 8002804:	db0b      	blt.n	800281e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002806:	88fb      	ldrh	r3, [r7, #6]
 8002808:	f003 021f 	and.w	r2, r3, #31
 800280c:	4907      	ldr	r1, [pc, #28]	; (800282c <__NVIC_EnableIRQ+0x38>)
 800280e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002812:	095b      	lsrs	r3, r3, #5
 8002814:	2001      	movs	r0, #1
 8002816:	fa00 f202 	lsl.w	r2, r0, r2
 800281a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	e000e100 	.word	0xe000e100

08002830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	6039      	str	r1, [r7, #0]
 800283a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800283c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002840:	2b00      	cmp	r3, #0
 8002842:	db0a      	blt.n	800285a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	b2da      	uxtb	r2, r3
 8002848:	490c      	ldr	r1, [pc, #48]	; (800287c <__NVIC_SetPriority+0x4c>)
 800284a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800284e:	0112      	lsls	r2, r2, #4
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	440b      	add	r3, r1
 8002854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002858:	e00a      	b.n	8002870 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	b2da      	uxtb	r2, r3
 800285e:	4908      	ldr	r1, [pc, #32]	; (8002880 <__NVIC_SetPriority+0x50>)
 8002860:	88fb      	ldrh	r3, [r7, #6]
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	3b04      	subs	r3, #4
 8002868:	0112      	lsls	r2, r2, #4
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	440b      	add	r3, r1
 800286e:	761a      	strb	r2, [r3, #24]
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	e000e100 	.word	0xe000e100
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002884:	b480      	push	{r7}
 8002886:	b089      	sub	sp, #36	; 0x24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	f1c3 0307 	rsb	r3, r3, #7
 800289e:	2b04      	cmp	r3, #4
 80028a0:	bf28      	it	cs
 80028a2:	2304      	movcs	r3, #4
 80028a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	3304      	adds	r3, #4
 80028aa:	2b06      	cmp	r3, #6
 80028ac:	d902      	bls.n	80028b4 <NVIC_EncodePriority+0x30>
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	3b03      	subs	r3, #3
 80028b2:	e000      	b.n	80028b6 <NVIC_EncodePriority+0x32>
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b8:	f04f 32ff 	mov.w	r2, #4294967295
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43da      	mvns	r2, r3
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	401a      	ands	r2, r3
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028cc:	f04f 31ff 	mov.w	r1, #4294967295
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	fa01 f303 	lsl.w	r3, r1, r3
 80028d6:	43d9      	mvns	r1, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028dc:	4313      	orrs	r3, r2
         );
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3724      	adds	r7, #36	; 0x24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
	...

080028ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028fc:	d301      	bcc.n	8002902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028fe:	2301      	movs	r3, #1
 8002900:	e00f      	b.n	8002922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002902:	4a0a      	ldr	r2, [pc, #40]	; (800292c <SysTick_Config+0x40>)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3b01      	subs	r3, #1
 8002908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800290a:	210f      	movs	r1, #15
 800290c:	f04f 30ff 	mov.w	r0, #4294967295
 8002910:	f7ff ff8e 	bl	8002830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002914:	4b05      	ldr	r3, [pc, #20]	; (800292c <SysTick_Config+0x40>)
 8002916:	2200      	movs	r2, #0
 8002918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800291a:	4b04      	ldr	r3, [pc, #16]	; (800292c <SysTick_Config+0x40>)
 800291c:	2207      	movs	r2, #7
 800291e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	e000e010 	.word	0xe000e010

08002930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7ff ff29 	bl	8002790 <__NVIC_SetPriorityGrouping>
}
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b086      	sub	sp, #24
 800294a:	af00      	add	r7, sp, #0
 800294c:	4603      	mov	r3, r0
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	607a      	str	r2, [r7, #4]
 8002952:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002954:	f7ff ff40 	bl	80027d8 <__NVIC_GetPriorityGrouping>
 8002958:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	68b9      	ldr	r1, [r7, #8]
 800295e:	6978      	ldr	r0, [r7, #20]
 8002960:	f7ff ff90 	bl	8002884 <NVIC_EncodePriority>
 8002964:	4602      	mov	r2, r0
 8002966:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800296a:	4611      	mov	r1, r2
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff ff5f 	bl	8002830 <__NVIC_SetPriority>
}
 8002972:	bf00      	nop
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	4603      	mov	r3, r0
 8002982:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002984:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff ff33 	bl	80027f4 <__NVIC_EnableIRQ>
}
 800298e:	bf00      	nop
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b082      	sub	sp, #8
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7ff ffa4 	bl	80028ec <SysTick_Config>
 80029a4:	4603      	mov	r3, r0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e014      	b.n	80029ea <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	791b      	ldrb	r3, [r3, #4]
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d105      	bne.n	80029d6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f7fe fc2b 	bl	800122c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2202      	movs	r2, #2
 80029da:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
 80029fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	795b      	ldrb	r3, [r3, #5]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d101      	bne.n	8002a08 <HAL_DAC_Start+0x16>
 8002a04:	2302      	movs	r3, #2
 8002a06:	e040      	b.n	8002a8a <HAL_DAC_Start+0x98>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2202      	movs	r2, #2
 8002a12:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6819      	ldr	r1, [r3, #0]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	f003 0310 	and.w	r3, r3, #16
 8002a20:	2201      	movs	r2, #1
 8002a22:	409a      	lsls	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10f      	bne.n	8002a52 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d11d      	bne.n	8002a7c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f042 0201 	orr.w	r2, r2, #1
 8002a4e:	605a      	str	r2, [r3, #4]
 8002a50:	e014      	b.n	8002a7c <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	f003 0310 	and.w	r3, r3, #16
 8002a62:	2102      	movs	r1, #2
 8002a64:	fa01 f303 	lsl.w	r3, r1, r3
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d107      	bne.n	8002a7c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0202 	orr.w	r2, r2, #2
 8002a7a:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
	...

08002a98 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
 8002aa4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	795b      	ldrb	r3, [r3, #5]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d101      	bne.n	8002ab6 <HAL_DAC_Start_DMA+0x1e>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e09e      	b.n	8002bf4 <HAL_DAC_Start_DMA+0x15c>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d12a      	bne.n	8002b1e <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	4a4b      	ldr	r2, [pc, #300]	; (8002bfc <HAL_DAC_Start_DMA+0x164>)
 8002ace:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	4a4a      	ldr	r2, [pc, #296]	; (8002c00 <HAL_DAC_Start_DMA+0x168>)
 8002ad6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	4a49      	ldr	r2, [pc, #292]	; (8002c04 <HAL_DAC_Start_DMA+0x16c>)
 8002ade:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002aee:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d009      	beq.n	8002b0a <HAL_DAC_Start_DMA+0x72>
 8002af6:	2b08      	cmp	r3, #8
 8002af8:	d00c      	beq.n	8002b14 <HAL_DAC_Start_DMA+0x7c>
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d000      	beq.n	8002b00 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002afe:	e039      	b.n	8002b74 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	3308      	adds	r3, #8
 8002b06:	613b      	str	r3, [r7, #16]
        break;
 8002b08:	e034      	b.n	8002b74 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	330c      	adds	r3, #12
 8002b10:	613b      	str	r3, [r7, #16]
        break;
 8002b12:	e02f      	b.n	8002b74 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	3310      	adds	r3, #16
 8002b1a:	613b      	str	r3, [r7, #16]
        break;
 8002b1c:	e02a      	b.n	8002b74 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	4a39      	ldr	r2, [pc, #228]	; (8002c08 <HAL_DAC_Start_DMA+0x170>)
 8002b24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	4a38      	ldr	r2, [pc, #224]	; (8002c0c <HAL_DAC_Start_DMA+0x174>)
 8002b2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	4a37      	ldr	r2, [pc, #220]	; (8002c10 <HAL_DAC_Start_DMA+0x178>)
 8002b34:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b44:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	d009      	beq.n	8002b60 <HAL_DAC_Start_DMA+0xc8>
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d00c      	beq.n	8002b6a <HAL_DAC_Start_DMA+0xd2>
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d000      	beq.n	8002b56 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002b54:	e00e      	b.n	8002b74 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	3314      	adds	r3, #20
 8002b5c:	613b      	str	r3, [r7, #16]
        break;
 8002b5e:	e009      	b.n	8002b74 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	3318      	adds	r3, #24
 8002b66:	613b      	str	r3, [r7, #16]
        break;
 8002b68:	e004      	b.n	8002b74 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	331c      	adds	r3, #28
 8002b70:	613b      	str	r3, [r7, #16]
        break;
 8002b72:	bf00      	nop
    }
  }

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d111      	bne.n	8002b9e <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b88:	601a      	str	r2, [r3, #0]

   /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6898      	ldr	r0, [r3, #8]
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	f000 fda6 	bl	80036e4 <HAL_DMA_Start_IT>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	75fb      	strb	r3, [r7, #23]
 8002b9c:	e010      	b.n	8002bc0 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002bac:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	68d8      	ldr	r0, [r3, #12]
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	f000 fd94 	bl	80036e4 <HAL_DMA_Start_IT>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002bc6:	7dfb      	ldrb	r3, [r7, #23]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10c      	bne.n	8002be6 <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6819      	ldr	r1, [r3, #0]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	f003 0310 	and.w	r3, r3, #16
 8002bd8:	2201      	movs	r2, #1
 8002bda:	409a      	lsls	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	e005      	b.n	8002bf2 <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	f043 0204 	orr.w	r2, r3, #4
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3718      	adds	r7, #24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	08002eb1 	.word	0x08002eb1
 8002c00:	08002ed3 	.word	0x08002ed3
 8002c04:	08002eef 	.word	0x08002eef
 8002c08:	08002f59 	.word	0x08002f59
 8002c0c:	08002f7b 	.word	0x08002f7b
 8002c10:	08002f97 	.word	0x08002f97

08002c14 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b088      	sub	sp, #32
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	795b      	ldrb	r3, [r3, #5]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d101      	bne.n	8002c68 <HAL_DAC_ConfigChannel+0x18>
 8002c64:	2302      	movs	r3, #2
 8002c66:	e11d      	b.n	8002ea4 <HAL_DAC_ConfigChannel+0x254>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2202      	movs	r2, #2
 8002c72:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d174      	bne.n	8002d66 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002c7c:	f7fe fe4e 	bl	800191c <HAL_GetTick>
 8002c80:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d134      	bne.n	8002cf2 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c88:	e011      	b.n	8002cae <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002c8a:	f7fe fe47 	bl	800191c <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d90a      	bls.n	8002cae <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	f043 0208 	orr.w	r2, r3, #8
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2203      	movs	r2, #3
 8002ca8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e0fa      	b.n	8002ea4 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cb4:	4b7d      	ldr	r3, [pc, #500]	; (8002eac <HAL_DAC_ConfigChannel+0x25c>)
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1e6      	bne.n	8002c8a <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8002cbc:	2001      	movs	r0, #1
 8002cbe:	f7fe fe39 	bl	8001934 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	6992      	ldr	r2, [r2, #24]
 8002cca:	641a      	str	r2, [r3, #64]	; 0x40
 8002ccc:	e01e      	b.n	8002d0c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002cce:	f7fe fe25 	bl	800191c <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d90a      	bls.n	8002cf2 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	f043 0208 	orr.w	r2, r3, #8
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2203      	movs	r2, #3
 8002cec:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e0d8      	b.n	8002ea4 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	dbe8      	blt.n	8002cce <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8002cfc:	2001      	movs	r0, #1
 8002cfe:	f7fe fe19 	bl	8001934 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	6992      	ldr	r2, [r2, #24]
 8002d0a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f003 0310 	and.w	r3, r3, #16
 8002d18:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d20:	43db      	mvns	r3, r3
 8002d22:	ea02 0103 	and.w	r1, r2, r3
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	69da      	ldr	r2, [r3, #28]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f003 0310 	and.w	r3, r3, #16
 8002d30:	409a      	lsls	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f003 0310 	and.w	r3, r3, #16
 8002d46:	21ff      	movs	r1, #255	; 0xff
 8002d48:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	ea02 0103 	and.w	r1, r2, r3
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	6a1a      	ldr	r2, [r3, #32]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f003 0310 	and.w	r3, r3, #16
 8002d5c:	409a      	lsls	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d11d      	bne.n	8002daa <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d74:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f003 0310 	and.w	r3, r3, #16
 8002d7c:	221f      	movs	r2, #31
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	43db      	mvns	r3, r3
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	4013      	ands	r3, r2
 8002d88:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f003 0310 	and.w	r3, r3, #16
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db0:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f003 0310 	and.w	r3, r3, #16
 8002db8:	2207      	movs	r2, #7
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d102      	bne.n	8002dd4 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61fb      	str	r3, [r7, #28]
 8002dd2:	e00f      	b.n	8002df4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d102      	bne.n	8002de2 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	61fb      	str	r3, [r7, #28]
 8002de0:	e008      	b.n	8002df4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d102      	bne.n	8002df0 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002dea:	2301      	movs	r3, #1
 8002dec:	61fb      	str	r3, [r7, #28]
 8002dee:	e001      	b.n	8002df4 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	69fa      	ldr	r2, [r7, #28]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f003 0310 	and.w	r3, r3, #16
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6819      	ldr	r1, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43da      	mvns	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	400a      	ands	r2, r1
 8002e3a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f003 0310 	and.w	r3, r3, #16
 8002e4a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43db      	mvns	r3, r3
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	4013      	ands	r3, r2
 8002e58:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f003 0310 	and.w	r3, r3, #16
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6819      	ldr	r1, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f003 0310 	and.w	r3, r3, #16
 8002e86:	22c0      	movs	r2, #192	; 0xc0
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43da      	mvns	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	400a      	ands	r2, r1
 8002e94:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3720      	adds	r7, #32
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	20008000 	.word	0x20008000

08002eb0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f7ff fea8 	bl	8002c14 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	711a      	strb	r2, [r3, #4]
}
 8002eca:	bf00      	nop
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b084      	sub	sp, #16
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ede:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f7ff fea1 	bl	8002c28 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002ee6:	bf00      	nop
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b084      	sub	sp, #16
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efa:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	f043 0204 	orr.w	r2, r3, #4
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f7ff fe97 	bl	8002c3c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2201      	movs	r2, #1
 8002f12:	711a      	strb	r2, [r3, #4]
}
 8002f14:	bf00      	nop
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f64:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f7ff ffd8 	bl	8002f1c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	711a      	strb	r2, [r3, #4]
}
 8002f72:	bf00      	nop
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b084      	sub	sp, #16
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f86:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f7ff ffd1 	bl	8002f30 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002f8e:	bf00      	nop
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b084      	sub	sp, #16
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	f043 0204 	orr.w	r2, r3, #4
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f7ff ffc7 	bl	8002f44 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	711a      	strb	r2, [r3, #4]
}
 8002fbc:	bf00      	nop
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002fcc:	f7fe fca6 	bl	800191c <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e37f      	b.n	80036dc <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a66      	ldr	r2, [pc, #408]	; (800317c <HAL_DMA_Init+0x1b8>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d04a      	beq.n	800307c <HAL_DMA_Init+0xb8>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a65      	ldr	r2, [pc, #404]	; (8003180 <HAL_DMA_Init+0x1bc>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d045      	beq.n	800307c <HAL_DMA_Init+0xb8>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a63      	ldr	r2, [pc, #396]	; (8003184 <HAL_DMA_Init+0x1c0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d040      	beq.n	800307c <HAL_DMA_Init+0xb8>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a62      	ldr	r2, [pc, #392]	; (8003188 <HAL_DMA_Init+0x1c4>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d03b      	beq.n	800307c <HAL_DMA_Init+0xb8>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a60      	ldr	r2, [pc, #384]	; (800318c <HAL_DMA_Init+0x1c8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d036      	beq.n	800307c <HAL_DMA_Init+0xb8>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a5f      	ldr	r2, [pc, #380]	; (8003190 <HAL_DMA_Init+0x1cc>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d031      	beq.n	800307c <HAL_DMA_Init+0xb8>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a5d      	ldr	r2, [pc, #372]	; (8003194 <HAL_DMA_Init+0x1d0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d02c      	beq.n	800307c <HAL_DMA_Init+0xb8>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a5c      	ldr	r2, [pc, #368]	; (8003198 <HAL_DMA_Init+0x1d4>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d027      	beq.n	800307c <HAL_DMA_Init+0xb8>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a5a      	ldr	r2, [pc, #360]	; (800319c <HAL_DMA_Init+0x1d8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d022      	beq.n	800307c <HAL_DMA_Init+0xb8>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a59      	ldr	r2, [pc, #356]	; (80031a0 <HAL_DMA_Init+0x1dc>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d01d      	beq.n	800307c <HAL_DMA_Init+0xb8>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a57      	ldr	r2, [pc, #348]	; (80031a4 <HAL_DMA_Init+0x1e0>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d018      	beq.n	800307c <HAL_DMA_Init+0xb8>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a56      	ldr	r2, [pc, #344]	; (80031a8 <HAL_DMA_Init+0x1e4>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d013      	beq.n	800307c <HAL_DMA_Init+0xb8>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a54      	ldr	r2, [pc, #336]	; (80031ac <HAL_DMA_Init+0x1e8>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d00e      	beq.n	800307c <HAL_DMA_Init+0xb8>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a53      	ldr	r2, [pc, #332]	; (80031b0 <HAL_DMA_Init+0x1ec>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d009      	beq.n	800307c <HAL_DMA_Init+0xb8>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a51      	ldr	r2, [pc, #324]	; (80031b4 <HAL_DMA_Init+0x1f0>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d004      	beq.n	800307c <HAL_DMA_Init+0xb8>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a50      	ldr	r2, [pc, #320]	; (80031b8 <HAL_DMA_Init+0x1f4>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d101      	bne.n	8003080 <HAL_DMA_Init+0xbc>
 800307c:	2301      	movs	r3, #1
 800307e:	e000      	b.n	8003082 <HAL_DMA_Init+0xbe>
 8003080:	2300      	movs	r3, #0
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 813c 	beq.w	8003300 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2202      	movs	r2, #2
 8003094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a37      	ldr	r2, [pc, #220]	; (800317c <HAL_DMA_Init+0x1b8>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d04a      	beq.n	8003138 <HAL_DMA_Init+0x174>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a36      	ldr	r2, [pc, #216]	; (8003180 <HAL_DMA_Init+0x1bc>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d045      	beq.n	8003138 <HAL_DMA_Init+0x174>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a34      	ldr	r2, [pc, #208]	; (8003184 <HAL_DMA_Init+0x1c0>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d040      	beq.n	8003138 <HAL_DMA_Init+0x174>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a33      	ldr	r2, [pc, #204]	; (8003188 <HAL_DMA_Init+0x1c4>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d03b      	beq.n	8003138 <HAL_DMA_Init+0x174>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a31      	ldr	r2, [pc, #196]	; (800318c <HAL_DMA_Init+0x1c8>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d036      	beq.n	8003138 <HAL_DMA_Init+0x174>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a30      	ldr	r2, [pc, #192]	; (8003190 <HAL_DMA_Init+0x1cc>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d031      	beq.n	8003138 <HAL_DMA_Init+0x174>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a2e      	ldr	r2, [pc, #184]	; (8003194 <HAL_DMA_Init+0x1d0>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d02c      	beq.n	8003138 <HAL_DMA_Init+0x174>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a2d      	ldr	r2, [pc, #180]	; (8003198 <HAL_DMA_Init+0x1d4>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d027      	beq.n	8003138 <HAL_DMA_Init+0x174>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a2b      	ldr	r2, [pc, #172]	; (800319c <HAL_DMA_Init+0x1d8>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d022      	beq.n	8003138 <HAL_DMA_Init+0x174>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a2a      	ldr	r2, [pc, #168]	; (80031a0 <HAL_DMA_Init+0x1dc>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d01d      	beq.n	8003138 <HAL_DMA_Init+0x174>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a28      	ldr	r2, [pc, #160]	; (80031a4 <HAL_DMA_Init+0x1e0>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d018      	beq.n	8003138 <HAL_DMA_Init+0x174>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a27      	ldr	r2, [pc, #156]	; (80031a8 <HAL_DMA_Init+0x1e4>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d013      	beq.n	8003138 <HAL_DMA_Init+0x174>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a25      	ldr	r2, [pc, #148]	; (80031ac <HAL_DMA_Init+0x1e8>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d00e      	beq.n	8003138 <HAL_DMA_Init+0x174>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a24      	ldr	r2, [pc, #144]	; (80031b0 <HAL_DMA_Init+0x1ec>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d009      	beq.n	8003138 <HAL_DMA_Init+0x174>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a22      	ldr	r2, [pc, #136]	; (80031b4 <HAL_DMA_Init+0x1f0>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d004      	beq.n	8003138 <HAL_DMA_Init+0x174>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a21      	ldr	r2, [pc, #132]	; (80031b8 <HAL_DMA_Init+0x1f4>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d108      	bne.n	800314a <HAL_DMA_Init+0x186>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0201 	bic.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	e007      	b.n	800315a <HAL_DMA_Init+0x196>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0201 	bic.w	r2, r2, #1
 8003158:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800315a:	e02f      	b.n	80031bc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800315c:	f7fe fbde 	bl	800191c <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b05      	cmp	r3, #5
 8003168:	d928      	bls.n	80031bc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2220      	movs	r2, #32
 800316e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2203      	movs	r2, #3
 8003174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e2af      	b.n	80036dc <HAL_DMA_Init+0x718>
 800317c:	40020010 	.word	0x40020010
 8003180:	40020028 	.word	0x40020028
 8003184:	40020040 	.word	0x40020040
 8003188:	40020058 	.word	0x40020058
 800318c:	40020070 	.word	0x40020070
 8003190:	40020088 	.word	0x40020088
 8003194:	400200a0 	.word	0x400200a0
 8003198:	400200b8 	.word	0x400200b8
 800319c:	40020410 	.word	0x40020410
 80031a0:	40020428 	.word	0x40020428
 80031a4:	40020440 	.word	0x40020440
 80031a8:	40020458 	.word	0x40020458
 80031ac:	40020470 	.word	0x40020470
 80031b0:	40020488 	.word	0x40020488
 80031b4:	400204a0 	.word	0x400204a0
 80031b8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1c8      	bne.n	800315c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	4b73      	ldr	r3, [pc, #460]	; (80033a4 <HAL_DMA_Init+0x3e0>)
 80031d6:	4013      	ands	r3, r2
 80031d8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80031e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ee:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031fa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	4313      	orrs	r3, r2
 8003206:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	2b04      	cmp	r3, #4
 800320e:	d107      	bne.n	8003220 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003218:	4313      	orrs	r3, r2
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	4313      	orrs	r3, r2
 800321e:	617b      	str	r3, [r7, #20]
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2b28      	cmp	r3, #40	; 0x28
 8003226:	d903      	bls.n	8003230 <HAL_DMA_Init+0x26c>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b2e      	cmp	r3, #46	; 0x2e
 800322e:	d91f      	bls.n	8003270 <HAL_DMA_Init+0x2ac>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b3e      	cmp	r3, #62	; 0x3e
 8003236:	d903      	bls.n	8003240 <HAL_DMA_Init+0x27c>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b42      	cmp	r3, #66	; 0x42
 800323e:	d917      	bls.n	8003270 <HAL_DMA_Init+0x2ac>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2b46      	cmp	r3, #70	; 0x46
 8003246:	d903      	bls.n	8003250 <HAL_DMA_Init+0x28c>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	2b48      	cmp	r3, #72	; 0x48
 800324e:	d90f      	bls.n	8003270 <HAL_DMA_Init+0x2ac>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b4e      	cmp	r3, #78	; 0x4e
 8003256:	d903      	bls.n	8003260 <HAL_DMA_Init+0x29c>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b52      	cmp	r3, #82	; 0x52
 800325e:	d907      	bls.n	8003270 <HAL_DMA_Init+0x2ac>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	2b73      	cmp	r3, #115	; 0x73
 8003266:	d905      	bls.n	8003274 <HAL_DMA_Init+0x2b0>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b77      	cmp	r3, #119	; 0x77
 800326e:	d801      	bhi.n	8003274 <HAL_DMA_Init+0x2b0>
 8003270:	2301      	movs	r3, #1
 8003272:	e000      	b.n	8003276 <HAL_DMA_Init+0x2b2>
 8003274:	2300      	movs	r3, #0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003280:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f023 0307 	bic.w	r3, r3, #7
 8003298:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	2b04      	cmp	r3, #4
 80032aa:	d117      	bne.n	80032dc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00e      	beq.n	80032dc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f001 fe72 	bl	8004fa8 <DMA_CheckFifoParam>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d008      	beq.n	80032dc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2240      	movs	r2, #64	; 0x40
 80032ce:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e1ff      	b.n	80036dc <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f001 fdad 	bl	8004e44 <DMA_CalcBaseAndBitshift>
 80032ea:	4603      	mov	r3, r0
 80032ec:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f2:	f003 031f 	and.w	r3, r3, #31
 80032f6:	223f      	movs	r2, #63	; 0x3f
 80032f8:	409a      	lsls	r2, r3
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	609a      	str	r2, [r3, #8]
 80032fe:	e0fe      	b.n	80034fe <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a28      	ldr	r2, [pc, #160]	; (80033a8 <HAL_DMA_Init+0x3e4>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d04a      	beq.n	80033a0 <HAL_DMA_Init+0x3dc>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a27      	ldr	r2, [pc, #156]	; (80033ac <HAL_DMA_Init+0x3e8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d045      	beq.n	80033a0 <HAL_DMA_Init+0x3dc>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a25      	ldr	r2, [pc, #148]	; (80033b0 <HAL_DMA_Init+0x3ec>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d040      	beq.n	80033a0 <HAL_DMA_Init+0x3dc>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a24      	ldr	r2, [pc, #144]	; (80033b4 <HAL_DMA_Init+0x3f0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d03b      	beq.n	80033a0 <HAL_DMA_Init+0x3dc>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a22      	ldr	r2, [pc, #136]	; (80033b8 <HAL_DMA_Init+0x3f4>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d036      	beq.n	80033a0 <HAL_DMA_Init+0x3dc>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a21      	ldr	r2, [pc, #132]	; (80033bc <HAL_DMA_Init+0x3f8>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d031      	beq.n	80033a0 <HAL_DMA_Init+0x3dc>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a1f      	ldr	r2, [pc, #124]	; (80033c0 <HAL_DMA_Init+0x3fc>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d02c      	beq.n	80033a0 <HAL_DMA_Init+0x3dc>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a1e      	ldr	r2, [pc, #120]	; (80033c4 <HAL_DMA_Init+0x400>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d027      	beq.n	80033a0 <HAL_DMA_Init+0x3dc>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a1c      	ldr	r2, [pc, #112]	; (80033c8 <HAL_DMA_Init+0x404>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d022      	beq.n	80033a0 <HAL_DMA_Init+0x3dc>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a1b      	ldr	r2, [pc, #108]	; (80033cc <HAL_DMA_Init+0x408>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d01d      	beq.n	80033a0 <HAL_DMA_Init+0x3dc>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a19      	ldr	r2, [pc, #100]	; (80033d0 <HAL_DMA_Init+0x40c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d018      	beq.n	80033a0 <HAL_DMA_Init+0x3dc>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a18      	ldr	r2, [pc, #96]	; (80033d4 <HAL_DMA_Init+0x410>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d013      	beq.n	80033a0 <HAL_DMA_Init+0x3dc>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a16      	ldr	r2, [pc, #88]	; (80033d8 <HAL_DMA_Init+0x414>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00e      	beq.n	80033a0 <HAL_DMA_Init+0x3dc>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a15      	ldr	r2, [pc, #84]	; (80033dc <HAL_DMA_Init+0x418>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d009      	beq.n	80033a0 <HAL_DMA_Init+0x3dc>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a13      	ldr	r2, [pc, #76]	; (80033e0 <HAL_DMA_Init+0x41c>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d004      	beq.n	80033a0 <HAL_DMA_Init+0x3dc>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a12      	ldr	r2, [pc, #72]	; (80033e4 <HAL_DMA_Init+0x420>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d123      	bne.n	80033e8 <HAL_DMA_Init+0x424>
 80033a0:	2301      	movs	r3, #1
 80033a2:	e022      	b.n	80033ea <HAL_DMA_Init+0x426>
 80033a4:	fe10803f 	.word	0xfe10803f
 80033a8:	48022c08 	.word	0x48022c08
 80033ac:	48022c1c 	.word	0x48022c1c
 80033b0:	48022c30 	.word	0x48022c30
 80033b4:	48022c44 	.word	0x48022c44
 80033b8:	48022c58 	.word	0x48022c58
 80033bc:	48022c6c 	.word	0x48022c6c
 80033c0:	48022c80 	.word	0x48022c80
 80033c4:	48022c94 	.word	0x48022c94
 80033c8:	58025408 	.word	0x58025408
 80033cc:	5802541c 	.word	0x5802541c
 80033d0:	58025430 	.word	0x58025430
 80033d4:	58025444 	.word	0x58025444
 80033d8:	58025458 	.word	0x58025458
 80033dc:	5802546c 	.word	0x5802546c
 80033e0:	58025480 	.word	0x58025480
 80033e4:	58025494 	.word	0x58025494
 80033e8:	2300      	movs	r3, #0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d07e      	beq.n	80034ec <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a80      	ldr	r2, [pc, #512]	; (80035f4 <HAL_DMA_Init+0x630>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d021      	beq.n	800343c <HAL_DMA_Init+0x478>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a7e      	ldr	r2, [pc, #504]	; (80035f8 <HAL_DMA_Init+0x634>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d01c      	beq.n	800343c <HAL_DMA_Init+0x478>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a7d      	ldr	r2, [pc, #500]	; (80035fc <HAL_DMA_Init+0x638>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d017      	beq.n	800343c <HAL_DMA_Init+0x478>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a7b      	ldr	r2, [pc, #492]	; (8003600 <HAL_DMA_Init+0x63c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d012      	beq.n	800343c <HAL_DMA_Init+0x478>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a7a      	ldr	r2, [pc, #488]	; (8003604 <HAL_DMA_Init+0x640>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d00d      	beq.n	800343c <HAL_DMA_Init+0x478>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a78      	ldr	r2, [pc, #480]	; (8003608 <HAL_DMA_Init+0x644>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d008      	beq.n	800343c <HAL_DMA_Init+0x478>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a77      	ldr	r2, [pc, #476]	; (800360c <HAL_DMA_Init+0x648>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d003      	beq.n	800343c <HAL_DMA_Init+0x478>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a75      	ldr	r2, [pc, #468]	; (8003610 <HAL_DMA_Init+0x64c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2202      	movs	r2, #2
 800344a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	4b6e      	ldr	r3, [pc, #440]	; (8003614 <HAL_DMA_Init+0x650>)
 800345a:	4013      	ands	r3, r2
 800345c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	2b40      	cmp	r3, #64	; 0x40
 8003464:	d008      	beq.n	8003478 <HAL_DMA_Init+0x4b4>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	2b80      	cmp	r3, #128	; 0x80
 800346c:	d102      	bne.n	8003474 <HAL_DMA_Init+0x4b0>
 800346e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003472:	e002      	b.n	800347a <HAL_DMA_Init+0x4b6>
 8003474:	2300      	movs	r3, #0
 8003476:	e000      	b.n	800347a <HAL_DMA_Init+0x4b6>
 8003478:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	68d2      	ldr	r2, [r2, #12]
 800347e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003480:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003488:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003490:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003498:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80034a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80034a8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	461a      	mov	r2, r3
 80034be:	4b56      	ldr	r3, [pc, #344]	; (8003618 <HAL_DMA_Init+0x654>)
 80034c0:	4413      	add	r3, r2
 80034c2:	4a56      	ldr	r2, [pc, #344]	; (800361c <HAL_DMA_Init+0x658>)
 80034c4:	fba2 2303 	umull	r2, r3, r2, r3
 80034c8:	091b      	lsrs	r3, r3, #4
 80034ca:	009a      	lsls	r2, r3, #2
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f001 fcb7 	bl	8004e44 <DMA_CalcBaseAndBitshift>
 80034d6:	4603      	mov	r3, r0
 80034d8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034de:	f003 031f 	and.w	r3, r3, #31
 80034e2:	2201      	movs	r2, #1
 80034e4:	409a      	lsls	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	605a      	str	r2, [r3, #4]
 80034ea:	e008      	b.n	80034fe <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2240      	movs	r2, #64	; 0x40
 80034f0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2203      	movs	r2, #3
 80034f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e0ee      	b.n	80036dc <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a47      	ldr	r2, [pc, #284]	; (8003620 <HAL_DMA_Init+0x65c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d072      	beq.n	80035ee <HAL_DMA_Init+0x62a>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a45      	ldr	r2, [pc, #276]	; (8003624 <HAL_DMA_Init+0x660>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d06d      	beq.n	80035ee <HAL_DMA_Init+0x62a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a44      	ldr	r2, [pc, #272]	; (8003628 <HAL_DMA_Init+0x664>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d068      	beq.n	80035ee <HAL_DMA_Init+0x62a>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a42      	ldr	r2, [pc, #264]	; (800362c <HAL_DMA_Init+0x668>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d063      	beq.n	80035ee <HAL_DMA_Init+0x62a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a41      	ldr	r2, [pc, #260]	; (8003630 <HAL_DMA_Init+0x66c>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d05e      	beq.n	80035ee <HAL_DMA_Init+0x62a>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a3f      	ldr	r2, [pc, #252]	; (8003634 <HAL_DMA_Init+0x670>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d059      	beq.n	80035ee <HAL_DMA_Init+0x62a>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a3e      	ldr	r2, [pc, #248]	; (8003638 <HAL_DMA_Init+0x674>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d054      	beq.n	80035ee <HAL_DMA_Init+0x62a>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a3c      	ldr	r2, [pc, #240]	; (800363c <HAL_DMA_Init+0x678>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d04f      	beq.n	80035ee <HAL_DMA_Init+0x62a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a3b      	ldr	r2, [pc, #236]	; (8003640 <HAL_DMA_Init+0x67c>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d04a      	beq.n	80035ee <HAL_DMA_Init+0x62a>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a39      	ldr	r2, [pc, #228]	; (8003644 <HAL_DMA_Init+0x680>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d045      	beq.n	80035ee <HAL_DMA_Init+0x62a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a38      	ldr	r2, [pc, #224]	; (8003648 <HAL_DMA_Init+0x684>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d040      	beq.n	80035ee <HAL_DMA_Init+0x62a>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a36      	ldr	r2, [pc, #216]	; (800364c <HAL_DMA_Init+0x688>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d03b      	beq.n	80035ee <HAL_DMA_Init+0x62a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a35      	ldr	r2, [pc, #212]	; (8003650 <HAL_DMA_Init+0x68c>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d036      	beq.n	80035ee <HAL_DMA_Init+0x62a>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a33      	ldr	r2, [pc, #204]	; (8003654 <HAL_DMA_Init+0x690>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d031      	beq.n	80035ee <HAL_DMA_Init+0x62a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a32      	ldr	r2, [pc, #200]	; (8003658 <HAL_DMA_Init+0x694>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d02c      	beq.n	80035ee <HAL_DMA_Init+0x62a>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a30      	ldr	r2, [pc, #192]	; (800365c <HAL_DMA_Init+0x698>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d027      	beq.n	80035ee <HAL_DMA_Init+0x62a>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a14      	ldr	r2, [pc, #80]	; (80035f4 <HAL_DMA_Init+0x630>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d022      	beq.n	80035ee <HAL_DMA_Init+0x62a>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a12      	ldr	r2, [pc, #72]	; (80035f8 <HAL_DMA_Init+0x634>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d01d      	beq.n	80035ee <HAL_DMA_Init+0x62a>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a11      	ldr	r2, [pc, #68]	; (80035fc <HAL_DMA_Init+0x638>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d018      	beq.n	80035ee <HAL_DMA_Init+0x62a>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a0f      	ldr	r2, [pc, #60]	; (8003600 <HAL_DMA_Init+0x63c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d013      	beq.n	80035ee <HAL_DMA_Init+0x62a>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a0e      	ldr	r2, [pc, #56]	; (8003604 <HAL_DMA_Init+0x640>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d00e      	beq.n	80035ee <HAL_DMA_Init+0x62a>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a0c      	ldr	r2, [pc, #48]	; (8003608 <HAL_DMA_Init+0x644>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d009      	beq.n	80035ee <HAL_DMA_Init+0x62a>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a0b      	ldr	r2, [pc, #44]	; (800360c <HAL_DMA_Init+0x648>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d004      	beq.n	80035ee <HAL_DMA_Init+0x62a>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a09      	ldr	r2, [pc, #36]	; (8003610 <HAL_DMA_Init+0x64c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d138      	bne.n	8003660 <HAL_DMA_Init+0x69c>
 80035ee:	2301      	movs	r3, #1
 80035f0:	e037      	b.n	8003662 <HAL_DMA_Init+0x69e>
 80035f2:	bf00      	nop
 80035f4:	58025408 	.word	0x58025408
 80035f8:	5802541c 	.word	0x5802541c
 80035fc:	58025430 	.word	0x58025430
 8003600:	58025444 	.word	0x58025444
 8003604:	58025458 	.word	0x58025458
 8003608:	5802546c 	.word	0x5802546c
 800360c:	58025480 	.word	0x58025480
 8003610:	58025494 	.word	0x58025494
 8003614:	fffe000f 	.word	0xfffe000f
 8003618:	a7fdabf8 	.word	0xa7fdabf8
 800361c:	cccccccd 	.word	0xcccccccd
 8003620:	40020010 	.word	0x40020010
 8003624:	40020028 	.word	0x40020028
 8003628:	40020040 	.word	0x40020040
 800362c:	40020058 	.word	0x40020058
 8003630:	40020070 	.word	0x40020070
 8003634:	40020088 	.word	0x40020088
 8003638:	400200a0 	.word	0x400200a0
 800363c:	400200b8 	.word	0x400200b8
 8003640:	40020410 	.word	0x40020410
 8003644:	40020428 	.word	0x40020428
 8003648:	40020440 	.word	0x40020440
 800364c:	40020458 	.word	0x40020458
 8003650:	40020470 	.word	0x40020470
 8003654:	40020488 	.word	0x40020488
 8003658:	400204a0 	.word	0x400204a0
 800365c:	400204b8 	.word	0x400204b8
 8003660:	2300      	movs	r3, #0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d032      	beq.n	80036cc <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f001 fd1a 	bl	80050a0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	2b80      	cmp	r3, #128	; 0x80
 8003672:	d102      	bne.n	800367a <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800368e:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d010      	beq.n	80036ba <HAL_DMA_Init+0x6f6>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b08      	cmp	r3, #8
 800369e:	d80c      	bhi.n	80036ba <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f001 fd97 	bl	80051d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036aa:	2200      	movs	r2, #0
 80036ac:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80036b6:	605a      	str	r2, [r3, #4]
 80036b8:	e008      	b.n	80036cc <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3718      	adds	r7, #24
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
 80036f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036f2:	2300      	movs	r3, #0
 80036f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e226      	b.n	8003b4e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003706:	2b01      	cmp	r3, #1
 8003708:	d101      	bne.n	800370e <HAL_DMA_Start_IT+0x2a>
 800370a:	2302      	movs	r3, #2
 800370c:	e21f      	b.n	8003b4e <HAL_DMA_Start_IT+0x46a>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b01      	cmp	r3, #1
 8003720:	f040 820a 	bne.w	8003b38 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2202      	movs	r2, #2
 8003728:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a68      	ldr	r2, [pc, #416]	; (80038d8 <HAL_DMA_Start_IT+0x1f4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d04a      	beq.n	80037d2 <HAL_DMA_Start_IT+0xee>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a66      	ldr	r2, [pc, #408]	; (80038dc <HAL_DMA_Start_IT+0x1f8>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d045      	beq.n	80037d2 <HAL_DMA_Start_IT+0xee>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a65      	ldr	r2, [pc, #404]	; (80038e0 <HAL_DMA_Start_IT+0x1fc>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d040      	beq.n	80037d2 <HAL_DMA_Start_IT+0xee>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a63      	ldr	r2, [pc, #396]	; (80038e4 <HAL_DMA_Start_IT+0x200>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d03b      	beq.n	80037d2 <HAL_DMA_Start_IT+0xee>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a62      	ldr	r2, [pc, #392]	; (80038e8 <HAL_DMA_Start_IT+0x204>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d036      	beq.n	80037d2 <HAL_DMA_Start_IT+0xee>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a60      	ldr	r2, [pc, #384]	; (80038ec <HAL_DMA_Start_IT+0x208>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d031      	beq.n	80037d2 <HAL_DMA_Start_IT+0xee>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a5f      	ldr	r2, [pc, #380]	; (80038f0 <HAL_DMA_Start_IT+0x20c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d02c      	beq.n	80037d2 <HAL_DMA_Start_IT+0xee>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a5d      	ldr	r2, [pc, #372]	; (80038f4 <HAL_DMA_Start_IT+0x210>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d027      	beq.n	80037d2 <HAL_DMA_Start_IT+0xee>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a5c      	ldr	r2, [pc, #368]	; (80038f8 <HAL_DMA_Start_IT+0x214>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d022      	beq.n	80037d2 <HAL_DMA_Start_IT+0xee>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a5a      	ldr	r2, [pc, #360]	; (80038fc <HAL_DMA_Start_IT+0x218>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d01d      	beq.n	80037d2 <HAL_DMA_Start_IT+0xee>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a59      	ldr	r2, [pc, #356]	; (8003900 <HAL_DMA_Start_IT+0x21c>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d018      	beq.n	80037d2 <HAL_DMA_Start_IT+0xee>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a57      	ldr	r2, [pc, #348]	; (8003904 <HAL_DMA_Start_IT+0x220>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d013      	beq.n	80037d2 <HAL_DMA_Start_IT+0xee>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a56      	ldr	r2, [pc, #344]	; (8003908 <HAL_DMA_Start_IT+0x224>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d00e      	beq.n	80037d2 <HAL_DMA_Start_IT+0xee>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a54      	ldr	r2, [pc, #336]	; (800390c <HAL_DMA_Start_IT+0x228>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d009      	beq.n	80037d2 <HAL_DMA_Start_IT+0xee>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a53      	ldr	r2, [pc, #332]	; (8003910 <HAL_DMA_Start_IT+0x22c>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d004      	beq.n	80037d2 <HAL_DMA_Start_IT+0xee>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a51      	ldr	r2, [pc, #324]	; (8003914 <HAL_DMA_Start_IT+0x230>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d108      	bne.n	80037e4 <HAL_DMA_Start_IT+0x100>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0201 	bic.w	r2, r2, #1
 80037e0:	601a      	str	r2, [r3, #0]
 80037e2:	e007      	b.n	80037f4 <HAL_DMA_Start_IT+0x110>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0201 	bic.w	r2, r2, #1
 80037f2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	68b9      	ldr	r1, [r7, #8]
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f001 f93e 	bl	8004a7c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a34      	ldr	r2, [pc, #208]	; (80038d8 <HAL_DMA_Start_IT+0x1f4>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d04a      	beq.n	80038a0 <HAL_DMA_Start_IT+0x1bc>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a33      	ldr	r2, [pc, #204]	; (80038dc <HAL_DMA_Start_IT+0x1f8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d045      	beq.n	80038a0 <HAL_DMA_Start_IT+0x1bc>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a31      	ldr	r2, [pc, #196]	; (80038e0 <HAL_DMA_Start_IT+0x1fc>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d040      	beq.n	80038a0 <HAL_DMA_Start_IT+0x1bc>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a30      	ldr	r2, [pc, #192]	; (80038e4 <HAL_DMA_Start_IT+0x200>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d03b      	beq.n	80038a0 <HAL_DMA_Start_IT+0x1bc>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a2e      	ldr	r2, [pc, #184]	; (80038e8 <HAL_DMA_Start_IT+0x204>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d036      	beq.n	80038a0 <HAL_DMA_Start_IT+0x1bc>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a2d      	ldr	r2, [pc, #180]	; (80038ec <HAL_DMA_Start_IT+0x208>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d031      	beq.n	80038a0 <HAL_DMA_Start_IT+0x1bc>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a2b      	ldr	r2, [pc, #172]	; (80038f0 <HAL_DMA_Start_IT+0x20c>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d02c      	beq.n	80038a0 <HAL_DMA_Start_IT+0x1bc>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a2a      	ldr	r2, [pc, #168]	; (80038f4 <HAL_DMA_Start_IT+0x210>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d027      	beq.n	80038a0 <HAL_DMA_Start_IT+0x1bc>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a28      	ldr	r2, [pc, #160]	; (80038f8 <HAL_DMA_Start_IT+0x214>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d022      	beq.n	80038a0 <HAL_DMA_Start_IT+0x1bc>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a27      	ldr	r2, [pc, #156]	; (80038fc <HAL_DMA_Start_IT+0x218>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d01d      	beq.n	80038a0 <HAL_DMA_Start_IT+0x1bc>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a25      	ldr	r2, [pc, #148]	; (8003900 <HAL_DMA_Start_IT+0x21c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d018      	beq.n	80038a0 <HAL_DMA_Start_IT+0x1bc>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a24      	ldr	r2, [pc, #144]	; (8003904 <HAL_DMA_Start_IT+0x220>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d013      	beq.n	80038a0 <HAL_DMA_Start_IT+0x1bc>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a22      	ldr	r2, [pc, #136]	; (8003908 <HAL_DMA_Start_IT+0x224>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d00e      	beq.n	80038a0 <HAL_DMA_Start_IT+0x1bc>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a21      	ldr	r2, [pc, #132]	; (800390c <HAL_DMA_Start_IT+0x228>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d009      	beq.n	80038a0 <HAL_DMA_Start_IT+0x1bc>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a1f      	ldr	r2, [pc, #124]	; (8003910 <HAL_DMA_Start_IT+0x22c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d004      	beq.n	80038a0 <HAL_DMA_Start_IT+0x1bc>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a1e      	ldr	r2, [pc, #120]	; (8003914 <HAL_DMA_Start_IT+0x230>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d101      	bne.n	80038a4 <HAL_DMA_Start_IT+0x1c0>
 80038a0:	2301      	movs	r3, #1
 80038a2:	e000      	b.n	80038a6 <HAL_DMA_Start_IT+0x1c2>
 80038a4:	2300      	movs	r3, #0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d036      	beq.n	8003918 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f023 021e 	bic.w	r2, r3, #30
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f042 0216 	orr.w	r2, r2, #22
 80038bc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d03e      	beq.n	8003944 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f042 0208 	orr.w	r2, r2, #8
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	e035      	b.n	8003944 <HAL_DMA_Start_IT+0x260>
 80038d8:	40020010 	.word	0x40020010
 80038dc:	40020028 	.word	0x40020028
 80038e0:	40020040 	.word	0x40020040
 80038e4:	40020058 	.word	0x40020058
 80038e8:	40020070 	.word	0x40020070
 80038ec:	40020088 	.word	0x40020088
 80038f0:	400200a0 	.word	0x400200a0
 80038f4:	400200b8 	.word	0x400200b8
 80038f8:	40020410 	.word	0x40020410
 80038fc:	40020428 	.word	0x40020428
 8003900:	40020440 	.word	0x40020440
 8003904:	40020458 	.word	0x40020458
 8003908:	40020470 	.word	0x40020470
 800390c:	40020488 	.word	0x40020488
 8003910:	400204a0 	.word	0x400204a0
 8003914:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f023 020e 	bic.w	r2, r3, #14
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 020a 	orr.w	r2, r2, #10
 800392a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	2b00      	cmp	r3, #0
 8003932:	d007      	beq.n	8003944 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0204 	orr.w	r2, r2, #4
 8003942:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a83      	ldr	r2, [pc, #524]	; (8003b58 <HAL_DMA_Start_IT+0x474>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d072      	beq.n	8003a34 <HAL_DMA_Start_IT+0x350>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a82      	ldr	r2, [pc, #520]	; (8003b5c <HAL_DMA_Start_IT+0x478>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d06d      	beq.n	8003a34 <HAL_DMA_Start_IT+0x350>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a80      	ldr	r2, [pc, #512]	; (8003b60 <HAL_DMA_Start_IT+0x47c>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d068      	beq.n	8003a34 <HAL_DMA_Start_IT+0x350>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a7f      	ldr	r2, [pc, #508]	; (8003b64 <HAL_DMA_Start_IT+0x480>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d063      	beq.n	8003a34 <HAL_DMA_Start_IT+0x350>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a7d      	ldr	r2, [pc, #500]	; (8003b68 <HAL_DMA_Start_IT+0x484>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d05e      	beq.n	8003a34 <HAL_DMA_Start_IT+0x350>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a7c      	ldr	r2, [pc, #496]	; (8003b6c <HAL_DMA_Start_IT+0x488>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d059      	beq.n	8003a34 <HAL_DMA_Start_IT+0x350>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a7a      	ldr	r2, [pc, #488]	; (8003b70 <HAL_DMA_Start_IT+0x48c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d054      	beq.n	8003a34 <HAL_DMA_Start_IT+0x350>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a79      	ldr	r2, [pc, #484]	; (8003b74 <HAL_DMA_Start_IT+0x490>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d04f      	beq.n	8003a34 <HAL_DMA_Start_IT+0x350>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a77      	ldr	r2, [pc, #476]	; (8003b78 <HAL_DMA_Start_IT+0x494>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d04a      	beq.n	8003a34 <HAL_DMA_Start_IT+0x350>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a76      	ldr	r2, [pc, #472]	; (8003b7c <HAL_DMA_Start_IT+0x498>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d045      	beq.n	8003a34 <HAL_DMA_Start_IT+0x350>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a74      	ldr	r2, [pc, #464]	; (8003b80 <HAL_DMA_Start_IT+0x49c>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d040      	beq.n	8003a34 <HAL_DMA_Start_IT+0x350>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a73      	ldr	r2, [pc, #460]	; (8003b84 <HAL_DMA_Start_IT+0x4a0>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d03b      	beq.n	8003a34 <HAL_DMA_Start_IT+0x350>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a71      	ldr	r2, [pc, #452]	; (8003b88 <HAL_DMA_Start_IT+0x4a4>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d036      	beq.n	8003a34 <HAL_DMA_Start_IT+0x350>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a70      	ldr	r2, [pc, #448]	; (8003b8c <HAL_DMA_Start_IT+0x4a8>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d031      	beq.n	8003a34 <HAL_DMA_Start_IT+0x350>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a6e      	ldr	r2, [pc, #440]	; (8003b90 <HAL_DMA_Start_IT+0x4ac>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d02c      	beq.n	8003a34 <HAL_DMA_Start_IT+0x350>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a6d      	ldr	r2, [pc, #436]	; (8003b94 <HAL_DMA_Start_IT+0x4b0>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d027      	beq.n	8003a34 <HAL_DMA_Start_IT+0x350>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a6b      	ldr	r2, [pc, #428]	; (8003b98 <HAL_DMA_Start_IT+0x4b4>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d022      	beq.n	8003a34 <HAL_DMA_Start_IT+0x350>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a6a      	ldr	r2, [pc, #424]	; (8003b9c <HAL_DMA_Start_IT+0x4b8>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d01d      	beq.n	8003a34 <HAL_DMA_Start_IT+0x350>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a68      	ldr	r2, [pc, #416]	; (8003ba0 <HAL_DMA_Start_IT+0x4bc>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d018      	beq.n	8003a34 <HAL_DMA_Start_IT+0x350>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a67      	ldr	r2, [pc, #412]	; (8003ba4 <HAL_DMA_Start_IT+0x4c0>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d013      	beq.n	8003a34 <HAL_DMA_Start_IT+0x350>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a65      	ldr	r2, [pc, #404]	; (8003ba8 <HAL_DMA_Start_IT+0x4c4>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d00e      	beq.n	8003a34 <HAL_DMA_Start_IT+0x350>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a64      	ldr	r2, [pc, #400]	; (8003bac <HAL_DMA_Start_IT+0x4c8>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d009      	beq.n	8003a34 <HAL_DMA_Start_IT+0x350>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a62      	ldr	r2, [pc, #392]	; (8003bb0 <HAL_DMA_Start_IT+0x4cc>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d004      	beq.n	8003a34 <HAL_DMA_Start_IT+0x350>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a61      	ldr	r2, [pc, #388]	; (8003bb4 <HAL_DMA_Start_IT+0x4d0>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d101      	bne.n	8003a38 <HAL_DMA_Start_IT+0x354>
 8003a34:	2301      	movs	r3, #1
 8003a36:	e000      	b.n	8003a3a <HAL_DMA_Start_IT+0x356>
 8003a38:	2300      	movs	r3, #0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d01a      	beq.n	8003a74 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d007      	beq.n	8003a5c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a5a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d007      	beq.n	8003a74 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a72:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a37      	ldr	r2, [pc, #220]	; (8003b58 <HAL_DMA_Start_IT+0x474>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d04a      	beq.n	8003b14 <HAL_DMA_Start_IT+0x430>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a36      	ldr	r2, [pc, #216]	; (8003b5c <HAL_DMA_Start_IT+0x478>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d045      	beq.n	8003b14 <HAL_DMA_Start_IT+0x430>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a34      	ldr	r2, [pc, #208]	; (8003b60 <HAL_DMA_Start_IT+0x47c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d040      	beq.n	8003b14 <HAL_DMA_Start_IT+0x430>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a33      	ldr	r2, [pc, #204]	; (8003b64 <HAL_DMA_Start_IT+0x480>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d03b      	beq.n	8003b14 <HAL_DMA_Start_IT+0x430>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a31      	ldr	r2, [pc, #196]	; (8003b68 <HAL_DMA_Start_IT+0x484>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d036      	beq.n	8003b14 <HAL_DMA_Start_IT+0x430>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a30      	ldr	r2, [pc, #192]	; (8003b6c <HAL_DMA_Start_IT+0x488>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d031      	beq.n	8003b14 <HAL_DMA_Start_IT+0x430>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a2e      	ldr	r2, [pc, #184]	; (8003b70 <HAL_DMA_Start_IT+0x48c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d02c      	beq.n	8003b14 <HAL_DMA_Start_IT+0x430>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a2d      	ldr	r2, [pc, #180]	; (8003b74 <HAL_DMA_Start_IT+0x490>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d027      	beq.n	8003b14 <HAL_DMA_Start_IT+0x430>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a2b      	ldr	r2, [pc, #172]	; (8003b78 <HAL_DMA_Start_IT+0x494>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d022      	beq.n	8003b14 <HAL_DMA_Start_IT+0x430>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a2a      	ldr	r2, [pc, #168]	; (8003b7c <HAL_DMA_Start_IT+0x498>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d01d      	beq.n	8003b14 <HAL_DMA_Start_IT+0x430>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a28      	ldr	r2, [pc, #160]	; (8003b80 <HAL_DMA_Start_IT+0x49c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d018      	beq.n	8003b14 <HAL_DMA_Start_IT+0x430>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a27      	ldr	r2, [pc, #156]	; (8003b84 <HAL_DMA_Start_IT+0x4a0>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d013      	beq.n	8003b14 <HAL_DMA_Start_IT+0x430>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a25      	ldr	r2, [pc, #148]	; (8003b88 <HAL_DMA_Start_IT+0x4a4>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00e      	beq.n	8003b14 <HAL_DMA_Start_IT+0x430>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a24      	ldr	r2, [pc, #144]	; (8003b8c <HAL_DMA_Start_IT+0x4a8>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d009      	beq.n	8003b14 <HAL_DMA_Start_IT+0x430>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a22      	ldr	r2, [pc, #136]	; (8003b90 <HAL_DMA_Start_IT+0x4ac>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d004      	beq.n	8003b14 <HAL_DMA_Start_IT+0x430>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a21      	ldr	r2, [pc, #132]	; (8003b94 <HAL_DMA_Start_IT+0x4b0>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d108      	bne.n	8003b26 <HAL_DMA_Start_IT+0x442>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0201 	orr.w	r2, r2, #1
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	e012      	b.n	8003b4c <HAL_DMA_Start_IT+0x468>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f042 0201 	orr.w	r2, r2, #1
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	e009      	b.n	8003b4c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b46:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3718      	adds	r7, #24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40020010 	.word	0x40020010
 8003b5c:	40020028 	.word	0x40020028
 8003b60:	40020040 	.word	0x40020040
 8003b64:	40020058 	.word	0x40020058
 8003b68:	40020070 	.word	0x40020070
 8003b6c:	40020088 	.word	0x40020088
 8003b70:	400200a0 	.word	0x400200a0
 8003b74:	400200b8 	.word	0x400200b8
 8003b78:	40020410 	.word	0x40020410
 8003b7c:	40020428 	.word	0x40020428
 8003b80:	40020440 	.word	0x40020440
 8003b84:	40020458 	.word	0x40020458
 8003b88:	40020470 	.word	0x40020470
 8003b8c:	40020488 	.word	0x40020488
 8003b90:	400204a0 	.word	0x400204a0
 8003b94:	400204b8 	.word	0x400204b8
 8003b98:	58025408 	.word	0x58025408
 8003b9c:	5802541c 	.word	0x5802541c
 8003ba0:	58025430 	.word	0x58025430
 8003ba4:	58025444 	.word	0x58025444
 8003ba8:	58025458 	.word	0x58025458
 8003bac:	5802546c 	.word	0x5802546c
 8003bb0:	58025480 	.word	0x58025480
 8003bb4:	58025494 	.word	0x58025494

08003bb8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b08a      	sub	sp, #40	; 0x28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003bc4:	4b67      	ldr	r3, [pc, #412]	; (8003d64 <HAL_DMA_IRQHandler+0x1ac>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a67      	ldr	r2, [pc, #412]	; (8003d68 <HAL_DMA_IRQHandler+0x1b0>)
 8003bca:	fba2 2303 	umull	r2, r3, r2, r3
 8003bce:	0a9b      	lsrs	r3, r3, #10
 8003bd0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bdc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003bde:	6a3b      	ldr	r3, [r7, #32]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a5f      	ldr	r2, [pc, #380]	; (8003d6c <HAL_DMA_IRQHandler+0x1b4>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d04a      	beq.n	8003c8a <HAL_DMA_IRQHandler+0xd2>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a5d      	ldr	r2, [pc, #372]	; (8003d70 <HAL_DMA_IRQHandler+0x1b8>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d045      	beq.n	8003c8a <HAL_DMA_IRQHandler+0xd2>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a5c      	ldr	r2, [pc, #368]	; (8003d74 <HAL_DMA_IRQHandler+0x1bc>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d040      	beq.n	8003c8a <HAL_DMA_IRQHandler+0xd2>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a5a      	ldr	r2, [pc, #360]	; (8003d78 <HAL_DMA_IRQHandler+0x1c0>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d03b      	beq.n	8003c8a <HAL_DMA_IRQHandler+0xd2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a59      	ldr	r2, [pc, #356]	; (8003d7c <HAL_DMA_IRQHandler+0x1c4>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d036      	beq.n	8003c8a <HAL_DMA_IRQHandler+0xd2>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a57      	ldr	r2, [pc, #348]	; (8003d80 <HAL_DMA_IRQHandler+0x1c8>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d031      	beq.n	8003c8a <HAL_DMA_IRQHandler+0xd2>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a56      	ldr	r2, [pc, #344]	; (8003d84 <HAL_DMA_IRQHandler+0x1cc>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d02c      	beq.n	8003c8a <HAL_DMA_IRQHandler+0xd2>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a54      	ldr	r2, [pc, #336]	; (8003d88 <HAL_DMA_IRQHandler+0x1d0>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d027      	beq.n	8003c8a <HAL_DMA_IRQHandler+0xd2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a53      	ldr	r2, [pc, #332]	; (8003d8c <HAL_DMA_IRQHandler+0x1d4>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d022      	beq.n	8003c8a <HAL_DMA_IRQHandler+0xd2>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a51      	ldr	r2, [pc, #324]	; (8003d90 <HAL_DMA_IRQHandler+0x1d8>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d01d      	beq.n	8003c8a <HAL_DMA_IRQHandler+0xd2>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a50      	ldr	r2, [pc, #320]	; (8003d94 <HAL_DMA_IRQHandler+0x1dc>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d018      	beq.n	8003c8a <HAL_DMA_IRQHandler+0xd2>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a4e      	ldr	r2, [pc, #312]	; (8003d98 <HAL_DMA_IRQHandler+0x1e0>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d013      	beq.n	8003c8a <HAL_DMA_IRQHandler+0xd2>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a4d      	ldr	r2, [pc, #308]	; (8003d9c <HAL_DMA_IRQHandler+0x1e4>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d00e      	beq.n	8003c8a <HAL_DMA_IRQHandler+0xd2>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a4b      	ldr	r2, [pc, #300]	; (8003da0 <HAL_DMA_IRQHandler+0x1e8>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d009      	beq.n	8003c8a <HAL_DMA_IRQHandler+0xd2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a4a      	ldr	r2, [pc, #296]	; (8003da4 <HAL_DMA_IRQHandler+0x1ec>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d004      	beq.n	8003c8a <HAL_DMA_IRQHandler+0xd2>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a48      	ldr	r2, [pc, #288]	; (8003da8 <HAL_DMA_IRQHandler+0x1f0>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d101      	bne.n	8003c8e <HAL_DMA_IRQHandler+0xd6>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <HAL_DMA_IRQHandler+0xd8>
 8003c8e:	2300      	movs	r3, #0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 842b 	beq.w	80044ec <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c9a:	f003 031f 	and.w	r3, r3, #31
 8003c9e:	2208      	movs	r2, #8
 8003ca0:	409a      	lsls	r2, r3
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f000 80a2 	beq.w	8003df0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a2e      	ldr	r2, [pc, #184]	; (8003d6c <HAL_DMA_IRQHandler+0x1b4>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d04a      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x194>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a2d      	ldr	r2, [pc, #180]	; (8003d70 <HAL_DMA_IRQHandler+0x1b8>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d045      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x194>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a2b      	ldr	r2, [pc, #172]	; (8003d74 <HAL_DMA_IRQHandler+0x1bc>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d040      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x194>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a2a      	ldr	r2, [pc, #168]	; (8003d78 <HAL_DMA_IRQHandler+0x1c0>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d03b      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x194>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a28      	ldr	r2, [pc, #160]	; (8003d7c <HAL_DMA_IRQHandler+0x1c4>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d036      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x194>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a27      	ldr	r2, [pc, #156]	; (8003d80 <HAL_DMA_IRQHandler+0x1c8>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d031      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x194>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a25      	ldr	r2, [pc, #148]	; (8003d84 <HAL_DMA_IRQHandler+0x1cc>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d02c      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x194>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a24      	ldr	r2, [pc, #144]	; (8003d88 <HAL_DMA_IRQHandler+0x1d0>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d027      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x194>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a22      	ldr	r2, [pc, #136]	; (8003d8c <HAL_DMA_IRQHandler+0x1d4>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d022      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x194>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a21      	ldr	r2, [pc, #132]	; (8003d90 <HAL_DMA_IRQHandler+0x1d8>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d01d      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x194>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a1f      	ldr	r2, [pc, #124]	; (8003d94 <HAL_DMA_IRQHandler+0x1dc>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d018      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x194>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a1e      	ldr	r2, [pc, #120]	; (8003d98 <HAL_DMA_IRQHandler+0x1e0>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d013      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x194>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a1c      	ldr	r2, [pc, #112]	; (8003d9c <HAL_DMA_IRQHandler+0x1e4>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d00e      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x194>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a1b      	ldr	r2, [pc, #108]	; (8003da0 <HAL_DMA_IRQHandler+0x1e8>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d009      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x194>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a19      	ldr	r2, [pc, #100]	; (8003da4 <HAL_DMA_IRQHandler+0x1ec>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d004      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x194>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a18      	ldr	r2, [pc, #96]	; (8003da8 <HAL_DMA_IRQHandler+0x1f0>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d12f      	bne.n	8003dac <HAL_DMA_IRQHandler+0x1f4>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0304 	and.w	r3, r3, #4
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	bf14      	ite	ne
 8003d5a:	2301      	movne	r3, #1
 8003d5c:	2300      	moveq	r3, #0
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	e02e      	b.n	8003dc0 <HAL_DMA_IRQHandler+0x208>
 8003d62:	bf00      	nop
 8003d64:	24000000 	.word	0x24000000
 8003d68:	1b4e81b5 	.word	0x1b4e81b5
 8003d6c:	40020010 	.word	0x40020010
 8003d70:	40020028 	.word	0x40020028
 8003d74:	40020040 	.word	0x40020040
 8003d78:	40020058 	.word	0x40020058
 8003d7c:	40020070 	.word	0x40020070
 8003d80:	40020088 	.word	0x40020088
 8003d84:	400200a0 	.word	0x400200a0
 8003d88:	400200b8 	.word	0x400200b8
 8003d8c:	40020410 	.word	0x40020410
 8003d90:	40020428 	.word	0x40020428
 8003d94:	40020440 	.word	0x40020440
 8003d98:	40020458 	.word	0x40020458
 8003d9c:	40020470 	.word	0x40020470
 8003da0:	40020488 	.word	0x40020488
 8003da4:	400204a0 	.word	0x400204a0
 8003da8:	400204b8 	.word	0x400204b8
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	bf14      	ite	ne
 8003dba:	2301      	movne	r3, #1
 8003dbc:	2300      	moveq	r3, #0
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d015      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 0204 	bic.w	r2, r2, #4
 8003dd2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd8:	f003 031f 	and.w	r3, r3, #31
 8003ddc:	2208      	movs	r2, #8
 8003dde:	409a      	lsls	r2, r3
 8003de0:	6a3b      	ldr	r3, [r7, #32]
 8003de2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de8:	f043 0201 	orr.w	r2, r3, #1
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df4:	f003 031f 	and.w	r3, r3, #31
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d06e      	beq.n	8003ee4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a69      	ldr	r2, [pc, #420]	; (8003fb0 <HAL_DMA_IRQHandler+0x3f8>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d04a      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x2ee>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a67      	ldr	r2, [pc, #412]	; (8003fb4 <HAL_DMA_IRQHandler+0x3fc>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d045      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x2ee>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a66      	ldr	r2, [pc, #408]	; (8003fb8 <HAL_DMA_IRQHandler+0x400>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d040      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x2ee>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a64      	ldr	r2, [pc, #400]	; (8003fbc <HAL_DMA_IRQHandler+0x404>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d03b      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x2ee>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a63      	ldr	r2, [pc, #396]	; (8003fc0 <HAL_DMA_IRQHandler+0x408>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d036      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x2ee>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a61      	ldr	r2, [pc, #388]	; (8003fc4 <HAL_DMA_IRQHandler+0x40c>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d031      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x2ee>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a60      	ldr	r2, [pc, #384]	; (8003fc8 <HAL_DMA_IRQHandler+0x410>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d02c      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x2ee>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a5e      	ldr	r2, [pc, #376]	; (8003fcc <HAL_DMA_IRQHandler+0x414>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d027      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x2ee>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a5d      	ldr	r2, [pc, #372]	; (8003fd0 <HAL_DMA_IRQHandler+0x418>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d022      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x2ee>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a5b      	ldr	r2, [pc, #364]	; (8003fd4 <HAL_DMA_IRQHandler+0x41c>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d01d      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x2ee>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a5a      	ldr	r2, [pc, #360]	; (8003fd8 <HAL_DMA_IRQHandler+0x420>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d018      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x2ee>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a58      	ldr	r2, [pc, #352]	; (8003fdc <HAL_DMA_IRQHandler+0x424>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d013      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x2ee>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a57      	ldr	r2, [pc, #348]	; (8003fe0 <HAL_DMA_IRQHandler+0x428>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d00e      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x2ee>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a55      	ldr	r2, [pc, #340]	; (8003fe4 <HAL_DMA_IRQHandler+0x42c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d009      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x2ee>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a54      	ldr	r2, [pc, #336]	; (8003fe8 <HAL_DMA_IRQHandler+0x430>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d004      	beq.n	8003ea6 <HAL_DMA_IRQHandler+0x2ee>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a52      	ldr	r2, [pc, #328]	; (8003fec <HAL_DMA_IRQHandler+0x434>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d10a      	bne.n	8003ebc <HAL_DMA_IRQHandler+0x304>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	bf14      	ite	ne
 8003eb4:	2301      	movne	r3, #1
 8003eb6:	2300      	moveq	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	e003      	b.n	8003ec4 <HAL_DMA_IRQHandler+0x30c>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00d      	beq.n	8003ee4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ecc:	f003 031f 	and.w	r3, r3, #31
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	409a      	lsls	r2, r3
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003edc:	f043 0202 	orr.w	r2, r3, #2
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee8:	f003 031f 	and.w	r3, r3, #31
 8003eec:	2204      	movs	r2, #4
 8003eee:	409a      	lsls	r2, r3
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 808f 	beq.w	8004018 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a2c      	ldr	r2, [pc, #176]	; (8003fb0 <HAL_DMA_IRQHandler+0x3f8>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d04a      	beq.n	8003f9a <HAL_DMA_IRQHandler+0x3e2>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a2a      	ldr	r2, [pc, #168]	; (8003fb4 <HAL_DMA_IRQHandler+0x3fc>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d045      	beq.n	8003f9a <HAL_DMA_IRQHandler+0x3e2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a29      	ldr	r2, [pc, #164]	; (8003fb8 <HAL_DMA_IRQHandler+0x400>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d040      	beq.n	8003f9a <HAL_DMA_IRQHandler+0x3e2>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a27      	ldr	r2, [pc, #156]	; (8003fbc <HAL_DMA_IRQHandler+0x404>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d03b      	beq.n	8003f9a <HAL_DMA_IRQHandler+0x3e2>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a26      	ldr	r2, [pc, #152]	; (8003fc0 <HAL_DMA_IRQHandler+0x408>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d036      	beq.n	8003f9a <HAL_DMA_IRQHandler+0x3e2>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a24      	ldr	r2, [pc, #144]	; (8003fc4 <HAL_DMA_IRQHandler+0x40c>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d031      	beq.n	8003f9a <HAL_DMA_IRQHandler+0x3e2>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a23      	ldr	r2, [pc, #140]	; (8003fc8 <HAL_DMA_IRQHandler+0x410>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d02c      	beq.n	8003f9a <HAL_DMA_IRQHandler+0x3e2>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a21      	ldr	r2, [pc, #132]	; (8003fcc <HAL_DMA_IRQHandler+0x414>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d027      	beq.n	8003f9a <HAL_DMA_IRQHandler+0x3e2>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a20      	ldr	r2, [pc, #128]	; (8003fd0 <HAL_DMA_IRQHandler+0x418>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d022      	beq.n	8003f9a <HAL_DMA_IRQHandler+0x3e2>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a1e      	ldr	r2, [pc, #120]	; (8003fd4 <HAL_DMA_IRQHandler+0x41c>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d01d      	beq.n	8003f9a <HAL_DMA_IRQHandler+0x3e2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a1d      	ldr	r2, [pc, #116]	; (8003fd8 <HAL_DMA_IRQHandler+0x420>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d018      	beq.n	8003f9a <HAL_DMA_IRQHandler+0x3e2>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a1b      	ldr	r2, [pc, #108]	; (8003fdc <HAL_DMA_IRQHandler+0x424>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d013      	beq.n	8003f9a <HAL_DMA_IRQHandler+0x3e2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a1a      	ldr	r2, [pc, #104]	; (8003fe0 <HAL_DMA_IRQHandler+0x428>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d00e      	beq.n	8003f9a <HAL_DMA_IRQHandler+0x3e2>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a18      	ldr	r2, [pc, #96]	; (8003fe4 <HAL_DMA_IRQHandler+0x42c>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d009      	beq.n	8003f9a <HAL_DMA_IRQHandler+0x3e2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a17      	ldr	r2, [pc, #92]	; (8003fe8 <HAL_DMA_IRQHandler+0x430>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d004      	beq.n	8003f9a <HAL_DMA_IRQHandler+0x3e2>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a15      	ldr	r2, [pc, #84]	; (8003fec <HAL_DMA_IRQHandler+0x434>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d12a      	bne.n	8003ff0 <HAL_DMA_IRQHandler+0x438>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	bf14      	ite	ne
 8003fa8:	2301      	movne	r3, #1
 8003faa:	2300      	moveq	r3, #0
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	e023      	b.n	8003ff8 <HAL_DMA_IRQHandler+0x440>
 8003fb0:	40020010 	.word	0x40020010
 8003fb4:	40020028 	.word	0x40020028
 8003fb8:	40020040 	.word	0x40020040
 8003fbc:	40020058 	.word	0x40020058
 8003fc0:	40020070 	.word	0x40020070
 8003fc4:	40020088 	.word	0x40020088
 8003fc8:	400200a0 	.word	0x400200a0
 8003fcc:	400200b8 	.word	0x400200b8
 8003fd0:	40020410 	.word	0x40020410
 8003fd4:	40020428 	.word	0x40020428
 8003fd8:	40020440 	.word	0x40020440
 8003fdc:	40020458 	.word	0x40020458
 8003fe0:	40020470 	.word	0x40020470
 8003fe4:	40020488 	.word	0x40020488
 8003fe8:	400204a0 	.word	0x400204a0
 8003fec:	400204b8 	.word	0x400204b8
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00d      	beq.n	8004018 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004000:	f003 031f 	and.w	r3, r3, #31
 8004004:	2204      	movs	r2, #4
 8004006:	409a      	lsls	r2, r3
 8004008:	6a3b      	ldr	r3, [r7, #32]
 800400a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004010:	f043 0204 	orr.w	r2, r3, #4
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800401c:	f003 031f 	and.w	r3, r3, #31
 8004020:	2210      	movs	r2, #16
 8004022:	409a      	lsls	r2, r3
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	4013      	ands	r3, r2
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 80a6 	beq.w	800417a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a85      	ldr	r2, [pc, #532]	; (8004248 <HAL_DMA_IRQHandler+0x690>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d04a      	beq.n	80040ce <HAL_DMA_IRQHandler+0x516>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a83      	ldr	r2, [pc, #524]	; (800424c <HAL_DMA_IRQHandler+0x694>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d045      	beq.n	80040ce <HAL_DMA_IRQHandler+0x516>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a82      	ldr	r2, [pc, #520]	; (8004250 <HAL_DMA_IRQHandler+0x698>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d040      	beq.n	80040ce <HAL_DMA_IRQHandler+0x516>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a80      	ldr	r2, [pc, #512]	; (8004254 <HAL_DMA_IRQHandler+0x69c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d03b      	beq.n	80040ce <HAL_DMA_IRQHandler+0x516>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a7f      	ldr	r2, [pc, #508]	; (8004258 <HAL_DMA_IRQHandler+0x6a0>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d036      	beq.n	80040ce <HAL_DMA_IRQHandler+0x516>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a7d      	ldr	r2, [pc, #500]	; (800425c <HAL_DMA_IRQHandler+0x6a4>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d031      	beq.n	80040ce <HAL_DMA_IRQHandler+0x516>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a7c      	ldr	r2, [pc, #496]	; (8004260 <HAL_DMA_IRQHandler+0x6a8>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d02c      	beq.n	80040ce <HAL_DMA_IRQHandler+0x516>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a7a      	ldr	r2, [pc, #488]	; (8004264 <HAL_DMA_IRQHandler+0x6ac>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d027      	beq.n	80040ce <HAL_DMA_IRQHandler+0x516>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a79      	ldr	r2, [pc, #484]	; (8004268 <HAL_DMA_IRQHandler+0x6b0>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d022      	beq.n	80040ce <HAL_DMA_IRQHandler+0x516>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a77      	ldr	r2, [pc, #476]	; (800426c <HAL_DMA_IRQHandler+0x6b4>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d01d      	beq.n	80040ce <HAL_DMA_IRQHandler+0x516>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a76      	ldr	r2, [pc, #472]	; (8004270 <HAL_DMA_IRQHandler+0x6b8>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d018      	beq.n	80040ce <HAL_DMA_IRQHandler+0x516>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a74      	ldr	r2, [pc, #464]	; (8004274 <HAL_DMA_IRQHandler+0x6bc>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d013      	beq.n	80040ce <HAL_DMA_IRQHandler+0x516>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a73      	ldr	r2, [pc, #460]	; (8004278 <HAL_DMA_IRQHandler+0x6c0>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d00e      	beq.n	80040ce <HAL_DMA_IRQHandler+0x516>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a71      	ldr	r2, [pc, #452]	; (800427c <HAL_DMA_IRQHandler+0x6c4>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d009      	beq.n	80040ce <HAL_DMA_IRQHandler+0x516>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a70      	ldr	r2, [pc, #448]	; (8004280 <HAL_DMA_IRQHandler+0x6c8>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d004      	beq.n	80040ce <HAL_DMA_IRQHandler+0x516>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a6e      	ldr	r2, [pc, #440]	; (8004284 <HAL_DMA_IRQHandler+0x6cc>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d10a      	bne.n	80040e4 <HAL_DMA_IRQHandler+0x52c>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0308 	and.w	r3, r3, #8
 80040d8:	2b00      	cmp	r3, #0
 80040da:	bf14      	ite	ne
 80040dc:	2301      	movne	r3, #1
 80040de:	2300      	moveq	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	e009      	b.n	80040f8 <HAL_DMA_IRQHandler+0x540>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0304 	and.w	r3, r3, #4
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	bf14      	ite	ne
 80040f2:	2301      	movne	r3, #1
 80040f4:	2300      	moveq	r3, #0
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d03e      	beq.n	800417a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004100:	f003 031f 	and.w	r3, r3, #31
 8004104:	2210      	movs	r2, #16
 8004106:	409a      	lsls	r2, r3
 8004108:	6a3b      	ldr	r3, [r7, #32]
 800410a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d018      	beq.n	800414c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d108      	bne.n	800413a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	2b00      	cmp	r3, #0
 800412e:	d024      	beq.n	800417a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	4798      	blx	r3
 8004138:	e01f      	b.n	800417a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800413e:	2b00      	cmp	r3, #0
 8004140:	d01b      	beq.n	800417a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	4798      	blx	r3
 800414a:	e016      	b.n	800417a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004156:	2b00      	cmp	r3, #0
 8004158:	d107      	bne.n	800416a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 0208 	bic.w	r2, r2, #8
 8004168:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800417e:	f003 031f 	and.w	r3, r3, #31
 8004182:	2220      	movs	r2, #32
 8004184:	409a      	lsls	r2, r3
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	4013      	ands	r3, r2
 800418a:	2b00      	cmp	r3, #0
 800418c:	f000 8110 	beq.w	80043b0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a2c      	ldr	r2, [pc, #176]	; (8004248 <HAL_DMA_IRQHandler+0x690>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d04a      	beq.n	8004230 <HAL_DMA_IRQHandler+0x678>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a2b      	ldr	r2, [pc, #172]	; (800424c <HAL_DMA_IRQHandler+0x694>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d045      	beq.n	8004230 <HAL_DMA_IRQHandler+0x678>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a29      	ldr	r2, [pc, #164]	; (8004250 <HAL_DMA_IRQHandler+0x698>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d040      	beq.n	8004230 <HAL_DMA_IRQHandler+0x678>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a28      	ldr	r2, [pc, #160]	; (8004254 <HAL_DMA_IRQHandler+0x69c>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d03b      	beq.n	8004230 <HAL_DMA_IRQHandler+0x678>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a26      	ldr	r2, [pc, #152]	; (8004258 <HAL_DMA_IRQHandler+0x6a0>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d036      	beq.n	8004230 <HAL_DMA_IRQHandler+0x678>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a25      	ldr	r2, [pc, #148]	; (800425c <HAL_DMA_IRQHandler+0x6a4>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d031      	beq.n	8004230 <HAL_DMA_IRQHandler+0x678>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a23      	ldr	r2, [pc, #140]	; (8004260 <HAL_DMA_IRQHandler+0x6a8>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d02c      	beq.n	8004230 <HAL_DMA_IRQHandler+0x678>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a22      	ldr	r2, [pc, #136]	; (8004264 <HAL_DMA_IRQHandler+0x6ac>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d027      	beq.n	8004230 <HAL_DMA_IRQHandler+0x678>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a20      	ldr	r2, [pc, #128]	; (8004268 <HAL_DMA_IRQHandler+0x6b0>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d022      	beq.n	8004230 <HAL_DMA_IRQHandler+0x678>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a1f      	ldr	r2, [pc, #124]	; (800426c <HAL_DMA_IRQHandler+0x6b4>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d01d      	beq.n	8004230 <HAL_DMA_IRQHandler+0x678>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a1d      	ldr	r2, [pc, #116]	; (8004270 <HAL_DMA_IRQHandler+0x6b8>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d018      	beq.n	8004230 <HAL_DMA_IRQHandler+0x678>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a1c      	ldr	r2, [pc, #112]	; (8004274 <HAL_DMA_IRQHandler+0x6bc>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d013      	beq.n	8004230 <HAL_DMA_IRQHandler+0x678>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a1a      	ldr	r2, [pc, #104]	; (8004278 <HAL_DMA_IRQHandler+0x6c0>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d00e      	beq.n	8004230 <HAL_DMA_IRQHandler+0x678>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a19      	ldr	r2, [pc, #100]	; (800427c <HAL_DMA_IRQHandler+0x6c4>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d009      	beq.n	8004230 <HAL_DMA_IRQHandler+0x678>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a17      	ldr	r2, [pc, #92]	; (8004280 <HAL_DMA_IRQHandler+0x6c8>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d004      	beq.n	8004230 <HAL_DMA_IRQHandler+0x678>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a16      	ldr	r2, [pc, #88]	; (8004284 <HAL_DMA_IRQHandler+0x6cc>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d12b      	bne.n	8004288 <HAL_DMA_IRQHandler+0x6d0>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0310 	and.w	r3, r3, #16
 800423a:	2b00      	cmp	r3, #0
 800423c:	bf14      	ite	ne
 800423e:	2301      	movne	r3, #1
 8004240:	2300      	moveq	r3, #0
 8004242:	b2db      	uxtb	r3, r3
 8004244:	e02a      	b.n	800429c <HAL_DMA_IRQHandler+0x6e4>
 8004246:	bf00      	nop
 8004248:	40020010 	.word	0x40020010
 800424c:	40020028 	.word	0x40020028
 8004250:	40020040 	.word	0x40020040
 8004254:	40020058 	.word	0x40020058
 8004258:	40020070 	.word	0x40020070
 800425c:	40020088 	.word	0x40020088
 8004260:	400200a0 	.word	0x400200a0
 8004264:	400200b8 	.word	0x400200b8
 8004268:	40020410 	.word	0x40020410
 800426c:	40020428 	.word	0x40020428
 8004270:	40020440 	.word	0x40020440
 8004274:	40020458 	.word	0x40020458
 8004278:	40020470 	.word	0x40020470
 800427c:	40020488 	.word	0x40020488
 8004280:	400204a0 	.word	0x400204a0
 8004284:	400204b8 	.word	0x400204b8
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b00      	cmp	r3, #0
 8004294:	bf14      	ite	ne
 8004296:	2301      	movne	r3, #1
 8004298:	2300      	moveq	r3, #0
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 8087 	beq.w	80043b0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a6:	f003 031f 	and.w	r3, r3, #31
 80042aa:	2220      	movs	r2, #32
 80042ac:	409a      	lsls	r2, r3
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d139      	bne.n	8004332 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0216 	bic.w	r2, r2, #22
 80042cc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695a      	ldr	r2, [r3, #20]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042dc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d103      	bne.n	80042ee <HAL_DMA_IRQHandler+0x736>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d007      	beq.n	80042fe <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0208 	bic.w	r2, r2, #8
 80042fc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004302:	f003 031f 	and.w	r3, r3, #31
 8004306:	223f      	movs	r2, #63	; 0x3f
 8004308:	409a      	lsls	r2, r3
 800430a:	6a3b      	ldr	r3, [r7, #32]
 800430c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 8382 	beq.w	8004a2c <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	4798      	blx	r3
          }
          return;
 8004330:	e37c      	b.n	8004a2c <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d018      	beq.n	8004372 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d108      	bne.n	8004360 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004352:	2b00      	cmp	r3, #0
 8004354:	d02c      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	4798      	blx	r3
 800435e:	e027      	b.n	80043b0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004364:	2b00      	cmp	r3, #0
 8004366:	d023      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	4798      	blx	r3
 8004370:	e01e      	b.n	80043b0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10f      	bne.n	80043a0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0210 	bic.w	r2, r2, #16
 800438e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d003      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 833e 	beq.w	8004a36 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 8088 	beq.w	80044d8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2204      	movs	r2, #4
 80043cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a8e      	ldr	r2, [pc, #568]	; (8004610 <HAL_DMA_IRQHandler+0xa58>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d04a      	beq.n	8004470 <HAL_DMA_IRQHandler+0x8b8>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a8d      	ldr	r2, [pc, #564]	; (8004614 <HAL_DMA_IRQHandler+0xa5c>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d045      	beq.n	8004470 <HAL_DMA_IRQHandler+0x8b8>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a8b      	ldr	r2, [pc, #556]	; (8004618 <HAL_DMA_IRQHandler+0xa60>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d040      	beq.n	8004470 <HAL_DMA_IRQHandler+0x8b8>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a8a      	ldr	r2, [pc, #552]	; (800461c <HAL_DMA_IRQHandler+0xa64>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d03b      	beq.n	8004470 <HAL_DMA_IRQHandler+0x8b8>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a88      	ldr	r2, [pc, #544]	; (8004620 <HAL_DMA_IRQHandler+0xa68>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d036      	beq.n	8004470 <HAL_DMA_IRQHandler+0x8b8>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a87      	ldr	r2, [pc, #540]	; (8004624 <HAL_DMA_IRQHandler+0xa6c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d031      	beq.n	8004470 <HAL_DMA_IRQHandler+0x8b8>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a85      	ldr	r2, [pc, #532]	; (8004628 <HAL_DMA_IRQHandler+0xa70>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d02c      	beq.n	8004470 <HAL_DMA_IRQHandler+0x8b8>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a84      	ldr	r2, [pc, #528]	; (800462c <HAL_DMA_IRQHandler+0xa74>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d027      	beq.n	8004470 <HAL_DMA_IRQHandler+0x8b8>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a82      	ldr	r2, [pc, #520]	; (8004630 <HAL_DMA_IRQHandler+0xa78>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d022      	beq.n	8004470 <HAL_DMA_IRQHandler+0x8b8>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a81      	ldr	r2, [pc, #516]	; (8004634 <HAL_DMA_IRQHandler+0xa7c>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d01d      	beq.n	8004470 <HAL_DMA_IRQHandler+0x8b8>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a7f      	ldr	r2, [pc, #508]	; (8004638 <HAL_DMA_IRQHandler+0xa80>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d018      	beq.n	8004470 <HAL_DMA_IRQHandler+0x8b8>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a7e      	ldr	r2, [pc, #504]	; (800463c <HAL_DMA_IRQHandler+0xa84>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d013      	beq.n	8004470 <HAL_DMA_IRQHandler+0x8b8>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a7c      	ldr	r2, [pc, #496]	; (8004640 <HAL_DMA_IRQHandler+0xa88>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d00e      	beq.n	8004470 <HAL_DMA_IRQHandler+0x8b8>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a7b      	ldr	r2, [pc, #492]	; (8004644 <HAL_DMA_IRQHandler+0xa8c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d009      	beq.n	8004470 <HAL_DMA_IRQHandler+0x8b8>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a79      	ldr	r2, [pc, #484]	; (8004648 <HAL_DMA_IRQHandler+0xa90>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d004      	beq.n	8004470 <HAL_DMA_IRQHandler+0x8b8>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a78      	ldr	r2, [pc, #480]	; (800464c <HAL_DMA_IRQHandler+0xa94>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d108      	bne.n	8004482 <HAL_DMA_IRQHandler+0x8ca>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0201 	bic.w	r2, r2, #1
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	e007      	b.n	8004492 <HAL_DMA_IRQHandler+0x8da>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0201 	bic.w	r2, r2, #1
 8004490:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	3301      	adds	r3, #1
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800449a:	429a      	cmp	r2, r3
 800449c:	d307      	bcc.n	80044ae <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1f2      	bne.n	8004492 <HAL_DMA_IRQHandler+0x8da>
 80044ac:	e000      	b.n	80044b0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80044ae:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d004      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2203      	movs	r2, #3
 80044ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80044ce:	e003      	b.n	80044d8 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f000 82aa 	beq.w	8004a36 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	4798      	blx	r3
 80044ea:	e2a4      	b.n	8004a36 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a57      	ldr	r2, [pc, #348]	; (8004650 <HAL_DMA_IRQHandler+0xa98>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d04a      	beq.n	800458c <HAL_DMA_IRQHandler+0x9d4>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a56      	ldr	r2, [pc, #344]	; (8004654 <HAL_DMA_IRQHandler+0xa9c>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d045      	beq.n	800458c <HAL_DMA_IRQHandler+0x9d4>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a54      	ldr	r2, [pc, #336]	; (8004658 <HAL_DMA_IRQHandler+0xaa0>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d040      	beq.n	800458c <HAL_DMA_IRQHandler+0x9d4>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a53      	ldr	r2, [pc, #332]	; (800465c <HAL_DMA_IRQHandler+0xaa4>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d03b      	beq.n	800458c <HAL_DMA_IRQHandler+0x9d4>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a51      	ldr	r2, [pc, #324]	; (8004660 <HAL_DMA_IRQHandler+0xaa8>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d036      	beq.n	800458c <HAL_DMA_IRQHandler+0x9d4>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a50      	ldr	r2, [pc, #320]	; (8004664 <HAL_DMA_IRQHandler+0xaac>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d031      	beq.n	800458c <HAL_DMA_IRQHandler+0x9d4>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a4e      	ldr	r2, [pc, #312]	; (8004668 <HAL_DMA_IRQHandler+0xab0>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d02c      	beq.n	800458c <HAL_DMA_IRQHandler+0x9d4>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a4d      	ldr	r2, [pc, #308]	; (800466c <HAL_DMA_IRQHandler+0xab4>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d027      	beq.n	800458c <HAL_DMA_IRQHandler+0x9d4>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a4b      	ldr	r2, [pc, #300]	; (8004670 <HAL_DMA_IRQHandler+0xab8>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d022      	beq.n	800458c <HAL_DMA_IRQHandler+0x9d4>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a4a      	ldr	r2, [pc, #296]	; (8004674 <HAL_DMA_IRQHandler+0xabc>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d01d      	beq.n	800458c <HAL_DMA_IRQHandler+0x9d4>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a48      	ldr	r2, [pc, #288]	; (8004678 <HAL_DMA_IRQHandler+0xac0>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d018      	beq.n	800458c <HAL_DMA_IRQHandler+0x9d4>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a47      	ldr	r2, [pc, #284]	; (800467c <HAL_DMA_IRQHandler+0xac4>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d013      	beq.n	800458c <HAL_DMA_IRQHandler+0x9d4>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a45      	ldr	r2, [pc, #276]	; (8004680 <HAL_DMA_IRQHandler+0xac8>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d00e      	beq.n	800458c <HAL_DMA_IRQHandler+0x9d4>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a44      	ldr	r2, [pc, #272]	; (8004684 <HAL_DMA_IRQHandler+0xacc>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d009      	beq.n	800458c <HAL_DMA_IRQHandler+0x9d4>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a42      	ldr	r2, [pc, #264]	; (8004688 <HAL_DMA_IRQHandler+0xad0>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d004      	beq.n	800458c <HAL_DMA_IRQHandler+0x9d4>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a41      	ldr	r2, [pc, #260]	; (800468c <HAL_DMA_IRQHandler+0xad4>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d101      	bne.n	8004590 <HAL_DMA_IRQHandler+0x9d8>
 800458c:	2301      	movs	r3, #1
 800458e:	e000      	b.n	8004592 <HAL_DMA_IRQHandler+0x9da>
 8004590:	2300      	movs	r3, #0
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 824f 	beq.w	8004a36 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a4:	f003 031f 	and.w	r3, r3, #31
 80045a8:	2204      	movs	r2, #4
 80045aa:	409a      	lsls	r2, r3
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	4013      	ands	r3, r2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f000 80dd 	beq.w	8004770 <HAL_DMA_IRQHandler+0xbb8>
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 80d7 	beq.w	8004770 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c6:	f003 031f 	and.w	r3, r3, #31
 80045ca:	2204      	movs	r2, #4
 80045cc:	409a      	lsls	r2, r3
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d059      	beq.n	8004690 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d109      	bne.n	80045fa <HAL_DMA_IRQHandler+0xa42>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f000 8220 	beq.w	8004a30 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045f8:	e21a      	b.n	8004a30 <HAL_DMA_IRQHandler+0xe78>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 8216 	beq.w	8004a30 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800460c:	e210      	b.n	8004a30 <HAL_DMA_IRQHandler+0xe78>
 800460e:	bf00      	nop
 8004610:	40020010 	.word	0x40020010
 8004614:	40020028 	.word	0x40020028
 8004618:	40020040 	.word	0x40020040
 800461c:	40020058 	.word	0x40020058
 8004620:	40020070 	.word	0x40020070
 8004624:	40020088 	.word	0x40020088
 8004628:	400200a0 	.word	0x400200a0
 800462c:	400200b8 	.word	0x400200b8
 8004630:	40020410 	.word	0x40020410
 8004634:	40020428 	.word	0x40020428
 8004638:	40020440 	.word	0x40020440
 800463c:	40020458 	.word	0x40020458
 8004640:	40020470 	.word	0x40020470
 8004644:	40020488 	.word	0x40020488
 8004648:	400204a0 	.word	0x400204a0
 800464c:	400204b8 	.word	0x400204b8
 8004650:	48022c08 	.word	0x48022c08
 8004654:	48022c1c 	.word	0x48022c1c
 8004658:	48022c30 	.word	0x48022c30
 800465c:	48022c44 	.word	0x48022c44
 8004660:	48022c58 	.word	0x48022c58
 8004664:	48022c6c 	.word	0x48022c6c
 8004668:	48022c80 	.word	0x48022c80
 800466c:	48022c94 	.word	0x48022c94
 8004670:	58025408 	.word	0x58025408
 8004674:	5802541c 	.word	0x5802541c
 8004678:	58025430 	.word	0x58025430
 800467c:	58025444 	.word	0x58025444
 8004680:	58025458 	.word	0x58025458
 8004684:	5802546c 	.word	0x5802546c
 8004688:	58025480 	.word	0x58025480
 800468c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	f003 0320 	and.w	r3, r3, #32
 8004696:	2b00      	cmp	r3, #0
 8004698:	d160      	bne.n	800475c <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a8c      	ldr	r2, [pc, #560]	; (80048d0 <HAL_DMA_IRQHandler+0xd18>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d04a      	beq.n	800473a <HAL_DMA_IRQHandler+0xb82>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a8a      	ldr	r2, [pc, #552]	; (80048d4 <HAL_DMA_IRQHandler+0xd1c>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d045      	beq.n	800473a <HAL_DMA_IRQHandler+0xb82>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a89      	ldr	r2, [pc, #548]	; (80048d8 <HAL_DMA_IRQHandler+0xd20>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d040      	beq.n	800473a <HAL_DMA_IRQHandler+0xb82>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a87      	ldr	r2, [pc, #540]	; (80048dc <HAL_DMA_IRQHandler+0xd24>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d03b      	beq.n	800473a <HAL_DMA_IRQHandler+0xb82>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a86      	ldr	r2, [pc, #536]	; (80048e0 <HAL_DMA_IRQHandler+0xd28>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d036      	beq.n	800473a <HAL_DMA_IRQHandler+0xb82>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a84      	ldr	r2, [pc, #528]	; (80048e4 <HAL_DMA_IRQHandler+0xd2c>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d031      	beq.n	800473a <HAL_DMA_IRQHandler+0xb82>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a83      	ldr	r2, [pc, #524]	; (80048e8 <HAL_DMA_IRQHandler+0xd30>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d02c      	beq.n	800473a <HAL_DMA_IRQHandler+0xb82>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a81      	ldr	r2, [pc, #516]	; (80048ec <HAL_DMA_IRQHandler+0xd34>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d027      	beq.n	800473a <HAL_DMA_IRQHandler+0xb82>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a80      	ldr	r2, [pc, #512]	; (80048f0 <HAL_DMA_IRQHandler+0xd38>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d022      	beq.n	800473a <HAL_DMA_IRQHandler+0xb82>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a7e      	ldr	r2, [pc, #504]	; (80048f4 <HAL_DMA_IRQHandler+0xd3c>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d01d      	beq.n	800473a <HAL_DMA_IRQHandler+0xb82>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a7d      	ldr	r2, [pc, #500]	; (80048f8 <HAL_DMA_IRQHandler+0xd40>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d018      	beq.n	800473a <HAL_DMA_IRQHandler+0xb82>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a7b      	ldr	r2, [pc, #492]	; (80048fc <HAL_DMA_IRQHandler+0xd44>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d013      	beq.n	800473a <HAL_DMA_IRQHandler+0xb82>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a7a      	ldr	r2, [pc, #488]	; (8004900 <HAL_DMA_IRQHandler+0xd48>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d00e      	beq.n	800473a <HAL_DMA_IRQHandler+0xb82>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a78      	ldr	r2, [pc, #480]	; (8004904 <HAL_DMA_IRQHandler+0xd4c>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d009      	beq.n	800473a <HAL_DMA_IRQHandler+0xb82>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a77      	ldr	r2, [pc, #476]	; (8004908 <HAL_DMA_IRQHandler+0xd50>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d004      	beq.n	800473a <HAL_DMA_IRQHandler+0xb82>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a75      	ldr	r2, [pc, #468]	; (800490c <HAL_DMA_IRQHandler+0xd54>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d108      	bne.n	800474c <HAL_DMA_IRQHandler+0xb94>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 0208 	bic.w	r2, r2, #8
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	e007      	b.n	800475c <HAL_DMA_IRQHandler+0xba4>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 0204 	bic.w	r2, r2, #4
 800475a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004760:	2b00      	cmp	r3, #0
 8004762:	f000 8165 	beq.w	8004a30 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800476e:	e15f      	b.n	8004a30 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004774:	f003 031f 	and.w	r3, r3, #31
 8004778:	2202      	movs	r2, #2
 800477a:	409a      	lsls	r2, r3
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	4013      	ands	r3, r2
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 80c5 	beq.w	8004910 <HAL_DMA_IRQHandler+0xd58>
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 80bf 	beq.w	8004910 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004796:	f003 031f 	and.w	r3, r3, #31
 800479a:	2202      	movs	r2, #2
 800479c:	409a      	lsls	r2, r3
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d018      	beq.n	80047de <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d109      	bne.n	80047ca <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f000 813a 	beq.w	8004a34 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047c8:	e134      	b.n	8004a34 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f000 8130 	beq.w	8004a34 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047dc:	e12a      	b.n	8004a34 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	f003 0320 	and.w	r3, r3, #32
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d168      	bne.n	80048ba <HAL_DMA_IRQHandler+0xd02>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a38      	ldr	r2, [pc, #224]	; (80048d0 <HAL_DMA_IRQHandler+0xd18>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d04a      	beq.n	8004888 <HAL_DMA_IRQHandler+0xcd0>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a37      	ldr	r2, [pc, #220]	; (80048d4 <HAL_DMA_IRQHandler+0xd1c>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d045      	beq.n	8004888 <HAL_DMA_IRQHandler+0xcd0>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a35      	ldr	r2, [pc, #212]	; (80048d8 <HAL_DMA_IRQHandler+0xd20>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d040      	beq.n	8004888 <HAL_DMA_IRQHandler+0xcd0>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a34      	ldr	r2, [pc, #208]	; (80048dc <HAL_DMA_IRQHandler+0xd24>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d03b      	beq.n	8004888 <HAL_DMA_IRQHandler+0xcd0>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a32      	ldr	r2, [pc, #200]	; (80048e0 <HAL_DMA_IRQHandler+0xd28>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d036      	beq.n	8004888 <HAL_DMA_IRQHandler+0xcd0>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a31      	ldr	r2, [pc, #196]	; (80048e4 <HAL_DMA_IRQHandler+0xd2c>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d031      	beq.n	8004888 <HAL_DMA_IRQHandler+0xcd0>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a2f      	ldr	r2, [pc, #188]	; (80048e8 <HAL_DMA_IRQHandler+0xd30>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d02c      	beq.n	8004888 <HAL_DMA_IRQHandler+0xcd0>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a2e      	ldr	r2, [pc, #184]	; (80048ec <HAL_DMA_IRQHandler+0xd34>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d027      	beq.n	8004888 <HAL_DMA_IRQHandler+0xcd0>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a2c      	ldr	r2, [pc, #176]	; (80048f0 <HAL_DMA_IRQHandler+0xd38>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d022      	beq.n	8004888 <HAL_DMA_IRQHandler+0xcd0>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a2b      	ldr	r2, [pc, #172]	; (80048f4 <HAL_DMA_IRQHandler+0xd3c>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d01d      	beq.n	8004888 <HAL_DMA_IRQHandler+0xcd0>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a29      	ldr	r2, [pc, #164]	; (80048f8 <HAL_DMA_IRQHandler+0xd40>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d018      	beq.n	8004888 <HAL_DMA_IRQHandler+0xcd0>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a28      	ldr	r2, [pc, #160]	; (80048fc <HAL_DMA_IRQHandler+0xd44>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d013      	beq.n	8004888 <HAL_DMA_IRQHandler+0xcd0>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a26      	ldr	r2, [pc, #152]	; (8004900 <HAL_DMA_IRQHandler+0xd48>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d00e      	beq.n	8004888 <HAL_DMA_IRQHandler+0xcd0>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a25      	ldr	r2, [pc, #148]	; (8004904 <HAL_DMA_IRQHandler+0xd4c>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d009      	beq.n	8004888 <HAL_DMA_IRQHandler+0xcd0>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a23      	ldr	r2, [pc, #140]	; (8004908 <HAL_DMA_IRQHandler+0xd50>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d004      	beq.n	8004888 <HAL_DMA_IRQHandler+0xcd0>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a22      	ldr	r2, [pc, #136]	; (800490c <HAL_DMA_IRQHandler+0xd54>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d108      	bne.n	800489a <HAL_DMA_IRQHandler+0xce2>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f022 0214 	bic.w	r2, r2, #20
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	e007      	b.n	80048aa <HAL_DMA_IRQHandler+0xcf2>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 020a 	bic.w	r2, r2, #10
 80048a8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 80b8 	beq.w	8004a34 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048cc:	e0b2      	b.n	8004a34 <HAL_DMA_IRQHandler+0xe7c>
 80048ce:	bf00      	nop
 80048d0:	40020010 	.word	0x40020010
 80048d4:	40020028 	.word	0x40020028
 80048d8:	40020040 	.word	0x40020040
 80048dc:	40020058 	.word	0x40020058
 80048e0:	40020070 	.word	0x40020070
 80048e4:	40020088 	.word	0x40020088
 80048e8:	400200a0 	.word	0x400200a0
 80048ec:	400200b8 	.word	0x400200b8
 80048f0:	40020410 	.word	0x40020410
 80048f4:	40020428 	.word	0x40020428
 80048f8:	40020440 	.word	0x40020440
 80048fc:	40020458 	.word	0x40020458
 8004900:	40020470 	.word	0x40020470
 8004904:	40020488 	.word	0x40020488
 8004908:	400204a0 	.word	0x400204a0
 800490c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004914:	f003 031f 	and.w	r3, r3, #31
 8004918:	2208      	movs	r2, #8
 800491a:	409a      	lsls	r2, r3
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	4013      	ands	r3, r2
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 8088 	beq.w	8004a36 <HAL_DMA_IRQHandler+0xe7e>
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	f003 0308 	and.w	r3, r3, #8
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 8082 	beq.w	8004a36 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a41      	ldr	r2, [pc, #260]	; (8004a3c <HAL_DMA_IRQHandler+0xe84>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d04a      	beq.n	80049d2 <HAL_DMA_IRQHandler+0xe1a>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a3f      	ldr	r2, [pc, #252]	; (8004a40 <HAL_DMA_IRQHandler+0xe88>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d045      	beq.n	80049d2 <HAL_DMA_IRQHandler+0xe1a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a3e      	ldr	r2, [pc, #248]	; (8004a44 <HAL_DMA_IRQHandler+0xe8c>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d040      	beq.n	80049d2 <HAL_DMA_IRQHandler+0xe1a>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a3c      	ldr	r2, [pc, #240]	; (8004a48 <HAL_DMA_IRQHandler+0xe90>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d03b      	beq.n	80049d2 <HAL_DMA_IRQHandler+0xe1a>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a3b      	ldr	r2, [pc, #236]	; (8004a4c <HAL_DMA_IRQHandler+0xe94>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d036      	beq.n	80049d2 <HAL_DMA_IRQHandler+0xe1a>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a39      	ldr	r2, [pc, #228]	; (8004a50 <HAL_DMA_IRQHandler+0xe98>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d031      	beq.n	80049d2 <HAL_DMA_IRQHandler+0xe1a>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a38      	ldr	r2, [pc, #224]	; (8004a54 <HAL_DMA_IRQHandler+0xe9c>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d02c      	beq.n	80049d2 <HAL_DMA_IRQHandler+0xe1a>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a36      	ldr	r2, [pc, #216]	; (8004a58 <HAL_DMA_IRQHandler+0xea0>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d027      	beq.n	80049d2 <HAL_DMA_IRQHandler+0xe1a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a35      	ldr	r2, [pc, #212]	; (8004a5c <HAL_DMA_IRQHandler+0xea4>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d022      	beq.n	80049d2 <HAL_DMA_IRQHandler+0xe1a>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a33      	ldr	r2, [pc, #204]	; (8004a60 <HAL_DMA_IRQHandler+0xea8>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d01d      	beq.n	80049d2 <HAL_DMA_IRQHandler+0xe1a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a32      	ldr	r2, [pc, #200]	; (8004a64 <HAL_DMA_IRQHandler+0xeac>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d018      	beq.n	80049d2 <HAL_DMA_IRQHandler+0xe1a>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a30      	ldr	r2, [pc, #192]	; (8004a68 <HAL_DMA_IRQHandler+0xeb0>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d013      	beq.n	80049d2 <HAL_DMA_IRQHandler+0xe1a>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a2f      	ldr	r2, [pc, #188]	; (8004a6c <HAL_DMA_IRQHandler+0xeb4>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d00e      	beq.n	80049d2 <HAL_DMA_IRQHandler+0xe1a>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a2d      	ldr	r2, [pc, #180]	; (8004a70 <HAL_DMA_IRQHandler+0xeb8>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d009      	beq.n	80049d2 <HAL_DMA_IRQHandler+0xe1a>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a2c      	ldr	r2, [pc, #176]	; (8004a74 <HAL_DMA_IRQHandler+0xebc>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d004      	beq.n	80049d2 <HAL_DMA_IRQHandler+0xe1a>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a2a      	ldr	r2, [pc, #168]	; (8004a78 <HAL_DMA_IRQHandler+0xec0>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d108      	bne.n	80049e4 <HAL_DMA_IRQHandler+0xe2c>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f022 021c 	bic.w	r2, r2, #28
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	e007      	b.n	80049f4 <HAL_DMA_IRQHandler+0xe3c>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 020e 	bic.w	r2, r2, #14
 80049f2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f8:	f003 031f 	and.w	r3, r3, #31
 80049fc:	2201      	movs	r2, #1
 80049fe:	409a      	lsls	r2, r3
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d009      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	4798      	blx	r3
 8004a2a:	e004      	b.n	8004a36 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004a2c:	bf00      	nop
 8004a2e:	e002      	b.n	8004a36 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a30:	bf00      	nop
 8004a32:	e000      	b.n	8004a36 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a34:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004a36:	3728      	adds	r7, #40	; 0x28
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	40020010 	.word	0x40020010
 8004a40:	40020028 	.word	0x40020028
 8004a44:	40020040 	.word	0x40020040
 8004a48:	40020058 	.word	0x40020058
 8004a4c:	40020070 	.word	0x40020070
 8004a50:	40020088 	.word	0x40020088
 8004a54:	400200a0 	.word	0x400200a0
 8004a58:	400200b8 	.word	0x400200b8
 8004a5c:	40020410 	.word	0x40020410
 8004a60:	40020428 	.word	0x40020428
 8004a64:	40020440 	.word	0x40020440
 8004a68:	40020458 	.word	0x40020458
 8004a6c:	40020470 	.word	0x40020470
 8004a70:	40020488 	.word	0x40020488
 8004a74:	400204a0 	.word	0x400204a0
 8004a78:	400204b8 	.word	0x400204b8

08004a7c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
 8004a88:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a8e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a94:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a84      	ldr	r2, [pc, #528]	; (8004cac <DMA_SetConfig+0x230>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d072      	beq.n	8004b86 <DMA_SetConfig+0x10a>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a82      	ldr	r2, [pc, #520]	; (8004cb0 <DMA_SetConfig+0x234>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d06d      	beq.n	8004b86 <DMA_SetConfig+0x10a>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a81      	ldr	r2, [pc, #516]	; (8004cb4 <DMA_SetConfig+0x238>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d068      	beq.n	8004b86 <DMA_SetConfig+0x10a>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a7f      	ldr	r2, [pc, #508]	; (8004cb8 <DMA_SetConfig+0x23c>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d063      	beq.n	8004b86 <DMA_SetConfig+0x10a>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a7e      	ldr	r2, [pc, #504]	; (8004cbc <DMA_SetConfig+0x240>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d05e      	beq.n	8004b86 <DMA_SetConfig+0x10a>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a7c      	ldr	r2, [pc, #496]	; (8004cc0 <DMA_SetConfig+0x244>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d059      	beq.n	8004b86 <DMA_SetConfig+0x10a>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a7b      	ldr	r2, [pc, #492]	; (8004cc4 <DMA_SetConfig+0x248>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d054      	beq.n	8004b86 <DMA_SetConfig+0x10a>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a79      	ldr	r2, [pc, #484]	; (8004cc8 <DMA_SetConfig+0x24c>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d04f      	beq.n	8004b86 <DMA_SetConfig+0x10a>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a78      	ldr	r2, [pc, #480]	; (8004ccc <DMA_SetConfig+0x250>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d04a      	beq.n	8004b86 <DMA_SetConfig+0x10a>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a76      	ldr	r2, [pc, #472]	; (8004cd0 <DMA_SetConfig+0x254>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d045      	beq.n	8004b86 <DMA_SetConfig+0x10a>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a75      	ldr	r2, [pc, #468]	; (8004cd4 <DMA_SetConfig+0x258>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d040      	beq.n	8004b86 <DMA_SetConfig+0x10a>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a73      	ldr	r2, [pc, #460]	; (8004cd8 <DMA_SetConfig+0x25c>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d03b      	beq.n	8004b86 <DMA_SetConfig+0x10a>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a72      	ldr	r2, [pc, #456]	; (8004cdc <DMA_SetConfig+0x260>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d036      	beq.n	8004b86 <DMA_SetConfig+0x10a>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a70      	ldr	r2, [pc, #448]	; (8004ce0 <DMA_SetConfig+0x264>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d031      	beq.n	8004b86 <DMA_SetConfig+0x10a>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a6f      	ldr	r2, [pc, #444]	; (8004ce4 <DMA_SetConfig+0x268>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d02c      	beq.n	8004b86 <DMA_SetConfig+0x10a>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a6d      	ldr	r2, [pc, #436]	; (8004ce8 <DMA_SetConfig+0x26c>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d027      	beq.n	8004b86 <DMA_SetConfig+0x10a>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a6c      	ldr	r2, [pc, #432]	; (8004cec <DMA_SetConfig+0x270>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d022      	beq.n	8004b86 <DMA_SetConfig+0x10a>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a6a      	ldr	r2, [pc, #424]	; (8004cf0 <DMA_SetConfig+0x274>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d01d      	beq.n	8004b86 <DMA_SetConfig+0x10a>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a69      	ldr	r2, [pc, #420]	; (8004cf4 <DMA_SetConfig+0x278>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d018      	beq.n	8004b86 <DMA_SetConfig+0x10a>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a67      	ldr	r2, [pc, #412]	; (8004cf8 <DMA_SetConfig+0x27c>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d013      	beq.n	8004b86 <DMA_SetConfig+0x10a>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a66      	ldr	r2, [pc, #408]	; (8004cfc <DMA_SetConfig+0x280>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d00e      	beq.n	8004b86 <DMA_SetConfig+0x10a>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a64      	ldr	r2, [pc, #400]	; (8004d00 <DMA_SetConfig+0x284>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d009      	beq.n	8004b86 <DMA_SetConfig+0x10a>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a63      	ldr	r2, [pc, #396]	; (8004d04 <DMA_SetConfig+0x288>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d004      	beq.n	8004b86 <DMA_SetConfig+0x10a>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a61      	ldr	r2, [pc, #388]	; (8004d08 <DMA_SetConfig+0x28c>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d101      	bne.n	8004b8a <DMA_SetConfig+0x10e>
 8004b86:	2301      	movs	r3, #1
 8004b88:	e000      	b.n	8004b8c <DMA_SetConfig+0x110>
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00d      	beq.n	8004bac <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004b98:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d004      	beq.n	8004bac <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004baa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a3e      	ldr	r2, [pc, #248]	; (8004cac <DMA_SetConfig+0x230>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d04a      	beq.n	8004c4c <DMA_SetConfig+0x1d0>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a3d      	ldr	r2, [pc, #244]	; (8004cb0 <DMA_SetConfig+0x234>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d045      	beq.n	8004c4c <DMA_SetConfig+0x1d0>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a3b      	ldr	r2, [pc, #236]	; (8004cb4 <DMA_SetConfig+0x238>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d040      	beq.n	8004c4c <DMA_SetConfig+0x1d0>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a3a      	ldr	r2, [pc, #232]	; (8004cb8 <DMA_SetConfig+0x23c>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d03b      	beq.n	8004c4c <DMA_SetConfig+0x1d0>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a38      	ldr	r2, [pc, #224]	; (8004cbc <DMA_SetConfig+0x240>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d036      	beq.n	8004c4c <DMA_SetConfig+0x1d0>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a37      	ldr	r2, [pc, #220]	; (8004cc0 <DMA_SetConfig+0x244>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d031      	beq.n	8004c4c <DMA_SetConfig+0x1d0>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a35      	ldr	r2, [pc, #212]	; (8004cc4 <DMA_SetConfig+0x248>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d02c      	beq.n	8004c4c <DMA_SetConfig+0x1d0>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a34      	ldr	r2, [pc, #208]	; (8004cc8 <DMA_SetConfig+0x24c>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d027      	beq.n	8004c4c <DMA_SetConfig+0x1d0>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a32      	ldr	r2, [pc, #200]	; (8004ccc <DMA_SetConfig+0x250>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d022      	beq.n	8004c4c <DMA_SetConfig+0x1d0>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a31      	ldr	r2, [pc, #196]	; (8004cd0 <DMA_SetConfig+0x254>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d01d      	beq.n	8004c4c <DMA_SetConfig+0x1d0>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a2f      	ldr	r2, [pc, #188]	; (8004cd4 <DMA_SetConfig+0x258>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d018      	beq.n	8004c4c <DMA_SetConfig+0x1d0>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a2e      	ldr	r2, [pc, #184]	; (8004cd8 <DMA_SetConfig+0x25c>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d013      	beq.n	8004c4c <DMA_SetConfig+0x1d0>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a2c      	ldr	r2, [pc, #176]	; (8004cdc <DMA_SetConfig+0x260>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d00e      	beq.n	8004c4c <DMA_SetConfig+0x1d0>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a2b      	ldr	r2, [pc, #172]	; (8004ce0 <DMA_SetConfig+0x264>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d009      	beq.n	8004c4c <DMA_SetConfig+0x1d0>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a29      	ldr	r2, [pc, #164]	; (8004ce4 <DMA_SetConfig+0x268>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d004      	beq.n	8004c4c <DMA_SetConfig+0x1d0>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a28      	ldr	r2, [pc, #160]	; (8004ce8 <DMA_SetConfig+0x26c>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d101      	bne.n	8004c50 <DMA_SetConfig+0x1d4>
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e000      	b.n	8004c52 <DMA_SetConfig+0x1d6>
 8004c50:	2300      	movs	r3, #0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d05a      	beq.n	8004d0c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c5a:	f003 031f 	and.w	r3, r3, #31
 8004c5e:	223f      	movs	r2, #63	; 0x3f
 8004c60:	409a      	lsls	r2, r3
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c74:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	2b40      	cmp	r3, #64	; 0x40
 8004c84:	d108      	bne.n	8004c98 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004c96:	e0af      	b.n	8004df8 <DMA_SetConfig+0x37c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	60da      	str	r2, [r3, #12]
}
 8004ca8:	e0a6      	b.n	8004df8 <DMA_SetConfig+0x37c>
 8004caa:	bf00      	nop
 8004cac:	40020010 	.word	0x40020010
 8004cb0:	40020028 	.word	0x40020028
 8004cb4:	40020040 	.word	0x40020040
 8004cb8:	40020058 	.word	0x40020058
 8004cbc:	40020070 	.word	0x40020070
 8004cc0:	40020088 	.word	0x40020088
 8004cc4:	400200a0 	.word	0x400200a0
 8004cc8:	400200b8 	.word	0x400200b8
 8004ccc:	40020410 	.word	0x40020410
 8004cd0:	40020428 	.word	0x40020428
 8004cd4:	40020440 	.word	0x40020440
 8004cd8:	40020458 	.word	0x40020458
 8004cdc:	40020470 	.word	0x40020470
 8004ce0:	40020488 	.word	0x40020488
 8004ce4:	400204a0 	.word	0x400204a0
 8004ce8:	400204b8 	.word	0x400204b8
 8004cec:	58025408 	.word	0x58025408
 8004cf0:	5802541c 	.word	0x5802541c
 8004cf4:	58025430 	.word	0x58025430
 8004cf8:	58025444 	.word	0x58025444
 8004cfc:	58025458 	.word	0x58025458
 8004d00:	5802546c 	.word	0x5802546c
 8004d04:	58025480 	.word	0x58025480
 8004d08:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a3c      	ldr	r2, [pc, #240]	; (8004e04 <DMA_SetConfig+0x388>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d04a      	beq.n	8004dac <DMA_SetConfig+0x330>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a3b      	ldr	r2, [pc, #236]	; (8004e08 <DMA_SetConfig+0x38c>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d045      	beq.n	8004dac <DMA_SetConfig+0x330>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a39      	ldr	r2, [pc, #228]	; (8004e0c <DMA_SetConfig+0x390>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d040      	beq.n	8004dac <DMA_SetConfig+0x330>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a38      	ldr	r2, [pc, #224]	; (8004e10 <DMA_SetConfig+0x394>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d03b      	beq.n	8004dac <DMA_SetConfig+0x330>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a36      	ldr	r2, [pc, #216]	; (8004e14 <DMA_SetConfig+0x398>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d036      	beq.n	8004dac <DMA_SetConfig+0x330>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a35      	ldr	r2, [pc, #212]	; (8004e18 <DMA_SetConfig+0x39c>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d031      	beq.n	8004dac <DMA_SetConfig+0x330>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a33      	ldr	r2, [pc, #204]	; (8004e1c <DMA_SetConfig+0x3a0>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d02c      	beq.n	8004dac <DMA_SetConfig+0x330>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a32      	ldr	r2, [pc, #200]	; (8004e20 <DMA_SetConfig+0x3a4>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d027      	beq.n	8004dac <DMA_SetConfig+0x330>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a30      	ldr	r2, [pc, #192]	; (8004e24 <DMA_SetConfig+0x3a8>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d022      	beq.n	8004dac <DMA_SetConfig+0x330>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a2f      	ldr	r2, [pc, #188]	; (8004e28 <DMA_SetConfig+0x3ac>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d01d      	beq.n	8004dac <DMA_SetConfig+0x330>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a2d      	ldr	r2, [pc, #180]	; (8004e2c <DMA_SetConfig+0x3b0>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d018      	beq.n	8004dac <DMA_SetConfig+0x330>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a2c      	ldr	r2, [pc, #176]	; (8004e30 <DMA_SetConfig+0x3b4>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d013      	beq.n	8004dac <DMA_SetConfig+0x330>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a2a      	ldr	r2, [pc, #168]	; (8004e34 <DMA_SetConfig+0x3b8>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d00e      	beq.n	8004dac <DMA_SetConfig+0x330>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a29      	ldr	r2, [pc, #164]	; (8004e38 <DMA_SetConfig+0x3bc>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d009      	beq.n	8004dac <DMA_SetConfig+0x330>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a27      	ldr	r2, [pc, #156]	; (8004e3c <DMA_SetConfig+0x3c0>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d004      	beq.n	8004dac <DMA_SetConfig+0x330>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a26      	ldr	r2, [pc, #152]	; (8004e40 <DMA_SetConfig+0x3c4>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d101      	bne.n	8004db0 <DMA_SetConfig+0x334>
 8004dac:	2301      	movs	r3, #1
 8004dae:	e000      	b.n	8004db2 <DMA_SetConfig+0x336>
 8004db0:	2300      	movs	r3, #0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d020      	beq.n	8004df8 <DMA_SetConfig+0x37c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dba:	f003 031f 	and.w	r3, r3, #31
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	409a      	lsls	r2, r3
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	2b40      	cmp	r3, #64	; 0x40
 8004dd4:	d108      	bne.n	8004de8 <DMA_SetConfig+0x36c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	60da      	str	r2, [r3, #12]
}
 8004de6:	e007      	b.n	8004df8 <DMA_SetConfig+0x37c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	60da      	str	r2, [r3, #12]
}
 8004df8:	bf00      	nop
 8004dfa:	371c      	adds	r7, #28
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	48022c08 	.word	0x48022c08
 8004e08:	48022c1c 	.word	0x48022c1c
 8004e0c:	48022c30 	.word	0x48022c30
 8004e10:	48022c44 	.word	0x48022c44
 8004e14:	48022c58 	.word	0x48022c58
 8004e18:	48022c6c 	.word	0x48022c6c
 8004e1c:	48022c80 	.word	0x48022c80
 8004e20:	48022c94 	.word	0x48022c94
 8004e24:	58025408 	.word	0x58025408
 8004e28:	5802541c 	.word	0x5802541c
 8004e2c:	58025430 	.word	0x58025430
 8004e30:	58025444 	.word	0x58025444
 8004e34:	58025458 	.word	0x58025458
 8004e38:	5802546c 	.word	0x5802546c
 8004e3c:	58025480 	.word	0x58025480
 8004e40:	58025494 	.word	0x58025494

08004e44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a42      	ldr	r2, [pc, #264]	; (8004f5c <DMA_CalcBaseAndBitshift+0x118>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d04a      	beq.n	8004eec <DMA_CalcBaseAndBitshift+0xa8>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a41      	ldr	r2, [pc, #260]	; (8004f60 <DMA_CalcBaseAndBitshift+0x11c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d045      	beq.n	8004eec <DMA_CalcBaseAndBitshift+0xa8>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a3f      	ldr	r2, [pc, #252]	; (8004f64 <DMA_CalcBaseAndBitshift+0x120>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d040      	beq.n	8004eec <DMA_CalcBaseAndBitshift+0xa8>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a3e      	ldr	r2, [pc, #248]	; (8004f68 <DMA_CalcBaseAndBitshift+0x124>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d03b      	beq.n	8004eec <DMA_CalcBaseAndBitshift+0xa8>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a3c      	ldr	r2, [pc, #240]	; (8004f6c <DMA_CalcBaseAndBitshift+0x128>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d036      	beq.n	8004eec <DMA_CalcBaseAndBitshift+0xa8>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a3b      	ldr	r2, [pc, #236]	; (8004f70 <DMA_CalcBaseAndBitshift+0x12c>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d031      	beq.n	8004eec <DMA_CalcBaseAndBitshift+0xa8>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a39      	ldr	r2, [pc, #228]	; (8004f74 <DMA_CalcBaseAndBitshift+0x130>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d02c      	beq.n	8004eec <DMA_CalcBaseAndBitshift+0xa8>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a38      	ldr	r2, [pc, #224]	; (8004f78 <DMA_CalcBaseAndBitshift+0x134>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d027      	beq.n	8004eec <DMA_CalcBaseAndBitshift+0xa8>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a36      	ldr	r2, [pc, #216]	; (8004f7c <DMA_CalcBaseAndBitshift+0x138>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d022      	beq.n	8004eec <DMA_CalcBaseAndBitshift+0xa8>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a35      	ldr	r2, [pc, #212]	; (8004f80 <DMA_CalcBaseAndBitshift+0x13c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d01d      	beq.n	8004eec <DMA_CalcBaseAndBitshift+0xa8>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a33      	ldr	r2, [pc, #204]	; (8004f84 <DMA_CalcBaseAndBitshift+0x140>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d018      	beq.n	8004eec <DMA_CalcBaseAndBitshift+0xa8>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a32      	ldr	r2, [pc, #200]	; (8004f88 <DMA_CalcBaseAndBitshift+0x144>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d013      	beq.n	8004eec <DMA_CalcBaseAndBitshift+0xa8>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a30      	ldr	r2, [pc, #192]	; (8004f8c <DMA_CalcBaseAndBitshift+0x148>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d00e      	beq.n	8004eec <DMA_CalcBaseAndBitshift+0xa8>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a2f      	ldr	r2, [pc, #188]	; (8004f90 <DMA_CalcBaseAndBitshift+0x14c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d009      	beq.n	8004eec <DMA_CalcBaseAndBitshift+0xa8>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a2d      	ldr	r2, [pc, #180]	; (8004f94 <DMA_CalcBaseAndBitshift+0x150>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d004      	beq.n	8004eec <DMA_CalcBaseAndBitshift+0xa8>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a2c      	ldr	r2, [pc, #176]	; (8004f98 <DMA_CalcBaseAndBitshift+0x154>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d101      	bne.n	8004ef0 <DMA_CalcBaseAndBitshift+0xac>
 8004eec:	2301      	movs	r3, #1
 8004eee:	e000      	b.n	8004ef2 <DMA_CalcBaseAndBitshift+0xae>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d024      	beq.n	8004f40 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	3b10      	subs	r3, #16
 8004efe:	4a27      	ldr	r2, [pc, #156]	; (8004f9c <DMA_CalcBaseAndBitshift+0x158>)
 8004f00:	fba2 2303 	umull	r2, r3, r2, r3
 8004f04:	091b      	lsrs	r3, r3, #4
 8004f06:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f003 0307 	and.w	r3, r3, #7
 8004f0e:	4a24      	ldr	r2, [pc, #144]	; (8004fa0 <DMA_CalcBaseAndBitshift+0x15c>)
 8004f10:	5cd3      	ldrb	r3, [r2, r3]
 8004f12:	461a      	mov	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2b03      	cmp	r3, #3
 8004f1c:	d908      	bls.n	8004f30 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	461a      	mov	r2, r3
 8004f24:	4b1f      	ldr	r3, [pc, #124]	; (8004fa4 <DMA_CalcBaseAndBitshift+0x160>)
 8004f26:	4013      	ands	r3, r2
 8004f28:	1d1a      	adds	r2, r3, #4
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	659a      	str	r2, [r3, #88]	; 0x58
 8004f2e:	e00d      	b.n	8004f4c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	461a      	mov	r2, r3
 8004f36:	4b1b      	ldr	r3, [pc, #108]	; (8004fa4 <DMA_CalcBaseAndBitshift+0x160>)
 8004f38:	4013      	ands	r3, r2
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	6593      	str	r3, [r2, #88]	; 0x58
 8004f3e:	e005      	b.n	8004f4c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3714      	adds	r7, #20
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	40020010 	.word	0x40020010
 8004f60:	40020028 	.word	0x40020028
 8004f64:	40020040 	.word	0x40020040
 8004f68:	40020058 	.word	0x40020058
 8004f6c:	40020070 	.word	0x40020070
 8004f70:	40020088 	.word	0x40020088
 8004f74:	400200a0 	.word	0x400200a0
 8004f78:	400200b8 	.word	0x400200b8
 8004f7c:	40020410 	.word	0x40020410
 8004f80:	40020428 	.word	0x40020428
 8004f84:	40020440 	.word	0x40020440
 8004f88:	40020458 	.word	0x40020458
 8004f8c:	40020470 	.word	0x40020470
 8004f90:	40020488 	.word	0x40020488
 8004f94:	400204a0 	.word	0x400204a0
 8004f98:	400204b8 	.word	0x400204b8
 8004f9c:	aaaaaaab 	.word	0xaaaaaaab
 8004fa0:	0800b118 	.word	0x0800b118
 8004fa4:	fffffc00 	.word	0xfffffc00

08004fa8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d120      	bne.n	8004ffe <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc0:	2b03      	cmp	r3, #3
 8004fc2:	d858      	bhi.n	8005076 <DMA_CheckFifoParam+0xce>
 8004fc4:	a201      	add	r2, pc, #4	; (adr r2, 8004fcc <DMA_CheckFifoParam+0x24>)
 8004fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fca:	bf00      	nop
 8004fcc:	08004fdd 	.word	0x08004fdd
 8004fd0:	08004fef 	.word	0x08004fef
 8004fd4:	08004fdd 	.word	0x08004fdd
 8004fd8:	08005077 	.word	0x08005077
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d048      	beq.n	800507a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004fec:	e045      	b.n	800507a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ff6:	d142      	bne.n	800507e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ffc:	e03f      	b.n	800507e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005006:	d123      	bne.n	8005050 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500c:	2b03      	cmp	r3, #3
 800500e:	d838      	bhi.n	8005082 <DMA_CheckFifoParam+0xda>
 8005010:	a201      	add	r2, pc, #4	; (adr r2, 8005018 <DMA_CheckFifoParam+0x70>)
 8005012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005016:	bf00      	nop
 8005018:	08005029 	.word	0x08005029
 800501c:	0800502f 	.word	0x0800502f
 8005020:	08005029 	.word	0x08005029
 8005024:	08005041 	.word	0x08005041
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	73fb      	strb	r3, [r7, #15]
        break;
 800502c:	e030      	b.n	8005090 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005032:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d025      	beq.n	8005086 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800503e:	e022      	b.n	8005086 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005044:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005048:	d11f      	bne.n	800508a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800504e:	e01c      	b.n	800508a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005054:	2b02      	cmp	r3, #2
 8005056:	d902      	bls.n	800505e <DMA_CheckFifoParam+0xb6>
 8005058:	2b03      	cmp	r3, #3
 800505a:	d003      	beq.n	8005064 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800505c:	e018      	b.n	8005090 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	73fb      	strb	r3, [r7, #15]
        break;
 8005062:	e015      	b.n	8005090 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005068:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00e      	beq.n	800508e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	73fb      	strb	r3, [r7, #15]
    break;
 8005074:	e00b      	b.n	800508e <DMA_CheckFifoParam+0xe6>
        break;
 8005076:	bf00      	nop
 8005078:	e00a      	b.n	8005090 <DMA_CheckFifoParam+0xe8>
        break;
 800507a:	bf00      	nop
 800507c:	e008      	b.n	8005090 <DMA_CheckFifoParam+0xe8>
        break;
 800507e:	bf00      	nop
 8005080:	e006      	b.n	8005090 <DMA_CheckFifoParam+0xe8>
        break;
 8005082:	bf00      	nop
 8005084:	e004      	b.n	8005090 <DMA_CheckFifoParam+0xe8>
        break;
 8005086:	bf00      	nop
 8005088:	e002      	b.n	8005090 <DMA_CheckFifoParam+0xe8>
        break;
 800508a:	bf00      	nop
 800508c:	e000      	b.n	8005090 <DMA_CheckFifoParam+0xe8>
    break;
 800508e:	bf00      	nop
    }
  }

  return status;
 8005090:	7bfb      	ldrb	r3, [r7, #15]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3714      	adds	r7, #20
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop

080050a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a38      	ldr	r2, [pc, #224]	; (8005194 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d022      	beq.n	80050fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a36      	ldr	r2, [pc, #216]	; (8005198 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d01d      	beq.n	80050fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a35      	ldr	r2, [pc, #212]	; (800519c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d018      	beq.n	80050fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a33      	ldr	r2, [pc, #204]	; (80051a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d013      	beq.n	80050fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a32      	ldr	r2, [pc, #200]	; (80051a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d00e      	beq.n	80050fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a30      	ldr	r2, [pc, #192]	; (80051a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d009      	beq.n	80050fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a2f      	ldr	r2, [pc, #188]	; (80051ac <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d004      	beq.n	80050fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a2d      	ldr	r2, [pc, #180]	; (80051b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d101      	bne.n	8005102 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80050fe:	2301      	movs	r3, #1
 8005100:	e000      	b.n	8005104 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005102:	2300      	movs	r3, #0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d01a      	beq.n	800513e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	b2db      	uxtb	r3, r3
 800510e:	3b08      	subs	r3, #8
 8005110:	4a28      	ldr	r2, [pc, #160]	; (80051b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005112:	fba2 2303 	umull	r2, r3, r2, r3
 8005116:	091b      	lsrs	r3, r3, #4
 8005118:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	4b26      	ldr	r3, [pc, #152]	; (80051b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800511e:	4413      	add	r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	461a      	mov	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a24      	ldr	r2, [pc, #144]	; (80051bc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800512c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f003 031f 	and.w	r3, r3, #31
 8005134:	2201      	movs	r2, #1
 8005136:	409a      	lsls	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800513c:	e024      	b.n	8005188 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	b2db      	uxtb	r3, r3
 8005144:	3b10      	subs	r3, #16
 8005146:	4a1e      	ldr	r2, [pc, #120]	; (80051c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005148:	fba2 2303 	umull	r2, r3, r2, r3
 800514c:	091b      	lsrs	r3, r3, #4
 800514e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	4a1c      	ldr	r2, [pc, #112]	; (80051c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d806      	bhi.n	8005166 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	4a1b      	ldr	r2, [pc, #108]	; (80051c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d902      	bls.n	8005166 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	3308      	adds	r3, #8
 8005164:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	4b18      	ldr	r3, [pc, #96]	; (80051cc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800516a:	4413      	add	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	461a      	mov	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a16      	ldr	r2, [pc, #88]	; (80051d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005178:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f003 031f 	and.w	r3, r3, #31
 8005180:	2201      	movs	r2, #1
 8005182:	409a      	lsls	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005188:	bf00      	nop
 800518a:	3714      	adds	r7, #20
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr
 8005194:	58025408 	.word	0x58025408
 8005198:	5802541c 	.word	0x5802541c
 800519c:	58025430 	.word	0x58025430
 80051a0:	58025444 	.word	0x58025444
 80051a4:	58025458 	.word	0x58025458
 80051a8:	5802546c 	.word	0x5802546c
 80051ac:	58025480 	.word	0x58025480
 80051b0:	58025494 	.word	0x58025494
 80051b4:	cccccccd 	.word	0xcccccccd
 80051b8:	16009600 	.word	0x16009600
 80051bc:	58025880 	.word	0x58025880
 80051c0:	aaaaaaab 	.word	0xaaaaaaab
 80051c4:	400204b8 	.word	0x400204b8
 80051c8:	4002040f 	.word	0x4002040f
 80051cc:	10008200 	.word	0x10008200
 80051d0:	40020880 	.word	0x40020880

080051d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d04a      	beq.n	8005280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2b08      	cmp	r3, #8
 80051ee:	d847      	bhi.n	8005280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a25      	ldr	r2, [pc, #148]	; (800528c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d022      	beq.n	8005240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a24      	ldr	r2, [pc, #144]	; (8005290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d01d      	beq.n	8005240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a22      	ldr	r2, [pc, #136]	; (8005294 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d018      	beq.n	8005240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a21      	ldr	r2, [pc, #132]	; (8005298 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d013      	beq.n	8005240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a1f      	ldr	r2, [pc, #124]	; (800529c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d00e      	beq.n	8005240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a1e      	ldr	r2, [pc, #120]	; (80052a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d009      	beq.n	8005240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a1c      	ldr	r2, [pc, #112]	; (80052a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d004      	beq.n	8005240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a1b      	ldr	r2, [pc, #108]	; (80052a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d101      	bne.n	8005244 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005240:	2301      	movs	r3, #1
 8005242:	e000      	b.n	8005246 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005244:	2300      	movs	r3, #0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00a      	beq.n	8005260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	4b17      	ldr	r3, [pc, #92]	; (80052ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800524e:	4413      	add	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	461a      	mov	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a15      	ldr	r2, [pc, #84]	; (80052b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800525c:	671a      	str	r2, [r3, #112]	; 0x70
 800525e:	e009      	b.n	8005274 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	4b14      	ldr	r3, [pc, #80]	; (80052b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005264:	4413      	add	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	461a      	mov	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a11      	ldr	r2, [pc, #68]	; (80052b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005272:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	3b01      	subs	r3, #1
 8005278:	2201      	movs	r2, #1
 800527a:	409a      	lsls	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005280:	bf00      	nop
 8005282:	3714      	adds	r7, #20
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	58025408 	.word	0x58025408
 8005290:	5802541c 	.word	0x5802541c
 8005294:	58025430 	.word	0x58025430
 8005298:	58025444 	.word	0x58025444
 800529c:	58025458 	.word	0x58025458
 80052a0:	5802546c 	.word	0x5802546c
 80052a4:	58025480 	.word	0x58025480
 80052a8:	58025494 	.word	0x58025494
 80052ac:	1600963f 	.word	0x1600963f
 80052b0:	58025940 	.word	0x58025940
 80052b4:	1000823f 	.word	0x1000823f
 80052b8:	40020940 	.word	0x40020940

080052bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052bc:	b480      	push	{r7}
 80052be:	b089      	sub	sp, #36	; 0x24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80052c6:	2300      	movs	r3, #0
 80052c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80052ca:	4b89      	ldr	r3, [pc, #548]	; (80054f0 <HAL_GPIO_Init+0x234>)
 80052cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80052ce:	e194      	b.n	80055fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	2101      	movs	r1, #1
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	fa01 f303 	lsl.w	r3, r1, r3
 80052dc:	4013      	ands	r3, r2
 80052de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f000 8186 	beq.w	80055f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d00b      	beq.n	8005308 <HAL_GPIO_Init+0x4c>
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d007      	beq.n	8005308 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80052fc:	2b11      	cmp	r3, #17
 80052fe:	d003      	beq.n	8005308 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	2b12      	cmp	r3, #18
 8005306:	d130      	bne.n	800536a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	005b      	lsls	r3, r3, #1
 8005312:	2203      	movs	r2, #3
 8005314:	fa02 f303 	lsl.w	r3, r2, r3
 8005318:	43db      	mvns	r3, r3
 800531a:	69ba      	ldr	r2, [r7, #24]
 800531c:	4013      	ands	r3, r2
 800531e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	68da      	ldr	r2, [r3, #12]
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	005b      	lsls	r3, r3, #1
 8005328:	fa02 f303 	lsl.w	r3, r2, r3
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	4313      	orrs	r3, r2
 8005330:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800533e:	2201      	movs	r2, #1
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	fa02 f303 	lsl.w	r3, r2, r3
 8005346:	43db      	mvns	r3, r3
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	4013      	ands	r3, r2
 800534c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	091b      	lsrs	r3, r3, #4
 8005354:	f003 0201 	and.w	r2, r3, #1
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	fa02 f303 	lsl.w	r3, r2, r3
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	4313      	orrs	r3, r2
 8005362:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	005b      	lsls	r3, r3, #1
 8005374:	2203      	movs	r2, #3
 8005376:	fa02 f303 	lsl.w	r3, r2, r3
 800537a:	43db      	mvns	r3, r3
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	4013      	ands	r3, r2
 8005380:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	689a      	ldr	r2, [r3, #8]
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	fa02 f303 	lsl.w	r3, r2, r3
 800538e:	69ba      	ldr	r2, [r7, #24]
 8005390:	4313      	orrs	r3, r2
 8005392:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	69ba      	ldr	r2, [r7, #24]
 8005398:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d003      	beq.n	80053aa <HAL_GPIO_Init+0xee>
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	2b12      	cmp	r3, #18
 80053a8:	d123      	bne.n	80053f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	08da      	lsrs	r2, r3, #3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	3208      	adds	r2, #8
 80053b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	f003 0307 	and.w	r3, r3, #7
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	220f      	movs	r2, #15
 80053c2:	fa02 f303 	lsl.w	r3, r2, r3
 80053c6:	43db      	mvns	r3, r3
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	4013      	ands	r3, r2
 80053cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	691a      	ldr	r2, [r3, #16]
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	fa02 f303 	lsl.w	r3, r2, r3
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	08da      	lsrs	r2, r3, #3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	3208      	adds	r2, #8
 80053ec:	69b9      	ldr	r1, [r7, #24]
 80053ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	005b      	lsls	r3, r3, #1
 80053fc:	2203      	movs	r2, #3
 80053fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005402:	43db      	mvns	r3, r3
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	4013      	ands	r3, r2
 8005408:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f003 0203 	and.w	r2, r3, #3
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	fa02 f303 	lsl.w	r3, r2, r3
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	4313      	orrs	r3, r2
 800541e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	69ba      	ldr	r2, [r7, #24]
 8005424:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800542e:	2b00      	cmp	r3, #0
 8005430:	f000 80e0 	beq.w	80055f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005434:	4b2f      	ldr	r3, [pc, #188]	; (80054f4 <HAL_GPIO_Init+0x238>)
 8005436:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800543a:	4a2e      	ldr	r2, [pc, #184]	; (80054f4 <HAL_GPIO_Init+0x238>)
 800543c:	f043 0302 	orr.w	r3, r3, #2
 8005440:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8005444:	4b2b      	ldr	r3, [pc, #172]	; (80054f4 <HAL_GPIO_Init+0x238>)
 8005446:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	60fb      	str	r3, [r7, #12]
 8005450:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005452:	4a29      	ldr	r2, [pc, #164]	; (80054f8 <HAL_GPIO_Init+0x23c>)
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	089b      	lsrs	r3, r3, #2
 8005458:	3302      	adds	r3, #2
 800545a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800545e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	f003 0303 	and.w	r3, r3, #3
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	220f      	movs	r2, #15
 800546a:	fa02 f303 	lsl.w	r3, r2, r3
 800546e:	43db      	mvns	r3, r3
 8005470:	69ba      	ldr	r2, [r7, #24]
 8005472:	4013      	ands	r3, r2
 8005474:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a20      	ldr	r2, [pc, #128]	; (80054fc <HAL_GPIO_Init+0x240>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d052      	beq.n	8005524 <HAL_GPIO_Init+0x268>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a1f      	ldr	r2, [pc, #124]	; (8005500 <HAL_GPIO_Init+0x244>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d031      	beq.n	80054ea <HAL_GPIO_Init+0x22e>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a1e      	ldr	r2, [pc, #120]	; (8005504 <HAL_GPIO_Init+0x248>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d02b      	beq.n	80054e6 <HAL_GPIO_Init+0x22a>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a1d      	ldr	r2, [pc, #116]	; (8005508 <HAL_GPIO_Init+0x24c>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d025      	beq.n	80054e2 <HAL_GPIO_Init+0x226>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a1c      	ldr	r2, [pc, #112]	; (800550c <HAL_GPIO_Init+0x250>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d01f      	beq.n	80054de <HAL_GPIO_Init+0x222>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a1b      	ldr	r2, [pc, #108]	; (8005510 <HAL_GPIO_Init+0x254>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d019      	beq.n	80054da <HAL_GPIO_Init+0x21e>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a1a      	ldr	r2, [pc, #104]	; (8005514 <HAL_GPIO_Init+0x258>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d013      	beq.n	80054d6 <HAL_GPIO_Init+0x21a>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a19      	ldr	r2, [pc, #100]	; (8005518 <HAL_GPIO_Init+0x25c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d00d      	beq.n	80054d2 <HAL_GPIO_Init+0x216>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a18      	ldr	r2, [pc, #96]	; (800551c <HAL_GPIO_Init+0x260>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d007      	beq.n	80054ce <HAL_GPIO_Init+0x212>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a17      	ldr	r2, [pc, #92]	; (8005520 <HAL_GPIO_Init+0x264>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d101      	bne.n	80054ca <HAL_GPIO_Init+0x20e>
 80054c6:	2309      	movs	r3, #9
 80054c8:	e02d      	b.n	8005526 <HAL_GPIO_Init+0x26a>
 80054ca:	230a      	movs	r3, #10
 80054cc:	e02b      	b.n	8005526 <HAL_GPIO_Init+0x26a>
 80054ce:	2308      	movs	r3, #8
 80054d0:	e029      	b.n	8005526 <HAL_GPIO_Init+0x26a>
 80054d2:	2307      	movs	r3, #7
 80054d4:	e027      	b.n	8005526 <HAL_GPIO_Init+0x26a>
 80054d6:	2306      	movs	r3, #6
 80054d8:	e025      	b.n	8005526 <HAL_GPIO_Init+0x26a>
 80054da:	2305      	movs	r3, #5
 80054dc:	e023      	b.n	8005526 <HAL_GPIO_Init+0x26a>
 80054de:	2304      	movs	r3, #4
 80054e0:	e021      	b.n	8005526 <HAL_GPIO_Init+0x26a>
 80054e2:	2303      	movs	r3, #3
 80054e4:	e01f      	b.n	8005526 <HAL_GPIO_Init+0x26a>
 80054e6:	2302      	movs	r3, #2
 80054e8:	e01d      	b.n	8005526 <HAL_GPIO_Init+0x26a>
 80054ea:	2301      	movs	r3, #1
 80054ec:	e01b      	b.n	8005526 <HAL_GPIO_Init+0x26a>
 80054ee:	bf00      	nop
 80054f0:	58000080 	.word	0x58000080
 80054f4:	58024400 	.word	0x58024400
 80054f8:	58000400 	.word	0x58000400
 80054fc:	58020000 	.word	0x58020000
 8005500:	58020400 	.word	0x58020400
 8005504:	58020800 	.word	0x58020800
 8005508:	58020c00 	.word	0x58020c00
 800550c:	58021000 	.word	0x58021000
 8005510:	58021400 	.word	0x58021400
 8005514:	58021800 	.word	0x58021800
 8005518:	58021c00 	.word	0x58021c00
 800551c:	58022000 	.word	0x58022000
 8005520:	58022400 	.word	0x58022400
 8005524:	2300      	movs	r3, #0
 8005526:	69fa      	ldr	r2, [r7, #28]
 8005528:	f002 0203 	and.w	r2, r2, #3
 800552c:	0092      	lsls	r2, r2, #2
 800552e:	4093      	lsls	r3, r2
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	4313      	orrs	r3, r2
 8005534:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005536:	4938      	ldr	r1, [pc, #224]	; (8005618 <HAL_GPIO_Init+0x35c>)
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	089b      	lsrs	r3, r3, #2
 800553c:	3302      	adds	r3, #2
 800553e:	69ba      	ldr	r2, [r7, #24]
 8005540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	43db      	mvns	r3, r3
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	4013      	ands	r3, r2
 8005552:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d003      	beq.n	8005568 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	4313      	orrs	r3, r2
 8005566:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	69ba      	ldr	r2, [r7, #24]
 800556c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	43db      	mvns	r3, r3
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	4013      	ands	r3, r2
 800557c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	4313      	orrs	r3, r2
 8005590:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	43db      	mvns	r3, r3
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	4013      	ands	r3, r2
 80055a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80055b6:	69ba      	ldr	r2, [r7, #24]
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80055be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80055c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	43db      	mvns	r3, r3
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	4013      	ands	r3, r2
 80055d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d003      	beq.n	80055ec <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80055e4:	69ba      	ldr	r2, [r7, #24]
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80055ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	3301      	adds	r3, #1
 80055f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	fa22 f303 	lsr.w	r3, r2, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	f47f ae63 	bne.w	80052d0 <HAL_GPIO_Init+0x14>
  }
}
 800560a:	bf00      	nop
 800560c:	3724      	adds	r7, #36	; 0x24
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	58000400 	.word	0x58000400

0800561c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	460b      	mov	r3, r1
 8005626:	807b      	strh	r3, [r7, #2]
 8005628:	4613      	mov	r3, r2
 800562a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800562c:	787b      	ldrb	r3, [r7, #1]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005632:	887a      	ldrh	r2, [r7, #2]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005638:	e003      	b.n	8005642 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800563a:	887b      	ldrh	r3, [r7, #2]
 800563c:	041a      	lsls	r2, r3, #16
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	619a      	str	r2, [r3, #24]
}
 8005642:	bf00      	nop
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800564e:	b480      	push	{r7}
 8005650:	b083      	sub	sp, #12
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
 8005656:	460b      	mov	r3, r1
 8005658:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	695a      	ldr	r2, [r3, #20]
 800565e:	887b      	ldrh	r3, [r7, #2]
 8005660:	401a      	ands	r2, r3
 8005662:	887b      	ldrh	r3, [r7, #2]
 8005664:	429a      	cmp	r2, r3
 8005666:	d104      	bne.n	8005672 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005668:	887b      	ldrh	r3, [r7, #2]
 800566a:	041a      	lsls	r2, r3, #16
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005670:	e002      	b.n	8005678 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005672:	887a      	ldrh	r2, [r7, #2]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	619a      	str	r2, [r3, #24]
}
 8005678:	bf00      	nop
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800568c:	4b29      	ldr	r3, [pc, #164]	; (8005734 <HAL_PWREx_ConfigSupply+0xb0>)
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	f003 0307 	and.w	r3, r3, #7
 8005694:	2b06      	cmp	r3, #6
 8005696:	d00a      	beq.n	80056ae <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005698:	4b26      	ldr	r3, [pc, #152]	; (8005734 <HAL_PWREx_ConfigSupply+0xb0>)
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d001      	beq.n	80056aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e040      	b.n	800572c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80056aa:	2300      	movs	r3, #0
 80056ac:	e03e      	b.n	800572c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80056ae:	4b21      	ldr	r3, [pc, #132]	; (8005734 <HAL_PWREx_ConfigSupply+0xb0>)
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80056b6:	491f      	ldr	r1, [pc, #124]	; (8005734 <HAL_PWREx_ConfigSupply+0xb0>)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80056be:	f7fc f92d 	bl	800191c <HAL_GetTick>
 80056c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80056c4:	e009      	b.n	80056da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80056c6:	f7fc f929 	bl	800191c <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056d4:	d901      	bls.n	80056da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e028      	b.n	800572c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80056da:	4b16      	ldr	r3, [pc, #88]	; (8005734 <HAL_PWREx_ConfigSupply+0xb0>)
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056e6:	d1ee      	bne.n	80056c6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b1e      	cmp	r3, #30
 80056ec:	d008      	beq.n	8005700 <HAL_PWREx_ConfigSupply+0x7c>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b2e      	cmp	r3, #46	; 0x2e
 80056f2:	d005      	beq.n	8005700 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2b1d      	cmp	r3, #29
 80056f8:	d002      	beq.n	8005700 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2b2d      	cmp	r3, #45	; 0x2d
 80056fe:	d114      	bne.n	800572a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005700:	f7fc f90c 	bl	800191c <HAL_GetTick>
 8005704:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005706:	e009      	b.n	800571c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005708:	f7fc f908 	bl	800191c <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005716:	d901      	bls.n	800571c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e007      	b.n	800572c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800571c:	4b05      	ldr	r3, [pc, #20]	; (8005734 <HAL_PWREx_ConfigSupply+0xb0>)
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005728:	d1ee      	bne.n	8005708 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	58024800 	.word	0x58024800

08005738 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b08c      	sub	sp, #48	; 0x30
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e3d7      	b.n	8005efa <HAL_RCC_OscConfig+0x7c2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b00      	cmp	r3, #0
 8005754:	f000 80b3 	beq.w	80058be <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005758:	4b90      	ldr	r3, [pc, #576]	; (800599c <HAL_RCC_OscConfig+0x264>)
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005760:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005762:	4b8e      	ldr	r3, [pc, #568]	; (800599c <HAL_RCC_OscConfig+0x264>)
 8005764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005766:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576a:	2b10      	cmp	r3, #16
 800576c:	d007      	beq.n	800577e <HAL_RCC_OscConfig+0x46>
 800576e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005770:	2b18      	cmp	r3, #24
 8005772:	d112      	bne.n	800579a <HAL_RCC_OscConfig+0x62>
 8005774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005776:	f003 0303 	and.w	r3, r3, #3
 800577a:	2b02      	cmp	r3, #2
 800577c:	d10d      	bne.n	800579a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800577e:	4b87      	ldr	r3, [pc, #540]	; (800599c <HAL_RCC_OscConfig+0x264>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005786:	2b00      	cmp	r3, #0
 8005788:	f000 8098 	beq.w	80058bc <HAL_RCC_OscConfig+0x184>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	2b00      	cmp	r3, #0
 8005792:	f040 8093 	bne.w	80058bc <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e3af      	b.n	8005efa <HAL_RCC_OscConfig+0x7c2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057a2:	d106      	bne.n	80057b2 <HAL_RCC_OscConfig+0x7a>
 80057a4:	4b7d      	ldr	r3, [pc, #500]	; (800599c <HAL_RCC_OscConfig+0x264>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a7c      	ldr	r2, [pc, #496]	; (800599c <HAL_RCC_OscConfig+0x264>)
 80057aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057ae:	6013      	str	r3, [r2, #0]
 80057b0:	e058      	b.n	8005864 <HAL_RCC_OscConfig+0x12c>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d112      	bne.n	80057e0 <HAL_RCC_OscConfig+0xa8>
 80057ba:	4b78      	ldr	r3, [pc, #480]	; (800599c <HAL_RCC_OscConfig+0x264>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a77      	ldr	r2, [pc, #476]	; (800599c <HAL_RCC_OscConfig+0x264>)
 80057c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057c4:	6013      	str	r3, [r2, #0]
 80057c6:	4b75      	ldr	r3, [pc, #468]	; (800599c <HAL_RCC_OscConfig+0x264>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a74      	ldr	r2, [pc, #464]	; (800599c <HAL_RCC_OscConfig+0x264>)
 80057cc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80057d0:	6013      	str	r3, [r2, #0]
 80057d2:	4b72      	ldr	r3, [pc, #456]	; (800599c <HAL_RCC_OscConfig+0x264>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a71      	ldr	r2, [pc, #452]	; (800599c <HAL_RCC_OscConfig+0x264>)
 80057d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057dc:	6013      	str	r3, [r2, #0]
 80057de:	e041      	b.n	8005864 <HAL_RCC_OscConfig+0x12c>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057e8:	d112      	bne.n	8005810 <HAL_RCC_OscConfig+0xd8>
 80057ea:	4b6c      	ldr	r3, [pc, #432]	; (800599c <HAL_RCC_OscConfig+0x264>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a6b      	ldr	r2, [pc, #428]	; (800599c <HAL_RCC_OscConfig+0x264>)
 80057f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	4b69      	ldr	r3, [pc, #420]	; (800599c <HAL_RCC_OscConfig+0x264>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a68      	ldr	r2, [pc, #416]	; (800599c <HAL_RCC_OscConfig+0x264>)
 80057fc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005800:	6013      	str	r3, [r2, #0]
 8005802:	4b66      	ldr	r3, [pc, #408]	; (800599c <HAL_RCC_OscConfig+0x264>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a65      	ldr	r2, [pc, #404]	; (800599c <HAL_RCC_OscConfig+0x264>)
 8005808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800580c:	6013      	str	r3, [r2, #0]
 800580e:	e029      	b.n	8005864 <HAL_RCC_OscConfig+0x12c>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8005818:	d112      	bne.n	8005840 <HAL_RCC_OscConfig+0x108>
 800581a:	4b60      	ldr	r3, [pc, #384]	; (800599c <HAL_RCC_OscConfig+0x264>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a5f      	ldr	r2, [pc, #380]	; (800599c <HAL_RCC_OscConfig+0x264>)
 8005820:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005824:	6013      	str	r3, [r2, #0]
 8005826:	4b5d      	ldr	r3, [pc, #372]	; (800599c <HAL_RCC_OscConfig+0x264>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a5c      	ldr	r2, [pc, #368]	; (800599c <HAL_RCC_OscConfig+0x264>)
 800582c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005830:	6013      	str	r3, [r2, #0]
 8005832:	4b5a      	ldr	r3, [pc, #360]	; (800599c <HAL_RCC_OscConfig+0x264>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a59      	ldr	r2, [pc, #356]	; (800599c <HAL_RCC_OscConfig+0x264>)
 8005838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800583c:	6013      	str	r3, [r2, #0]
 800583e:	e011      	b.n	8005864 <HAL_RCC_OscConfig+0x12c>
 8005840:	4b56      	ldr	r3, [pc, #344]	; (800599c <HAL_RCC_OscConfig+0x264>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a55      	ldr	r2, [pc, #340]	; (800599c <HAL_RCC_OscConfig+0x264>)
 8005846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800584a:	6013      	str	r3, [r2, #0]
 800584c:	4b53      	ldr	r3, [pc, #332]	; (800599c <HAL_RCC_OscConfig+0x264>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a52      	ldr	r2, [pc, #328]	; (800599c <HAL_RCC_OscConfig+0x264>)
 8005852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005856:	6013      	str	r3, [r2, #0]
 8005858:	4b50      	ldr	r3, [pc, #320]	; (800599c <HAL_RCC_OscConfig+0x264>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a4f      	ldr	r2, [pc, #316]	; (800599c <HAL_RCC_OscConfig+0x264>)
 800585e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005862:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d013      	beq.n	8005894 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800586c:	f7fc f856 	bl	800191c <HAL_GetTick>
 8005870:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005872:	e008      	b.n	8005886 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005874:	f7fc f852 	bl	800191c <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b64      	cmp	r3, #100	; 0x64
 8005880:	d901      	bls.n	8005886 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e339      	b.n	8005efa <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005886:	4b45      	ldr	r3, [pc, #276]	; (800599c <HAL_RCC_OscConfig+0x264>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d0f0      	beq.n	8005874 <HAL_RCC_OscConfig+0x13c>
 8005892:	e014      	b.n	80058be <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005894:	f7fc f842 	bl	800191c <HAL_GetTick>
 8005898:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800589a:	e008      	b.n	80058ae <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800589c:	f7fc f83e 	bl	800191c <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	2b64      	cmp	r3, #100	; 0x64
 80058a8:	d901      	bls.n	80058ae <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e325      	b.n	8005efa <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80058ae:	4b3b      	ldr	r3, [pc, #236]	; (800599c <HAL_RCC_OscConfig+0x264>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1f0      	bne.n	800589c <HAL_RCC_OscConfig+0x164>
 80058ba:	e000      	b.n	80058be <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d070      	beq.n	80059ac <HAL_RCC_OscConfig+0x274>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058ca:	4b34      	ldr	r3, [pc, #208]	; (800599c <HAL_RCC_OscConfig+0x264>)
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058d2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80058d4:	4b31      	ldr	r3, [pc, #196]	; (800599c <HAL_RCC_OscConfig+0x264>)
 80058d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d007      	beq.n	80058f0 <HAL_RCC_OscConfig+0x1b8>
 80058e0:	6a3b      	ldr	r3, [r7, #32]
 80058e2:	2b18      	cmp	r3, #24
 80058e4:	d11b      	bne.n	800591e <HAL_RCC_OscConfig+0x1e6>
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	f003 0303 	and.w	r3, r3, #3
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d116      	bne.n	800591e <HAL_RCC_OscConfig+0x1e6>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058f0:	4b2a      	ldr	r3, [pc, #168]	; (800599c <HAL_RCC_OscConfig+0x264>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0304 	and.w	r3, r3, #4
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d005      	beq.n	8005908 <HAL_RCC_OscConfig+0x1d0>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d101      	bne.n	8005908 <HAL_RCC_OscConfig+0x1d0>
      {
        return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e2f8      	b.n	8005efa <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005908:	4b24      	ldr	r3, [pc, #144]	; (800599c <HAL_RCC_OscConfig+0x264>)
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	061b      	lsls	r3, r3, #24
 8005916:	4921      	ldr	r1, [pc, #132]	; (800599c <HAL_RCC_OscConfig+0x264>)
 8005918:	4313      	orrs	r3, r2
 800591a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800591c:	e046      	b.n	80059ac <HAL_RCC_OscConfig+0x274>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d026      	beq.n	8005974 <HAL_RCC_OscConfig+0x23c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005926:	4b1d      	ldr	r3, [pc, #116]	; (800599c <HAL_RCC_OscConfig+0x264>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f023 0219 	bic.w	r2, r3, #25
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	491a      	ldr	r1, [pc, #104]	; (800599c <HAL_RCC_OscConfig+0x264>)
 8005934:	4313      	orrs	r3, r2
 8005936:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005938:	f7fb fff0 	bl	800191c <HAL_GetTick>
 800593c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800593e:	e008      	b.n	8005952 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005940:	f7fb ffec 	bl	800191c <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	2b02      	cmp	r3, #2
 800594c:	d901      	bls.n	8005952 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e2d3      	b.n	8005efa <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005952:	4b12      	ldr	r3, [pc, #72]	; (800599c <HAL_RCC_OscConfig+0x264>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0304 	and.w	r3, r3, #4
 800595a:	2b00      	cmp	r3, #0
 800595c:	d0f0      	beq.n	8005940 <HAL_RCC_OscConfig+0x208>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800595e:	4b0f      	ldr	r3, [pc, #60]	; (800599c <HAL_RCC_OscConfig+0x264>)
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	061b      	lsls	r3, r3, #24
 800596c:	490b      	ldr	r1, [pc, #44]	; (800599c <HAL_RCC_OscConfig+0x264>)
 800596e:	4313      	orrs	r3, r2
 8005970:	604b      	str	r3, [r1, #4]
 8005972:	e01b      	b.n	80059ac <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005974:	4b09      	ldr	r3, [pc, #36]	; (800599c <HAL_RCC_OscConfig+0x264>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a08      	ldr	r2, [pc, #32]	; (800599c <HAL_RCC_OscConfig+0x264>)
 800597a:	f023 0301 	bic.w	r3, r3, #1
 800597e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005980:	f7fb ffcc 	bl	800191c <HAL_GetTick>
 8005984:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005986:	e00b      	b.n	80059a0 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005988:	f7fb ffc8 	bl	800191c <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b02      	cmp	r3, #2
 8005994:	d904      	bls.n	80059a0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e2af      	b.n	8005efa <HAL_RCC_OscConfig+0x7c2>
 800599a:	bf00      	nop
 800599c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80059a0:	4b99      	ldr	r3, [pc, #612]	; (8005c08 <HAL_RCC_OscConfig+0x4d0>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0304 	and.w	r3, r3, #4
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1ed      	bne.n	8005988 <HAL_RCC_OscConfig+0x250>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0310 	and.w	r3, r3, #16
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d06a      	beq.n	8005a8e <HAL_RCC_OscConfig+0x356>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059b8:	4b93      	ldr	r3, [pc, #588]	; (8005c08 <HAL_RCC_OscConfig+0x4d0>)
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059c0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80059c2:	4b91      	ldr	r3, [pc, #580]	; (8005c08 <HAL_RCC_OscConfig+0x4d0>)
 80059c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	2b08      	cmp	r3, #8
 80059cc:	d007      	beq.n	80059de <HAL_RCC_OscConfig+0x2a6>
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	2b18      	cmp	r3, #24
 80059d2:	d11b      	bne.n	8005a0c <HAL_RCC_OscConfig+0x2d4>
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	f003 0303 	and.w	r3, r3, #3
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d116      	bne.n	8005a0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80059de:	4b8a      	ldr	r3, [pc, #552]	; (8005c08 <HAL_RCC_OscConfig+0x4d0>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d005      	beq.n	80059f6 <HAL_RCC_OscConfig+0x2be>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	2b80      	cmp	r3, #128	; 0x80
 80059f0:	d001      	beq.n	80059f6 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e281      	b.n	8005efa <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80059f6:	4b84      	ldr	r3, [pc, #528]	; (8005c08 <HAL_RCC_OscConfig+0x4d0>)
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	061b      	lsls	r3, r3, #24
 8005a04:	4980      	ldr	r1, [pc, #512]	; (8005c08 <HAL_RCC_OscConfig+0x4d0>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a0a:	e040      	b.n	8005a8e <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	69db      	ldr	r3, [r3, #28]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d023      	beq.n	8005a5c <HAL_RCC_OscConfig+0x324>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005a14:	4b7c      	ldr	r3, [pc, #496]	; (8005c08 <HAL_RCC_OscConfig+0x4d0>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a7b      	ldr	r2, [pc, #492]	; (8005c08 <HAL_RCC_OscConfig+0x4d0>)
 8005a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a20:	f7fb ff7c 	bl	800191c <HAL_GetTick>
 8005a24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005a26:	e008      	b.n	8005a3a <HAL_RCC_OscConfig+0x302>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005a28:	f7fb ff78 	bl	800191c <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d901      	bls.n	8005a3a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e25f      	b.n	8005efa <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005a3a:	4b73      	ldr	r3, [pc, #460]	; (8005c08 <HAL_RCC_OscConfig+0x4d0>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d0f0      	beq.n	8005a28 <HAL_RCC_OscConfig+0x2f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a46:	4b70      	ldr	r3, [pc, #448]	; (8005c08 <HAL_RCC_OscConfig+0x4d0>)
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	061b      	lsls	r3, r3, #24
 8005a54:	496c      	ldr	r1, [pc, #432]	; (8005c08 <HAL_RCC_OscConfig+0x4d0>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	60cb      	str	r3, [r1, #12]
 8005a5a:	e018      	b.n	8005a8e <HAL_RCC_OscConfig+0x356>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005a5c:	4b6a      	ldr	r3, [pc, #424]	; (8005c08 <HAL_RCC_OscConfig+0x4d0>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a69      	ldr	r2, [pc, #420]	; (8005c08 <HAL_RCC_OscConfig+0x4d0>)
 8005a62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a68:	f7fb ff58 	bl	800191c <HAL_GetTick>
 8005a6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005a6e:	e008      	b.n	8005a82 <HAL_RCC_OscConfig+0x34a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005a70:	f7fb ff54 	bl	800191c <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d901      	bls.n	8005a82 <HAL_RCC_OscConfig+0x34a>
          {
            return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e23b      	b.n	8005efa <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005a82:	4b61      	ldr	r3, [pc, #388]	; (8005c08 <HAL_RCC_OscConfig+0x4d0>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1f0      	bne.n	8005a70 <HAL_RCC_OscConfig+0x338>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0308 	and.w	r3, r3, #8
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d036      	beq.n	8005b08 <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d019      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x39e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005aa2:	4b59      	ldr	r3, [pc, #356]	; (8005c08 <HAL_RCC_OscConfig+0x4d0>)
 8005aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aa6:	4a58      	ldr	r2, [pc, #352]	; (8005c08 <HAL_RCC_OscConfig+0x4d0>)
 8005aa8:	f043 0301 	orr.w	r3, r3, #1
 8005aac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aae:	f7fb ff35 	bl	800191c <HAL_GetTick>
 8005ab2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005ab4:	e008      	b.n	8005ac8 <HAL_RCC_OscConfig+0x390>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ab6:	f7fb ff31 	bl	800191c <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d901      	bls.n	8005ac8 <HAL_RCC_OscConfig+0x390>
        {
          return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e218      	b.n	8005efa <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005ac8:	4b4f      	ldr	r3, [pc, #316]	; (8005c08 <HAL_RCC_OscConfig+0x4d0>)
 8005aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005acc:	f003 0302 	and.w	r3, r3, #2
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d0f0      	beq.n	8005ab6 <HAL_RCC_OscConfig+0x37e>
 8005ad4:	e018      	b.n	8005b08 <HAL_RCC_OscConfig+0x3d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ad6:	4b4c      	ldr	r3, [pc, #304]	; (8005c08 <HAL_RCC_OscConfig+0x4d0>)
 8005ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ada:	4a4b      	ldr	r2, [pc, #300]	; (8005c08 <HAL_RCC_OscConfig+0x4d0>)
 8005adc:	f023 0301 	bic.w	r3, r3, #1
 8005ae0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ae2:	f7fb ff1b 	bl	800191c <HAL_GetTick>
 8005ae6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005ae8:	e008      	b.n	8005afc <HAL_RCC_OscConfig+0x3c4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005aea:	f7fb ff17 	bl	800191c <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d901      	bls.n	8005afc <HAL_RCC_OscConfig+0x3c4>
        {
          return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e1fe      	b.n	8005efa <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005afc:	4b42      	ldr	r3, [pc, #264]	; (8005c08 <HAL_RCC_OscConfig+0x4d0>)
 8005afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b00:	f003 0302 	and.w	r3, r3, #2
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1f0      	bne.n	8005aea <HAL_RCC_OscConfig+0x3b2>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0320 	and.w	r3, r3, #32
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d036      	beq.n	8005b82 <HAL_RCC_OscConfig+0x44a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d019      	beq.n	8005b50 <HAL_RCC_OscConfig+0x418>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005b1c:	4b3a      	ldr	r3, [pc, #232]	; (8005c08 <HAL_RCC_OscConfig+0x4d0>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a39      	ldr	r2, [pc, #228]	; (8005c08 <HAL_RCC_OscConfig+0x4d0>)
 8005b22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b26:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005b28:	f7fb fef8 	bl	800191c <HAL_GetTick>
 8005b2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005b2e:	e008      	b.n	8005b42 <HAL_RCC_OscConfig+0x40a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005b30:	f7fb fef4 	bl	800191c <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d901      	bls.n	8005b42 <HAL_RCC_OscConfig+0x40a>
        {
          return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e1db      	b.n	8005efa <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005b42:	4b31      	ldr	r3, [pc, #196]	; (8005c08 <HAL_RCC_OscConfig+0x4d0>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d0f0      	beq.n	8005b30 <HAL_RCC_OscConfig+0x3f8>
 8005b4e:	e018      	b.n	8005b82 <HAL_RCC_OscConfig+0x44a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005b50:	4b2d      	ldr	r3, [pc, #180]	; (8005c08 <HAL_RCC_OscConfig+0x4d0>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a2c      	ldr	r2, [pc, #176]	; (8005c08 <HAL_RCC_OscConfig+0x4d0>)
 8005b56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b5a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005b5c:	f7fb fede 	bl	800191c <HAL_GetTick>
 8005b60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005b62:	e008      	b.n	8005b76 <HAL_RCC_OscConfig+0x43e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005b64:	f7fb feda 	bl	800191c <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e1c1      	b.n	8005efa <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005b76:	4b24      	ldr	r3, [pc, #144]	; (8005c08 <HAL_RCC_OscConfig+0x4d0>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1f0      	bne.n	8005b64 <HAL_RCC_OscConfig+0x42c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0304 	and.w	r3, r3, #4
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f000 80af 	beq.w	8005cee <HAL_RCC_OscConfig+0x5b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005b90:	4b1e      	ldr	r3, [pc, #120]	; (8005c0c <HAL_RCC_OscConfig+0x4d4>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a1d      	ldr	r2, [pc, #116]	; (8005c0c <HAL_RCC_OscConfig+0x4d4>)
 8005b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b9c:	f7fb febe 	bl	800191c <HAL_GetTick>
 8005ba0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ba2:	e008      	b.n	8005bb6 <HAL_RCC_OscConfig+0x47e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005ba4:	f7fb feba 	bl	800191c <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b64      	cmp	r3, #100	; 0x64
 8005bb0:	d901      	bls.n	8005bb6 <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e1a1      	b.n	8005efa <HAL_RCC_OscConfig+0x7c2>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bb6:	4b15      	ldr	r3, [pc, #84]	; (8005c0c <HAL_RCC_OscConfig+0x4d4>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d0f0      	beq.n	8005ba4 <HAL_RCC_OscConfig+0x46c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d106      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x4a0>
 8005bca:	4b0f      	ldr	r3, [pc, #60]	; (8005c08 <HAL_RCC_OscConfig+0x4d0>)
 8005bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bce:	4a0e      	ldr	r2, [pc, #56]	; (8005c08 <HAL_RCC_OscConfig+0x4d0>)
 8005bd0:	f043 0301 	orr.w	r3, r3, #1
 8005bd4:	6713      	str	r3, [r2, #112]	; 0x70
 8005bd6:	e05b      	b.n	8005c90 <HAL_RCC_OscConfig+0x558>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d117      	bne.n	8005c10 <HAL_RCC_OscConfig+0x4d8>
 8005be0:	4b09      	ldr	r3, [pc, #36]	; (8005c08 <HAL_RCC_OscConfig+0x4d0>)
 8005be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be4:	4a08      	ldr	r2, [pc, #32]	; (8005c08 <HAL_RCC_OscConfig+0x4d0>)
 8005be6:	f023 0301 	bic.w	r3, r3, #1
 8005bea:	6713      	str	r3, [r2, #112]	; 0x70
 8005bec:	4b06      	ldr	r3, [pc, #24]	; (8005c08 <HAL_RCC_OscConfig+0x4d0>)
 8005bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf0:	4a05      	ldr	r2, [pc, #20]	; (8005c08 <HAL_RCC_OscConfig+0x4d0>)
 8005bf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8005bf8:	4b03      	ldr	r3, [pc, #12]	; (8005c08 <HAL_RCC_OscConfig+0x4d0>)
 8005bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfc:	4a02      	ldr	r2, [pc, #8]	; (8005c08 <HAL_RCC_OscConfig+0x4d0>)
 8005bfe:	f023 0304 	bic.w	r3, r3, #4
 8005c02:	6713      	str	r3, [r2, #112]	; 0x70
 8005c04:	e044      	b.n	8005c90 <HAL_RCC_OscConfig+0x558>
 8005c06:	bf00      	nop
 8005c08:	58024400 	.word	0x58024400
 8005c0c:	58024800 	.word	0x58024800
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	2b05      	cmp	r3, #5
 8005c16:	d112      	bne.n	8005c3e <HAL_RCC_OscConfig+0x506>
 8005c18:	4b95      	ldr	r3, [pc, #596]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c1c:	4a94      	ldr	r2, [pc, #592]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005c1e:	f043 0304 	orr.w	r3, r3, #4
 8005c22:	6713      	str	r3, [r2, #112]	; 0x70
 8005c24:	4b92      	ldr	r3, [pc, #584]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c28:	4a91      	ldr	r2, [pc, #580]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005c2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c2e:	6713      	str	r3, [r2, #112]	; 0x70
 8005c30:	4b8f      	ldr	r3, [pc, #572]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c34:	4a8e      	ldr	r2, [pc, #568]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005c36:	f043 0301 	orr.w	r3, r3, #1
 8005c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c3c:	e028      	b.n	8005c90 <HAL_RCC_OscConfig+0x558>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	2b85      	cmp	r3, #133	; 0x85
 8005c44:	d112      	bne.n	8005c6c <HAL_RCC_OscConfig+0x534>
 8005c46:	4b8a      	ldr	r3, [pc, #552]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c4a:	4a89      	ldr	r2, [pc, #548]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005c4c:	f043 0304 	orr.w	r3, r3, #4
 8005c50:	6713      	str	r3, [r2, #112]	; 0x70
 8005c52:	4b87      	ldr	r3, [pc, #540]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c56:	4a86      	ldr	r2, [pc, #536]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8005c5e:	4b84      	ldr	r3, [pc, #528]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c62:	4a83      	ldr	r2, [pc, #524]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005c64:	f043 0301 	orr.w	r3, r3, #1
 8005c68:	6713      	str	r3, [r2, #112]	; 0x70
 8005c6a:	e011      	b.n	8005c90 <HAL_RCC_OscConfig+0x558>
 8005c6c:	4b80      	ldr	r3, [pc, #512]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c70:	4a7f      	ldr	r2, [pc, #508]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005c72:	f023 0301 	bic.w	r3, r3, #1
 8005c76:	6713      	str	r3, [r2, #112]	; 0x70
 8005c78:	4b7d      	ldr	r3, [pc, #500]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7c:	4a7c      	ldr	r2, [pc, #496]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005c7e:	f023 0304 	bic.w	r3, r3, #4
 8005c82:	6713      	str	r3, [r2, #112]	; 0x70
 8005c84:	4b7a      	ldr	r3, [pc, #488]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c88:	4a79      	ldr	r2, [pc, #484]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005c8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d015      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x58c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c98:	f7fb fe40 	bl	800191c <HAL_GetTick>
 8005c9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c9e:	e00a      	b.n	8005cb6 <HAL_RCC_OscConfig+0x57e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ca0:	f7fb fe3c 	bl	800191c <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d901      	bls.n	8005cb6 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e121      	b.n	8005efa <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005cb6:	4b6e      	ldr	r3, [pc, #440]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cba:	f003 0302 	and.w	r3, r3, #2
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d0ee      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x568>
 8005cc2:	e014      	b.n	8005cee <HAL_RCC_OscConfig+0x5b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cc4:	f7fb fe2a 	bl	800191c <HAL_GetTick>
 8005cc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005cca:	e00a      	b.n	8005ce2 <HAL_RCC_OscConfig+0x5aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ccc:	f7fb fe26 	bl	800191c <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d901      	bls.n	8005ce2 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e10b      	b.n	8005efa <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005ce2:	4b63      	ldr	r3, [pc, #396]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1ee      	bne.n	8005ccc <HAL_RCC_OscConfig+0x594>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f000 8100 	beq.w	8005ef8 <HAL_RCC_OscConfig+0x7c0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005cf8:	4b5d      	ldr	r3, [pc, #372]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d00:	2b18      	cmp	r3, #24
 8005d02:	f000 80bb 	beq.w	8005e7c <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	f040 8095 	bne.w	8005e3a <HAL_RCC_OscConfig+0x702>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d10:	4b57      	ldr	r3, [pc, #348]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a56      	ldr	r2, [pc, #344]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005d16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d1c:	f7fb fdfe 	bl	800191c <HAL_GetTick>
 8005d20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d22:	e008      	b.n	8005d36 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d24:	f7fb fdfa 	bl	800191c <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e0e1      	b.n	8005efa <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d36:	4b4e      	ldr	r3, [pc, #312]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1f0      	bne.n	8005d24 <HAL_RCC_OscConfig+0x5ec>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d42:	4b4b      	ldr	r3, [pc, #300]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005d44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d46:	4b4b      	ldr	r3, [pc, #300]	; (8005e74 <HAL_RCC_OscConfig+0x73c>)
 8005d48:	4013      	ands	r3, r2
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005d52:	0112      	lsls	r2, r2, #4
 8005d54:	430a      	orrs	r2, r1
 8005d56:	4946      	ldr	r1, [pc, #280]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	628b      	str	r3, [r1, #40]	; 0x28
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d60:	3b01      	subs	r3, #1
 8005d62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	025b      	lsls	r3, r3, #9
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	431a      	orrs	r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d76:	3b01      	subs	r3, #1
 8005d78:	041b      	lsls	r3, r3, #16
 8005d7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d84:	3b01      	subs	r3, #1
 8005d86:	061b      	lsls	r3, r3, #24
 8005d88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005d8c:	4938      	ldr	r1, [pc, #224]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005d92:	4b37      	ldr	r3, [pc, #220]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d96:	4a36      	ldr	r2, [pc, #216]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005d98:	f023 0301 	bic.w	r3, r3, #1
 8005d9c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005d9e:	4b34      	ldr	r3, [pc, #208]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005da0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005da2:	4b35      	ldr	r3, [pc, #212]	; (8005e78 <HAL_RCC_OscConfig+0x740>)
 8005da4:	4013      	ands	r3, r2
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005daa:	00d2      	lsls	r2, r2, #3
 8005dac:	4930      	ldr	r1, [pc, #192]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005db2:	4b2f      	ldr	r3, [pc, #188]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db6:	f023 020c 	bic.w	r2, r3, #12
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	492c      	ldr	r1, [pc, #176]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005dc4:	4b2a      	ldr	r3, [pc, #168]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc8:	f023 0202 	bic.w	r2, r3, #2
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd0:	4927      	ldr	r1, [pc, #156]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005dd6:	4b26      	ldr	r3, [pc, #152]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dda:	4a25      	ldr	r2, [pc, #148]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005de0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005de2:	4b23      	ldr	r3, [pc, #140]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de6:	4a22      	ldr	r2, [pc, #136]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005dee:	4b20      	ldr	r3, [pc, #128]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df2:	4a1f      	ldr	r2, [pc, #124]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005df8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005dfa:	4b1d      	ldr	r3, [pc, #116]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfe:	4a1c      	ldr	r2, [pc, #112]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005e00:	f043 0301 	orr.w	r3, r3, #1
 8005e04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e06:	4b1a      	ldr	r3, [pc, #104]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a19      	ldr	r2, [pc, #100]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005e0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e12:	f7fb fd83 	bl	800191c <HAL_GetTick>
 8005e16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005e18:	e008      	b.n	8005e2c <HAL_RCC_OscConfig+0x6f4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e1a:	f7fb fd7f 	bl	800191c <HAL_GetTick>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d901      	bls.n	8005e2c <HAL_RCC_OscConfig+0x6f4>
          {
            return HAL_TIMEOUT;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	e066      	b.n	8005efa <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005e2c:	4b10      	ldr	r3, [pc, #64]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d0f0      	beq.n	8005e1a <HAL_RCC_OscConfig+0x6e2>
 8005e38:	e05e      	b.n	8005ef8 <HAL_RCC_OscConfig+0x7c0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e3a:	4b0d      	ldr	r3, [pc, #52]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a0c      	ldr	r2, [pc, #48]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005e40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e46:	f7fb fd69 	bl	800191c <HAL_GetTick>
 8005e4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e4c:	e008      	b.n	8005e60 <HAL_RCC_OscConfig+0x728>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e4e:	f7fb fd65 	bl	800191c <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d901      	bls.n	8005e60 <HAL_RCC_OscConfig+0x728>
          {
            return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e04c      	b.n	8005efa <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e60:	4b03      	ldr	r3, [pc, #12]	; (8005e70 <HAL_RCC_OscConfig+0x738>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1f0      	bne.n	8005e4e <HAL_RCC_OscConfig+0x716>
 8005e6c:	e044      	b.n	8005ef8 <HAL_RCC_OscConfig+0x7c0>
 8005e6e:	bf00      	nop
 8005e70:	58024400 	.word	0x58024400
 8005e74:	fffffc0c 	.word	0xfffffc0c
 8005e78:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005e7c:	4b21      	ldr	r3, [pc, #132]	; (8005f04 <HAL_RCC_OscConfig+0x7cc>)
 8005e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e80:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005e82:	4b20      	ldr	r3, [pc, #128]	; (8005f04 <HAL_RCC_OscConfig+0x7cc>)
 8005e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e86:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d031      	beq.n	8005ef4 <HAL_RCC_OscConfig+0x7bc>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	f003 0203 	and.w	r2, r3, #3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d12a      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	091b      	lsrs	r3, r3, #4
 8005ea2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d122      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x7bc>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d11a      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	0a5b      	lsrs	r3, r3, #9
 8005ec2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eca:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d111      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	0c1b      	lsrs	r3, r3, #16
 8005ed4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005edc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d108      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	0e1b      	lsrs	r3, r3, #24
 8005ee6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eee:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d001      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x7c0>
      {
        return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e000      	b.n	8005efa <HAL_RCC_OscConfig+0x7c2>
      }
    }
  }
  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3730      	adds	r7, #48	; 0x30
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	58024400 	.word	0x58024400

08005f08 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d101      	bne.n	8005f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e19c      	b.n	8006256 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f1c:	4b8a      	ldr	r3, [pc, #552]	; (8006148 <HAL_RCC_ClockConfig+0x240>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 030f 	and.w	r3, r3, #15
 8005f24:	683a      	ldr	r2, [r7, #0]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d910      	bls.n	8005f4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f2a:	4b87      	ldr	r3, [pc, #540]	; (8006148 <HAL_RCC_ClockConfig+0x240>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f023 020f 	bic.w	r2, r3, #15
 8005f32:	4985      	ldr	r1, [pc, #532]	; (8006148 <HAL_RCC_ClockConfig+0x240>)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f3a:	4b83      	ldr	r3, [pc, #524]	; (8006148 <HAL_RCC_ClockConfig+0x240>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 030f 	and.w	r3, r3, #15
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d001      	beq.n	8005f4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e184      	b.n	8006256 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0304 	and.w	r3, r3, #4
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d010      	beq.n	8005f7a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	691a      	ldr	r2, [r3, #16]
 8005f5c:	4b7b      	ldr	r3, [pc, #492]	; (800614c <HAL_RCC_ClockConfig+0x244>)
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d908      	bls.n	8005f7a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005f68:	4b78      	ldr	r3, [pc, #480]	; (800614c <HAL_RCC_ClockConfig+0x244>)
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	4975      	ldr	r1, [pc, #468]	; (800614c <HAL_RCC_ClockConfig+0x244>)
 8005f76:	4313      	orrs	r3, r2
 8005f78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0308 	and.w	r3, r3, #8
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d010      	beq.n	8005fa8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	695a      	ldr	r2, [r3, #20]
 8005f8a:	4b70      	ldr	r3, [pc, #448]	; (800614c <HAL_RCC_ClockConfig+0x244>)
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d908      	bls.n	8005fa8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005f96:	4b6d      	ldr	r3, [pc, #436]	; (800614c <HAL_RCC_ClockConfig+0x244>)
 8005f98:	69db      	ldr	r3, [r3, #28]
 8005f9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	496a      	ldr	r1, [pc, #424]	; (800614c <HAL_RCC_ClockConfig+0x244>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0310 	and.w	r3, r3, #16
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d010      	beq.n	8005fd6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	699a      	ldr	r2, [r3, #24]
 8005fb8:	4b64      	ldr	r3, [pc, #400]	; (800614c <HAL_RCC_ClockConfig+0x244>)
 8005fba:	69db      	ldr	r3, [r3, #28]
 8005fbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d908      	bls.n	8005fd6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005fc4:	4b61      	ldr	r3, [pc, #388]	; (800614c <HAL_RCC_ClockConfig+0x244>)
 8005fc6:	69db      	ldr	r3, [r3, #28]
 8005fc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	495e      	ldr	r1, [pc, #376]	; (800614c <HAL_RCC_ClockConfig+0x244>)
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 0320 	and.w	r3, r3, #32
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d010      	beq.n	8006004 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	69da      	ldr	r2, [r3, #28]
 8005fe6:	4b59      	ldr	r3, [pc, #356]	; (800614c <HAL_RCC_ClockConfig+0x244>)
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d908      	bls.n	8006004 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005ff2:	4b56      	ldr	r3, [pc, #344]	; (800614c <HAL_RCC_ClockConfig+0x244>)
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	4953      	ldr	r1, [pc, #332]	; (800614c <HAL_RCC_ClockConfig+0x244>)
 8006000:	4313      	orrs	r3, r2
 8006002:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0302 	and.w	r3, r3, #2
 800600c:	2b00      	cmp	r3, #0
 800600e:	d010      	beq.n	8006032 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	68da      	ldr	r2, [r3, #12]
 8006014:	4b4d      	ldr	r3, [pc, #308]	; (800614c <HAL_RCC_ClockConfig+0x244>)
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	f003 030f 	and.w	r3, r3, #15
 800601c:	429a      	cmp	r2, r3
 800601e:	d908      	bls.n	8006032 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006020:	4b4a      	ldr	r3, [pc, #296]	; (800614c <HAL_RCC_ClockConfig+0x244>)
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	f023 020f 	bic.w	r2, r3, #15
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	4947      	ldr	r1, [pc, #284]	; (800614c <HAL_RCC_ClockConfig+0x244>)
 800602e:	4313      	orrs	r3, r2
 8006030:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0301 	and.w	r3, r3, #1
 800603a:	2b00      	cmp	r3, #0
 800603c:	d055      	beq.n	80060ea <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800603e:	4b43      	ldr	r3, [pc, #268]	; (800614c <HAL_RCC_ClockConfig+0x244>)
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	4940      	ldr	r1, [pc, #256]	; (800614c <HAL_RCC_ClockConfig+0x244>)
 800604c:	4313      	orrs	r3, r2
 800604e:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	2b02      	cmp	r3, #2
 8006056:	d107      	bne.n	8006068 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006058:	4b3c      	ldr	r3, [pc, #240]	; (800614c <HAL_RCC_ClockConfig+0x244>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d121      	bne.n	80060a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e0f6      	b.n	8006256 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	2b03      	cmp	r3, #3
 800606e:	d107      	bne.n	8006080 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006070:	4b36      	ldr	r3, [pc, #216]	; (800614c <HAL_RCC_ClockConfig+0x244>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d115      	bne.n	80060a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e0ea      	b.n	8006256 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d107      	bne.n	8006098 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006088:	4b30      	ldr	r3, [pc, #192]	; (800614c <HAL_RCC_ClockConfig+0x244>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006090:	2b00      	cmp	r3, #0
 8006092:	d109      	bne.n	80060a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e0de      	b.n	8006256 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006098:	4b2c      	ldr	r3, [pc, #176]	; (800614c <HAL_RCC_ClockConfig+0x244>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0304 	and.w	r3, r3, #4
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d101      	bne.n	80060a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e0d6      	b.n	8006256 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80060a8:	4b28      	ldr	r3, [pc, #160]	; (800614c <HAL_RCC_ClockConfig+0x244>)
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	f023 0207 	bic.w	r2, r3, #7
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	4925      	ldr	r1, [pc, #148]	; (800614c <HAL_RCC_ClockConfig+0x244>)
 80060b6:	4313      	orrs	r3, r2
 80060b8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060ba:	f7fb fc2f 	bl	800191c <HAL_GetTick>
 80060be:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060c0:	e00a      	b.n	80060d8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060c2:	f7fb fc2b 	bl	800191c <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d901      	bls.n	80060d8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e0be      	b.n	8006256 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060d8:	4b1c      	ldr	r3, [pc, #112]	; (800614c <HAL_RCC_ClockConfig+0x244>)
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	00db      	lsls	r3, r3, #3
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d1eb      	bne.n	80060c2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0302 	and.w	r3, r3, #2
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d010      	beq.n	8006118 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68da      	ldr	r2, [r3, #12]
 80060fa:	4b14      	ldr	r3, [pc, #80]	; (800614c <HAL_RCC_ClockConfig+0x244>)
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	f003 030f 	and.w	r3, r3, #15
 8006102:	429a      	cmp	r2, r3
 8006104:	d208      	bcs.n	8006118 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006106:	4b11      	ldr	r3, [pc, #68]	; (800614c <HAL_RCC_ClockConfig+0x244>)
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	f023 020f 	bic.w	r2, r3, #15
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	490e      	ldr	r1, [pc, #56]	; (800614c <HAL_RCC_ClockConfig+0x244>)
 8006114:	4313      	orrs	r3, r2
 8006116:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006118:	4b0b      	ldr	r3, [pc, #44]	; (8006148 <HAL_RCC_ClockConfig+0x240>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 030f 	and.w	r3, r3, #15
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	429a      	cmp	r2, r3
 8006124:	d214      	bcs.n	8006150 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006126:	4b08      	ldr	r3, [pc, #32]	; (8006148 <HAL_RCC_ClockConfig+0x240>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f023 020f 	bic.w	r2, r3, #15
 800612e:	4906      	ldr	r1, [pc, #24]	; (8006148 <HAL_RCC_ClockConfig+0x240>)
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	4313      	orrs	r3, r2
 8006134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006136:	4b04      	ldr	r3, [pc, #16]	; (8006148 <HAL_RCC_ClockConfig+0x240>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 030f 	and.w	r3, r3, #15
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	429a      	cmp	r2, r3
 8006142:	d005      	beq.n	8006150 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e086      	b.n	8006256 <HAL_RCC_ClockConfig+0x34e>
 8006148:	52002000 	.word	0x52002000
 800614c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0304 	and.w	r3, r3, #4
 8006158:	2b00      	cmp	r3, #0
 800615a:	d010      	beq.n	800617e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	691a      	ldr	r2, [r3, #16]
 8006160:	4b3f      	ldr	r3, [pc, #252]	; (8006260 <HAL_RCC_ClockConfig+0x358>)
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006168:	429a      	cmp	r2, r3
 800616a:	d208      	bcs.n	800617e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800616c:	4b3c      	ldr	r3, [pc, #240]	; (8006260 <HAL_RCC_ClockConfig+0x358>)
 800616e:	699b      	ldr	r3, [r3, #24]
 8006170:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	4939      	ldr	r1, [pc, #228]	; (8006260 <HAL_RCC_ClockConfig+0x358>)
 800617a:	4313      	orrs	r3, r2
 800617c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0308 	and.w	r3, r3, #8
 8006186:	2b00      	cmp	r3, #0
 8006188:	d010      	beq.n	80061ac <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	695a      	ldr	r2, [r3, #20]
 800618e:	4b34      	ldr	r3, [pc, #208]	; (8006260 <HAL_RCC_ClockConfig+0x358>)
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006196:	429a      	cmp	r2, r3
 8006198:	d208      	bcs.n	80061ac <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800619a:	4b31      	ldr	r3, [pc, #196]	; (8006260 <HAL_RCC_ClockConfig+0x358>)
 800619c:	69db      	ldr	r3, [r3, #28]
 800619e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	492e      	ldr	r1, [pc, #184]	; (8006260 <HAL_RCC_ClockConfig+0x358>)
 80061a8:	4313      	orrs	r3, r2
 80061aa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0310 	and.w	r3, r3, #16
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d010      	beq.n	80061da <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	699a      	ldr	r2, [r3, #24]
 80061bc:	4b28      	ldr	r3, [pc, #160]	; (8006260 <HAL_RCC_ClockConfig+0x358>)
 80061be:	69db      	ldr	r3, [r3, #28]
 80061c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d208      	bcs.n	80061da <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80061c8:	4b25      	ldr	r3, [pc, #148]	; (8006260 <HAL_RCC_ClockConfig+0x358>)
 80061ca:	69db      	ldr	r3, [r3, #28]
 80061cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	4922      	ldr	r1, [pc, #136]	; (8006260 <HAL_RCC_ClockConfig+0x358>)
 80061d6:	4313      	orrs	r3, r2
 80061d8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 0320 	and.w	r3, r3, #32
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d010      	beq.n	8006208 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	69da      	ldr	r2, [r3, #28]
 80061ea:	4b1d      	ldr	r3, [pc, #116]	; (8006260 <HAL_RCC_ClockConfig+0x358>)
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d208      	bcs.n	8006208 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80061f6:	4b1a      	ldr	r3, [pc, #104]	; (8006260 <HAL_RCC_ClockConfig+0x358>)
 80061f8:	6a1b      	ldr	r3, [r3, #32]
 80061fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	69db      	ldr	r3, [r3, #28]
 8006202:	4917      	ldr	r1, [pc, #92]	; (8006260 <HAL_RCC_ClockConfig+0x358>)
 8006204:	4313      	orrs	r3, r2
 8006206:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006208:	f000 f834 	bl	8006274 <HAL_RCC_GetSysClockFreq>
 800620c:	4601      	mov	r1, r0
 800620e:	4b14      	ldr	r3, [pc, #80]	; (8006260 <HAL_RCC_ClockConfig+0x358>)
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	0a1b      	lsrs	r3, r3, #8
 8006214:	f003 030f 	and.w	r3, r3, #15
 8006218:	4a12      	ldr	r2, [pc, #72]	; (8006264 <HAL_RCC_ClockConfig+0x35c>)
 800621a:	5cd3      	ldrb	r3, [r2, r3]
 800621c:	f003 031f 	and.w	r3, r3, #31
 8006220:	fa21 f303 	lsr.w	r3, r1, r3
 8006224:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006226:	4b0e      	ldr	r3, [pc, #56]	; (8006260 <HAL_RCC_ClockConfig+0x358>)
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	f003 030f 	and.w	r3, r3, #15
 800622e:	4a0d      	ldr	r2, [pc, #52]	; (8006264 <HAL_RCC_ClockConfig+0x35c>)
 8006230:	5cd3      	ldrb	r3, [r2, r3]
 8006232:	f003 031f 	and.w	r3, r3, #31
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	fa22 f303 	lsr.w	r3, r2, r3
 800623c:	4a0a      	ldr	r2, [pc, #40]	; (8006268 <HAL_RCC_ClockConfig+0x360>)
 800623e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006240:	4a0a      	ldr	r2, [pc, #40]	; (800626c <HAL_RCC_ClockConfig+0x364>)
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006246:	4b0a      	ldr	r3, [pc, #40]	; (8006270 <HAL_RCC_ClockConfig+0x368>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4618      	mov	r0, r3
 800624c:	f7fb fb1c 	bl	8001888 <HAL_InitTick>
 8006250:	4603      	mov	r3, r0
 8006252:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006254:	7bfb      	ldrb	r3, [r7, #15]
}
 8006256:	4618      	mov	r0, r3
 8006258:	3718      	adds	r7, #24
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	58024400 	.word	0x58024400
 8006264:	0800b108 	.word	0x0800b108
 8006268:	24000004 	.word	0x24000004
 800626c:	24000000 	.word	0x24000000
 8006270:	24000008 	.word	0x24000008

08006274 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006274:	b480      	push	{r7}
 8006276:	b089      	sub	sp, #36	; 0x24
 8006278:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800627a:	4baf      	ldr	r3, [pc, #700]	; (8006538 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006282:	2b18      	cmp	r3, #24
 8006284:	f200 814e 	bhi.w	8006524 <HAL_RCC_GetSysClockFreq+0x2b0>
 8006288:	a201      	add	r2, pc, #4	; (adr r2, 8006290 <HAL_RCC_GetSysClockFreq+0x1c>)
 800628a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800628e:	bf00      	nop
 8006290:	080062f5 	.word	0x080062f5
 8006294:	08006525 	.word	0x08006525
 8006298:	08006525 	.word	0x08006525
 800629c:	08006525 	.word	0x08006525
 80062a0:	08006525 	.word	0x08006525
 80062a4:	08006525 	.word	0x08006525
 80062a8:	08006525 	.word	0x08006525
 80062ac:	08006525 	.word	0x08006525
 80062b0:	0800631b 	.word	0x0800631b
 80062b4:	08006525 	.word	0x08006525
 80062b8:	08006525 	.word	0x08006525
 80062bc:	08006525 	.word	0x08006525
 80062c0:	08006525 	.word	0x08006525
 80062c4:	08006525 	.word	0x08006525
 80062c8:	08006525 	.word	0x08006525
 80062cc:	08006525 	.word	0x08006525
 80062d0:	08006321 	.word	0x08006321
 80062d4:	08006525 	.word	0x08006525
 80062d8:	08006525 	.word	0x08006525
 80062dc:	08006525 	.word	0x08006525
 80062e0:	08006525 	.word	0x08006525
 80062e4:	08006525 	.word	0x08006525
 80062e8:	08006525 	.word	0x08006525
 80062ec:	08006525 	.word	0x08006525
 80062f0:	08006327 	.word	0x08006327
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062f4:	4b90      	ldr	r3, [pc, #576]	; (8006538 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0320 	and.w	r3, r3, #32
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d009      	beq.n	8006314 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006300:	4b8d      	ldr	r3, [pc, #564]	; (8006538 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	08db      	lsrs	r3, r3, #3
 8006306:	f003 0303 	and.w	r3, r3, #3
 800630a:	4a8c      	ldr	r2, [pc, #560]	; (800653c <HAL_RCC_GetSysClockFreq+0x2c8>)
 800630c:	fa22 f303 	lsr.w	r3, r2, r3
 8006310:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006312:	e10a      	b.n	800652a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006314:	4b89      	ldr	r3, [pc, #548]	; (800653c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006316:	61bb      	str	r3, [r7, #24]
    break;
 8006318:	e107      	b.n	800652a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800631a:	4b89      	ldr	r3, [pc, #548]	; (8006540 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800631c:	61bb      	str	r3, [r7, #24]
    break;
 800631e:	e104      	b.n	800652a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006320:	4b88      	ldr	r3, [pc, #544]	; (8006544 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8006322:	61bb      	str	r3, [r7, #24]
    break;
 8006324:	e101      	b.n	800652a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006326:	4b84      	ldr	r3, [pc, #528]	; (8006538 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800632a:	f003 0303 	and.w	r3, r3, #3
 800632e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006330:	4b81      	ldr	r3, [pc, #516]	; (8006538 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006334:	091b      	lsrs	r3, r3, #4
 8006336:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800633a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800633c:	4b7e      	ldr	r3, [pc, #504]	; (8006538 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800633e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006346:	4b7c      	ldr	r3, [pc, #496]	; (8006538 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800634a:	08db      	lsrs	r3, r3, #3
 800634c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	fb02 f303 	mul.w	r3, r2, r3
 8006356:	ee07 3a90 	vmov	s15, r3
 800635a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800635e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	2b00      	cmp	r3, #0
 8006366:	f000 80da 	beq.w	800651e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d05a      	beq.n	8006426 <HAL_RCC_GetSysClockFreq+0x1b2>
 8006370:	2b01      	cmp	r3, #1
 8006372:	d302      	bcc.n	800637a <HAL_RCC_GetSysClockFreq+0x106>
 8006374:	2b02      	cmp	r3, #2
 8006376:	d078      	beq.n	800646a <HAL_RCC_GetSysClockFreq+0x1f6>
 8006378:	e099      	b.n	80064ae <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800637a:	4b6f      	ldr	r3, [pc, #444]	; (8006538 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0320 	and.w	r3, r3, #32
 8006382:	2b00      	cmp	r3, #0
 8006384:	d02d      	beq.n	80063e2 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006386:	4b6c      	ldr	r3, [pc, #432]	; (8006538 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	08db      	lsrs	r3, r3, #3
 800638c:	f003 0303 	and.w	r3, r3, #3
 8006390:	4a6a      	ldr	r2, [pc, #424]	; (800653c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006392:	fa22 f303 	lsr.w	r3, r2, r3
 8006396:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	ee07 3a90 	vmov	s15, r3
 800639e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	ee07 3a90 	vmov	s15, r3
 80063a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063b0:	4b61      	ldr	r3, [pc, #388]	; (8006538 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80063b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063b8:	ee07 3a90 	vmov	s15, r3
 80063bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80063c4:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006548 <HAL_RCC_GetSysClockFreq+0x2d4>
 80063c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063dc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80063e0:	e087      	b.n	80064f2 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	ee07 3a90 	vmov	s15, r3
 80063e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ec:	eddf 6a57 	vldr	s13, [pc, #348]	; 800654c <HAL_RCC_GetSysClockFreq+0x2d8>
 80063f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063f4:	4b50      	ldr	r3, [pc, #320]	; (8006538 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80063f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063fc:	ee07 3a90 	vmov	s15, r3
 8006400:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006404:	ed97 6a02 	vldr	s12, [r7, #8]
 8006408:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006548 <HAL_RCC_GetSysClockFreq+0x2d4>
 800640c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006410:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006414:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006418:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800641c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006420:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006424:	e065      	b.n	80064f2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	ee07 3a90 	vmov	s15, r3
 800642c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006430:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006550 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006434:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006438:	4b3f      	ldr	r3, [pc, #252]	; (8006538 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800643a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006440:	ee07 3a90 	vmov	s15, r3
 8006444:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006448:	ed97 6a02 	vldr	s12, [r7, #8]
 800644c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006548 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006450:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006454:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006458:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800645c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006464:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006468:	e043      	b.n	80064f2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	ee07 3a90 	vmov	s15, r3
 8006470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006474:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006554 <HAL_RCC_GetSysClockFreq+0x2e0>
 8006478:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800647c:	4b2e      	ldr	r3, [pc, #184]	; (8006538 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800647e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006484:	ee07 3a90 	vmov	s15, r3
 8006488:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800648c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006490:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006548 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006494:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006498:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800649c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064ac:	e021      	b.n	80064f2 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	ee07 3a90 	vmov	s15, r3
 80064b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064b8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006550 <HAL_RCC_GetSysClockFreq+0x2dc>
 80064bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064c0:	4b1d      	ldr	r3, [pc, #116]	; (8006538 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80064c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064c8:	ee07 3a90 	vmov	s15, r3
 80064cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80064d4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006548 <HAL_RCC_GetSysClockFreq+0x2d4>
 80064d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064f0:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80064f2:	4b11      	ldr	r3, [pc, #68]	; (8006538 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80064f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f6:	0a5b      	lsrs	r3, r3, #9
 80064f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064fc:	3301      	adds	r3, #1
 80064fe:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	ee07 3a90 	vmov	s15, r3
 8006506:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800650a:	edd7 6a07 	vldr	s13, [r7, #28]
 800650e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006512:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006516:	ee17 3a90 	vmov	r3, s15
 800651a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800651c:	e005      	b.n	800652a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800651e:	2300      	movs	r3, #0
 8006520:	61bb      	str	r3, [r7, #24]
    break;
 8006522:	e002      	b.n	800652a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006524:	4b06      	ldr	r3, [pc, #24]	; (8006540 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006526:	61bb      	str	r3, [r7, #24]
    break;
 8006528:	bf00      	nop
  }

  return sysclockfreq;
 800652a:	69bb      	ldr	r3, [r7, #24]
}
 800652c:	4618      	mov	r0, r3
 800652e:	3724      	adds	r7, #36	; 0x24
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr
 8006538:	58024400 	.word	0x58024400
 800653c:	03d09000 	.word	0x03d09000
 8006540:	003d0900 	.word	0x003d0900
 8006544:	007a1200 	.word	0x007a1200
 8006548:	46000000 	.word	0x46000000
 800654c:	4c742400 	.word	0x4c742400
 8006550:	4a742400 	.word	0x4a742400
 8006554:	4af42400 	.word	0x4af42400

08006558 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800655e:	f7ff fe89 	bl	8006274 <HAL_RCC_GetSysClockFreq>
 8006562:	4601      	mov	r1, r0
 8006564:	4b10      	ldr	r3, [pc, #64]	; (80065a8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	0a1b      	lsrs	r3, r3, #8
 800656a:	f003 030f 	and.w	r3, r3, #15
 800656e:	4a0f      	ldr	r2, [pc, #60]	; (80065ac <HAL_RCC_GetHCLKFreq+0x54>)
 8006570:	5cd3      	ldrb	r3, [r2, r3]
 8006572:	f003 031f 	and.w	r3, r3, #31
 8006576:	fa21 f303 	lsr.w	r3, r1, r3
 800657a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800657c:	4b0a      	ldr	r3, [pc, #40]	; (80065a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	f003 030f 	and.w	r3, r3, #15
 8006584:	4a09      	ldr	r2, [pc, #36]	; (80065ac <HAL_RCC_GetHCLKFreq+0x54>)
 8006586:	5cd3      	ldrb	r3, [r2, r3]
 8006588:	f003 031f 	and.w	r3, r3, #31
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	fa22 f303 	lsr.w	r3, r2, r3
 8006592:	4a07      	ldr	r2, [pc, #28]	; (80065b0 <HAL_RCC_GetHCLKFreq+0x58>)
 8006594:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006596:	4a07      	ldr	r2, [pc, #28]	; (80065b4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800659c:	4b04      	ldr	r3, [pc, #16]	; (80065b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800659e:	681b      	ldr	r3, [r3, #0]
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	58024400 	.word	0x58024400
 80065ac:	0800b108 	.word	0x0800b108
 80065b0:	24000004 	.word	0x24000004
 80065b4:	24000000 	.word	0x24000000

080065b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80065bc:	f7ff ffcc 	bl	8006558 <HAL_RCC_GetHCLKFreq>
 80065c0:	4601      	mov	r1, r0
 80065c2:	4b06      	ldr	r3, [pc, #24]	; (80065dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	091b      	lsrs	r3, r3, #4
 80065c8:	f003 0307 	and.w	r3, r3, #7
 80065cc:	4a04      	ldr	r2, [pc, #16]	; (80065e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80065ce:	5cd3      	ldrb	r3, [r2, r3]
 80065d0:	f003 031f 	and.w	r3, r3, #31
 80065d4:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 80065d8:	4618      	mov	r0, r3
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	58024400 	.word	0x58024400
 80065e0:	0800b108 	.word	0x0800b108

080065e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80065e8:	f7ff ffb6 	bl	8006558 <HAL_RCC_GetHCLKFreq>
 80065ec:	4601      	mov	r1, r0
 80065ee:	4b06      	ldr	r3, [pc, #24]	; (8006608 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065f0:	69db      	ldr	r3, [r3, #28]
 80065f2:	0a1b      	lsrs	r3, r3, #8
 80065f4:	f003 0307 	and.w	r3, r3, #7
 80065f8:	4a04      	ldr	r2, [pc, #16]	; (800660c <HAL_RCC_GetPCLK2Freq+0x28>)
 80065fa:	5cd3      	ldrb	r3, [r2, r3]
 80065fc:	f003 031f 	and.w	r3, r3, #31
 8006600:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 8006604:	4618      	mov	r0, r3
 8006606:	bd80      	pop	{r7, pc}
 8006608:	58024400 	.word	0x58024400
 800660c:	0800b108 	.word	0x0800b108

08006610 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b086      	sub	sp, #24
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006618:	2300      	movs	r3, #0
 800661a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800661c:	2300      	movs	r3, #0
 800661e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d03d      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006630:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006634:	d013      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006636:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800663a:	d802      	bhi.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800663c:	2b00      	cmp	r3, #0
 800663e:	d007      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006640:	e01f      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006642:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006646:	d013      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006648:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800664c:	d01c      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800664e:	e018      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006650:	4bad      	ldr	r3, [pc, #692]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006654:	4aac      	ldr	r2, [pc, #688]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006656:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800665a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800665c:	e015      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	3304      	adds	r3, #4
 8006662:	2102      	movs	r1, #2
 8006664:	4618      	mov	r0, r3
 8006666:	f001 fca7 	bl	8007fb8 <RCCEx_PLL2_Config>
 800666a:	4603      	mov	r3, r0
 800666c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800666e:	e00c      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	3324      	adds	r3, #36	; 0x24
 8006674:	2102      	movs	r1, #2
 8006676:	4618      	mov	r0, r3
 8006678:	f001 fd50 	bl	800811c <RCCEx_PLL3_Config>
 800667c:	4603      	mov	r3, r0
 800667e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006680:	e003      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	75fb      	strb	r3, [r7, #23]
      break;
 8006686:	e000      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006688:	bf00      	nop
    }

    if(ret == HAL_OK)
 800668a:	7dfb      	ldrb	r3, [r7, #23]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d109      	bne.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006690:	4b9d      	ldr	r3, [pc, #628]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006694:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800669c:	499a      	ldr	r1, [pc, #616]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800669e:	4313      	orrs	r3, r2
 80066a0:	650b      	str	r3, [r1, #80]	; 0x50
 80066a2:	e001      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a4:	7dfb      	ldrb	r3, [r7, #23]
 80066a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d03d      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066b8:	2b04      	cmp	r3, #4
 80066ba:	d826      	bhi.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80066bc:	a201      	add	r2, pc, #4	; (adr r2, 80066c4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80066be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c2:	bf00      	nop
 80066c4:	080066d9 	.word	0x080066d9
 80066c8:	080066e7 	.word	0x080066e7
 80066cc:	080066f9 	.word	0x080066f9
 80066d0:	08006711 	.word	0x08006711
 80066d4:	08006711 	.word	0x08006711
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066d8:	4b8b      	ldr	r3, [pc, #556]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80066da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066dc:	4a8a      	ldr	r2, [pc, #552]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80066de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80066e4:	e015      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	3304      	adds	r3, #4
 80066ea:	2100      	movs	r1, #0
 80066ec:	4618      	mov	r0, r3
 80066ee:	f001 fc63 	bl	8007fb8 <RCCEx_PLL2_Config>
 80066f2:	4603      	mov	r3, r0
 80066f4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80066f6:	e00c      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	3324      	adds	r3, #36	; 0x24
 80066fc:	2100      	movs	r1, #0
 80066fe:	4618      	mov	r0, r3
 8006700:	f001 fd0c 	bl	800811c <RCCEx_PLL3_Config>
 8006704:	4603      	mov	r3, r0
 8006706:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006708:	e003      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	75fb      	strb	r3, [r7, #23]
      break;
 800670e:	e000      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006710:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006712:	7dfb      	ldrb	r3, [r7, #23]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d109      	bne.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006718:	4b7b      	ldr	r3, [pc, #492]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800671a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800671c:	f023 0207 	bic.w	r2, r3, #7
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006724:	4978      	ldr	r1, [pc, #480]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006726:	4313      	orrs	r3, r2
 8006728:	650b      	str	r3, [r1, #80]	; 0x50
 800672a:	e001      	b.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800672c:	7dfb      	ldrb	r3, [r7, #23]
 800672e:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006738:	2b00      	cmp	r3, #0
 800673a:	d043      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006740:	2b80      	cmp	r3, #128	; 0x80
 8006742:	d01f      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8006744:	2b80      	cmp	r3, #128	; 0x80
 8006746:	d804      	bhi.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00b      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800674c:	2b40      	cmp	r3, #64	; 0x40
 800674e:	d010      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8006750:	e021      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006752:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006756:	d021      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006758:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800675c:	d020      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800675e:	2bc0      	cmp	r3, #192	; 0xc0
 8006760:	d020      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8006762:	e018      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006764:	4b68      	ldr	r3, [pc, #416]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006768:	4a67      	ldr	r2, [pc, #412]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800676a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800676e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8006770:	e019      	b.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x196>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	3304      	adds	r3, #4
 8006776:	2100      	movs	r1, #0
 8006778:	4618      	mov	r0, r3
 800677a:	f001 fc1d 	bl	8007fb8 <RCCEx_PLL2_Config>
 800677e:	4603      	mov	r3, r0
 8006780:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8006782:	e010      	b.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x196>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	3324      	adds	r3, #36	; 0x24
 8006788:	2100      	movs	r1, #0
 800678a:	4618      	mov	r0, r3
 800678c:	f001 fcc6 	bl	800811c <RCCEx_PLL3_Config>
 8006790:	4603      	mov	r3, r0
 8006792:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8006794:	e007      	b.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	75fb      	strb	r3, [r7, #23]
      break;
 800679a:	e004      	b.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 800679c:	bf00      	nop
 800679e:	e002      	b.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 80067a0:	bf00      	nop
 80067a2:	e000      	b.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 80067a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067a6:	7dfb      	ldrb	r3, [r7, #23]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d109      	bne.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80067ac:	4b56      	ldr	r3, [pc, #344]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80067ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067b0:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067b8:	4953      	ldr	r1, [pc, #332]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80067ba:	4313      	orrs	r3, r2
 80067bc:	650b      	str	r3, [r1, #80]	; 0x50
 80067be:	e001      	b.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067c0:	7dfb      	ldrb	r3, [r7, #23]
 80067c2:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d047      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067d8:	d022      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80067da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067de:	d805      	bhi.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00d      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80067e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067e8:	d011      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80067ea:	e022      	b.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x222>
 80067ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067f0:	d022      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x228>
 80067f2:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80067f6:	d021      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x22c>
 80067f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80067fc:	d020      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80067fe:	e018      	b.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x222>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006800:	4b41      	ldr	r3, [pc, #260]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006804:	4a40      	ldr	r2, [pc, #256]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006806:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800680a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800680c:	e019      	b.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x232>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	3304      	adds	r3, #4
 8006812:	2100      	movs	r1, #0
 8006814:	4618      	mov	r0, r3
 8006816:	f001 fbcf 	bl	8007fb8 <RCCEx_PLL2_Config>
 800681a:	4603      	mov	r3, r0
 800681c:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800681e:	e010      	b.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x232>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	3324      	adds	r3, #36	; 0x24
 8006824:	2100      	movs	r1, #0
 8006826:	4618      	mov	r0, r3
 8006828:	f001 fc78 	bl	800811c <RCCEx_PLL3_Config>
 800682c:	4603      	mov	r3, r0
 800682e:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006830:	e007      	b.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x232>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	75fb      	strb	r3, [r7, #23]
      break;
 8006836:	e004      	b.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 8006838:	bf00      	nop
 800683a:	e002      	b.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 800683c:	bf00      	nop
 800683e:	e000      	b.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 8006840:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006842:	7dfb      	ldrb	r3, [r7, #23]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d109      	bne.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x24c>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8006848:	4b2f      	ldr	r3, [pc, #188]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800684a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800684c:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006854:	492c      	ldr	r1, [pc, #176]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006856:	4313      	orrs	r3, r2
 8006858:	650b      	str	r3, [r1, #80]	; 0x50
 800685a:	e001      	b.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x250>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800685c:	7dfb      	ldrb	r3, [r7, #23]
 800685e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d032      	beq.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006870:	2b10      	cmp	r3, #16
 8006872:	d009      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8006874:	2b10      	cmp	r3, #16
 8006876:	d802      	bhi.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006878:	2b00      	cmp	r3, #0
 800687a:	d018      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x29e>
 800687c:	e014      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800687e:	2b20      	cmp	r3, #32
 8006880:	d009      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006882:	2b30      	cmp	r3, #48	; 0x30
 8006884:	d015      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 8006886:	e00f      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x298>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006888:	4b1f      	ldr	r3, [pc, #124]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800688a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688c:	4a1e      	ldr	r2, [pc, #120]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800688e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006892:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006894:	e00e      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	3304      	adds	r3, #4
 800689a:	2102      	movs	r1, #2
 800689c:	4618      	mov	r0, r3
 800689e:	f001 fb8b 	bl	8007fb8 <RCCEx_PLL2_Config>
 80068a2:	4603      	mov	r3, r0
 80068a4:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80068a6:	e005      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	75fb      	strb	r3, [r7, #23]
      break;
 80068ac:	e002      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      break;
 80068ae:	bf00      	nop
 80068b0:	e000      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      break;
 80068b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068b4:	7dfb      	ldrb	r3, [r7, #23]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d109      	bne.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80068ba:	4b13      	ldr	r3, [pc, #76]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80068bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068c6:	4910      	ldr	r1, [pc, #64]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80068c8:	4313      	orrs	r3, r2
 80068ca:	64cb      	str	r3, [r1, #76]	; 0x4c
 80068cc:	e001      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ce:	7dfb      	ldrb	r3, [r7, #23]
 80068d0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d044      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068e6:	d021      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80068e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ec:	d805      	bhi.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x2ea>
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00c      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80068f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068f6:	d010      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x30a>
 80068f8:	e021      	b.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80068fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068fe:	d021      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x334>
 8006900:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006904:	d020      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8006906:	e01a      	b.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006908:	58024400 	.word	0x58024400
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800690c:	4ba6      	ldr	r3, [pc, #664]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800690e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006910:	4aa5      	ldr	r2, [pc, #660]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006916:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006918:	e017      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x33a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	3304      	adds	r3, #4
 800691e:	2100      	movs	r1, #0
 8006920:	4618      	mov	r0, r3
 8006922:	f001 fb49 	bl	8007fb8 <RCCEx_PLL2_Config>
 8006926:	4603      	mov	r3, r0
 8006928:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800692a:	e00e      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x33a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	3324      	adds	r3, #36	; 0x24
 8006930:	2100      	movs	r1, #0
 8006932:	4618      	mov	r0, r3
 8006934:	f001 fbf2 	bl	800811c <RCCEx_PLL3_Config>
 8006938:	4603      	mov	r3, r0
 800693a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800693c:	e005      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x33a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	75fb      	strb	r3, [r7, #23]
      break;
 8006942:	e002      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x33a>
      break;
 8006944:	bf00      	nop
 8006946:	e000      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x33a>
      break;
 8006948:	bf00      	nop
    }

    if(ret == HAL_OK)
 800694a:	7dfb      	ldrb	r3, [r7, #23]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d109      	bne.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x354>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006950:	4b95      	ldr	r3, [pc, #596]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006954:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800695c:	4992      	ldr	r1, [pc, #584]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800695e:	4313      	orrs	r3, r2
 8006960:	650b      	str	r3, [r1, #80]	; 0x50
 8006962:	e001      	b.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x358>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006964:	7dfb      	ldrb	r3, [r7, #23]
 8006966:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006970:	2b00      	cmp	r3, #0
 8006972:	d042      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006978:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800697c:	d01b      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 800697e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006982:	d805      	bhi.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x380>
 8006984:	2b00      	cmp	r3, #0
 8006986:	d022      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x3be>
 8006988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800698c:	d00a      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x394>
 800698e:	e01b      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8006990:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006994:	d01d      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8006996:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800699a:	d01c      	beq.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 800699c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80069a0:	d01b      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 80069a2:	e011      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	3304      	adds	r3, #4
 80069a8:	2101      	movs	r1, #1
 80069aa:	4618      	mov	r0, r3
 80069ac:	f001 fb04 	bl	8007fb8 <RCCEx_PLL2_Config>
 80069b0:	4603      	mov	r3, r0
 80069b2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80069b4:	e012      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	3324      	adds	r3, #36	; 0x24
 80069ba:	2101      	movs	r1, #1
 80069bc:	4618      	mov	r0, r3
 80069be:	f001 fbad 	bl	800811c <RCCEx_PLL3_Config>
 80069c2:	4603      	mov	r3, r0
 80069c4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80069c6:	e009      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	75fb      	strb	r3, [r7, #23]
      break;
 80069cc:	e006      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 80069ce:	bf00      	nop
 80069d0:	e004      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 80069d2:	bf00      	nop
 80069d4:	e002      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 80069d6:	bf00      	nop
 80069d8:	e000      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 80069da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069dc:	7dfb      	ldrb	r3, [r7, #23]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d109      	bne.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80069e2:	4b71      	ldr	r3, [pc, #452]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80069e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069e6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069ee:	496e      	ldr	r1, [pc, #440]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80069f0:	4313      	orrs	r3, r2
 80069f2:	650b      	str	r3, [r1, #80]	; 0x50
 80069f4:	e001      	b.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069f6:	7dfb      	ldrb	r3, [r7, #23]
 80069f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d049      	beq.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006a0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a10:	d02a      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8006a12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a16:	d808      	bhi.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006a18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a1c:	d00f      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006a1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a22:	d015      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d021      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8006a28:	e01b      	b.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8006a2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a2e:	d01f      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8006a30:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006a34:	d01e      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8006a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a3a:	d01d      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8006a3c:	e011      	b.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x452>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	3304      	adds	r3, #4
 8006a42:	2101      	movs	r1, #1
 8006a44:	4618      	mov	r0, r3
 8006a46:	f001 fab7 	bl	8007fb8 <RCCEx_PLL2_Config>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006a4e:	e014      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	3324      	adds	r3, #36	; 0x24
 8006a54:	2101      	movs	r1, #1
 8006a56:	4618      	mov	r0, r3
 8006a58:	f001 fb60 	bl	800811c <RCCEx_PLL3_Config>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006a60:	e00b      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x46a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	75fb      	strb	r3, [r7, #23]
      break;
 8006a66:	e008      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006a68:	bf00      	nop
 8006a6a:	e006      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006a6c:	bf00      	nop
 8006a6e:	e004      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006a70:	bf00      	nop
 8006a72:	e002      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006a74:	bf00      	nop
 8006a76:	e000      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006a78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a7a:	7dfb      	ldrb	r3, [r7, #23]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d10a      	bne.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x486>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006a80:	4b49      	ldr	r3, [pc, #292]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a84:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006a8e:	4946      	ldr	r1, [pc, #280]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	658b      	str	r3, [r1, #88]	; 0x58
 8006a94:	e001      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a96:	7dfb      	ldrb	r3, [r7, #23]
 8006a98:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d02d      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006aae:	d005      	beq.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8006ab0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ab4:	d009      	beq.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d013      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006aba:	e00f      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006abc:	4b3a      	ldr	r3, [pc, #232]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac0:	4a39      	ldr	r2, [pc, #228]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006ac2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ac6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006ac8:	e00c      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	3304      	adds	r3, #4
 8006ace:	2101      	movs	r1, #1
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f001 fa71 	bl	8007fb8 <RCCEx_PLL2_Config>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006ada:	e003      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	75fb      	strb	r3, [r7, #23]
      break;
 8006ae0:	e000      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      break;
 8006ae2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ae4:	7dfb      	ldrb	r3, [r7, #23]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d109      	bne.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006aea:	4b2f      	ldr	r3, [pc, #188]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006af6:	492c      	ldr	r1, [pc, #176]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006af8:	4313      	orrs	r3, r2
 8006afa:	650b      	str	r3, [r1, #80]	; 0x50
 8006afc:	e001      	b.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006afe:	7dfb      	ldrb	r3, [r7, #23]
 8006b00:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d031      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x562>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b12:	2b03      	cmp	r3, #3
 8006b14:	d81a      	bhi.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x53c>
 8006b16:	a201      	add	r2, pc, #4	; (adr r2, 8006b1c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1c:	08006b53 	.word	0x08006b53
 8006b20:	08006b2d 	.word	0x08006b2d
 8006b24:	08006b3b 	.word	0x08006b3b
 8006b28:	08006b53 	.word	0x08006b53
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b2c:	4b1e      	ldr	r3, [pc, #120]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b30:	4a1d      	ldr	r2, [pc, #116]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006b38:	e00c      	b.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x544>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	3304      	adds	r3, #4
 8006b3e:	2102      	movs	r1, #2
 8006b40:	4618      	mov	r0, r3
 8006b42:	f001 fa39 	bl	8007fb8 <RCCEx_PLL2_Config>
 8006b46:	4603      	mov	r3, r0
 8006b48:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006b4a:	e003      	b.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x544>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b50:	e000      	b.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x544>
      break;
 8006b52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b54:	7dfb      	ldrb	r3, [r7, #23]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d109      	bne.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006b5a:	4b13      	ldr	r3, [pc, #76]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b5e:	f023 0203 	bic.w	r2, r3, #3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b66:	4910      	ldr	r1, [pc, #64]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006b6c:	e001      	b.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x562>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b6e:	7dfb      	ldrb	r3, [r7, #23]
 8006b70:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f000 808a 	beq.w	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x684>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b80:	4b0a      	ldr	r3, [pc, #40]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a09      	ldr	r2, [pc, #36]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8006b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b8c:	f7fa fec6 	bl	800191c <HAL_GetTick>
 8006b90:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b92:	e00d      	b.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b94:	f7fa fec2 	bl	800191c <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	2b64      	cmp	r3, #100	; 0x64
 8006ba0:	d906      	bls.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        ret = HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	75fb      	strb	r3, [r7, #23]
        break;
 8006ba6:	e009      	b.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8006ba8:	58024400 	.word	0x58024400
 8006bac:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006bb0:	4bba      	ldr	r3, [pc, #744]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x88c>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d0eb      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x584>
      }
    }

    if(ret == HAL_OK)
 8006bbc:	7dfb      	ldrb	r3, [r7, #23]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d166      	bne.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006bc2:	4bb7      	ldr	r3, [pc, #732]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006bc4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006bcc:	4053      	eors	r3, r2
 8006bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d013      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006bd6:	4bb2      	ldr	r3, [pc, #712]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bde:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006be0:	4baf      	ldr	r3, [pc, #700]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be4:	4aae      	ldr	r2, [pc, #696]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bea:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006bec:	4bac      	ldr	r3, [pc, #688]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf0:	4aab      	ldr	r2, [pc, #684]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bf6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006bf8:	4aa9      	ldr	r2, [pc, #676]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c08:	d115      	bne.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x626>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c0a:	f7fa fe87 	bl	800191c <HAL_GetTick>
 8006c0e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c10:	e00b      	b.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x61a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c12:	f7fa fe83 	bl	800191c <HAL_GetTick>
 8006c16:	4602      	mov	r2, r0
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d902      	bls.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x61a>
          {
            ret = HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	75fb      	strb	r3, [r7, #23]
            break;
 8006c28:	e005      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x626>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c2a:	4b9d      	ldr	r3, [pc, #628]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c2e:	f003 0302 	and.w	r3, r3, #2
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d0ed      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x602>
          }
        }
      }

      if(ret == HAL_OK)
 8006c36:	7dfb      	ldrb	r3, [r7, #23]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d126      	bne.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c4a:	d10d      	bne.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x658>
 8006c4c:	4b94      	ldr	r3, [pc, #592]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c5a:	0919      	lsrs	r1, r3, #4
 8006c5c:	4b91      	ldr	r3, [pc, #580]	; (8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8006c5e:	400b      	ands	r3, r1
 8006c60:	498f      	ldr	r1, [pc, #572]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	610b      	str	r3, [r1, #16]
 8006c66:	e005      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006c68:	4b8d      	ldr	r3, [pc, #564]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	4a8c      	ldr	r2, [pc, #560]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006c6e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006c72:	6113      	str	r3, [r2, #16]
 8006c74:	4b8a      	ldr	r3, [pc, #552]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006c76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c82:	4987      	ldr	r1, [pc, #540]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006c84:	4313      	orrs	r3, r2
 8006c86:	670b      	str	r3, [r1, #112]	; 0x70
 8006c88:	e004      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x684>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c8a:	7dfb      	ldrb	r3, [r7, #23]
 8006c8c:	75bb      	strb	r3, [r7, #22]
 8006c8e:	e001      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x684>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c90:	7dfb      	ldrb	r3, [r7, #23]
 8006c92:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d07f      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x790>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ca6:	2b28      	cmp	r3, #40	; 0x28
 8006ca8:	d866      	bhi.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x768>
 8006caa:	a201      	add	r2, pc, #4	; (adr r2, 8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>)
 8006cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb0:	08006d7f 	.word	0x08006d7f
 8006cb4:	08006d79 	.word	0x08006d79
 8006cb8:	08006d79 	.word	0x08006d79
 8006cbc:	08006d79 	.word	0x08006d79
 8006cc0:	08006d79 	.word	0x08006d79
 8006cc4:	08006d79 	.word	0x08006d79
 8006cc8:	08006d79 	.word	0x08006d79
 8006ccc:	08006d79 	.word	0x08006d79
 8006cd0:	08006d55 	.word	0x08006d55
 8006cd4:	08006d79 	.word	0x08006d79
 8006cd8:	08006d79 	.word	0x08006d79
 8006cdc:	08006d79 	.word	0x08006d79
 8006ce0:	08006d79 	.word	0x08006d79
 8006ce4:	08006d79 	.word	0x08006d79
 8006ce8:	08006d79 	.word	0x08006d79
 8006cec:	08006d79 	.word	0x08006d79
 8006cf0:	08006d67 	.word	0x08006d67
 8006cf4:	08006d79 	.word	0x08006d79
 8006cf8:	08006d79 	.word	0x08006d79
 8006cfc:	08006d79 	.word	0x08006d79
 8006d00:	08006d79 	.word	0x08006d79
 8006d04:	08006d79 	.word	0x08006d79
 8006d08:	08006d79 	.word	0x08006d79
 8006d0c:	08006d79 	.word	0x08006d79
 8006d10:	08006d7f 	.word	0x08006d7f
 8006d14:	08006d79 	.word	0x08006d79
 8006d18:	08006d79 	.word	0x08006d79
 8006d1c:	08006d79 	.word	0x08006d79
 8006d20:	08006d79 	.word	0x08006d79
 8006d24:	08006d79 	.word	0x08006d79
 8006d28:	08006d79 	.word	0x08006d79
 8006d2c:	08006d79 	.word	0x08006d79
 8006d30:	08006d7f 	.word	0x08006d7f
 8006d34:	08006d79 	.word	0x08006d79
 8006d38:	08006d79 	.word	0x08006d79
 8006d3c:	08006d79 	.word	0x08006d79
 8006d40:	08006d79 	.word	0x08006d79
 8006d44:	08006d79 	.word	0x08006d79
 8006d48:	08006d79 	.word	0x08006d79
 8006d4c:	08006d79 	.word	0x08006d79
 8006d50:	08006d7f 	.word	0x08006d7f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	3304      	adds	r3, #4
 8006d58:	2101      	movs	r1, #1
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f001 f92c 	bl	8007fb8 <RCCEx_PLL2_Config>
 8006d60:	4603      	mov	r3, r0
 8006d62:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006d64:	e00c      	b.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x770>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	3324      	adds	r3, #36	; 0x24
 8006d6a:	2101      	movs	r1, #1
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f001 f9d5 	bl	800811c <RCCEx_PLL3_Config>
 8006d72:	4603      	mov	r3, r0
 8006d74:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006d76:	e003      	b.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x770>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	75fb      	strb	r3, [r7, #23]
      break;
 8006d7c:	e000      	b.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x770>
      break;
 8006d7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d80:	7dfb      	ldrb	r3, [r7, #23]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10a      	bne.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x78c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006d86:	4b46      	ldr	r3, [pc, #280]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d8a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d94:	4942      	ldr	r1, [pc, #264]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006d96:	4313      	orrs	r3, r2
 8006d98:	654b      	str	r3, [r1, #84]	; 0x54
 8006d9a:	e001      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x790>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d9c:	7dfb      	ldrb	r3, [r7, #23]
 8006d9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0302 	and.w	r3, r3, #2
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d038      	beq.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x80e>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006db0:	2b05      	cmp	r3, #5
 8006db2:	d821      	bhi.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
 8006db4:	a201      	add	r2, pc, #4	; (adr r2, 8006dbc <HAL_RCCEx_PeriphCLKConfig+0x7ac>)
 8006db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dba:	bf00      	nop
 8006dbc:	08006dff 	.word	0x08006dff
 8006dc0:	08006dd5 	.word	0x08006dd5
 8006dc4:	08006de7 	.word	0x08006de7
 8006dc8:	08006dff 	.word	0x08006dff
 8006dcc:	08006dff 	.word	0x08006dff
 8006dd0:	08006dff 	.word	0x08006dff
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	3304      	adds	r3, #4
 8006dd8:	2101      	movs	r1, #1
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f001 f8ec 	bl	8007fb8 <RCCEx_PLL2_Config>
 8006de0:	4603      	mov	r3, r0
 8006de2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006de4:	e00c      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x7f0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	3324      	adds	r3, #36	; 0x24
 8006dea:	2101      	movs	r1, #1
 8006dec:	4618      	mov	r0, r3
 8006dee:	f001 f995 	bl	800811c <RCCEx_PLL3_Config>
 8006df2:	4603      	mov	r3, r0
 8006df4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006df6:	e003      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	75fb      	strb	r3, [r7, #23]
      break;
 8006dfc:	e000      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      break;
 8006dfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e00:	7dfb      	ldrb	r3, [r7, #23]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d109      	bne.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006e06:	4b26      	ldr	r3, [pc, #152]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e0a:	f023 0207 	bic.w	r2, r3, #7
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e12:	4923      	ldr	r1, [pc, #140]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006e14:	4313      	orrs	r3, r2
 8006e16:	654b      	str	r3, [r1, #84]	; 0x54
 8006e18:	e001      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x80e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e1a:	7dfb      	ldrb	r3, [r7, #23]
 8006e1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 0304 	and.w	r3, r3, #4
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d040      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x89c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e30:	2b05      	cmp	r3, #5
 8006e32:	d821      	bhi.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x868>
 8006e34:	a201      	add	r2, pc, #4	; (adr r2, 8006e3c <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 8006e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e3a:	bf00      	nop
 8006e3c:	08006e7f 	.word	0x08006e7f
 8006e40:	08006e55 	.word	0x08006e55
 8006e44:	08006e67 	.word	0x08006e67
 8006e48:	08006e7f 	.word	0x08006e7f
 8006e4c:	08006e7f 	.word	0x08006e7f
 8006e50:	08006e7f 	.word	0x08006e7f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	3304      	adds	r3, #4
 8006e58:	2101      	movs	r1, #1
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f001 f8ac 	bl	8007fb8 <RCCEx_PLL2_Config>
 8006e60:	4603      	mov	r3, r0
 8006e62:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006e64:	e00c      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x870>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	3324      	adds	r3, #36	; 0x24
 8006e6a:	2101      	movs	r1, #1
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f001 f955 	bl	800811c <RCCEx_PLL3_Config>
 8006e72:	4603      	mov	r3, r0
 8006e74:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006e76:	e003      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x870>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e7c:	e000      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x870>
      break;
 8006e7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e80:	7dfb      	ldrb	r3, [r7, #23]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d110      	bne.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x898>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e86:	4b06      	ldr	r3, [pc, #24]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e8a:	f023 0207 	bic.w	r2, r3, #7
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e94:	4902      	ldr	r1, [pc, #8]	; (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006e96:	4313      	orrs	r3, r2
 8006e98:	658b      	str	r3, [r1, #88]	; 0x58
 8006e9a:	e007      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x89c>
 8006e9c:	58024800 	.word	0x58024800
 8006ea0:	58024400 	.word	0x58024400
 8006ea4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ea8:	7dfb      	ldrb	r3, [r7, #23]
 8006eaa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 0320 	and.w	r3, r3, #32
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d044      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ebe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ec2:	d01b      	beq.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8006ec4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ec8:	d805      	bhi.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d022      	beq.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x904>
 8006ece:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ed2:	d00a      	beq.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x8da>
 8006ed4:	e01b      	b.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8006ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eda:	d01d      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x908>
 8006edc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ee0:	d01c      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x90c>
 8006ee2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ee6:	d01b      	beq.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8006ee8:	e011      	b.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	3304      	adds	r3, #4
 8006eee:	2100      	movs	r1, #0
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f001 f861 	bl	8007fb8 <RCCEx_PLL2_Config>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006efa:	e012      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x912>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	3324      	adds	r3, #36	; 0x24
 8006f00:	2102      	movs	r1, #2
 8006f02:	4618      	mov	r0, r3
 8006f04:	f001 f90a 	bl	800811c <RCCEx_PLL3_Config>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006f0c:	e009      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	75fb      	strb	r3, [r7, #23]
      break;
 8006f12:	e006      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8006f14:	bf00      	nop
 8006f16:	e004      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8006f18:	bf00      	nop
 8006f1a:	e002      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8006f1c:	bf00      	nop
 8006f1e:	e000      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8006f20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f22:	7dfb      	ldrb	r3, [r7, #23]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d10a      	bne.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f28:	4bb3      	ldr	r3, [pc, #716]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f2c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f36:	49b0      	ldr	r1, [pc, #704]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	654b      	str	r3, [r1, #84]	; 0x54
 8006f3c:	e001      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x932>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f3e:	7dfb      	ldrb	r3, [r7, #23]
 8006f40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d044      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006f54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f58:	d01b      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x982>
 8006f5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f5e:	d805      	bhi.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d022      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x99a>
 8006f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f68:	d00a      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x970>
 8006f6a:	e01b      	b.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x994>
 8006f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f70:	d01d      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x99e>
 8006f72:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006f76:	d01c      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8006f78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f7c:	d01b      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8006f7e:	e011      	b.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x994>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	3304      	adds	r3, #4
 8006f84:	2100      	movs	r1, #0
 8006f86:	4618      	mov	r0, r3
 8006f88:	f001 f816 	bl	8007fb8 <RCCEx_PLL2_Config>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006f90:	e012      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	3324      	adds	r3, #36	; 0x24
 8006f96:	2102      	movs	r1, #2
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f001 f8bf 	bl	800811c <RCCEx_PLL3_Config>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006fa2:	e009      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8006fa8:	e006      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 8006faa:	bf00      	nop
 8006fac:	e004      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 8006fae:	bf00      	nop
 8006fb0:	e002      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 8006fb2:	bf00      	nop
 8006fb4:	e000      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 8006fb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fb8:	7dfb      	ldrb	r3, [r7, #23]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10a      	bne.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x9c4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006fbe:	4b8e      	ldr	r3, [pc, #568]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fc2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006fcc:	498a      	ldr	r1, [pc, #552]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	658b      	str	r3, [r1, #88]	; 0x58
 8006fd2:	e001      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fd4:	7dfb      	ldrb	r3, [r7, #23]
 8006fd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d044      	beq.n	800706e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006fea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fee:	d01b      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0xa18>
 8006ff0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ff4:	d805      	bhi.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d022      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006ffa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ffe:	d00a      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8007000:	e01b      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8007002:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007006:	d01d      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8007008:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800700c:	d01c      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xa38>
 800700e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007012:	d01b      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 8007014:	e011      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	3304      	adds	r3, #4
 800701a:	2100      	movs	r1, #0
 800701c:	4618      	mov	r0, r3
 800701e:	f000 ffcb 	bl	8007fb8 <RCCEx_PLL2_Config>
 8007022:	4603      	mov	r3, r0
 8007024:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007026:	e012      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	3324      	adds	r3, #36	; 0x24
 800702c:	2102      	movs	r1, #2
 800702e:	4618      	mov	r0, r3
 8007030:	f001 f874 	bl	800811c <RCCEx_PLL3_Config>
 8007034:	4603      	mov	r3, r0
 8007036:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007038:	e009      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	75fb      	strb	r3, [r7, #23]
      break;
 800703e:	e006      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 8007040:	bf00      	nop
 8007042:	e004      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 8007044:	bf00      	nop
 8007046:	e002      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 8007048:	bf00      	nop
 800704a:	e000      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 800704c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800704e:	7dfb      	ldrb	r3, [r7, #23]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d10a      	bne.n	800706a <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007054:	4b68      	ldr	r3, [pc, #416]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007058:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007062:	4965      	ldr	r1, [pc, #404]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007064:	4313      	orrs	r3, r2
 8007066:	658b      	str	r3, [r1, #88]	; 0x58
 8007068:	e001      	b.n	800706e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800706a:	7dfb      	ldrb	r3, [r7, #23]
 800706c:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 0308 	and.w	r3, r3, #8
 8007076:	2b00      	cmp	r3, #0
 8007078:	d01a      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007084:	d10a      	bne.n	800709c <HAL_RCCEx_PeriphCLKConfig+0xa8c>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	3324      	adds	r3, #36	; 0x24
 800708a:	2102      	movs	r1, #2
 800708c:	4618      	mov	r0, r3
 800708e:	f001 f845 	bl	800811c <RCCEx_PLL3_Config>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d001      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0xa8c>
        {
          status = HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800709c:	4b56      	ldr	r3, [pc, #344]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800709e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070aa:	4953      	ldr	r1, [pc, #332]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80070ac:	4313      	orrs	r3, r2
 80070ae:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0310 	and.w	r3, r3, #16
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d01a      	beq.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070c6:	d10a      	bne.n	80070de <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	3324      	adds	r3, #36	; 0x24
 80070cc:	2102      	movs	r1, #2
 80070ce:	4618      	mov	r0, r3
 80070d0:	f001 f824 	bl	800811c <RCCEx_PLL3_Config>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d001      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0xace>
      {
        status = HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80070de:	4b46      	ldr	r3, [pc, #280]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80070e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070ec:	4942      	ldr	r1, [pc, #264]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80070ee:	4313      	orrs	r3, r2
 80070f0:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d030      	beq.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007108:	d00d      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0xb16>
 800710a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800710e:	d016      	beq.n	800713e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8007110:	2b00      	cmp	r3, #0
 8007112:	d111      	bne.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0xb28>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	3304      	adds	r3, #4
 8007118:	2100      	movs	r1, #0
 800711a:	4618      	mov	r0, r3
 800711c:	f000 ff4c 	bl	8007fb8 <RCCEx_PLL2_Config>
 8007120:	4603      	mov	r3, r0
 8007122:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007124:	e00c      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	3324      	adds	r3, #36	; 0x24
 800712a:	2102      	movs	r1, #2
 800712c:	4618      	mov	r0, r3
 800712e:	f000 fff5 	bl	800811c <RCCEx_PLL3_Config>
 8007132:	4603      	mov	r3, r0
 8007134:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007136:	e003      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	75fb      	strb	r3, [r7, #23]
      break;
 800713c:	e000      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800713e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007140:	7dfb      	ldrb	r3, [r7, #23]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d10a      	bne.n	800715c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007146:	4b2c      	ldr	r3, [pc, #176]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800714a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007154:	4928      	ldr	r1, [pc, #160]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007156:	4313      	orrs	r3, r2
 8007158:	658b      	str	r3, [r1, #88]	; 0x58
 800715a:	e001      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800715c:	7dfb      	ldrb	r3, [r7, #23]
 800715e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d02f      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xbbc>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007172:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007176:	d00c      	beq.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007178:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800717c:	d015      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0xb9a>
 800717e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007182:	d10f      	bne.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0xb94>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007184:	4b1c      	ldr	r3, [pc, #112]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007188:	4a1b      	ldr	r2, [pc, #108]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800718a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800718e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007190:	e00c      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0xb9c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	3324      	adds	r3, #36	; 0x24
 8007196:	2101      	movs	r1, #1
 8007198:	4618      	mov	r0, r3
 800719a:	f000 ffbf 	bl	800811c <RCCEx_PLL3_Config>
 800719e:	4603      	mov	r3, r0
 80071a0:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80071a2:	e003      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	75fb      	strb	r3, [r7, #23]
      break;
 80071a8:	e000      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      break;
 80071aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071ac:	7dfb      	ldrb	r3, [r7, #23]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d10a      	bne.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80071b2:	4b11      	ldr	r3, [pc, #68]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80071b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071c0:	490d      	ldr	r1, [pc, #52]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80071c2:	4313      	orrs	r3, r2
 80071c4:	654b      	str	r3, [r1, #84]	; 0x54
 80071c6:	e001      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xbbc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071c8:	7dfb      	ldrb	r3, [r7, #23]
 80071ca:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d02c      	beq.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0xc22>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d003      	beq.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 80071e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071e4:	d00a      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0xbec>
 80071e6:	e012      	b.n	800720e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071e8:	4b03      	ldr	r3, [pc, #12]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80071ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ec:	4a02      	ldr	r2, [pc, #8]	; (80071f8 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80071ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80071f4:	e00e      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0xc04>
 80071f6:	bf00      	nop
 80071f8:	58024400 	.word	0x58024400

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	3304      	adds	r3, #4
 8007200:	2102      	movs	r1, #2
 8007202:	4618      	mov	r0, r3
 8007204:	f000 fed8 	bl	8007fb8 <RCCEx_PLL2_Config>
 8007208:	4603      	mov	r3, r0
 800720a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800720c:	e002      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0xc04>

    default:
      ret = HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	75fb      	strb	r3, [r7, #23]
      break;
 8007212:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007214:	7dfb      	ldrb	r3, [r7, #23]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d109      	bne.n	800722e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800721a:	4b56      	ldr	r3, [pc, #344]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800721c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800721e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007226:	4953      	ldr	r1, [pc, #332]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007228:	4313      	orrs	r3, r2
 800722a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800722c:	e001      	b.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800722e:	7dfb      	ldrb	r3, [r7, #23]
 8007230:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00a      	beq.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0xc44>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	3324      	adds	r3, #36	; 0x24
 8007242:	2102      	movs	r1, #2
 8007244:	4618      	mov	r0, r3
 8007246:	f000 ff69 	bl	800811c <RCCEx_PLL3_Config>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d001      	beq.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0xc44>
    {
      status=HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800725c:	2b00      	cmp	r3, #0
 800725e:	d031      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800726a:	d00c      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800726c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007270:	d802      	bhi.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007272:	2b00      	cmp	r3, #0
 8007274:	d011      	beq.n	800729a <HAL_RCCEx_PeriphCLKConfig+0xc8a>
 8007276:	e00d      	b.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8007278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800727c:	d00f      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0xc8e>
 800727e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007282:	d00e      	beq.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007284:	e006      	b.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0xc84>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007286:	4b3b      	ldr	r3, [pc, #236]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800728a:	4a3a      	ldr	r2, [pc, #232]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800728c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007290:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007292:	e007      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	75fb      	strb	r3, [r7, #23]
      break;
 8007298:	e004      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 800729a:	bf00      	nop
 800729c:	e002      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 800729e:	bf00      	nop
 80072a0:	e000      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 80072a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072a4:	7dfb      	ldrb	r3, [r7, #23]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10a      	bne.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80072aa:	4b32      	ldr	r3, [pc, #200]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80072ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072b8:	492e      	ldr	r1, [pc, #184]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80072ba:	4313      	orrs	r3, r2
 80072bc:	654b      	str	r3, [r1, #84]	; 0x54
 80072be:	e001      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072c0:	7dfb      	ldrb	r3, [r7, #23]
 80072c2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d008      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80072d0:	4b28      	ldr	r3, [pc, #160]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80072d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072dc:	4925      	ldr	r1, [pc, #148]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80072de:	4313      	orrs	r3, r2
 80072e0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d008      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80072ee:	4b21      	ldr	r3, [pc, #132]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80072f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072f2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072fa:	491e      	ldr	r1, [pc, #120]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80072fc:	4313      	orrs	r3, r2
 80072fe:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007308:	2b00      	cmp	r3, #0
 800730a:	d008      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800730c:	4b19      	ldr	r3, [pc, #100]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800730e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007310:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007318:	4916      	ldr	r1, [pc, #88]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800731a:	4313      	orrs	r3, r2
 800731c:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00d      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0xd36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800732a:	4b12      	ldr	r3, [pc, #72]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	4a11      	ldr	r2, [pc, #68]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007330:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007334:	6113      	str	r3, [r2, #16]
 8007336:	4b0f      	ldr	r3, [pc, #60]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007338:	691a      	ldr	r2, [r3, #16]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007340:	490c      	ldr	r1, [pc, #48]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007342:	4313      	orrs	r3, r2
 8007344:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	da08      	bge.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0xd50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800734e:	4b09      	ldr	r3, [pc, #36]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007352:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800735a:	4906      	ldr	r1, [pc, #24]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800735c:	4313      	orrs	r3, r2
 800735e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007360:	7dbb      	ldrb	r3, [r7, #22]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d101      	bne.n	800736a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    return HAL_OK;
 8007366:	2300      	movs	r3, #0
 8007368:	e000      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0xd5c>
  }
  return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
}
 800736c:	4618      	mov	r0, r3
 800736e:	3718      	adds	r7, #24
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	58024400 	.word	0x58024400

08007378 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b090      	sub	sp, #64	; 0x40
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007386:	d150      	bne.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007388:	4ba1      	ldr	r3, [pc, #644]	; (8007610 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800738a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800738c:	f003 0307 	and.w	r3, r3, #7
 8007390:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007394:	2b04      	cmp	r3, #4
 8007396:	d844      	bhi.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8007398:	a201      	add	r2, pc, #4	; (adr r2, 80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800739a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739e:	bf00      	nop
 80073a0:	080073b5 	.word	0x080073b5
 80073a4:	080073c5 	.word	0x080073c5
 80073a8:	080073d5 	.word	0x080073d5
 80073ac:	0800741d 	.word	0x0800741d
 80073b0:	080073e5 	.word	0x080073e5
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073b8:	4618      	mov	r0, r3
 80073ba:	f000 fcb1 	bl	8007d20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80073be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073c2:	e1ef      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073c4:	f107 0318 	add.w	r3, r7, #24
 80073c8:	4618      	mov	r0, r3
 80073ca:	f000 fa11 	bl	80077f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073d2:	e1e7      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073d4:	f107 030c 	add.w	r3, r7, #12
 80073d8:	4618      	mov	r0, r3
 80073da:	f000 fb55 	bl	8007a88 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073e2:	e1df      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80073e4:	4b8a      	ldr	r3, [pc, #552]	; (8007610 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80073e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80073ec:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80073ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d102      	bne.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80073f4:	4b87      	ldr	r3, [pc, #540]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80073f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80073f8:	e1d4      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80073fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007400:	d102      	bne.n	8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8007402:	4b85      	ldr	r3, [pc, #532]	; (8007618 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007404:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007406:	e1cd      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800740a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800740e:	d102      	bne.n	8007416 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8007410:	4b82      	ldr	r3, [pc, #520]	; (800761c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007412:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007414:	e1c6      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 8007416:	2300      	movs	r3, #0
 8007418:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800741a:	e1c3      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800741c:	4b80      	ldr	r3, [pc, #512]	; (8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800741e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007420:	e1c0      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      default :
        {
          frequency = 0;
 8007422:	2300      	movs	r3, #0
 8007424:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007426:	bf00      	nop
 8007428:	e1bc      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007430:	d14f      	bne.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 8007432:	4b77      	ldr	r3, [pc, #476]	; (8007610 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007436:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800743a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800743c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743e:	2b80      	cmp	r3, #128	; 0x80
 8007440:	d01c      	beq.n	800747c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8007442:	2b80      	cmp	r3, #128	; 0x80
 8007444:	d804      	bhi.n	8007450 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007446:	2b00      	cmp	r3, #0
 8007448:	d008      	beq.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800744a:	2b40      	cmp	r3, #64	; 0x40
 800744c:	d00e      	beq.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800744e:	e03c      	b.n	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8007450:	2bc0      	cmp	r3, #192	; 0xc0
 8007452:	d037      	beq.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007458:	d018      	beq.n	800748c <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800745a:	e036      	b.n	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800745c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007460:	4618      	mov	r0, r3
 8007462:	f000 fc5d 	bl	8007d20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007468:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800746a:	e19b      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800746c:	f107 0318 	add.w	r3, r7, #24
 8007470:	4618      	mov	r0, r3
 8007472:	f000 f9bd 	bl	80077f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800747a:	e193      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800747c:	f107 030c 	add.w	r3, r7, #12
 8007480:	4618      	mov	r0, r3
 8007482:	f000 fb01 	bl	8007a88 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800748a:	e18b      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800748c:	4b60      	ldr	r3, [pc, #384]	; (8007610 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800748e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007490:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007494:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007498:	2b00      	cmp	r3, #0
 800749a:	d102      	bne.n	80074a2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800749c:	4b5d      	ldr	r3, [pc, #372]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800749e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80074a0:	e180      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80074a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074a8:	d102      	bne.n	80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 80074aa:	4b5b      	ldr	r3, [pc, #364]	; (8007618 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80074ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074ae:	e179      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80074b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074b6:	d102      	bne.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 80074b8:	4b58      	ldr	r3, [pc, #352]	; (800761c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80074ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074bc:	e172      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 80074be:	2300      	movs	r3, #0
 80074c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074c2:	e16f      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80074c4:	4b56      	ldr	r3, [pc, #344]	; (8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80074c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074c8:	e16c      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 80074ca:	2300      	movs	r3, #0
 80074cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074ce:	bf00      	nop
 80074d0:	e168      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074d8:	d153      	bne.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 80074da:	4b4d      	ldr	r3, [pc, #308]	; (8007610 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80074dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074de:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80074e2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80074e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074ea:	d01f      	beq.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80074ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074f0:	d805      	bhi.n	80074fe <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00a      	beq.n	800750c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80074f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074fa:	d00f      	beq.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80074fc:	e03d      	b.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 80074fe:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007502:	d037      	beq.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8007504:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007508:	d018      	beq.n	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800750a:	e036      	b.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800750c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007510:	4618      	mov	r0, r3
 8007512:	f000 fc05 	bl	8007d20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007518:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800751a:	e143      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800751c:	f107 0318 	add.w	r3, r7, #24
 8007520:	4618      	mov	r0, r3
 8007522:	f000 f965 	bl	80077f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800752a:	e13b      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800752c:	f107 030c 	add.w	r3, r7, #12
 8007530:	4618      	mov	r0, r3
 8007532:	f000 faa9 	bl	8007a88 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800753a:	e133      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800753c:	4b34      	ldr	r3, [pc, #208]	; (8007610 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800753e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007540:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007544:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007548:	2b00      	cmp	r3, #0
 800754a:	d102      	bne.n	8007552 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800754c:	4b31      	ldr	r3, [pc, #196]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800754e:	63fb      	str	r3, [r7, #60]	; 0x3c
          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }
          break;
 8007550:	e128      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007554:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007558:	d102      	bne.n	8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800755a:	4b2f      	ldr	r3, [pc, #188]	; (8007618 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800755c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800755e:	e121      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007562:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007566:	d102      	bne.n	800756e <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8007568:	4b2c      	ldr	r3, [pc, #176]	; (800761c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800756a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800756c:	e11a      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 800756e:	2300      	movs	r3, #0
 8007570:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007572:	e117      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007574:	4b2a      	ldr	r3, [pc, #168]	; (8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007576:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007578:	e114      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 800757a:	2300      	movs	r3, #0
 800757c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800757e:	bf00      	nop
 8007580:	e110      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007588:	d15d      	bne.n	8007646 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800758a:	4b21      	ldr	r3, [pc, #132]	; (8007610 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800758c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800758e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007592:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800759a:	d01f      	beq.n	80075dc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800759c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075a0:	d805      	bhi.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00a      	beq.n	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80075a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075aa:	d00f      	beq.n	80075cc <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80075ac:	e047      	b.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 80075ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80075b2:	d041      	beq.n	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 80075b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075b8:	d018      	beq.n	80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80075ba:	e040      	b.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075c0:	4618      	mov	r0, r3
 80075c2:	f000 fbad 	bl	8007d20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80075c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075ca:	e0eb      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075cc:	f107 0318 	add.w	r3, r7, #24
 80075d0:	4618      	mov	r0, r3
 80075d2:	f000 f90d 	bl	80077f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075da:	e0e3      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075dc:	f107 030c 	add.w	r3, r7, #12
 80075e0:	4618      	mov	r0, r3
 80075e2:	f000 fa51 	bl	8007a88 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075ea:	e0db      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80075ec:	4b08      	ldr	r3, [pc, #32]	; (8007610 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80075ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80075f4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80075f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d102      	bne.n	8007602 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80075fc:	4b05      	ldr	r3, [pc, #20]	; (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80075fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007600:	e0d0      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007604:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007608:	d10c      	bne.n	8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800760a:	4b03      	ldr	r3, [pc, #12]	; (8007618 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800760c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800760e:	e0c9      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
 8007610:	58024400 	.word	0x58024400
 8007614:	03d09000 	.word	0x03d09000
 8007618:	003d0900 	.word	0x003d0900
 800761c:	007a1200 	.word	0x007a1200
 8007620:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007626:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800762a:	d102      	bne.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 800762c:	4b60      	ldr	r3, [pc, #384]	; (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 800762e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007630:	e0b8      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 8007632:	2300      	movs	r3, #0
 8007634:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007636:	e0b5      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007638:	4b5e      	ldr	r3, [pc, #376]	; (80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 800763a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800763c:	e0b2      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      default :
        {
          frequency = 0;
 800763e:	2300      	movs	r3, #0
 8007640:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007642:	bf00      	nop
 8007644:	e0ae      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800764c:	d13d      	bne.n	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0x352>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800764e:	4b5a      	ldr	r3, [pc, #360]	; (80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8007650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007652:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007656:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800765e:	d00c      	beq.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8007660:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007664:	d011      	beq.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 8007666:	2b00      	cmp	r3, #0
 8007668:	d12b      	bne.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800766a:	f107 0318 	add.w	r3, r7, #24
 800766e:	4618      	mov	r0, r3
 8007670:	f000 f8be 	bl	80077f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007678:	e094      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800767a:	f107 030c 	add.w	r3, r7, #12
 800767e:	4618      	mov	r0, r3
 8007680:	f000 fa02 	bl	8007a88 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007688:	e08c      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800768a:	4b4b      	ldr	r3, [pc, #300]	; (80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 800768c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800768e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007692:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007696:	2b00      	cmp	r3, #0
 8007698:	d102      	bne.n	80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800769a:	4b48      	ldr	r3, [pc, #288]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x444>)
 800769c:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800769e:	e081      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80076a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076a6:	d102      	bne.n	80076ae <HAL_RCCEx_GetPeriphCLKFreq+0x336>
            frequency = CSI_VALUE;
 80076a8:	4b45      	ldr	r3, [pc, #276]	; (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x448>)
 80076aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076ac:	e07a      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80076ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076b4:	d102      	bne.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x344>
            frequency = HSE_VALUE;
 80076b6:	4b3e      	ldr	r3, [pc, #248]	; (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80076b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076ba:	e073      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 80076bc:	2300      	movs	r3, #0
 80076be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076c0:	e070      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 80076c2:	2300      	movs	r3, #0
 80076c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076c6:	bf00      	nop
 80076c8:	e06c      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076d0:	d11f      	bne.n	8007712 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80076d2:	4b39      	ldr	r3, [pc, #228]	; (80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 80076d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076da:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80076dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d003      	beq.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80076e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076e6:	d008      	beq.n	80076fa <HAL_RCCEx_GetPeriphCLKFreq+0x382>
 80076e8:	e00f      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0x392>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076ee:	4618      	mov	r0, r3
 80076f0:	f000 fb16 	bl	8007d20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076f8:	e054      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076fa:	f107 0318 	add.w	r3, r7, #24
 80076fe:	4618      	mov	r0, r3
 8007700:	f000 f876 	bl	80077f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007704:	6a3b      	ldr	r3, [r7, #32]
 8007706:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007708:	e04c      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 800770a:	2300      	movs	r3, #0
 800770c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800770e:	bf00      	nop
 8007710:	e048      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007718:	d142      	bne.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800771a:	4b27      	ldr	r3, [pc, #156]	; (80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 800771c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800771e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007722:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007726:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800772a:	d029      	beq.n	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x408>
 800772c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007730:	d808      	bhi.n	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8007732:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007736:	d013      	beq.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007738:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800773c:	d018      	beq.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00a      	beq.n	8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 8007742:	e029      	b.n	8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 8007744:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007748:	d020      	beq.n	800778c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800774a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800774e:	d020      	beq.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 8007750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007754:	d017      	beq.n	8007786 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8007756:	e01f      	b.n	8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007758:	f000 f834 	bl	80077c4 <HAL_RCCEx_GetD3PCLK1Freq>
 800775c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800775e:	e021      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007760:	f107 0318 	add.w	r3, r7, #24
 8007764:	4618      	mov	r0, r3
 8007766:	f000 f843 	bl	80077f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800776e:	e019      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007770:	f107 030c 	add.w	r3, r7, #12
 8007774:	4618      	mov	r0, r3
 8007776:	f000 f987 	bl	8007a88 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800777e:	e011      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8007780:	4b0e      	ldr	r3, [pc, #56]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x444>)
 8007782:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007784:	e00e      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8007786:	4b0e      	ldr	r3, [pc, #56]	; (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x448>)
 8007788:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800778a:	e00b      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800778c:	4b08      	ldr	r3, [pc, #32]	; (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 800778e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007790:	e008      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007792:	4b08      	ldr	r3, [pc, #32]	; (80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 8007794:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007796:	e005      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007798:	2300      	movs	r3, #0
 800779a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800779c:	bf00      	nop
 800779e:	e001      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else
    {
      frequency = 0;
 80077a0:	2300      	movs	r3, #0
 80077a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80077a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3740      	adds	r7, #64	; 0x40
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	007a1200 	.word	0x007a1200
 80077b4:	00bb8000 	.word	0x00bb8000
 80077b8:	58024400 	.word	0x58024400
 80077bc:	03d09000 	.word	0x03d09000
 80077c0:	003d0900 	.word	0x003d0900

080077c4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80077c8:	f7fe fec6 	bl	8006558 <HAL_RCC_GetHCLKFreq>
 80077cc:	4601      	mov	r1, r0
 80077ce:	4b06      	ldr	r3, [pc, #24]	; (80077e8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80077d0:	6a1b      	ldr	r3, [r3, #32]
 80077d2:	091b      	lsrs	r3, r3, #4
 80077d4:	f003 0307 	and.w	r3, r3, #7
 80077d8:	4a04      	ldr	r2, [pc, #16]	; (80077ec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80077da:	5cd3      	ldrb	r3, [r2, r3]
 80077dc:	f003 031f 	and.w	r3, r3, #31
 80077e0:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	58024400 	.word	0x58024400
 80077ec:	0800b108 	.word	0x0800b108

080077f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b089      	sub	sp, #36	; 0x24
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077f8:	4b9d      	ldr	r3, [pc, #628]	; (8007a70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80077fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077fc:	f003 0303 	and.w	r3, r3, #3
 8007800:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007802:	4b9b      	ldr	r3, [pc, #620]	; (8007a70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007806:	0b1b      	lsrs	r3, r3, #12
 8007808:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800780c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800780e:	4b98      	ldr	r3, [pc, #608]	; (8007a70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007812:	091b      	lsrs	r3, r3, #4
 8007814:	f003 0301 	and.w	r3, r3, #1
 8007818:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800781a:	4b95      	ldr	r3, [pc, #596]	; (8007a70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800781c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800781e:	08db      	lsrs	r3, r3, #3
 8007820:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007824:	693a      	ldr	r2, [r7, #16]
 8007826:	fb02 f303 	mul.w	r3, r2, r3
 800782a:	ee07 3a90 	vmov	s15, r3
 800782e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007832:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	2b00      	cmp	r3, #0
 800783a:	f000 810a 	beq.w	8007a52 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	2b01      	cmp	r3, #1
 8007842:	d05a      	beq.n	80078fa <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8007844:	2b01      	cmp	r3, #1
 8007846:	d302      	bcc.n	800784e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8007848:	2b02      	cmp	r3, #2
 800784a:	d078      	beq.n	800793e <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800784c:	e099      	b.n	8007982 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800784e:	4b88      	ldr	r3, [pc, #544]	; (8007a70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f003 0320 	and.w	r3, r3, #32
 8007856:	2b00      	cmp	r3, #0
 8007858:	d02d      	beq.n	80078b6 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800785a:	4b85      	ldr	r3, [pc, #532]	; (8007a70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	08db      	lsrs	r3, r3, #3
 8007860:	f003 0303 	and.w	r3, r3, #3
 8007864:	4a83      	ldr	r2, [pc, #524]	; (8007a74 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007866:	fa22 f303 	lsr.w	r3, r2, r3
 800786a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	ee07 3a90 	vmov	s15, r3
 8007872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	ee07 3a90 	vmov	s15, r3
 800787c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007880:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007884:	4b7a      	ldr	r3, [pc, #488]	; (8007a70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800788c:	ee07 3a90 	vmov	s15, r3
 8007890:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007894:	ed97 6a03 	vldr	s12, [r7, #12]
 8007898:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007a78 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800789c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078b0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80078b4:	e087      	b.n	80079c6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	ee07 3a90 	vmov	s15, r3
 80078bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078c0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007a7c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80078c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078c8:	4b69      	ldr	r3, [pc, #420]	; (8007a70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80078ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078d0:	ee07 3a90 	vmov	s15, r3
 80078d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80078dc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007a78 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80078e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80078f8:	e065      	b.n	80079c6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	ee07 3a90 	vmov	s15, r3
 8007900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007904:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007a80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007908:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800790c:	4b58      	ldr	r3, [pc, #352]	; (8007a70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800790e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007914:	ee07 3a90 	vmov	s15, r3
 8007918:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800791c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007920:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007a78 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007924:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007928:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800792c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007930:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007934:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007938:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800793c:	e043      	b.n	80079c6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	ee07 3a90 	vmov	s15, r3
 8007944:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007948:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007a84 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800794c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007950:	4b47      	ldr	r3, [pc, #284]	; (8007a70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007958:	ee07 3a90 	vmov	s15, r3
 800795c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007960:	ed97 6a03 	vldr	s12, [r7, #12]
 8007964:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007a78 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007968:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800796c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007970:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007974:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800797c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007980:	e021      	b.n	80079c6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	ee07 3a90 	vmov	s15, r3
 8007988:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800798c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007a80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007990:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007994:	4b36      	ldr	r3, [pc, #216]	; (8007a70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800799c:	ee07 3a90 	vmov	s15, r3
 80079a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80079a8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007a78 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80079ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079c4:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80079c6:	4b2a      	ldr	r3, [pc, #168]	; (8007a70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80079c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ca:	0a5b      	lsrs	r3, r3, #9
 80079cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079d0:	ee07 3a90 	vmov	s15, r3
 80079d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80079e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079ec:	ee17 2a90 	vmov	r2, s15
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80079f4:	4b1e      	ldr	r3, [pc, #120]	; (8007a70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80079f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f8:	0c1b      	lsrs	r3, r3, #16
 80079fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079fe:	ee07 3a90 	vmov	s15, r3
 8007a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a1a:	ee17 2a90 	vmov	r2, s15
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007a22:	4b13      	ldr	r3, [pc, #76]	; (8007a70 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a26:	0e1b      	lsrs	r3, r3, #24
 8007a28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a2c:	ee07 3a90 	vmov	s15, r3
 8007a30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a48:	ee17 2a90 	vmov	r2, s15
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007a50:	e008      	b.n	8007a64 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	609a      	str	r2, [r3, #8]
}
 8007a64:	bf00      	nop
 8007a66:	3724      	adds	r7, #36	; 0x24
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr
 8007a70:	58024400 	.word	0x58024400
 8007a74:	03d09000 	.word	0x03d09000
 8007a78:	46000000 	.word	0x46000000
 8007a7c:	4c742400 	.word	0x4c742400
 8007a80:	4a742400 	.word	0x4a742400
 8007a84:	4af42400 	.word	0x4af42400

08007a88 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b089      	sub	sp, #36	; 0x24
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a90:	4b9d      	ldr	r3, [pc, #628]	; (8007d08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a94:	f003 0303 	and.w	r3, r3, #3
 8007a98:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007a9a:	4b9b      	ldr	r3, [pc, #620]	; (8007d08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a9e:	0d1b      	lsrs	r3, r3, #20
 8007aa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007aa4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007aa6:	4b98      	ldr	r3, [pc, #608]	; (8007d08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aaa:	0a1b      	lsrs	r3, r3, #8
 8007aac:	f003 0301 	and.w	r3, r3, #1
 8007ab0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007ab2:	4b95      	ldr	r3, [pc, #596]	; (8007d08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ab6:	08db      	lsrs	r3, r3, #3
 8007ab8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007abc:	693a      	ldr	r2, [r7, #16]
 8007abe:	fb02 f303 	mul.w	r3, r2, r3
 8007ac2:	ee07 3a90 	vmov	s15, r3
 8007ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f000 810a 	beq.w	8007cea <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d05a      	beq.n	8007b92 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d302      	bcc.n	8007ae6 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d078      	beq.n	8007bd6 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8007ae4:	e099      	b.n	8007c1a <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ae6:	4b88      	ldr	r3, [pc, #544]	; (8007d08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f003 0320 	and.w	r3, r3, #32
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d02d      	beq.n	8007b4e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007af2:	4b85      	ldr	r3, [pc, #532]	; (8007d08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	08db      	lsrs	r3, r3, #3
 8007af8:	f003 0303 	and.w	r3, r3, #3
 8007afc:	4a83      	ldr	r2, [pc, #524]	; (8007d0c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007afe:	fa22 f303 	lsr.w	r3, r2, r3
 8007b02:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	ee07 3a90 	vmov	s15, r3
 8007b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	ee07 3a90 	vmov	s15, r3
 8007b14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b1c:	4b7a      	ldr	r3, [pc, #488]	; (8007d08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b24:	ee07 3a90 	vmov	s15, r3
 8007b28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b2c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b30:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007d10 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007b34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b48:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007b4c:	e087      	b.n	8007c5e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	ee07 3a90 	vmov	s15, r3
 8007b54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b58:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007d14 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8007b5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b60:	4b69      	ldr	r3, [pc, #420]	; (8007d08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b68:	ee07 3a90 	vmov	s15, r3
 8007b6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b70:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b74:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007d10 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007b78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b8c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b90:	e065      	b.n	8007c5e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	ee07 3a90 	vmov	s15, r3
 8007b98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b9c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007ba0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ba4:	4b58      	ldr	r3, [pc, #352]	; (8007d08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bac:	ee07 3a90 	vmov	s15, r3
 8007bb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bb4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bb8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007d10 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007bbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bd0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007bd4:	e043      	b.n	8007c5e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	ee07 3a90 	vmov	s15, r3
 8007bdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007be0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007d1c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8007be4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007be8:	4b47      	ldr	r3, [pc, #284]	; (8007d08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bf0:	ee07 3a90 	vmov	s15, r3
 8007bf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bf8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bfc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007d10 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007c00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c14:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c18:	e021      	b.n	8007c5e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	ee07 3a90 	vmov	s15, r3
 8007c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c24:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007c28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c2c:	4b36      	ldr	r3, [pc, #216]	; (8007d08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c34:	ee07 3a90 	vmov	s15, r3
 8007c38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c40:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007d10 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007c44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c58:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c5c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007c5e:	4b2a      	ldr	r3, [pc, #168]	; (8007d08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c62:	0a5b      	lsrs	r3, r3, #9
 8007c64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c68:	ee07 3a90 	vmov	s15, r3
 8007c6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c78:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c84:	ee17 2a90 	vmov	r2, s15
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007c8c:	4b1e      	ldr	r3, [pc, #120]	; (8007d08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c90:	0c1b      	lsrs	r3, r3, #16
 8007c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c96:	ee07 3a90 	vmov	s15, r3
 8007c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ca2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ca6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007caa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cb2:	ee17 2a90 	vmov	r2, s15
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007cba:	4b13      	ldr	r3, [pc, #76]	; (8007d08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cbe:	0e1b      	lsrs	r3, r3, #24
 8007cc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cc4:	ee07 3a90 	vmov	s15, r3
 8007cc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ccc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ce0:	ee17 2a90 	vmov	r2, s15
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007ce8:	e008      	b.n	8007cfc <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	609a      	str	r2, [r3, #8]
}
 8007cfc:	bf00      	nop
 8007cfe:	3724      	adds	r7, #36	; 0x24
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr
 8007d08:	58024400 	.word	0x58024400
 8007d0c:	03d09000 	.word	0x03d09000
 8007d10:	46000000 	.word	0x46000000
 8007d14:	4c742400 	.word	0x4c742400
 8007d18:	4a742400 	.word	0x4a742400
 8007d1c:	4af42400 	.word	0x4af42400

08007d20 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b089      	sub	sp, #36	; 0x24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d28:	4b9d      	ldr	r3, [pc, #628]	; (8007fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2c:	f003 0303 	and.w	r3, r3, #3
 8007d30:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007d32:	4b9b      	ldr	r3, [pc, #620]	; (8007fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d36:	091b      	lsrs	r3, r3, #4
 8007d38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d3c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007d3e:	4b98      	ldr	r3, [pc, #608]	; (8007fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d42:	f003 0301 	and.w	r3, r3, #1
 8007d46:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007d48:	4b95      	ldr	r3, [pc, #596]	; (8007fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d4c:	08db      	lsrs	r3, r3, #3
 8007d4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d52:	693a      	ldr	r2, [r7, #16]
 8007d54:	fb02 f303 	mul.w	r3, r2, r3
 8007d58:	ee07 3a90 	vmov	s15, r3
 8007d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d60:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	f000 810a 	beq.w	8007f80 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d05a      	beq.n	8007e28 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d302      	bcc.n	8007d7c <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d078      	beq.n	8007e6c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8007d7a:	e099      	b.n	8007eb0 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d7c:	4b88      	ldr	r3, [pc, #544]	; (8007fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f003 0320 	and.w	r3, r3, #32
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d02d      	beq.n	8007de4 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d88:	4b85      	ldr	r3, [pc, #532]	; (8007fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	08db      	lsrs	r3, r3, #3
 8007d8e:	f003 0303 	and.w	r3, r3, #3
 8007d92:	4a84      	ldr	r2, [pc, #528]	; (8007fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8007d94:	fa22 f303 	lsr.w	r3, r2, r3
 8007d98:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	ee07 3a90 	vmov	s15, r3
 8007da0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	ee07 3a90 	vmov	s15, r3
 8007daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007db2:	4b7b      	ldr	r3, [pc, #492]	; (8007fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dba:	ee07 3a90 	vmov	s15, r3
 8007dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dc6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dde:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007de2:	e087      	b.n	8007ef4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	ee07 3a90 	vmov	s15, r3
 8007dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007fac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8007df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007df6:	4b6a      	ldr	r3, [pc, #424]	; (8007fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dfe:	ee07 3a90 	vmov	s15, r3
 8007e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e06:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e0a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e26:	e065      	b.n	8007ef4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	ee07 3a90 	vmov	s15, r3
 8007e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e32:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e3a:	4b59      	ldr	r3, [pc, #356]	; (8007fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e42:	ee07 3a90 	vmov	s15, r3
 8007e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e4e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e6a:	e043      	b.n	8007ef4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	ee07 3a90 	vmov	s15, r3
 8007e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e76:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e7e:	4b48      	ldr	r3, [pc, #288]	; (8007fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e86:	ee07 3a90 	vmov	s15, r3
 8007e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e92:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eaa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007eae:	e021      	b.n	8007ef4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	ee07 3a90 	vmov	s15, r3
 8007eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007ebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ec2:	4b37      	ldr	r3, [pc, #220]	; (8007fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eca:	ee07 3a90 	vmov	s15, r3
 8007ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ed2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ed6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007eda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ee2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ef2:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007ef4:	4b2a      	ldr	r3, [pc, #168]	; (8007fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef8:	0a5b      	lsrs	r3, r3, #9
 8007efa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007efe:	ee07 3a90 	vmov	s15, r3
 8007f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f1a:	ee17 2a90 	vmov	r2, s15
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007f22:	4b1f      	ldr	r3, [pc, #124]	; (8007fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f26:	0c1b      	lsrs	r3, r3, #16
 8007f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f2c:	ee07 3a90 	vmov	s15, r3
 8007f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f48:	ee17 2a90 	vmov	r2, s15
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007f50:	4b13      	ldr	r3, [pc, #76]	; (8007fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f54:	0e1b      	lsrs	r3, r3, #24
 8007f56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f5a:	ee07 3a90 	vmov	s15, r3
 8007f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f76:	ee17 2a90 	vmov	r2, s15
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007f7e:	e008      	b.n	8007f92 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	609a      	str	r2, [r3, #8]
}
 8007f92:	bf00      	nop
 8007f94:	3724      	adds	r7, #36	; 0x24
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr
 8007f9e:	bf00      	nop
 8007fa0:	58024400 	.word	0x58024400
 8007fa4:	03d09000 	.word	0x03d09000
 8007fa8:	46000000 	.word	0x46000000
 8007fac:	4c742400 	.word	0x4c742400
 8007fb0:	4a742400 	.word	0x4a742400
 8007fb4:	4af42400 	.word	0x4af42400

08007fb8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007fc6:	4b53      	ldr	r3, [pc, #332]	; (8008114 <RCCEx_PLL2_Config+0x15c>)
 8007fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fca:	f003 0303 	and.w	r3, r3, #3
 8007fce:	2b03      	cmp	r3, #3
 8007fd0:	d101      	bne.n	8007fd6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e099      	b.n	800810a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007fd6:	4b4f      	ldr	r3, [pc, #316]	; (8008114 <RCCEx_PLL2_Config+0x15c>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a4e      	ldr	r2, [pc, #312]	; (8008114 <RCCEx_PLL2_Config+0x15c>)
 8007fdc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007fe0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fe2:	f7f9 fc9b 	bl	800191c <HAL_GetTick>
 8007fe6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007fe8:	e008      	b.n	8007ffc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007fea:	f7f9 fc97 	bl	800191c <HAL_GetTick>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	1ad3      	subs	r3, r2, r3
 8007ff4:	2b02      	cmp	r3, #2
 8007ff6:	d901      	bls.n	8007ffc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007ff8:	2303      	movs	r3, #3
 8007ffa:	e086      	b.n	800810a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ffc:	4b45      	ldr	r3, [pc, #276]	; (8008114 <RCCEx_PLL2_Config+0x15c>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008004:	2b00      	cmp	r3, #0
 8008006:	d1f0      	bne.n	8007fea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008008:	4b42      	ldr	r3, [pc, #264]	; (8008114 <RCCEx_PLL2_Config+0x15c>)
 800800a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800800c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	031b      	lsls	r3, r3, #12
 8008016:	493f      	ldr	r1, [pc, #252]	; (8008114 <RCCEx_PLL2_Config+0x15c>)
 8008018:	4313      	orrs	r3, r2
 800801a:	628b      	str	r3, [r1, #40]	; 0x28
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	3b01      	subs	r3, #1
 8008022:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	3b01      	subs	r3, #1
 800802c:	025b      	lsls	r3, r3, #9
 800802e:	b29b      	uxth	r3, r3
 8008030:	431a      	orrs	r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	3b01      	subs	r3, #1
 8008038:	041b      	lsls	r3, r3, #16
 800803a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800803e:	431a      	orrs	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	3b01      	subs	r3, #1
 8008046:	061b      	lsls	r3, r3, #24
 8008048:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800804c:	4931      	ldr	r1, [pc, #196]	; (8008114 <RCCEx_PLL2_Config+0x15c>)
 800804e:	4313      	orrs	r3, r2
 8008050:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008052:	4b30      	ldr	r3, [pc, #192]	; (8008114 <RCCEx_PLL2_Config+0x15c>)
 8008054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008056:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	695b      	ldr	r3, [r3, #20]
 800805e:	492d      	ldr	r1, [pc, #180]	; (8008114 <RCCEx_PLL2_Config+0x15c>)
 8008060:	4313      	orrs	r3, r2
 8008062:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008064:	4b2b      	ldr	r3, [pc, #172]	; (8008114 <RCCEx_PLL2_Config+0x15c>)
 8008066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008068:	f023 0220 	bic.w	r2, r3, #32
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	699b      	ldr	r3, [r3, #24]
 8008070:	4928      	ldr	r1, [pc, #160]	; (8008114 <RCCEx_PLL2_Config+0x15c>)
 8008072:	4313      	orrs	r3, r2
 8008074:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008076:	4b27      	ldr	r3, [pc, #156]	; (8008114 <RCCEx_PLL2_Config+0x15c>)
 8008078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807a:	4a26      	ldr	r2, [pc, #152]	; (8008114 <RCCEx_PLL2_Config+0x15c>)
 800807c:	f023 0310 	bic.w	r3, r3, #16
 8008080:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008082:	4b24      	ldr	r3, [pc, #144]	; (8008114 <RCCEx_PLL2_Config+0x15c>)
 8008084:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008086:	4b24      	ldr	r3, [pc, #144]	; (8008118 <RCCEx_PLL2_Config+0x160>)
 8008088:	4013      	ands	r3, r2
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	69d2      	ldr	r2, [r2, #28]
 800808e:	00d2      	lsls	r2, r2, #3
 8008090:	4920      	ldr	r1, [pc, #128]	; (8008114 <RCCEx_PLL2_Config+0x15c>)
 8008092:	4313      	orrs	r3, r2
 8008094:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008096:	4b1f      	ldr	r3, [pc, #124]	; (8008114 <RCCEx_PLL2_Config+0x15c>)
 8008098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809a:	4a1e      	ldr	r2, [pc, #120]	; (8008114 <RCCEx_PLL2_Config+0x15c>)
 800809c:	f043 0310 	orr.w	r3, r3, #16
 80080a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d106      	bne.n	80080b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80080a8:	4b1a      	ldr	r3, [pc, #104]	; (8008114 <RCCEx_PLL2_Config+0x15c>)
 80080aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ac:	4a19      	ldr	r2, [pc, #100]	; (8008114 <RCCEx_PLL2_Config+0x15c>)
 80080ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80080b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80080b4:	e00f      	b.n	80080d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d106      	bne.n	80080ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80080bc:	4b15      	ldr	r3, [pc, #84]	; (8008114 <RCCEx_PLL2_Config+0x15c>)
 80080be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c0:	4a14      	ldr	r2, [pc, #80]	; (8008114 <RCCEx_PLL2_Config+0x15c>)
 80080c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80080c8:	e005      	b.n	80080d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80080ca:	4b12      	ldr	r3, [pc, #72]	; (8008114 <RCCEx_PLL2_Config+0x15c>)
 80080cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ce:	4a11      	ldr	r2, [pc, #68]	; (8008114 <RCCEx_PLL2_Config+0x15c>)
 80080d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80080d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80080d6:	4b0f      	ldr	r3, [pc, #60]	; (8008114 <RCCEx_PLL2_Config+0x15c>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a0e      	ldr	r2, [pc, #56]	; (8008114 <RCCEx_PLL2_Config+0x15c>)
 80080dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80080e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080e2:	f7f9 fc1b 	bl	800191c <HAL_GetTick>
 80080e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80080e8:	e008      	b.n	80080fc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80080ea:	f7f9 fc17 	bl	800191c <HAL_GetTick>
 80080ee:	4602      	mov	r2, r0
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	1ad3      	subs	r3, r2, r3
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d901      	bls.n	80080fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80080f8:	2303      	movs	r3, #3
 80080fa:	e006      	b.n	800810a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80080fc:	4b05      	ldr	r3, [pc, #20]	; (8008114 <RCCEx_PLL2_Config+0x15c>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008104:	2b00      	cmp	r3, #0
 8008106:	d0f0      	beq.n	80080ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008108:	7bfb      	ldrb	r3, [r7, #15]
}
 800810a:	4618      	mov	r0, r3
 800810c:	3710      	adds	r7, #16
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	58024400 	.word	0x58024400
 8008118:	ffff0007 	.word	0xffff0007

0800811c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008126:	2300      	movs	r3, #0
 8008128:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800812a:	4b53      	ldr	r3, [pc, #332]	; (8008278 <RCCEx_PLL3_Config+0x15c>)
 800812c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800812e:	f003 0303 	and.w	r3, r3, #3
 8008132:	2b03      	cmp	r3, #3
 8008134:	d101      	bne.n	800813a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	e099      	b.n	800826e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800813a:	4b4f      	ldr	r3, [pc, #316]	; (8008278 <RCCEx_PLL3_Config+0x15c>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a4e      	ldr	r2, [pc, #312]	; (8008278 <RCCEx_PLL3_Config+0x15c>)
 8008140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008144:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008146:	f7f9 fbe9 	bl	800191c <HAL_GetTick>
 800814a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800814c:	e008      	b.n	8008160 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800814e:	f7f9 fbe5 	bl	800191c <HAL_GetTick>
 8008152:	4602      	mov	r2, r0
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	1ad3      	subs	r3, r2, r3
 8008158:	2b02      	cmp	r3, #2
 800815a:	d901      	bls.n	8008160 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800815c:	2303      	movs	r3, #3
 800815e:	e086      	b.n	800826e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008160:	4b45      	ldr	r3, [pc, #276]	; (8008278 <RCCEx_PLL3_Config+0x15c>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008168:	2b00      	cmp	r3, #0
 800816a:	d1f0      	bne.n	800814e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800816c:	4b42      	ldr	r3, [pc, #264]	; (8008278 <RCCEx_PLL3_Config+0x15c>)
 800816e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008170:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	051b      	lsls	r3, r3, #20
 800817a:	493f      	ldr	r1, [pc, #252]	; (8008278 <RCCEx_PLL3_Config+0x15c>)
 800817c:	4313      	orrs	r3, r2
 800817e:	628b      	str	r3, [r1, #40]	; 0x28
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	3b01      	subs	r3, #1
 8008186:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	3b01      	subs	r3, #1
 8008190:	025b      	lsls	r3, r3, #9
 8008192:	b29b      	uxth	r3, r3
 8008194:	431a      	orrs	r2, r3
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	3b01      	subs	r3, #1
 800819c:	041b      	lsls	r3, r3, #16
 800819e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80081a2:	431a      	orrs	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	3b01      	subs	r3, #1
 80081aa:	061b      	lsls	r3, r3, #24
 80081ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80081b0:	4931      	ldr	r1, [pc, #196]	; (8008278 <RCCEx_PLL3_Config+0x15c>)
 80081b2:	4313      	orrs	r3, r2
 80081b4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80081b6:	4b30      	ldr	r3, [pc, #192]	; (8008278 <RCCEx_PLL3_Config+0x15c>)
 80081b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	695b      	ldr	r3, [r3, #20]
 80081c2:	492d      	ldr	r1, [pc, #180]	; (8008278 <RCCEx_PLL3_Config+0x15c>)
 80081c4:	4313      	orrs	r3, r2
 80081c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80081c8:	4b2b      	ldr	r3, [pc, #172]	; (8008278 <RCCEx_PLL3_Config+0x15c>)
 80081ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081cc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	699b      	ldr	r3, [r3, #24]
 80081d4:	4928      	ldr	r1, [pc, #160]	; (8008278 <RCCEx_PLL3_Config+0x15c>)
 80081d6:	4313      	orrs	r3, r2
 80081d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80081da:	4b27      	ldr	r3, [pc, #156]	; (8008278 <RCCEx_PLL3_Config+0x15c>)
 80081dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081de:	4a26      	ldr	r2, [pc, #152]	; (8008278 <RCCEx_PLL3_Config+0x15c>)
 80081e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80081e6:	4b24      	ldr	r3, [pc, #144]	; (8008278 <RCCEx_PLL3_Config+0x15c>)
 80081e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081ea:	4b24      	ldr	r3, [pc, #144]	; (800827c <RCCEx_PLL3_Config+0x160>)
 80081ec:	4013      	ands	r3, r2
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	69d2      	ldr	r2, [r2, #28]
 80081f2:	00d2      	lsls	r2, r2, #3
 80081f4:	4920      	ldr	r1, [pc, #128]	; (8008278 <RCCEx_PLL3_Config+0x15c>)
 80081f6:	4313      	orrs	r3, r2
 80081f8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80081fa:	4b1f      	ldr	r3, [pc, #124]	; (8008278 <RCCEx_PLL3_Config+0x15c>)
 80081fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fe:	4a1e      	ldr	r2, [pc, #120]	; (8008278 <RCCEx_PLL3_Config+0x15c>)
 8008200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008204:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d106      	bne.n	800821a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800820c:	4b1a      	ldr	r3, [pc, #104]	; (8008278 <RCCEx_PLL3_Config+0x15c>)
 800820e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008210:	4a19      	ldr	r2, [pc, #100]	; (8008278 <RCCEx_PLL3_Config+0x15c>)
 8008212:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008216:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008218:	e00f      	b.n	800823a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	2b01      	cmp	r3, #1
 800821e:	d106      	bne.n	800822e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008220:	4b15      	ldr	r3, [pc, #84]	; (8008278 <RCCEx_PLL3_Config+0x15c>)
 8008222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008224:	4a14      	ldr	r2, [pc, #80]	; (8008278 <RCCEx_PLL3_Config+0x15c>)
 8008226:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800822a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800822c:	e005      	b.n	800823a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800822e:	4b12      	ldr	r3, [pc, #72]	; (8008278 <RCCEx_PLL3_Config+0x15c>)
 8008230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008232:	4a11      	ldr	r2, [pc, #68]	; (8008278 <RCCEx_PLL3_Config+0x15c>)
 8008234:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008238:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800823a:	4b0f      	ldr	r3, [pc, #60]	; (8008278 <RCCEx_PLL3_Config+0x15c>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a0e      	ldr	r2, [pc, #56]	; (8008278 <RCCEx_PLL3_Config+0x15c>)
 8008240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008244:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008246:	f7f9 fb69 	bl	800191c <HAL_GetTick>
 800824a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800824c:	e008      	b.n	8008260 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800824e:	f7f9 fb65 	bl	800191c <HAL_GetTick>
 8008252:	4602      	mov	r2, r0
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	1ad3      	subs	r3, r2, r3
 8008258:	2b02      	cmp	r3, #2
 800825a:	d901      	bls.n	8008260 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800825c:	2303      	movs	r3, #3
 800825e:	e006      	b.n	800826e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008260:	4b05      	ldr	r3, [pc, #20]	; (8008278 <RCCEx_PLL3_Config+0x15c>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008268:	2b00      	cmp	r3, #0
 800826a:	d0f0      	beq.n	800824e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800826c:	7bfb      	ldrb	r3, [r7, #15]
}
 800826e:	4618      	mov	r0, r3
 8008270:	3710      	adds	r7, #16
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	58024400 	.word	0x58024400
 800827c:	ffff0007 	.word	0xffff0007

08008280 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d101      	bne.n	8008292 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	e049      	b.n	8008326 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008298:	b2db      	uxtb	r3, r3
 800829a:	2b00      	cmp	r3, #0
 800829c:	d106      	bne.n	80082ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f7f9 f83a 	bl	8001320 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2202      	movs	r2, #2
 80082b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	3304      	adds	r3, #4
 80082bc:	4619      	mov	r1, r3
 80082be:	4610      	mov	r0, r2
 80082c0:	f000 fa24 	bl	800870c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
	...

08008330 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800833e:	b2db      	uxtb	r3, r3
 8008340:	2b01      	cmp	r3, #1
 8008342:	d001      	beq.n	8008348 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	e019      	b.n	800837c <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2202      	movs	r2, #2
 800834c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	689a      	ldr	r2, [r3, #8]
 8008356:	4b0c      	ldr	r3, [pc, #48]	; (8008388 <HAL_TIM_Base_Start+0x58>)
 8008358:	4013      	ands	r3, r2
 800835a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2b06      	cmp	r3, #6
 8008360:	d00b      	beq.n	800837a <HAL_TIM_Base_Start+0x4a>
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008368:	d007      	beq.n	800837a <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f042 0201 	orr.w	r2, r2, #1
 8008378:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	3714      	adds	r7, #20
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr
 8008388:	00010007 	.word	0x00010007

0800838c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800838c:	b480      	push	{r7}
 800838e:	b085      	sub	sp, #20
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800839a:	b2db      	uxtb	r3, r3
 800839c:	2b01      	cmp	r3, #1
 800839e:	d001      	beq.n	80083a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80083a0:	2301      	movs	r3, #1
 80083a2:	e021      	b.n	80083e8 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2202      	movs	r2, #2
 80083a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	68da      	ldr	r2, [r3, #12]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f042 0201 	orr.w	r2, r2, #1
 80083ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	689a      	ldr	r2, [r3, #8]
 80083c2:	4b0c      	ldr	r3, [pc, #48]	; (80083f4 <HAL_TIM_Base_Start_IT+0x68>)
 80083c4:	4013      	ands	r3, r2
 80083c6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2b06      	cmp	r3, #6
 80083cc:	d00b      	beq.n	80083e6 <HAL_TIM_Base_Start_IT+0x5a>
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083d4:	d007      	beq.n	80083e6 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f042 0201 	orr.w	r2, r2, #1
 80083e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80083e6:	2300      	movs	r3, #0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3714      	adds	r7, #20
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr
 80083f4:	00010007 	.word	0x00010007

080083f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	f003 0302 	and.w	r3, r3, #2
 800840a:	2b02      	cmp	r3, #2
 800840c:	d122      	bne.n	8008454 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	f003 0302 	and.w	r3, r3, #2
 8008418:	2b02      	cmp	r3, #2
 800841a:	d11b      	bne.n	8008454 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f06f 0202 	mvn.w	r2, #2
 8008424:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2201      	movs	r2, #1
 800842a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	699b      	ldr	r3, [r3, #24]
 8008432:	f003 0303 	and.w	r3, r3, #3
 8008436:	2b00      	cmp	r3, #0
 8008438:	d003      	beq.n	8008442 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 f947 	bl	80086ce <HAL_TIM_IC_CaptureCallback>
 8008440:	e005      	b.n	800844e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f939 	bl	80086ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 f94a 	bl	80086e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	f003 0304 	and.w	r3, r3, #4
 800845e:	2b04      	cmp	r3, #4
 8008460:	d122      	bne.n	80084a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	f003 0304 	and.w	r3, r3, #4
 800846c:	2b04      	cmp	r3, #4
 800846e:	d11b      	bne.n	80084a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f06f 0204 	mvn.w	r2, #4
 8008478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2202      	movs	r2, #2
 800847e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800848a:	2b00      	cmp	r3, #0
 800848c:	d003      	beq.n	8008496 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f91d 	bl	80086ce <HAL_TIM_IC_CaptureCallback>
 8008494:	e005      	b.n	80084a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 f90f 	bl	80086ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 f920 	bl	80086e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	f003 0308 	and.w	r3, r3, #8
 80084b2:	2b08      	cmp	r3, #8
 80084b4:	d122      	bne.n	80084fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	f003 0308 	and.w	r3, r3, #8
 80084c0:	2b08      	cmp	r3, #8
 80084c2:	d11b      	bne.n	80084fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f06f 0208 	mvn.w	r2, #8
 80084cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2204      	movs	r2, #4
 80084d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	69db      	ldr	r3, [r3, #28]
 80084da:	f003 0303 	and.w	r3, r3, #3
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d003      	beq.n	80084ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 f8f3 	bl	80086ce <HAL_TIM_IC_CaptureCallback>
 80084e8:	e005      	b.n	80084f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 f8e5 	bl	80086ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 f8f6 	bl	80086e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	f003 0310 	and.w	r3, r3, #16
 8008506:	2b10      	cmp	r3, #16
 8008508:	d122      	bne.n	8008550 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	f003 0310 	and.w	r3, r3, #16
 8008514:	2b10      	cmp	r3, #16
 8008516:	d11b      	bne.n	8008550 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f06f 0210 	mvn.w	r2, #16
 8008520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2208      	movs	r2, #8
 8008526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	69db      	ldr	r3, [r3, #28]
 800852e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008532:	2b00      	cmp	r3, #0
 8008534:	d003      	beq.n	800853e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 f8c9 	bl	80086ce <HAL_TIM_IC_CaptureCallback>
 800853c:	e005      	b.n	800854a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 f8bb 	bl	80086ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 f8cc 	bl	80086e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	f003 0301 	and.w	r3, r3, #1
 800855a:	2b01      	cmp	r3, #1
 800855c:	d10e      	bne.n	800857c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	f003 0301 	and.w	r3, r3, #1
 8008568:	2b01      	cmp	r3, #1
 800856a:	d107      	bne.n	800857c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f06f 0201 	mvn.w	r2, #1
 8008574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f7f8 fcb8 	bl	8000eec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	691b      	ldr	r3, [r3, #16]
 8008582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008586:	2b80      	cmp	r3, #128	; 0x80
 8008588:	d10e      	bne.n	80085a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008594:	2b80      	cmp	r3, #128	; 0x80
 8008596:	d107      	bne.n	80085a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80085a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 fb28 	bl	8008bf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085b6:	d10e      	bne.n	80085d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085c2:	2b80      	cmp	r3, #128	; 0x80
 80085c4:	d107      	bne.n	80085d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80085ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 fb1b 	bl	8008c0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	691b      	ldr	r3, [r3, #16]
 80085dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085e0:	2b40      	cmp	r3, #64	; 0x40
 80085e2:	d10e      	bne.n	8008602 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ee:	2b40      	cmp	r3, #64	; 0x40
 80085f0:	d107      	bne.n	8008602 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80085fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 f87a 	bl	80086f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	691b      	ldr	r3, [r3, #16]
 8008608:	f003 0320 	and.w	r3, r3, #32
 800860c:	2b20      	cmp	r3, #32
 800860e:	d10e      	bne.n	800862e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	68db      	ldr	r3, [r3, #12]
 8008616:	f003 0320 	and.w	r3, r3, #32
 800861a:	2b20      	cmp	r3, #32
 800861c:	d107      	bne.n	800862e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f06f 0220 	mvn.w	r2, #32
 8008626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 fadb 	bl	8008be4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800862e:	bf00      	nop
 8008630:	3708      	adds	r7, #8
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b082      	sub	sp, #8
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
 800863e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008646:	2b01      	cmp	r3, #1
 8008648:	d101      	bne.n	800864e <HAL_TIM_SlaveConfigSynchro+0x18>
 800864a:	2302      	movs	r3, #2
 800864c:	e031      	b.n	80086b2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2201      	movs	r2, #1
 8008652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2202      	movs	r2, #2
 800865a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800865e:	6839      	ldr	r1, [r7, #0]
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 f8ed 	bl	8008840 <TIM_SlaveTimer_SetConfig>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d009      	beq.n	8008680 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2200      	movs	r2, #0
 8008678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	e018      	b.n	80086b2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	68da      	ldr	r2, [r3, #12]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800868e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	68da      	ldr	r2, [r3, #12]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800869e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3708      	adds	r7, #8
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}

080086ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086ba:	b480      	push	{r7}
 80086bc:	b083      	sub	sp, #12
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80086c2:	bf00      	nop
 80086c4:	370c      	adds	r7, #12
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr

080086ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b083      	sub	sp, #12
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80086d6:	bf00      	nop
 80086d8:	370c      	adds	r7, #12
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr

080086e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086e2:	b480      	push	{r7}
 80086e4:	b083      	sub	sp, #12
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086ea:	bf00      	nop
 80086ec:	370c      	adds	r7, #12
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr

080086f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086f6:	b480      	push	{r7}
 80086f8:	b083      	sub	sp, #12
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086fe:	bf00      	nop
 8008700:	370c      	adds	r7, #12
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr
	...

0800870c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800870c:	b480      	push	{r7}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4a40      	ldr	r2, [pc, #256]	; (8008820 <TIM_Base_SetConfig+0x114>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d013      	beq.n	800874c <TIM_Base_SetConfig+0x40>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800872a:	d00f      	beq.n	800874c <TIM_Base_SetConfig+0x40>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4a3d      	ldr	r2, [pc, #244]	; (8008824 <TIM_Base_SetConfig+0x118>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d00b      	beq.n	800874c <TIM_Base_SetConfig+0x40>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	4a3c      	ldr	r2, [pc, #240]	; (8008828 <TIM_Base_SetConfig+0x11c>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d007      	beq.n	800874c <TIM_Base_SetConfig+0x40>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	4a3b      	ldr	r2, [pc, #236]	; (800882c <TIM_Base_SetConfig+0x120>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d003      	beq.n	800874c <TIM_Base_SetConfig+0x40>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	4a3a      	ldr	r2, [pc, #232]	; (8008830 <TIM_Base_SetConfig+0x124>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d108      	bne.n	800875e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008752:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	4313      	orrs	r3, r2
 800875c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4a2f      	ldr	r2, [pc, #188]	; (8008820 <TIM_Base_SetConfig+0x114>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d01f      	beq.n	80087a6 <TIM_Base_SetConfig+0x9a>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800876c:	d01b      	beq.n	80087a6 <TIM_Base_SetConfig+0x9a>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4a2c      	ldr	r2, [pc, #176]	; (8008824 <TIM_Base_SetConfig+0x118>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d017      	beq.n	80087a6 <TIM_Base_SetConfig+0x9a>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4a2b      	ldr	r2, [pc, #172]	; (8008828 <TIM_Base_SetConfig+0x11c>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d013      	beq.n	80087a6 <TIM_Base_SetConfig+0x9a>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a2a      	ldr	r2, [pc, #168]	; (800882c <TIM_Base_SetConfig+0x120>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d00f      	beq.n	80087a6 <TIM_Base_SetConfig+0x9a>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a29      	ldr	r2, [pc, #164]	; (8008830 <TIM_Base_SetConfig+0x124>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d00b      	beq.n	80087a6 <TIM_Base_SetConfig+0x9a>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4a28      	ldr	r2, [pc, #160]	; (8008834 <TIM_Base_SetConfig+0x128>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d007      	beq.n	80087a6 <TIM_Base_SetConfig+0x9a>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4a27      	ldr	r2, [pc, #156]	; (8008838 <TIM_Base_SetConfig+0x12c>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d003      	beq.n	80087a6 <TIM_Base_SetConfig+0x9a>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4a26      	ldr	r2, [pc, #152]	; (800883c <TIM_Base_SetConfig+0x130>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d108      	bne.n	80087b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	4313      	orrs	r3, r2
 80087b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	695b      	ldr	r3, [r3, #20]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	689a      	ldr	r2, [r3, #8]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	4a10      	ldr	r2, [pc, #64]	; (8008820 <TIM_Base_SetConfig+0x114>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d00f      	beq.n	8008804 <TIM_Base_SetConfig+0xf8>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	4a12      	ldr	r2, [pc, #72]	; (8008830 <TIM_Base_SetConfig+0x124>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d00b      	beq.n	8008804 <TIM_Base_SetConfig+0xf8>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a11      	ldr	r2, [pc, #68]	; (8008834 <TIM_Base_SetConfig+0x128>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d007      	beq.n	8008804 <TIM_Base_SetConfig+0xf8>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4a10      	ldr	r2, [pc, #64]	; (8008838 <TIM_Base_SetConfig+0x12c>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d003      	beq.n	8008804 <TIM_Base_SetConfig+0xf8>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	4a0f      	ldr	r2, [pc, #60]	; (800883c <TIM_Base_SetConfig+0x130>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d103      	bne.n	800880c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	691a      	ldr	r2, [r3, #16]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	615a      	str	r2, [r3, #20]
}
 8008812:	bf00      	nop
 8008814:	3714      	adds	r7, #20
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	40010000 	.word	0x40010000
 8008824:	40000400 	.word	0x40000400
 8008828:	40000800 	.word	0x40000800
 800882c:	40000c00 	.word	0x40000c00
 8008830:	40010400 	.word	0x40010400
 8008834:	40014000 	.word	0x40014000
 8008838:	40014400 	.word	0x40014400
 800883c:	40014800 	.word	0x40014800

08008840 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b086      	sub	sp, #24
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008852:	697a      	ldr	r2, [r7, #20]
 8008854:	4b56      	ldr	r3, [pc, #344]	; (80089b0 <TIM_SlaveTimer_SetConfig+0x170>)
 8008856:	4013      	ands	r3, r2
 8008858:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	697a      	ldr	r2, [r7, #20]
 8008860:	4313      	orrs	r3, r2
 8008862:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008864:	697a      	ldr	r2, [r7, #20]
 8008866:	4b53      	ldr	r3, [pc, #332]	; (80089b4 <TIM_SlaveTimer_SetConfig+0x174>)
 8008868:	4013      	ands	r3, r2
 800886a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	697a      	ldr	r2, [r7, #20]
 8008872:	4313      	orrs	r3, r2
 8008874:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	697a      	ldr	r2, [r7, #20]
 800887c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008886:	f000 808c 	beq.w	80089a2 <TIM_SlaveTimer_SetConfig+0x162>
 800888a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800888e:	d818      	bhi.n	80088c2 <TIM_SlaveTimer_SetConfig+0x82>
 8008890:	2b30      	cmp	r3, #48	; 0x30
 8008892:	f000 8086 	beq.w	80089a2 <TIM_SlaveTimer_SetConfig+0x162>
 8008896:	2b30      	cmp	r3, #48	; 0x30
 8008898:	d807      	bhi.n	80088aa <TIM_SlaveTimer_SetConfig+0x6a>
 800889a:	2b10      	cmp	r3, #16
 800889c:	f000 8081 	beq.w	80089a2 <TIM_SlaveTimer_SetConfig+0x162>
 80088a0:	2b20      	cmp	r3, #32
 80088a2:	d07e      	beq.n	80089a2 <TIM_SlaveTimer_SetConfig+0x162>
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d07c      	beq.n	80089a2 <TIM_SlaveTimer_SetConfig+0x162>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 80088a8:	e07c      	b.n	80089a4 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 80088aa:	2b50      	cmp	r3, #80	; 0x50
 80088ac:	d065      	beq.n	800897a <TIM_SlaveTimer_SetConfig+0x13a>
 80088ae:	2b50      	cmp	r3, #80	; 0x50
 80088b0:	d802      	bhi.n	80088b8 <TIM_SlaveTimer_SetConfig+0x78>
 80088b2:	2b40      	cmp	r3, #64	; 0x40
 80088b4:	d038      	beq.n	8008928 <TIM_SlaveTimer_SetConfig+0xe8>
      break;
 80088b6:	e075      	b.n	80089a4 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 80088b8:	2b60      	cmp	r3, #96	; 0x60
 80088ba:	d068      	beq.n	800898e <TIM_SlaveTimer_SetConfig+0x14e>
 80088bc:	2b70      	cmp	r3, #112	; 0x70
 80088be:	d028      	beq.n	8008912 <TIM_SlaveTimer_SetConfig+0xd2>
      break;
 80088c0:	e070      	b.n	80089a4 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 80088c2:	4a3d      	ldr	r2, [pc, #244]	; (80089b8 <TIM_SlaveTimer_SetConfig+0x178>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d06c      	beq.n	80089a2 <TIM_SlaveTimer_SetConfig+0x162>
 80088c8:	4a3b      	ldr	r2, [pc, #236]	; (80089b8 <TIM_SlaveTimer_SetConfig+0x178>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d810      	bhi.n	80088f0 <TIM_SlaveTimer_SetConfig+0xb0>
 80088ce:	4a3b      	ldr	r2, [pc, #236]	; (80089bc <TIM_SlaveTimer_SetConfig+0x17c>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d066      	beq.n	80089a2 <TIM_SlaveTimer_SetConfig+0x162>
 80088d4:	4a39      	ldr	r2, [pc, #228]	; (80089bc <TIM_SlaveTimer_SetConfig+0x17c>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d803      	bhi.n	80088e2 <TIM_SlaveTimer_SetConfig+0xa2>
 80088da:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80088de:	d060      	beq.n	80089a2 <TIM_SlaveTimer_SetConfig+0x162>
      break;
 80088e0:	e060      	b.n	80089a4 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 80088e2:	4a37      	ldr	r2, [pc, #220]	; (80089c0 <TIM_SlaveTimer_SetConfig+0x180>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d05c      	beq.n	80089a2 <TIM_SlaveTimer_SetConfig+0x162>
 80088e8:	4a36      	ldr	r2, [pc, #216]	; (80089c4 <TIM_SlaveTimer_SetConfig+0x184>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d059      	beq.n	80089a2 <TIM_SlaveTimer_SetConfig+0x162>
      break;
 80088ee:	e059      	b.n	80089a4 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 80088f0:	4a35      	ldr	r2, [pc, #212]	; (80089c8 <TIM_SlaveTimer_SetConfig+0x188>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d055      	beq.n	80089a2 <TIM_SlaveTimer_SetConfig+0x162>
 80088f6:	4a34      	ldr	r2, [pc, #208]	; (80089c8 <TIM_SlaveTimer_SetConfig+0x188>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d803      	bhi.n	8008904 <TIM_SlaveTimer_SetConfig+0xc4>
 80088fc:	4a33      	ldr	r2, [pc, #204]	; (80089cc <TIM_SlaveTimer_SetConfig+0x18c>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d04f      	beq.n	80089a2 <TIM_SlaveTimer_SetConfig+0x162>
      break;
 8008902:	e04f      	b.n	80089a4 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8008904:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008908:	d04b      	beq.n	80089a2 <TIM_SlaveTimer_SetConfig+0x162>
 800890a:	4a31      	ldr	r2, [pc, #196]	; (80089d0 <TIM_SlaveTimer_SetConfig+0x190>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d048      	beq.n	80089a2 <TIM_SlaveTimer_SetConfig+0x162>
      break;
 8008910:	e048      	b.n	80089a4 <TIM_SlaveTimer_SetConfig+0x164>
      TIM_ETR_SetConfig(htim->Instance,
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6818      	ldr	r0, [r3, #0]
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	68d9      	ldr	r1, [r3, #12]
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	689a      	ldr	r2, [r3, #8]
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	f000 f8b6 	bl	8008a92 <TIM_ETR_SetConfig>
      break;
 8008926:	e03d      	b.n	80089a4 <TIM_SlaveTimer_SetConfig+0x164>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2b05      	cmp	r3, #5
 800892e:	d101      	bne.n	8008934 <TIM_SlaveTimer_SetConfig+0xf4>
        return HAL_ERROR;
 8008930:	2301      	movs	r3, #1
 8008932:	e038      	b.n	80089a6 <TIM_SlaveTimer_SetConfig+0x166>
      tmpccer = htim->Instance->CCER;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	6a1b      	ldr	r3, [r3, #32]
 800893a:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	6a1a      	ldr	r2, [r3, #32]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f022 0201 	bic.w	r2, r2, #1
 800894a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	699b      	ldr	r3, [r3, #24]
 8008952:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800895a:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	011b      	lsls	r3, r3, #4
 8008962:	68fa      	ldr	r2, [r7, #12]
 8008964:	4313      	orrs	r3, r2
 8008966:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	693a      	ldr	r2, [r7, #16]
 8008976:	621a      	str	r2, [r3, #32]
      break;
 8008978:	e014      	b.n	80089a4 <TIM_SlaveTimer_SetConfig+0x164>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6818      	ldr	r0, [r3, #0]
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	6899      	ldr	r1, [r3, #8]
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	461a      	mov	r2, r3
 8008988:	f000 f824 	bl	80089d4 <TIM_TI1_ConfigInputStage>
      break;
 800898c:	e00a      	b.n	80089a4 <TIM_SlaveTimer_SetConfig+0x164>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6818      	ldr	r0, [r3, #0]
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	6899      	ldr	r1, [r3, #8]
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	461a      	mov	r2, r3
 800899c:	f000 f849 	bl	8008a32 <TIM_TI2_ConfigInputStage>
      break;
 80089a0:	e000      	b.n	80089a4 <TIM_SlaveTimer_SetConfig+0x164>
      break;
 80089a2:	bf00      	nop
  }
  return HAL_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3718      	adds	r7, #24
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	ffcfff8f 	.word	0xffcfff8f
 80089b4:	fffefff8 	.word	0xfffefff8
 80089b8:	00100050 	.word	0x00100050
 80089bc:	00100020 	.word	0x00100020
 80089c0:	00100030 	.word	0x00100030
 80089c4:	00100040 	.word	0x00100040
 80089c8:	00100070 	.word	0x00100070
 80089cc:	00100060 	.word	0x00100060
 80089d0:	00200010 	.word	0x00200010

080089d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b087      	sub	sp, #28
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6a1b      	ldr	r3, [r3, #32]
 80089e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	6a1b      	ldr	r3, [r3, #32]
 80089ea:	f023 0201 	bic.w	r2, r3, #1
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	699b      	ldr	r3, [r3, #24]
 80089f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80089fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	011b      	lsls	r3, r3, #4
 8008a04:	693a      	ldr	r2, [r7, #16]
 8008a06:	4313      	orrs	r3, r2
 8008a08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	f023 030a 	bic.w	r3, r3, #10
 8008a10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a12:	697a      	ldr	r2, [r7, #20]
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	4313      	orrs	r3, r2
 8008a18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	693a      	ldr	r2, [r7, #16]
 8008a1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	697a      	ldr	r2, [r7, #20]
 8008a24:	621a      	str	r2, [r3, #32]
}
 8008a26:	bf00      	nop
 8008a28:	371c      	adds	r7, #28
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr

08008a32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a32:	b480      	push	{r7}
 8008a34:	b087      	sub	sp, #28
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	60f8      	str	r0, [r7, #12]
 8008a3a:	60b9      	str	r1, [r7, #8]
 8008a3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	6a1b      	ldr	r3, [r3, #32]
 8008a42:	f023 0210 	bic.w	r2, r3, #16
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	699b      	ldr	r3, [r3, #24]
 8008a4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6a1b      	ldr	r3, [r3, #32]
 8008a54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	031b      	lsls	r3, r3, #12
 8008a62:	697a      	ldr	r2, [r7, #20]
 8008a64:	4313      	orrs	r3, r2
 8008a66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008a6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	011b      	lsls	r3, r3, #4
 8008a74:	693a      	ldr	r2, [r7, #16]
 8008a76:	4313      	orrs	r3, r2
 8008a78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	697a      	ldr	r2, [r7, #20]
 8008a7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	693a      	ldr	r2, [r7, #16]
 8008a84:	621a      	str	r2, [r3, #32]
}
 8008a86:	bf00      	nop
 8008a88:	371c      	adds	r7, #28
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr

08008a92 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a92:	b480      	push	{r7}
 8008a94:	b087      	sub	sp, #28
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	60f8      	str	r0, [r7, #12]
 8008a9a:	60b9      	str	r1, [r7, #8]
 8008a9c:	607a      	str	r2, [r7, #4]
 8008a9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008aac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	021a      	lsls	r2, r3, #8
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	431a      	orrs	r2, r3
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	697a      	ldr	r2, [r7, #20]
 8008abc:	4313      	orrs	r3, r2
 8008abe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	697a      	ldr	r2, [r7, #20]
 8008ac4:	609a      	str	r2, [r3, #8]
}
 8008ac6:	bf00      	nop
 8008ac8:	371c      	adds	r7, #28
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
	...

08008ad4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d101      	bne.n	8008aec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ae8:	2302      	movs	r3, #2
 8008aea:	e068      	b.n	8008bbe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2201      	movs	r2, #1
 8008af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2202      	movs	r2, #2
 8008af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a2e      	ldr	r2, [pc, #184]	; (8008bcc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d004      	beq.n	8008b20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a2d      	ldr	r2, [pc, #180]	; (8008bd0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d108      	bne.n	8008b32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008b26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	68fa      	ldr	r2, [r7, #12]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	4313      	orrs	r3, r2
 8008b42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a1e      	ldr	r2, [pc, #120]	; (8008bcc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d01d      	beq.n	8008b92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b5e:	d018      	beq.n	8008b92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a1b      	ldr	r2, [pc, #108]	; (8008bd4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d013      	beq.n	8008b92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a1a      	ldr	r2, [pc, #104]	; (8008bd8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d00e      	beq.n	8008b92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a18      	ldr	r2, [pc, #96]	; (8008bdc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d009      	beq.n	8008b92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a13      	ldr	r2, [pc, #76]	; (8008bd0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d004      	beq.n	8008b92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a14      	ldr	r2, [pc, #80]	; (8008be0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d10c      	bne.n	8008bac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	68ba      	ldr	r2, [r7, #8]
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	68ba      	ldr	r2, [r7, #8]
 8008baa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3714      	adds	r7, #20
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop
 8008bcc:	40010000 	.word	0x40010000
 8008bd0:	40010400 	.word	0x40010400
 8008bd4:	40000400 	.word	0x40000400
 8008bd8:	40000800 	.word	0x40000800
 8008bdc:	40000c00 	.word	0x40000c00
 8008be0:	40001800 	.word	0x40001800

08008be4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008bec:	bf00      	nop
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c00:	bf00      	nop
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008c14:	bf00      	nop
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d101      	bne.n	8008c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e042      	b.n	8008cb8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d106      	bne.n	8008c4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f7f8 fbe9 	bl	800141c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2224      	movs	r2, #36	; 0x24
 8008c4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f022 0201 	bic.w	r2, r2, #1
 8008c60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 f82c 	bl	8008cc0 <UART_SetConfig>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d101      	bne.n	8008c72 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e022      	b.n	8008cb8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d002      	beq.n	8008c80 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 fecc 	bl	8009a18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	685a      	ldr	r2, [r3, #4]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	689a      	ldr	r2, [r3, #8]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f042 0201 	orr.w	r2, r2, #1
 8008cae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 ff53 	bl	8009b5c <UART_CheckIdleState>
 8008cb6:	4603      	mov	r3, r0
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3708      	adds	r7, #8
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008cc0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008cc4:	b08e      	sub	sp, #56	; 0x38
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	689a      	ldr	r2, [r3, #8]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	691b      	ldr	r3, [r3, #16]
 8008cd8:	431a      	orrs	r2, r3
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	695b      	ldr	r3, [r3, #20]
 8008cde:	431a      	orrs	r2, r3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	69db      	ldr	r3, [r3, #28]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	4bc1      	ldr	r3, [pc, #772]	; (8009000 <UART_SetConfig+0x340>)
 8008cfa:	4013      	ands	r3, r2
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	6812      	ldr	r2, [r2, #0]
 8008d00:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008d02:	430b      	orrs	r3, r1
 8008d04:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	68da      	ldr	r2, [r3, #12]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	430a      	orrs	r2, r1
 8008d1a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	699b      	ldr	r3, [r3, #24]
 8008d20:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4ab7      	ldr	r2, [pc, #732]	; (8009004 <UART_SetConfig+0x344>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d004      	beq.n	8008d36 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6a1b      	ldr	r3, [r3, #32]
 8008d30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d32:	4313      	orrs	r3, r2
 8008d34:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	689a      	ldr	r2, [r3, #8]
 8008d3c:	4bb2      	ldr	r3, [pc, #712]	; (8009008 <UART_SetConfig+0x348>)
 8008d3e:	4013      	ands	r3, r2
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	6812      	ldr	r2, [r2, #0]
 8008d44:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008d46:	430b      	orrs	r3, r1
 8008d48:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d50:	f023 010f 	bic.w	r1, r3, #15
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	430a      	orrs	r2, r1
 8008d5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4aa9      	ldr	r2, [pc, #676]	; (800900c <UART_SetConfig+0x34c>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d177      	bne.n	8008e5a <UART_SetConfig+0x19a>
 8008d6a:	4ba9      	ldr	r3, [pc, #676]	; (8009010 <UART_SetConfig+0x350>)
 8008d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d72:	2b28      	cmp	r3, #40	; 0x28
 8008d74:	d86c      	bhi.n	8008e50 <UART_SetConfig+0x190>
 8008d76:	a201      	add	r2, pc, #4	; (adr r2, 8008d7c <UART_SetConfig+0xbc>)
 8008d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d7c:	08008e21 	.word	0x08008e21
 8008d80:	08008e51 	.word	0x08008e51
 8008d84:	08008e51 	.word	0x08008e51
 8008d88:	08008e51 	.word	0x08008e51
 8008d8c:	08008e51 	.word	0x08008e51
 8008d90:	08008e51 	.word	0x08008e51
 8008d94:	08008e51 	.word	0x08008e51
 8008d98:	08008e51 	.word	0x08008e51
 8008d9c:	08008e29 	.word	0x08008e29
 8008da0:	08008e51 	.word	0x08008e51
 8008da4:	08008e51 	.word	0x08008e51
 8008da8:	08008e51 	.word	0x08008e51
 8008dac:	08008e51 	.word	0x08008e51
 8008db0:	08008e51 	.word	0x08008e51
 8008db4:	08008e51 	.word	0x08008e51
 8008db8:	08008e51 	.word	0x08008e51
 8008dbc:	08008e31 	.word	0x08008e31
 8008dc0:	08008e51 	.word	0x08008e51
 8008dc4:	08008e51 	.word	0x08008e51
 8008dc8:	08008e51 	.word	0x08008e51
 8008dcc:	08008e51 	.word	0x08008e51
 8008dd0:	08008e51 	.word	0x08008e51
 8008dd4:	08008e51 	.word	0x08008e51
 8008dd8:	08008e51 	.word	0x08008e51
 8008ddc:	08008e39 	.word	0x08008e39
 8008de0:	08008e51 	.word	0x08008e51
 8008de4:	08008e51 	.word	0x08008e51
 8008de8:	08008e51 	.word	0x08008e51
 8008dec:	08008e51 	.word	0x08008e51
 8008df0:	08008e51 	.word	0x08008e51
 8008df4:	08008e51 	.word	0x08008e51
 8008df8:	08008e51 	.word	0x08008e51
 8008dfc:	08008e41 	.word	0x08008e41
 8008e00:	08008e51 	.word	0x08008e51
 8008e04:	08008e51 	.word	0x08008e51
 8008e08:	08008e51 	.word	0x08008e51
 8008e0c:	08008e51 	.word	0x08008e51
 8008e10:	08008e51 	.word	0x08008e51
 8008e14:	08008e51 	.word	0x08008e51
 8008e18:	08008e51 	.word	0x08008e51
 8008e1c:	08008e49 	.word	0x08008e49
 8008e20:	2301      	movs	r3, #1
 8008e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e26:	e339      	b.n	800949c <UART_SetConfig+0x7dc>
 8008e28:	2304      	movs	r3, #4
 8008e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e2e:	e335      	b.n	800949c <UART_SetConfig+0x7dc>
 8008e30:	2308      	movs	r3, #8
 8008e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e36:	e331      	b.n	800949c <UART_SetConfig+0x7dc>
 8008e38:	2310      	movs	r3, #16
 8008e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e3e:	e32d      	b.n	800949c <UART_SetConfig+0x7dc>
 8008e40:	2320      	movs	r3, #32
 8008e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e46:	e329      	b.n	800949c <UART_SetConfig+0x7dc>
 8008e48:	2340      	movs	r3, #64	; 0x40
 8008e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e4e:	e325      	b.n	800949c <UART_SetConfig+0x7dc>
 8008e50:	2380      	movs	r3, #128	; 0x80
 8008e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e56:	bf00      	nop
 8008e58:	e320      	b.n	800949c <UART_SetConfig+0x7dc>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a6d      	ldr	r2, [pc, #436]	; (8009014 <UART_SetConfig+0x354>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d132      	bne.n	8008eca <UART_SetConfig+0x20a>
 8008e64:	4b6a      	ldr	r3, [pc, #424]	; (8009010 <UART_SetConfig+0x350>)
 8008e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e68:	f003 0307 	and.w	r3, r3, #7
 8008e6c:	2b05      	cmp	r3, #5
 8008e6e:	d827      	bhi.n	8008ec0 <UART_SetConfig+0x200>
 8008e70:	a201      	add	r2, pc, #4	; (adr r2, 8008e78 <UART_SetConfig+0x1b8>)
 8008e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e76:	bf00      	nop
 8008e78:	08008e91 	.word	0x08008e91
 8008e7c:	08008e99 	.word	0x08008e99
 8008e80:	08008ea1 	.word	0x08008ea1
 8008e84:	08008ea9 	.word	0x08008ea9
 8008e88:	08008eb1 	.word	0x08008eb1
 8008e8c:	08008eb9 	.word	0x08008eb9
 8008e90:	2300      	movs	r3, #0
 8008e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e96:	e301      	b.n	800949c <UART_SetConfig+0x7dc>
 8008e98:	2304      	movs	r3, #4
 8008e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e9e:	e2fd      	b.n	800949c <UART_SetConfig+0x7dc>
 8008ea0:	2308      	movs	r3, #8
 8008ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ea6:	e2f9      	b.n	800949c <UART_SetConfig+0x7dc>
 8008ea8:	2310      	movs	r3, #16
 8008eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008eae:	e2f5      	b.n	800949c <UART_SetConfig+0x7dc>
 8008eb0:	2320      	movs	r3, #32
 8008eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008eb6:	e2f1      	b.n	800949c <UART_SetConfig+0x7dc>
 8008eb8:	2340      	movs	r3, #64	; 0x40
 8008eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ebe:	e2ed      	b.n	800949c <UART_SetConfig+0x7dc>
 8008ec0:	2380      	movs	r3, #128	; 0x80
 8008ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ec6:	bf00      	nop
 8008ec8:	e2e8      	b.n	800949c <UART_SetConfig+0x7dc>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a52      	ldr	r2, [pc, #328]	; (8009018 <UART_SetConfig+0x358>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d132      	bne.n	8008f3a <UART_SetConfig+0x27a>
 8008ed4:	4b4e      	ldr	r3, [pc, #312]	; (8009010 <UART_SetConfig+0x350>)
 8008ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ed8:	f003 0307 	and.w	r3, r3, #7
 8008edc:	2b05      	cmp	r3, #5
 8008ede:	d827      	bhi.n	8008f30 <UART_SetConfig+0x270>
 8008ee0:	a201      	add	r2, pc, #4	; (adr r2, 8008ee8 <UART_SetConfig+0x228>)
 8008ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee6:	bf00      	nop
 8008ee8:	08008f01 	.word	0x08008f01
 8008eec:	08008f09 	.word	0x08008f09
 8008ef0:	08008f11 	.word	0x08008f11
 8008ef4:	08008f19 	.word	0x08008f19
 8008ef8:	08008f21 	.word	0x08008f21
 8008efc:	08008f29 	.word	0x08008f29
 8008f00:	2300      	movs	r3, #0
 8008f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f06:	e2c9      	b.n	800949c <UART_SetConfig+0x7dc>
 8008f08:	2304      	movs	r3, #4
 8008f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f0e:	e2c5      	b.n	800949c <UART_SetConfig+0x7dc>
 8008f10:	2308      	movs	r3, #8
 8008f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f16:	e2c1      	b.n	800949c <UART_SetConfig+0x7dc>
 8008f18:	2310      	movs	r3, #16
 8008f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f1e:	e2bd      	b.n	800949c <UART_SetConfig+0x7dc>
 8008f20:	2320      	movs	r3, #32
 8008f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f26:	e2b9      	b.n	800949c <UART_SetConfig+0x7dc>
 8008f28:	2340      	movs	r3, #64	; 0x40
 8008f2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f2e:	e2b5      	b.n	800949c <UART_SetConfig+0x7dc>
 8008f30:	2380      	movs	r3, #128	; 0x80
 8008f32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f36:	bf00      	nop
 8008f38:	e2b0      	b.n	800949c <UART_SetConfig+0x7dc>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a37      	ldr	r2, [pc, #220]	; (800901c <UART_SetConfig+0x35c>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d132      	bne.n	8008faa <UART_SetConfig+0x2ea>
 8008f44:	4b32      	ldr	r3, [pc, #200]	; (8009010 <UART_SetConfig+0x350>)
 8008f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f48:	f003 0307 	and.w	r3, r3, #7
 8008f4c:	2b05      	cmp	r3, #5
 8008f4e:	d827      	bhi.n	8008fa0 <UART_SetConfig+0x2e0>
 8008f50:	a201      	add	r2, pc, #4	; (adr r2, 8008f58 <UART_SetConfig+0x298>)
 8008f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f56:	bf00      	nop
 8008f58:	08008f71 	.word	0x08008f71
 8008f5c:	08008f79 	.word	0x08008f79
 8008f60:	08008f81 	.word	0x08008f81
 8008f64:	08008f89 	.word	0x08008f89
 8008f68:	08008f91 	.word	0x08008f91
 8008f6c:	08008f99 	.word	0x08008f99
 8008f70:	2300      	movs	r3, #0
 8008f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f76:	e291      	b.n	800949c <UART_SetConfig+0x7dc>
 8008f78:	2304      	movs	r3, #4
 8008f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f7e:	e28d      	b.n	800949c <UART_SetConfig+0x7dc>
 8008f80:	2308      	movs	r3, #8
 8008f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f86:	e289      	b.n	800949c <UART_SetConfig+0x7dc>
 8008f88:	2310      	movs	r3, #16
 8008f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f8e:	e285      	b.n	800949c <UART_SetConfig+0x7dc>
 8008f90:	2320      	movs	r3, #32
 8008f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f96:	e281      	b.n	800949c <UART_SetConfig+0x7dc>
 8008f98:	2340      	movs	r3, #64	; 0x40
 8008f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f9e:	e27d      	b.n	800949c <UART_SetConfig+0x7dc>
 8008fa0:	2380      	movs	r3, #128	; 0x80
 8008fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fa6:	bf00      	nop
 8008fa8:	e278      	b.n	800949c <UART_SetConfig+0x7dc>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a1c      	ldr	r2, [pc, #112]	; (8009020 <UART_SetConfig+0x360>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d144      	bne.n	800903e <UART_SetConfig+0x37e>
 8008fb4:	4b16      	ldr	r3, [pc, #88]	; (8009010 <UART_SetConfig+0x350>)
 8008fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fb8:	f003 0307 	and.w	r3, r3, #7
 8008fbc:	2b05      	cmp	r3, #5
 8008fbe:	d839      	bhi.n	8009034 <UART_SetConfig+0x374>
 8008fc0:	a201      	add	r2, pc, #4	; (adr r2, 8008fc8 <UART_SetConfig+0x308>)
 8008fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc6:	bf00      	nop
 8008fc8:	08008fe1 	.word	0x08008fe1
 8008fcc:	08008fe9 	.word	0x08008fe9
 8008fd0:	08008ff1 	.word	0x08008ff1
 8008fd4:	08008ff9 	.word	0x08008ff9
 8008fd8:	08009025 	.word	0x08009025
 8008fdc:	0800902d 	.word	0x0800902d
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fe6:	e259      	b.n	800949c <UART_SetConfig+0x7dc>
 8008fe8:	2304      	movs	r3, #4
 8008fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fee:	e255      	b.n	800949c <UART_SetConfig+0x7dc>
 8008ff0:	2308      	movs	r3, #8
 8008ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ff6:	e251      	b.n	800949c <UART_SetConfig+0x7dc>
 8008ff8:	2310      	movs	r3, #16
 8008ffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ffe:	e24d      	b.n	800949c <UART_SetConfig+0x7dc>
 8009000:	cfff69f3 	.word	0xcfff69f3
 8009004:	58000c00 	.word	0x58000c00
 8009008:	11fff4ff 	.word	0x11fff4ff
 800900c:	40011000 	.word	0x40011000
 8009010:	58024400 	.word	0x58024400
 8009014:	40004400 	.word	0x40004400
 8009018:	40004800 	.word	0x40004800
 800901c:	40004c00 	.word	0x40004c00
 8009020:	40005000 	.word	0x40005000
 8009024:	2320      	movs	r3, #32
 8009026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800902a:	e237      	b.n	800949c <UART_SetConfig+0x7dc>
 800902c:	2340      	movs	r3, #64	; 0x40
 800902e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009032:	e233      	b.n	800949c <UART_SetConfig+0x7dc>
 8009034:	2380      	movs	r3, #128	; 0x80
 8009036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800903a:	bf00      	nop
 800903c:	e22e      	b.n	800949c <UART_SetConfig+0x7dc>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4ab5      	ldr	r2, [pc, #724]	; (8009318 <UART_SetConfig+0x658>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d178      	bne.n	800913a <UART_SetConfig+0x47a>
 8009048:	4bb4      	ldr	r3, [pc, #720]	; (800931c <UART_SetConfig+0x65c>)
 800904a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800904c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009050:	2b28      	cmp	r3, #40	; 0x28
 8009052:	d86d      	bhi.n	8009130 <UART_SetConfig+0x470>
 8009054:	a201      	add	r2, pc, #4	; (adr r2, 800905c <UART_SetConfig+0x39c>)
 8009056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800905a:	bf00      	nop
 800905c:	08009101 	.word	0x08009101
 8009060:	08009131 	.word	0x08009131
 8009064:	08009131 	.word	0x08009131
 8009068:	08009131 	.word	0x08009131
 800906c:	08009131 	.word	0x08009131
 8009070:	08009131 	.word	0x08009131
 8009074:	08009131 	.word	0x08009131
 8009078:	08009131 	.word	0x08009131
 800907c:	08009109 	.word	0x08009109
 8009080:	08009131 	.word	0x08009131
 8009084:	08009131 	.word	0x08009131
 8009088:	08009131 	.word	0x08009131
 800908c:	08009131 	.word	0x08009131
 8009090:	08009131 	.word	0x08009131
 8009094:	08009131 	.word	0x08009131
 8009098:	08009131 	.word	0x08009131
 800909c:	08009111 	.word	0x08009111
 80090a0:	08009131 	.word	0x08009131
 80090a4:	08009131 	.word	0x08009131
 80090a8:	08009131 	.word	0x08009131
 80090ac:	08009131 	.word	0x08009131
 80090b0:	08009131 	.word	0x08009131
 80090b4:	08009131 	.word	0x08009131
 80090b8:	08009131 	.word	0x08009131
 80090bc:	08009119 	.word	0x08009119
 80090c0:	08009131 	.word	0x08009131
 80090c4:	08009131 	.word	0x08009131
 80090c8:	08009131 	.word	0x08009131
 80090cc:	08009131 	.word	0x08009131
 80090d0:	08009131 	.word	0x08009131
 80090d4:	08009131 	.word	0x08009131
 80090d8:	08009131 	.word	0x08009131
 80090dc:	08009121 	.word	0x08009121
 80090e0:	08009131 	.word	0x08009131
 80090e4:	08009131 	.word	0x08009131
 80090e8:	08009131 	.word	0x08009131
 80090ec:	08009131 	.word	0x08009131
 80090f0:	08009131 	.word	0x08009131
 80090f4:	08009131 	.word	0x08009131
 80090f8:	08009131 	.word	0x08009131
 80090fc:	08009129 	.word	0x08009129
 8009100:	2301      	movs	r3, #1
 8009102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009106:	e1c9      	b.n	800949c <UART_SetConfig+0x7dc>
 8009108:	2304      	movs	r3, #4
 800910a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800910e:	e1c5      	b.n	800949c <UART_SetConfig+0x7dc>
 8009110:	2308      	movs	r3, #8
 8009112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009116:	e1c1      	b.n	800949c <UART_SetConfig+0x7dc>
 8009118:	2310      	movs	r3, #16
 800911a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800911e:	e1bd      	b.n	800949c <UART_SetConfig+0x7dc>
 8009120:	2320      	movs	r3, #32
 8009122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009126:	e1b9      	b.n	800949c <UART_SetConfig+0x7dc>
 8009128:	2340      	movs	r3, #64	; 0x40
 800912a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800912e:	e1b5      	b.n	800949c <UART_SetConfig+0x7dc>
 8009130:	2380      	movs	r3, #128	; 0x80
 8009132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009136:	bf00      	nop
 8009138:	e1b0      	b.n	800949c <UART_SetConfig+0x7dc>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4a78      	ldr	r2, [pc, #480]	; (8009320 <UART_SetConfig+0x660>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d132      	bne.n	80091aa <UART_SetConfig+0x4ea>
 8009144:	4b75      	ldr	r3, [pc, #468]	; (800931c <UART_SetConfig+0x65c>)
 8009146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009148:	f003 0307 	and.w	r3, r3, #7
 800914c:	2b05      	cmp	r3, #5
 800914e:	d827      	bhi.n	80091a0 <UART_SetConfig+0x4e0>
 8009150:	a201      	add	r2, pc, #4	; (adr r2, 8009158 <UART_SetConfig+0x498>)
 8009152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009156:	bf00      	nop
 8009158:	08009171 	.word	0x08009171
 800915c:	08009179 	.word	0x08009179
 8009160:	08009181 	.word	0x08009181
 8009164:	08009189 	.word	0x08009189
 8009168:	08009191 	.word	0x08009191
 800916c:	08009199 	.word	0x08009199
 8009170:	2300      	movs	r3, #0
 8009172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009176:	e191      	b.n	800949c <UART_SetConfig+0x7dc>
 8009178:	2304      	movs	r3, #4
 800917a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800917e:	e18d      	b.n	800949c <UART_SetConfig+0x7dc>
 8009180:	2308      	movs	r3, #8
 8009182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009186:	e189      	b.n	800949c <UART_SetConfig+0x7dc>
 8009188:	2310      	movs	r3, #16
 800918a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800918e:	e185      	b.n	800949c <UART_SetConfig+0x7dc>
 8009190:	2320      	movs	r3, #32
 8009192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009196:	e181      	b.n	800949c <UART_SetConfig+0x7dc>
 8009198:	2340      	movs	r3, #64	; 0x40
 800919a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800919e:	e17d      	b.n	800949c <UART_SetConfig+0x7dc>
 80091a0:	2380      	movs	r3, #128	; 0x80
 80091a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091a6:	bf00      	nop
 80091a8:	e178      	b.n	800949c <UART_SetConfig+0x7dc>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a5d      	ldr	r2, [pc, #372]	; (8009324 <UART_SetConfig+0x664>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d132      	bne.n	800921a <UART_SetConfig+0x55a>
 80091b4:	4b59      	ldr	r3, [pc, #356]	; (800931c <UART_SetConfig+0x65c>)
 80091b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091b8:	f003 0307 	and.w	r3, r3, #7
 80091bc:	2b05      	cmp	r3, #5
 80091be:	d827      	bhi.n	8009210 <UART_SetConfig+0x550>
 80091c0:	a201      	add	r2, pc, #4	; (adr r2, 80091c8 <UART_SetConfig+0x508>)
 80091c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c6:	bf00      	nop
 80091c8:	080091e1 	.word	0x080091e1
 80091cc:	080091e9 	.word	0x080091e9
 80091d0:	080091f1 	.word	0x080091f1
 80091d4:	080091f9 	.word	0x080091f9
 80091d8:	08009201 	.word	0x08009201
 80091dc:	08009209 	.word	0x08009209
 80091e0:	2300      	movs	r3, #0
 80091e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091e6:	e159      	b.n	800949c <UART_SetConfig+0x7dc>
 80091e8:	2304      	movs	r3, #4
 80091ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091ee:	e155      	b.n	800949c <UART_SetConfig+0x7dc>
 80091f0:	2308      	movs	r3, #8
 80091f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091f6:	e151      	b.n	800949c <UART_SetConfig+0x7dc>
 80091f8:	2310      	movs	r3, #16
 80091fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091fe:	e14d      	b.n	800949c <UART_SetConfig+0x7dc>
 8009200:	2320      	movs	r3, #32
 8009202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009206:	e149      	b.n	800949c <UART_SetConfig+0x7dc>
 8009208:	2340      	movs	r3, #64	; 0x40
 800920a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800920e:	e145      	b.n	800949c <UART_SetConfig+0x7dc>
 8009210:	2380      	movs	r3, #128	; 0x80
 8009212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009216:	bf00      	nop
 8009218:	e140      	b.n	800949c <UART_SetConfig+0x7dc>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a42      	ldr	r2, [pc, #264]	; (8009328 <UART_SetConfig+0x668>)
 8009220:	4293      	cmp	r3, r2
 8009222:	f040 8083 	bne.w	800932c <UART_SetConfig+0x66c>
 8009226:	4b3d      	ldr	r3, [pc, #244]	; (800931c <UART_SetConfig+0x65c>)
 8009228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800922a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800922e:	2b28      	cmp	r3, #40	; 0x28
 8009230:	d86c      	bhi.n	800930c <UART_SetConfig+0x64c>
 8009232:	a201      	add	r2, pc, #4	; (adr r2, 8009238 <UART_SetConfig+0x578>)
 8009234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009238:	080092dd 	.word	0x080092dd
 800923c:	0800930d 	.word	0x0800930d
 8009240:	0800930d 	.word	0x0800930d
 8009244:	0800930d 	.word	0x0800930d
 8009248:	0800930d 	.word	0x0800930d
 800924c:	0800930d 	.word	0x0800930d
 8009250:	0800930d 	.word	0x0800930d
 8009254:	0800930d 	.word	0x0800930d
 8009258:	080092e5 	.word	0x080092e5
 800925c:	0800930d 	.word	0x0800930d
 8009260:	0800930d 	.word	0x0800930d
 8009264:	0800930d 	.word	0x0800930d
 8009268:	0800930d 	.word	0x0800930d
 800926c:	0800930d 	.word	0x0800930d
 8009270:	0800930d 	.word	0x0800930d
 8009274:	0800930d 	.word	0x0800930d
 8009278:	080092ed 	.word	0x080092ed
 800927c:	0800930d 	.word	0x0800930d
 8009280:	0800930d 	.word	0x0800930d
 8009284:	0800930d 	.word	0x0800930d
 8009288:	0800930d 	.word	0x0800930d
 800928c:	0800930d 	.word	0x0800930d
 8009290:	0800930d 	.word	0x0800930d
 8009294:	0800930d 	.word	0x0800930d
 8009298:	080092f5 	.word	0x080092f5
 800929c:	0800930d 	.word	0x0800930d
 80092a0:	0800930d 	.word	0x0800930d
 80092a4:	0800930d 	.word	0x0800930d
 80092a8:	0800930d 	.word	0x0800930d
 80092ac:	0800930d 	.word	0x0800930d
 80092b0:	0800930d 	.word	0x0800930d
 80092b4:	0800930d 	.word	0x0800930d
 80092b8:	080092fd 	.word	0x080092fd
 80092bc:	0800930d 	.word	0x0800930d
 80092c0:	0800930d 	.word	0x0800930d
 80092c4:	0800930d 	.word	0x0800930d
 80092c8:	0800930d 	.word	0x0800930d
 80092cc:	0800930d 	.word	0x0800930d
 80092d0:	0800930d 	.word	0x0800930d
 80092d4:	0800930d 	.word	0x0800930d
 80092d8:	08009305 	.word	0x08009305
 80092dc:	2301      	movs	r3, #1
 80092de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092e2:	e0db      	b.n	800949c <UART_SetConfig+0x7dc>
 80092e4:	2304      	movs	r3, #4
 80092e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092ea:	e0d7      	b.n	800949c <UART_SetConfig+0x7dc>
 80092ec:	2308      	movs	r3, #8
 80092ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092f2:	e0d3      	b.n	800949c <UART_SetConfig+0x7dc>
 80092f4:	2310      	movs	r3, #16
 80092f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092fa:	e0cf      	b.n	800949c <UART_SetConfig+0x7dc>
 80092fc:	2320      	movs	r3, #32
 80092fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009302:	e0cb      	b.n	800949c <UART_SetConfig+0x7dc>
 8009304:	2340      	movs	r3, #64	; 0x40
 8009306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800930a:	e0c7      	b.n	800949c <UART_SetConfig+0x7dc>
 800930c:	2380      	movs	r3, #128	; 0x80
 800930e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009312:	bf00      	nop
 8009314:	e0c2      	b.n	800949c <UART_SetConfig+0x7dc>
 8009316:	bf00      	nop
 8009318:	40011400 	.word	0x40011400
 800931c:	58024400 	.word	0x58024400
 8009320:	40007800 	.word	0x40007800
 8009324:	40007c00 	.word	0x40007c00
 8009328:	40011800 	.word	0x40011800
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4ab2      	ldr	r2, [pc, #712]	; (80095fc <UART_SetConfig+0x93c>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d177      	bne.n	8009426 <UART_SetConfig+0x766>
 8009336:	4bb2      	ldr	r3, [pc, #712]	; (8009600 <UART_SetConfig+0x940>)
 8009338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800933a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800933e:	2b28      	cmp	r3, #40	; 0x28
 8009340:	d86c      	bhi.n	800941c <UART_SetConfig+0x75c>
 8009342:	a201      	add	r2, pc, #4	; (adr r2, 8009348 <UART_SetConfig+0x688>)
 8009344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009348:	080093ed 	.word	0x080093ed
 800934c:	0800941d 	.word	0x0800941d
 8009350:	0800941d 	.word	0x0800941d
 8009354:	0800941d 	.word	0x0800941d
 8009358:	0800941d 	.word	0x0800941d
 800935c:	0800941d 	.word	0x0800941d
 8009360:	0800941d 	.word	0x0800941d
 8009364:	0800941d 	.word	0x0800941d
 8009368:	080093f5 	.word	0x080093f5
 800936c:	0800941d 	.word	0x0800941d
 8009370:	0800941d 	.word	0x0800941d
 8009374:	0800941d 	.word	0x0800941d
 8009378:	0800941d 	.word	0x0800941d
 800937c:	0800941d 	.word	0x0800941d
 8009380:	0800941d 	.word	0x0800941d
 8009384:	0800941d 	.word	0x0800941d
 8009388:	080093fd 	.word	0x080093fd
 800938c:	0800941d 	.word	0x0800941d
 8009390:	0800941d 	.word	0x0800941d
 8009394:	0800941d 	.word	0x0800941d
 8009398:	0800941d 	.word	0x0800941d
 800939c:	0800941d 	.word	0x0800941d
 80093a0:	0800941d 	.word	0x0800941d
 80093a4:	0800941d 	.word	0x0800941d
 80093a8:	08009405 	.word	0x08009405
 80093ac:	0800941d 	.word	0x0800941d
 80093b0:	0800941d 	.word	0x0800941d
 80093b4:	0800941d 	.word	0x0800941d
 80093b8:	0800941d 	.word	0x0800941d
 80093bc:	0800941d 	.word	0x0800941d
 80093c0:	0800941d 	.word	0x0800941d
 80093c4:	0800941d 	.word	0x0800941d
 80093c8:	0800940d 	.word	0x0800940d
 80093cc:	0800941d 	.word	0x0800941d
 80093d0:	0800941d 	.word	0x0800941d
 80093d4:	0800941d 	.word	0x0800941d
 80093d8:	0800941d 	.word	0x0800941d
 80093dc:	0800941d 	.word	0x0800941d
 80093e0:	0800941d 	.word	0x0800941d
 80093e4:	0800941d 	.word	0x0800941d
 80093e8:	08009415 	.word	0x08009415
 80093ec:	2301      	movs	r3, #1
 80093ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093f2:	e053      	b.n	800949c <UART_SetConfig+0x7dc>
 80093f4:	2304      	movs	r3, #4
 80093f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093fa:	e04f      	b.n	800949c <UART_SetConfig+0x7dc>
 80093fc:	2308      	movs	r3, #8
 80093fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009402:	e04b      	b.n	800949c <UART_SetConfig+0x7dc>
 8009404:	2310      	movs	r3, #16
 8009406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800940a:	e047      	b.n	800949c <UART_SetConfig+0x7dc>
 800940c:	2320      	movs	r3, #32
 800940e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009412:	e043      	b.n	800949c <UART_SetConfig+0x7dc>
 8009414:	2340      	movs	r3, #64	; 0x40
 8009416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800941a:	e03f      	b.n	800949c <UART_SetConfig+0x7dc>
 800941c:	2380      	movs	r3, #128	; 0x80
 800941e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009422:	bf00      	nop
 8009424:	e03a      	b.n	800949c <UART_SetConfig+0x7dc>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a76      	ldr	r2, [pc, #472]	; (8009604 <UART_SetConfig+0x944>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d132      	bne.n	8009496 <UART_SetConfig+0x7d6>
 8009430:	4b73      	ldr	r3, [pc, #460]	; (8009600 <UART_SetConfig+0x940>)
 8009432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009434:	f003 0307 	and.w	r3, r3, #7
 8009438:	2b05      	cmp	r3, #5
 800943a:	d827      	bhi.n	800948c <UART_SetConfig+0x7cc>
 800943c:	a201      	add	r2, pc, #4	; (adr r2, 8009444 <UART_SetConfig+0x784>)
 800943e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009442:	bf00      	nop
 8009444:	0800945d 	.word	0x0800945d
 8009448:	08009465 	.word	0x08009465
 800944c:	0800946d 	.word	0x0800946d
 8009450:	08009475 	.word	0x08009475
 8009454:	0800947d 	.word	0x0800947d
 8009458:	08009485 	.word	0x08009485
 800945c:	2302      	movs	r3, #2
 800945e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009462:	e01b      	b.n	800949c <UART_SetConfig+0x7dc>
 8009464:	2304      	movs	r3, #4
 8009466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800946a:	e017      	b.n	800949c <UART_SetConfig+0x7dc>
 800946c:	2308      	movs	r3, #8
 800946e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009472:	e013      	b.n	800949c <UART_SetConfig+0x7dc>
 8009474:	2310      	movs	r3, #16
 8009476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800947a:	e00f      	b.n	800949c <UART_SetConfig+0x7dc>
 800947c:	2320      	movs	r3, #32
 800947e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009482:	e00b      	b.n	800949c <UART_SetConfig+0x7dc>
 8009484:	2340      	movs	r3, #64	; 0x40
 8009486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800948a:	e007      	b.n	800949c <UART_SetConfig+0x7dc>
 800948c:	2380      	movs	r3, #128	; 0x80
 800948e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009492:	bf00      	nop
 8009494:	e002      	b.n	800949c <UART_SetConfig+0x7dc>
 8009496:	2380      	movs	r3, #128	; 0x80
 8009498:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a58      	ldr	r2, [pc, #352]	; (8009604 <UART_SetConfig+0x944>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	f040 80b6 	bne.w	8009614 <UART_SetConfig+0x954>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80094a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80094ac:	2b08      	cmp	r3, #8
 80094ae:	d019      	beq.n	80094e4 <UART_SetConfig+0x824>
 80094b0:	2b08      	cmp	r3, #8
 80094b2:	dc04      	bgt.n	80094be <UART_SetConfig+0x7fe>
 80094b4:	2b02      	cmp	r3, #2
 80094b6:	d009      	beq.n	80094cc <UART_SetConfig+0x80c>
 80094b8:	2b04      	cmp	r3, #4
 80094ba:	d00b      	beq.n	80094d4 <UART_SetConfig+0x814>
 80094bc:	e034      	b.n	8009528 <UART_SetConfig+0x868>
 80094be:	2b20      	cmp	r3, #32
 80094c0:	d02b      	beq.n	800951a <UART_SetConfig+0x85a>
 80094c2:	2b40      	cmp	r3, #64	; 0x40
 80094c4:	d02c      	beq.n	8009520 <UART_SetConfig+0x860>
 80094c6:	2b10      	cmp	r3, #16
 80094c8:	d014      	beq.n	80094f4 <UART_SetConfig+0x834>
 80094ca:	e02d      	b.n	8009528 <UART_SetConfig+0x868>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80094cc:	f7fe f97a 	bl	80077c4 <HAL_RCCEx_GetD3PCLK1Freq>
 80094d0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80094d2:	e02f      	b.n	8009534 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094d4:	f107 0314 	add.w	r3, r7, #20
 80094d8:	4618      	mov	r0, r3
 80094da:	f7fe f989 	bl	80077f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80094de:	69bb      	ldr	r3, [r7, #24]
 80094e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80094e2:	e027      	b.n	8009534 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094e4:	f107 0308 	add.w	r3, r7, #8
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7fe facd 	bl	8007a88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80094f2:	e01f      	b.n	8009534 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094f4:	4b42      	ldr	r3, [pc, #264]	; (8009600 <UART_SetConfig+0x940>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f003 0320 	and.w	r3, r3, #32
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d009      	beq.n	8009514 <UART_SetConfig+0x854>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009500:	4b3f      	ldr	r3, [pc, #252]	; (8009600 <UART_SetConfig+0x940>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	08db      	lsrs	r3, r3, #3
 8009506:	f003 0303 	and.w	r3, r3, #3
 800950a:	4a3f      	ldr	r2, [pc, #252]	; (8009608 <UART_SetConfig+0x948>)
 800950c:	fa22 f303 	lsr.w	r3, r2, r3
 8009510:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009512:	e00f      	b.n	8009534 <UART_SetConfig+0x874>
          pclk = (uint32_t) HSI_VALUE;
 8009514:	4b3c      	ldr	r3, [pc, #240]	; (8009608 <UART_SetConfig+0x948>)
 8009516:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009518:	e00c      	b.n	8009534 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800951a:	4b3c      	ldr	r3, [pc, #240]	; (800960c <UART_SetConfig+0x94c>)
 800951c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800951e:	e009      	b.n	8009534 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009520:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009524:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009526:	e005      	b.n	8009534 <UART_SetConfig+0x874>
      default:
        pclk = 0U;
 8009528:	2300      	movs	r3, #0
 800952a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800952c:	2301      	movs	r3, #1
 800952e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009532:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009536:	2b00      	cmp	r3, #0
 8009538:	f000 8251 	beq.w	80099de <UART_SetConfig+0xd1e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009540:	4a33      	ldr	r2, [pc, #204]	; (8009610 <UART_SetConfig+0x950>)
 8009542:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009546:	461a      	mov	r2, r3
 8009548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800954a:	fbb3 f3f2 	udiv	r3, r3, r2
 800954e:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	685a      	ldr	r2, [r3, #4]
 8009554:	4613      	mov	r3, r2
 8009556:	005b      	lsls	r3, r3, #1
 8009558:	4413      	add	r3, r2
 800955a:	6a3a      	ldr	r2, [r7, #32]
 800955c:	429a      	cmp	r2, r3
 800955e:	d305      	bcc.n	800956c <UART_SetConfig+0x8ac>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009566:	6a3a      	ldr	r2, [r7, #32]
 8009568:	429a      	cmp	r2, r3
 800956a:	d903      	bls.n	8009574 <UART_SetConfig+0x8b4>
      {
        ret = HAL_ERROR;
 800956c:	2301      	movs	r3, #1
 800956e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009572:	e234      	b.n	80099de <UART_SetConfig+0xd1e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009576:	4618      	mov	r0, r3
 8009578:	f04f 0100 	mov.w	r1, #0
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009580:	4a23      	ldr	r2, [pc, #140]	; (8009610 <UART_SetConfig+0x950>)
 8009582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009586:	b29b      	uxth	r3, r3
 8009588:	f04f 0400 	mov.w	r4, #0
 800958c:	461a      	mov	r2, r3
 800958e:	4623      	mov	r3, r4
 8009590:	f7f6 feae 	bl	80002f0 <__aeabi_uldivmod>
 8009594:	4603      	mov	r3, r0
 8009596:	460c      	mov	r4, r1
 8009598:	4619      	mov	r1, r3
 800959a:	4622      	mov	r2, r4
 800959c:	f04f 0300 	mov.w	r3, #0
 80095a0:	f04f 0400 	mov.w	r4, #0
 80095a4:	0214      	lsls	r4, r2, #8
 80095a6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80095aa:	020b      	lsls	r3, r1, #8
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	6852      	ldr	r2, [r2, #4]
 80095b0:	0852      	lsrs	r2, r2, #1
 80095b2:	4611      	mov	r1, r2
 80095b4:	f04f 0200 	mov.w	r2, #0
 80095b8:	eb13 0b01 	adds.w	fp, r3, r1
 80095bc:	eb44 0c02 	adc.w	ip, r4, r2
 80095c0:	4658      	mov	r0, fp
 80095c2:	4661      	mov	r1, ip
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	f04f 0400 	mov.w	r4, #0
 80095cc:	461a      	mov	r2, r3
 80095ce:	4623      	mov	r3, r4
 80095d0:	f7f6 fe8e 	bl	80002f0 <__aeabi_uldivmod>
 80095d4:	4603      	mov	r3, r0
 80095d6:	460c      	mov	r4, r1
 80095d8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80095da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80095e0:	d308      	bcc.n	80095f4 <UART_SetConfig+0x934>
 80095e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095e8:	d204      	bcs.n	80095f4 <UART_SetConfig+0x934>
        {
          huart->Instance->BRR = usartdiv;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095f0:	60da      	str	r2, [r3, #12]
 80095f2:	e1f4      	b.n	80099de <UART_SetConfig+0xd1e>
        }
        else
        {
          ret = HAL_ERROR;
 80095f4:	2301      	movs	r3, #1
 80095f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80095fa:	e1f0      	b.n	80099de <UART_SetConfig+0xd1e>
 80095fc:	40011c00 	.word	0x40011c00
 8009600:	58024400 	.word	0x58024400
 8009604:	58000c00 	.word	0x58000c00
 8009608:	03d09000 	.word	0x03d09000
 800960c:	003d0900 	.word	0x003d0900
 8009610:	0800b120 	.word	0x0800b120
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	69db      	ldr	r3, [r3, #28]
 8009618:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800961c:	f040 80f8 	bne.w	8009810 <UART_SetConfig+0xb50>
  {
    switch (clocksource)
 8009620:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009624:	2b40      	cmp	r3, #64	; 0x40
 8009626:	f200 80b7 	bhi.w	8009798 <UART_SetConfig+0xad8>
 800962a:	a201      	add	r2, pc, #4	; (adr r2, 8009630 <UART_SetConfig+0x970>)
 800962c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009630:	08009735 	.word	0x08009735
 8009634:	0800973d 	.word	0x0800973d
 8009638:	08009799 	.word	0x08009799
 800963c:	08009799 	.word	0x08009799
 8009640:	08009745 	.word	0x08009745
 8009644:	08009799 	.word	0x08009799
 8009648:	08009799 	.word	0x08009799
 800964c:	08009799 	.word	0x08009799
 8009650:	08009755 	.word	0x08009755
 8009654:	08009799 	.word	0x08009799
 8009658:	08009799 	.word	0x08009799
 800965c:	08009799 	.word	0x08009799
 8009660:	08009799 	.word	0x08009799
 8009664:	08009799 	.word	0x08009799
 8009668:	08009799 	.word	0x08009799
 800966c:	08009799 	.word	0x08009799
 8009670:	08009765 	.word	0x08009765
 8009674:	08009799 	.word	0x08009799
 8009678:	08009799 	.word	0x08009799
 800967c:	08009799 	.word	0x08009799
 8009680:	08009799 	.word	0x08009799
 8009684:	08009799 	.word	0x08009799
 8009688:	08009799 	.word	0x08009799
 800968c:	08009799 	.word	0x08009799
 8009690:	08009799 	.word	0x08009799
 8009694:	08009799 	.word	0x08009799
 8009698:	08009799 	.word	0x08009799
 800969c:	08009799 	.word	0x08009799
 80096a0:	08009799 	.word	0x08009799
 80096a4:	08009799 	.word	0x08009799
 80096a8:	08009799 	.word	0x08009799
 80096ac:	08009799 	.word	0x08009799
 80096b0:	0800978b 	.word	0x0800978b
 80096b4:	08009799 	.word	0x08009799
 80096b8:	08009799 	.word	0x08009799
 80096bc:	08009799 	.word	0x08009799
 80096c0:	08009799 	.word	0x08009799
 80096c4:	08009799 	.word	0x08009799
 80096c8:	08009799 	.word	0x08009799
 80096cc:	08009799 	.word	0x08009799
 80096d0:	08009799 	.word	0x08009799
 80096d4:	08009799 	.word	0x08009799
 80096d8:	08009799 	.word	0x08009799
 80096dc:	08009799 	.word	0x08009799
 80096e0:	08009799 	.word	0x08009799
 80096e4:	08009799 	.word	0x08009799
 80096e8:	08009799 	.word	0x08009799
 80096ec:	08009799 	.word	0x08009799
 80096f0:	08009799 	.word	0x08009799
 80096f4:	08009799 	.word	0x08009799
 80096f8:	08009799 	.word	0x08009799
 80096fc:	08009799 	.word	0x08009799
 8009700:	08009799 	.word	0x08009799
 8009704:	08009799 	.word	0x08009799
 8009708:	08009799 	.word	0x08009799
 800970c:	08009799 	.word	0x08009799
 8009710:	08009799 	.word	0x08009799
 8009714:	08009799 	.word	0x08009799
 8009718:	08009799 	.word	0x08009799
 800971c:	08009799 	.word	0x08009799
 8009720:	08009799 	.word	0x08009799
 8009724:	08009799 	.word	0x08009799
 8009728:	08009799 	.word	0x08009799
 800972c:	08009799 	.word	0x08009799
 8009730:	08009791 	.word	0x08009791
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009734:	f7fc ff40 	bl	80065b8 <HAL_RCC_GetPCLK1Freq>
 8009738:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800973a:	e033      	b.n	80097a4 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800973c:	f7fc ff52 	bl	80065e4 <HAL_RCC_GetPCLK2Freq>
 8009740:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009742:	e02f      	b.n	80097a4 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009744:	f107 0314 	add.w	r3, r7, #20
 8009748:	4618      	mov	r0, r3
 800974a:	f7fe f851 	bl	80077f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009752:	e027      	b.n	80097a4 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009754:	f107 0308 	add.w	r3, r7, #8
 8009758:	4618      	mov	r0, r3
 800975a:	f7fe f995 	bl	8007a88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009762:	e01f      	b.n	80097a4 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009764:	4ba8      	ldr	r3, [pc, #672]	; (8009a08 <UART_SetConfig+0xd48>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f003 0320 	and.w	r3, r3, #32
 800976c:	2b00      	cmp	r3, #0
 800976e:	d009      	beq.n	8009784 <UART_SetConfig+0xac4>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009770:	4ba5      	ldr	r3, [pc, #660]	; (8009a08 <UART_SetConfig+0xd48>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	08db      	lsrs	r3, r3, #3
 8009776:	f003 0303 	and.w	r3, r3, #3
 800977a:	4aa4      	ldr	r2, [pc, #656]	; (8009a0c <UART_SetConfig+0xd4c>)
 800977c:	fa22 f303 	lsr.w	r3, r2, r3
 8009780:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009782:	e00f      	b.n	80097a4 <UART_SetConfig+0xae4>
          pclk = (uint32_t) HSI_VALUE;
 8009784:	4ba1      	ldr	r3, [pc, #644]	; (8009a0c <UART_SetConfig+0xd4c>)
 8009786:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009788:	e00c      	b.n	80097a4 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800978a:	4ba1      	ldr	r3, [pc, #644]	; (8009a10 <UART_SetConfig+0xd50>)
 800978c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800978e:	e009      	b.n	80097a4 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009790:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009794:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009796:	e005      	b.n	80097a4 <UART_SetConfig+0xae4>
      default:
        pclk = 0U;
 8009798:	2300      	movs	r3, #0
 800979a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800979c:	2301      	movs	r3, #1
 800979e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80097a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80097a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	f000 8119 	beq.w	80099de <UART_SetConfig+0xd1e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b0:	4a98      	ldr	r2, [pc, #608]	; (8009a14 <UART_SetConfig+0xd54>)
 80097b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097b6:	461a      	mov	r2, r3
 80097b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80097be:	005a      	lsls	r2, r3, #1
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	085b      	lsrs	r3, r3, #1
 80097c6:	441a      	add	r2, r3
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d6:	2b0f      	cmp	r3, #15
 80097d8:	d916      	bls.n	8009808 <UART_SetConfig+0xb48>
 80097da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097e0:	d212      	bcs.n	8009808 <UART_SetConfig+0xb48>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80097e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	f023 030f 	bic.w	r3, r3, #15
 80097ea:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80097ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ee:	085b      	lsrs	r3, r3, #1
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	f003 0307 	and.w	r3, r3, #7
 80097f6:	b29a      	uxth	r2, r3
 80097f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80097fa:	4313      	orrs	r3, r2
 80097fc:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009804:	60da      	str	r2, [r3, #12]
 8009806:	e0ea      	b.n	80099de <UART_SetConfig+0xd1e>
      }
      else
      {
        ret = HAL_ERROR;
 8009808:	2301      	movs	r3, #1
 800980a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800980e:	e0e6      	b.n	80099de <UART_SetConfig+0xd1e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009810:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009814:	2b40      	cmp	r3, #64	; 0x40
 8009816:	f200 80b7 	bhi.w	8009988 <UART_SetConfig+0xcc8>
 800981a:	a201      	add	r2, pc, #4	; (adr r2, 8009820 <UART_SetConfig+0xb60>)
 800981c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009820:	08009925 	.word	0x08009925
 8009824:	0800992d 	.word	0x0800992d
 8009828:	08009989 	.word	0x08009989
 800982c:	08009989 	.word	0x08009989
 8009830:	08009935 	.word	0x08009935
 8009834:	08009989 	.word	0x08009989
 8009838:	08009989 	.word	0x08009989
 800983c:	08009989 	.word	0x08009989
 8009840:	08009945 	.word	0x08009945
 8009844:	08009989 	.word	0x08009989
 8009848:	08009989 	.word	0x08009989
 800984c:	08009989 	.word	0x08009989
 8009850:	08009989 	.word	0x08009989
 8009854:	08009989 	.word	0x08009989
 8009858:	08009989 	.word	0x08009989
 800985c:	08009989 	.word	0x08009989
 8009860:	08009955 	.word	0x08009955
 8009864:	08009989 	.word	0x08009989
 8009868:	08009989 	.word	0x08009989
 800986c:	08009989 	.word	0x08009989
 8009870:	08009989 	.word	0x08009989
 8009874:	08009989 	.word	0x08009989
 8009878:	08009989 	.word	0x08009989
 800987c:	08009989 	.word	0x08009989
 8009880:	08009989 	.word	0x08009989
 8009884:	08009989 	.word	0x08009989
 8009888:	08009989 	.word	0x08009989
 800988c:	08009989 	.word	0x08009989
 8009890:	08009989 	.word	0x08009989
 8009894:	08009989 	.word	0x08009989
 8009898:	08009989 	.word	0x08009989
 800989c:	08009989 	.word	0x08009989
 80098a0:	0800997b 	.word	0x0800997b
 80098a4:	08009989 	.word	0x08009989
 80098a8:	08009989 	.word	0x08009989
 80098ac:	08009989 	.word	0x08009989
 80098b0:	08009989 	.word	0x08009989
 80098b4:	08009989 	.word	0x08009989
 80098b8:	08009989 	.word	0x08009989
 80098bc:	08009989 	.word	0x08009989
 80098c0:	08009989 	.word	0x08009989
 80098c4:	08009989 	.word	0x08009989
 80098c8:	08009989 	.word	0x08009989
 80098cc:	08009989 	.word	0x08009989
 80098d0:	08009989 	.word	0x08009989
 80098d4:	08009989 	.word	0x08009989
 80098d8:	08009989 	.word	0x08009989
 80098dc:	08009989 	.word	0x08009989
 80098e0:	08009989 	.word	0x08009989
 80098e4:	08009989 	.word	0x08009989
 80098e8:	08009989 	.word	0x08009989
 80098ec:	08009989 	.word	0x08009989
 80098f0:	08009989 	.word	0x08009989
 80098f4:	08009989 	.word	0x08009989
 80098f8:	08009989 	.word	0x08009989
 80098fc:	08009989 	.word	0x08009989
 8009900:	08009989 	.word	0x08009989
 8009904:	08009989 	.word	0x08009989
 8009908:	08009989 	.word	0x08009989
 800990c:	08009989 	.word	0x08009989
 8009910:	08009989 	.word	0x08009989
 8009914:	08009989 	.word	0x08009989
 8009918:	08009989 	.word	0x08009989
 800991c:	08009989 	.word	0x08009989
 8009920:	08009981 	.word	0x08009981
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009924:	f7fc fe48 	bl	80065b8 <HAL_RCC_GetPCLK1Freq>
 8009928:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800992a:	e033      	b.n	8009994 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800992c:	f7fc fe5a 	bl	80065e4 <HAL_RCC_GetPCLK2Freq>
 8009930:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009932:	e02f      	b.n	8009994 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009934:	f107 0314 	add.w	r3, r7, #20
 8009938:	4618      	mov	r0, r3
 800993a:	f7fd ff59 	bl	80077f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009942:	e027      	b.n	8009994 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009944:	f107 0308 	add.w	r3, r7, #8
 8009948:	4618      	mov	r0, r3
 800994a:	f7fe f89d 	bl	8007a88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009952:	e01f      	b.n	8009994 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009954:	4b2c      	ldr	r3, [pc, #176]	; (8009a08 <UART_SetConfig+0xd48>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f003 0320 	and.w	r3, r3, #32
 800995c:	2b00      	cmp	r3, #0
 800995e:	d009      	beq.n	8009974 <UART_SetConfig+0xcb4>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009960:	4b29      	ldr	r3, [pc, #164]	; (8009a08 <UART_SetConfig+0xd48>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	08db      	lsrs	r3, r3, #3
 8009966:	f003 0303 	and.w	r3, r3, #3
 800996a:	4a28      	ldr	r2, [pc, #160]	; (8009a0c <UART_SetConfig+0xd4c>)
 800996c:	fa22 f303 	lsr.w	r3, r2, r3
 8009970:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009972:	e00f      	b.n	8009994 <UART_SetConfig+0xcd4>
          pclk = (uint32_t) HSI_VALUE;
 8009974:	4b25      	ldr	r3, [pc, #148]	; (8009a0c <UART_SetConfig+0xd4c>)
 8009976:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009978:	e00c      	b.n	8009994 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800997a:	4b25      	ldr	r3, [pc, #148]	; (8009a10 <UART_SetConfig+0xd50>)
 800997c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800997e:	e009      	b.n	8009994 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009980:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009984:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009986:	e005      	b.n	8009994 <UART_SetConfig+0xcd4>
      default:
        pclk = 0U;
 8009988:	2300      	movs	r3, #0
 800998a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800998c:	2301      	movs	r3, #1
 800998e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009992:	bf00      	nop
    }

    if (pclk != 0U)
 8009994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009996:	2b00      	cmp	r3, #0
 8009998:	d021      	beq.n	80099de <UART_SetConfig+0xd1e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999e:	4a1d      	ldr	r2, [pc, #116]	; (8009a14 <UART_SetConfig+0xd54>)
 80099a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099a4:	461a      	mov	r2, r3
 80099a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	085b      	lsrs	r3, r3, #1
 80099b2:	441a      	add	r2, r3
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80099bc:	b29b      	uxth	r3, r3
 80099be:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c2:	2b0f      	cmp	r3, #15
 80099c4:	d908      	bls.n	80099d8 <UART_SetConfig+0xd18>
 80099c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099cc:	d204      	bcs.n	80099d8 <UART_SetConfig+0xd18>
      {
        huart->Instance->BRR = usartdiv;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099d4:	60da      	str	r2, [r3, #12]
 80099d6:	e002      	b.n	80099de <UART_SetConfig+0xd1e>
      }
      else
      {
        ret = HAL_ERROR;
 80099d8:	2301      	movs	r3, #1
 80099da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2201      	movs	r2, #1
 80099e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2201      	movs	r2, #1
 80099ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2200      	movs	r2, #0
 80099f2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80099fa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3738      	adds	r7, #56	; 0x38
 8009a02:	46bd      	mov	sp, r7
 8009a04:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8009a08:	58024400 	.word	0x58024400
 8009a0c:	03d09000 	.word	0x03d09000
 8009a10:	003d0900 	.word	0x003d0900
 8009a14:	0800b120 	.word	0x0800b120

08009a18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a24:	f003 0301 	and.w	r3, r3, #1
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d00a      	beq.n	8009a42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	430a      	orrs	r2, r1
 8009a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a46:	f003 0302 	and.w	r3, r3, #2
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d00a      	beq.n	8009a64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	430a      	orrs	r2, r1
 8009a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a68:	f003 0304 	and.w	r3, r3, #4
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d00a      	beq.n	8009a86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	430a      	orrs	r2, r1
 8009a84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a8a:	f003 0308 	and.w	r3, r3, #8
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d00a      	beq.n	8009aa8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	430a      	orrs	r2, r1
 8009aa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aac:	f003 0310 	and.w	r3, r3, #16
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d00a      	beq.n	8009aca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	689b      	ldr	r3, [r3, #8]
 8009aba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	430a      	orrs	r2, r1
 8009ac8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ace:	f003 0320 	and.w	r3, r3, #32
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d00a      	beq.n	8009aec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	689b      	ldr	r3, [r3, #8]
 8009adc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	430a      	orrs	r2, r1
 8009aea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d01a      	beq.n	8009b2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	430a      	orrs	r2, r1
 8009b0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b16:	d10a      	bne.n	8009b2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	430a      	orrs	r2, r1
 8009b2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d00a      	beq.n	8009b50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	430a      	orrs	r2, r1
 8009b4e:	605a      	str	r2, [r3, #4]
  }
}
 8009b50:	bf00      	nop
 8009b52:	370c      	adds	r7, #12
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b086      	sub	sp, #24
 8009b60:	af02      	add	r7, sp, #8
 8009b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2200      	movs	r2, #0
 8009b68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009b6c:	f7f7 fed6 	bl	800191c <HAL_GetTick>
 8009b70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f003 0308 	and.w	r3, r3, #8
 8009b7c:	2b08      	cmp	r3, #8
 8009b7e:	d10e      	bne.n	8009b9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009b84:	9300      	str	r3, [sp, #0]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 f82c 	bl	8009bec <UART_WaitOnFlagUntilTimeout>
 8009b94:	4603      	mov	r3, r0
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d001      	beq.n	8009b9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b9a:	2303      	movs	r3, #3
 8009b9c:	e022      	b.n	8009be4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f003 0304 	and.w	r3, r3, #4
 8009ba8:	2b04      	cmp	r3, #4
 8009baa:	d10e      	bne.n	8009bca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009bac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009bb0:	9300      	str	r3, [sp, #0]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 f816 	bl	8009bec <UART_WaitOnFlagUntilTimeout>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d001      	beq.n	8009bca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009bc6:	2303      	movs	r3, #3
 8009bc8:	e00c      	b.n	8009be4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2220      	movs	r2, #32
 8009bce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2220      	movs	r2, #32
 8009bd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009be2:	2300      	movs	r3, #0
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3710      	adds	r7, #16
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b084      	sub	sp, #16
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	60f8      	str	r0, [r7, #12]
 8009bf4:	60b9      	str	r1, [r7, #8]
 8009bf6:	603b      	str	r3, [r7, #0]
 8009bf8:	4613      	mov	r3, r2
 8009bfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009bfc:	e062      	b.n	8009cc4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bfe:	69bb      	ldr	r3, [r7, #24]
 8009c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c04:	d05e      	beq.n	8009cc4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c06:	f7f7 fe89 	bl	800191c <HAL_GetTick>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	1ad3      	subs	r3, r2, r3
 8009c10:	69ba      	ldr	r2, [r7, #24]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d302      	bcc.n	8009c1c <UART_WaitOnFlagUntilTimeout+0x30>
 8009c16:	69bb      	ldr	r3, [r7, #24]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d11d      	bne.n	8009c58 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009c2a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	689a      	ldr	r2, [r3, #8]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f022 0201 	bic.w	r2, r2, #1
 8009c3a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2220      	movs	r2, #32
 8009c40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2220      	movs	r2, #32
 8009c48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009c54:	2303      	movs	r3, #3
 8009c56:	e045      	b.n	8009ce4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f003 0304 	and.w	r3, r3, #4
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d02e      	beq.n	8009cc4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	69db      	ldr	r3, [r3, #28]
 8009c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c74:	d126      	bne.n	8009cc4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009c7e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	681a      	ldr	r2, [r3, #0]
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009c8e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	689a      	ldr	r2, [r3, #8]
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f022 0201 	bic.w	r2, r2, #1
 8009c9e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2220      	movs	r2, #32
 8009ca4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2220      	movs	r2, #32
 8009cac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2220      	movs	r2, #32
 8009cb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8009cc0:	2303      	movs	r3, #3
 8009cc2:	e00f      	b.n	8009ce4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	69da      	ldr	r2, [r3, #28]
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	4013      	ands	r3, r2
 8009cce:	68ba      	ldr	r2, [r7, #8]
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	bf0c      	ite	eq
 8009cd4:	2301      	moveq	r3, #1
 8009cd6:	2300      	movne	r3, #0
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	461a      	mov	r2, r3
 8009cdc:	79fb      	ldrb	r3, [r7, #7]
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d08d      	beq.n	8009bfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ce2:	2300      	movs	r3, #0
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3710      	adds	r7, #16
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b085      	sub	sp, #20
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d101      	bne.n	8009d02 <HAL_UARTEx_DisableFifoMode+0x16>
 8009cfe:	2302      	movs	r3, #2
 8009d00:	e027      	b.n	8009d52 <HAL_UARTEx_DisableFifoMode+0x66>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2201      	movs	r2, #1
 8009d06:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2224      	movs	r2, #36	; 0x24
 8009d0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f022 0201 	bic.w	r2, r2, #1
 8009d28:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009d30:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2200      	movs	r2, #0
 8009d36:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	68fa      	ldr	r2, [r7, #12]
 8009d3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2220      	movs	r2, #32
 8009d44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3714      	adds	r7, #20
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr

08009d5e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b084      	sub	sp, #16
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
 8009d66:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d101      	bne.n	8009d76 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009d72:	2302      	movs	r3, #2
 8009d74:	e02d      	b.n	8009dd2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2201      	movs	r2, #1
 8009d7a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2224      	movs	r2, #36	; 0x24
 8009d82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	681a      	ldr	r2, [r3, #0]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f022 0201 	bic.w	r2, r2, #1
 8009d9c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	683a      	ldr	r2, [r7, #0]
 8009dae:	430a      	orrs	r2, r1
 8009db0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 f850 	bl	8009e58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	68fa      	ldr	r2, [r7, #12]
 8009dbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2220      	movs	r2, #32
 8009dc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009dd0:	2300      	movs	r3, #0
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b084      	sub	sp, #16
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
 8009de2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	d101      	bne.n	8009df2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009dee:	2302      	movs	r3, #2
 8009df0:	e02d      	b.n	8009e4e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2201      	movs	r2, #1
 8009df6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2224      	movs	r2, #36	; 0x24
 8009dfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f022 0201 	bic.w	r2, r2, #1
 8009e18:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	683a      	ldr	r2, [r7, #0]
 8009e2a:	430a      	orrs	r2, r1
 8009e2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 f812 	bl	8009e58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	68fa      	ldr	r2, [r7, #12]
 8009e3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2220      	movs	r2, #32
 8009e40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009e4c:	2300      	movs	r3, #0
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3710      	adds	r7, #16
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
	...

08009e58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b089      	sub	sp, #36	; 0x24
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009e60:	4a2f      	ldr	r2, [pc, #188]	; (8009f20 <UARTEx_SetNbDataToProcess+0xc8>)
 8009e62:	f107 0314 	add.w	r3, r7, #20
 8009e66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e6a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009e6e:	4a2d      	ldr	r2, [pc, #180]	; (8009f24 <UARTEx_SetNbDataToProcess+0xcc>)
 8009e70:	f107 030c 	add.w	r3, r7, #12
 8009e74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e78:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d108      	bne.n	8009e96 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2201      	movs	r2, #1
 8009e88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009e94:	e03d      	b.n	8009f12 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009e96:	2310      	movs	r3, #16
 8009e98:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009e9a:	2310      	movs	r3, #16
 8009e9c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	689b      	ldr	r3, [r3, #8]
 8009ea4:	0e5b      	lsrs	r3, r3, #25
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	f003 0307 	and.w	r3, r3, #7
 8009eac:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	0f5b      	lsrs	r3, r3, #29
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	f003 0307 	and.w	r3, r3, #7
 8009ebc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009ebe:	7fbb      	ldrb	r3, [r7, #30]
 8009ec0:	7f3a      	ldrb	r2, [r7, #28]
 8009ec2:	f107 0120 	add.w	r1, r7, #32
 8009ec6:	440a      	add	r2, r1
 8009ec8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009ecc:	fb02 f303 	mul.w	r3, r2, r3
 8009ed0:	7f3a      	ldrb	r2, [r7, #28]
 8009ed2:	f107 0120 	add.w	r1, r7, #32
 8009ed6:	440a      	add	r2, r1
 8009ed8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009edc:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ee0:	b29a      	uxth	r2, r3
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009ee8:	7ffb      	ldrb	r3, [r7, #31]
 8009eea:	7f7a      	ldrb	r2, [r7, #29]
 8009eec:	f107 0120 	add.w	r1, r7, #32
 8009ef0:	440a      	add	r2, r1
 8009ef2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009ef6:	fb02 f303 	mul.w	r3, r2, r3
 8009efa:	7f7a      	ldrb	r2, [r7, #29]
 8009efc:	f107 0120 	add.w	r1, r7, #32
 8009f00:	440a      	add	r2, r1
 8009f02:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009f06:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f0a:	b29a      	uxth	r2, r3
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009f12:	bf00      	nop
 8009f14:	3724      	adds	r7, #36	; 0x24
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr
 8009f1e:	bf00      	nop
 8009f20:	0800a8f8 	.word	0x0800a8f8
 8009f24:	0800a900 	.word	0x0800a900

08009f28 <calloc>:
 8009f28:	4b02      	ldr	r3, [pc, #8]	; (8009f34 <calloc+0xc>)
 8009f2a:	460a      	mov	r2, r1
 8009f2c:	4601      	mov	r1, r0
 8009f2e:	6818      	ldr	r0, [r3, #0]
 8009f30:	f000 b850 	b.w	8009fd4 <_calloc_r>
 8009f34:	24000010 	.word	0x24000010

08009f38 <__errno>:
 8009f38:	4b01      	ldr	r3, [pc, #4]	; (8009f40 <__errno+0x8>)
 8009f3a:	6818      	ldr	r0, [r3, #0]
 8009f3c:	4770      	bx	lr
 8009f3e:	bf00      	nop
 8009f40:	24000010 	.word	0x24000010

08009f44 <exit>:
 8009f44:	b508      	push	{r3, lr}
 8009f46:	4b07      	ldr	r3, [pc, #28]	; (8009f64 <exit+0x20>)
 8009f48:	4604      	mov	r4, r0
 8009f4a:	b113      	cbz	r3, 8009f52 <exit+0xe>
 8009f4c:	2100      	movs	r1, #0
 8009f4e:	f3af 8000 	nop.w
 8009f52:	4b05      	ldr	r3, [pc, #20]	; (8009f68 <exit+0x24>)
 8009f54:	6818      	ldr	r0, [r3, #0]
 8009f56:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009f58:	b103      	cbz	r3, 8009f5c <exit+0x18>
 8009f5a:	4798      	blx	r3
 8009f5c:	4620      	mov	r0, r4
 8009f5e:	f7f7 fb03 	bl	8001568 <_exit>
 8009f62:	bf00      	nop
 8009f64:	00000000 	.word	0x00000000
 8009f68:	0800b138 	.word	0x0800b138

08009f6c <__libc_init_array>:
 8009f6c:	b570      	push	{r4, r5, r6, lr}
 8009f6e:	4e0d      	ldr	r6, [pc, #52]	; (8009fa4 <__libc_init_array+0x38>)
 8009f70:	4c0d      	ldr	r4, [pc, #52]	; (8009fa8 <__libc_init_array+0x3c>)
 8009f72:	1ba4      	subs	r4, r4, r6
 8009f74:	10a4      	asrs	r4, r4, #2
 8009f76:	2500      	movs	r5, #0
 8009f78:	42a5      	cmp	r5, r4
 8009f7a:	d109      	bne.n	8009f90 <__libc_init_array+0x24>
 8009f7c:	4e0b      	ldr	r6, [pc, #44]	; (8009fac <__libc_init_array+0x40>)
 8009f7e:	4c0c      	ldr	r4, [pc, #48]	; (8009fb0 <__libc_init_array+0x44>)
 8009f80:	f000 fc9e 	bl	800a8c0 <_init>
 8009f84:	1ba4      	subs	r4, r4, r6
 8009f86:	10a4      	asrs	r4, r4, #2
 8009f88:	2500      	movs	r5, #0
 8009f8a:	42a5      	cmp	r5, r4
 8009f8c:	d105      	bne.n	8009f9a <__libc_init_array+0x2e>
 8009f8e:	bd70      	pop	{r4, r5, r6, pc}
 8009f90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009f94:	4798      	blx	r3
 8009f96:	3501      	adds	r5, #1
 8009f98:	e7ee      	b.n	8009f78 <__libc_init_array+0xc>
 8009f9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009f9e:	4798      	blx	r3
 8009fa0:	3501      	adds	r5, #1
 8009fa2:	e7f2      	b.n	8009f8a <__libc_init_array+0x1e>
 8009fa4:	0800b1a4 	.word	0x0800b1a4
 8009fa8:	0800b1a4 	.word	0x0800b1a4
 8009fac:	0800b1a4 	.word	0x0800b1a4
 8009fb0:	0800b1a8 	.word	0x0800b1a8

08009fb4 <malloc>:
 8009fb4:	4b02      	ldr	r3, [pc, #8]	; (8009fc0 <malloc+0xc>)
 8009fb6:	4601      	mov	r1, r0
 8009fb8:	6818      	ldr	r0, [r3, #0]
 8009fba:	f000 b867 	b.w	800a08c <_malloc_r>
 8009fbe:	bf00      	nop
 8009fc0:	24000010 	.word	0x24000010

08009fc4 <memset>:
 8009fc4:	4402      	add	r2, r0
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d100      	bne.n	8009fce <memset+0xa>
 8009fcc:	4770      	bx	lr
 8009fce:	f803 1b01 	strb.w	r1, [r3], #1
 8009fd2:	e7f9      	b.n	8009fc8 <memset+0x4>

08009fd4 <_calloc_r>:
 8009fd4:	b538      	push	{r3, r4, r5, lr}
 8009fd6:	fb02 f401 	mul.w	r4, r2, r1
 8009fda:	4621      	mov	r1, r4
 8009fdc:	f000 f856 	bl	800a08c <_malloc_r>
 8009fe0:	4605      	mov	r5, r0
 8009fe2:	b118      	cbz	r0, 8009fec <_calloc_r+0x18>
 8009fe4:	4622      	mov	r2, r4
 8009fe6:	2100      	movs	r1, #0
 8009fe8:	f7ff ffec 	bl	8009fc4 <memset>
 8009fec:	4628      	mov	r0, r5
 8009fee:	bd38      	pop	{r3, r4, r5, pc}

08009ff0 <_free_r>:
 8009ff0:	b538      	push	{r3, r4, r5, lr}
 8009ff2:	4605      	mov	r5, r0
 8009ff4:	2900      	cmp	r1, #0
 8009ff6:	d045      	beq.n	800a084 <_free_r+0x94>
 8009ff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ffc:	1f0c      	subs	r4, r1, #4
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	bfb8      	it	lt
 800a002:	18e4      	addlt	r4, r4, r3
 800a004:	f000 fbae 	bl	800a764 <__malloc_lock>
 800a008:	4a1f      	ldr	r2, [pc, #124]	; (800a088 <_free_r+0x98>)
 800a00a:	6813      	ldr	r3, [r2, #0]
 800a00c:	4610      	mov	r0, r2
 800a00e:	b933      	cbnz	r3, 800a01e <_free_r+0x2e>
 800a010:	6063      	str	r3, [r4, #4]
 800a012:	6014      	str	r4, [r2, #0]
 800a014:	4628      	mov	r0, r5
 800a016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a01a:	f000 bba4 	b.w	800a766 <__malloc_unlock>
 800a01e:	42a3      	cmp	r3, r4
 800a020:	d90c      	bls.n	800a03c <_free_r+0x4c>
 800a022:	6821      	ldr	r1, [r4, #0]
 800a024:	1862      	adds	r2, r4, r1
 800a026:	4293      	cmp	r3, r2
 800a028:	bf04      	itt	eq
 800a02a:	681a      	ldreq	r2, [r3, #0]
 800a02c:	685b      	ldreq	r3, [r3, #4]
 800a02e:	6063      	str	r3, [r4, #4]
 800a030:	bf04      	itt	eq
 800a032:	1852      	addeq	r2, r2, r1
 800a034:	6022      	streq	r2, [r4, #0]
 800a036:	6004      	str	r4, [r0, #0]
 800a038:	e7ec      	b.n	800a014 <_free_r+0x24>
 800a03a:	4613      	mov	r3, r2
 800a03c:	685a      	ldr	r2, [r3, #4]
 800a03e:	b10a      	cbz	r2, 800a044 <_free_r+0x54>
 800a040:	42a2      	cmp	r2, r4
 800a042:	d9fa      	bls.n	800a03a <_free_r+0x4a>
 800a044:	6819      	ldr	r1, [r3, #0]
 800a046:	1858      	adds	r0, r3, r1
 800a048:	42a0      	cmp	r0, r4
 800a04a:	d10b      	bne.n	800a064 <_free_r+0x74>
 800a04c:	6820      	ldr	r0, [r4, #0]
 800a04e:	4401      	add	r1, r0
 800a050:	1858      	adds	r0, r3, r1
 800a052:	4282      	cmp	r2, r0
 800a054:	6019      	str	r1, [r3, #0]
 800a056:	d1dd      	bne.n	800a014 <_free_r+0x24>
 800a058:	6810      	ldr	r0, [r2, #0]
 800a05a:	6852      	ldr	r2, [r2, #4]
 800a05c:	605a      	str	r2, [r3, #4]
 800a05e:	4401      	add	r1, r0
 800a060:	6019      	str	r1, [r3, #0]
 800a062:	e7d7      	b.n	800a014 <_free_r+0x24>
 800a064:	d902      	bls.n	800a06c <_free_r+0x7c>
 800a066:	230c      	movs	r3, #12
 800a068:	602b      	str	r3, [r5, #0]
 800a06a:	e7d3      	b.n	800a014 <_free_r+0x24>
 800a06c:	6820      	ldr	r0, [r4, #0]
 800a06e:	1821      	adds	r1, r4, r0
 800a070:	428a      	cmp	r2, r1
 800a072:	bf04      	itt	eq
 800a074:	6811      	ldreq	r1, [r2, #0]
 800a076:	6852      	ldreq	r2, [r2, #4]
 800a078:	6062      	str	r2, [r4, #4]
 800a07a:	bf04      	itt	eq
 800a07c:	1809      	addeq	r1, r1, r0
 800a07e:	6021      	streq	r1, [r4, #0]
 800a080:	605c      	str	r4, [r3, #4]
 800a082:	e7c7      	b.n	800a014 <_free_r+0x24>
 800a084:	bd38      	pop	{r3, r4, r5, pc}
 800a086:	bf00      	nop
 800a088:	2400009c 	.word	0x2400009c

0800a08c <_malloc_r>:
 800a08c:	b570      	push	{r4, r5, r6, lr}
 800a08e:	1ccd      	adds	r5, r1, #3
 800a090:	f025 0503 	bic.w	r5, r5, #3
 800a094:	3508      	adds	r5, #8
 800a096:	2d0c      	cmp	r5, #12
 800a098:	bf38      	it	cc
 800a09a:	250c      	movcc	r5, #12
 800a09c:	2d00      	cmp	r5, #0
 800a09e:	4606      	mov	r6, r0
 800a0a0:	db01      	blt.n	800a0a6 <_malloc_r+0x1a>
 800a0a2:	42a9      	cmp	r1, r5
 800a0a4:	d903      	bls.n	800a0ae <_malloc_r+0x22>
 800a0a6:	230c      	movs	r3, #12
 800a0a8:	6033      	str	r3, [r6, #0]
 800a0aa:	2000      	movs	r0, #0
 800a0ac:	bd70      	pop	{r4, r5, r6, pc}
 800a0ae:	f000 fb59 	bl	800a764 <__malloc_lock>
 800a0b2:	4a21      	ldr	r2, [pc, #132]	; (800a138 <_malloc_r+0xac>)
 800a0b4:	6814      	ldr	r4, [r2, #0]
 800a0b6:	4621      	mov	r1, r4
 800a0b8:	b991      	cbnz	r1, 800a0e0 <_malloc_r+0x54>
 800a0ba:	4c20      	ldr	r4, [pc, #128]	; (800a13c <_malloc_r+0xb0>)
 800a0bc:	6823      	ldr	r3, [r4, #0]
 800a0be:	b91b      	cbnz	r3, 800a0c8 <_malloc_r+0x3c>
 800a0c0:	4630      	mov	r0, r6
 800a0c2:	f000 f8a1 	bl	800a208 <_sbrk_r>
 800a0c6:	6020      	str	r0, [r4, #0]
 800a0c8:	4629      	mov	r1, r5
 800a0ca:	4630      	mov	r0, r6
 800a0cc:	f000 f89c 	bl	800a208 <_sbrk_r>
 800a0d0:	1c43      	adds	r3, r0, #1
 800a0d2:	d124      	bne.n	800a11e <_malloc_r+0x92>
 800a0d4:	230c      	movs	r3, #12
 800a0d6:	6033      	str	r3, [r6, #0]
 800a0d8:	4630      	mov	r0, r6
 800a0da:	f000 fb44 	bl	800a766 <__malloc_unlock>
 800a0de:	e7e4      	b.n	800a0aa <_malloc_r+0x1e>
 800a0e0:	680b      	ldr	r3, [r1, #0]
 800a0e2:	1b5b      	subs	r3, r3, r5
 800a0e4:	d418      	bmi.n	800a118 <_malloc_r+0x8c>
 800a0e6:	2b0b      	cmp	r3, #11
 800a0e8:	d90f      	bls.n	800a10a <_malloc_r+0x7e>
 800a0ea:	600b      	str	r3, [r1, #0]
 800a0ec:	50cd      	str	r5, [r1, r3]
 800a0ee:	18cc      	adds	r4, r1, r3
 800a0f0:	4630      	mov	r0, r6
 800a0f2:	f000 fb38 	bl	800a766 <__malloc_unlock>
 800a0f6:	f104 000b 	add.w	r0, r4, #11
 800a0fa:	1d23      	adds	r3, r4, #4
 800a0fc:	f020 0007 	bic.w	r0, r0, #7
 800a100:	1ac3      	subs	r3, r0, r3
 800a102:	d0d3      	beq.n	800a0ac <_malloc_r+0x20>
 800a104:	425a      	negs	r2, r3
 800a106:	50e2      	str	r2, [r4, r3]
 800a108:	e7d0      	b.n	800a0ac <_malloc_r+0x20>
 800a10a:	428c      	cmp	r4, r1
 800a10c:	684b      	ldr	r3, [r1, #4]
 800a10e:	bf16      	itet	ne
 800a110:	6063      	strne	r3, [r4, #4]
 800a112:	6013      	streq	r3, [r2, #0]
 800a114:	460c      	movne	r4, r1
 800a116:	e7eb      	b.n	800a0f0 <_malloc_r+0x64>
 800a118:	460c      	mov	r4, r1
 800a11a:	6849      	ldr	r1, [r1, #4]
 800a11c:	e7cc      	b.n	800a0b8 <_malloc_r+0x2c>
 800a11e:	1cc4      	adds	r4, r0, #3
 800a120:	f024 0403 	bic.w	r4, r4, #3
 800a124:	42a0      	cmp	r0, r4
 800a126:	d005      	beq.n	800a134 <_malloc_r+0xa8>
 800a128:	1a21      	subs	r1, r4, r0
 800a12a:	4630      	mov	r0, r6
 800a12c:	f000 f86c 	bl	800a208 <_sbrk_r>
 800a130:	3001      	adds	r0, #1
 800a132:	d0cf      	beq.n	800a0d4 <_malloc_r+0x48>
 800a134:	6025      	str	r5, [r4, #0]
 800a136:	e7db      	b.n	800a0f0 <_malloc_r+0x64>
 800a138:	2400009c 	.word	0x2400009c
 800a13c:	240000a0 	.word	0x240000a0

0800a140 <_puts_r>:
 800a140:	b570      	push	{r4, r5, r6, lr}
 800a142:	460e      	mov	r6, r1
 800a144:	4605      	mov	r5, r0
 800a146:	b118      	cbz	r0, 800a150 <_puts_r+0x10>
 800a148:	6983      	ldr	r3, [r0, #24]
 800a14a:	b90b      	cbnz	r3, 800a150 <_puts_r+0x10>
 800a14c:	f000 fa1c 	bl	800a588 <__sinit>
 800a150:	69ab      	ldr	r3, [r5, #24]
 800a152:	68ac      	ldr	r4, [r5, #8]
 800a154:	b913      	cbnz	r3, 800a15c <_puts_r+0x1c>
 800a156:	4628      	mov	r0, r5
 800a158:	f000 fa16 	bl	800a588 <__sinit>
 800a15c:	4b23      	ldr	r3, [pc, #140]	; (800a1ec <_puts_r+0xac>)
 800a15e:	429c      	cmp	r4, r3
 800a160:	d117      	bne.n	800a192 <_puts_r+0x52>
 800a162:	686c      	ldr	r4, [r5, #4]
 800a164:	89a3      	ldrh	r3, [r4, #12]
 800a166:	071b      	lsls	r3, r3, #28
 800a168:	d51d      	bpl.n	800a1a6 <_puts_r+0x66>
 800a16a:	6923      	ldr	r3, [r4, #16]
 800a16c:	b1db      	cbz	r3, 800a1a6 <_puts_r+0x66>
 800a16e:	3e01      	subs	r6, #1
 800a170:	68a3      	ldr	r3, [r4, #8]
 800a172:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a176:	3b01      	subs	r3, #1
 800a178:	60a3      	str	r3, [r4, #8]
 800a17a:	b9e9      	cbnz	r1, 800a1b8 <_puts_r+0x78>
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	da2e      	bge.n	800a1de <_puts_r+0x9e>
 800a180:	4622      	mov	r2, r4
 800a182:	210a      	movs	r1, #10
 800a184:	4628      	mov	r0, r5
 800a186:	f000 f84f 	bl	800a228 <__swbuf_r>
 800a18a:	3001      	adds	r0, #1
 800a18c:	d011      	beq.n	800a1b2 <_puts_r+0x72>
 800a18e:	200a      	movs	r0, #10
 800a190:	e011      	b.n	800a1b6 <_puts_r+0x76>
 800a192:	4b17      	ldr	r3, [pc, #92]	; (800a1f0 <_puts_r+0xb0>)
 800a194:	429c      	cmp	r4, r3
 800a196:	d101      	bne.n	800a19c <_puts_r+0x5c>
 800a198:	68ac      	ldr	r4, [r5, #8]
 800a19a:	e7e3      	b.n	800a164 <_puts_r+0x24>
 800a19c:	4b15      	ldr	r3, [pc, #84]	; (800a1f4 <_puts_r+0xb4>)
 800a19e:	429c      	cmp	r4, r3
 800a1a0:	bf08      	it	eq
 800a1a2:	68ec      	ldreq	r4, [r5, #12]
 800a1a4:	e7de      	b.n	800a164 <_puts_r+0x24>
 800a1a6:	4621      	mov	r1, r4
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	f000 f88f 	bl	800a2cc <__swsetup_r>
 800a1ae:	2800      	cmp	r0, #0
 800a1b0:	d0dd      	beq.n	800a16e <_puts_r+0x2e>
 800a1b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b6:	bd70      	pop	{r4, r5, r6, pc}
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	da04      	bge.n	800a1c6 <_puts_r+0x86>
 800a1bc:	69a2      	ldr	r2, [r4, #24]
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	dc06      	bgt.n	800a1d0 <_puts_r+0x90>
 800a1c2:	290a      	cmp	r1, #10
 800a1c4:	d004      	beq.n	800a1d0 <_puts_r+0x90>
 800a1c6:	6823      	ldr	r3, [r4, #0]
 800a1c8:	1c5a      	adds	r2, r3, #1
 800a1ca:	6022      	str	r2, [r4, #0]
 800a1cc:	7019      	strb	r1, [r3, #0]
 800a1ce:	e7cf      	b.n	800a170 <_puts_r+0x30>
 800a1d0:	4622      	mov	r2, r4
 800a1d2:	4628      	mov	r0, r5
 800a1d4:	f000 f828 	bl	800a228 <__swbuf_r>
 800a1d8:	3001      	adds	r0, #1
 800a1da:	d1c9      	bne.n	800a170 <_puts_r+0x30>
 800a1dc:	e7e9      	b.n	800a1b2 <_puts_r+0x72>
 800a1de:	6823      	ldr	r3, [r4, #0]
 800a1e0:	200a      	movs	r0, #10
 800a1e2:	1c5a      	adds	r2, r3, #1
 800a1e4:	6022      	str	r2, [r4, #0]
 800a1e6:	7018      	strb	r0, [r3, #0]
 800a1e8:	e7e5      	b.n	800a1b6 <_puts_r+0x76>
 800a1ea:	bf00      	nop
 800a1ec:	0800b15c 	.word	0x0800b15c
 800a1f0:	0800b17c 	.word	0x0800b17c
 800a1f4:	0800b13c 	.word	0x0800b13c

0800a1f8 <puts>:
 800a1f8:	4b02      	ldr	r3, [pc, #8]	; (800a204 <puts+0xc>)
 800a1fa:	4601      	mov	r1, r0
 800a1fc:	6818      	ldr	r0, [r3, #0]
 800a1fe:	f7ff bf9f 	b.w	800a140 <_puts_r>
 800a202:	bf00      	nop
 800a204:	24000010 	.word	0x24000010

0800a208 <_sbrk_r>:
 800a208:	b538      	push	{r3, r4, r5, lr}
 800a20a:	4c06      	ldr	r4, [pc, #24]	; (800a224 <_sbrk_r+0x1c>)
 800a20c:	2300      	movs	r3, #0
 800a20e:	4605      	mov	r5, r0
 800a210:	4608      	mov	r0, r1
 800a212:	6023      	str	r3, [r4, #0]
 800a214:	f7f7 fa20 	bl	8001658 <_sbrk>
 800a218:	1c43      	adds	r3, r0, #1
 800a21a:	d102      	bne.n	800a222 <_sbrk_r+0x1a>
 800a21c:	6823      	ldr	r3, [r4, #0]
 800a21e:	b103      	cbz	r3, 800a222 <_sbrk_r+0x1a>
 800a220:	602b      	str	r3, [r5, #0]
 800a222:	bd38      	pop	{r3, r4, r5, pc}
 800a224:	24000384 	.word	0x24000384

0800a228 <__swbuf_r>:
 800a228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a22a:	460e      	mov	r6, r1
 800a22c:	4614      	mov	r4, r2
 800a22e:	4605      	mov	r5, r0
 800a230:	b118      	cbz	r0, 800a23a <__swbuf_r+0x12>
 800a232:	6983      	ldr	r3, [r0, #24]
 800a234:	b90b      	cbnz	r3, 800a23a <__swbuf_r+0x12>
 800a236:	f000 f9a7 	bl	800a588 <__sinit>
 800a23a:	4b21      	ldr	r3, [pc, #132]	; (800a2c0 <__swbuf_r+0x98>)
 800a23c:	429c      	cmp	r4, r3
 800a23e:	d12a      	bne.n	800a296 <__swbuf_r+0x6e>
 800a240:	686c      	ldr	r4, [r5, #4]
 800a242:	69a3      	ldr	r3, [r4, #24]
 800a244:	60a3      	str	r3, [r4, #8]
 800a246:	89a3      	ldrh	r3, [r4, #12]
 800a248:	071a      	lsls	r2, r3, #28
 800a24a:	d52e      	bpl.n	800a2aa <__swbuf_r+0x82>
 800a24c:	6923      	ldr	r3, [r4, #16]
 800a24e:	b363      	cbz	r3, 800a2aa <__swbuf_r+0x82>
 800a250:	6923      	ldr	r3, [r4, #16]
 800a252:	6820      	ldr	r0, [r4, #0]
 800a254:	1ac0      	subs	r0, r0, r3
 800a256:	6963      	ldr	r3, [r4, #20]
 800a258:	b2f6      	uxtb	r6, r6
 800a25a:	4283      	cmp	r3, r0
 800a25c:	4637      	mov	r7, r6
 800a25e:	dc04      	bgt.n	800a26a <__swbuf_r+0x42>
 800a260:	4621      	mov	r1, r4
 800a262:	4628      	mov	r0, r5
 800a264:	f000 f926 	bl	800a4b4 <_fflush_r>
 800a268:	bb28      	cbnz	r0, 800a2b6 <__swbuf_r+0x8e>
 800a26a:	68a3      	ldr	r3, [r4, #8]
 800a26c:	3b01      	subs	r3, #1
 800a26e:	60a3      	str	r3, [r4, #8]
 800a270:	6823      	ldr	r3, [r4, #0]
 800a272:	1c5a      	adds	r2, r3, #1
 800a274:	6022      	str	r2, [r4, #0]
 800a276:	701e      	strb	r6, [r3, #0]
 800a278:	6963      	ldr	r3, [r4, #20]
 800a27a:	3001      	adds	r0, #1
 800a27c:	4283      	cmp	r3, r0
 800a27e:	d004      	beq.n	800a28a <__swbuf_r+0x62>
 800a280:	89a3      	ldrh	r3, [r4, #12]
 800a282:	07db      	lsls	r3, r3, #31
 800a284:	d519      	bpl.n	800a2ba <__swbuf_r+0x92>
 800a286:	2e0a      	cmp	r6, #10
 800a288:	d117      	bne.n	800a2ba <__swbuf_r+0x92>
 800a28a:	4621      	mov	r1, r4
 800a28c:	4628      	mov	r0, r5
 800a28e:	f000 f911 	bl	800a4b4 <_fflush_r>
 800a292:	b190      	cbz	r0, 800a2ba <__swbuf_r+0x92>
 800a294:	e00f      	b.n	800a2b6 <__swbuf_r+0x8e>
 800a296:	4b0b      	ldr	r3, [pc, #44]	; (800a2c4 <__swbuf_r+0x9c>)
 800a298:	429c      	cmp	r4, r3
 800a29a:	d101      	bne.n	800a2a0 <__swbuf_r+0x78>
 800a29c:	68ac      	ldr	r4, [r5, #8]
 800a29e:	e7d0      	b.n	800a242 <__swbuf_r+0x1a>
 800a2a0:	4b09      	ldr	r3, [pc, #36]	; (800a2c8 <__swbuf_r+0xa0>)
 800a2a2:	429c      	cmp	r4, r3
 800a2a4:	bf08      	it	eq
 800a2a6:	68ec      	ldreq	r4, [r5, #12]
 800a2a8:	e7cb      	b.n	800a242 <__swbuf_r+0x1a>
 800a2aa:	4621      	mov	r1, r4
 800a2ac:	4628      	mov	r0, r5
 800a2ae:	f000 f80d 	bl	800a2cc <__swsetup_r>
 800a2b2:	2800      	cmp	r0, #0
 800a2b4:	d0cc      	beq.n	800a250 <__swbuf_r+0x28>
 800a2b6:	f04f 37ff 	mov.w	r7, #4294967295
 800a2ba:	4638      	mov	r0, r7
 800a2bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	0800b15c 	.word	0x0800b15c
 800a2c4:	0800b17c 	.word	0x0800b17c
 800a2c8:	0800b13c 	.word	0x0800b13c

0800a2cc <__swsetup_r>:
 800a2cc:	4b32      	ldr	r3, [pc, #200]	; (800a398 <__swsetup_r+0xcc>)
 800a2ce:	b570      	push	{r4, r5, r6, lr}
 800a2d0:	681d      	ldr	r5, [r3, #0]
 800a2d2:	4606      	mov	r6, r0
 800a2d4:	460c      	mov	r4, r1
 800a2d6:	b125      	cbz	r5, 800a2e2 <__swsetup_r+0x16>
 800a2d8:	69ab      	ldr	r3, [r5, #24]
 800a2da:	b913      	cbnz	r3, 800a2e2 <__swsetup_r+0x16>
 800a2dc:	4628      	mov	r0, r5
 800a2de:	f000 f953 	bl	800a588 <__sinit>
 800a2e2:	4b2e      	ldr	r3, [pc, #184]	; (800a39c <__swsetup_r+0xd0>)
 800a2e4:	429c      	cmp	r4, r3
 800a2e6:	d10f      	bne.n	800a308 <__swsetup_r+0x3c>
 800a2e8:	686c      	ldr	r4, [r5, #4]
 800a2ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2ee:	b29a      	uxth	r2, r3
 800a2f0:	0715      	lsls	r5, r2, #28
 800a2f2:	d42c      	bmi.n	800a34e <__swsetup_r+0x82>
 800a2f4:	06d0      	lsls	r0, r2, #27
 800a2f6:	d411      	bmi.n	800a31c <__swsetup_r+0x50>
 800a2f8:	2209      	movs	r2, #9
 800a2fa:	6032      	str	r2, [r6, #0]
 800a2fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a300:	81a3      	strh	r3, [r4, #12]
 800a302:	f04f 30ff 	mov.w	r0, #4294967295
 800a306:	e03e      	b.n	800a386 <__swsetup_r+0xba>
 800a308:	4b25      	ldr	r3, [pc, #148]	; (800a3a0 <__swsetup_r+0xd4>)
 800a30a:	429c      	cmp	r4, r3
 800a30c:	d101      	bne.n	800a312 <__swsetup_r+0x46>
 800a30e:	68ac      	ldr	r4, [r5, #8]
 800a310:	e7eb      	b.n	800a2ea <__swsetup_r+0x1e>
 800a312:	4b24      	ldr	r3, [pc, #144]	; (800a3a4 <__swsetup_r+0xd8>)
 800a314:	429c      	cmp	r4, r3
 800a316:	bf08      	it	eq
 800a318:	68ec      	ldreq	r4, [r5, #12]
 800a31a:	e7e6      	b.n	800a2ea <__swsetup_r+0x1e>
 800a31c:	0751      	lsls	r1, r2, #29
 800a31e:	d512      	bpl.n	800a346 <__swsetup_r+0x7a>
 800a320:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a322:	b141      	cbz	r1, 800a336 <__swsetup_r+0x6a>
 800a324:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a328:	4299      	cmp	r1, r3
 800a32a:	d002      	beq.n	800a332 <__swsetup_r+0x66>
 800a32c:	4630      	mov	r0, r6
 800a32e:	f7ff fe5f 	bl	8009ff0 <_free_r>
 800a332:	2300      	movs	r3, #0
 800a334:	6363      	str	r3, [r4, #52]	; 0x34
 800a336:	89a3      	ldrh	r3, [r4, #12]
 800a338:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a33c:	81a3      	strh	r3, [r4, #12]
 800a33e:	2300      	movs	r3, #0
 800a340:	6063      	str	r3, [r4, #4]
 800a342:	6923      	ldr	r3, [r4, #16]
 800a344:	6023      	str	r3, [r4, #0]
 800a346:	89a3      	ldrh	r3, [r4, #12]
 800a348:	f043 0308 	orr.w	r3, r3, #8
 800a34c:	81a3      	strh	r3, [r4, #12]
 800a34e:	6923      	ldr	r3, [r4, #16]
 800a350:	b94b      	cbnz	r3, 800a366 <__swsetup_r+0x9a>
 800a352:	89a3      	ldrh	r3, [r4, #12]
 800a354:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a35c:	d003      	beq.n	800a366 <__swsetup_r+0x9a>
 800a35e:	4621      	mov	r1, r4
 800a360:	4630      	mov	r0, r6
 800a362:	f000 f9bf 	bl	800a6e4 <__smakebuf_r>
 800a366:	89a2      	ldrh	r2, [r4, #12]
 800a368:	f012 0301 	ands.w	r3, r2, #1
 800a36c:	d00c      	beq.n	800a388 <__swsetup_r+0xbc>
 800a36e:	2300      	movs	r3, #0
 800a370:	60a3      	str	r3, [r4, #8]
 800a372:	6963      	ldr	r3, [r4, #20]
 800a374:	425b      	negs	r3, r3
 800a376:	61a3      	str	r3, [r4, #24]
 800a378:	6923      	ldr	r3, [r4, #16]
 800a37a:	b953      	cbnz	r3, 800a392 <__swsetup_r+0xc6>
 800a37c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a380:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a384:	d1ba      	bne.n	800a2fc <__swsetup_r+0x30>
 800a386:	bd70      	pop	{r4, r5, r6, pc}
 800a388:	0792      	lsls	r2, r2, #30
 800a38a:	bf58      	it	pl
 800a38c:	6963      	ldrpl	r3, [r4, #20]
 800a38e:	60a3      	str	r3, [r4, #8]
 800a390:	e7f2      	b.n	800a378 <__swsetup_r+0xac>
 800a392:	2000      	movs	r0, #0
 800a394:	e7f7      	b.n	800a386 <__swsetup_r+0xba>
 800a396:	bf00      	nop
 800a398:	24000010 	.word	0x24000010
 800a39c:	0800b15c 	.word	0x0800b15c
 800a3a0:	0800b17c 	.word	0x0800b17c
 800a3a4:	0800b13c 	.word	0x0800b13c

0800a3a8 <__sflush_r>:
 800a3a8:	898a      	ldrh	r2, [r1, #12]
 800a3aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3ae:	4605      	mov	r5, r0
 800a3b0:	0710      	lsls	r0, r2, #28
 800a3b2:	460c      	mov	r4, r1
 800a3b4:	d458      	bmi.n	800a468 <__sflush_r+0xc0>
 800a3b6:	684b      	ldr	r3, [r1, #4]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	dc05      	bgt.n	800a3c8 <__sflush_r+0x20>
 800a3bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	dc02      	bgt.n	800a3c8 <__sflush_r+0x20>
 800a3c2:	2000      	movs	r0, #0
 800a3c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3ca:	2e00      	cmp	r6, #0
 800a3cc:	d0f9      	beq.n	800a3c2 <__sflush_r+0x1a>
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a3d4:	682f      	ldr	r7, [r5, #0]
 800a3d6:	6a21      	ldr	r1, [r4, #32]
 800a3d8:	602b      	str	r3, [r5, #0]
 800a3da:	d032      	beq.n	800a442 <__sflush_r+0x9a>
 800a3dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a3de:	89a3      	ldrh	r3, [r4, #12]
 800a3e0:	075a      	lsls	r2, r3, #29
 800a3e2:	d505      	bpl.n	800a3f0 <__sflush_r+0x48>
 800a3e4:	6863      	ldr	r3, [r4, #4]
 800a3e6:	1ac0      	subs	r0, r0, r3
 800a3e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a3ea:	b10b      	cbz	r3, 800a3f0 <__sflush_r+0x48>
 800a3ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a3ee:	1ac0      	subs	r0, r0, r3
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3f6:	6a21      	ldr	r1, [r4, #32]
 800a3f8:	4628      	mov	r0, r5
 800a3fa:	47b0      	blx	r6
 800a3fc:	1c43      	adds	r3, r0, #1
 800a3fe:	89a3      	ldrh	r3, [r4, #12]
 800a400:	d106      	bne.n	800a410 <__sflush_r+0x68>
 800a402:	6829      	ldr	r1, [r5, #0]
 800a404:	291d      	cmp	r1, #29
 800a406:	d848      	bhi.n	800a49a <__sflush_r+0xf2>
 800a408:	4a29      	ldr	r2, [pc, #164]	; (800a4b0 <__sflush_r+0x108>)
 800a40a:	40ca      	lsrs	r2, r1
 800a40c:	07d6      	lsls	r6, r2, #31
 800a40e:	d544      	bpl.n	800a49a <__sflush_r+0xf2>
 800a410:	2200      	movs	r2, #0
 800a412:	6062      	str	r2, [r4, #4]
 800a414:	04d9      	lsls	r1, r3, #19
 800a416:	6922      	ldr	r2, [r4, #16]
 800a418:	6022      	str	r2, [r4, #0]
 800a41a:	d504      	bpl.n	800a426 <__sflush_r+0x7e>
 800a41c:	1c42      	adds	r2, r0, #1
 800a41e:	d101      	bne.n	800a424 <__sflush_r+0x7c>
 800a420:	682b      	ldr	r3, [r5, #0]
 800a422:	b903      	cbnz	r3, 800a426 <__sflush_r+0x7e>
 800a424:	6560      	str	r0, [r4, #84]	; 0x54
 800a426:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a428:	602f      	str	r7, [r5, #0]
 800a42a:	2900      	cmp	r1, #0
 800a42c:	d0c9      	beq.n	800a3c2 <__sflush_r+0x1a>
 800a42e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a432:	4299      	cmp	r1, r3
 800a434:	d002      	beq.n	800a43c <__sflush_r+0x94>
 800a436:	4628      	mov	r0, r5
 800a438:	f7ff fdda 	bl	8009ff0 <_free_r>
 800a43c:	2000      	movs	r0, #0
 800a43e:	6360      	str	r0, [r4, #52]	; 0x34
 800a440:	e7c0      	b.n	800a3c4 <__sflush_r+0x1c>
 800a442:	2301      	movs	r3, #1
 800a444:	4628      	mov	r0, r5
 800a446:	47b0      	blx	r6
 800a448:	1c41      	adds	r1, r0, #1
 800a44a:	d1c8      	bne.n	800a3de <__sflush_r+0x36>
 800a44c:	682b      	ldr	r3, [r5, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d0c5      	beq.n	800a3de <__sflush_r+0x36>
 800a452:	2b1d      	cmp	r3, #29
 800a454:	d001      	beq.n	800a45a <__sflush_r+0xb2>
 800a456:	2b16      	cmp	r3, #22
 800a458:	d101      	bne.n	800a45e <__sflush_r+0xb6>
 800a45a:	602f      	str	r7, [r5, #0]
 800a45c:	e7b1      	b.n	800a3c2 <__sflush_r+0x1a>
 800a45e:	89a3      	ldrh	r3, [r4, #12]
 800a460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a464:	81a3      	strh	r3, [r4, #12]
 800a466:	e7ad      	b.n	800a3c4 <__sflush_r+0x1c>
 800a468:	690f      	ldr	r7, [r1, #16]
 800a46a:	2f00      	cmp	r7, #0
 800a46c:	d0a9      	beq.n	800a3c2 <__sflush_r+0x1a>
 800a46e:	0793      	lsls	r3, r2, #30
 800a470:	680e      	ldr	r6, [r1, #0]
 800a472:	bf08      	it	eq
 800a474:	694b      	ldreq	r3, [r1, #20]
 800a476:	600f      	str	r7, [r1, #0]
 800a478:	bf18      	it	ne
 800a47a:	2300      	movne	r3, #0
 800a47c:	eba6 0807 	sub.w	r8, r6, r7
 800a480:	608b      	str	r3, [r1, #8]
 800a482:	f1b8 0f00 	cmp.w	r8, #0
 800a486:	dd9c      	ble.n	800a3c2 <__sflush_r+0x1a>
 800a488:	4643      	mov	r3, r8
 800a48a:	463a      	mov	r2, r7
 800a48c:	6a21      	ldr	r1, [r4, #32]
 800a48e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a490:	4628      	mov	r0, r5
 800a492:	47b0      	blx	r6
 800a494:	2800      	cmp	r0, #0
 800a496:	dc06      	bgt.n	800a4a6 <__sflush_r+0xfe>
 800a498:	89a3      	ldrh	r3, [r4, #12]
 800a49a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a49e:	81a3      	strh	r3, [r4, #12]
 800a4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4a4:	e78e      	b.n	800a3c4 <__sflush_r+0x1c>
 800a4a6:	4407      	add	r7, r0
 800a4a8:	eba8 0800 	sub.w	r8, r8, r0
 800a4ac:	e7e9      	b.n	800a482 <__sflush_r+0xda>
 800a4ae:	bf00      	nop
 800a4b0:	20400001 	.word	0x20400001

0800a4b4 <_fflush_r>:
 800a4b4:	b538      	push	{r3, r4, r5, lr}
 800a4b6:	690b      	ldr	r3, [r1, #16]
 800a4b8:	4605      	mov	r5, r0
 800a4ba:	460c      	mov	r4, r1
 800a4bc:	b1db      	cbz	r3, 800a4f6 <_fflush_r+0x42>
 800a4be:	b118      	cbz	r0, 800a4c8 <_fflush_r+0x14>
 800a4c0:	6983      	ldr	r3, [r0, #24]
 800a4c2:	b90b      	cbnz	r3, 800a4c8 <_fflush_r+0x14>
 800a4c4:	f000 f860 	bl	800a588 <__sinit>
 800a4c8:	4b0c      	ldr	r3, [pc, #48]	; (800a4fc <_fflush_r+0x48>)
 800a4ca:	429c      	cmp	r4, r3
 800a4cc:	d109      	bne.n	800a4e2 <_fflush_r+0x2e>
 800a4ce:	686c      	ldr	r4, [r5, #4]
 800a4d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4d4:	b17b      	cbz	r3, 800a4f6 <_fflush_r+0x42>
 800a4d6:	4621      	mov	r1, r4
 800a4d8:	4628      	mov	r0, r5
 800a4da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4de:	f7ff bf63 	b.w	800a3a8 <__sflush_r>
 800a4e2:	4b07      	ldr	r3, [pc, #28]	; (800a500 <_fflush_r+0x4c>)
 800a4e4:	429c      	cmp	r4, r3
 800a4e6:	d101      	bne.n	800a4ec <_fflush_r+0x38>
 800a4e8:	68ac      	ldr	r4, [r5, #8]
 800a4ea:	e7f1      	b.n	800a4d0 <_fflush_r+0x1c>
 800a4ec:	4b05      	ldr	r3, [pc, #20]	; (800a504 <_fflush_r+0x50>)
 800a4ee:	429c      	cmp	r4, r3
 800a4f0:	bf08      	it	eq
 800a4f2:	68ec      	ldreq	r4, [r5, #12]
 800a4f4:	e7ec      	b.n	800a4d0 <_fflush_r+0x1c>
 800a4f6:	2000      	movs	r0, #0
 800a4f8:	bd38      	pop	{r3, r4, r5, pc}
 800a4fa:	bf00      	nop
 800a4fc:	0800b15c 	.word	0x0800b15c
 800a500:	0800b17c 	.word	0x0800b17c
 800a504:	0800b13c 	.word	0x0800b13c

0800a508 <std>:
 800a508:	2300      	movs	r3, #0
 800a50a:	b510      	push	{r4, lr}
 800a50c:	4604      	mov	r4, r0
 800a50e:	e9c0 3300 	strd	r3, r3, [r0]
 800a512:	6083      	str	r3, [r0, #8]
 800a514:	8181      	strh	r1, [r0, #12]
 800a516:	6643      	str	r3, [r0, #100]	; 0x64
 800a518:	81c2      	strh	r2, [r0, #14]
 800a51a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a51e:	6183      	str	r3, [r0, #24]
 800a520:	4619      	mov	r1, r3
 800a522:	2208      	movs	r2, #8
 800a524:	305c      	adds	r0, #92	; 0x5c
 800a526:	f7ff fd4d 	bl	8009fc4 <memset>
 800a52a:	4b05      	ldr	r3, [pc, #20]	; (800a540 <std+0x38>)
 800a52c:	6263      	str	r3, [r4, #36]	; 0x24
 800a52e:	4b05      	ldr	r3, [pc, #20]	; (800a544 <std+0x3c>)
 800a530:	62a3      	str	r3, [r4, #40]	; 0x28
 800a532:	4b05      	ldr	r3, [pc, #20]	; (800a548 <std+0x40>)
 800a534:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a536:	4b05      	ldr	r3, [pc, #20]	; (800a54c <std+0x44>)
 800a538:	6224      	str	r4, [r4, #32]
 800a53a:	6323      	str	r3, [r4, #48]	; 0x30
 800a53c:	bd10      	pop	{r4, pc}
 800a53e:	bf00      	nop
 800a540:	0800a769 	.word	0x0800a769
 800a544:	0800a78b 	.word	0x0800a78b
 800a548:	0800a7c3 	.word	0x0800a7c3
 800a54c:	0800a7e7 	.word	0x0800a7e7

0800a550 <_cleanup_r>:
 800a550:	4901      	ldr	r1, [pc, #4]	; (800a558 <_cleanup_r+0x8>)
 800a552:	f000 b885 	b.w	800a660 <_fwalk_reent>
 800a556:	bf00      	nop
 800a558:	0800a4b5 	.word	0x0800a4b5

0800a55c <__sfmoreglue>:
 800a55c:	b570      	push	{r4, r5, r6, lr}
 800a55e:	1e4a      	subs	r2, r1, #1
 800a560:	2568      	movs	r5, #104	; 0x68
 800a562:	4355      	muls	r5, r2
 800a564:	460e      	mov	r6, r1
 800a566:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a56a:	f7ff fd8f 	bl	800a08c <_malloc_r>
 800a56e:	4604      	mov	r4, r0
 800a570:	b140      	cbz	r0, 800a584 <__sfmoreglue+0x28>
 800a572:	2100      	movs	r1, #0
 800a574:	e9c0 1600 	strd	r1, r6, [r0]
 800a578:	300c      	adds	r0, #12
 800a57a:	60a0      	str	r0, [r4, #8]
 800a57c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a580:	f7ff fd20 	bl	8009fc4 <memset>
 800a584:	4620      	mov	r0, r4
 800a586:	bd70      	pop	{r4, r5, r6, pc}

0800a588 <__sinit>:
 800a588:	6983      	ldr	r3, [r0, #24]
 800a58a:	b510      	push	{r4, lr}
 800a58c:	4604      	mov	r4, r0
 800a58e:	bb33      	cbnz	r3, 800a5de <__sinit+0x56>
 800a590:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a594:	6503      	str	r3, [r0, #80]	; 0x50
 800a596:	4b12      	ldr	r3, [pc, #72]	; (800a5e0 <__sinit+0x58>)
 800a598:	4a12      	ldr	r2, [pc, #72]	; (800a5e4 <__sinit+0x5c>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	6282      	str	r2, [r0, #40]	; 0x28
 800a59e:	4298      	cmp	r0, r3
 800a5a0:	bf04      	itt	eq
 800a5a2:	2301      	moveq	r3, #1
 800a5a4:	6183      	streq	r3, [r0, #24]
 800a5a6:	f000 f81f 	bl	800a5e8 <__sfp>
 800a5aa:	6060      	str	r0, [r4, #4]
 800a5ac:	4620      	mov	r0, r4
 800a5ae:	f000 f81b 	bl	800a5e8 <__sfp>
 800a5b2:	60a0      	str	r0, [r4, #8]
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	f000 f817 	bl	800a5e8 <__sfp>
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	60e0      	str	r0, [r4, #12]
 800a5be:	2104      	movs	r1, #4
 800a5c0:	6860      	ldr	r0, [r4, #4]
 800a5c2:	f7ff ffa1 	bl	800a508 <std>
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	2109      	movs	r1, #9
 800a5ca:	68a0      	ldr	r0, [r4, #8]
 800a5cc:	f7ff ff9c 	bl	800a508 <std>
 800a5d0:	2202      	movs	r2, #2
 800a5d2:	2112      	movs	r1, #18
 800a5d4:	68e0      	ldr	r0, [r4, #12]
 800a5d6:	f7ff ff97 	bl	800a508 <std>
 800a5da:	2301      	movs	r3, #1
 800a5dc:	61a3      	str	r3, [r4, #24]
 800a5de:	bd10      	pop	{r4, pc}
 800a5e0:	0800b138 	.word	0x0800b138
 800a5e4:	0800a551 	.word	0x0800a551

0800a5e8 <__sfp>:
 800a5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ea:	4b1b      	ldr	r3, [pc, #108]	; (800a658 <__sfp+0x70>)
 800a5ec:	681e      	ldr	r6, [r3, #0]
 800a5ee:	69b3      	ldr	r3, [r6, #24]
 800a5f0:	4607      	mov	r7, r0
 800a5f2:	b913      	cbnz	r3, 800a5fa <__sfp+0x12>
 800a5f4:	4630      	mov	r0, r6
 800a5f6:	f7ff ffc7 	bl	800a588 <__sinit>
 800a5fa:	3648      	adds	r6, #72	; 0x48
 800a5fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a600:	3b01      	subs	r3, #1
 800a602:	d503      	bpl.n	800a60c <__sfp+0x24>
 800a604:	6833      	ldr	r3, [r6, #0]
 800a606:	b133      	cbz	r3, 800a616 <__sfp+0x2e>
 800a608:	6836      	ldr	r6, [r6, #0]
 800a60a:	e7f7      	b.n	800a5fc <__sfp+0x14>
 800a60c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a610:	b16d      	cbz	r5, 800a62e <__sfp+0x46>
 800a612:	3468      	adds	r4, #104	; 0x68
 800a614:	e7f4      	b.n	800a600 <__sfp+0x18>
 800a616:	2104      	movs	r1, #4
 800a618:	4638      	mov	r0, r7
 800a61a:	f7ff ff9f 	bl	800a55c <__sfmoreglue>
 800a61e:	6030      	str	r0, [r6, #0]
 800a620:	2800      	cmp	r0, #0
 800a622:	d1f1      	bne.n	800a608 <__sfp+0x20>
 800a624:	230c      	movs	r3, #12
 800a626:	603b      	str	r3, [r7, #0]
 800a628:	4604      	mov	r4, r0
 800a62a:	4620      	mov	r0, r4
 800a62c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a62e:	4b0b      	ldr	r3, [pc, #44]	; (800a65c <__sfp+0x74>)
 800a630:	6665      	str	r5, [r4, #100]	; 0x64
 800a632:	e9c4 5500 	strd	r5, r5, [r4]
 800a636:	60a5      	str	r5, [r4, #8]
 800a638:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a63c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a640:	2208      	movs	r2, #8
 800a642:	4629      	mov	r1, r5
 800a644:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a648:	f7ff fcbc 	bl	8009fc4 <memset>
 800a64c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a650:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a654:	e7e9      	b.n	800a62a <__sfp+0x42>
 800a656:	bf00      	nop
 800a658:	0800b138 	.word	0x0800b138
 800a65c:	ffff0001 	.word	0xffff0001

0800a660 <_fwalk_reent>:
 800a660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a664:	4680      	mov	r8, r0
 800a666:	4689      	mov	r9, r1
 800a668:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a66c:	2600      	movs	r6, #0
 800a66e:	b914      	cbnz	r4, 800a676 <_fwalk_reent+0x16>
 800a670:	4630      	mov	r0, r6
 800a672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a676:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a67a:	3f01      	subs	r7, #1
 800a67c:	d501      	bpl.n	800a682 <_fwalk_reent+0x22>
 800a67e:	6824      	ldr	r4, [r4, #0]
 800a680:	e7f5      	b.n	800a66e <_fwalk_reent+0xe>
 800a682:	89ab      	ldrh	r3, [r5, #12]
 800a684:	2b01      	cmp	r3, #1
 800a686:	d907      	bls.n	800a698 <_fwalk_reent+0x38>
 800a688:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a68c:	3301      	adds	r3, #1
 800a68e:	d003      	beq.n	800a698 <_fwalk_reent+0x38>
 800a690:	4629      	mov	r1, r5
 800a692:	4640      	mov	r0, r8
 800a694:	47c8      	blx	r9
 800a696:	4306      	orrs	r6, r0
 800a698:	3568      	adds	r5, #104	; 0x68
 800a69a:	e7ee      	b.n	800a67a <_fwalk_reent+0x1a>

0800a69c <__swhatbuf_r>:
 800a69c:	b570      	push	{r4, r5, r6, lr}
 800a69e:	460e      	mov	r6, r1
 800a6a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6a4:	2900      	cmp	r1, #0
 800a6a6:	b096      	sub	sp, #88	; 0x58
 800a6a8:	4614      	mov	r4, r2
 800a6aa:	461d      	mov	r5, r3
 800a6ac:	da07      	bge.n	800a6be <__swhatbuf_r+0x22>
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	602b      	str	r3, [r5, #0]
 800a6b2:	89b3      	ldrh	r3, [r6, #12]
 800a6b4:	061a      	lsls	r2, r3, #24
 800a6b6:	d410      	bmi.n	800a6da <__swhatbuf_r+0x3e>
 800a6b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6bc:	e00e      	b.n	800a6dc <__swhatbuf_r+0x40>
 800a6be:	466a      	mov	r2, sp
 800a6c0:	f000 f8b8 	bl	800a834 <_fstat_r>
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	dbf2      	blt.n	800a6ae <__swhatbuf_r+0x12>
 800a6c8:	9a01      	ldr	r2, [sp, #4]
 800a6ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a6ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a6d2:	425a      	negs	r2, r3
 800a6d4:	415a      	adcs	r2, r3
 800a6d6:	602a      	str	r2, [r5, #0]
 800a6d8:	e7ee      	b.n	800a6b8 <__swhatbuf_r+0x1c>
 800a6da:	2340      	movs	r3, #64	; 0x40
 800a6dc:	2000      	movs	r0, #0
 800a6de:	6023      	str	r3, [r4, #0]
 800a6e0:	b016      	add	sp, #88	; 0x58
 800a6e2:	bd70      	pop	{r4, r5, r6, pc}

0800a6e4 <__smakebuf_r>:
 800a6e4:	898b      	ldrh	r3, [r1, #12]
 800a6e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a6e8:	079d      	lsls	r5, r3, #30
 800a6ea:	4606      	mov	r6, r0
 800a6ec:	460c      	mov	r4, r1
 800a6ee:	d507      	bpl.n	800a700 <__smakebuf_r+0x1c>
 800a6f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a6f4:	6023      	str	r3, [r4, #0]
 800a6f6:	6123      	str	r3, [r4, #16]
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	6163      	str	r3, [r4, #20]
 800a6fc:	b002      	add	sp, #8
 800a6fe:	bd70      	pop	{r4, r5, r6, pc}
 800a700:	ab01      	add	r3, sp, #4
 800a702:	466a      	mov	r2, sp
 800a704:	f7ff ffca 	bl	800a69c <__swhatbuf_r>
 800a708:	9900      	ldr	r1, [sp, #0]
 800a70a:	4605      	mov	r5, r0
 800a70c:	4630      	mov	r0, r6
 800a70e:	f7ff fcbd 	bl	800a08c <_malloc_r>
 800a712:	b948      	cbnz	r0, 800a728 <__smakebuf_r+0x44>
 800a714:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a718:	059a      	lsls	r2, r3, #22
 800a71a:	d4ef      	bmi.n	800a6fc <__smakebuf_r+0x18>
 800a71c:	f023 0303 	bic.w	r3, r3, #3
 800a720:	f043 0302 	orr.w	r3, r3, #2
 800a724:	81a3      	strh	r3, [r4, #12]
 800a726:	e7e3      	b.n	800a6f0 <__smakebuf_r+0xc>
 800a728:	4b0d      	ldr	r3, [pc, #52]	; (800a760 <__smakebuf_r+0x7c>)
 800a72a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a72c:	89a3      	ldrh	r3, [r4, #12]
 800a72e:	6020      	str	r0, [r4, #0]
 800a730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a734:	81a3      	strh	r3, [r4, #12]
 800a736:	9b00      	ldr	r3, [sp, #0]
 800a738:	6163      	str	r3, [r4, #20]
 800a73a:	9b01      	ldr	r3, [sp, #4]
 800a73c:	6120      	str	r0, [r4, #16]
 800a73e:	b15b      	cbz	r3, 800a758 <__smakebuf_r+0x74>
 800a740:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a744:	4630      	mov	r0, r6
 800a746:	f000 f887 	bl	800a858 <_isatty_r>
 800a74a:	b128      	cbz	r0, 800a758 <__smakebuf_r+0x74>
 800a74c:	89a3      	ldrh	r3, [r4, #12]
 800a74e:	f023 0303 	bic.w	r3, r3, #3
 800a752:	f043 0301 	orr.w	r3, r3, #1
 800a756:	81a3      	strh	r3, [r4, #12]
 800a758:	89a3      	ldrh	r3, [r4, #12]
 800a75a:	431d      	orrs	r5, r3
 800a75c:	81a5      	strh	r5, [r4, #12]
 800a75e:	e7cd      	b.n	800a6fc <__smakebuf_r+0x18>
 800a760:	0800a551 	.word	0x0800a551

0800a764 <__malloc_lock>:
 800a764:	4770      	bx	lr

0800a766 <__malloc_unlock>:
 800a766:	4770      	bx	lr

0800a768 <__sread>:
 800a768:	b510      	push	{r4, lr}
 800a76a:	460c      	mov	r4, r1
 800a76c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a770:	f000 f894 	bl	800a89c <_read_r>
 800a774:	2800      	cmp	r0, #0
 800a776:	bfab      	itete	ge
 800a778:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a77a:	89a3      	ldrhlt	r3, [r4, #12]
 800a77c:	181b      	addge	r3, r3, r0
 800a77e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a782:	bfac      	ite	ge
 800a784:	6563      	strge	r3, [r4, #84]	; 0x54
 800a786:	81a3      	strhlt	r3, [r4, #12]
 800a788:	bd10      	pop	{r4, pc}

0800a78a <__swrite>:
 800a78a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a78e:	461f      	mov	r7, r3
 800a790:	898b      	ldrh	r3, [r1, #12]
 800a792:	05db      	lsls	r3, r3, #23
 800a794:	4605      	mov	r5, r0
 800a796:	460c      	mov	r4, r1
 800a798:	4616      	mov	r6, r2
 800a79a:	d505      	bpl.n	800a7a8 <__swrite+0x1e>
 800a79c:	2302      	movs	r3, #2
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7a4:	f000 f868 	bl	800a878 <_lseek_r>
 800a7a8:	89a3      	ldrh	r3, [r4, #12]
 800a7aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a7b2:	81a3      	strh	r3, [r4, #12]
 800a7b4:	4632      	mov	r2, r6
 800a7b6:	463b      	mov	r3, r7
 800a7b8:	4628      	mov	r0, r5
 800a7ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7be:	f000 b817 	b.w	800a7f0 <_write_r>

0800a7c2 <__sseek>:
 800a7c2:	b510      	push	{r4, lr}
 800a7c4:	460c      	mov	r4, r1
 800a7c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7ca:	f000 f855 	bl	800a878 <_lseek_r>
 800a7ce:	1c43      	adds	r3, r0, #1
 800a7d0:	89a3      	ldrh	r3, [r4, #12]
 800a7d2:	bf15      	itete	ne
 800a7d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a7d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a7da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a7de:	81a3      	strheq	r3, [r4, #12]
 800a7e0:	bf18      	it	ne
 800a7e2:	81a3      	strhne	r3, [r4, #12]
 800a7e4:	bd10      	pop	{r4, pc}

0800a7e6 <__sclose>:
 800a7e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7ea:	f000 b813 	b.w	800a814 <_close_r>
	...

0800a7f0 <_write_r>:
 800a7f0:	b538      	push	{r3, r4, r5, lr}
 800a7f2:	4c07      	ldr	r4, [pc, #28]	; (800a810 <_write_r+0x20>)
 800a7f4:	4605      	mov	r5, r0
 800a7f6:	4608      	mov	r0, r1
 800a7f8:	4611      	mov	r1, r2
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	6022      	str	r2, [r4, #0]
 800a7fe:	461a      	mov	r2, r3
 800a800:	f7f6 fed9 	bl	80015b6 <_write>
 800a804:	1c43      	adds	r3, r0, #1
 800a806:	d102      	bne.n	800a80e <_write_r+0x1e>
 800a808:	6823      	ldr	r3, [r4, #0]
 800a80a:	b103      	cbz	r3, 800a80e <_write_r+0x1e>
 800a80c:	602b      	str	r3, [r5, #0]
 800a80e:	bd38      	pop	{r3, r4, r5, pc}
 800a810:	24000384 	.word	0x24000384

0800a814 <_close_r>:
 800a814:	b538      	push	{r3, r4, r5, lr}
 800a816:	4c06      	ldr	r4, [pc, #24]	; (800a830 <_close_r+0x1c>)
 800a818:	2300      	movs	r3, #0
 800a81a:	4605      	mov	r5, r0
 800a81c:	4608      	mov	r0, r1
 800a81e:	6023      	str	r3, [r4, #0]
 800a820:	f7f6 fee5 	bl	80015ee <_close>
 800a824:	1c43      	adds	r3, r0, #1
 800a826:	d102      	bne.n	800a82e <_close_r+0x1a>
 800a828:	6823      	ldr	r3, [r4, #0]
 800a82a:	b103      	cbz	r3, 800a82e <_close_r+0x1a>
 800a82c:	602b      	str	r3, [r5, #0]
 800a82e:	bd38      	pop	{r3, r4, r5, pc}
 800a830:	24000384 	.word	0x24000384

0800a834 <_fstat_r>:
 800a834:	b538      	push	{r3, r4, r5, lr}
 800a836:	4c07      	ldr	r4, [pc, #28]	; (800a854 <_fstat_r+0x20>)
 800a838:	2300      	movs	r3, #0
 800a83a:	4605      	mov	r5, r0
 800a83c:	4608      	mov	r0, r1
 800a83e:	4611      	mov	r1, r2
 800a840:	6023      	str	r3, [r4, #0]
 800a842:	f7f6 fee0 	bl	8001606 <_fstat>
 800a846:	1c43      	adds	r3, r0, #1
 800a848:	d102      	bne.n	800a850 <_fstat_r+0x1c>
 800a84a:	6823      	ldr	r3, [r4, #0]
 800a84c:	b103      	cbz	r3, 800a850 <_fstat_r+0x1c>
 800a84e:	602b      	str	r3, [r5, #0]
 800a850:	bd38      	pop	{r3, r4, r5, pc}
 800a852:	bf00      	nop
 800a854:	24000384 	.word	0x24000384

0800a858 <_isatty_r>:
 800a858:	b538      	push	{r3, r4, r5, lr}
 800a85a:	4c06      	ldr	r4, [pc, #24]	; (800a874 <_isatty_r+0x1c>)
 800a85c:	2300      	movs	r3, #0
 800a85e:	4605      	mov	r5, r0
 800a860:	4608      	mov	r0, r1
 800a862:	6023      	str	r3, [r4, #0]
 800a864:	f7f6 fedf 	bl	8001626 <_isatty>
 800a868:	1c43      	adds	r3, r0, #1
 800a86a:	d102      	bne.n	800a872 <_isatty_r+0x1a>
 800a86c:	6823      	ldr	r3, [r4, #0]
 800a86e:	b103      	cbz	r3, 800a872 <_isatty_r+0x1a>
 800a870:	602b      	str	r3, [r5, #0]
 800a872:	bd38      	pop	{r3, r4, r5, pc}
 800a874:	24000384 	.word	0x24000384

0800a878 <_lseek_r>:
 800a878:	b538      	push	{r3, r4, r5, lr}
 800a87a:	4c07      	ldr	r4, [pc, #28]	; (800a898 <_lseek_r+0x20>)
 800a87c:	4605      	mov	r5, r0
 800a87e:	4608      	mov	r0, r1
 800a880:	4611      	mov	r1, r2
 800a882:	2200      	movs	r2, #0
 800a884:	6022      	str	r2, [r4, #0]
 800a886:	461a      	mov	r2, r3
 800a888:	f7f6 fed8 	bl	800163c <_lseek>
 800a88c:	1c43      	adds	r3, r0, #1
 800a88e:	d102      	bne.n	800a896 <_lseek_r+0x1e>
 800a890:	6823      	ldr	r3, [r4, #0]
 800a892:	b103      	cbz	r3, 800a896 <_lseek_r+0x1e>
 800a894:	602b      	str	r3, [r5, #0]
 800a896:	bd38      	pop	{r3, r4, r5, pc}
 800a898:	24000384 	.word	0x24000384

0800a89c <_read_r>:
 800a89c:	b538      	push	{r3, r4, r5, lr}
 800a89e:	4c07      	ldr	r4, [pc, #28]	; (800a8bc <_read_r+0x20>)
 800a8a0:	4605      	mov	r5, r0
 800a8a2:	4608      	mov	r0, r1
 800a8a4:	4611      	mov	r1, r2
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	6022      	str	r2, [r4, #0]
 800a8aa:	461a      	mov	r2, r3
 800a8ac:	f7f6 fe66 	bl	800157c <_read>
 800a8b0:	1c43      	adds	r3, r0, #1
 800a8b2:	d102      	bne.n	800a8ba <_read_r+0x1e>
 800a8b4:	6823      	ldr	r3, [r4, #0]
 800a8b6:	b103      	cbz	r3, 800a8ba <_read_r+0x1e>
 800a8b8:	602b      	str	r3, [r5, #0]
 800a8ba:	bd38      	pop	{r3, r4, r5, pc}
 800a8bc:	24000384 	.word	0x24000384

0800a8c0 <_init>:
 800a8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8c2:	bf00      	nop
 800a8c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8c6:	bc08      	pop	{r3}
 800a8c8:	469e      	mov	lr, r3
 800a8ca:	4770      	bx	lr

0800a8cc <_fini>:
 800a8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ce:	bf00      	nop
 800a8d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8d2:	bc08      	pop	{r3}
 800a8d4:	469e      	mov	lr, r3
 800a8d6:	4770      	bx	lr
