
theremin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b178  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000930  0800b428  0800b428  0001b428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd58  0800bd58  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd58  0800bd58  0001bd58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd60  0800bd60  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd60  0800bd60  0001bd60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd64  0800bd64  0001bd64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  24000000  0800bd68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  24000080  0800bde8  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240003e8  0800bde8  000203e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025c7f  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c22  00000000  00000000  00045d2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001740  00000000  00000000  00049950  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015c8  00000000  00000000  0004b090  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00033d77  00000000  00000000  0004c658  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015465  00000000  00000000  000803cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00156357  00000000  00000000  00095834  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ebb8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c18  00000000  00000000  001ebc08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000080 	.word	0x24000080
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800b410 	.word	0x0800b410

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000084 	.word	0x24000084
 80002ec:	0800b410 	.word	0x0800b410

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <main>:
  * @brief  The application entry point.
  * Run the theremin.
  * @retval int
  */
int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b096      	sub	sp, #88	; 0x58
 8000694:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000696:	f001 fa8b 	bl	8001bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069a:	f000 f8ef 	bl	800087c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069e:	f000 fc09 	bl	8000eb4 <MX_GPIO_Init>
  MX_DMA_Init();
 80006a2:	f000 fbcf 	bl	8000e44 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80006a6:	f000 fb79 	bl	8000d9c <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80006aa:	f000 fbc3 	bl	8000e34 <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 80006ae:	f000 f9b5 	bl	8000a1c <MX_ADC1_Init>
  MX_DAC1_Init();
 80006b2:	f000 fa2d 	bl	8000b10 <MX_DAC1_Init>
  MX_TIM6_Init();
 80006b6:	f000 fb05 	bl	8000cc4 <MX_TIM6_Init>
  MX_TIM2_Init();
 80006ba:	f000 fa5b 	bl	8000b74 <MX_TIM2_Init>
  MX_TIM7_Init();
 80006be:	f000 fb37 	bl	8000d30 <MX_TIM7_Init>
  MX_TIM5_Init();
 80006c2:	f000 faab 	bl	8000c1c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize NCO structure to create sine waves */
  s_ref = init_nco(1. / 100., 0);
 80006c6:	eddf 0a5a 	vldr	s1, [pc, #360]	; 8000830 <main+0x1a0>
 80006ca:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 8000834 <main+0x1a4>
 80006ce:	f000 fd9f 	bl	8001210 <init_nco>
 80006d2:	6438      	str	r0, [r7, #64]	; 0x40
  sin_buffer = calloc(BLOCKSIZE, sizeof(uint16_t));
 80006d4:	2102      	movs	r1, #2
 80006d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006da:	f009 fe81 	bl	800a3e0 <calloc>
 80006de:	4603      	mov	r3, r0
 80006e0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if ((sin_buffer == NULL)) {
 80006e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d105      	bne.n	80006f4 <main+0x64>
	  printf("Failed to allocate memory for arrays\n");
 80006e8:	4853      	ldr	r0, [pc, #332]	; (8000838 <main+0x1a8>)
 80006ea:	f009 ffe1 	bl	800a6b0 <puts>
	  exit(EXIT_FAILURE);
 80006ee:	2001      	movs	r0, #1
 80006f0:	f009 fe84 	bl	800a3fc <exit>
  }

  /* Start TIM6 and DAC with DMA */
  HAL_TIM_Base_Start(&htim6);
 80006f4:	4851      	ldr	r0, [pc, #324]	; (800083c <main+0x1ac>)
 80006f6:	f007 ffe1 	bl	80086bc <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80006fa:	2100      	movs	r1, #0
 80006fc:	4850      	ldr	r0, [pc, #320]	; (8000840 <main+0x1b0>)
 80006fe:	f002 fb48 	bl	8002d92 <HAL_DAC_Start>

  set_blocksize(BLOCKSIZE);
 8000702:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000706:	f000 fe81 	bl	800140c <set_blocksize>
  dac_buff = (uint16_t *) malloc(sizeof(uint16_t)*BLOCKSIZE*2);
 800070a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800070e:	f009 fead 	bl	800a46c <malloc>
 8000712:	4603      	mov	r3, r0
 8000714:	461a      	mov	r2, r3
 8000716:	4b4b      	ldr	r3, [pc, #300]	; (8000844 <main+0x1b4>)
 8000718:	601a      	str	r2, [r3, #0]

  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)sin_buffer, BLOCKSIZE, DAC_ALIGN_12B_R);
 800071a:	2300      	movs	r3, #0
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000722:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000724:	2100      	movs	r1, #0
 8000726:	4846      	ldr	r0, [pc, #280]	; (8000840 <main+0x1b0>)
 8000728:	f002 fb86 	bl	8002e38 <HAL_DAC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  /* Timer to update and change frequencies with */
  HAL_TIM_Base_Start_IT(&htim7);
 800072c:	4846      	ldr	r0, [pc, #280]	; (8000848 <main+0x1b8>)
 800072e:	f007 fff3 	bl	8008718 <HAL_TIM_Base_Start_IT>

  /* Timers to count up input pulses */
  HAL_TIM_Base_Start(&htim2);
 8000732:	4846      	ldr	r0, [pc, #280]	; (800084c <main+0x1bc>)
 8000734:	f007 ffc2 	bl	80086bc <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim5);
 8000738:	4845      	ldr	r0, [pc, #276]	; (8000850 <main+0x1c0>)
 800073a:	f007 ffbf 	bl	80086bc <HAL_TIM_Base_Start>
  i = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	64fb      	str	r3, [r7, #76]	; 0x4c

  while (1)
  {

	  /* Trigger every MILLISECONDS ms */
	  if (update_freq_flag) {
 8000742:	4b44      	ldr	r3, [pc, #272]	; (8000854 <main+0x1c4>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	b2db      	uxtb	r3, r3
 8000748:	2b00      	cmp	r3, #0
 800074a:	d062      	beq.n	8000812 <main+0x182>

//		  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);

		  /* Calculate the frequency to oscillate at */
		  freq = (int)((freq_timer_count * 1000 - REF_PITCH_OSC_FREQ));
 800074c:	4b42      	ldr	r3, [pc, #264]	; (8000858 <main+0x1c8>)
 800074e:	edd3 7a00 	vldr	s15, [r3]
 8000752:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800085c <main+0x1cc>
 8000756:	ee67 7a87 	vmul.f32	s15, s15, s14
 800075a:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8000860 <main+0x1d0>
 800075e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000762:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000766:	ee17 3a90 	vmov	r3, s15
 800076a:	64bb      	str	r3, [r7, #72]	; 0x48

		  /* Calculate the volume level */
		  vol = (int)((vol_timer_count * 1000 - REF_VOL_OSC_FREQ)) ;
 800076c:	4b3d      	ldr	r3, [pc, #244]	; (8000864 <main+0x1d4>)
 800076e:	edd3 7a00 	vldr	s15, [r3]
 8000772:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800085c <main+0x1cc>
 8000776:	ee67 7a87 	vmul.f32	s15, s15, s14
 800077a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8000868 <main+0x1d8>
 800077e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000782:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000786:	ee17 3a90 	vmov	r3, s15
 800078a:	647b      	str	r3, [r7, #68]	; 0x44

		  /* Take the absolute value of the difference */
		  if (freq < 0)
 800078c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800078e:	2b00      	cmp	r3, #0
 8000790:	da02      	bge.n	8000798 <main+0x108>
			  freq = -freq;
 8000792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000794:	425b      	negs	r3, r3
 8000796:	64bb      	str	r3, [r7, #72]	; 0x48
		  if (vol < 0)
 8000798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800079a:	2b00      	cmp	r3, #0
 800079c:	da02      	bge.n	80007a4 <main+0x114>
			  vol = -vol;
 800079e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007a0:	425b      	negs	r3, r3
 80007a2:	647b      	str	r3, [r7, #68]	; 0x44

		  if (freq > 4000)
 80007a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007a6:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80007aa:	dd02      	ble.n	80007b2 <main+0x122>
			  freq = 4000;
 80007ac:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80007b0:	64bb      	str	r3, [r7, #72]	; 0x48

		  /* Inform serial bus of the current output frequency */
		  uart_buf_len = sprintf(uart_buf, "%dHz, %dHz\r\n", (int)(freq_timer_count * 1000), freq);
 80007b2:	4b29      	ldr	r3, [pc, #164]	; (8000858 <main+0x1c8>)
 80007b4:	edd3 7a00 	vldr	s15, [r3]
 80007b8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800085c <main+0x1cc>
 80007bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007c4:	1d38      	adds	r0, r7, #4
 80007c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007c8:	ee17 2a90 	vmov	r2, s15
 80007cc:	4927      	ldr	r1, [pc, #156]	; (800086c <main+0x1dc>)
 80007ce:	f009 ff87 	bl	800a6e0 <siprintf>
 80007d2:	63b8      	str	r0, [r7, #56]	; 0x38
		  HAL_UART_Transmit(&huart3, uart_buf, uart_buf_len, 100);
 80007d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	1d39      	adds	r1, r7, #4
 80007da:	2364      	movs	r3, #100	; 0x64
 80007dc:	4824      	ldr	r0, [pc, #144]	; (8000870 <main+0x1e0>)
 80007de:	f008 fc35 	bl	800904c <HAL_UART_Transmit>

		  /* Generate sine wave at desired frequency and amplitude */
		  nco_set_frequency(s_ref, (float)freq / 50000.);
 80007e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007e4:	ee07 3a90 	vmov	s15, r3
 80007e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007ec:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8000874 <main+0x1e4>
 80007f0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80007f4:	eeb0 0a66 	vmov.f32	s0, s13
 80007f8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80007fa:	f000 fdb3 	bl	8001364 <nco_set_frequency>
		  nco_set_amplitude(s_ref, vol);
 80007fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000800:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000802:	f000 fdcb 	bl	800139c <nco_set_amplitude>

		  update_freq_flag = 0;
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <main+0x1c4>)
 8000808:	2200      	movs	r2, #0
 800080a:	701a      	strb	r2, [r3, #0]
		  i++;
 800080c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800080e:	3301      	adds	r3, #1
 8000810:	64fb      	str	r3, [r7, #76]	; 0x4c
//		  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
	  }
//	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);

	  /* Set DAC output samples if the previous block is complete*/
	  if (dac_comp_flag) {
 8000812:	4b19      	ldr	r3, [pc, #100]	; (8000878 <main+0x1e8>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	b2db      	uxtb	r3, r3
 8000818:	2b00      	cmp	r3, #0
 800081a:	d092      	beq.n	8000742 <main+0xb2>
//		  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
		  nco_get_samples(s_ref, sin_buffer, BLOCKSIZE);
 800081c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000820:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000822:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000824:	f000 fd40 	bl	80012a8 <nco_get_samples>
		  dac_comp_flag = 0;
 8000828:	4b13      	ldr	r3, [pc, #76]	; (8000878 <main+0x1e8>)
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
	  if (update_freq_flag) {
 800082e:	e788      	b.n	8000742 <main+0xb2>
 8000830:	00000000 	.word	0x00000000
 8000834:	3c23d70a 	.word	0x3c23d70a
 8000838:	0800b428 	.word	0x0800b428
 800083c:	240002f8 	.word	0x240002f8
 8000840:	240000b8 	.word	0x240000b8
 8000844:	240000a8 	.word	0x240000a8
 8000848:	24000390 	.word	0x24000390
 800084c:	24000344 	.word	0x24000344
 8000850:	240001d0 	.word	0x240001d0
 8000854:	240003dc 	.word	0x240003dc
 8000858:	2400009c 	.word	0x2400009c
 800085c:	447a0000 	.word	0x447a0000
 8000860:	48751e00 	.word	0x48751e00
 8000864:	240000a0 	.word	0x240000a0
 8000868:	487de800 	.word	0x487de800
 800086c:	0800b450 	.word	0x0800b450
 8000870:	240000cc 	.word	0x240000cc
 8000874:	47435000 	.word	0x47435000
 8000878:	24000000 	.word	0x24000000

0800087c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b0ca      	sub	sp, #296	; 0x128
 8000880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000882:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000886:	224c      	movs	r2, #76	; 0x4c
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f009 fdf6 	bl	800a47c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000890:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000894:	2220      	movs	r2, #32
 8000896:	2100      	movs	r1, #0
 8000898:	4618      	mov	r0, r3
 800089a:	f009 fdef 	bl	800a47c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	4618      	mov	r0, r3
 80008a2:	23b8      	movs	r3, #184	; 0xb8
 80008a4:	461a      	mov	r2, r3
 80008a6:	2100      	movs	r1, #0
 80008a8:	f009 fde8 	bl	800a47c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008ac:	2004      	movs	r0, #4
 80008ae:	f005 f8af 	bl	8005a10 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008b2:	463b      	mov	r3, r7
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	4b55      	ldr	r3, [pc, #340]	; (8000a10 <SystemClock_Config+0x194>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	4a54      	ldr	r2, [pc, #336]	; (8000a10 <SystemClock_Config+0x194>)
 80008be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008c2:	6193      	str	r3, [r2, #24]
 80008c4:	4b52      	ldr	r3, [pc, #328]	; (8000a10 <SystemClock_Config+0x194>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80008cc:	463b      	mov	r3, r7
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	463b      	mov	r3, r7
 80008d2:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008d4:	bf00      	nop
 80008d6:	4b4e      	ldr	r3, [pc, #312]	; (8000a10 <SystemClock_Config+0x194>)
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008e2:	d1f8      	bne.n	80008d6 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80008e4:	4b4b      	ldr	r3, [pc, #300]	; (8000a14 <SystemClock_Config+0x198>)
 80008e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008e8:	f023 0303 	bic.w	r3, r3, #3
 80008ec:	4a49      	ldr	r2, [pc, #292]	; (8000a14 <SystemClock_Config+0x198>)
 80008ee:	f043 0302 	orr.w	r3, r3, #2
 80008f2:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 80008f4:	2329      	movs	r3, #41	; 0x29
 80008f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008fa:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000902:	2301      	movs	r3, #1
 8000904:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000908:	2301      	movs	r3, #1
 800090a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090e:	2302      	movs	r3, #2
 8000910:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000914:	2302      	movs	r3, #2
 8000916:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  RCC_OscInitStruct.PLL.PLLM = 1;
 800091a:	2301      	movs	r3, #1
 800091c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000920:	2318      	movs	r3, #24
 8000922:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000926:	2302      	movs	r3, #2
 8000928:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800092c:	2304      	movs	r3, #4
 800092e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000932:	2302      	movs	r3, #2
 8000934:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000938:	230c      	movs	r3, #12
 800093a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800093e:	2300      	movs	r3, #0
 8000940:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800094e:	4618      	mov	r0, r3
 8000950:	f005 f8b8 	bl	8005ac4 <HAL_RCC_OscConfig>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800095a:	f000 fc51 	bl	8001200 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095e:	233f      	movs	r3, #63	; 0x3f
 8000960:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000964:	2303      	movs	r3, #3
 8000966:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800096a:	2300      	movs	r3, #0
 800096c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000970:	2300      	movs	r3, #0
 8000972:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000976:	2300      	movs	r3, #0
 8000978:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000982:	2300      	movs	r3, #0
 8000984:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000988:	2300      	movs	r3, #0
 800098a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800098e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000992:	2102      	movs	r1, #2
 8000994:	4618      	mov	r0, r3
 8000996:	f005 fc7d 	bl	8006294 <HAL_RCC_ClockConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SystemClock_Config+0x128>
  {
    Error_Handler();
 80009a0:	f000 fc2e 	bl	8001200 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_ADC
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	4a1c      	ldr	r2, [pc, #112]	; (8000a18 <SystemClock_Config+0x19c>)
 80009a8:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	2201      	movs	r2, #1
 80009ae:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	2210      	movs	r2, #16
 80009b4:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	2202      	movs	r2, #2
 80009ba:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	2202      	movs	r2, #2
 80009c0:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	2202      	movs	r2, #2
 80009c6:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	22c0      	movs	r2, #192	; 0xc0
 80009cc:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2200      	movs	r2, #0
 80009d2:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	2200      	movs	r2, #0
 80009d8:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	2200      	movs	r2, #0
 80009de:	67da      	str	r2, [r3, #124]	; 0x7c
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80009e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2200      	movs	r2, #0
 80009ee:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	4618      	mov	r0, r3
 80009f6:	f005 ffd1 	bl	800699c <HAL_RCCEx_PeriphCLKConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config+0x188>
  {
    Error_Handler();
 8000a00:	f000 fbfe 	bl	8001200 <Error_Handler>
  }
}
 8000a04:	bf00      	nop
 8000a06:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	58024800 	.word	0x58024800
 8000a14:	58024400 	.word	0x58024400
 8000a18:	000c0002 	.word	0x000c0002

08000a1c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08a      	sub	sp, #40	; 0x28
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a2e:	463b      	mov	r3, r7
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
 8000a3c:	615a      	str	r2, [r3, #20]
 8000a3e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a40:	4b30      	ldr	r3, [pc, #192]	; (8000b04 <MX_ADC1_Init+0xe8>)
 8000a42:	4a31      	ldr	r2, [pc, #196]	; (8000b08 <MX_ADC1_Init+0xec>)
 8000a44:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a46:	4b2f      	ldr	r3, [pc, #188]	; (8000b04 <MX_ADC1_Init+0xe8>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a4c:	4b2d      	ldr	r3, [pc, #180]	; (8000b04 <MX_ADC1_Init+0xe8>)
 8000a4e:	2208      	movs	r2, #8
 8000a50:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a52:	4b2c      	ldr	r3, [pc, #176]	; (8000b04 <MX_ADC1_Init+0xe8>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a58:	4b2a      	ldr	r3, [pc, #168]	; (8000b04 <MX_ADC1_Init+0xe8>)
 8000a5a:	2204      	movs	r2, #4
 8000a5c:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a5e:	4b29      	ldr	r3, [pc, #164]	; (8000b04 <MX_ADC1_Init+0xe8>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a64:	4b27      	ldr	r3, [pc, #156]	; (8000b04 <MX_ADC1_Init+0xe8>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000a6a:	4b26      	ldr	r3, [pc, #152]	; (8000b04 <MX_ADC1_Init+0xe8>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a70:	4b24      	ldr	r3, [pc, #144]	; (8000b04 <MX_ADC1_Init+0xe8>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000a76:	4b23      	ldr	r3, [pc, #140]	; (8000b04 <MX_ADC1_Init+0xe8>)
 8000a78:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8000a7c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a7e:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <MX_ADC1_Init+0xe8>)
 8000a80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a84:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000a86:	4b1f      	ldr	r3, [pc, #124]	; (8000b04 <MX_ADC1_Init+0xe8>)
 8000a88:	2203      	movs	r2, #3
 8000a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a8c:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <MX_ADC1_Init+0xe8>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a92:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <MX_ADC1_Init+0xe8>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a98:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <MX_ADC1_Init+0xe8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aa0:	4818      	ldr	r0, [pc, #96]	; (8000b04 <MX_ADC1_Init+0xe8>)
 8000aa2:	f001 fac5 	bl	8002030 <HAL_ADC_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000aac:	f000 fba8 	bl	8001200 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4812      	ldr	r0, [pc, #72]	; (8000b04 <MX_ADC1_Init+0xe8>)
 8000abc:	f001 ffa0 	bl	8002a00 <HAL_ADCEx_MultiModeConfigChannel>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000ac6:	f000 fb9b 	bl	8001200 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <MX_ADC1_Init+0xf0>)
 8000acc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ace:	2306      	movs	r3, #6
 8000ad0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ad6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ada:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000adc:	2304      	movs	r3, #4
 8000ade:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ae8:	463b      	mov	r3, r7
 8000aea:	4619      	mov	r1, r3
 8000aec:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_ADC1_Init+0xe8>)
 8000aee:	f001 fbf9 	bl	80022e4 <HAL_ADC_ConfigChannel>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000af8:	f000 fb82 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000afc:	bf00      	nop
 8000afe:	3728      	adds	r7, #40	; 0x28
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	2400021c 	.word	0x2400021c
 8000b08:	40022000 	.word	0x40022000
 8000b0c:	14f00020 	.word	0x14f00020

08000b10 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	2224      	movs	r2, #36	; 0x24
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f009 fcad 	bl	800a47c <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <MX_DAC1_Init+0x5c>)
 8000b24:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <MX_DAC1_Init+0x60>)
 8000b26:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b28:	4810      	ldr	r0, [pc, #64]	; (8000b6c <MX_DAC1_Init+0x5c>)
 8000b2a:	f002 f910 	bl	8002d4e <HAL_DAC_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000b34:	f000 fb64 	bl	8001200 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000b3c:	2316      	movs	r3, #22
 8000b3e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000b44:	2302      	movs	r3, #2
 8000b46:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	2200      	movs	r2, #0
 8000b50:	4619      	mov	r1, r3
 8000b52:	4806      	ldr	r0, [pc, #24]	; (8000b6c <MX_DAC1_Init+0x5c>)
 8000b54:	f002 fa42 	bl	8002fdc <HAL_DAC_ConfigChannel>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000b5e:	f000 fb4f 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	3728      	adds	r7, #40	; 0x28
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	240000b8 	.word	0x240000b8
 8000b70:	40007400 	.word	0x40007400

08000b74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b088      	sub	sp, #32
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b7a:	f107 030c 	add.w	r3, r7, #12
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
 8000b88:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b94:	4b20      	ldr	r3, [pc, #128]	; (8000c18 <MX_TIM2_Init+0xa4>)
 8000b96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b9c:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <MX_TIM2_Init+0xa4>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba2:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <MX_TIM2_Init+0xa4>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ba8:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <MX_TIM2_Init+0xa4>)
 8000baa:	f04f 32ff 	mov.w	r2, #4294967295
 8000bae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb0:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <MX_TIM2_Init+0xa4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <MX_TIM2_Init+0xa4>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bbc:	4816      	ldr	r0, [pc, #88]	; (8000c18 <MX_TIM2_Init+0xa4>)
 8000bbe:	f007 fd25 	bl	800860c <HAL_TIM_Base_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000bc8:	f000 fb1a 	bl	8001200 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000bcc:	2307      	movs	r3, #7
 8000bce:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000bd0:	2350      	movs	r3, #80	; 0x50
 8000bd2:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 1;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000bdc:	f107 030c 	add.w	r3, r7, #12
 8000be0:	4619      	mov	r1, r3
 8000be2:	480d      	ldr	r0, [pc, #52]	; (8000c18 <MX_TIM2_Init+0xa4>)
 8000be4:	f007 feed 	bl	80089c2 <HAL_TIM_SlaveConfigSynchro>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000bee:	f000 fb07 	bl	8001200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4806      	ldr	r0, [pc, #24]	; (8000c18 <MX_TIM2_Init+0xa4>)
 8000c00:	f008 f92e 	bl	8008e60 <HAL_TIMEx_MasterConfigSynchronization>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000c0a:	f000 faf9 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	3720      	adds	r7, #32
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	24000344 	.word	0x24000344

08000c1c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c22:	f107 030c 	add.w	r3, r7, #12
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
 8000c30:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c32:	463b      	mov	r3, r7
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000c3c:	4b1f      	ldr	r3, [pc, #124]	; (8000cbc <MX_TIM5_Init+0xa0>)
 8000c3e:	4a20      	ldr	r2, [pc, #128]	; (8000cc0 <MX_TIM5_Init+0xa4>)
 8000c40:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000c42:	4b1e      	ldr	r3, [pc, #120]	; (8000cbc <MX_TIM5_Init+0xa0>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c48:	4b1c      	ldr	r3, [pc, #112]	; (8000cbc <MX_TIM5_Init+0xa0>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000c4e:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <MX_TIM5_Init+0xa0>)
 8000c50:	f04f 32ff 	mov.w	r2, #4294967295
 8000c54:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c56:	4b19      	ldr	r3, [pc, #100]	; (8000cbc <MX_TIM5_Init+0xa0>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5c:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <MX_TIM5_Init+0xa0>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000c62:	4816      	ldr	r0, [pc, #88]	; (8000cbc <MX_TIM5_Init+0xa0>)
 8000c64:	f007 fcd2 	bl	800860c <HAL_TIM_Base_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8000c6e:	f000 fac7 	bl	8001200 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000c72:	2307      	movs	r3, #7
 8000c74:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8000c76:	2360      	movs	r3, #96	; 0x60
 8000c78:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 1;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000c82:	f107 030c 	add.w	r3, r7, #12
 8000c86:	4619      	mov	r1, r3
 8000c88:	480c      	ldr	r0, [pc, #48]	; (8000cbc <MX_TIM5_Init+0xa0>)
 8000c8a:	f007 fe9a 	bl	80089c2 <HAL_TIM_SlaveConfigSynchro>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000c94:	f000 fab4 	bl	8001200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ca0:	463b      	mov	r3, r7
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4805      	ldr	r0, [pc, #20]	; (8000cbc <MX_TIM5_Init+0xa0>)
 8000ca6:	f008 f8db 	bl	8008e60 <HAL_TIMEx_MasterConfigSynchronization>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000cb0:	f000 faa6 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000cb4:	bf00      	nop
 8000cb6:	3720      	adds	r7, #32
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	240001d0 	.word	0x240001d0
 8000cc0:	40000c00 	.word	0x40000c00

08000cc4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000cd4:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <MX_TIM6_Init+0x64>)
 8000cd6:	4a15      	ldr	r2, [pc, #84]	; (8000d2c <MX_TIM6_Init+0x68>)
 8000cd8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000cda:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <MX_TIM6_Init+0x64>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <MX_TIM6_Init+0x64>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1919;//960 - 1;
 8000ce6:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <MX_TIM6_Init+0x64>)
 8000ce8:	f240 727f 	movw	r2, #1919	; 0x77f
 8000cec:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <MX_TIM6_Init+0x64>)
 8000cf0:	2280      	movs	r2, #128	; 0x80
 8000cf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000cf4:	480c      	ldr	r0, [pc, #48]	; (8000d28 <MX_TIM6_Init+0x64>)
 8000cf6:	f007 fc89 	bl	800860c <HAL_TIM_Base_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000d00:	f000 fa7e 	bl	8001200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d04:	2320      	movs	r3, #32
 8000d06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d0c:	1d3b      	adds	r3, r7, #4
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4805      	ldr	r0, [pc, #20]	; (8000d28 <MX_TIM6_Init+0x64>)
 8000d12:	f008 f8a5 	bl	8008e60 <HAL_TIMEx_MasterConfigSynchronization>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000d1c:	f000 fa70 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d20:	bf00      	nop
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	240002f8 	.word	0x240002f8
 8000d2c:	40001000 	.word	0x40001000

08000d30 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000d40:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <MX_TIM7_Init+0x64>)
 8000d42:	4a15      	ldr	r2, [pc, #84]	; (8000d98 <MX_TIM7_Init+0x68>)
 8000d44:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 96-1;
 8000d46:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <MX_TIM7_Init+0x64>)
 8000d48:	225f      	movs	r2, #95	; 0x5f
 8000d4a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <MX_TIM7_Init+0x64>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <MX_TIM7_Init+0x64>)
 8000d54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d58:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <MX_TIM7_Init+0x64>)
 8000d5c:	2280      	movs	r2, #128	; 0x80
 8000d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000d60:	480c      	ldr	r0, [pc, #48]	; (8000d94 <MX_TIM7_Init+0x64>)
 8000d62:	f007 fc53 	bl	800860c <HAL_TIM_Base_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000d6c:	f000 fa48 	bl	8001200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d70:	2300      	movs	r3, #0
 8000d72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_TIM7_Init+0x64>)
 8000d7e:	f008 f86f 	bl	8008e60 <HAL_TIMEx_MasterConfigSynchronization>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000d88:	f000 fa3a 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000d8c:	bf00      	nop
 8000d8e:	3710      	adds	r7, #16
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	24000390 	.word	0x24000390
 8000d98:	40001400 	.word	0x40001400

08000d9c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000da0:	4b22      	ldr	r3, [pc, #136]	; (8000e2c <MX_USART3_UART_Init+0x90>)
 8000da2:	4a23      	ldr	r2, [pc, #140]	; (8000e30 <MX_USART3_UART_Init+0x94>)
 8000da4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000da6:	4b21      	ldr	r3, [pc, #132]	; (8000e2c <MX_USART3_UART_Init+0x90>)
 8000da8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dae:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <MX_USART3_UART_Init+0x90>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000db4:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <MX_USART3_UART_Init+0x90>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dba:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <MX_USART3_UART_Init+0x90>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dc0:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <MX_USART3_UART_Init+0x90>)
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc6:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <MX_USART3_UART_Init+0x90>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dcc:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <MX_USART3_UART_Init+0x90>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dd2:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <MX_USART3_UART_Init+0x90>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <MX_USART3_UART_Init+0x90>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dde:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <MX_USART3_UART_Init+0x90>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000de4:	4811      	ldr	r0, [pc, #68]	; (8000e2c <MX_USART3_UART_Init+0x90>)
 8000de6:	f008 f8e1 	bl	8008fac <HAL_UART_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000df0:	f000 fa06 	bl	8001200 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000df4:	2100      	movs	r1, #0
 8000df6:	480d      	ldr	r0, [pc, #52]	; (8000e2c <MX_USART3_UART_Init+0x90>)
 8000df8:	f009 fa0d 	bl	800a216 <HAL_UARTEx_SetTxFifoThreshold>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e02:	f000 f9fd 	bl	8001200 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e06:	2100      	movs	r1, #0
 8000e08:	4808      	ldr	r0, [pc, #32]	; (8000e2c <MX_USART3_UART_Init+0x90>)
 8000e0a:	f009 fa42 	bl	800a292 <HAL_UARTEx_SetRxFifoThreshold>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e14:	f000 f9f4 	bl	8001200 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e18:	4804      	ldr	r0, [pc, #16]	; (8000e2c <MX_USART3_UART_Init+0x90>)
 8000e1a:	f009 f9c3 	bl	800a1a4 <HAL_UARTEx_DisableFifoMode>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e24:	f000 f9ec 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	240000cc 	.word	0x240000cc
 8000e30:	40004800 	.word	0x40004800

08000e34 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
	...

08000e44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e4a:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <MX_DMA_Init+0x6c>)
 8000e4c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000e50:	4a17      	ldr	r2, [pc, #92]	; (8000eb0 <MX_DMA_Init+0x6c>)
 8000e52:	f043 0301 	orr.w	r3, r3, #1
 8000e56:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <MX_DMA_Init+0x6c>)
 8000e5c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <MX_DMA_Init+0x6c>)
 8000e6a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000e6e:	4a10      	ldr	r2, [pc, #64]	; (8000eb0 <MX_DMA_Init+0x6c>)
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000e78:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <MX_DMA_Init+0x6c>)
 8000e7a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	603b      	str	r3, [r7, #0]
 8000e84:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2100      	movs	r1, #0
 8000e8a:	200b      	movs	r0, #11
 8000e8c:	f001 ff2b 	bl	8002ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e90:	200b      	movs	r0, #11
 8000e92:	f001 ff42 	bl	8002d1a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2100      	movs	r1, #0
 8000e9a:	2038      	movs	r0, #56	; 0x38
 8000e9c:	f001 ff23 	bl	8002ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ea0:	2038      	movs	r0, #56	; 0x38
 8000ea2:	f001 ff3a 	bl	8002d1a <HAL_NVIC_EnableIRQ>

}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	58024400 	.word	0x58024400

08000eb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08e      	sub	sp, #56	; 0x38
 8000eb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
 8000ec8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eca:	4b87      	ldr	r3, [pc, #540]	; (80010e8 <MX_GPIO_Init+0x234>)
 8000ecc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ed0:	4a85      	ldr	r2, [pc, #532]	; (80010e8 <MX_GPIO_Init+0x234>)
 8000ed2:	f043 0304 	orr.w	r3, r3, #4
 8000ed6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000eda:	4b83      	ldr	r3, [pc, #524]	; (80010e8 <MX_GPIO_Init+0x234>)
 8000edc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ee0:	f003 0304 	and.w	r3, r3, #4
 8000ee4:	623b      	str	r3, [r7, #32]
 8000ee6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ee8:	4b7f      	ldr	r3, [pc, #508]	; (80010e8 <MX_GPIO_Init+0x234>)
 8000eea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eee:	4a7e      	ldr	r2, [pc, #504]	; (80010e8 <MX_GPIO_Init+0x234>)
 8000ef0:	f043 0320 	orr.w	r3, r3, #32
 8000ef4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ef8:	4b7b      	ldr	r3, [pc, #492]	; (80010e8 <MX_GPIO_Init+0x234>)
 8000efa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000efe:	f003 0320 	and.w	r3, r3, #32
 8000f02:	61fb      	str	r3, [r7, #28]
 8000f04:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f06:	4b78      	ldr	r3, [pc, #480]	; (80010e8 <MX_GPIO_Init+0x234>)
 8000f08:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f0c:	4a76      	ldr	r2, [pc, #472]	; (80010e8 <MX_GPIO_Init+0x234>)
 8000f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f12:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f16:	4b74      	ldr	r3, [pc, #464]	; (80010e8 <MX_GPIO_Init+0x234>)
 8000f18:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f20:	61bb      	str	r3, [r7, #24]
 8000f22:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f24:	4b70      	ldr	r3, [pc, #448]	; (80010e8 <MX_GPIO_Init+0x234>)
 8000f26:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f2a:	4a6f      	ldr	r2, [pc, #444]	; (80010e8 <MX_GPIO_Init+0x234>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f34:	4b6c      	ldr	r3, [pc, #432]	; (80010e8 <MX_GPIO_Init+0x234>)
 8000f36:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f42:	4b69      	ldr	r3, [pc, #420]	; (80010e8 <MX_GPIO_Init+0x234>)
 8000f44:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f48:	4a67      	ldr	r2, [pc, #412]	; (80010e8 <MX_GPIO_Init+0x234>)
 8000f4a:	f043 0302 	orr.w	r3, r3, #2
 8000f4e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f52:	4b65      	ldr	r3, [pc, #404]	; (80010e8 <MX_GPIO_Init+0x234>)
 8000f54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f60:	4b61      	ldr	r3, [pc, #388]	; (80010e8 <MX_GPIO_Init+0x234>)
 8000f62:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f66:	4a60      	ldr	r2, [pc, #384]	; (80010e8 <MX_GPIO_Init+0x234>)
 8000f68:	f043 0308 	orr.w	r3, r3, #8
 8000f6c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f70:	4b5d      	ldr	r3, [pc, #372]	; (80010e8 <MX_GPIO_Init+0x234>)
 8000f72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f76:	f003 0308 	and.w	r3, r3, #8
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f7e:	4b5a      	ldr	r3, [pc, #360]	; (80010e8 <MX_GPIO_Init+0x234>)
 8000f80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f84:	4a58      	ldr	r2, [pc, #352]	; (80010e8 <MX_GPIO_Init+0x234>)
 8000f86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f8a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f8e:	4b56      	ldr	r3, [pc, #344]	; (80010e8 <MX_GPIO_Init+0x234>)
 8000f90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f9c:	4b52      	ldr	r3, [pc, #328]	; (80010e8 <MX_GPIO_Init+0x234>)
 8000f9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fa2:	4a51      	ldr	r2, [pc, #324]	; (80010e8 <MX_GPIO_Init+0x234>)
 8000fa4:	f043 0310 	orr.w	r3, r3, #16
 8000fa8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fac:	4b4e      	ldr	r3, [pc, #312]	; (80010e8 <MX_GPIO_Init+0x234>)
 8000fae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fb2:	f003 0310 	and.w	r3, r3, #16
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fc0:	484a      	ldr	r0, [pc, #296]	; (80010ec <MX_GPIO_Init+0x238>)
 8000fc2:	f004 fcf1 	bl	80059a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f244 0101 	movw	r1, #16385	; 0x4001
 8000fcc:	4848      	ldr	r0, [pc, #288]	; (80010f0 <MX_GPIO_Init+0x23c>)
 8000fce:	f004 fceb 	bl	80059a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2102      	movs	r1, #2
 8000fd6:	4847      	ldr	r0, [pc, #284]	; (80010f4 <MX_GPIO_Init+0x240>)
 8000fd8:	f004 fce6 	bl	80059a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4841      	ldr	r0, [pc, #260]	; (80010f8 <MX_GPIO_Init+0x244>)
 8000ff2:	f004 fb29 	bl	8005648 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000ff6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001004:	2300      	movs	r3, #0
 8001006:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100c:	4619      	mov	r1, r3
 800100e:	4837      	ldr	r0, [pc, #220]	; (80010ec <MX_GPIO_Init+0x238>)
 8001010:	f004 fb1a 	bl	8005648 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001014:	f244 0301 	movw	r3, #16385	; 0x4001
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101a:	2301      	movs	r3, #1
 800101c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	2300      	movs	r3, #0
 8001024:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102a:	4619      	mov	r1, r3
 800102c:	4830      	ldr	r0, [pc, #192]	; (80010f0 <MX_GPIO_Init+0x23c>)
 800102e:	f004 fb0b 	bl	8005648 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001032:	2380      	movs	r3, #128	; 0x80
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001036:	4b31      	ldr	r3, [pc, #196]	; (80010fc <MX_GPIO_Init+0x248>)
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800103e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001042:	4619      	mov	r1, r3
 8001044:	482e      	ldr	r0, [pc, #184]	; (8001100 <MX_GPIO_Init+0x24c>)
 8001046:	f004 faff 	bl	8005648 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800104a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001050:	2300      	movs	r3, #0
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105c:	4619      	mov	r1, r3
 800105e:	4829      	ldr	r0, [pc, #164]	; (8001104 <MX_GPIO_Init+0x250>)
 8001060:	f004 faf2 	bl	8005648 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001064:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001076:	230a      	movs	r3, #10
 8001078:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800107a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107e:	4619      	mov	r1, r3
 8001080:	4820      	ldr	r0, [pc, #128]	; (8001104 <MX_GPIO_Init+0x250>)
 8001082:	f004 fae1 	bl	8005648 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8001086:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	2300      	movs	r3, #0
 8001096:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109c:	4619      	mov	r1, r3
 800109e:	4819      	ldr	r0, [pc, #100]	; (8001104 <MX_GPIO_Init+0x250>)
 80010a0:	f004 fad2 	bl	8005648 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010a4:	23c0      	movs	r3, #192	; 0xc0
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010b4:	2307      	movs	r3, #7
 80010b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010bc:	4619      	mov	r1, r3
 80010be:	480c      	ldr	r0, [pc, #48]	; (80010f0 <MX_GPIO_Init+0x23c>)
 80010c0:	f004 fac2 	bl	8005648 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010c4:	2302      	movs	r3, #2
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c8:	2301      	movs	r3, #1
 80010ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d0:	2300      	movs	r3, #0
 80010d2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d8:	4619      	mov	r1, r3
 80010da:	4806      	ldr	r0, [pc, #24]	; (80010f4 <MX_GPIO_Init+0x240>)
 80010dc:	f004 fab4 	bl	8005648 <HAL_GPIO_Init>

}
 80010e0:	bf00      	nop
 80010e2:	3738      	adds	r7, #56	; 0x38
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	58024400 	.word	0x58024400
 80010ec:	58021400 	.word	0x58021400
 80010f0:	58020400 	.word	0x58020400
 80010f4:	58021000 	.word	0x58021000
 80010f8:	58020800 	.word	0x58020800
 80010fc:	11110000 	.word	0x11110000
 8001100:	58021800 	.word	0x58021800
 8001104:	58020000 	.word	0x58020000

08001108 <HAL_TIM_PeriodElapsedCallback>:
/**
  * @brief  This function is executed every millisecond.
  * This adds up all measured input pulses on timers 2 and 5, and then averages to find the average frequency.
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);

	if (ms == 0){
 8001110:	4b2d      	ldr	r3, [pc, #180]	; (80011c8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d107      	bne.n	8001128 <HAL_TIM_PeriodElapsedCallback+0x20>
		freq_timer_count = 0;
 8001118:	4b2c      	ldr	r3, [pc, #176]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800111a:	f04f 0200 	mov.w	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
		vol_timer_count = 0;
 8001120:	4b2b      	ldr	r3, [pc, #172]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001122:	f04f 0200 	mov.w	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
	}
	freq_timer_count += __HAL_TIM_GET_COUNTER(&htim2);
 8001128:	4b2a      	ldr	r3, [pc, #168]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112e:	ee07 3a90 	vmov	s15, r3
 8001132:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001136:	4b25      	ldr	r3, [pc, #148]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001138:	edd3 7a00 	vldr	s15, [r3]
 800113c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001140:	4b22      	ldr	r3, [pc, #136]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001142:	edc3 7a00 	vstr	s15, [r3]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001146:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2200      	movs	r2, #0
 800114c:	625a      	str	r2, [r3, #36]	; 0x24
	vol_timer_count += __HAL_TIM_GET_COUNTER(&htim5);
 800114e:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001154:	ee07 3a90 	vmov	s15, r3
 8001158:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800115c:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800115e:	edd3 7a00 	vldr	s15, [r3]
 8001162:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001166:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001168:	edc3 7a00 	vstr	s15, [r3]
	__HAL_TIM_SET_COUNTER(&htim5, 0);
 800116c:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2200      	movs	r2, #0
 8001172:	625a      	str	r2, [r3, #36]	; 0x24
	ms++;
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	3301      	adds	r3, #1
 800117a:	b2da      	uxtb	r2, r3
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800117e:	701a      	strb	r2, [r3, #0]
	if (ms == MILLISECONDS) {
 8001180:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b0a      	cmp	r3, #10
 8001186:	d119      	bne.n	80011bc <HAL_TIM_PeriodElapsedCallback+0xb4>
		update_freq_flag = 1;
 8001188:	4b14      	ldr	r3, [pc, #80]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800118a:	2201      	movs	r2, #1
 800118c:	701a      	strb	r2, [r3, #0]
		freq_timer_count /= MILLISECONDS;
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001190:	ed93 7a00 	vldr	s14, [r3]
 8001194:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001198:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800119c:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800119e:	edc3 7a00 	vstr	s15, [r3]
		vol_timer_count /= MILLISECONDS;
 80011a2:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80011a4:	ed93 7a00 	vldr	s14, [r3]
 80011a8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80011ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80011b2:	edc3 7a00 	vstr	s15, [r3]
		ms = 0;
 80011b6:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
	}
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	240000a4 	.word	0x240000a4
 80011cc:	2400009c 	.word	0x2400009c
 80011d0:	240000a0 	.word	0x240000a0
 80011d4:	24000344 	.word	0x24000344
 80011d8:	240001d0 	.word	0x240001d0
 80011dc:	240003dc 	.word	0x240003dc

080011e0 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1 (DAC_HandleTypeDef * hdac) {
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
	dac_comp_flag = 1;
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <HAL_DAC_ConvCpltCallbackCh1+0x1c>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	701a      	strb	r2, [r3, #0]
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	24000000 	.word	0x24000000

08001200 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <init_nco>:
 * @returns pointer to an initialized structure of type #NCO_T which may
 * be used to get NCO samples.
 */

NCO_T *init_nco(  float f0,            //!< [in] Frequency in cycles per sample
                  float theta){        //!< [in] Offset angle in radians
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	ed87 0a01 	vstr	s0, [r7, #4]
 800121a:	edc7 0a00 	vstr	s1, [r7]

    //Allocate memory for s
    NCO_T *s = malloc(sizeof(NCO_T));
 800121e:	2010      	movs	r0, #16
 8001220:	f009 f924 	bl	800a46c <malloc>
 8001224:	4603      	mov	r3, r0
 8001226:	60fb      	str	r3, [r7, #12]
    if (s == NULL) {
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d105      	bne.n	800123a <init_nco+0x2a>
        printf("Failed to allocate memory for s\n");
 800122e:	481c      	ldr	r0, [pc, #112]	; (80012a0 <init_nco+0x90>)
 8001230:	f009 fa3e 	bl	800a6b0 <puts>
        exit(EXIT_FAILURE);
 8001234:	2001      	movs	r0, #1
 8001236:	f009 f8e1 	bl	800a3fc <exit>
    }

    //Initialize struct variables
    s->f0 = (int)(f0 * 2 * (1u << 31));
 800123a:	edd7 7a01 	vldr	s15, [r7, #4]
 800123e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001242:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80012a4 <init_nco+0x94>
 8001246:	ee67 7a87 	vmul.f32	s15, s15, s14
 800124a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800124e:	ee17 2a90 	vmov	r2, s15
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	601a      	str	r2, [r3, #0]
    s->theta = (int)((theta * 2 * (1u << 31))/(2.*PI));
 8001256:	edd7 7a00 	vldr	s15, [r7]
 800125a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800125e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80012a4 <init_nco+0x94>
 8001262:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001266:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800126a:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8001298 <init_nco+0x88>
 800126e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001272:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001276:	ee17 2a90 	vmov	r2, s15
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	605a      	str	r2, [r3, #4]
    s->acc = 0;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	2200      	movs	r2, #0
 8001282:	60da      	str	r2, [r3, #12]
    s->amp = 0;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f04f 0200 	mov.w	r2, #0
 800128a:	609a      	str	r2, [r3, #8]

    //Return pointer to struct NCO_T
    return s;
 800128c:	68fb      	ldr	r3, [r7, #12]
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	53c8d4f1 	.word	0x53c8d4f1
 800129c:	401921fb 	.word	0x401921fb
 80012a0:	0800b460 	.word	0x0800b460
 80012a4:	4f000000 	.word	0x4f000000

080012a8 <nco_get_samples>:
 * phase discontinuities from one call to the next.
 */

void nco_get_samples(NCO_T *s,         //!< [in,out] Pointer to NCO_T struct.
                     uint16_t *y,         //!< [out] Pointer to an array for storage of output samples.
                     int n_samples){   //!< [in] Number of NCO output samples to generate.
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
	unsigned int i;
	unsigned int kprime;
	unsigned int index;

	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80012b4:	2101      	movs	r1, #1
 80012b6:	4828      	ldr	r0, [pc, #160]	; (8001358 <nco_get_samples+0xb0>)
 80012b8:	f004 fb8f 	bl	80059da <HAL_GPIO_TogglePin>
	for (i = 0; i < n_samples; i++) {
 80012bc:	2300      	movs	r3, #0
 80012be:	61fb      	str	r3, [r7, #28]
 80012c0:	e03d      	b.n	800133e <nco_get_samples+0x96>

        if ((i == 0) && (s->acc == 0)) {
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d103      	bne.n	80012d0 <nco_get_samples+0x28>
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d008      	beq.n	80012e2 <nco_get_samples+0x3a>
        } else {
            /* Keep track of where we are in the sine wave */
            s->acc += s->f0;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	461a      	mov	r2, r3
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4413      	add	r3, r2
 80012dc:	461a      	mov	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	60da      	str	r2, [r3, #12]
        }

        kprime = s->acc + s->theta;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	461a      	mov	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]

        index = kprime >> 23;
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	0ddb      	lsrs	r3, r3, #23
 80012f4:	617b      	str	r3, [r7, #20]

        /* Convert from float to 12-bit */
        y[i] = (unsigned int)((cosine[index] + 1) * 2047) * s->amp;
 80012f6:	4a19      	ldr	r2, [pc, #100]	; (800135c <nco_get_samples+0xb4>)
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	edd3 7a00 	vldr	s15, [r3]
 8001302:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001306:	ee77 7a87 	vadd.f32	s15, s15, s14
 800130a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001360 <nco_get_samples+0xb8>
 800130e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001312:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001316:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	68ba      	ldr	r2, [r7, #8]
 800132a:	4413      	add	r3, r2
 800132c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001330:	ee17 2a90 	vmov	r2, s15
 8001334:	b292      	uxth	r2, r2
 8001336:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < n_samples; i++) {
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	3301      	adds	r3, #1
 800133c:	61fb      	str	r3, [r7, #28]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69fa      	ldr	r2, [r7, #28]
 8001342:	429a      	cmp	r2, r3
 8001344:	d3bd      	bcc.n	80012c2 <nco_get_samples+0x1a>
	}
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001346:	2101      	movs	r1, #1
 8001348:	4803      	ldr	r0, [pc, #12]	; (8001358 <nco_get_samples+0xb0>)
 800134a:	f004 fb46 	bl	80059da <HAL_GPIO_TogglePin>
}
 800134e:	bf00      	nop
 8001350:	3720      	adds	r7, #32
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	58020400 	.word	0x58020400
 800135c:	0800b490 	.word	0x0800b490
 8001360:	44ffe000 	.word	0x44ffe000

08001364 <nco_set_frequency>:
 * @returns On return, The NCO_T structure s is modified so that subsequent calls to nco_get_samples()
 * will operate at frequency f_new (without loss of phase continuity).
 */

void nco_set_frequency( NCO_T *s,      //!< [in,out] Pointer to NCO_T struct.
                        float f_new){  //!< [in] New NCO frequency (in cycles/sample).
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	ed87 0a00 	vstr	s0, [r7]
    s->f0 = (int)(f_new * 2 * (1u << 31));
 8001370:	edd7 7a00 	vldr	s15, [r7]
 8001374:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001378:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001398 <nco_set_frequency+0x34>
 800137c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001380:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001384:	ee17 2a90 	vmov	r2, s15
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	601a      	str	r2, [r3, #0]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	4f000000 	.word	0x4f000000

0800139c <nco_set_amplitude>:
 * @returns On return, The NCO_T structure s is modified so that subsequent calls to nco_get_samples()
 * will operate with the amplitude given by amp
 */

void nco_set_amplitude(	NCO_T *s,
						int amp){
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
	if (amp <= 5000) {
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ac:	4293      	cmp	r3, r2
 80013ae:	dc20      	bgt.n	80013f2 <nco_set_amplitude+0x56>
		amp = 5000 - amp;
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80013b6:	1a9b      	subs	r3, r3, r2
 80013b8:	603b      	str	r3, [r7, #0]
		s->amp = (float)amp / 10000.;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	ee07 3a90 	vmov	s15, r3
 80013c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013c4:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001408 <nco_set_amplitude+0x6c>
 80013c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	edc3 7a02 	vstr	s15, [r3, #8]
		/* Don't want to saturate the output */
		if (s->amp > 1) {
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80013d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e4:	dc00      	bgt.n	80013e8 <nco_set_amplitude+0x4c>
			s->amp = 0;
		}
	}else {
		s->amp = 0.0;
	}
}
 80013e6:	e008      	b.n	80013fa <nco_set_amplitude+0x5e>
			s->amp = 0;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f04f 0200 	mov.w	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
}
 80013f0:	e003      	b.n	80013fa <nco_set_amplitude+0x5e>
		s->amp = 0.0;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	461c4000 	.word	0x461c4000

0800140c <set_blocksize>:
/*!
 * @brief Set the block size of half the ADC buffer.
 *
 * @returns On return, the blocksize and buffersize are updated
 */
void set_blocksize( uint32_t new_blocksize) {
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	ADC_blocksize = new_blocksize;
 8001414:	4a06      	ldr	r2, [pc, #24]	; (8001430 <set_blocksize+0x24>)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6013      	str	r3, [r2, #0]
	ADC_buffer_len = 2 * new_blocksize;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4a05      	ldr	r2, [pc, #20]	; (8001434 <set_blocksize+0x28>)
 8001420:	6013      	str	r3, [r2, #0]
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	24000004 	.word	0x24000004
 8001434:	24000008 	.word	0x24000008

08001438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143e:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <HAL_MspInit+0x30>)
 8001440:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001444:	4a08      	ldr	r2, [pc, #32]	; (8001468 <HAL_MspInit+0x30>)
 8001446:	f043 0302 	orr.w	r3, r3, #2
 800144a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <HAL_MspInit+0x30>)
 8001450:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	58024400 	.word	0x58024400

0800146c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a30      	ldr	r2, [pc, #192]	; (800154c <HAL_ADC_MspInit+0xe0>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d159      	bne.n	8001542 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800148e:	4b30      	ldr	r3, [pc, #192]	; (8001550 <HAL_ADC_MspInit+0xe4>)
 8001490:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001494:	4a2e      	ldr	r2, [pc, #184]	; (8001550 <HAL_ADC_MspInit+0xe4>)
 8001496:	f043 0320 	orr.w	r3, r3, #32
 800149a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800149e:	4b2c      	ldr	r3, [pc, #176]	; (8001550 <HAL_ADC_MspInit+0xe4>)
 80014a0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80014a4:	f003 0320 	and.w	r3, r3, #32
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ac:	4b28      	ldr	r3, [pc, #160]	; (8001550 <HAL_ADC_MspInit+0xe4>)
 80014ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014b2:	4a27      	ldr	r2, [pc, #156]	; (8001550 <HAL_ADC_MspInit+0xe4>)
 80014b4:	f043 0302 	orr.w	r3, r3, #2
 80014b8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80014bc:	4b24      	ldr	r3, [pc, #144]	; (8001550 <HAL_ADC_MspInit+0xe4>)
 80014be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014ca:	2302      	movs	r3, #2
 80014cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ce:	2303      	movs	r3, #3
 80014d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	4619      	mov	r1, r3
 80014dc:	481d      	ldr	r0, [pc, #116]	; (8001554 <HAL_ADC_MspInit+0xe8>)
 80014de:	f004 f8b3 	bl	8005648 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80014e2:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <HAL_ADC_MspInit+0xec>)
 80014e4:	4a1d      	ldr	r2, [pc, #116]	; (800155c <HAL_ADC_MspInit+0xf0>)
 80014e6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80014e8:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <HAL_ADC_MspInit+0xec>)
 80014ea:	2209      	movs	r2, #9
 80014ec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014ee:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <HAL_ADC_MspInit+0xec>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014f4:	4b18      	ldr	r3, [pc, #96]	; (8001558 <HAL_ADC_MspInit+0xec>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014fa:	4b17      	ldr	r3, [pc, #92]	; (8001558 <HAL_ADC_MspInit+0xec>)
 80014fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001500:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <HAL_ADC_MspInit+0xec>)
 8001504:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001508:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800150a:	4b13      	ldr	r3, [pc, #76]	; (8001558 <HAL_ADC_MspInit+0xec>)
 800150c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001510:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001512:	4b11      	ldr	r3, [pc, #68]	; (8001558 <HAL_ADC_MspInit+0xec>)
 8001514:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001518:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800151a:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <HAL_ADC_MspInit+0xec>)
 800151c:	2200      	movs	r2, #0
 800151e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001520:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <HAL_ADC_MspInit+0xec>)
 8001522:	2200      	movs	r2, #0
 8001524:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001526:	480c      	ldr	r0, [pc, #48]	; (8001558 <HAL_ADC_MspInit+0xec>)
 8001528:	f001 ff12 	bl	8003350 <HAL_DMA_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_ADC_MspInit+0xca>
    {
      Error_Handler();
 8001532:	f7ff fe65 	bl	8001200 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a07      	ldr	r2, [pc, #28]	; (8001558 <HAL_ADC_MspInit+0xec>)
 800153a:	64da      	str	r2, [r3, #76]	; 0x4c
 800153c:	4a06      	ldr	r2, [pc, #24]	; (8001558 <HAL_ADC_MspInit+0xec>)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001542:	bf00      	nop
 8001544:	3728      	adds	r7, #40	; 0x28
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40022000 	.word	0x40022000
 8001550:	58024400 	.word	0x58024400
 8001554:	58020400 	.word	0x58020400
 8001558:	24000280 	.word	0x24000280
 800155c:	40020010 	.word	0x40020010

08001560 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	; 0x28
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a30      	ldr	r2, [pc, #192]	; (8001640 <HAL_DAC_MspInit+0xe0>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d159      	bne.n	8001636 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001582:	4b30      	ldr	r3, [pc, #192]	; (8001644 <HAL_DAC_MspInit+0xe4>)
 8001584:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001588:	4a2e      	ldr	r2, [pc, #184]	; (8001644 <HAL_DAC_MspInit+0xe4>)
 800158a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800158e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001592:	4b2c      	ldr	r3, [pc, #176]	; (8001644 <HAL_DAC_MspInit+0xe4>)
 8001594:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001598:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a0:	4b28      	ldr	r3, [pc, #160]	; (8001644 <HAL_DAC_MspInit+0xe4>)
 80015a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015a6:	4a27      	ldr	r2, [pc, #156]	; (8001644 <HAL_DAC_MspInit+0xe4>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80015b0:	4b24      	ldr	r3, [pc, #144]	; (8001644 <HAL_DAC_MspInit+0xe4>)
 80015b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015be:	2310      	movs	r3, #16
 80015c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015c2:	2303      	movs	r3, #3
 80015c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	4619      	mov	r1, r3
 80015d0:	481d      	ldr	r0, [pc, #116]	; (8001648 <HAL_DAC_MspInit+0xe8>)
 80015d2:	f004 f839 	bl	8005648 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA2_Stream0;
 80015d6:	4b1d      	ldr	r3, [pc, #116]	; (800164c <HAL_DAC_MspInit+0xec>)
 80015d8:	4a1d      	ldr	r2, [pc, #116]	; (8001650 <HAL_DAC_MspInit+0xf0>)
 80015da:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80015dc:	4b1b      	ldr	r3, [pc, #108]	; (800164c <HAL_DAC_MspInit+0xec>)
 80015de:	2243      	movs	r2, #67	; 0x43
 80015e0:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015e2:	4b1a      	ldr	r3, [pc, #104]	; (800164c <HAL_DAC_MspInit+0xec>)
 80015e4:	2240      	movs	r2, #64	; 0x40
 80015e6:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015e8:	4b18      	ldr	r3, [pc, #96]	; (800164c <HAL_DAC_MspInit+0xec>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80015ee:	4b17      	ldr	r3, [pc, #92]	; (800164c <HAL_DAC_MspInit+0xec>)
 80015f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015f4:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <HAL_DAC_MspInit+0xec>)
 80015f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015fc:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015fe:	4b13      	ldr	r3, [pc, #76]	; (800164c <HAL_DAC_MspInit+0xec>)
 8001600:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001604:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001606:	4b11      	ldr	r3, [pc, #68]	; (800164c <HAL_DAC_MspInit+0xec>)
 8001608:	f44f 7280 	mov.w	r2, #256	; 0x100
 800160c:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <HAL_DAC_MspInit+0xec>)
 8001610:	2200      	movs	r2, #0
 8001612:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001614:	4b0d      	ldr	r3, [pc, #52]	; (800164c <HAL_DAC_MspInit+0xec>)
 8001616:	2200      	movs	r2, #0
 8001618:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800161a:	480c      	ldr	r0, [pc, #48]	; (800164c <HAL_DAC_MspInit+0xec>)
 800161c:	f001 fe98 	bl	8003350 <HAL_DMA_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001626:	f7ff fdeb 	bl	8001200 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a07      	ldr	r2, [pc, #28]	; (800164c <HAL_DAC_MspInit+0xec>)
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	4a06      	ldr	r2, [pc, #24]	; (800164c <HAL_DAC_MspInit+0xec>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001636:	bf00      	nop
 8001638:	3728      	adds	r7, #40	; 0x28
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40007400 	.word	0x40007400
 8001644:	58024400 	.word	0x58024400
 8001648:	58020000 	.word	0x58020000
 800164c:	24000158 	.word	0x24000158
 8001650:	40020410 	.word	0x40020410

08001654 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08e      	sub	sp, #56	; 0x38
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001674:	d12e      	bne.n	80016d4 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001676:	4b4c      	ldr	r3, [pc, #304]	; (80017a8 <HAL_TIM_Base_MspInit+0x154>)
 8001678:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800167c:	4a4a      	ldr	r2, [pc, #296]	; (80017a8 <HAL_TIM_Base_MspInit+0x154>)
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001686:	4b48      	ldr	r3, [pc, #288]	; (80017a8 <HAL_TIM_Base_MspInit+0x154>)
 8001688:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	623b      	str	r3, [r7, #32]
 8001692:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001694:	4b44      	ldr	r3, [pc, #272]	; (80017a8 <HAL_TIM_Base_MspInit+0x154>)
 8001696:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800169a:	4a43      	ldr	r2, [pc, #268]	; (80017a8 <HAL_TIM_Base_MspInit+0x154>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80016a4:	4b40      	ldr	r3, [pc, #256]	; (80017a8 <HAL_TIM_Base_MspInit+0x154>)
 80016a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	61fb      	str	r3, [r7, #28]
 80016b0:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016b2:	2301      	movs	r3, #1
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	2302      	movs	r3, #2
 80016b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016be:	2303      	movs	r3, #3
 80016c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016c2:	2301      	movs	r3, #1
 80016c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ca:	4619      	mov	r1, r3
 80016cc:	4837      	ldr	r0, [pc, #220]	; (80017ac <HAL_TIM_Base_MspInit+0x158>)
 80016ce:	f003 ffbb 	bl	8005648 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80016d2:	e064      	b.n	800179e <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM5)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a35      	ldr	r2, [pc, #212]	; (80017b0 <HAL_TIM_Base_MspInit+0x15c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d12e      	bne.n	800173c <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80016de:	4b32      	ldr	r3, [pc, #200]	; (80017a8 <HAL_TIM_Base_MspInit+0x154>)
 80016e0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80016e4:	4a30      	ldr	r2, [pc, #192]	; (80017a8 <HAL_TIM_Base_MspInit+0x154>)
 80016e6:	f043 0308 	orr.w	r3, r3, #8
 80016ea:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80016ee:	4b2e      	ldr	r3, [pc, #184]	; (80017a8 <HAL_TIM_Base_MspInit+0x154>)
 80016f0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80016f4:	f003 0308 	and.w	r3, r3, #8
 80016f8:	61bb      	str	r3, [r7, #24]
 80016fa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fc:	4b2a      	ldr	r3, [pc, #168]	; (80017a8 <HAL_TIM_Base_MspInit+0x154>)
 80016fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001702:	4a29      	ldr	r2, [pc, #164]	; (80017a8 <HAL_TIM_Base_MspInit+0x154>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800170c:	4b26      	ldr	r3, [pc, #152]	; (80017a8 <HAL_TIM_Base_MspInit+0x154>)
 800170e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800171a:	2302      	movs	r3, #2
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171e:	2302      	movs	r3, #2
 8001720:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001726:	2303      	movs	r3, #3
 8001728:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800172a:	2302      	movs	r3, #2
 800172c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001732:	4619      	mov	r1, r3
 8001734:	481d      	ldr	r0, [pc, #116]	; (80017ac <HAL_TIM_Base_MspInit+0x158>)
 8001736:	f003 ff87 	bl	8005648 <HAL_GPIO_Init>
}
 800173a:	e030      	b.n	800179e <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM6)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a1c      	ldr	r2, [pc, #112]	; (80017b4 <HAL_TIM_Base_MspInit+0x160>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d10f      	bne.n	8001766 <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001746:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <HAL_TIM_Base_MspInit+0x154>)
 8001748:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800174c:	4a16      	ldr	r2, [pc, #88]	; (80017a8 <HAL_TIM_Base_MspInit+0x154>)
 800174e:	f043 0310 	orr.w	r3, r3, #16
 8001752:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001756:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <HAL_TIM_Base_MspInit+0x154>)
 8001758:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800175c:	f003 0310 	and.w	r3, r3, #16
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	693b      	ldr	r3, [r7, #16]
}
 8001764:	e01b      	b.n	800179e <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM7)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a13      	ldr	r2, [pc, #76]	; (80017b8 <HAL_TIM_Base_MspInit+0x164>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d116      	bne.n	800179e <HAL_TIM_Base_MspInit+0x14a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001770:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <HAL_TIM_Base_MspInit+0x154>)
 8001772:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001776:	4a0c      	ldr	r2, [pc, #48]	; (80017a8 <HAL_TIM_Base_MspInit+0x154>)
 8001778:	f043 0320 	orr.w	r3, r3, #32
 800177c:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001780:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <HAL_TIM_Base_MspInit+0x154>)
 8001782:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001786:	f003 0320 	and.w	r3, r3, #32
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	2100      	movs	r1, #0
 8001792:	2037      	movs	r0, #55	; 0x37
 8001794:	f001 faa7 	bl	8002ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001798:	2037      	movs	r0, #55	; 0x37
 800179a:	f001 fabe 	bl	8002d1a <HAL_NVIC_EnableIRQ>
}
 800179e:	bf00      	nop
 80017a0:	3738      	adds	r7, #56	; 0x38
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	58024400 	.word	0x58024400
 80017ac:	58020000 	.word	0x58020000
 80017b0:	40000c00 	.word	0x40000c00
 80017b4:	40001000 	.word	0x40001000
 80017b8:	40001400 	.word	0x40001400

080017bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08a      	sub	sp, #40	; 0x28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a1a      	ldr	r2, [pc, #104]	; (8001844 <HAL_UART_MspInit+0x88>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d12e      	bne.n	800183c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80017de:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <HAL_UART_MspInit+0x8c>)
 80017e0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80017e4:	4a18      	ldr	r2, [pc, #96]	; (8001848 <HAL_UART_MspInit+0x8c>)
 80017e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ea:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80017ee:	4b16      	ldr	r3, [pc, #88]	; (8001848 <HAL_UART_MspInit+0x8c>)
 80017f0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80017f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017fc:	4b12      	ldr	r3, [pc, #72]	; (8001848 <HAL_UART_MspInit+0x8c>)
 80017fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001802:	4a11      	ldr	r2, [pc, #68]	; (8001848 <HAL_UART_MspInit+0x8c>)
 8001804:	f043 0308 	orr.w	r3, r3, #8
 8001808:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800180c:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <HAL_UART_MspInit+0x8c>)
 800180e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001812:	f003 0308 	and.w	r3, r3, #8
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800181a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800181e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001820:	2302      	movs	r3, #2
 8001822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001828:	2300      	movs	r3, #0
 800182a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800182c:	2307      	movs	r3, #7
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	4619      	mov	r1, r3
 8001836:	4805      	ldr	r0, [pc, #20]	; (800184c <HAL_UART_MspInit+0x90>)
 8001838:	f003 ff06 	bl	8005648 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800183c:	bf00      	nop
 800183e:	3728      	adds	r7, #40	; 0x28
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40004800 	.word	0x40004800
 8001848:	58024400 	.word	0x58024400
 800184c:	58020c00 	.word	0x58020c00

08001850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001862:	e7fe      	b.n	8001862 <HardFault_Handler+0x4>

08001864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001868:	e7fe      	b.n	8001868 <MemManage_Handler+0x4>

0800186a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800186e:	e7fe      	b.n	800186e <BusFault_Handler+0x4>

08001870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001874:	e7fe      	b.n	8001874 <UsageFault_Handler+0x4>

08001876 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018a4:	f000 f9f6 	bl	8001c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}

080018ac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018b0:	4802      	ldr	r0, [pc, #8]	; (80018bc <DMA1_Stream0_IRQHandler+0x10>)
 80018b2:	f002 fb47 	bl	8003f44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	24000280 	.word	0x24000280

080018c0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80018c4:	4802      	ldr	r0, [pc, #8]	; (80018d0 <TIM7_IRQHandler+0x10>)
 80018c6:	f006 ff5d 	bl	8008784 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	24000390 	.word	0x24000390

080018d4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80018d8:	4802      	ldr	r0, [pc, #8]	; (80018e4 <DMA2_Stream0_IRQHandler+0x10>)
 80018da:	f002 fb33 	bl	8003f44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	24000158 	.word	0x24000158

080018e8 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018f2:	f008 fd7d 	bl	800a3f0 <__errno>
 80018f6:	4602      	mov	r2, r0
 80018f8:	2316      	movs	r3, #22
 80018fa:	6013      	str	r3, [r2, #0]
	return -1;
 80018fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001900:	4618      	mov	r0, r3
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <_exit>:

void _exit (int status)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001910:	f04f 31ff 	mov.w	r1, #4294967295
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff ffe7 	bl	80018e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800191a:	e7fe      	b.n	800191a <_exit+0x12>

0800191c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	e00a      	b.n	8001944 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800192e:	f3af 8000 	nop.w
 8001932:	4601      	mov	r1, r0
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	1c5a      	adds	r2, r3, #1
 8001938:	60ba      	str	r2, [r7, #8]
 800193a:	b2ca      	uxtb	r2, r1
 800193c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	3301      	adds	r3, #1
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	429a      	cmp	r2, r3
 800194a:	dbf0      	blt.n	800192e <_read+0x12>
	}

return len;
 800194c:	687b      	ldr	r3, [r7, #4]
}
 800194e:	4618      	mov	r0, r3
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b086      	sub	sp, #24
 800195a:	af00      	add	r7, sp, #0
 800195c:	60f8      	str	r0, [r7, #12]
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	e009      	b.n	800197c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	1c5a      	adds	r2, r3, #1
 800196c:	60ba      	str	r2, [r7, #8]
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	3301      	adds	r3, #1
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	429a      	cmp	r2, r3
 8001982:	dbf1      	blt.n	8001968 <_write+0x12>
	}
	return len;
 8001984:	687b      	ldr	r3, [r7, #4]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <_close>:

int _close(int file)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
	return -1;
 8001996:	f04f 33ff 	mov.w	r3, #4294967295
}
 800199a:	4618      	mov	r0, r3
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019b6:	605a      	str	r2, [r3, #4]
	return 0;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <_isatty>:

int _isatty(int file)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
	return 1;
 80019ce:	2301      	movs	r3, #1
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
	return 0;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
	...

080019f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a00:	4a14      	ldr	r2, [pc, #80]	; (8001a54 <_sbrk+0x5c>)
 8001a02:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <_sbrk+0x60>)
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a0c:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <_sbrk+0x64>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d102      	bne.n	8001a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <_sbrk+0x64>)
 8001a16:	4a12      	ldr	r2, [pc, #72]	; (8001a60 <_sbrk+0x68>)
 8001a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a1a:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <_sbrk+0x64>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4413      	add	r3, r2
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d207      	bcs.n	8001a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a28:	f008 fce2 	bl	800a3f0 <__errno>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	230c      	movs	r3, #12
 8001a30:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001a32:	f04f 33ff 	mov.w	r3, #4294967295
 8001a36:	e009      	b.n	8001a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <_sbrk+0x64>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a3e:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <_sbrk+0x64>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	4a05      	ldr	r2, [pc, #20]	; (8001a5c <_sbrk+0x64>)
 8001a48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	24100000 	.word	0x24100000
 8001a58:	00000400 	.word	0x00000400
 8001a5c:	240000ac 	.word	0x240000ac
 8001a60:	240003e8 	.word	0x240003e8

08001a64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a68:	4b34      	ldr	r3, [pc, #208]	; (8001b3c <SystemInit+0xd8>)
 8001a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a6e:	4a33      	ldr	r2, [pc, #204]	; (8001b3c <SystemInit+0xd8>)
 8001a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a78:	4b31      	ldr	r3, [pc, #196]	; (8001b40 <SystemInit+0xdc>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 030f 	and.w	r3, r3, #15
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d807      	bhi.n	8001a94 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a84:	4b2e      	ldr	r3, [pc, #184]	; (8001b40 <SystemInit+0xdc>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f023 030f 	bic.w	r3, r3, #15
 8001a8c:	4a2c      	ldr	r2, [pc, #176]	; (8001b40 <SystemInit+0xdc>)
 8001a8e:	f043 0303 	orr.w	r3, r3, #3
 8001a92:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a94:	4b2b      	ldr	r3, [pc, #172]	; (8001b44 <SystemInit+0xe0>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a2a      	ldr	r2, [pc, #168]	; (8001b44 <SystemInit+0xe0>)
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001aa0:	4b28      	ldr	r3, [pc, #160]	; (8001b44 <SystemInit+0xe0>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001aa6:	4b27      	ldr	r3, [pc, #156]	; (8001b44 <SystemInit+0xe0>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	4926      	ldr	r1, [pc, #152]	; (8001b44 <SystemInit+0xe0>)
 8001aac:	4b26      	ldr	r3, [pc, #152]	; (8001b48 <SystemInit+0xe4>)
 8001aae:	4013      	ands	r3, r2
 8001ab0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ab2:	4b23      	ldr	r3, [pc, #140]	; (8001b40 <SystemInit+0xdc>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	2b03      	cmp	r3, #3
 8001abc:	d907      	bls.n	8001ace <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001abe:	4b20      	ldr	r3, [pc, #128]	; (8001b40 <SystemInit+0xdc>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f023 030f 	bic.w	r3, r3, #15
 8001ac6:	4a1e      	ldr	r2, [pc, #120]	; (8001b40 <SystemInit+0xdc>)
 8001ac8:	f043 0303 	orr.w	r3, r3, #3
 8001acc:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001ace:	4b1d      	ldr	r3, [pc, #116]	; (8001b44 <SystemInit+0xe0>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001ad4:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <SystemInit+0xe0>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001ada:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <SystemInit+0xe0>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001ae0:	4b18      	ldr	r3, [pc, #96]	; (8001b44 <SystemInit+0xe0>)
 8001ae2:	4a1a      	ldr	r2, [pc, #104]	; (8001b4c <SystemInit+0xe8>)
 8001ae4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001ae6:	4b17      	ldr	r3, [pc, #92]	; (8001b44 <SystemInit+0xe0>)
 8001ae8:	4a19      	ldr	r2, [pc, #100]	; (8001b50 <SystemInit+0xec>)
 8001aea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001aec:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <SystemInit+0xe0>)
 8001aee:	4a19      	ldr	r2, [pc, #100]	; (8001b54 <SystemInit+0xf0>)
 8001af0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001af2:	4b14      	ldr	r3, [pc, #80]	; (8001b44 <SystemInit+0xe0>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <SystemInit+0xe0>)
 8001afa:	4a16      	ldr	r2, [pc, #88]	; (8001b54 <SystemInit+0xf0>)
 8001afc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001afe:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <SystemInit+0xe0>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001b04:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <SystemInit+0xe0>)
 8001b06:	4a13      	ldr	r2, [pc, #76]	; (8001b54 <SystemInit+0xf0>)
 8001b08:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <SystemInit+0xe0>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <SystemInit+0xe0>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <SystemInit+0xe0>)
 8001b16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b1a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001b1c:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <SystemInit+0xe0>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001b22:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <SystemInit+0xf4>)
 8001b24:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001b28:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b2a:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <SystemInit+0xd8>)
 8001b2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b30:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000ed00 	.word	0xe000ed00
 8001b40:	52002000 	.word	0x52002000
 8001b44:	58024400 	.word	0x58024400
 8001b48:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b4c:	02020200 	.word	0x02020200
 8001b50:	01ff0000 	.word	0x01ff0000
 8001b54:	01010280 	.word	0x01010280
 8001b58:	52004000 	.word	0x52004000

08001b5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b94 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b60:	f7ff ff80 	bl	8001a64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001b64:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b66:	e003      	b.n	8001b70 <LoopCopyDataInit>

08001b68 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b68:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001b6a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b6c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b6e:	3104      	adds	r1, #4

08001b70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b70:	480a      	ldr	r0, [pc, #40]	; (8001b9c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001b74:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b76:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b78:	d3f6      	bcc.n	8001b68 <CopyDataInit>
  ldr  r2, =_sbss
 8001b7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ba4 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001b7c:	e002      	b.n	8001b84 <LoopFillZerobss>

08001b7e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001b7e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b80:	f842 3b04 	str.w	r3, [r2], #4

08001b84 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b84:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001b86:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b88:	d3f9      	bcc.n	8001b7e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b8a:	f008 fc4b 	bl	800a424 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b8e:	f7fe fd7f 	bl	8000690 <main>
  bx  lr
 8001b92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b94:	24100000 	.word	0x24100000
  ldr  r3, =_sidata
 8001b98:	0800bd68 	.word	0x0800bd68
  ldr  r0, =_sdata
 8001b9c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001ba0:	24000080 	.word	0x24000080
  ldr  r2, =_sbss
 8001ba4:	24000080 	.word	0x24000080
  ldr  r3, = _ebss
 8001ba8:	240003e8 	.word	0x240003e8

08001bac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bac:	e7fe      	b.n	8001bac <ADC_IRQHandler>
	...

08001bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb6:	2003      	movs	r0, #3
 8001bb8:	f001 f88a 	bl	8002cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001bbc:	f004 fd20 	bl	8006600 <HAL_RCC_GetSysClockFreq>
 8001bc0:	4601      	mov	r1, r0
 8001bc2:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <HAL_Init+0x68>)
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	0a1b      	lsrs	r3, r3, #8
 8001bc8:	f003 030f 	and.w	r3, r3, #15
 8001bcc:	4a13      	ldr	r2, [pc, #76]	; (8001c1c <HAL_Init+0x6c>)
 8001bce:	5cd3      	ldrb	r3, [r2, r3]
 8001bd0:	f003 031f 	and.w	r3, r3, #31
 8001bd4:	fa21 f303 	lsr.w	r3, r1, r3
 8001bd8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001bda:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <HAL_Init+0x68>)
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	4a0e      	ldr	r2, [pc, #56]	; (8001c1c <HAL_Init+0x6c>)
 8001be4:	5cd3      	ldrb	r3, [r2, r3]
 8001be6:	f003 031f 	and.w	r3, r3, #31
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf0:	4a0b      	ldr	r2, [pc, #44]	; (8001c20 <HAL_Init+0x70>)
 8001bf2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001bf4:	4a0b      	ldr	r2, [pc, #44]	; (8001c24 <HAL_Init+0x74>)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	f000 f814 	bl	8001c28 <HAL_InitTick>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e002      	b.n	8001c10 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c0a:	f7ff fc15 	bl	8001438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	58024400 	.word	0x58024400
 8001c1c:	0800bc90 	.word	0x0800bc90
 8001c20:	24000010 	.word	0x24000010
 8001c24:	2400000c 	.word	0x2400000c

08001c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c30:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <HAL_InitTick+0x60>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d101      	bne.n	8001c3c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e021      	b.n	8001c80 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c3c:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <HAL_InitTick+0x64>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <HAL_InitTick+0x60>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	4619      	mov	r1, r3
 8001c46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c52:	4618      	mov	r0, r3
 8001c54:	f001 f86f 	bl	8002d36 <HAL_SYSTICK_Config>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e00e      	b.n	8001c80 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b0f      	cmp	r3, #15
 8001c66:	d80a      	bhi.n	8001c7e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c70:	f001 f839 	bl	8002ce6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c74:	4a06      	ldr	r2, [pc, #24]	; (8001c90 <HAL_InitTick+0x68>)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	e000      	b.n	8001c80 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	24000018 	.word	0x24000018
 8001c8c:	2400000c 	.word	0x2400000c
 8001c90:	24000014 	.word	0x24000014

08001c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_IncTick+0x20>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_IncTick+0x24>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	4a04      	ldr	r2, [pc, #16]	; (8001cb8 <HAL_IncTick+0x24>)
 8001ca6:	6013      	str	r3, [r2, #0]
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	24000018 	.word	0x24000018
 8001cb8:	240003e0 	.word	0x240003e0

08001cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc0:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <HAL_GetTick+0x14>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	240003e0 	.word	0x240003e0

08001cd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cdc:	f7ff ffee 	bl	8001cbc <HAL_GetTick>
 8001ce0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cec:	d005      	beq.n	8001cfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cee:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <HAL_Delay+0x40>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cfa:	bf00      	nop
 8001cfc:	f7ff ffde 	bl	8001cbc <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d8f7      	bhi.n	8001cfc <HAL_Delay+0x28>
  {
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	24000018 	.word	0x24000018

08001d18 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	609a      	str	r2, [r3, #8]
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	609a      	str	r2, [r3, #8]
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b087      	sub	sp, #28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
 8001d8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	3360      	adds	r3, #96	; 0x60
 8001d92:	461a      	mov	r2, r3
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	430b      	orrs	r3, r1
 8001dae:	431a      	orrs	r2, r3
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001db4:	bf00      	nop
 8001db6:	371c      	adds	r7, #28
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	f003 031f 	and.w	r3, r3, #31
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8001de0:	431a      	orrs	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	611a      	str	r2, [r3, #16]
}
 8001de6:	bf00      	nop
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b087      	sub	sp, #28
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	60f8      	str	r0, [r7, #12]
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	3360      	adds	r3, #96	; 0x60
 8001e02:	461a      	mov	r2, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	431a      	orrs	r2, r3
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	601a      	str	r2, [r3, #0]
  }
}
 8001e1c:	bf00      	nop
 8001e1e:	371c      	adds	r7, #28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b087      	sub	sp, #28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	3330      	adds	r3, #48	; 0x30
 8001e38:	461a      	mov	r2, r3
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	0a1b      	lsrs	r3, r3, #8
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	f003 030c 	and.w	r3, r3, #12
 8001e44:	4413      	add	r3, r2
 8001e46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	f003 031f 	and.w	r3, r3, #31
 8001e52:	211f      	movs	r1, #31
 8001e54:	fa01 f303 	lsl.w	r3, r1, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	401a      	ands	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	0e9b      	lsrs	r3, r3, #26
 8001e60:	f003 011f 	and.w	r1, r3, #31
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	f003 031f 	and.w	r3, r3, #31
 8001e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e74:	bf00      	nop
 8001e76:	371c      	adds	r7, #28
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b087      	sub	sp, #28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	3314      	adds	r3, #20
 8001e90:	461a      	mov	r2, r3
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	0e5b      	lsrs	r3, r3, #25
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	4413      	add	r3, r2
 8001e9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	0d1b      	lsrs	r3, r3, #20
 8001ea8:	f003 031f 	and.w	r3, r3, #31
 8001eac:	2107      	movs	r1, #7
 8001eae:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	401a      	ands	r2, r3
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	0d1b      	lsrs	r3, r3, #20
 8001eba:	f003 031f 	and.w	r3, r3, #31
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001eca:	bf00      	nop
 8001ecc:	371c      	adds	r7, #28
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	401a      	ands	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f003 0318 	and.w	r3, r3, #24
 8001efa:	4908      	ldr	r1, [pc, #32]	; (8001f1c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001efc:	40d9      	lsrs	r1, r3
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	400b      	ands	r3, r1
 8001f02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f06:	431a      	orrs	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001f0e:	bf00      	nop
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	000fffff 	.word	0x000fffff

08001f20 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001f2e:	4013      	ands	r3, r2
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6093      	str	r3, [r2, #8]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	5fffffc0 	.word	0x5fffffc0

08001f44 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f58:	d101      	bne.n	8001f5e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <LL_ADC_EnableInternalRegulator+0x24>)
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	6fffffc0 	.word	0x6fffffc0

08001f94 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001fa8:	d101      	bne.n	8001fae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d101      	bne.n	8001fd4 <LL_ADC_IsEnabled+0x18>
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e000      	b.n	8001fd6 <LL_ADC_IsEnabled+0x1a>
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d101      	bne.n	8001ffa <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	2b08      	cmp	r3, #8
 800201a:	d101      	bne.n	8002020 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800201c:	2301      	movs	r3, #1
 800201e:	e000      	b.n	8002022 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
	...

08002030 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002030:	b590      	push	{r4, r7, lr}
 8002032:	b089      	sub	sp, #36	; 0x24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002038:	2300      	movs	r3, #0
 800203a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800203c:	2300      	movs	r3, #0
 800203e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e137      	b.n	80022ba <HAL_ADC_Init+0x28a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002054:	2b00      	cmp	r3, #0
 8002056:	d109      	bne.n	800206c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f7ff fa07 	bl	800146c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff ff67 	bl	8001f44 <LL_ADC_IsDeepPowerDownEnabled>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d004      	beq.n	8002086 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff ff4d 	bl	8001f20 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff ff82 	bl	8001f94 <LL_ADC_IsInternalRegulatorEnabled>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d113      	bne.n	80020be <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff ff66 	bl	8001f6c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80020a0:	4b88      	ldr	r3, [pc, #544]	; (80022c4 <HAL_ADC_Init+0x294>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	099b      	lsrs	r3, r3, #6
 80020a6:	4a88      	ldr	r2, [pc, #544]	; (80022c8 <HAL_ADC_Init+0x298>)
 80020a8:	fba2 2303 	umull	r2, r3, r2, r3
 80020ac:	099b      	lsrs	r3, r3, #6
 80020ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020b0:	e002      	b.n	80020b8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	3b01      	subs	r3, #1
 80020b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f9      	bne.n	80020b2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff ff66 	bl	8001f94 <LL_ADC_IsInternalRegulatorEnabled>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10d      	bne.n	80020ea <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d2:	f043 0210 	orr.w	r2, r3, #16
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020de:	f043 0201 	orr.w	r2, r3, #1
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff ff77 	bl	8001fe2 <LL_ADC_REG_IsConversionOngoing>
 80020f4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fa:	f003 0310 	and.w	r3, r3, #16
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f040 80d2 	bne.w	80022a8 <HAL_ADC_Init+0x278>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	2b00      	cmp	r3, #0
 8002108:	f040 80ce 	bne.w	80022a8 <HAL_ADC_Init+0x278>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002110:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002114:	f043 0202 	orr.w	r2, r3, #2
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff4b 	bl	8001fbc <LL_ADC_IsEnabled>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d110      	bne.n	800214e <HAL_ADC_Init+0x11e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800212c:	4867      	ldr	r0, [pc, #412]	; (80022cc <HAL_ADC_Init+0x29c>)
 800212e:	f7ff ff45 	bl	8001fbc <LL_ADC_IsEnabled>
 8002132:	4604      	mov	r4, r0
 8002134:	4866      	ldr	r0, [pc, #408]	; (80022d0 <HAL_ADC_Init+0x2a0>)
 8002136:	f7ff ff41 	bl	8001fbc <LL_ADC_IsEnabled>
 800213a:	4603      	mov	r3, r0
 800213c:	4323      	orrs	r3, r4
 800213e:	2b00      	cmp	r3, #0
 8002140:	d105      	bne.n	800214e <HAL_ADC_Init+0x11e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	4619      	mov	r1, r3
 8002148:	4862      	ldr	r0, [pc, #392]	; (80022d4 <HAL_ADC_Init+0x2a4>)
 800214a:	f7ff fde5 	bl	8001d18 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	7d5b      	ldrb	r3, [r3, #21]
 8002152:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002158:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 800215e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	7f1b      	ldrb	r3, [r3, #28]
 8002164:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002166:	4313      	orrs	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	7f1b      	ldrb	r3, [r3, #28]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d106      	bne.n	8002180 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	3b01      	subs	r3, #1
 8002178:	045b      	lsls	r3, r3, #17
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	2b00      	cmp	r3, #0
 8002186:	d009      	beq.n	800219c <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002194:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	4b4d      	ldr	r3, [pc, #308]	; (80022d8 <HAL_ADC_Init+0x2a8>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6812      	ldr	r2, [r2, #0]
 80021aa:	69b9      	ldr	r1, [r7, #24]
 80021ac:	430b      	orrs	r3, r1
 80021ae:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff14 	bl	8001fe2 <LL_ADC_REG_IsConversionOngoing>
 80021ba:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ff21 	bl	8002008 <LL_ADC_INJ_IsConversionOngoing>
 80021c6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d14a      	bne.n	8002264 <HAL_ADC_Init+0x234>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d147      	bne.n	8002264 <HAL_ADC_Init+0x234>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	7d1b      	ldrb	r3, [r3, #20]
 80021d8:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80021de:	4313      	orrs	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68da      	ldr	r2, [r3, #12]
 80021e8:	4b3c      	ldr	r3, [pc, #240]	; (80022dc <HAL_ADC_Init+0x2ac>)
 80021ea:	4013      	ands	r3, r2
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6812      	ldr	r2, [r2, #0]
 80021f0:	69b9      	ldr	r1, [r7, #24]
 80021f2:	430b      	orrs	r3, r1
 80021f4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d11b      	bne.n	8002238 <HAL_ADC_Init+0x208>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	691a      	ldr	r2, [r3, #16]
 800220c:	4b34      	ldr	r3, [pc, #208]	; (80022e0 <HAL_ADC_Init+0x2b0>)
 800220e:	4013      	ands	r3, r2
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002214:	3a01      	subs	r2, #1
 8002216:	0411      	lsls	r1, r2, #16
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800221c:	4311      	orrs	r1, r2
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002222:	4311      	orrs	r1, r2
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002228:	430a      	orrs	r2, r1
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f042 0201 	orr.w	r2, r2, #1
 8002234:	611a      	str	r2, [r3, #16]
 8002236:	e007      	b.n	8002248 <HAL_ADC_Init+0x218>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691a      	ldr	r2, [r3, #16]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0201 	bic.w	r2, r2, #1
 8002246:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 faee 	bl	8002840 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d10c      	bne.n	8002286 <HAL_ADC_Init+0x256>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	f023 010f 	bic.w	r1, r3, #15
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	1e5a      	subs	r2, r3, #1
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	430a      	orrs	r2, r1
 8002282:	631a      	str	r2, [r3, #48]	; 0x30
 8002284:	e007      	b.n	8002296 <HAL_ADC_Init+0x266>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 020f 	bic.w	r2, r2, #15
 8002294:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229a:	f023 0303 	bic.w	r3, r3, #3
 800229e:	f043 0201 	orr.w	r2, r3, #1
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	655a      	str	r2, [r3, #84]	; 0x54
 80022a6:	e007      	b.n	80022b8 <HAL_ADC_Init+0x288>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ac:	f043 0210 	orr.w	r2, r3, #16
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80022b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3724      	adds	r7, #36	; 0x24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd90      	pop	{r4, r7, pc}
 80022c2:	bf00      	nop
 80022c4:	2400000c 	.word	0x2400000c
 80022c8:	053e2d63 	.word	0x053e2d63
 80022cc:	40022000 	.word	0x40022000
 80022d0:	40022100 	.word	0x40022100
 80022d4:	40022300 	.word	0x40022300
 80022d8:	fff0c003 	.word	0xfff0c003
 80022dc:	ffffbffc 	.word	0xffffbffc
 80022e0:	fc00f81e 	.word	0xfc00f81e

080022e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022e4:	b590      	push	{r4, r7, lr}
 80022e6:	b099      	sub	sp, #100	; 0x64
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	4aa1      	ldr	r2, [pc, #644]	; (8002584 <HAL_ADC_ConfigChannel+0x2a0>)
 80022fe:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002306:	2b01      	cmp	r3, #1
 8002308:	d101      	bne.n	800230e <HAL_ADC_ConfigChannel+0x2a>
 800230a:	2302      	movs	r3, #2
 800230c:	e283      	b.n	8002816 <HAL_ADC_ConfigChannel+0x532>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fe61 	bl	8001fe2 <LL_ADC_REG_IsConversionOngoing>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	f040 8268 	bne.w	80027f8 <HAL_ADC_ConfigChannel+0x514>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002330:	2b00      	cmp	r3, #0
 8002332:	d108      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x62>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	0e9b      	lsrs	r3, r3, #26
 800233a:	f003 031f 	and.w	r3, r3, #31
 800233e:	2201      	movs	r2, #1
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	e00f      	b.n	8002366 <HAL_ADC_ConfigChannel+0x82>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800234e:	fa93 f3a3 	rbit	r3, r3
 8002352:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002356:	fab3 f383 	clz	r3, r3
 800235a:	b2db      	uxtb	r3, r3
 800235c:	f003 031f 	and.w	r3, r3, #31
 8002360:	2201      	movs	r2, #1
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	6812      	ldr	r2, [r2, #0]
 800236a:	69d1      	ldr	r1, [r2, #28]
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	430b      	orrs	r3, r1
 8002372:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6818      	ldr	r0, [r3, #0]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	6859      	ldr	r1, [r3, #4]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	461a      	mov	r2, r3
 8002382:	f7ff fd51 	bl	8001e28 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fe29 	bl	8001fe2 <LL_ADC_REG_IsConversionOngoing>
 8002390:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff fe36 	bl	8002008 <LL_ADC_INJ_IsConversionOngoing>
 800239c:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800239e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f040 80a0 	bne.w	80024e6 <HAL_ADC_ConfigChannel+0x202>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f040 809c 	bne.w	80024e6 <HAL_ADC_ConfigChannel+0x202>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6818      	ldr	r0, [r3, #0]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	6819      	ldr	r1, [r3, #0]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	461a      	mov	r2, r3
 80023bc:	f7ff fd60 	bl	8001e80 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	f003 0310 	and.w	r3, r3, #16
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10b      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x102>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	695a      	ldr	r2, [r3, #20]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	089b      	lsrs	r3, r3, #2
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	e00a      	b.n	80023fc <HAL_ADC_ConfigChannel+0x118>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	695a      	ldr	r2, [r3, #20]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	089b      	lsrs	r3, r3, #2
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	2b04      	cmp	r3, #4
 8002404:	d027      	beq.n	8002456 <HAL_ADC_ConfigChannel+0x172>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6818      	ldr	r0, [r3, #0]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	6919      	ldr	r1, [r3, #16]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002414:	f7ff fcb4 	bl	8001d80 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6818      	ldr	r0, [r3, #0]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	6919      	ldr	r1, [r3, #16]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	7e5b      	ldrb	r3, [r3, #25]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d102      	bne.n	800242e <HAL_ADC_ConfigChannel+0x14a>
 8002428:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800242c:	e000      	b.n	8002430 <HAL_ADC_ConfigChannel+0x14c>
 800242e:	2300      	movs	r3, #0
 8002430:	461a      	mov	r2, r3
 8002432:	f7ff fcde 	bl	8001df2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6818      	ldr	r0, [r3, #0]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	6919      	ldr	r1, [r3, #16]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	7e1b      	ldrb	r3, [r3, #24]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d102      	bne.n	800244c <HAL_ADC_ConfigChannel+0x168>
 8002446:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800244a:	e000      	b.n	800244e <HAL_ADC_ConfigChannel+0x16a>
 800244c:	2300      	movs	r3, #0
 800244e:	461a      	mov	r2, r3
 8002450:	f7ff fcb6 	bl	8001dc0 <LL_ADC_SetDataRightShift>
 8002454:	e047      	b.n	80024e6 <HAL_ADC_ConfigChannel+0x202>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800245c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	069b      	lsls	r3, r3, #26
 8002466:	429a      	cmp	r2, r3
 8002468:	d107      	bne.n	800247a <HAL_ADC_ConfigChannel+0x196>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002478:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002480:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	069b      	lsls	r3, r3, #26
 800248a:	429a      	cmp	r2, r3
 800248c:	d107      	bne.n	800249e <HAL_ADC_ConfigChannel+0x1ba>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800249c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	069b      	lsls	r3, r3, #26
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d107      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x1de>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024c0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	069b      	lsls	r3, r3, #26
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d107      	bne.n	80024e6 <HAL_ADC_ConfigChannel+0x202>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024e4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff fd66 	bl	8001fbc <LL_ADC_IsEnabled>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f040 8189 	bne.w	800280a <HAL_ADC_ConfigChannel+0x526>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6818      	ldr	r0, [r3, #0]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	6819      	ldr	r1, [r3, #0]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	461a      	mov	r2, r3
 8002506:	f7ff fce7 	bl	8001ed8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	4a1d      	ldr	r2, [pc, #116]	; (8002584 <HAL_ADC_ConfigChannel+0x2a0>)
 8002510:	4293      	cmp	r3, r2
 8002512:	f040 80ff 	bne.w	8002714 <HAL_ADC_ConfigChannel+0x430>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10b      	bne.n	800253e <HAL_ADC_ConfigChannel+0x25a>
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	0e9b      	lsrs	r3, r3, #26
 800252c:	3301      	adds	r3, #1
 800252e:	f003 031f 	and.w	r3, r3, #31
 8002532:	2b09      	cmp	r3, #9
 8002534:	bf94      	ite	ls
 8002536:	2301      	movls	r3, #1
 8002538:	2300      	movhi	r3, #0
 800253a:	b2db      	uxtb	r3, r3
 800253c:	e012      	b.n	8002564 <HAL_ADC_ConfigChannel+0x280>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002546:	fa93 f3a3 	rbit	r3, r3
 800254a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800254c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800254e:	fab3 f383 	clz	r3, r3
 8002552:	b2db      	uxtb	r3, r3
 8002554:	3301      	adds	r3, #1
 8002556:	f003 031f 	and.w	r3, r3, #31
 800255a:	2b09      	cmp	r3, #9
 800255c:	bf94      	ite	ls
 800255e:	2301      	movls	r3, #1
 8002560:	2300      	movhi	r3, #0
 8002562:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002564:	2b00      	cmp	r3, #0
 8002566:	d066      	beq.n	8002636 <HAL_ADC_ConfigChannel+0x352>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002570:	2b00      	cmp	r3, #0
 8002572:	d109      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x2a4>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	0e9b      	lsrs	r3, r3, #26
 800257a:	3301      	adds	r3, #1
 800257c:	069b      	lsls	r3, r3, #26
 800257e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002582:	e010      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x2c2>
 8002584:	47ff0000 	.word	0x47ff0000
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002590:	fa93 f3a3 	rbit	r3, r3
 8002594:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002598:	fab3 f383 	clz	r3, r3
 800259c:	b2db      	uxtb	r3, r3
 800259e:	3301      	adds	r3, #1
 80025a0:	069b      	lsls	r3, r3, #26
 80025a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d109      	bne.n	80025c6 <HAL_ADC_ConfigChannel+0x2e2>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	0e9b      	lsrs	r3, r3, #26
 80025b8:	3301      	adds	r3, #1
 80025ba:	f003 031f 	and.w	r3, r3, #31
 80025be:	2101      	movs	r1, #1
 80025c0:	fa01 f303 	lsl.w	r3, r1, r3
 80025c4:	e010      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x304>
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ce:	fa93 f3a3 	rbit	r3, r3
 80025d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80025d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d6:	fab3 f383 	clz	r3, r3
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	3301      	adds	r3, #1
 80025de:	f003 031f 	and.w	r3, r3, #31
 80025e2:	2101      	movs	r1, #1
 80025e4:	fa01 f303 	lsl.w	r3, r1, r3
 80025e8:	ea42 0103 	orr.w	r1, r2, r3
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10a      	bne.n	800260e <HAL_ADC_ConfigChannel+0x32a>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	0e9b      	lsrs	r3, r3, #26
 80025fe:	3301      	adds	r3, #1
 8002600:	f003 021f 	and.w	r2, r3, #31
 8002604:	4613      	mov	r3, r2
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	4413      	add	r3, r2
 800260a:	051b      	lsls	r3, r3, #20
 800260c:	e011      	b.n	8002632 <HAL_ADC_ConfigChannel+0x34e>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002616:	fa93 f3a3 	rbit	r3, r3
 800261a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	fab3 f383 	clz	r3, r3
 8002622:	b2db      	uxtb	r3, r3
 8002624:	3301      	adds	r3, #1
 8002626:	f003 021f 	and.w	r2, r3, #31
 800262a:	4613      	mov	r3, r2
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	4413      	add	r3, r2
 8002630:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002632:	430b      	orrs	r3, r1
 8002634:	e069      	b.n	800270a <HAL_ADC_ConfigChannel+0x426>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800263e:	2b00      	cmp	r3, #0
 8002640:	d107      	bne.n	8002652 <HAL_ADC_ConfigChannel+0x36e>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	0e9b      	lsrs	r3, r3, #26
 8002648:	3301      	adds	r3, #1
 800264a:	069b      	lsls	r3, r3, #26
 800264c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002650:	e00e      	b.n	8002670 <HAL_ADC_ConfigChannel+0x38c>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	fa93 f3a3 	rbit	r3, r3
 800265e:	61fb      	str	r3, [r7, #28]
  return result;
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	fab3 f383 	clz	r3, r3
 8002666:	b2db      	uxtb	r3, r3
 8002668:	3301      	adds	r3, #1
 800266a:	069b      	lsls	r3, r3, #26
 800266c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002678:	2b00      	cmp	r3, #0
 800267a:	d109      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x3ac>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	0e9b      	lsrs	r3, r3, #26
 8002682:	3301      	adds	r3, #1
 8002684:	f003 031f 	and.w	r3, r3, #31
 8002688:	2101      	movs	r1, #1
 800268a:	fa01 f303 	lsl.w	r3, r1, r3
 800268e:	e010      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x3ce>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	fa93 f3a3 	rbit	r3, r3
 800269c:	617b      	str	r3, [r7, #20]
  return result;
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	fab3 f383 	clz	r3, r3
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	3301      	adds	r3, #1
 80026a8:	f003 031f 	and.w	r3, r3, #31
 80026ac:	2101      	movs	r1, #1
 80026ae:	fa01 f303 	lsl.w	r3, r1, r3
 80026b2:	ea42 0103 	orr.w	r1, r2, r3
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10d      	bne.n	80026de <HAL_ADC_ConfigChannel+0x3fa>
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	0e9b      	lsrs	r3, r3, #26
 80026c8:	3301      	adds	r3, #1
 80026ca:	f003 021f 	and.w	r2, r3, #31
 80026ce:	4613      	mov	r3, r2
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	4413      	add	r3, r2
 80026d4:	3b1e      	subs	r3, #30
 80026d6:	051b      	lsls	r3, r3, #20
 80026d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026dc:	e014      	b.n	8002708 <HAL_ADC_ConfigChannel+0x424>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	fa93 f3a3 	rbit	r3, r3
 80026ea:	60fb      	str	r3, [r7, #12]
  return result;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	fab3 f383 	clz	r3, r3
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	3301      	adds	r3, #1
 80026f6:	f003 021f 	and.w	r2, r3, #31
 80026fa:	4613      	mov	r3, r2
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	4413      	add	r3, r2
 8002700:	3b1e      	subs	r3, #30
 8002702:	051b      	lsls	r3, r3, #20
 8002704:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002708:	430b      	orrs	r3, r1
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	6892      	ldr	r2, [r2, #8]
 800270e:	4619      	mov	r1, r3
 8002710:	f7ff fbb6 	bl	8001e80 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	da76      	bge.n	800280a <HAL_ADC_ConfigChannel+0x526>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800271c:	4840      	ldr	r0, [pc, #256]	; (8002820 <HAL_ADC_ConfigChannel+0x53c>)
 800271e:	f7ff fb21 	bl	8001d64 <LL_ADC_GetCommonPathInternalCh>
 8002722:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002724:	483f      	ldr	r0, [pc, #252]	; (8002824 <HAL_ADC_ConfigChannel+0x540>)
 8002726:	f7ff fc49 	bl	8001fbc <LL_ADC_IsEnabled>
 800272a:	4604      	mov	r4, r0
 800272c:	483e      	ldr	r0, [pc, #248]	; (8002828 <HAL_ADC_ConfigChannel+0x544>)
 800272e:	f7ff fc45 	bl	8001fbc <LL_ADC_IsEnabled>
 8002732:	4603      	mov	r3, r0
 8002734:	4323      	orrs	r3, r4
 8002736:	2b00      	cmp	r3, #0
 8002738:	d154      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x500>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a3b      	ldr	r2, [pc, #236]	; (800282c <HAL_ADC_ConfigChannel+0x548>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d121      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x4a4>
 8002744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002746:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d11c      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x4a4>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a35      	ldr	r2, [pc, #212]	; (8002828 <HAL_ADC_ConfigChannel+0x544>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d158      	bne.n	800280a <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800275a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800275e:	4619      	mov	r1, r3
 8002760:	482f      	ldr	r0, [pc, #188]	; (8002820 <HAL_ADC_ConfigChannel+0x53c>)
 8002762:	f7ff faec 	bl	8001d3e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002766:	4b32      	ldr	r3, [pc, #200]	; (8002830 <HAL_ADC_ConfigChannel+0x54c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	099b      	lsrs	r3, r3, #6
 800276c:	4a31      	ldr	r2, [pc, #196]	; (8002834 <HAL_ADC_ConfigChannel+0x550>)
 800276e:	fba2 2303 	umull	r2, r3, r2, r3
 8002772:	099b      	lsrs	r3, r3, #6
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002778:	e002      	b.n	8002780 <HAL_ADC_ConfigChannel+0x49c>
              {
                wait_loop_index--;
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	3b01      	subs	r3, #1
 800277e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f9      	bne.n	800277a <HAL_ADC_ConfigChannel+0x496>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002786:	e040      	b.n	800280a <HAL_ADC_ConfigChannel+0x526>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a2a      	ldr	r2, [pc, #168]	; (8002838 <HAL_ADC_ConfigChannel+0x554>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d111      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x4d2>
 8002792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002794:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10c      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x4d2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a21      	ldr	r2, [pc, #132]	; (8002828 <HAL_ADC_ConfigChannel+0x544>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d131      	bne.n	800280a <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80027a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ac:	4619      	mov	r1, r3
 80027ae:	481c      	ldr	r0, [pc, #112]	; (8002820 <HAL_ADC_ConfigChannel+0x53c>)
 80027b0:	f7ff fac5 	bl	8001d3e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027b4:	e029      	b.n	800280a <HAL_ADC_ConfigChannel+0x526>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a20      	ldr	r2, [pc, #128]	; (800283c <HAL_ADC_ConfigChannel+0x558>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d124      	bne.n	800280a <HAL_ADC_ConfigChannel+0x526>
 80027c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d11f      	bne.n	800280a <HAL_ADC_ConfigChannel+0x526>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a16      	ldr	r2, [pc, #88]	; (8002828 <HAL_ADC_ConfigChannel+0x544>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d11a      	bne.n	800280a <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80027d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027da:	4619      	mov	r1, r3
 80027dc:	4810      	ldr	r0, [pc, #64]	; (8002820 <HAL_ADC_ConfigChannel+0x53c>)
 80027de:	f7ff faae 	bl	8001d3e <LL_ADC_SetCommonPathInternalCh>
 80027e2:	e012      	b.n	800280a <HAL_ADC_ConfigChannel+0x526>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e8:	f043 0220 	orr.w	r2, r3, #32
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80027f6:	e008      	b.n	800280a <HAL_ADC_ConfigChannel+0x526>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fc:	f043 0220 	orr.w	r2, r3, #32
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002812:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8002816:	4618      	mov	r0, r3
 8002818:	3764      	adds	r7, #100	; 0x64
 800281a:	46bd      	mov	sp, r7
 800281c:	bd90      	pop	{r4, r7, pc}
 800281e:	bf00      	nop
 8002820:	40022300 	.word	0x40022300
 8002824:	40022000 	.word	0x40022000
 8002828:	40022100 	.word	0x40022100
 800282c:	cb840000 	.word	0xcb840000
 8002830:	2400000c 	.word	0x2400000c
 8002834:	053e2d63 	.word	0x053e2d63
 8002838:	bac04000 	.word	0xbac04000
 800283c:	cfb80000 	.word	0xcfb80000

08002840 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002848:	4b56      	ldr	r3, [pc, #344]	; (80029a4 <ADC_ConfigureBoostMode+0x164>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d01a      	beq.n	800288a <ADC_ConfigureBoostMode+0x4a>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002854:	f004 f846 	bl	80068e4 <HAL_RCC_GetHCLKFreq>
 8002858:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002862:	d006      	beq.n	8002872 <ADC_ConfigureBoostMode+0x32>
 8002864:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002868:	d00b      	beq.n	8002882 <ADC_ConfigureBoostMode+0x42>
 800286a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800286e:	d000      	beq.n	8002872 <ADC_ConfigureBoostMode+0x32>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8002870:	e05d      	b.n	800292e <ADC_ConfigureBoostMode+0xee>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	0c1b      	lsrs	r3, r3, #16
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	fbb2 f3f3 	udiv	r3, r2, r3
 800287e:	60fb      	str	r3, [r7, #12]
        break;
 8002880:	e055      	b.n	800292e <ADC_ConfigureBoostMode+0xee>
        freq /= 4UL;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	089b      	lsrs	r3, r3, #2
 8002886:	60fb      	str	r3, [r7, #12]
        break;
 8002888:	e051      	b.n	800292e <ADC_ConfigureBoostMode+0xee>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800288a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800288e:	f004 ff39 	bl	8007704 <HAL_RCCEx_GetPeriphCLKFreq>
 8002892:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800289c:	d02a      	beq.n	80028f4 <ADC_ConfigureBoostMode+0xb4>
 800289e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80028a2:	d813      	bhi.n	80028cc <ADC_ConfigureBoostMode+0x8c>
 80028a4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80028a8:	d024      	beq.n	80028f4 <ADC_ConfigureBoostMode+0xb4>
 80028aa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80028ae:	d806      	bhi.n	80028be <ADC_ConfigureBoostMode+0x7e>
 80028b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028b4:	d01e      	beq.n	80028f4 <ADC_ConfigureBoostMode+0xb4>
 80028b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80028ba:	d01b      	beq.n	80028f4 <ADC_ConfigureBoostMode+0xb4>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 80028bc:	e037      	b.n	800292e <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 80028be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028c2:	d017      	beq.n	80028f4 <ADC_ConfigureBoostMode+0xb4>
 80028c4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80028c8:	d014      	beq.n	80028f4 <ADC_ConfigureBoostMode+0xb4>
        break;
 80028ca:	e030      	b.n	800292e <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 80028cc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80028d0:	d021      	beq.n	8002916 <ADC_ConfigureBoostMode+0xd6>
 80028d2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80028d6:	d806      	bhi.n	80028e6 <ADC_ConfigureBoostMode+0xa6>
 80028d8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80028dc:	d013      	beq.n	8002906 <ADC_ConfigureBoostMode+0xc6>
 80028de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028e2:	d014      	beq.n	800290e <ADC_ConfigureBoostMode+0xce>
        break;
 80028e4:	e023      	b.n	800292e <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 80028e6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80028ea:	d018      	beq.n	800291e <ADC_ConfigureBoostMode+0xde>
 80028ec:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80028f0:	d019      	beq.n	8002926 <ADC_ConfigureBoostMode+0xe6>
        break;
 80028f2:	e01c      	b.n	800292e <ADC_ConfigureBoostMode+0xee>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	0c9b      	lsrs	r3, r3, #18
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002902:	60fb      	str	r3, [r7, #12]
        break;
 8002904:	e013      	b.n	800292e <ADC_ConfigureBoostMode+0xee>
        freq /= 16UL;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	091b      	lsrs	r3, r3, #4
 800290a:	60fb      	str	r3, [r7, #12]
        break;
 800290c:	e00f      	b.n	800292e <ADC_ConfigureBoostMode+0xee>
        freq /= 32UL;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	095b      	lsrs	r3, r3, #5
 8002912:	60fb      	str	r3, [r7, #12]
        break;
 8002914:	e00b      	b.n	800292e <ADC_ConfigureBoostMode+0xee>
        freq /= 64UL;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	099b      	lsrs	r3, r3, #6
 800291a:	60fb      	str	r3, [r7, #12]
        break;
 800291c:	e007      	b.n	800292e <ADC_ConfigureBoostMode+0xee>
        freq /= 128UL;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	09db      	lsrs	r3, r3, #7
 8002922:	60fb      	str	r3, [r7, #12]
        break;
 8002924:	e003      	b.n	800292e <ADC_ConfigureBoostMode+0xee>
        freq /= 256UL;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	0a1b      	lsrs	r3, r3, #8
 800292a:	60fb      	str	r3, [r7, #12]
        break;
 800292c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	085b      	lsrs	r3, r3, #1
 8002932:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4a1c      	ldr	r2, [pc, #112]	; (80029a8 <ADC_ConfigureBoostMode+0x168>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d808      	bhi.n	800294e <ADC_ConfigureBoostMode+0x10e>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800294a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800294c:	e025      	b.n	800299a <ADC_ConfigureBoostMode+0x15a>
  else if (freq <= 12500000UL)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	4a16      	ldr	r2, [pc, #88]	; (80029ac <ADC_ConfigureBoostMode+0x16c>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d80a      	bhi.n	800296c <ADC_ConfigureBoostMode+0x12c>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002968:	609a      	str	r2, [r3, #8]
}
 800296a:	e016      	b.n	800299a <ADC_ConfigureBoostMode+0x15a>
  else if (freq <= 25000000UL)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4a10      	ldr	r2, [pc, #64]	; (80029b0 <ADC_ConfigureBoostMode+0x170>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d80a      	bhi.n	800298a <ADC_ConfigureBoostMode+0x14a>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002986:	609a      	str	r2, [r3, #8]
}
 8002988:	e007      	b.n	800299a <ADC_ConfigureBoostMode+0x15a>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002998:	609a      	str	r2, [r3, #8]
}
 800299a:	bf00      	nop
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40022300 	.word	0x40022300
 80029a8:	005f5e10 	.word	0x005f5e10
 80029ac:	00bebc20 	.word	0x00bebc20
 80029b0:	017d7840 	.word	0x017d7840

080029b4 <LL_ADC_IsEnabled>:
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d101      	bne.n	80029cc <LL_ADC_IsEnabled+0x18>
 80029c8:	2301      	movs	r3, #1
 80029ca:	e000      	b.n	80029ce <LL_ADC_IsEnabled+0x1a>
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <LL_ADC_REG_IsConversionOngoing>:
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 0304 	and.w	r3, r3, #4
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	d101      	bne.n	80029f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80029ee:	2301      	movs	r3, #1
 80029f0:	e000      	b.n	80029f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002a00:	b590      	push	{r4, r7, lr}
 8002a02:	b09f      	sub	sp, #124	; 0x7c
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d101      	bne.n	8002a1e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e07c      	b.n	8002b18 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a3d      	ldr	r2, [pc, #244]	; (8002b20 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d102      	bne.n	8002a36 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002a30:	4b3c      	ldr	r3, [pc, #240]	; (8002b24 <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 8002a32:	60bb      	str	r3, [r7, #8]
 8002a34:	e001      	b.n	8002a3a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002a36:	2300      	movs	r3, #0
 8002a38:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10b      	bne.n	8002a58 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a44:	f043 0220 	orr.w	r2, r3, #32
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e05f      	b.n	8002b18 <HAL_ADCEx_MultiModeConfigChannel+0x118>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff ffbd 	bl	80029da <LL_ADC_REG_IsConversionOngoing>
 8002a60:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff ffb7 	bl	80029da <LL_ADC_REG_IsConversionOngoing>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d141      	bne.n	8002af6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002a72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d13e      	bne.n	8002af6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a78:	4b2b      	ldr	r3, [pc, #172]	; (8002b28 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002a7a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d020      	beq.n	8002ac6 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002a84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	431a      	orrs	r2, r3
 8002a92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a94:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a96:	4822      	ldr	r0, [pc, #136]	; (8002b20 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8002a98:	f7ff ff8c 	bl	80029b4 <LL_ADC_IsEnabled>
 8002a9c:	4604      	mov	r4, r0
 8002a9e:	4821      	ldr	r0, [pc, #132]	; (8002b24 <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 8002aa0:	f7ff ff88 	bl	80029b4 <LL_ADC_IsEnabled>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	4323      	orrs	r3, r4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d12e      	bne.n	8002b0a <HAL_ADCEx_MultiModeConfigChannel+0x10a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	4b1e      	ldr	r3, [pc, #120]	; (8002b2c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	6811      	ldr	r1, [r2, #0]
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	6892      	ldr	r2, [r2, #8]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ac2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ac4:	e021      	b.n	8002b0a <HAL_ADCEx_MultiModeConfigChannel+0x10a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ad0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ad2:	4813      	ldr	r0, [pc, #76]	; (8002b20 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8002ad4:	f7ff ff6e 	bl	80029b4 <LL_ADC_IsEnabled>
 8002ad8:	4604      	mov	r4, r0
 8002ada:	4812      	ldr	r0, [pc, #72]	; (8002b24 <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 8002adc:	f7ff ff6a 	bl	80029b4 <LL_ADC_IsEnabled>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	4323      	orrs	r3, r4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d110      	bne.n	8002b0a <HAL_ADCEx_MultiModeConfigChannel+0x10a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	4b0f      	ldr	r3, [pc, #60]	; (8002b2c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002aee:	4013      	ands	r3, r2
 8002af0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002af2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002af4:	e009      	b.n	8002b0a <HAL_ADCEx_MultiModeConfigChannel+0x10a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afa:	f043 0220 	orr.w	r2, r3, #32
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002b08:	e000      	b.n	8002b0c <HAL_ADCEx_MultiModeConfigChannel+0x10c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b0a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b14:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	377c      	adds	r7, #124	; 0x7c
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd90      	pop	{r4, r7, pc}
 8002b20:	40022000 	.word	0x40022000
 8002b24:	40022100 	.word	0x40022100
 8002b28:	40022300 	.word	0x40022300
 8002b2c:	fffff0e0 	.word	0xfffff0e0

08002b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b40:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <__NVIC_SetPriorityGrouping+0x40>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b58:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <__NVIC_SetPriorityGrouping+0x44>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b5e:	4a04      	ldr	r2, [pc, #16]	; (8002b70 <__NVIC_SetPriorityGrouping+0x40>)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	60d3      	str	r3, [r2, #12]
}
 8002b64:	bf00      	nop
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	e000ed00 	.word	0xe000ed00
 8002b74:	05fa0000 	.word	0x05fa0000

08002b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b7c:	4b04      	ldr	r3, [pc, #16]	; (8002b90 <__NVIC_GetPriorityGrouping+0x18>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	0a1b      	lsrs	r3, r3, #8
 8002b82:	f003 0307 	and.w	r3, r3, #7
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	e000ed00 	.word	0xe000ed00

08002b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	db0b      	blt.n	8002bbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ba6:	88fb      	ldrh	r3, [r7, #6]
 8002ba8:	f003 021f 	and.w	r2, r3, #31
 8002bac:	4907      	ldr	r1, [pc, #28]	; (8002bcc <__NVIC_EnableIRQ+0x38>)
 8002bae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bb2:	095b      	lsrs	r3, r3, #5
 8002bb4:	2001      	movs	r0, #1
 8002bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8002bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	e000e100 	.word	0xe000e100

08002bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	6039      	str	r1, [r7, #0]
 8002bda:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002bdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	db0a      	blt.n	8002bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	490c      	ldr	r1, [pc, #48]	; (8002c1c <__NVIC_SetPriority+0x4c>)
 8002bea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bee:	0112      	lsls	r2, r2, #4
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bf8:	e00a      	b.n	8002c10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	4908      	ldr	r1, [pc, #32]	; (8002c20 <__NVIC_SetPriority+0x50>)
 8002c00:	88fb      	ldrh	r3, [r7, #6]
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	3b04      	subs	r3, #4
 8002c08:	0112      	lsls	r2, r2, #4
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	761a      	strb	r2, [r3, #24]
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	e000e100 	.word	0xe000e100
 8002c20:	e000ed00 	.word	0xe000ed00

08002c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b089      	sub	sp, #36	; 0x24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f1c3 0307 	rsb	r3, r3, #7
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	bf28      	it	cs
 8002c42:	2304      	movcs	r3, #4
 8002c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	3304      	adds	r3, #4
 8002c4a:	2b06      	cmp	r3, #6
 8002c4c:	d902      	bls.n	8002c54 <NVIC_EncodePriority+0x30>
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	3b03      	subs	r3, #3
 8002c52:	e000      	b.n	8002c56 <NVIC_EncodePriority+0x32>
 8002c54:	2300      	movs	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c58:	f04f 32ff 	mov.w	r2, #4294967295
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43da      	mvns	r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	401a      	ands	r2, r3
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	fa01 f303 	lsl.w	r3, r1, r3
 8002c76:	43d9      	mvns	r1, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c7c:	4313      	orrs	r3, r2
         );
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3724      	adds	r7, #36	; 0x24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
	...

08002c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c9c:	d301      	bcc.n	8002ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e00f      	b.n	8002cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ca2:	4a0a      	ldr	r2, [pc, #40]	; (8002ccc <SysTick_Config+0x40>)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002caa:	210f      	movs	r1, #15
 8002cac:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb0:	f7ff ff8e 	bl	8002bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cb4:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <SysTick_Config+0x40>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cba:	4b04      	ldr	r3, [pc, #16]	; (8002ccc <SysTick_Config+0x40>)
 8002cbc:	2207      	movs	r2, #7
 8002cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	e000e010 	.word	0xe000e010

08002cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7ff ff29 	bl	8002b30 <__NVIC_SetPriorityGrouping>
}
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b086      	sub	sp, #24
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	4603      	mov	r3, r0
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cf4:	f7ff ff40 	bl	8002b78 <__NVIC_GetPriorityGrouping>
 8002cf8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	6978      	ldr	r0, [r7, #20]
 8002d00:	f7ff ff90 	bl	8002c24 <NVIC_EncodePriority>
 8002d04:	4602      	mov	r2, r0
 8002d06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d0a:	4611      	mov	r1, r2
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff ff5f 	bl	8002bd0 <__NVIC_SetPriority>
}
 8002d12:	bf00      	nop
 8002d14:	3718      	adds	r7, #24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b082      	sub	sp, #8
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	4603      	mov	r3, r0
 8002d22:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff ff33 	bl	8002b94 <__NVIC_EnableIRQ>
}
 8002d2e:	bf00      	nop
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7ff ffa4 	bl	8002c8c <SysTick_Config>
 8002d44:	4603      	mov	r3, r0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e014      	b.n	8002d8a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	791b      	ldrb	r3, [r3, #4]
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d105      	bne.n	8002d76 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7fe fbf5 	bl	8001560 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2202      	movs	r2, #2
 8002d7a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
 8002d9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	795b      	ldrb	r3, [r3, #5]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_DAC_Start+0x16>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e040      	b.n	8002e2a <HAL_DAC_Start+0x98>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2202      	movs	r2, #2
 8002db2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6819      	ldr	r1, [r3, #0]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	f003 0310 	and.w	r3, r3, #16
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	409a      	lsls	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10f      	bne.n	8002df2 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d11d      	bne.n	8002e1c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0201 	orr.w	r2, r2, #1
 8002dee:	605a      	str	r2, [r3, #4]
 8002df0:	e014      	b.n	8002e1c <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	f003 0310 	and.w	r3, r3, #16
 8002e02:	2102      	movs	r1, #2
 8002e04:	fa01 f303 	lsl.w	r3, r1, r3
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d107      	bne.n	8002e1c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0202 	orr.w	r2, r2, #2
 8002e1a:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
	...

08002e38 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
 8002e44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	795b      	ldrb	r3, [r3, #5]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d101      	bne.n	8002e56 <HAL_DAC_Start_DMA+0x1e>
 8002e52:	2302      	movs	r3, #2
 8002e54:	e09e      	b.n	8002f94 <HAL_DAC_Start_DMA+0x15c>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d12a      	bne.n	8002ebe <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	4a4b      	ldr	r2, [pc, #300]	; (8002f9c <HAL_DAC_Start_DMA+0x164>)
 8002e6e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	4a4a      	ldr	r2, [pc, #296]	; (8002fa0 <HAL_DAC_Start_DMA+0x168>)
 8002e76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	4a49      	ldr	r2, [pc, #292]	; (8002fa4 <HAL_DAC_Start_DMA+0x16c>)
 8002e7e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e8e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d009      	beq.n	8002eaa <HAL_DAC_Start_DMA+0x72>
 8002e96:	2b08      	cmp	r3, #8
 8002e98:	d00c      	beq.n	8002eb4 <HAL_DAC_Start_DMA+0x7c>
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d000      	beq.n	8002ea0 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002e9e:	e039      	b.n	8002f14 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	3308      	adds	r3, #8
 8002ea6:	613b      	str	r3, [r7, #16]
        break;
 8002ea8:	e034      	b.n	8002f14 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	330c      	adds	r3, #12
 8002eb0:	613b      	str	r3, [r7, #16]
        break;
 8002eb2:	e02f      	b.n	8002f14 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	3310      	adds	r3, #16
 8002eba:	613b      	str	r3, [r7, #16]
        break;
 8002ebc:	e02a      	b.n	8002f14 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	4a39      	ldr	r2, [pc, #228]	; (8002fa8 <HAL_DAC_Start_DMA+0x170>)
 8002ec4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	4a38      	ldr	r2, [pc, #224]	; (8002fac <HAL_DAC_Start_DMA+0x174>)
 8002ecc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	4a37      	ldr	r2, [pc, #220]	; (8002fb0 <HAL_DAC_Start_DMA+0x178>)
 8002ed4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ee4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d009      	beq.n	8002f00 <HAL_DAC_Start_DMA+0xc8>
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d00c      	beq.n	8002f0a <HAL_DAC_Start_DMA+0xd2>
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d000      	beq.n	8002ef6 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002ef4:	e00e      	b.n	8002f14 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	3314      	adds	r3, #20
 8002efc:	613b      	str	r3, [r7, #16]
        break;
 8002efe:	e009      	b.n	8002f14 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	3318      	adds	r3, #24
 8002f06:	613b      	str	r3, [r7, #16]
        break;
 8002f08:	e004      	b.n	8002f14 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	331c      	adds	r3, #28
 8002f10:	613b      	str	r3, [r7, #16]
        break;
 8002f12:	bf00      	nop
    }
  }

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d111      	bne.n	8002f3e <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f28:	601a      	str	r2, [r3, #0]

   /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6898      	ldr	r0, [r3, #8]
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	f000 fd9c 	bl	8003a70 <HAL_DMA_Start_IT>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	75fb      	strb	r3, [r7, #23]
 8002f3c:	e010      	b.n	8002f60 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002f4c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	68d8      	ldr	r0, [r3, #12]
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	f000 fd8a 	bl	8003a70 <HAL_DMA_Start_IT>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002f66:	7dfb      	ldrb	r3, [r7, #23]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d10c      	bne.n	8002f86 <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6819      	ldr	r1, [r3, #0]
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	f003 0310 	and.w	r3, r3, #16
 8002f78:	2201      	movs	r2, #1
 8002f7a:	409a      	lsls	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	e005      	b.n	8002f92 <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f043 0204 	orr.w	r2, r3, #4
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	0800323d 	.word	0x0800323d
 8002fa0:	0800325f 	.word	0x0800325f
 8002fa4:	0800327b 	.word	0x0800327b
 8002fa8:	080032e5 	.word	0x080032e5
 8002fac:	08003307 	.word	0x08003307
 8002fb0:	08003323 	.word	0x08003323

08002fb4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b088      	sub	sp, #32
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	795b      	ldrb	r3, [r3, #5]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d101      	bne.n	8002ff4 <HAL_DAC_ConfigChannel+0x18>
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	e11d      	b.n	8003230 <HAL_DAC_ConfigChannel+0x254>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2b04      	cmp	r3, #4
 8003006:	d174      	bne.n	80030f2 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003008:	f7fe fe58 	bl	8001cbc <HAL_GetTick>
 800300c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d134      	bne.n	800307e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003014:	e011      	b.n	800303a <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003016:	f7fe fe51 	bl	8001cbc <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b01      	cmp	r3, #1
 8003022:	d90a      	bls.n	800303a <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	f043 0208 	orr.w	r2, r3, #8
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2203      	movs	r2, #3
 8003034:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e0fa      	b.n	8003230 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003040:	4b7d      	ldr	r3, [pc, #500]	; (8003238 <HAL_DAC_ConfigChannel+0x25c>)
 8003042:	4013      	ands	r3, r2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1e6      	bne.n	8003016 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8003048:	2001      	movs	r0, #1
 800304a:	f7fe fe43 	bl	8001cd4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	6992      	ldr	r2, [r2, #24]
 8003056:	641a      	str	r2, [r3, #64]	; 0x40
 8003058:	e01e      	b.n	8003098 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800305a:	f7fe fe2f 	bl	8001cbc <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b01      	cmp	r3, #1
 8003066:	d90a      	bls.n	800307e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	f043 0208 	orr.w	r2, r3, #8
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2203      	movs	r2, #3
 8003078:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e0d8      	b.n	8003230 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003084:	2b00      	cmp	r3, #0
 8003086:	dbe8      	blt.n	800305a <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8003088:	2001      	movs	r0, #1
 800308a:	f7fe fe23 	bl	8001cd4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	6992      	ldr	r2, [r2, #24]
 8003096:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f003 0310 	and.w	r3, r3, #16
 80030a4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80030a8:	fa01 f303 	lsl.w	r3, r1, r3
 80030ac:	43db      	mvns	r3, r3
 80030ae:	ea02 0103 	and.w	r1, r2, r3
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	69da      	ldr	r2, [r3, #28]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f003 0310 	and.w	r3, r3, #16
 80030bc:	409a      	lsls	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f003 0310 	and.w	r3, r3, #16
 80030d2:	21ff      	movs	r1, #255	; 0xff
 80030d4:	fa01 f303 	lsl.w	r3, r1, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	ea02 0103 	and.w	r1, r2, r3
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	6a1a      	ldr	r2, [r3, #32]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f003 0310 	and.w	r3, r3, #16
 80030e8:	409a      	lsls	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d11d      	bne.n	8003136 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003100:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f003 0310 	and.w	r3, r3, #16
 8003108:	221f      	movs	r2, #31
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	43db      	mvns	r3, r3
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	4013      	ands	r3, r2
 8003114:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f003 0310 	and.w	r3, r3, #16
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	4313      	orrs	r3, r2
 800312c:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f003 0310 	and.w	r3, r3, #16
 8003144:	2207      	movs	r2, #7
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	43db      	mvns	r3, r3
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	4013      	ands	r3, r2
 8003150:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d102      	bne.n	8003160 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800315a:	2300      	movs	r3, #0
 800315c:	61fb      	str	r3, [r7, #28]
 800315e:	e00f      	b.n	8003180 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	2b02      	cmp	r3, #2
 8003166:	d102      	bne.n	800316e <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003168:	2301      	movs	r3, #1
 800316a:	61fb      	str	r3, [r7, #28]
 800316c:	e008      	b.n	8003180 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d102      	bne.n	800317c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003176:	2301      	movs	r3, #1
 8003178:	61fb      	str	r3, [r7, #28]
 800317a:	e001      	b.n	8003180 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800317c:	2300      	movs	r3, #0
 800317e:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	4313      	orrs	r3, r2
 800318a:	69fa      	ldr	r2, [r7, #28]
 800318c:	4313      	orrs	r3, r2
 800318e:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f003 0310 	and.w	r3, r3, #16
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	4313      	orrs	r3, r2
 80031a0:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6819      	ldr	r1, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f003 0310 	and.w	r3, r3, #16
 80031b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	43da      	mvns	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	400a      	ands	r2, r1
 80031c6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f003 0310 	and.w	r3, r3, #16
 80031d6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	43db      	mvns	r3, r3
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	4013      	ands	r3, r2
 80031e4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f003 0310 	and.w	r3, r3, #16
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6819      	ldr	r1, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f003 0310 	and.w	r3, r3, #16
 8003212:	22c0      	movs	r2, #192	; 0xc0
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	43da      	mvns	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	400a      	ands	r2, r1
 8003220:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2201      	movs	r2, #1
 8003226:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3720      	adds	r7, #32
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	20008000 	.word	0x20008000

0800323c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003248:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f7fd ffc8 	bl	80011e0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2201      	movs	r2, #1
 8003254:	711a      	strb	r2, [r3, #4]
}
 8003256:	bf00      	nop
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b084      	sub	sp, #16
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f7ff fea1 	bl	8002fb4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003272:	bf00      	nop
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b084      	sub	sp, #16
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003286:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	f043 0204 	orr.w	r2, r3, #4
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f7ff fe97 	bl	8002fc8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2201      	movs	r2, #1
 800329e:	711a      	strb	r2, [r3, #4]
}
 80032a0:	bf00      	nop
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f7ff ffd8 	bl	80032a8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2201      	movs	r2, #1
 80032fc:	711a      	strb	r2, [r3, #4]
}
 80032fe:	bf00      	nop
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b084      	sub	sp, #16
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003312:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f7ff ffd1 	bl	80032bc <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800331a:	bf00      	nop
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b084      	sub	sp, #16
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	f043 0204 	orr.w	r2, r3, #4
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f7ff ffc7 	bl	80032d0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2201      	movs	r2, #1
 8003346:	711a      	strb	r2, [r3, #4]
}
 8003348:	bf00      	nop
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003358:	f7fe fcb0 	bl	8001cbc <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e37f      	b.n	8003a68 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a66      	ldr	r2, [pc, #408]	; (8003508 <HAL_DMA_Init+0x1b8>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d04a      	beq.n	8003408 <HAL_DMA_Init+0xb8>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a65      	ldr	r2, [pc, #404]	; (800350c <HAL_DMA_Init+0x1bc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d045      	beq.n	8003408 <HAL_DMA_Init+0xb8>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a63      	ldr	r2, [pc, #396]	; (8003510 <HAL_DMA_Init+0x1c0>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d040      	beq.n	8003408 <HAL_DMA_Init+0xb8>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a62      	ldr	r2, [pc, #392]	; (8003514 <HAL_DMA_Init+0x1c4>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d03b      	beq.n	8003408 <HAL_DMA_Init+0xb8>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a60      	ldr	r2, [pc, #384]	; (8003518 <HAL_DMA_Init+0x1c8>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d036      	beq.n	8003408 <HAL_DMA_Init+0xb8>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a5f      	ldr	r2, [pc, #380]	; (800351c <HAL_DMA_Init+0x1cc>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d031      	beq.n	8003408 <HAL_DMA_Init+0xb8>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a5d      	ldr	r2, [pc, #372]	; (8003520 <HAL_DMA_Init+0x1d0>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d02c      	beq.n	8003408 <HAL_DMA_Init+0xb8>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a5c      	ldr	r2, [pc, #368]	; (8003524 <HAL_DMA_Init+0x1d4>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d027      	beq.n	8003408 <HAL_DMA_Init+0xb8>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a5a      	ldr	r2, [pc, #360]	; (8003528 <HAL_DMA_Init+0x1d8>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d022      	beq.n	8003408 <HAL_DMA_Init+0xb8>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a59      	ldr	r2, [pc, #356]	; (800352c <HAL_DMA_Init+0x1dc>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d01d      	beq.n	8003408 <HAL_DMA_Init+0xb8>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a57      	ldr	r2, [pc, #348]	; (8003530 <HAL_DMA_Init+0x1e0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d018      	beq.n	8003408 <HAL_DMA_Init+0xb8>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a56      	ldr	r2, [pc, #344]	; (8003534 <HAL_DMA_Init+0x1e4>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d013      	beq.n	8003408 <HAL_DMA_Init+0xb8>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a54      	ldr	r2, [pc, #336]	; (8003538 <HAL_DMA_Init+0x1e8>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d00e      	beq.n	8003408 <HAL_DMA_Init+0xb8>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a53      	ldr	r2, [pc, #332]	; (800353c <HAL_DMA_Init+0x1ec>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d009      	beq.n	8003408 <HAL_DMA_Init+0xb8>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a51      	ldr	r2, [pc, #324]	; (8003540 <HAL_DMA_Init+0x1f0>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d004      	beq.n	8003408 <HAL_DMA_Init+0xb8>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a50      	ldr	r2, [pc, #320]	; (8003544 <HAL_DMA_Init+0x1f4>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d101      	bne.n	800340c <HAL_DMA_Init+0xbc>
 8003408:	2301      	movs	r3, #1
 800340a:	e000      	b.n	800340e <HAL_DMA_Init+0xbe>
 800340c:	2300      	movs	r3, #0
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 813c 	beq.w	800368c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2202      	movs	r2, #2
 8003420:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a37      	ldr	r2, [pc, #220]	; (8003508 <HAL_DMA_Init+0x1b8>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d04a      	beq.n	80034c4 <HAL_DMA_Init+0x174>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a36      	ldr	r2, [pc, #216]	; (800350c <HAL_DMA_Init+0x1bc>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d045      	beq.n	80034c4 <HAL_DMA_Init+0x174>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a34      	ldr	r2, [pc, #208]	; (8003510 <HAL_DMA_Init+0x1c0>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d040      	beq.n	80034c4 <HAL_DMA_Init+0x174>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a33      	ldr	r2, [pc, #204]	; (8003514 <HAL_DMA_Init+0x1c4>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d03b      	beq.n	80034c4 <HAL_DMA_Init+0x174>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a31      	ldr	r2, [pc, #196]	; (8003518 <HAL_DMA_Init+0x1c8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d036      	beq.n	80034c4 <HAL_DMA_Init+0x174>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a30      	ldr	r2, [pc, #192]	; (800351c <HAL_DMA_Init+0x1cc>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d031      	beq.n	80034c4 <HAL_DMA_Init+0x174>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a2e      	ldr	r2, [pc, #184]	; (8003520 <HAL_DMA_Init+0x1d0>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d02c      	beq.n	80034c4 <HAL_DMA_Init+0x174>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a2d      	ldr	r2, [pc, #180]	; (8003524 <HAL_DMA_Init+0x1d4>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d027      	beq.n	80034c4 <HAL_DMA_Init+0x174>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a2b      	ldr	r2, [pc, #172]	; (8003528 <HAL_DMA_Init+0x1d8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d022      	beq.n	80034c4 <HAL_DMA_Init+0x174>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a2a      	ldr	r2, [pc, #168]	; (800352c <HAL_DMA_Init+0x1dc>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d01d      	beq.n	80034c4 <HAL_DMA_Init+0x174>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a28      	ldr	r2, [pc, #160]	; (8003530 <HAL_DMA_Init+0x1e0>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d018      	beq.n	80034c4 <HAL_DMA_Init+0x174>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a27      	ldr	r2, [pc, #156]	; (8003534 <HAL_DMA_Init+0x1e4>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d013      	beq.n	80034c4 <HAL_DMA_Init+0x174>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a25      	ldr	r2, [pc, #148]	; (8003538 <HAL_DMA_Init+0x1e8>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d00e      	beq.n	80034c4 <HAL_DMA_Init+0x174>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a24      	ldr	r2, [pc, #144]	; (800353c <HAL_DMA_Init+0x1ec>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d009      	beq.n	80034c4 <HAL_DMA_Init+0x174>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a22      	ldr	r2, [pc, #136]	; (8003540 <HAL_DMA_Init+0x1f0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d004      	beq.n	80034c4 <HAL_DMA_Init+0x174>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a21      	ldr	r2, [pc, #132]	; (8003544 <HAL_DMA_Init+0x1f4>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d108      	bne.n	80034d6 <HAL_DMA_Init+0x186>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0201 	bic.w	r2, r2, #1
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	e007      	b.n	80034e6 <HAL_DMA_Init+0x196>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0201 	bic.w	r2, r2, #1
 80034e4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80034e6:	e02f      	b.n	8003548 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034e8:	f7fe fbe8 	bl	8001cbc <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b05      	cmp	r3, #5
 80034f4:	d928      	bls.n	8003548 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2220      	movs	r2, #32
 80034fa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2203      	movs	r2, #3
 8003500:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e2af      	b.n	8003a68 <HAL_DMA_Init+0x718>
 8003508:	40020010 	.word	0x40020010
 800350c:	40020028 	.word	0x40020028
 8003510:	40020040 	.word	0x40020040
 8003514:	40020058 	.word	0x40020058
 8003518:	40020070 	.word	0x40020070
 800351c:	40020088 	.word	0x40020088
 8003520:	400200a0 	.word	0x400200a0
 8003524:	400200b8 	.word	0x400200b8
 8003528:	40020410 	.word	0x40020410
 800352c:	40020428 	.word	0x40020428
 8003530:	40020440 	.word	0x40020440
 8003534:	40020458 	.word	0x40020458
 8003538:	40020470 	.word	0x40020470
 800353c:	40020488 	.word	0x40020488
 8003540:	400204a0 	.word	0x400204a0
 8003544:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1c8      	bne.n	80034e8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	4b73      	ldr	r3, [pc, #460]	; (8003730 <HAL_DMA_Init+0x3e0>)
 8003562:	4013      	ands	r3, r2
 8003564:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800356e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800357a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003586:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4313      	orrs	r3, r2
 8003592:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	2b04      	cmp	r3, #4
 800359a:	d107      	bne.n	80035ac <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a4:	4313      	orrs	r3, r2
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2b28      	cmp	r3, #40	; 0x28
 80035b2:	d903      	bls.n	80035bc <HAL_DMA_Init+0x26c>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b2e      	cmp	r3, #46	; 0x2e
 80035ba:	d91f      	bls.n	80035fc <HAL_DMA_Init+0x2ac>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b3e      	cmp	r3, #62	; 0x3e
 80035c2:	d903      	bls.n	80035cc <HAL_DMA_Init+0x27c>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b42      	cmp	r3, #66	; 0x42
 80035ca:	d917      	bls.n	80035fc <HAL_DMA_Init+0x2ac>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	2b46      	cmp	r3, #70	; 0x46
 80035d2:	d903      	bls.n	80035dc <HAL_DMA_Init+0x28c>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b48      	cmp	r3, #72	; 0x48
 80035da:	d90f      	bls.n	80035fc <HAL_DMA_Init+0x2ac>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b4e      	cmp	r3, #78	; 0x4e
 80035e2:	d903      	bls.n	80035ec <HAL_DMA_Init+0x29c>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b52      	cmp	r3, #82	; 0x52
 80035ea:	d907      	bls.n	80035fc <HAL_DMA_Init+0x2ac>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b73      	cmp	r3, #115	; 0x73
 80035f2:	d905      	bls.n	8003600 <HAL_DMA_Init+0x2b0>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b77      	cmp	r3, #119	; 0x77
 80035fa:	d801      	bhi.n	8003600 <HAL_DMA_Init+0x2b0>
 80035fc:	2301      	movs	r3, #1
 80035fe:	e000      	b.n	8003602 <HAL_DMA_Init+0x2b2>
 8003600:	2300      	movs	r3, #0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800360c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f023 0307 	bic.w	r3, r3, #7
 8003624:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	4313      	orrs	r3, r2
 800362e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	2b04      	cmp	r3, #4
 8003636:	d117      	bne.n	8003668 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	4313      	orrs	r3, r2
 8003640:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00e      	beq.n	8003668 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f001 fe72 	bl	8005334 <DMA_CheckFifoParam>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d008      	beq.n	8003668 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2240      	movs	r2, #64	; 0x40
 800365a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e1ff      	b.n	8003a68 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f001 fdad 	bl	80051d0 <DMA_CalcBaseAndBitshift>
 8003676:	4603      	mov	r3, r0
 8003678:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367e:	f003 031f 	and.w	r3, r3, #31
 8003682:	223f      	movs	r2, #63	; 0x3f
 8003684:	409a      	lsls	r2, r3
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	609a      	str	r2, [r3, #8]
 800368a:	e0fe      	b.n	800388a <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a28      	ldr	r2, [pc, #160]	; (8003734 <HAL_DMA_Init+0x3e4>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d04a      	beq.n	800372c <HAL_DMA_Init+0x3dc>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a27      	ldr	r2, [pc, #156]	; (8003738 <HAL_DMA_Init+0x3e8>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d045      	beq.n	800372c <HAL_DMA_Init+0x3dc>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a25      	ldr	r2, [pc, #148]	; (800373c <HAL_DMA_Init+0x3ec>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d040      	beq.n	800372c <HAL_DMA_Init+0x3dc>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a24      	ldr	r2, [pc, #144]	; (8003740 <HAL_DMA_Init+0x3f0>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d03b      	beq.n	800372c <HAL_DMA_Init+0x3dc>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a22      	ldr	r2, [pc, #136]	; (8003744 <HAL_DMA_Init+0x3f4>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d036      	beq.n	800372c <HAL_DMA_Init+0x3dc>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a21      	ldr	r2, [pc, #132]	; (8003748 <HAL_DMA_Init+0x3f8>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d031      	beq.n	800372c <HAL_DMA_Init+0x3dc>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a1f      	ldr	r2, [pc, #124]	; (800374c <HAL_DMA_Init+0x3fc>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d02c      	beq.n	800372c <HAL_DMA_Init+0x3dc>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a1e      	ldr	r2, [pc, #120]	; (8003750 <HAL_DMA_Init+0x400>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d027      	beq.n	800372c <HAL_DMA_Init+0x3dc>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a1c      	ldr	r2, [pc, #112]	; (8003754 <HAL_DMA_Init+0x404>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d022      	beq.n	800372c <HAL_DMA_Init+0x3dc>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a1b      	ldr	r2, [pc, #108]	; (8003758 <HAL_DMA_Init+0x408>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d01d      	beq.n	800372c <HAL_DMA_Init+0x3dc>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a19      	ldr	r2, [pc, #100]	; (800375c <HAL_DMA_Init+0x40c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d018      	beq.n	800372c <HAL_DMA_Init+0x3dc>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a18      	ldr	r2, [pc, #96]	; (8003760 <HAL_DMA_Init+0x410>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d013      	beq.n	800372c <HAL_DMA_Init+0x3dc>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a16      	ldr	r2, [pc, #88]	; (8003764 <HAL_DMA_Init+0x414>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d00e      	beq.n	800372c <HAL_DMA_Init+0x3dc>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a15      	ldr	r2, [pc, #84]	; (8003768 <HAL_DMA_Init+0x418>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d009      	beq.n	800372c <HAL_DMA_Init+0x3dc>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a13      	ldr	r2, [pc, #76]	; (800376c <HAL_DMA_Init+0x41c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d004      	beq.n	800372c <HAL_DMA_Init+0x3dc>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a12      	ldr	r2, [pc, #72]	; (8003770 <HAL_DMA_Init+0x420>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d123      	bne.n	8003774 <HAL_DMA_Init+0x424>
 800372c:	2301      	movs	r3, #1
 800372e:	e022      	b.n	8003776 <HAL_DMA_Init+0x426>
 8003730:	fe10803f 	.word	0xfe10803f
 8003734:	48022c08 	.word	0x48022c08
 8003738:	48022c1c 	.word	0x48022c1c
 800373c:	48022c30 	.word	0x48022c30
 8003740:	48022c44 	.word	0x48022c44
 8003744:	48022c58 	.word	0x48022c58
 8003748:	48022c6c 	.word	0x48022c6c
 800374c:	48022c80 	.word	0x48022c80
 8003750:	48022c94 	.word	0x48022c94
 8003754:	58025408 	.word	0x58025408
 8003758:	5802541c 	.word	0x5802541c
 800375c:	58025430 	.word	0x58025430
 8003760:	58025444 	.word	0x58025444
 8003764:	58025458 	.word	0x58025458
 8003768:	5802546c 	.word	0x5802546c
 800376c:	58025480 	.word	0x58025480
 8003770:	58025494 	.word	0x58025494
 8003774:	2300      	movs	r3, #0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d07e      	beq.n	8003878 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a80      	ldr	r2, [pc, #512]	; (8003980 <HAL_DMA_Init+0x630>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d021      	beq.n	80037c8 <HAL_DMA_Init+0x478>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a7e      	ldr	r2, [pc, #504]	; (8003984 <HAL_DMA_Init+0x634>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d01c      	beq.n	80037c8 <HAL_DMA_Init+0x478>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a7d      	ldr	r2, [pc, #500]	; (8003988 <HAL_DMA_Init+0x638>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d017      	beq.n	80037c8 <HAL_DMA_Init+0x478>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a7b      	ldr	r2, [pc, #492]	; (800398c <HAL_DMA_Init+0x63c>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d012      	beq.n	80037c8 <HAL_DMA_Init+0x478>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a7a      	ldr	r2, [pc, #488]	; (8003990 <HAL_DMA_Init+0x640>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d00d      	beq.n	80037c8 <HAL_DMA_Init+0x478>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a78      	ldr	r2, [pc, #480]	; (8003994 <HAL_DMA_Init+0x644>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d008      	beq.n	80037c8 <HAL_DMA_Init+0x478>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a77      	ldr	r2, [pc, #476]	; (8003998 <HAL_DMA_Init+0x648>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d003      	beq.n	80037c8 <HAL_DMA_Init+0x478>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a75      	ldr	r2, [pc, #468]	; (800399c <HAL_DMA_Init+0x64c>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2202      	movs	r2, #2
 80037d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	4b6e      	ldr	r3, [pc, #440]	; (80039a0 <HAL_DMA_Init+0x650>)
 80037e6:	4013      	ands	r3, r2
 80037e8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	2b40      	cmp	r3, #64	; 0x40
 80037f0:	d008      	beq.n	8003804 <HAL_DMA_Init+0x4b4>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	2b80      	cmp	r3, #128	; 0x80
 80037f8:	d102      	bne.n	8003800 <HAL_DMA_Init+0x4b0>
 80037fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80037fe:	e002      	b.n	8003806 <HAL_DMA_Init+0x4b6>
 8003800:	2300      	movs	r3, #0
 8003802:	e000      	b.n	8003806 <HAL_DMA_Init+0x4b6>
 8003804:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	68d2      	ldr	r2, [r2, #12]
 800380a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800380c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003814:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800381c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003824:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800382c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003834:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	4313      	orrs	r3, r2
 800383a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	461a      	mov	r2, r3
 800384a:	4b56      	ldr	r3, [pc, #344]	; (80039a4 <HAL_DMA_Init+0x654>)
 800384c:	4413      	add	r3, r2
 800384e:	4a56      	ldr	r2, [pc, #344]	; (80039a8 <HAL_DMA_Init+0x658>)
 8003850:	fba2 2303 	umull	r2, r3, r2, r3
 8003854:	091b      	lsrs	r3, r3, #4
 8003856:	009a      	lsls	r2, r3, #2
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f001 fcb7 	bl	80051d0 <DMA_CalcBaseAndBitshift>
 8003862:	4603      	mov	r3, r0
 8003864:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386a:	f003 031f 	and.w	r3, r3, #31
 800386e:	2201      	movs	r2, #1
 8003870:	409a      	lsls	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	605a      	str	r2, [r3, #4]
 8003876:	e008      	b.n	800388a <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2240      	movs	r2, #64	; 0x40
 800387c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2203      	movs	r2, #3
 8003882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e0ee      	b.n	8003a68 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a47      	ldr	r2, [pc, #284]	; (80039ac <HAL_DMA_Init+0x65c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d072      	beq.n	800397a <HAL_DMA_Init+0x62a>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a45      	ldr	r2, [pc, #276]	; (80039b0 <HAL_DMA_Init+0x660>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d06d      	beq.n	800397a <HAL_DMA_Init+0x62a>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a44      	ldr	r2, [pc, #272]	; (80039b4 <HAL_DMA_Init+0x664>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d068      	beq.n	800397a <HAL_DMA_Init+0x62a>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a42      	ldr	r2, [pc, #264]	; (80039b8 <HAL_DMA_Init+0x668>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d063      	beq.n	800397a <HAL_DMA_Init+0x62a>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a41      	ldr	r2, [pc, #260]	; (80039bc <HAL_DMA_Init+0x66c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d05e      	beq.n	800397a <HAL_DMA_Init+0x62a>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a3f      	ldr	r2, [pc, #252]	; (80039c0 <HAL_DMA_Init+0x670>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d059      	beq.n	800397a <HAL_DMA_Init+0x62a>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a3e      	ldr	r2, [pc, #248]	; (80039c4 <HAL_DMA_Init+0x674>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d054      	beq.n	800397a <HAL_DMA_Init+0x62a>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a3c      	ldr	r2, [pc, #240]	; (80039c8 <HAL_DMA_Init+0x678>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d04f      	beq.n	800397a <HAL_DMA_Init+0x62a>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a3b      	ldr	r2, [pc, #236]	; (80039cc <HAL_DMA_Init+0x67c>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d04a      	beq.n	800397a <HAL_DMA_Init+0x62a>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a39      	ldr	r2, [pc, #228]	; (80039d0 <HAL_DMA_Init+0x680>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d045      	beq.n	800397a <HAL_DMA_Init+0x62a>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a38      	ldr	r2, [pc, #224]	; (80039d4 <HAL_DMA_Init+0x684>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d040      	beq.n	800397a <HAL_DMA_Init+0x62a>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a36      	ldr	r2, [pc, #216]	; (80039d8 <HAL_DMA_Init+0x688>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d03b      	beq.n	800397a <HAL_DMA_Init+0x62a>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a35      	ldr	r2, [pc, #212]	; (80039dc <HAL_DMA_Init+0x68c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d036      	beq.n	800397a <HAL_DMA_Init+0x62a>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a33      	ldr	r2, [pc, #204]	; (80039e0 <HAL_DMA_Init+0x690>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d031      	beq.n	800397a <HAL_DMA_Init+0x62a>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a32      	ldr	r2, [pc, #200]	; (80039e4 <HAL_DMA_Init+0x694>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d02c      	beq.n	800397a <HAL_DMA_Init+0x62a>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a30      	ldr	r2, [pc, #192]	; (80039e8 <HAL_DMA_Init+0x698>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d027      	beq.n	800397a <HAL_DMA_Init+0x62a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a14      	ldr	r2, [pc, #80]	; (8003980 <HAL_DMA_Init+0x630>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d022      	beq.n	800397a <HAL_DMA_Init+0x62a>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a12      	ldr	r2, [pc, #72]	; (8003984 <HAL_DMA_Init+0x634>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d01d      	beq.n	800397a <HAL_DMA_Init+0x62a>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a11      	ldr	r2, [pc, #68]	; (8003988 <HAL_DMA_Init+0x638>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d018      	beq.n	800397a <HAL_DMA_Init+0x62a>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a0f      	ldr	r2, [pc, #60]	; (800398c <HAL_DMA_Init+0x63c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d013      	beq.n	800397a <HAL_DMA_Init+0x62a>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a0e      	ldr	r2, [pc, #56]	; (8003990 <HAL_DMA_Init+0x640>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d00e      	beq.n	800397a <HAL_DMA_Init+0x62a>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a0c      	ldr	r2, [pc, #48]	; (8003994 <HAL_DMA_Init+0x644>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d009      	beq.n	800397a <HAL_DMA_Init+0x62a>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a0b      	ldr	r2, [pc, #44]	; (8003998 <HAL_DMA_Init+0x648>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d004      	beq.n	800397a <HAL_DMA_Init+0x62a>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a09      	ldr	r2, [pc, #36]	; (800399c <HAL_DMA_Init+0x64c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d138      	bne.n	80039ec <HAL_DMA_Init+0x69c>
 800397a:	2301      	movs	r3, #1
 800397c:	e037      	b.n	80039ee <HAL_DMA_Init+0x69e>
 800397e:	bf00      	nop
 8003980:	58025408 	.word	0x58025408
 8003984:	5802541c 	.word	0x5802541c
 8003988:	58025430 	.word	0x58025430
 800398c:	58025444 	.word	0x58025444
 8003990:	58025458 	.word	0x58025458
 8003994:	5802546c 	.word	0x5802546c
 8003998:	58025480 	.word	0x58025480
 800399c:	58025494 	.word	0x58025494
 80039a0:	fffe000f 	.word	0xfffe000f
 80039a4:	a7fdabf8 	.word	0xa7fdabf8
 80039a8:	cccccccd 	.word	0xcccccccd
 80039ac:	40020010 	.word	0x40020010
 80039b0:	40020028 	.word	0x40020028
 80039b4:	40020040 	.word	0x40020040
 80039b8:	40020058 	.word	0x40020058
 80039bc:	40020070 	.word	0x40020070
 80039c0:	40020088 	.word	0x40020088
 80039c4:	400200a0 	.word	0x400200a0
 80039c8:	400200b8 	.word	0x400200b8
 80039cc:	40020410 	.word	0x40020410
 80039d0:	40020428 	.word	0x40020428
 80039d4:	40020440 	.word	0x40020440
 80039d8:	40020458 	.word	0x40020458
 80039dc:	40020470 	.word	0x40020470
 80039e0:	40020488 	.word	0x40020488
 80039e4:	400204a0 	.word	0x400204a0
 80039e8:	400204b8 	.word	0x400204b8
 80039ec:	2300      	movs	r3, #0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d032      	beq.n	8003a58 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f001 fd1a 	bl	800542c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	2b80      	cmp	r3, #128	; 0x80
 80039fe:	d102      	bne.n	8003a06 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003a1a:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d010      	beq.n	8003a46 <HAL_DMA_Init+0x6f6>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d80c      	bhi.n	8003a46 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f001 fd97 	bl	8005560 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003a42:	605a      	str	r2, [r3, #4]
 8003a44:	e008      	b.n	8003a58 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3718      	adds	r7, #24
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
 8003a7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e226      	b.n	8003eda <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d101      	bne.n	8003a9a <HAL_DMA_Start_IT+0x2a>
 8003a96:	2302      	movs	r3, #2
 8003a98:	e21f      	b.n	8003eda <HAL_DMA_Start_IT+0x46a>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	f040 820a 	bne.w	8003ec4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a68      	ldr	r2, [pc, #416]	; (8003c64 <HAL_DMA_Start_IT+0x1f4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d04a      	beq.n	8003b5e <HAL_DMA_Start_IT+0xee>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a66      	ldr	r2, [pc, #408]	; (8003c68 <HAL_DMA_Start_IT+0x1f8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d045      	beq.n	8003b5e <HAL_DMA_Start_IT+0xee>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a65      	ldr	r2, [pc, #404]	; (8003c6c <HAL_DMA_Start_IT+0x1fc>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d040      	beq.n	8003b5e <HAL_DMA_Start_IT+0xee>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a63      	ldr	r2, [pc, #396]	; (8003c70 <HAL_DMA_Start_IT+0x200>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d03b      	beq.n	8003b5e <HAL_DMA_Start_IT+0xee>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a62      	ldr	r2, [pc, #392]	; (8003c74 <HAL_DMA_Start_IT+0x204>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d036      	beq.n	8003b5e <HAL_DMA_Start_IT+0xee>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a60      	ldr	r2, [pc, #384]	; (8003c78 <HAL_DMA_Start_IT+0x208>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d031      	beq.n	8003b5e <HAL_DMA_Start_IT+0xee>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a5f      	ldr	r2, [pc, #380]	; (8003c7c <HAL_DMA_Start_IT+0x20c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d02c      	beq.n	8003b5e <HAL_DMA_Start_IT+0xee>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a5d      	ldr	r2, [pc, #372]	; (8003c80 <HAL_DMA_Start_IT+0x210>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d027      	beq.n	8003b5e <HAL_DMA_Start_IT+0xee>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a5c      	ldr	r2, [pc, #368]	; (8003c84 <HAL_DMA_Start_IT+0x214>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d022      	beq.n	8003b5e <HAL_DMA_Start_IT+0xee>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a5a      	ldr	r2, [pc, #360]	; (8003c88 <HAL_DMA_Start_IT+0x218>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d01d      	beq.n	8003b5e <HAL_DMA_Start_IT+0xee>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a59      	ldr	r2, [pc, #356]	; (8003c8c <HAL_DMA_Start_IT+0x21c>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d018      	beq.n	8003b5e <HAL_DMA_Start_IT+0xee>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a57      	ldr	r2, [pc, #348]	; (8003c90 <HAL_DMA_Start_IT+0x220>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d013      	beq.n	8003b5e <HAL_DMA_Start_IT+0xee>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a56      	ldr	r2, [pc, #344]	; (8003c94 <HAL_DMA_Start_IT+0x224>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d00e      	beq.n	8003b5e <HAL_DMA_Start_IT+0xee>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a54      	ldr	r2, [pc, #336]	; (8003c98 <HAL_DMA_Start_IT+0x228>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d009      	beq.n	8003b5e <HAL_DMA_Start_IT+0xee>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a53      	ldr	r2, [pc, #332]	; (8003c9c <HAL_DMA_Start_IT+0x22c>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d004      	beq.n	8003b5e <HAL_DMA_Start_IT+0xee>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a51      	ldr	r2, [pc, #324]	; (8003ca0 <HAL_DMA_Start_IT+0x230>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d108      	bne.n	8003b70 <HAL_DMA_Start_IT+0x100>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0201 	bic.w	r2, r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	e007      	b.n	8003b80 <HAL_DMA_Start_IT+0x110>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0201 	bic.w	r2, r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	68b9      	ldr	r1, [r7, #8]
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f001 f93e 	bl	8004e08 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a34      	ldr	r2, [pc, #208]	; (8003c64 <HAL_DMA_Start_IT+0x1f4>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d04a      	beq.n	8003c2c <HAL_DMA_Start_IT+0x1bc>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a33      	ldr	r2, [pc, #204]	; (8003c68 <HAL_DMA_Start_IT+0x1f8>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d045      	beq.n	8003c2c <HAL_DMA_Start_IT+0x1bc>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a31      	ldr	r2, [pc, #196]	; (8003c6c <HAL_DMA_Start_IT+0x1fc>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d040      	beq.n	8003c2c <HAL_DMA_Start_IT+0x1bc>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a30      	ldr	r2, [pc, #192]	; (8003c70 <HAL_DMA_Start_IT+0x200>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d03b      	beq.n	8003c2c <HAL_DMA_Start_IT+0x1bc>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a2e      	ldr	r2, [pc, #184]	; (8003c74 <HAL_DMA_Start_IT+0x204>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d036      	beq.n	8003c2c <HAL_DMA_Start_IT+0x1bc>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a2d      	ldr	r2, [pc, #180]	; (8003c78 <HAL_DMA_Start_IT+0x208>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d031      	beq.n	8003c2c <HAL_DMA_Start_IT+0x1bc>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a2b      	ldr	r2, [pc, #172]	; (8003c7c <HAL_DMA_Start_IT+0x20c>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d02c      	beq.n	8003c2c <HAL_DMA_Start_IT+0x1bc>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a2a      	ldr	r2, [pc, #168]	; (8003c80 <HAL_DMA_Start_IT+0x210>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d027      	beq.n	8003c2c <HAL_DMA_Start_IT+0x1bc>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a28      	ldr	r2, [pc, #160]	; (8003c84 <HAL_DMA_Start_IT+0x214>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d022      	beq.n	8003c2c <HAL_DMA_Start_IT+0x1bc>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a27      	ldr	r2, [pc, #156]	; (8003c88 <HAL_DMA_Start_IT+0x218>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d01d      	beq.n	8003c2c <HAL_DMA_Start_IT+0x1bc>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a25      	ldr	r2, [pc, #148]	; (8003c8c <HAL_DMA_Start_IT+0x21c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d018      	beq.n	8003c2c <HAL_DMA_Start_IT+0x1bc>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a24      	ldr	r2, [pc, #144]	; (8003c90 <HAL_DMA_Start_IT+0x220>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d013      	beq.n	8003c2c <HAL_DMA_Start_IT+0x1bc>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a22      	ldr	r2, [pc, #136]	; (8003c94 <HAL_DMA_Start_IT+0x224>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d00e      	beq.n	8003c2c <HAL_DMA_Start_IT+0x1bc>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a21      	ldr	r2, [pc, #132]	; (8003c98 <HAL_DMA_Start_IT+0x228>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d009      	beq.n	8003c2c <HAL_DMA_Start_IT+0x1bc>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a1f      	ldr	r2, [pc, #124]	; (8003c9c <HAL_DMA_Start_IT+0x22c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d004      	beq.n	8003c2c <HAL_DMA_Start_IT+0x1bc>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a1e      	ldr	r2, [pc, #120]	; (8003ca0 <HAL_DMA_Start_IT+0x230>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d101      	bne.n	8003c30 <HAL_DMA_Start_IT+0x1c0>
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e000      	b.n	8003c32 <HAL_DMA_Start_IT+0x1c2>
 8003c30:	2300      	movs	r3, #0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d036      	beq.n	8003ca4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f023 021e 	bic.w	r2, r3, #30
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f042 0216 	orr.w	r2, r2, #22
 8003c48:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d03e      	beq.n	8003cd0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f042 0208 	orr.w	r2, r2, #8
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	e035      	b.n	8003cd0 <HAL_DMA_Start_IT+0x260>
 8003c64:	40020010 	.word	0x40020010
 8003c68:	40020028 	.word	0x40020028
 8003c6c:	40020040 	.word	0x40020040
 8003c70:	40020058 	.word	0x40020058
 8003c74:	40020070 	.word	0x40020070
 8003c78:	40020088 	.word	0x40020088
 8003c7c:	400200a0 	.word	0x400200a0
 8003c80:	400200b8 	.word	0x400200b8
 8003c84:	40020410 	.word	0x40020410
 8003c88:	40020428 	.word	0x40020428
 8003c8c:	40020440 	.word	0x40020440
 8003c90:	40020458 	.word	0x40020458
 8003c94:	40020470 	.word	0x40020470
 8003c98:	40020488 	.word	0x40020488
 8003c9c:	400204a0 	.word	0x400204a0
 8003ca0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f023 020e 	bic.w	r2, r3, #14
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 020a 	orr.w	r2, r2, #10
 8003cb6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d007      	beq.n	8003cd0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0204 	orr.w	r2, r2, #4
 8003cce:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a83      	ldr	r2, [pc, #524]	; (8003ee4 <HAL_DMA_Start_IT+0x474>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d072      	beq.n	8003dc0 <HAL_DMA_Start_IT+0x350>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a82      	ldr	r2, [pc, #520]	; (8003ee8 <HAL_DMA_Start_IT+0x478>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d06d      	beq.n	8003dc0 <HAL_DMA_Start_IT+0x350>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a80      	ldr	r2, [pc, #512]	; (8003eec <HAL_DMA_Start_IT+0x47c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d068      	beq.n	8003dc0 <HAL_DMA_Start_IT+0x350>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a7f      	ldr	r2, [pc, #508]	; (8003ef0 <HAL_DMA_Start_IT+0x480>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d063      	beq.n	8003dc0 <HAL_DMA_Start_IT+0x350>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a7d      	ldr	r2, [pc, #500]	; (8003ef4 <HAL_DMA_Start_IT+0x484>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d05e      	beq.n	8003dc0 <HAL_DMA_Start_IT+0x350>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a7c      	ldr	r2, [pc, #496]	; (8003ef8 <HAL_DMA_Start_IT+0x488>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d059      	beq.n	8003dc0 <HAL_DMA_Start_IT+0x350>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a7a      	ldr	r2, [pc, #488]	; (8003efc <HAL_DMA_Start_IT+0x48c>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d054      	beq.n	8003dc0 <HAL_DMA_Start_IT+0x350>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a79      	ldr	r2, [pc, #484]	; (8003f00 <HAL_DMA_Start_IT+0x490>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d04f      	beq.n	8003dc0 <HAL_DMA_Start_IT+0x350>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a77      	ldr	r2, [pc, #476]	; (8003f04 <HAL_DMA_Start_IT+0x494>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d04a      	beq.n	8003dc0 <HAL_DMA_Start_IT+0x350>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a76      	ldr	r2, [pc, #472]	; (8003f08 <HAL_DMA_Start_IT+0x498>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d045      	beq.n	8003dc0 <HAL_DMA_Start_IT+0x350>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a74      	ldr	r2, [pc, #464]	; (8003f0c <HAL_DMA_Start_IT+0x49c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d040      	beq.n	8003dc0 <HAL_DMA_Start_IT+0x350>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a73      	ldr	r2, [pc, #460]	; (8003f10 <HAL_DMA_Start_IT+0x4a0>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d03b      	beq.n	8003dc0 <HAL_DMA_Start_IT+0x350>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a71      	ldr	r2, [pc, #452]	; (8003f14 <HAL_DMA_Start_IT+0x4a4>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d036      	beq.n	8003dc0 <HAL_DMA_Start_IT+0x350>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a70      	ldr	r2, [pc, #448]	; (8003f18 <HAL_DMA_Start_IT+0x4a8>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d031      	beq.n	8003dc0 <HAL_DMA_Start_IT+0x350>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a6e      	ldr	r2, [pc, #440]	; (8003f1c <HAL_DMA_Start_IT+0x4ac>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d02c      	beq.n	8003dc0 <HAL_DMA_Start_IT+0x350>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a6d      	ldr	r2, [pc, #436]	; (8003f20 <HAL_DMA_Start_IT+0x4b0>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d027      	beq.n	8003dc0 <HAL_DMA_Start_IT+0x350>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a6b      	ldr	r2, [pc, #428]	; (8003f24 <HAL_DMA_Start_IT+0x4b4>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d022      	beq.n	8003dc0 <HAL_DMA_Start_IT+0x350>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a6a      	ldr	r2, [pc, #424]	; (8003f28 <HAL_DMA_Start_IT+0x4b8>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d01d      	beq.n	8003dc0 <HAL_DMA_Start_IT+0x350>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a68      	ldr	r2, [pc, #416]	; (8003f2c <HAL_DMA_Start_IT+0x4bc>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d018      	beq.n	8003dc0 <HAL_DMA_Start_IT+0x350>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a67      	ldr	r2, [pc, #412]	; (8003f30 <HAL_DMA_Start_IT+0x4c0>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d013      	beq.n	8003dc0 <HAL_DMA_Start_IT+0x350>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a65      	ldr	r2, [pc, #404]	; (8003f34 <HAL_DMA_Start_IT+0x4c4>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d00e      	beq.n	8003dc0 <HAL_DMA_Start_IT+0x350>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a64      	ldr	r2, [pc, #400]	; (8003f38 <HAL_DMA_Start_IT+0x4c8>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d009      	beq.n	8003dc0 <HAL_DMA_Start_IT+0x350>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a62      	ldr	r2, [pc, #392]	; (8003f3c <HAL_DMA_Start_IT+0x4cc>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d004      	beq.n	8003dc0 <HAL_DMA_Start_IT+0x350>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a61      	ldr	r2, [pc, #388]	; (8003f40 <HAL_DMA_Start_IT+0x4d0>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d101      	bne.n	8003dc4 <HAL_DMA_Start_IT+0x354>
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e000      	b.n	8003dc6 <HAL_DMA_Start_IT+0x356>
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d01a      	beq.n	8003e00 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d007      	beq.n	8003de8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003de6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d007      	beq.n	8003e00 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dfe:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a37      	ldr	r2, [pc, #220]	; (8003ee4 <HAL_DMA_Start_IT+0x474>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d04a      	beq.n	8003ea0 <HAL_DMA_Start_IT+0x430>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a36      	ldr	r2, [pc, #216]	; (8003ee8 <HAL_DMA_Start_IT+0x478>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d045      	beq.n	8003ea0 <HAL_DMA_Start_IT+0x430>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a34      	ldr	r2, [pc, #208]	; (8003eec <HAL_DMA_Start_IT+0x47c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d040      	beq.n	8003ea0 <HAL_DMA_Start_IT+0x430>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a33      	ldr	r2, [pc, #204]	; (8003ef0 <HAL_DMA_Start_IT+0x480>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d03b      	beq.n	8003ea0 <HAL_DMA_Start_IT+0x430>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a31      	ldr	r2, [pc, #196]	; (8003ef4 <HAL_DMA_Start_IT+0x484>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d036      	beq.n	8003ea0 <HAL_DMA_Start_IT+0x430>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a30      	ldr	r2, [pc, #192]	; (8003ef8 <HAL_DMA_Start_IT+0x488>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d031      	beq.n	8003ea0 <HAL_DMA_Start_IT+0x430>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a2e      	ldr	r2, [pc, #184]	; (8003efc <HAL_DMA_Start_IT+0x48c>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d02c      	beq.n	8003ea0 <HAL_DMA_Start_IT+0x430>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a2d      	ldr	r2, [pc, #180]	; (8003f00 <HAL_DMA_Start_IT+0x490>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d027      	beq.n	8003ea0 <HAL_DMA_Start_IT+0x430>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a2b      	ldr	r2, [pc, #172]	; (8003f04 <HAL_DMA_Start_IT+0x494>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d022      	beq.n	8003ea0 <HAL_DMA_Start_IT+0x430>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a2a      	ldr	r2, [pc, #168]	; (8003f08 <HAL_DMA_Start_IT+0x498>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d01d      	beq.n	8003ea0 <HAL_DMA_Start_IT+0x430>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a28      	ldr	r2, [pc, #160]	; (8003f0c <HAL_DMA_Start_IT+0x49c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d018      	beq.n	8003ea0 <HAL_DMA_Start_IT+0x430>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a27      	ldr	r2, [pc, #156]	; (8003f10 <HAL_DMA_Start_IT+0x4a0>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d013      	beq.n	8003ea0 <HAL_DMA_Start_IT+0x430>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a25      	ldr	r2, [pc, #148]	; (8003f14 <HAL_DMA_Start_IT+0x4a4>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d00e      	beq.n	8003ea0 <HAL_DMA_Start_IT+0x430>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a24      	ldr	r2, [pc, #144]	; (8003f18 <HAL_DMA_Start_IT+0x4a8>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d009      	beq.n	8003ea0 <HAL_DMA_Start_IT+0x430>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a22      	ldr	r2, [pc, #136]	; (8003f1c <HAL_DMA_Start_IT+0x4ac>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d004      	beq.n	8003ea0 <HAL_DMA_Start_IT+0x430>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a21      	ldr	r2, [pc, #132]	; (8003f20 <HAL_DMA_Start_IT+0x4b0>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d108      	bne.n	8003eb2 <HAL_DMA_Start_IT+0x442>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0201 	orr.w	r2, r2, #1
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	e012      	b.n	8003ed8 <HAL_DMA_Start_IT+0x468>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f042 0201 	orr.w	r2, r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]
 8003ec2:	e009      	b.n	8003ed8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ed2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3718      	adds	r7, #24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	40020010 	.word	0x40020010
 8003ee8:	40020028 	.word	0x40020028
 8003eec:	40020040 	.word	0x40020040
 8003ef0:	40020058 	.word	0x40020058
 8003ef4:	40020070 	.word	0x40020070
 8003ef8:	40020088 	.word	0x40020088
 8003efc:	400200a0 	.word	0x400200a0
 8003f00:	400200b8 	.word	0x400200b8
 8003f04:	40020410 	.word	0x40020410
 8003f08:	40020428 	.word	0x40020428
 8003f0c:	40020440 	.word	0x40020440
 8003f10:	40020458 	.word	0x40020458
 8003f14:	40020470 	.word	0x40020470
 8003f18:	40020488 	.word	0x40020488
 8003f1c:	400204a0 	.word	0x400204a0
 8003f20:	400204b8 	.word	0x400204b8
 8003f24:	58025408 	.word	0x58025408
 8003f28:	5802541c 	.word	0x5802541c
 8003f2c:	58025430 	.word	0x58025430
 8003f30:	58025444 	.word	0x58025444
 8003f34:	58025458 	.word	0x58025458
 8003f38:	5802546c 	.word	0x5802546c
 8003f3c:	58025480 	.word	0x58025480
 8003f40:	58025494 	.word	0x58025494

08003f44 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b08a      	sub	sp, #40	; 0x28
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f50:	4b67      	ldr	r3, [pc, #412]	; (80040f0 <HAL_DMA_IRQHandler+0x1ac>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a67      	ldr	r2, [pc, #412]	; (80040f4 <HAL_DMA_IRQHandler+0x1b0>)
 8003f56:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5a:	0a9b      	lsrs	r3, r3, #10
 8003f5c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f62:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f68:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a5f      	ldr	r2, [pc, #380]	; (80040f8 <HAL_DMA_IRQHandler+0x1b4>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d04a      	beq.n	8004016 <HAL_DMA_IRQHandler+0xd2>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a5d      	ldr	r2, [pc, #372]	; (80040fc <HAL_DMA_IRQHandler+0x1b8>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d045      	beq.n	8004016 <HAL_DMA_IRQHandler+0xd2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a5c      	ldr	r2, [pc, #368]	; (8004100 <HAL_DMA_IRQHandler+0x1bc>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d040      	beq.n	8004016 <HAL_DMA_IRQHandler+0xd2>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a5a      	ldr	r2, [pc, #360]	; (8004104 <HAL_DMA_IRQHandler+0x1c0>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d03b      	beq.n	8004016 <HAL_DMA_IRQHandler+0xd2>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a59      	ldr	r2, [pc, #356]	; (8004108 <HAL_DMA_IRQHandler+0x1c4>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d036      	beq.n	8004016 <HAL_DMA_IRQHandler+0xd2>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a57      	ldr	r2, [pc, #348]	; (800410c <HAL_DMA_IRQHandler+0x1c8>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d031      	beq.n	8004016 <HAL_DMA_IRQHandler+0xd2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a56      	ldr	r2, [pc, #344]	; (8004110 <HAL_DMA_IRQHandler+0x1cc>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d02c      	beq.n	8004016 <HAL_DMA_IRQHandler+0xd2>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a54      	ldr	r2, [pc, #336]	; (8004114 <HAL_DMA_IRQHandler+0x1d0>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d027      	beq.n	8004016 <HAL_DMA_IRQHandler+0xd2>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a53      	ldr	r2, [pc, #332]	; (8004118 <HAL_DMA_IRQHandler+0x1d4>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d022      	beq.n	8004016 <HAL_DMA_IRQHandler+0xd2>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a51      	ldr	r2, [pc, #324]	; (800411c <HAL_DMA_IRQHandler+0x1d8>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d01d      	beq.n	8004016 <HAL_DMA_IRQHandler+0xd2>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a50      	ldr	r2, [pc, #320]	; (8004120 <HAL_DMA_IRQHandler+0x1dc>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d018      	beq.n	8004016 <HAL_DMA_IRQHandler+0xd2>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a4e      	ldr	r2, [pc, #312]	; (8004124 <HAL_DMA_IRQHandler+0x1e0>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d013      	beq.n	8004016 <HAL_DMA_IRQHandler+0xd2>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a4d      	ldr	r2, [pc, #308]	; (8004128 <HAL_DMA_IRQHandler+0x1e4>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d00e      	beq.n	8004016 <HAL_DMA_IRQHandler+0xd2>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a4b      	ldr	r2, [pc, #300]	; (800412c <HAL_DMA_IRQHandler+0x1e8>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d009      	beq.n	8004016 <HAL_DMA_IRQHandler+0xd2>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a4a      	ldr	r2, [pc, #296]	; (8004130 <HAL_DMA_IRQHandler+0x1ec>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d004      	beq.n	8004016 <HAL_DMA_IRQHandler+0xd2>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a48      	ldr	r2, [pc, #288]	; (8004134 <HAL_DMA_IRQHandler+0x1f0>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d101      	bne.n	800401a <HAL_DMA_IRQHandler+0xd6>
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <HAL_DMA_IRQHandler+0xd8>
 800401a:	2300      	movs	r3, #0
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 842b 	beq.w	8004878 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004026:	f003 031f 	and.w	r3, r3, #31
 800402a:	2208      	movs	r2, #8
 800402c:	409a      	lsls	r2, r3
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	4013      	ands	r3, r2
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 80a2 	beq.w	800417c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a2e      	ldr	r2, [pc, #184]	; (80040f8 <HAL_DMA_IRQHandler+0x1b4>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d04a      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x194>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a2d      	ldr	r2, [pc, #180]	; (80040fc <HAL_DMA_IRQHandler+0x1b8>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d045      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x194>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a2b      	ldr	r2, [pc, #172]	; (8004100 <HAL_DMA_IRQHandler+0x1bc>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d040      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x194>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a2a      	ldr	r2, [pc, #168]	; (8004104 <HAL_DMA_IRQHandler+0x1c0>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d03b      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x194>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a28      	ldr	r2, [pc, #160]	; (8004108 <HAL_DMA_IRQHandler+0x1c4>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d036      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x194>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a27      	ldr	r2, [pc, #156]	; (800410c <HAL_DMA_IRQHandler+0x1c8>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d031      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x194>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a25      	ldr	r2, [pc, #148]	; (8004110 <HAL_DMA_IRQHandler+0x1cc>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d02c      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x194>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a24      	ldr	r2, [pc, #144]	; (8004114 <HAL_DMA_IRQHandler+0x1d0>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d027      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x194>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a22      	ldr	r2, [pc, #136]	; (8004118 <HAL_DMA_IRQHandler+0x1d4>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d022      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x194>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a21      	ldr	r2, [pc, #132]	; (800411c <HAL_DMA_IRQHandler+0x1d8>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d01d      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x194>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a1f      	ldr	r2, [pc, #124]	; (8004120 <HAL_DMA_IRQHandler+0x1dc>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d018      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x194>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a1e      	ldr	r2, [pc, #120]	; (8004124 <HAL_DMA_IRQHandler+0x1e0>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d013      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x194>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a1c      	ldr	r2, [pc, #112]	; (8004128 <HAL_DMA_IRQHandler+0x1e4>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d00e      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x194>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a1b      	ldr	r2, [pc, #108]	; (800412c <HAL_DMA_IRQHandler+0x1e8>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d009      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x194>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a19      	ldr	r2, [pc, #100]	; (8004130 <HAL_DMA_IRQHandler+0x1ec>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d004      	beq.n	80040d8 <HAL_DMA_IRQHandler+0x194>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a18      	ldr	r2, [pc, #96]	; (8004134 <HAL_DMA_IRQHandler+0x1f0>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d12f      	bne.n	8004138 <HAL_DMA_IRQHandler+0x1f4>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0304 	and.w	r3, r3, #4
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	bf14      	ite	ne
 80040e6:	2301      	movne	r3, #1
 80040e8:	2300      	moveq	r3, #0
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	e02e      	b.n	800414c <HAL_DMA_IRQHandler+0x208>
 80040ee:	bf00      	nop
 80040f0:	2400000c 	.word	0x2400000c
 80040f4:	1b4e81b5 	.word	0x1b4e81b5
 80040f8:	40020010 	.word	0x40020010
 80040fc:	40020028 	.word	0x40020028
 8004100:	40020040 	.word	0x40020040
 8004104:	40020058 	.word	0x40020058
 8004108:	40020070 	.word	0x40020070
 800410c:	40020088 	.word	0x40020088
 8004110:	400200a0 	.word	0x400200a0
 8004114:	400200b8 	.word	0x400200b8
 8004118:	40020410 	.word	0x40020410
 800411c:	40020428 	.word	0x40020428
 8004120:	40020440 	.word	0x40020440
 8004124:	40020458 	.word	0x40020458
 8004128:	40020470 	.word	0x40020470
 800412c:	40020488 	.word	0x40020488
 8004130:	400204a0 	.word	0x400204a0
 8004134:	400204b8 	.word	0x400204b8
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0308 	and.w	r3, r3, #8
 8004142:	2b00      	cmp	r3, #0
 8004144:	bf14      	ite	ne
 8004146:	2301      	movne	r3, #1
 8004148:	2300      	moveq	r3, #0
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b00      	cmp	r3, #0
 800414e:	d015      	beq.n	800417c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 0204 	bic.w	r2, r2, #4
 800415e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004164:	f003 031f 	and.w	r3, r3, #31
 8004168:	2208      	movs	r2, #8
 800416a:	409a      	lsls	r2, r3
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004174:	f043 0201 	orr.w	r2, r3, #1
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004180:	f003 031f 	and.w	r3, r3, #31
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	fa22 f303 	lsr.w	r3, r2, r3
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d06e      	beq.n	8004270 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a69      	ldr	r2, [pc, #420]	; (800433c <HAL_DMA_IRQHandler+0x3f8>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d04a      	beq.n	8004232 <HAL_DMA_IRQHandler+0x2ee>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a67      	ldr	r2, [pc, #412]	; (8004340 <HAL_DMA_IRQHandler+0x3fc>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d045      	beq.n	8004232 <HAL_DMA_IRQHandler+0x2ee>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a66      	ldr	r2, [pc, #408]	; (8004344 <HAL_DMA_IRQHandler+0x400>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d040      	beq.n	8004232 <HAL_DMA_IRQHandler+0x2ee>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a64      	ldr	r2, [pc, #400]	; (8004348 <HAL_DMA_IRQHandler+0x404>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d03b      	beq.n	8004232 <HAL_DMA_IRQHandler+0x2ee>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a63      	ldr	r2, [pc, #396]	; (800434c <HAL_DMA_IRQHandler+0x408>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d036      	beq.n	8004232 <HAL_DMA_IRQHandler+0x2ee>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a61      	ldr	r2, [pc, #388]	; (8004350 <HAL_DMA_IRQHandler+0x40c>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d031      	beq.n	8004232 <HAL_DMA_IRQHandler+0x2ee>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a60      	ldr	r2, [pc, #384]	; (8004354 <HAL_DMA_IRQHandler+0x410>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d02c      	beq.n	8004232 <HAL_DMA_IRQHandler+0x2ee>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a5e      	ldr	r2, [pc, #376]	; (8004358 <HAL_DMA_IRQHandler+0x414>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d027      	beq.n	8004232 <HAL_DMA_IRQHandler+0x2ee>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a5d      	ldr	r2, [pc, #372]	; (800435c <HAL_DMA_IRQHandler+0x418>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d022      	beq.n	8004232 <HAL_DMA_IRQHandler+0x2ee>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a5b      	ldr	r2, [pc, #364]	; (8004360 <HAL_DMA_IRQHandler+0x41c>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d01d      	beq.n	8004232 <HAL_DMA_IRQHandler+0x2ee>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a5a      	ldr	r2, [pc, #360]	; (8004364 <HAL_DMA_IRQHandler+0x420>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d018      	beq.n	8004232 <HAL_DMA_IRQHandler+0x2ee>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a58      	ldr	r2, [pc, #352]	; (8004368 <HAL_DMA_IRQHandler+0x424>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d013      	beq.n	8004232 <HAL_DMA_IRQHandler+0x2ee>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a57      	ldr	r2, [pc, #348]	; (800436c <HAL_DMA_IRQHandler+0x428>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d00e      	beq.n	8004232 <HAL_DMA_IRQHandler+0x2ee>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a55      	ldr	r2, [pc, #340]	; (8004370 <HAL_DMA_IRQHandler+0x42c>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d009      	beq.n	8004232 <HAL_DMA_IRQHandler+0x2ee>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a54      	ldr	r2, [pc, #336]	; (8004374 <HAL_DMA_IRQHandler+0x430>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d004      	beq.n	8004232 <HAL_DMA_IRQHandler+0x2ee>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a52      	ldr	r2, [pc, #328]	; (8004378 <HAL_DMA_IRQHandler+0x434>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d10a      	bne.n	8004248 <HAL_DMA_IRQHandler+0x304>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800423c:	2b00      	cmp	r3, #0
 800423e:	bf14      	ite	ne
 8004240:	2301      	movne	r3, #1
 8004242:	2300      	moveq	r3, #0
 8004244:	b2db      	uxtb	r3, r3
 8004246:	e003      	b.n	8004250 <HAL_DMA_IRQHandler+0x30c>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2300      	movs	r3, #0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00d      	beq.n	8004270 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004258:	f003 031f 	and.w	r3, r3, #31
 800425c:	2201      	movs	r2, #1
 800425e:	409a      	lsls	r2, r3
 8004260:	6a3b      	ldr	r3, [r7, #32]
 8004262:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004268:	f043 0202 	orr.w	r2, r3, #2
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004274:	f003 031f 	and.w	r3, r3, #31
 8004278:	2204      	movs	r2, #4
 800427a:	409a      	lsls	r2, r3
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	4013      	ands	r3, r2
 8004280:	2b00      	cmp	r3, #0
 8004282:	f000 808f 	beq.w	80043a4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a2c      	ldr	r2, [pc, #176]	; (800433c <HAL_DMA_IRQHandler+0x3f8>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d04a      	beq.n	8004326 <HAL_DMA_IRQHandler+0x3e2>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a2a      	ldr	r2, [pc, #168]	; (8004340 <HAL_DMA_IRQHandler+0x3fc>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d045      	beq.n	8004326 <HAL_DMA_IRQHandler+0x3e2>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a29      	ldr	r2, [pc, #164]	; (8004344 <HAL_DMA_IRQHandler+0x400>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d040      	beq.n	8004326 <HAL_DMA_IRQHandler+0x3e2>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a27      	ldr	r2, [pc, #156]	; (8004348 <HAL_DMA_IRQHandler+0x404>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d03b      	beq.n	8004326 <HAL_DMA_IRQHandler+0x3e2>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a26      	ldr	r2, [pc, #152]	; (800434c <HAL_DMA_IRQHandler+0x408>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d036      	beq.n	8004326 <HAL_DMA_IRQHandler+0x3e2>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a24      	ldr	r2, [pc, #144]	; (8004350 <HAL_DMA_IRQHandler+0x40c>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d031      	beq.n	8004326 <HAL_DMA_IRQHandler+0x3e2>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a23      	ldr	r2, [pc, #140]	; (8004354 <HAL_DMA_IRQHandler+0x410>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d02c      	beq.n	8004326 <HAL_DMA_IRQHandler+0x3e2>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a21      	ldr	r2, [pc, #132]	; (8004358 <HAL_DMA_IRQHandler+0x414>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d027      	beq.n	8004326 <HAL_DMA_IRQHandler+0x3e2>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a20      	ldr	r2, [pc, #128]	; (800435c <HAL_DMA_IRQHandler+0x418>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d022      	beq.n	8004326 <HAL_DMA_IRQHandler+0x3e2>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a1e      	ldr	r2, [pc, #120]	; (8004360 <HAL_DMA_IRQHandler+0x41c>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d01d      	beq.n	8004326 <HAL_DMA_IRQHandler+0x3e2>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a1d      	ldr	r2, [pc, #116]	; (8004364 <HAL_DMA_IRQHandler+0x420>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d018      	beq.n	8004326 <HAL_DMA_IRQHandler+0x3e2>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a1b      	ldr	r2, [pc, #108]	; (8004368 <HAL_DMA_IRQHandler+0x424>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d013      	beq.n	8004326 <HAL_DMA_IRQHandler+0x3e2>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a1a      	ldr	r2, [pc, #104]	; (800436c <HAL_DMA_IRQHandler+0x428>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d00e      	beq.n	8004326 <HAL_DMA_IRQHandler+0x3e2>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a18      	ldr	r2, [pc, #96]	; (8004370 <HAL_DMA_IRQHandler+0x42c>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d009      	beq.n	8004326 <HAL_DMA_IRQHandler+0x3e2>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a17      	ldr	r2, [pc, #92]	; (8004374 <HAL_DMA_IRQHandler+0x430>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d004      	beq.n	8004326 <HAL_DMA_IRQHandler+0x3e2>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a15      	ldr	r2, [pc, #84]	; (8004378 <HAL_DMA_IRQHandler+0x434>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d12a      	bne.n	800437c <HAL_DMA_IRQHandler+0x438>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	bf14      	ite	ne
 8004334:	2301      	movne	r3, #1
 8004336:	2300      	moveq	r3, #0
 8004338:	b2db      	uxtb	r3, r3
 800433a:	e023      	b.n	8004384 <HAL_DMA_IRQHandler+0x440>
 800433c:	40020010 	.word	0x40020010
 8004340:	40020028 	.word	0x40020028
 8004344:	40020040 	.word	0x40020040
 8004348:	40020058 	.word	0x40020058
 800434c:	40020070 	.word	0x40020070
 8004350:	40020088 	.word	0x40020088
 8004354:	400200a0 	.word	0x400200a0
 8004358:	400200b8 	.word	0x400200b8
 800435c:	40020410 	.word	0x40020410
 8004360:	40020428 	.word	0x40020428
 8004364:	40020440 	.word	0x40020440
 8004368:	40020458 	.word	0x40020458
 800436c:	40020470 	.word	0x40020470
 8004370:	40020488 	.word	0x40020488
 8004374:	400204a0 	.word	0x400204a0
 8004378:	400204b8 	.word	0x400204b8
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2300      	movs	r3, #0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00d      	beq.n	80043a4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800438c:	f003 031f 	and.w	r3, r3, #31
 8004390:	2204      	movs	r2, #4
 8004392:	409a      	lsls	r2, r3
 8004394:	6a3b      	ldr	r3, [r7, #32]
 8004396:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439c:	f043 0204 	orr.w	r2, r3, #4
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a8:	f003 031f 	and.w	r3, r3, #31
 80043ac:	2210      	movs	r2, #16
 80043ae:	409a      	lsls	r2, r3
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	4013      	ands	r3, r2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 80a6 	beq.w	8004506 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a85      	ldr	r2, [pc, #532]	; (80045d4 <HAL_DMA_IRQHandler+0x690>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d04a      	beq.n	800445a <HAL_DMA_IRQHandler+0x516>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a83      	ldr	r2, [pc, #524]	; (80045d8 <HAL_DMA_IRQHandler+0x694>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d045      	beq.n	800445a <HAL_DMA_IRQHandler+0x516>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a82      	ldr	r2, [pc, #520]	; (80045dc <HAL_DMA_IRQHandler+0x698>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d040      	beq.n	800445a <HAL_DMA_IRQHandler+0x516>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a80      	ldr	r2, [pc, #512]	; (80045e0 <HAL_DMA_IRQHandler+0x69c>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d03b      	beq.n	800445a <HAL_DMA_IRQHandler+0x516>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a7f      	ldr	r2, [pc, #508]	; (80045e4 <HAL_DMA_IRQHandler+0x6a0>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d036      	beq.n	800445a <HAL_DMA_IRQHandler+0x516>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a7d      	ldr	r2, [pc, #500]	; (80045e8 <HAL_DMA_IRQHandler+0x6a4>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d031      	beq.n	800445a <HAL_DMA_IRQHandler+0x516>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a7c      	ldr	r2, [pc, #496]	; (80045ec <HAL_DMA_IRQHandler+0x6a8>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d02c      	beq.n	800445a <HAL_DMA_IRQHandler+0x516>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a7a      	ldr	r2, [pc, #488]	; (80045f0 <HAL_DMA_IRQHandler+0x6ac>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d027      	beq.n	800445a <HAL_DMA_IRQHandler+0x516>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a79      	ldr	r2, [pc, #484]	; (80045f4 <HAL_DMA_IRQHandler+0x6b0>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d022      	beq.n	800445a <HAL_DMA_IRQHandler+0x516>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a77      	ldr	r2, [pc, #476]	; (80045f8 <HAL_DMA_IRQHandler+0x6b4>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d01d      	beq.n	800445a <HAL_DMA_IRQHandler+0x516>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a76      	ldr	r2, [pc, #472]	; (80045fc <HAL_DMA_IRQHandler+0x6b8>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d018      	beq.n	800445a <HAL_DMA_IRQHandler+0x516>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a74      	ldr	r2, [pc, #464]	; (8004600 <HAL_DMA_IRQHandler+0x6bc>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d013      	beq.n	800445a <HAL_DMA_IRQHandler+0x516>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a73      	ldr	r2, [pc, #460]	; (8004604 <HAL_DMA_IRQHandler+0x6c0>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d00e      	beq.n	800445a <HAL_DMA_IRQHandler+0x516>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a71      	ldr	r2, [pc, #452]	; (8004608 <HAL_DMA_IRQHandler+0x6c4>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d009      	beq.n	800445a <HAL_DMA_IRQHandler+0x516>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a70      	ldr	r2, [pc, #448]	; (800460c <HAL_DMA_IRQHandler+0x6c8>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d004      	beq.n	800445a <HAL_DMA_IRQHandler+0x516>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a6e      	ldr	r2, [pc, #440]	; (8004610 <HAL_DMA_IRQHandler+0x6cc>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d10a      	bne.n	8004470 <HAL_DMA_IRQHandler+0x52c>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0308 	and.w	r3, r3, #8
 8004464:	2b00      	cmp	r3, #0
 8004466:	bf14      	ite	ne
 8004468:	2301      	movne	r3, #1
 800446a:	2300      	moveq	r3, #0
 800446c:	b2db      	uxtb	r3, r3
 800446e:	e009      	b.n	8004484 <HAL_DMA_IRQHandler+0x540>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0304 	and.w	r3, r3, #4
 800447a:	2b00      	cmp	r3, #0
 800447c:	bf14      	ite	ne
 800447e:	2301      	movne	r3, #1
 8004480:	2300      	moveq	r3, #0
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b00      	cmp	r3, #0
 8004486:	d03e      	beq.n	8004506 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800448c:	f003 031f 	and.w	r3, r3, #31
 8004490:	2210      	movs	r2, #16
 8004492:	409a      	lsls	r2, r3
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d018      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d108      	bne.n	80044c6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d024      	beq.n	8004506 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	4798      	blx	r3
 80044c4:	e01f      	b.n	8004506 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d01b      	beq.n	8004506 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	4798      	blx	r3
 80044d6:	e016      	b.n	8004506 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d107      	bne.n	80044f6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 0208 	bic.w	r2, r2, #8
 80044f4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800450a:	f003 031f 	and.w	r3, r3, #31
 800450e:	2220      	movs	r2, #32
 8004510:	409a      	lsls	r2, r3
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	4013      	ands	r3, r2
 8004516:	2b00      	cmp	r3, #0
 8004518:	f000 8110 	beq.w	800473c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a2c      	ldr	r2, [pc, #176]	; (80045d4 <HAL_DMA_IRQHandler+0x690>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d04a      	beq.n	80045bc <HAL_DMA_IRQHandler+0x678>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a2b      	ldr	r2, [pc, #172]	; (80045d8 <HAL_DMA_IRQHandler+0x694>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d045      	beq.n	80045bc <HAL_DMA_IRQHandler+0x678>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a29      	ldr	r2, [pc, #164]	; (80045dc <HAL_DMA_IRQHandler+0x698>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d040      	beq.n	80045bc <HAL_DMA_IRQHandler+0x678>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a28      	ldr	r2, [pc, #160]	; (80045e0 <HAL_DMA_IRQHandler+0x69c>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d03b      	beq.n	80045bc <HAL_DMA_IRQHandler+0x678>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a26      	ldr	r2, [pc, #152]	; (80045e4 <HAL_DMA_IRQHandler+0x6a0>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d036      	beq.n	80045bc <HAL_DMA_IRQHandler+0x678>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a25      	ldr	r2, [pc, #148]	; (80045e8 <HAL_DMA_IRQHandler+0x6a4>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d031      	beq.n	80045bc <HAL_DMA_IRQHandler+0x678>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a23      	ldr	r2, [pc, #140]	; (80045ec <HAL_DMA_IRQHandler+0x6a8>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d02c      	beq.n	80045bc <HAL_DMA_IRQHandler+0x678>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a22      	ldr	r2, [pc, #136]	; (80045f0 <HAL_DMA_IRQHandler+0x6ac>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d027      	beq.n	80045bc <HAL_DMA_IRQHandler+0x678>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a20      	ldr	r2, [pc, #128]	; (80045f4 <HAL_DMA_IRQHandler+0x6b0>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d022      	beq.n	80045bc <HAL_DMA_IRQHandler+0x678>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a1f      	ldr	r2, [pc, #124]	; (80045f8 <HAL_DMA_IRQHandler+0x6b4>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d01d      	beq.n	80045bc <HAL_DMA_IRQHandler+0x678>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a1d      	ldr	r2, [pc, #116]	; (80045fc <HAL_DMA_IRQHandler+0x6b8>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d018      	beq.n	80045bc <HAL_DMA_IRQHandler+0x678>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a1c      	ldr	r2, [pc, #112]	; (8004600 <HAL_DMA_IRQHandler+0x6bc>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d013      	beq.n	80045bc <HAL_DMA_IRQHandler+0x678>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a1a      	ldr	r2, [pc, #104]	; (8004604 <HAL_DMA_IRQHandler+0x6c0>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d00e      	beq.n	80045bc <HAL_DMA_IRQHandler+0x678>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a19      	ldr	r2, [pc, #100]	; (8004608 <HAL_DMA_IRQHandler+0x6c4>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d009      	beq.n	80045bc <HAL_DMA_IRQHandler+0x678>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a17      	ldr	r2, [pc, #92]	; (800460c <HAL_DMA_IRQHandler+0x6c8>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d004      	beq.n	80045bc <HAL_DMA_IRQHandler+0x678>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a16      	ldr	r2, [pc, #88]	; (8004610 <HAL_DMA_IRQHandler+0x6cc>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d12b      	bne.n	8004614 <HAL_DMA_IRQHandler+0x6d0>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0310 	and.w	r3, r3, #16
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	bf14      	ite	ne
 80045ca:	2301      	movne	r3, #1
 80045cc:	2300      	moveq	r3, #0
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	e02a      	b.n	8004628 <HAL_DMA_IRQHandler+0x6e4>
 80045d2:	bf00      	nop
 80045d4:	40020010 	.word	0x40020010
 80045d8:	40020028 	.word	0x40020028
 80045dc:	40020040 	.word	0x40020040
 80045e0:	40020058 	.word	0x40020058
 80045e4:	40020070 	.word	0x40020070
 80045e8:	40020088 	.word	0x40020088
 80045ec:	400200a0 	.word	0x400200a0
 80045f0:	400200b8 	.word	0x400200b8
 80045f4:	40020410 	.word	0x40020410
 80045f8:	40020428 	.word	0x40020428
 80045fc:	40020440 	.word	0x40020440
 8004600:	40020458 	.word	0x40020458
 8004604:	40020470 	.word	0x40020470
 8004608:	40020488 	.word	0x40020488
 800460c:	400204a0 	.word	0x400204a0
 8004610:	400204b8 	.word	0x400204b8
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	bf14      	ite	ne
 8004622:	2301      	movne	r3, #1
 8004624:	2300      	moveq	r3, #0
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 8087 	beq.w	800473c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004632:	f003 031f 	and.w	r3, r3, #31
 8004636:	2220      	movs	r2, #32
 8004638:	409a      	lsls	r2, r3
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b04      	cmp	r3, #4
 8004648:	d139      	bne.n	80046be <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 0216 	bic.w	r2, r2, #22
 8004658:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	695a      	ldr	r2, [r3, #20]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004668:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	2b00      	cmp	r3, #0
 8004670:	d103      	bne.n	800467a <HAL_DMA_IRQHandler+0x736>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004676:	2b00      	cmp	r3, #0
 8004678:	d007      	beq.n	800468a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 0208 	bic.w	r2, r2, #8
 8004688:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800468e:	f003 031f 	and.w	r3, r3, #31
 8004692:	223f      	movs	r2, #63	; 0x3f
 8004694:	409a      	lsls	r2, r3
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f000 8382 	beq.w	8004db8 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	4798      	blx	r3
          }
          return;
 80046bc:	e37c      	b.n	8004db8 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d018      	beq.n	80046fe <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d108      	bne.n	80046ec <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d02c      	beq.n	800473c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	4798      	blx	r3
 80046ea:	e027      	b.n	800473c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d023      	beq.n	800473c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	4798      	blx	r3
 80046fc:	e01e      	b.n	800473c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10f      	bne.n	800472c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0210 	bic.w	r2, r2, #16
 800471a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004730:	2b00      	cmp	r3, #0
 8004732:	d003      	beq.n	800473c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 833e 	beq.w	8004dc2 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	f000 8088 	beq.w	8004864 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2204      	movs	r2, #4
 8004758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a8e      	ldr	r2, [pc, #568]	; (800499c <HAL_DMA_IRQHandler+0xa58>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d04a      	beq.n	80047fc <HAL_DMA_IRQHandler+0x8b8>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a8d      	ldr	r2, [pc, #564]	; (80049a0 <HAL_DMA_IRQHandler+0xa5c>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d045      	beq.n	80047fc <HAL_DMA_IRQHandler+0x8b8>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a8b      	ldr	r2, [pc, #556]	; (80049a4 <HAL_DMA_IRQHandler+0xa60>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d040      	beq.n	80047fc <HAL_DMA_IRQHandler+0x8b8>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a8a      	ldr	r2, [pc, #552]	; (80049a8 <HAL_DMA_IRQHandler+0xa64>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d03b      	beq.n	80047fc <HAL_DMA_IRQHandler+0x8b8>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a88      	ldr	r2, [pc, #544]	; (80049ac <HAL_DMA_IRQHandler+0xa68>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d036      	beq.n	80047fc <HAL_DMA_IRQHandler+0x8b8>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a87      	ldr	r2, [pc, #540]	; (80049b0 <HAL_DMA_IRQHandler+0xa6c>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d031      	beq.n	80047fc <HAL_DMA_IRQHandler+0x8b8>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a85      	ldr	r2, [pc, #532]	; (80049b4 <HAL_DMA_IRQHandler+0xa70>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d02c      	beq.n	80047fc <HAL_DMA_IRQHandler+0x8b8>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a84      	ldr	r2, [pc, #528]	; (80049b8 <HAL_DMA_IRQHandler+0xa74>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d027      	beq.n	80047fc <HAL_DMA_IRQHandler+0x8b8>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a82      	ldr	r2, [pc, #520]	; (80049bc <HAL_DMA_IRQHandler+0xa78>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d022      	beq.n	80047fc <HAL_DMA_IRQHandler+0x8b8>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a81      	ldr	r2, [pc, #516]	; (80049c0 <HAL_DMA_IRQHandler+0xa7c>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d01d      	beq.n	80047fc <HAL_DMA_IRQHandler+0x8b8>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a7f      	ldr	r2, [pc, #508]	; (80049c4 <HAL_DMA_IRQHandler+0xa80>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d018      	beq.n	80047fc <HAL_DMA_IRQHandler+0x8b8>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a7e      	ldr	r2, [pc, #504]	; (80049c8 <HAL_DMA_IRQHandler+0xa84>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d013      	beq.n	80047fc <HAL_DMA_IRQHandler+0x8b8>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a7c      	ldr	r2, [pc, #496]	; (80049cc <HAL_DMA_IRQHandler+0xa88>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d00e      	beq.n	80047fc <HAL_DMA_IRQHandler+0x8b8>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a7b      	ldr	r2, [pc, #492]	; (80049d0 <HAL_DMA_IRQHandler+0xa8c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d009      	beq.n	80047fc <HAL_DMA_IRQHandler+0x8b8>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a79      	ldr	r2, [pc, #484]	; (80049d4 <HAL_DMA_IRQHandler+0xa90>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d004      	beq.n	80047fc <HAL_DMA_IRQHandler+0x8b8>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a78      	ldr	r2, [pc, #480]	; (80049d8 <HAL_DMA_IRQHandler+0xa94>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d108      	bne.n	800480e <HAL_DMA_IRQHandler+0x8ca>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0201 	bic.w	r2, r2, #1
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	e007      	b.n	800481e <HAL_DMA_IRQHandler+0x8da>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0201 	bic.w	r2, r2, #1
 800481c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	3301      	adds	r3, #1
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004826:	429a      	cmp	r2, r3
 8004828:	d307      	bcc.n	800483a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1f2      	bne.n	800481e <HAL_DMA_IRQHandler+0x8da>
 8004838:	e000      	b.n	800483c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800483a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d004      	beq.n	800485c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2203      	movs	r2, #3
 8004856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800485a:	e003      	b.n	8004864 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004868:	2b00      	cmp	r3, #0
 800486a:	f000 82aa 	beq.w	8004dc2 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	4798      	blx	r3
 8004876:	e2a4      	b.n	8004dc2 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a57      	ldr	r2, [pc, #348]	; (80049dc <HAL_DMA_IRQHandler+0xa98>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d04a      	beq.n	8004918 <HAL_DMA_IRQHandler+0x9d4>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a56      	ldr	r2, [pc, #344]	; (80049e0 <HAL_DMA_IRQHandler+0xa9c>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d045      	beq.n	8004918 <HAL_DMA_IRQHandler+0x9d4>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a54      	ldr	r2, [pc, #336]	; (80049e4 <HAL_DMA_IRQHandler+0xaa0>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d040      	beq.n	8004918 <HAL_DMA_IRQHandler+0x9d4>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a53      	ldr	r2, [pc, #332]	; (80049e8 <HAL_DMA_IRQHandler+0xaa4>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d03b      	beq.n	8004918 <HAL_DMA_IRQHandler+0x9d4>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a51      	ldr	r2, [pc, #324]	; (80049ec <HAL_DMA_IRQHandler+0xaa8>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d036      	beq.n	8004918 <HAL_DMA_IRQHandler+0x9d4>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a50      	ldr	r2, [pc, #320]	; (80049f0 <HAL_DMA_IRQHandler+0xaac>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d031      	beq.n	8004918 <HAL_DMA_IRQHandler+0x9d4>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a4e      	ldr	r2, [pc, #312]	; (80049f4 <HAL_DMA_IRQHandler+0xab0>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d02c      	beq.n	8004918 <HAL_DMA_IRQHandler+0x9d4>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a4d      	ldr	r2, [pc, #308]	; (80049f8 <HAL_DMA_IRQHandler+0xab4>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d027      	beq.n	8004918 <HAL_DMA_IRQHandler+0x9d4>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a4b      	ldr	r2, [pc, #300]	; (80049fc <HAL_DMA_IRQHandler+0xab8>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d022      	beq.n	8004918 <HAL_DMA_IRQHandler+0x9d4>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a4a      	ldr	r2, [pc, #296]	; (8004a00 <HAL_DMA_IRQHandler+0xabc>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d01d      	beq.n	8004918 <HAL_DMA_IRQHandler+0x9d4>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a48      	ldr	r2, [pc, #288]	; (8004a04 <HAL_DMA_IRQHandler+0xac0>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d018      	beq.n	8004918 <HAL_DMA_IRQHandler+0x9d4>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a47      	ldr	r2, [pc, #284]	; (8004a08 <HAL_DMA_IRQHandler+0xac4>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d013      	beq.n	8004918 <HAL_DMA_IRQHandler+0x9d4>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a45      	ldr	r2, [pc, #276]	; (8004a0c <HAL_DMA_IRQHandler+0xac8>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d00e      	beq.n	8004918 <HAL_DMA_IRQHandler+0x9d4>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a44      	ldr	r2, [pc, #272]	; (8004a10 <HAL_DMA_IRQHandler+0xacc>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d009      	beq.n	8004918 <HAL_DMA_IRQHandler+0x9d4>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a42      	ldr	r2, [pc, #264]	; (8004a14 <HAL_DMA_IRQHandler+0xad0>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d004      	beq.n	8004918 <HAL_DMA_IRQHandler+0x9d4>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a41      	ldr	r2, [pc, #260]	; (8004a18 <HAL_DMA_IRQHandler+0xad4>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d101      	bne.n	800491c <HAL_DMA_IRQHandler+0x9d8>
 8004918:	2301      	movs	r3, #1
 800491a:	e000      	b.n	800491e <HAL_DMA_IRQHandler+0x9da>
 800491c:	2300      	movs	r3, #0
 800491e:	2b00      	cmp	r3, #0
 8004920:	f000 824f 	beq.w	8004dc2 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004930:	f003 031f 	and.w	r3, r3, #31
 8004934:	2204      	movs	r2, #4
 8004936:	409a      	lsls	r2, r3
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	4013      	ands	r3, r2
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 80dd 	beq.w	8004afc <HAL_DMA_IRQHandler+0xbb8>
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 80d7 	beq.w	8004afc <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004952:	f003 031f 	and.w	r3, r3, #31
 8004956:	2204      	movs	r2, #4
 8004958:	409a      	lsls	r2, r3
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d059      	beq.n	8004a1c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d109      	bne.n	8004986 <HAL_DMA_IRQHandler+0xa42>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004976:	2b00      	cmp	r3, #0
 8004978:	f000 8220 	beq.w	8004dbc <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004984:	e21a      	b.n	8004dbc <HAL_DMA_IRQHandler+0xe78>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498a:	2b00      	cmp	r3, #0
 800498c:	f000 8216 	beq.w	8004dbc <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004998:	e210      	b.n	8004dbc <HAL_DMA_IRQHandler+0xe78>
 800499a:	bf00      	nop
 800499c:	40020010 	.word	0x40020010
 80049a0:	40020028 	.word	0x40020028
 80049a4:	40020040 	.word	0x40020040
 80049a8:	40020058 	.word	0x40020058
 80049ac:	40020070 	.word	0x40020070
 80049b0:	40020088 	.word	0x40020088
 80049b4:	400200a0 	.word	0x400200a0
 80049b8:	400200b8 	.word	0x400200b8
 80049bc:	40020410 	.word	0x40020410
 80049c0:	40020428 	.word	0x40020428
 80049c4:	40020440 	.word	0x40020440
 80049c8:	40020458 	.word	0x40020458
 80049cc:	40020470 	.word	0x40020470
 80049d0:	40020488 	.word	0x40020488
 80049d4:	400204a0 	.word	0x400204a0
 80049d8:	400204b8 	.word	0x400204b8
 80049dc:	48022c08 	.word	0x48022c08
 80049e0:	48022c1c 	.word	0x48022c1c
 80049e4:	48022c30 	.word	0x48022c30
 80049e8:	48022c44 	.word	0x48022c44
 80049ec:	48022c58 	.word	0x48022c58
 80049f0:	48022c6c 	.word	0x48022c6c
 80049f4:	48022c80 	.word	0x48022c80
 80049f8:	48022c94 	.word	0x48022c94
 80049fc:	58025408 	.word	0x58025408
 8004a00:	5802541c 	.word	0x5802541c
 8004a04:	58025430 	.word	0x58025430
 8004a08:	58025444 	.word	0x58025444
 8004a0c:	58025458 	.word	0x58025458
 8004a10:	5802546c 	.word	0x5802546c
 8004a14:	58025480 	.word	0x58025480
 8004a18:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	f003 0320 	and.w	r3, r3, #32
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d160      	bne.n	8004ae8 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a8c      	ldr	r2, [pc, #560]	; (8004c5c <HAL_DMA_IRQHandler+0xd18>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d04a      	beq.n	8004ac6 <HAL_DMA_IRQHandler+0xb82>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a8a      	ldr	r2, [pc, #552]	; (8004c60 <HAL_DMA_IRQHandler+0xd1c>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d045      	beq.n	8004ac6 <HAL_DMA_IRQHandler+0xb82>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a89      	ldr	r2, [pc, #548]	; (8004c64 <HAL_DMA_IRQHandler+0xd20>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d040      	beq.n	8004ac6 <HAL_DMA_IRQHandler+0xb82>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a87      	ldr	r2, [pc, #540]	; (8004c68 <HAL_DMA_IRQHandler+0xd24>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d03b      	beq.n	8004ac6 <HAL_DMA_IRQHandler+0xb82>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a86      	ldr	r2, [pc, #536]	; (8004c6c <HAL_DMA_IRQHandler+0xd28>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d036      	beq.n	8004ac6 <HAL_DMA_IRQHandler+0xb82>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a84      	ldr	r2, [pc, #528]	; (8004c70 <HAL_DMA_IRQHandler+0xd2c>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d031      	beq.n	8004ac6 <HAL_DMA_IRQHandler+0xb82>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a83      	ldr	r2, [pc, #524]	; (8004c74 <HAL_DMA_IRQHandler+0xd30>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d02c      	beq.n	8004ac6 <HAL_DMA_IRQHandler+0xb82>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a81      	ldr	r2, [pc, #516]	; (8004c78 <HAL_DMA_IRQHandler+0xd34>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d027      	beq.n	8004ac6 <HAL_DMA_IRQHandler+0xb82>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a80      	ldr	r2, [pc, #512]	; (8004c7c <HAL_DMA_IRQHandler+0xd38>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d022      	beq.n	8004ac6 <HAL_DMA_IRQHandler+0xb82>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a7e      	ldr	r2, [pc, #504]	; (8004c80 <HAL_DMA_IRQHandler+0xd3c>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d01d      	beq.n	8004ac6 <HAL_DMA_IRQHandler+0xb82>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a7d      	ldr	r2, [pc, #500]	; (8004c84 <HAL_DMA_IRQHandler+0xd40>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d018      	beq.n	8004ac6 <HAL_DMA_IRQHandler+0xb82>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a7b      	ldr	r2, [pc, #492]	; (8004c88 <HAL_DMA_IRQHandler+0xd44>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d013      	beq.n	8004ac6 <HAL_DMA_IRQHandler+0xb82>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a7a      	ldr	r2, [pc, #488]	; (8004c8c <HAL_DMA_IRQHandler+0xd48>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d00e      	beq.n	8004ac6 <HAL_DMA_IRQHandler+0xb82>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a78      	ldr	r2, [pc, #480]	; (8004c90 <HAL_DMA_IRQHandler+0xd4c>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d009      	beq.n	8004ac6 <HAL_DMA_IRQHandler+0xb82>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a77      	ldr	r2, [pc, #476]	; (8004c94 <HAL_DMA_IRQHandler+0xd50>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d004      	beq.n	8004ac6 <HAL_DMA_IRQHandler+0xb82>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a75      	ldr	r2, [pc, #468]	; (8004c98 <HAL_DMA_IRQHandler+0xd54>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d108      	bne.n	8004ad8 <HAL_DMA_IRQHandler+0xb94>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 0208 	bic.w	r2, r2, #8
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	e007      	b.n	8004ae8 <HAL_DMA_IRQHandler+0xba4>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 0204 	bic.w	r2, r2, #4
 8004ae6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f000 8165 	beq.w	8004dbc <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004afa:	e15f      	b.n	8004dbc <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b00:	f003 031f 	and.w	r3, r3, #31
 8004b04:	2202      	movs	r2, #2
 8004b06:	409a      	lsls	r2, r3
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 80c5 	beq.w	8004c9c <HAL_DMA_IRQHandler+0xd58>
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f000 80bf 	beq.w	8004c9c <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b22:	f003 031f 	and.w	r3, r3, #31
 8004b26:	2202      	movs	r2, #2
 8004b28:	409a      	lsls	r2, r3
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d018      	beq.n	8004b6a <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d109      	bne.n	8004b56 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f000 813a 	beq.w	8004dc0 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b54:	e134      	b.n	8004dc0 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f000 8130 	beq.w	8004dc0 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b68:	e12a      	b.n	8004dc0 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	f003 0320 	and.w	r3, r3, #32
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d168      	bne.n	8004c46 <HAL_DMA_IRQHandler+0xd02>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a38      	ldr	r2, [pc, #224]	; (8004c5c <HAL_DMA_IRQHandler+0xd18>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d04a      	beq.n	8004c14 <HAL_DMA_IRQHandler+0xcd0>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a37      	ldr	r2, [pc, #220]	; (8004c60 <HAL_DMA_IRQHandler+0xd1c>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d045      	beq.n	8004c14 <HAL_DMA_IRQHandler+0xcd0>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a35      	ldr	r2, [pc, #212]	; (8004c64 <HAL_DMA_IRQHandler+0xd20>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d040      	beq.n	8004c14 <HAL_DMA_IRQHandler+0xcd0>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a34      	ldr	r2, [pc, #208]	; (8004c68 <HAL_DMA_IRQHandler+0xd24>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d03b      	beq.n	8004c14 <HAL_DMA_IRQHandler+0xcd0>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a32      	ldr	r2, [pc, #200]	; (8004c6c <HAL_DMA_IRQHandler+0xd28>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d036      	beq.n	8004c14 <HAL_DMA_IRQHandler+0xcd0>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a31      	ldr	r2, [pc, #196]	; (8004c70 <HAL_DMA_IRQHandler+0xd2c>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d031      	beq.n	8004c14 <HAL_DMA_IRQHandler+0xcd0>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a2f      	ldr	r2, [pc, #188]	; (8004c74 <HAL_DMA_IRQHandler+0xd30>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d02c      	beq.n	8004c14 <HAL_DMA_IRQHandler+0xcd0>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a2e      	ldr	r2, [pc, #184]	; (8004c78 <HAL_DMA_IRQHandler+0xd34>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d027      	beq.n	8004c14 <HAL_DMA_IRQHandler+0xcd0>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a2c      	ldr	r2, [pc, #176]	; (8004c7c <HAL_DMA_IRQHandler+0xd38>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d022      	beq.n	8004c14 <HAL_DMA_IRQHandler+0xcd0>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a2b      	ldr	r2, [pc, #172]	; (8004c80 <HAL_DMA_IRQHandler+0xd3c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d01d      	beq.n	8004c14 <HAL_DMA_IRQHandler+0xcd0>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a29      	ldr	r2, [pc, #164]	; (8004c84 <HAL_DMA_IRQHandler+0xd40>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d018      	beq.n	8004c14 <HAL_DMA_IRQHandler+0xcd0>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a28      	ldr	r2, [pc, #160]	; (8004c88 <HAL_DMA_IRQHandler+0xd44>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d013      	beq.n	8004c14 <HAL_DMA_IRQHandler+0xcd0>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a26      	ldr	r2, [pc, #152]	; (8004c8c <HAL_DMA_IRQHandler+0xd48>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d00e      	beq.n	8004c14 <HAL_DMA_IRQHandler+0xcd0>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a25      	ldr	r2, [pc, #148]	; (8004c90 <HAL_DMA_IRQHandler+0xd4c>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d009      	beq.n	8004c14 <HAL_DMA_IRQHandler+0xcd0>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a23      	ldr	r2, [pc, #140]	; (8004c94 <HAL_DMA_IRQHandler+0xd50>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d004      	beq.n	8004c14 <HAL_DMA_IRQHandler+0xcd0>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a22      	ldr	r2, [pc, #136]	; (8004c98 <HAL_DMA_IRQHandler+0xd54>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d108      	bne.n	8004c26 <HAL_DMA_IRQHandler+0xce2>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 0214 	bic.w	r2, r2, #20
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	e007      	b.n	8004c36 <HAL_DMA_IRQHandler+0xcf2>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 020a 	bic.w	r2, r2, #10
 8004c34:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 80b8 	beq.w	8004dc0 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c58:	e0b2      	b.n	8004dc0 <HAL_DMA_IRQHandler+0xe7c>
 8004c5a:	bf00      	nop
 8004c5c:	40020010 	.word	0x40020010
 8004c60:	40020028 	.word	0x40020028
 8004c64:	40020040 	.word	0x40020040
 8004c68:	40020058 	.word	0x40020058
 8004c6c:	40020070 	.word	0x40020070
 8004c70:	40020088 	.word	0x40020088
 8004c74:	400200a0 	.word	0x400200a0
 8004c78:	400200b8 	.word	0x400200b8
 8004c7c:	40020410 	.word	0x40020410
 8004c80:	40020428 	.word	0x40020428
 8004c84:	40020440 	.word	0x40020440
 8004c88:	40020458 	.word	0x40020458
 8004c8c:	40020470 	.word	0x40020470
 8004c90:	40020488 	.word	0x40020488
 8004c94:	400204a0 	.word	0x400204a0
 8004c98:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca0:	f003 031f 	and.w	r3, r3, #31
 8004ca4:	2208      	movs	r2, #8
 8004ca6:	409a      	lsls	r2, r3
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	4013      	ands	r3, r2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 8088 	beq.w	8004dc2 <HAL_DMA_IRQHandler+0xe7e>
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	f003 0308 	and.w	r3, r3, #8
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 8082 	beq.w	8004dc2 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a41      	ldr	r2, [pc, #260]	; (8004dc8 <HAL_DMA_IRQHandler+0xe84>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d04a      	beq.n	8004d5e <HAL_DMA_IRQHandler+0xe1a>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a3f      	ldr	r2, [pc, #252]	; (8004dcc <HAL_DMA_IRQHandler+0xe88>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d045      	beq.n	8004d5e <HAL_DMA_IRQHandler+0xe1a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a3e      	ldr	r2, [pc, #248]	; (8004dd0 <HAL_DMA_IRQHandler+0xe8c>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d040      	beq.n	8004d5e <HAL_DMA_IRQHandler+0xe1a>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a3c      	ldr	r2, [pc, #240]	; (8004dd4 <HAL_DMA_IRQHandler+0xe90>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d03b      	beq.n	8004d5e <HAL_DMA_IRQHandler+0xe1a>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a3b      	ldr	r2, [pc, #236]	; (8004dd8 <HAL_DMA_IRQHandler+0xe94>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d036      	beq.n	8004d5e <HAL_DMA_IRQHandler+0xe1a>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a39      	ldr	r2, [pc, #228]	; (8004ddc <HAL_DMA_IRQHandler+0xe98>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d031      	beq.n	8004d5e <HAL_DMA_IRQHandler+0xe1a>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a38      	ldr	r2, [pc, #224]	; (8004de0 <HAL_DMA_IRQHandler+0xe9c>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d02c      	beq.n	8004d5e <HAL_DMA_IRQHandler+0xe1a>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a36      	ldr	r2, [pc, #216]	; (8004de4 <HAL_DMA_IRQHandler+0xea0>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d027      	beq.n	8004d5e <HAL_DMA_IRQHandler+0xe1a>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a35      	ldr	r2, [pc, #212]	; (8004de8 <HAL_DMA_IRQHandler+0xea4>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d022      	beq.n	8004d5e <HAL_DMA_IRQHandler+0xe1a>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a33      	ldr	r2, [pc, #204]	; (8004dec <HAL_DMA_IRQHandler+0xea8>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d01d      	beq.n	8004d5e <HAL_DMA_IRQHandler+0xe1a>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a32      	ldr	r2, [pc, #200]	; (8004df0 <HAL_DMA_IRQHandler+0xeac>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d018      	beq.n	8004d5e <HAL_DMA_IRQHandler+0xe1a>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a30      	ldr	r2, [pc, #192]	; (8004df4 <HAL_DMA_IRQHandler+0xeb0>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d013      	beq.n	8004d5e <HAL_DMA_IRQHandler+0xe1a>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a2f      	ldr	r2, [pc, #188]	; (8004df8 <HAL_DMA_IRQHandler+0xeb4>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d00e      	beq.n	8004d5e <HAL_DMA_IRQHandler+0xe1a>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a2d      	ldr	r2, [pc, #180]	; (8004dfc <HAL_DMA_IRQHandler+0xeb8>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d009      	beq.n	8004d5e <HAL_DMA_IRQHandler+0xe1a>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a2c      	ldr	r2, [pc, #176]	; (8004e00 <HAL_DMA_IRQHandler+0xebc>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d004      	beq.n	8004d5e <HAL_DMA_IRQHandler+0xe1a>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a2a      	ldr	r2, [pc, #168]	; (8004e04 <HAL_DMA_IRQHandler+0xec0>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d108      	bne.n	8004d70 <HAL_DMA_IRQHandler+0xe2c>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f022 021c 	bic.w	r2, r2, #28
 8004d6c:	601a      	str	r2, [r3, #0]
 8004d6e:	e007      	b.n	8004d80 <HAL_DMA_IRQHandler+0xe3c>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f022 020e 	bic.w	r2, r2, #14
 8004d7e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d84:	f003 031f 	and.w	r3, r3, #31
 8004d88:	2201      	movs	r2, #1
 8004d8a:	409a      	lsls	r2, r3
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d009      	beq.n	8004dc2 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	4798      	blx	r3
 8004db6:	e004      	b.n	8004dc2 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004db8:	bf00      	nop
 8004dba:	e002      	b.n	8004dc2 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004dbc:	bf00      	nop
 8004dbe:	e000      	b.n	8004dc2 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004dc0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004dc2:	3728      	adds	r7, #40	; 0x28
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	40020010 	.word	0x40020010
 8004dcc:	40020028 	.word	0x40020028
 8004dd0:	40020040 	.word	0x40020040
 8004dd4:	40020058 	.word	0x40020058
 8004dd8:	40020070 	.word	0x40020070
 8004ddc:	40020088 	.word	0x40020088
 8004de0:	400200a0 	.word	0x400200a0
 8004de4:	400200b8 	.word	0x400200b8
 8004de8:	40020410 	.word	0x40020410
 8004dec:	40020428 	.word	0x40020428
 8004df0:	40020440 	.word	0x40020440
 8004df4:	40020458 	.word	0x40020458
 8004df8:	40020470 	.word	0x40020470
 8004dfc:	40020488 	.word	0x40020488
 8004e00:	400204a0 	.word	0x400204a0
 8004e04:	400204b8 	.word	0x400204b8

08004e08 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
 8004e14:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e1a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e20:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a84      	ldr	r2, [pc, #528]	; (8005038 <DMA_SetConfig+0x230>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d072      	beq.n	8004f12 <DMA_SetConfig+0x10a>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a82      	ldr	r2, [pc, #520]	; (800503c <DMA_SetConfig+0x234>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d06d      	beq.n	8004f12 <DMA_SetConfig+0x10a>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a81      	ldr	r2, [pc, #516]	; (8005040 <DMA_SetConfig+0x238>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d068      	beq.n	8004f12 <DMA_SetConfig+0x10a>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a7f      	ldr	r2, [pc, #508]	; (8005044 <DMA_SetConfig+0x23c>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d063      	beq.n	8004f12 <DMA_SetConfig+0x10a>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a7e      	ldr	r2, [pc, #504]	; (8005048 <DMA_SetConfig+0x240>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d05e      	beq.n	8004f12 <DMA_SetConfig+0x10a>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a7c      	ldr	r2, [pc, #496]	; (800504c <DMA_SetConfig+0x244>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d059      	beq.n	8004f12 <DMA_SetConfig+0x10a>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a7b      	ldr	r2, [pc, #492]	; (8005050 <DMA_SetConfig+0x248>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d054      	beq.n	8004f12 <DMA_SetConfig+0x10a>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a79      	ldr	r2, [pc, #484]	; (8005054 <DMA_SetConfig+0x24c>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d04f      	beq.n	8004f12 <DMA_SetConfig+0x10a>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a78      	ldr	r2, [pc, #480]	; (8005058 <DMA_SetConfig+0x250>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d04a      	beq.n	8004f12 <DMA_SetConfig+0x10a>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a76      	ldr	r2, [pc, #472]	; (800505c <DMA_SetConfig+0x254>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d045      	beq.n	8004f12 <DMA_SetConfig+0x10a>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a75      	ldr	r2, [pc, #468]	; (8005060 <DMA_SetConfig+0x258>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d040      	beq.n	8004f12 <DMA_SetConfig+0x10a>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a73      	ldr	r2, [pc, #460]	; (8005064 <DMA_SetConfig+0x25c>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d03b      	beq.n	8004f12 <DMA_SetConfig+0x10a>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a72      	ldr	r2, [pc, #456]	; (8005068 <DMA_SetConfig+0x260>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d036      	beq.n	8004f12 <DMA_SetConfig+0x10a>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a70      	ldr	r2, [pc, #448]	; (800506c <DMA_SetConfig+0x264>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d031      	beq.n	8004f12 <DMA_SetConfig+0x10a>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a6f      	ldr	r2, [pc, #444]	; (8005070 <DMA_SetConfig+0x268>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d02c      	beq.n	8004f12 <DMA_SetConfig+0x10a>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a6d      	ldr	r2, [pc, #436]	; (8005074 <DMA_SetConfig+0x26c>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d027      	beq.n	8004f12 <DMA_SetConfig+0x10a>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a6c      	ldr	r2, [pc, #432]	; (8005078 <DMA_SetConfig+0x270>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d022      	beq.n	8004f12 <DMA_SetConfig+0x10a>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a6a      	ldr	r2, [pc, #424]	; (800507c <DMA_SetConfig+0x274>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d01d      	beq.n	8004f12 <DMA_SetConfig+0x10a>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a69      	ldr	r2, [pc, #420]	; (8005080 <DMA_SetConfig+0x278>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d018      	beq.n	8004f12 <DMA_SetConfig+0x10a>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a67      	ldr	r2, [pc, #412]	; (8005084 <DMA_SetConfig+0x27c>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d013      	beq.n	8004f12 <DMA_SetConfig+0x10a>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a66      	ldr	r2, [pc, #408]	; (8005088 <DMA_SetConfig+0x280>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d00e      	beq.n	8004f12 <DMA_SetConfig+0x10a>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a64      	ldr	r2, [pc, #400]	; (800508c <DMA_SetConfig+0x284>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d009      	beq.n	8004f12 <DMA_SetConfig+0x10a>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a63      	ldr	r2, [pc, #396]	; (8005090 <DMA_SetConfig+0x288>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d004      	beq.n	8004f12 <DMA_SetConfig+0x10a>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a61      	ldr	r2, [pc, #388]	; (8005094 <DMA_SetConfig+0x28c>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d101      	bne.n	8004f16 <DMA_SetConfig+0x10e>
 8004f12:	2301      	movs	r3, #1
 8004f14:	e000      	b.n	8004f18 <DMA_SetConfig+0x110>
 8004f16:	2300      	movs	r3, #0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00d      	beq.n	8004f38 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004f24:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d004      	beq.n	8004f38 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004f36:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a3e      	ldr	r2, [pc, #248]	; (8005038 <DMA_SetConfig+0x230>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d04a      	beq.n	8004fd8 <DMA_SetConfig+0x1d0>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a3d      	ldr	r2, [pc, #244]	; (800503c <DMA_SetConfig+0x234>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d045      	beq.n	8004fd8 <DMA_SetConfig+0x1d0>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a3b      	ldr	r2, [pc, #236]	; (8005040 <DMA_SetConfig+0x238>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d040      	beq.n	8004fd8 <DMA_SetConfig+0x1d0>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a3a      	ldr	r2, [pc, #232]	; (8005044 <DMA_SetConfig+0x23c>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d03b      	beq.n	8004fd8 <DMA_SetConfig+0x1d0>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a38      	ldr	r2, [pc, #224]	; (8005048 <DMA_SetConfig+0x240>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d036      	beq.n	8004fd8 <DMA_SetConfig+0x1d0>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a37      	ldr	r2, [pc, #220]	; (800504c <DMA_SetConfig+0x244>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d031      	beq.n	8004fd8 <DMA_SetConfig+0x1d0>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a35      	ldr	r2, [pc, #212]	; (8005050 <DMA_SetConfig+0x248>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d02c      	beq.n	8004fd8 <DMA_SetConfig+0x1d0>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a34      	ldr	r2, [pc, #208]	; (8005054 <DMA_SetConfig+0x24c>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d027      	beq.n	8004fd8 <DMA_SetConfig+0x1d0>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a32      	ldr	r2, [pc, #200]	; (8005058 <DMA_SetConfig+0x250>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d022      	beq.n	8004fd8 <DMA_SetConfig+0x1d0>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a31      	ldr	r2, [pc, #196]	; (800505c <DMA_SetConfig+0x254>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d01d      	beq.n	8004fd8 <DMA_SetConfig+0x1d0>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a2f      	ldr	r2, [pc, #188]	; (8005060 <DMA_SetConfig+0x258>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d018      	beq.n	8004fd8 <DMA_SetConfig+0x1d0>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a2e      	ldr	r2, [pc, #184]	; (8005064 <DMA_SetConfig+0x25c>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d013      	beq.n	8004fd8 <DMA_SetConfig+0x1d0>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a2c      	ldr	r2, [pc, #176]	; (8005068 <DMA_SetConfig+0x260>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d00e      	beq.n	8004fd8 <DMA_SetConfig+0x1d0>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a2b      	ldr	r2, [pc, #172]	; (800506c <DMA_SetConfig+0x264>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d009      	beq.n	8004fd8 <DMA_SetConfig+0x1d0>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a29      	ldr	r2, [pc, #164]	; (8005070 <DMA_SetConfig+0x268>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d004      	beq.n	8004fd8 <DMA_SetConfig+0x1d0>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a28      	ldr	r2, [pc, #160]	; (8005074 <DMA_SetConfig+0x26c>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d101      	bne.n	8004fdc <DMA_SetConfig+0x1d4>
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e000      	b.n	8004fde <DMA_SetConfig+0x1d6>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d05a      	beq.n	8005098 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fe6:	f003 031f 	and.w	r3, r3, #31
 8004fea:	223f      	movs	r2, #63	; 0x3f
 8004fec:	409a      	lsls	r2, r3
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005000:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	2b40      	cmp	r3, #64	; 0x40
 8005010:	d108      	bne.n	8005024 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005022:	e0af      	b.n	8005184 <DMA_SetConfig+0x37c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	60da      	str	r2, [r3, #12]
}
 8005034:	e0a6      	b.n	8005184 <DMA_SetConfig+0x37c>
 8005036:	bf00      	nop
 8005038:	40020010 	.word	0x40020010
 800503c:	40020028 	.word	0x40020028
 8005040:	40020040 	.word	0x40020040
 8005044:	40020058 	.word	0x40020058
 8005048:	40020070 	.word	0x40020070
 800504c:	40020088 	.word	0x40020088
 8005050:	400200a0 	.word	0x400200a0
 8005054:	400200b8 	.word	0x400200b8
 8005058:	40020410 	.word	0x40020410
 800505c:	40020428 	.word	0x40020428
 8005060:	40020440 	.word	0x40020440
 8005064:	40020458 	.word	0x40020458
 8005068:	40020470 	.word	0x40020470
 800506c:	40020488 	.word	0x40020488
 8005070:	400204a0 	.word	0x400204a0
 8005074:	400204b8 	.word	0x400204b8
 8005078:	58025408 	.word	0x58025408
 800507c:	5802541c 	.word	0x5802541c
 8005080:	58025430 	.word	0x58025430
 8005084:	58025444 	.word	0x58025444
 8005088:	58025458 	.word	0x58025458
 800508c:	5802546c 	.word	0x5802546c
 8005090:	58025480 	.word	0x58025480
 8005094:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a3c      	ldr	r2, [pc, #240]	; (8005190 <DMA_SetConfig+0x388>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d04a      	beq.n	8005138 <DMA_SetConfig+0x330>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a3b      	ldr	r2, [pc, #236]	; (8005194 <DMA_SetConfig+0x38c>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d045      	beq.n	8005138 <DMA_SetConfig+0x330>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a39      	ldr	r2, [pc, #228]	; (8005198 <DMA_SetConfig+0x390>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d040      	beq.n	8005138 <DMA_SetConfig+0x330>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a38      	ldr	r2, [pc, #224]	; (800519c <DMA_SetConfig+0x394>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d03b      	beq.n	8005138 <DMA_SetConfig+0x330>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a36      	ldr	r2, [pc, #216]	; (80051a0 <DMA_SetConfig+0x398>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d036      	beq.n	8005138 <DMA_SetConfig+0x330>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a35      	ldr	r2, [pc, #212]	; (80051a4 <DMA_SetConfig+0x39c>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d031      	beq.n	8005138 <DMA_SetConfig+0x330>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a33      	ldr	r2, [pc, #204]	; (80051a8 <DMA_SetConfig+0x3a0>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d02c      	beq.n	8005138 <DMA_SetConfig+0x330>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a32      	ldr	r2, [pc, #200]	; (80051ac <DMA_SetConfig+0x3a4>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d027      	beq.n	8005138 <DMA_SetConfig+0x330>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a30      	ldr	r2, [pc, #192]	; (80051b0 <DMA_SetConfig+0x3a8>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d022      	beq.n	8005138 <DMA_SetConfig+0x330>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a2f      	ldr	r2, [pc, #188]	; (80051b4 <DMA_SetConfig+0x3ac>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d01d      	beq.n	8005138 <DMA_SetConfig+0x330>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a2d      	ldr	r2, [pc, #180]	; (80051b8 <DMA_SetConfig+0x3b0>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d018      	beq.n	8005138 <DMA_SetConfig+0x330>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a2c      	ldr	r2, [pc, #176]	; (80051bc <DMA_SetConfig+0x3b4>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d013      	beq.n	8005138 <DMA_SetConfig+0x330>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a2a      	ldr	r2, [pc, #168]	; (80051c0 <DMA_SetConfig+0x3b8>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d00e      	beq.n	8005138 <DMA_SetConfig+0x330>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a29      	ldr	r2, [pc, #164]	; (80051c4 <DMA_SetConfig+0x3bc>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d009      	beq.n	8005138 <DMA_SetConfig+0x330>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a27      	ldr	r2, [pc, #156]	; (80051c8 <DMA_SetConfig+0x3c0>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d004      	beq.n	8005138 <DMA_SetConfig+0x330>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a26      	ldr	r2, [pc, #152]	; (80051cc <DMA_SetConfig+0x3c4>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d101      	bne.n	800513c <DMA_SetConfig+0x334>
 8005138:	2301      	movs	r3, #1
 800513a:	e000      	b.n	800513e <DMA_SetConfig+0x336>
 800513c:	2300      	movs	r3, #0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d020      	beq.n	8005184 <DMA_SetConfig+0x37c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005146:	f003 031f 	and.w	r3, r3, #31
 800514a:	2201      	movs	r2, #1
 800514c:	409a      	lsls	r2, r3
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	2b40      	cmp	r3, #64	; 0x40
 8005160:	d108      	bne.n	8005174 <DMA_SetConfig+0x36c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	60da      	str	r2, [r3, #12]
}
 8005172:	e007      	b.n	8005184 <DMA_SetConfig+0x37c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	60da      	str	r2, [r3, #12]
}
 8005184:	bf00      	nop
 8005186:	371c      	adds	r7, #28
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr
 8005190:	48022c08 	.word	0x48022c08
 8005194:	48022c1c 	.word	0x48022c1c
 8005198:	48022c30 	.word	0x48022c30
 800519c:	48022c44 	.word	0x48022c44
 80051a0:	48022c58 	.word	0x48022c58
 80051a4:	48022c6c 	.word	0x48022c6c
 80051a8:	48022c80 	.word	0x48022c80
 80051ac:	48022c94 	.word	0x48022c94
 80051b0:	58025408 	.word	0x58025408
 80051b4:	5802541c 	.word	0x5802541c
 80051b8:	58025430 	.word	0x58025430
 80051bc:	58025444 	.word	0x58025444
 80051c0:	58025458 	.word	0x58025458
 80051c4:	5802546c 	.word	0x5802546c
 80051c8:	58025480 	.word	0x58025480
 80051cc:	58025494 	.word	0x58025494

080051d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a42      	ldr	r2, [pc, #264]	; (80052e8 <DMA_CalcBaseAndBitshift+0x118>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d04a      	beq.n	8005278 <DMA_CalcBaseAndBitshift+0xa8>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a41      	ldr	r2, [pc, #260]	; (80052ec <DMA_CalcBaseAndBitshift+0x11c>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d045      	beq.n	8005278 <DMA_CalcBaseAndBitshift+0xa8>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a3f      	ldr	r2, [pc, #252]	; (80052f0 <DMA_CalcBaseAndBitshift+0x120>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d040      	beq.n	8005278 <DMA_CalcBaseAndBitshift+0xa8>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a3e      	ldr	r2, [pc, #248]	; (80052f4 <DMA_CalcBaseAndBitshift+0x124>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d03b      	beq.n	8005278 <DMA_CalcBaseAndBitshift+0xa8>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a3c      	ldr	r2, [pc, #240]	; (80052f8 <DMA_CalcBaseAndBitshift+0x128>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d036      	beq.n	8005278 <DMA_CalcBaseAndBitshift+0xa8>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a3b      	ldr	r2, [pc, #236]	; (80052fc <DMA_CalcBaseAndBitshift+0x12c>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d031      	beq.n	8005278 <DMA_CalcBaseAndBitshift+0xa8>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a39      	ldr	r2, [pc, #228]	; (8005300 <DMA_CalcBaseAndBitshift+0x130>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d02c      	beq.n	8005278 <DMA_CalcBaseAndBitshift+0xa8>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a38      	ldr	r2, [pc, #224]	; (8005304 <DMA_CalcBaseAndBitshift+0x134>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d027      	beq.n	8005278 <DMA_CalcBaseAndBitshift+0xa8>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a36      	ldr	r2, [pc, #216]	; (8005308 <DMA_CalcBaseAndBitshift+0x138>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d022      	beq.n	8005278 <DMA_CalcBaseAndBitshift+0xa8>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a35      	ldr	r2, [pc, #212]	; (800530c <DMA_CalcBaseAndBitshift+0x13c>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d01d      	beq.n	8005278 <DMA_CalcBaseAndBitshift+0xa8>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a33      	ldr	r2, [pc, #204]	; (8005310 <DMA_CalcBaseAndBitshift+0x140>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d018      	beq.n	8005278 <DMA_CalcBaseAndBitshift+0xa8>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a32      	ldr	r2, [pc, #200]	; (8005314 <DMA_CalcBaseAndBitshift+0x144>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d013      	beq.n	8005278 <DMA_CalcBaseAndBitshift+0xa8>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a30      	ldr	r2, [pc, #192]	; (8005318 <DMA_CalcBaseAndBitshift+0x148>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d00e      	beq.n	8005278 <DMA_CalcBaseAndBitshift+0xa8>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a2f      	ldr	r2, [pc, #188]	; (800531c <DMA_CalcBaseAndBitshift+0x14c>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d009      	beq.n	8005278 <DMA_CalcBaseAndBitshift+0xa8>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a2d      	ldr	r2, [pc, #180]	; (8005320 <DMA_CalcBaseAndBitshift+0x150>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d004      	beq.n	8005278 <DMA_CalcBaseAndBitshift+0xa8>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a2c      	ldr	r2, [pc, #176]	; (8005324 <DMA_CalcBaseAndBitshift+0x154>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d101      	bne.n	800527c <DMA_CalcBaseAndBitshift+0xac>
 8005278:	2301      	movs	r3, #1
 800527a:	e000      	b.n	800527e <DMA_CalcBaseAndBitshift+0xae>
 800527c:	2300      	movs	r3, #0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d024      	beq.n	80052cc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	b2db      	uxtb	r3, r3
 8005288:	3b10      	subs	r3, #16
 800528a:	4a27      	ldr	r2, [pc, #156]	; (8005328 <DMA_CalcBaseAndBitshift+0x158>)
 800528c:	fba2 2303 	umull	r2, r3, r2, r3
 8005290:	091b      	lsrs	r3, r3, #4
 8005292:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f003 0307 	and.w	r3, r3, #7
 800529a:	4a24      	ldr	r2, [pc, #144]	; (800532c <DMA_CalcBaseAndBitshift+0x15c>)
 800529c:	5cd3      	ldrb	r3, [r2, r3]
 800529e:	461a      	mov	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2b03      	cmp	r3, #3
 80052a8:	d908      	bls.n	80052bc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	461a      	mov	r2, r3
 80052b0:	4b1f      	ldr	r3, [pc, #124]	; (8005330 <DMA_CalcBaseAndBitshift+0x160>)
 80052b2:	4013      	ands	r3, r2
 80052b4:	1d1a      	adds	r2, r3, #4
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	659a      	str	r2, [r3, #88]	; 0x58
 80052ba:	e00d      	b.n	80052d8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	461a      	mov	r2, r3
 80052c2:	4b1b      	ldr	r3, [pc, #108]	; (8005330 <DMA_CalcBaseAndBitshift+0x160>)
 80052c4:	4013      	ands	r3, r2
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	6593      	str	r3, [r2, #88]	; 0x58
 80052ca:	e005      	b.n	80052d8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3714      	adds	r7, #20
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr
 80052e8:	40020010 	.word	0x40020010
 80052ec:	40020028 	.word	0x40020028
 80052f0:	40020040 	.word	0x40020040
 80052f4:	40020058 	.word	0x40020058
 80052f8:	40020070 	.word	0x40020070
 80052fc:	40020088 	.word	0x40020088
 8005300:	400200a0 	.word	0x400200a0
 8005304:	400200b8 	.word	0x400200b8
 8005308:	40020410 	.word	0x40020410
 800530c:	40020428 	.word	0x40020428
 8005310:	40020440 	.word	0x40020440
 8005314:	40020458 	.word	0x40020458
 8005318:	40020470 	.word	0x40020470
 800531c:	40020488 	.word	0x40020488
 8005320:	400204a0 	.word	0x400204a0
 8005324:	400204b8 	.word	0x400204b8
 8005328:	aaaaaaab 	.word	0xaaaaaaab
 800532c:	0800bca0 	.word	0x0800bca0
 8005330:	fffffc00 	.word	0xfffffc00

08005334 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800533c:	2300      	movs	r3, #0
 800533e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d120      	bne.n	800538a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534c:	2b03      	cmp	r3, #3
 800534e:	d858      	bhi.n	8005402 <DMA_CheckFifoParam+0xce>
 8005350:	a201      	add	r2, pc, #4	; (adr r2, 8005358 <DMA_CheckFifoParam+0x24>)
 8005352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005356:	bf00      	nop
 8005358:	08005369 	.word	0x08005369
 800535c:	0800537b 	.word	0x0800537b
 8005360:	08005369 	.word	0x08005369
 8005364:	08005403 	.word	0x08005403
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d048      	beq.n	8005406 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005378:	e045      	b.n	8005406 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005382:	d142      	bne.n	800540a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005388:	e03f      	b.n	800540a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005392:	d123      	bne.n	80053dc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005398:	2b03      	cmp	r3, #3
 800539a:	d838      	bhi.n	800540e <DMA_CheckFifoParam+0xda>
 800539c:	a201      	add	r2, pc, #4	; (adr r2, 80053a4 <DMA_CheckFifoParam+0x70>)
 800539e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a2:	bf00      	nop
 80053a4:	080053b5 	.word	0x080053b5
 80053a8:	080053bb 	.word	0x080053bb
 80053ac:	080053b5 	.word	0x080053b5
 80053b0:	080053cd 	.word	0x080053cd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	73fb      	strb	r3, [r7, #15]
        break;
 80053b8:	e030      	b.n	800541c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d025      	beq.n	8005412 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80053ca:	e022      	b.n	8005412 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80053d4:	d11f      	bne.n	8005416 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80053da:	e01c      	b.n	8005416 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d902      	bls.n	80053ea <DMA_CheckFifoParam+0xb6>
 80053e4:	2b03      	cmp	r3, #3
 80053e6:	d003      	beq.n	80053f0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80053e8:	e018      	b.n	800541c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	73fb      	strb	r3, [r7, #15]
        break;
 80053ee:	e015      	b.n	800541c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00e      	beq.n	800541a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	73fb      	strb	r3, [r7, #15]
    break;
 8005400:	e00b      	b.n	800541a <DMA_CheckFifoParam+0xe6>
        break;
 8005402:	bf00      	nop
 8005404:	e00a      	b.n	800541c <DMA_CheckFifoParam+0xe8>
        break;
 8005406:	bf00      	nop
 8005408:	e008      	b.n	800541c <DMA_CheckFifoParam+0xe8>
        break;
 800540a:	bf00      	nop
 800540c:	e006      	b.n	800541c <DMA_CheckFifoParam+0xe8>
        break;
 800540e:	bf00      	nop
 8005410:	e004      	b.n	800541c <DMA_CheckFifoParam+0xe8>
        break;
 8005412:	bf00      	nop
 8005414:	e002      	b.n	800541c <DMA_CheckFifoParam+0xe8>
        break;
 8005416:	bf00      	nop
 8005418:	e000      	b.n	800541c <DMA_CheckFifoParam+0xe8>
    break;
 800541a:	bf00      	nop
    }
  }

  return status;
 800541c:	7bfb      	ldrb	r3, [r7, #15]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3714      	adds	r7, #20
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop

0800542c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a38      	ldr	r2, [pc, #224]	; (8005520 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d022      	beq.n	800548a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a36      	ldr	r2, [pc, #216]	; (8005524 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d01d      	beq.n	800548a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a35      	ldr	r2, [pc, #212]	; (8005528 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d018      	beq.n	800548a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a33      	ldr	r2, [pc, #204]	; (800552c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d013      	beq.n	800548a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a32      	ldr	r2, [pc, #200]	; (8005530 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d00e      	beq.n	800548a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a30      	ldr	r2, [pc, #192]	; (8005534 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d009      	beq.n	800548a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a2f      	ldr	r2, [pc, #188]	; (8005538 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d004      	beq.n	800548a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a2d      	ldr	r2, [pc, #180]	; (800553c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d101      	bne.n	800548e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800548a:	2301      	movs	r3, #1
 800548c:	e000      	b.n	8005490 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800548e:	2300      	movs	r3, #0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d01a      	beq.n	80054ca <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	b2db      	uxtb	r3, r3
 800549a:	3b08      	subs	r3, #8
 800549c:	4a28      	ldr	r2, [pc, #160]	; (8005540 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800549e:	fba2 2303 	umull	r2, r3, r2, r3
 80054a2:	091b      	lsrs	r3, r3, #4
 80054a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	4b26      	ldr	r3, [pc, #152]	; (8005544 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80054aa:	4413      	add	r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	461a      	mov	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a24      	ldr	r2, [pc, #144]	; (8005548 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80054b8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f003 031f 	and.w	r3, r3, #31
 80054c0:	2201      	movs	r2, #1
 80054c2:	409a      	lsls	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80054c8:	e024      	b.n	8005514 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	3b10      	subs	r3, #16
 80054d2:	4a1e      	ldr	r2, [pc, #120]	; (800554c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80054d4:	fba2 2303 	umull	r2, r3, r2, r3
 80054d8:	091b      	lsrs	r3, r3, #4
 80054da:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	4a1c      	ldr	r2, [pc, #112]	; (8005550 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d806      	bhi.n	80054f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	4a1b      	ldr	r2, [pc, #108]	; (8005554 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d902      	bls.n	80054f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	3308      	adds	r3, #8
 80054f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	4b18      	ldr	r3, [pc, #96]	; (8005558 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80054f6:	4413      	add	r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	461a      	mov	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a16      	ldr	r2, [pc, #88]	; (800555c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005504:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f003 031f 	and.w	r3, r3, #31
 800550c:	2201      	movs	r2, #1
 800550e:	409a      	lsls	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005514:	bf00      	nop
 8005516:	3714      	adds	r7, #20
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	58025408 	.word	0x58025408
 8005524:	5802541c 	.word	0x5802541c
 8005528:	58025430 	.word	0x58025430
 800552c:	58025444 	.word	0x58025444
 8005530:	58025458 	.word	0x58025458
 8005534:	5802546c 	.word	0x5802546c
 8005538:	58025480 	.word	0x58025480
 800553c:	58025494 	.word	0x58025494
 8005540:	cccccccd 	.word	0xcccccccd
 8005544:	16009600 	.word	0x16009600
 8005548:	58025880 	.word	0x58025880
 800554c:	aaaaaaab 	.word	0xaaaaaaab
 8005550:	400204b8 	.word	0x400204b8
 8005554:	4002040f 	.word	0x4002040f
 8005558:	10008200 	.word	0x10008200
 800555c:	40020880 	.word	0x40020880

08005560 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	b2db      	uxtb	r3, r3
 800556e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d04a      	beq.n	800560c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2b08      	cmp	r3, #8
 800557a:	d847      	bhi.n	800560c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a25      	ldr	r2, [pc, #148]	; (8005618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d022      	beq.n	80055cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a24      	ldr	r2, [pc, #144]	; (800561c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d01d      	beq.n	80055cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a22      	ldr	r2, [pc, #136]	; (8005620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d018      	beq.n	80055cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a21      	ldr	r2, [pc, #132]	; (8005624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d013      	beq.n	80055cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a1f      	ldr	r2, [pc, #124]	; (8005628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00e      	beq.n	80055cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a1e      	ldr	r2, [pc, #120]	; (800562c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d009      	beq.n	80055cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a1c      	ldr	r2, [pc, #112]	; (8005630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d004      	beq.n	80055cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a1b      	ldr	r2, [pc, #108]	; (8005634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d101      	bne.n	80055d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80055cc:	2301      	movs	r3, #1
 80055ce:	e000      	b.n	80055d2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80055d0:	2300      	movs	r3, #0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00a      	beq.n	80055ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	4b17      	ldr	r3, [pc, #92]	; (8005638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80055da:	4413      	add	r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	461a      	mov	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a15      	ldr	r2, [pc, #84]	; (800563c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80055e8:	671a      	str	r2, [r3, #112]	; 0x70
 80055ea:	e009      	b.n	8005600 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	4b14      	ldr	r3, [pc, #80]	; (8005640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80055f0:	4413      	add	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	461a      	mov	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a11      	ldr	r2, [pc, #68]	; (8005644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80055fe:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	3b01      	subs	r3, #1
 8005604:	2201      	movs	r2, #1
 8005606:	409a      	lsls	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800560c:	bf00      	nop
 800560e:	3714      	adds	r7, #20
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr
 8005618:	58025408 	.word	0x58025408
 800561c:	5802541c 	.word	0x5802541c
 8005620:	58025430 	.word	0x58025430
 8005624:	58025444 	.word	0x58025444
 8005628:	58025458 	.word	0x58025458
 800562c:	5802546c 	.word	0x5802546c
 8005630:	58025480 	.word	0x58025480
 8005634:	58025494 	.word	0x58025494
 8005638:	1600963f 	.word	0x1600963f
 800563c:	58025940 	.word	0x58025940
 8005640:	1000823f 	.word	0x1000823f
 8005644:	40020940 	.word	0x40020940

08005648 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005648:	b480      	push	{r7}
 800564a:	b089      	sub	sp, #36	; 0x24
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005652:	2300      	movs	r3, #0
 8005654:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005656:	4b89      	ldr	r3, [pc, #548]	; (800587c <HAL_GPIO_Init+0x234>)
 8005658:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800565a:	e194      	b.n	8005986 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	2101      	movs	r1, #1
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	fa01 f303 	lsl.w	r3, r1, r3
 8005668:	4013      	ands	r3, r2
 800566a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	f000 8186 	beq.w	8005980 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d00b      	beq.n	8005694 <HAL_GPIO_Init+0x4c>
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	2b02      	cmp	r3, #2
 8005682:	d007      	beq.n	8005694 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005688:	2b11      	cmp	r3, #17
 800568a:	d003      	beq.n	8005694 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	2b12      	cmp	r3, #18
 8005692:	d130      	bne.n	80056f6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	005b      	lsls	r3, r3, #1
 800569e:	2203      	movs	r2, #3
 80056a0:	fa02 f303 	lsl.w	r3, r2, r3
 80056a4:	43db      	mvns	r3, r3
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	4013      	ands	r3, r2
 80056aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	68da      	ldr	r2, [r3, #12]
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	005b      	lsls	r3, r3, #1
 80056b4:	fa02 f303 	lsl.w	r3, r2, r3
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	69ba      	ldr	r2, [r7, #24]
 80056c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80056ca:	2201      	movs	r2, #1
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	fa02 f303 	lsl.w	r3, r2, r3
 80056d2:	43db      	mvns	r3, r3
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	4013      	ands	r3, r2
 80056d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	091b      	lsrs	r3, r3, #4
 80056e0:	f003 0201 	and.w	r2, r3, #1
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ea:	69ba      	ldr	r2, [r7, #24]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	005b      	lsls	r3, r3, #1
 8005700:	2203      	movs	r2, #3
 8005702:	fa02 f303 	lsl.w	r3, r2, r3
 8005706:	43db      	mvns	r3, r3
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	4013      	ands	r3, r2
 800570c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	689a      	ldr	r2, [r3, #8]
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	fa02 f303 	lsl.w	r3, r2, r3
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	4313      	orrs	r3, r2
 800571e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	2b02      	cmp	r3, #2
 800572c:	d003      	beq.n	8005736 <HAL_GPIO_Init+0xee>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	2b12      	cmp	r3, #18
 8005734:	d123      	bne.n	800577e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	08da      	lsrs	r2, r3, #3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	3208      	adds	r2, #8
 800573e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005742:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	f003 0307 	and.w	r3, r3, #7
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	220f      	movs	r2, #15
 800574e:	fa02 f303 	lsl.w	r3, r2, r3
 8005752:	43db      	mvns	r3, r3
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	4013      	ands	r3, r2
 8005758:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	691a      	ldr	r2, [r3, #16]
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	f003 0307 	and.w	r3, r3, #7
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	fa02 f303 	lsl.w	r3, r2, r3
 800576a:	69ba      	ldr	r2, [r7, #24]
 800576c:	4313      	orrs	r3, r2
 800576e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	08da      	lsrs	r2, r3, #3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	3208      	adds	r2, #8
 8005778:	69b9      	ldr	r1, [r7, #24]
 800577a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	005b      	lsls	r3, r3, #1
 8005788:	2203      	movs	r2, #3
 800578a:	fa02 f303 	lsl.w	r3, r2, r3
 800578e:	43db      	mvns	r3, r3
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	4013      	ands	r3, r2
 8005794:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	f003 0203 	and.w	r2, r3, #3
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	005b      	lsls	r3, r3, #1
 80057a2:	fa02 f303 	lsl.w	r3, r2, r3
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f000 80e0 	beq.w	8005980 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057c0:	4b2f      	ldr	r3, [pc, #188]	; (8005880 <HAL_GPIO_Init+0x238>)
 80057c2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80057c6:	4a2e      	ldr	r2, [pc, #184]	; (8005880 <HAL_GPIO_Init+0x238>)
 80057c8:	f043 0302 	orr.w	r3, r3, #2
 80057cc:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80057d0:	4b2b      	ldr	r3, [pc, #172]	; (8005880 <HAL_GPIO_Init+0x238>)
 80057d2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80057d6:	f003 0302 	and.w	r3, r3, #2
 80057da:	60fb      	str	r3, [r7, #12]
 80057dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057de:	4a29      	ldr	r2, [pc, #164]	; (8005884 <HAL_GPIO_Init+0x23c>)
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	089b      	lsrs	r3, r3, #2
 80057e4:	3302      	adds	r3, #2
 80057e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	f003 0303 	and.w	r3, r3, #3
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	220f      	movs	r2, #15
 80057f6:	fa02 f303 	lsl.w	r3, r2, r3
 80057fa:	43db      	mvns	r3, r3
 80057fc:	69ba      	ldr	r2, [r7, #24]
 80057fe:	4013      	ands	r3, r2
 8005800:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a20      	ldr	r2, [pc, #128]	; (8005888 <HAL_GPIO_Init+0x240>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d052      	beq.n	80058b0 <HAL_GPIO_Init+0x268>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a1f      	ldr	r2, [pc, #124]	; (800588c <HAL_GPIO_Init+0x244>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d031      	beq.n	8005876 <HAL_GPIO_Init+0x22e>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a1e      	ldr	r2, [pc, #120]	; (8005890 <HAL_GPIO_Init+0x248>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d02b      	beq.n	8005872 <HAL_GPIO_Init+0x22a>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a1d      	ldr	r2, [pc, #116]	; (8005894 <HAL_GPIO_Init+0x24c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d025      	beq.n	800586e <HAL_GPIO_Init+0x226>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a1c      	ldr	r2, [pc, #112]	; (8005898 <HAL_GPIO_Init+0x250>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d01f      	beq.n	800586a <HAL_GPIO_Init+0x222>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a1b      	ldr	r2, [pc, #108]	; (800589c <HAL_GPIO_Init+0x254>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d019      	beq.n	8005866 <HAL_GPIO_Init+0x21e>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a1a      	ldr	r2, [pc, #104]	; (80058a0 <HAL_GPIO_Init+0x258>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d013      	beq.n	8005862 <HAL_GPIO_Init+0x21a>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a19      	ldr	r2, [pc, #100]	; (80058a4 <HAL_GPIO_Init+0x25c>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d00d      	beq.n	800585e <HAL_GPIO_Init+0x216>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a18      	ldr	r2, [pc, #96]	; (80058a8 <HAL_GPIO_Init+0x260>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d007      	beq.n	800585a <HAL_GPIO_Init+0x212>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a17      	ldr	r2, [pc, #92]	; (80058ac <HAL_GPIO_Init+0x264>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d101      	bne.n	8005856 <HAL_GPIO_Init+0x20e>
 8005852:	2309      	movs	r3, #9
 8005854:	e02d      	b.n	80058b2 <HAL_GPIO_Init+0x26a>
 8005856:	230a      	movs	r3, #10
 8005858:	e02b      	b.n	80058b2 <HAL_GPIO_Init+0x26a>
 800585a:	2308      	movs	r3, #8
 800585c:	e029      	b.n	80058b2 <HAL_GPIO_Init+0x26a>
 800585e:	2307      	movs	r3, #7
 8005860:	e027      	b.n	80058b2 <HAL_GPIO_Init+0x26a>
 8005862:	2306      	movs	r3, #6
 8005864:	e025      	b.n	80058b2 <HAL_GPIO_Init+0x26a>
 8005866:	2305      	movs	r3, #5
 8005868:	e023      	b.n	80058b2 <HAL_GPIO_Init+0x26a>
 800586a:	2304      	movs	r3, #4
 800586c:	e021      	b.n	80058b2 <HAL_GPIO_Init+0x26a>
 800586e:	2303      	movs	r3, #3
 8005870:	e01f      	b.n	80058b2 <HAL_GPIO_Init+0x26a>
 8005872:	2302      	movs	r3, #2
 8005874:	e01d      	b.n	80058b2 <HAL_GPIO_Init+0x26a>
 8005876:	2301      	movs	r3, #1
 8005878:	e01b      	b.n	80058b2 <HAL_GPIO_Init+0x26a>
 800587a:	bf00      	nop
 800587c:	58000080 	.word	0x58000080
 8005880:	58024400 	.word	0x58024400
 8005884:	58000400 	.word	0x58000400
 8005888:	58020000 	.word	0x58020000
 800588c:	58020400 	.word	0x58020400
 8005890:	58020800 	.word	0x58020800
 8005894:	58020c00 	.word	0x58020c00
 8005898:	58021000 	.word	0x58021000
 800589c:	58021400 	.word	0x58021400
 80058a0:	58021800 	.word	0x58021800
 80058a4:	58021c00 	.word	0x58021c00
 80058a8:	58022000 	.word	0x58022000
 80058ac:	58022400 	.word	0x58022400
 80058b0:	2300      	movs	r3, #0
 80058b2:	69fa      	ldr	r2, [r7, #28]
 80058b4:	f002 0203 	and.w	r2, r2, #3
 80058b8:	0092      	lsls	r2, r2, #2
 80058ba:	4093      	lsls	r3, r2
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	4313      	orrs	r3, r2
 80058c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80058c2:	4938      	ldr	r1, [pc, #224]	; (80059a4 <HAL_GPIO_Init+0x35c>)
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	089b      	lsrs	r3, r3, #2
 80058c8:	3302      	adds	r3, #2
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	43db      	mvns	r3, r3
 80058da:	69ba      	ldr	r2, [r7, #24]
 80058dc:	4013      	ands	r3, r2
 80058de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d003      	beq.n	80058f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80058ec:	69ba      	ldr	r2, [r7, #24]
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	69ba      	ldr	r2, [r7, #24]
 80058f8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	43db      	mvns	r3, r3
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	4013      	ands	r3, r2
 8005908:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d003      	beq.n	800591e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005916:	69ba      	ldr	r2, [r7, #24]
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	4313      	orrs	r3, r2
 800591c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	43db      	mvns	r3, r3
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	4013      	ands	r3, r2
 8005934:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005942:	69ba      	ldr	r2, [r7, #24]
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	4313      	orrs	r3, r2
 8005948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800594a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	43db      	mvns	r3, r3
 800595e:	69ba      	ldr	r2, [r7, #24]
 8005960:	4013      	ands	r3, r2
 8005962:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	4313      	orrs	r3, r2
 8005976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005978:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	3301      	adds	r3, #1
 8005984:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	fa22 f303 	lsr.w	r3, r2, r3
 8005990:	2b00      	cmp	r3, #0
 8005992:	f47f ae63 	bne.w	800565c <HAL_GPIO_Init+0x14>
  }
}
 8005996:	bf00      	nop
 8005998:	3724      	adds	r7, #36	; 0x24
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	58000400 	.word	0x58000400

080059a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	460b      	mov	r3, r1
 80059b2:	807b      	strh	r3, [r7, #2]
 80059b4:	4613      	mov	r3, r2
 80059b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80059b8:	787b      	ldrb	r3, [r7, #1]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80059be:	887a      	ldrh	r2, [r7, #2]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80059c4:	e003      	b.n	80059ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80059c6:	887b      	ldrh	r3, [r7, #2]
 80059c8:	041a      	lsls	r2, r3, #16
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	619a      	str	r2, [r3, #24]
}
 80059ce:	bf00      	nop
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80059da:	b480      	push	{r7}
 80059dc:	b083      	sub	sp, #12
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
 80059e2:	460b      	mov	r3, r1
 80059e4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	695a      	ldr	r2, [r3, #20]
 80059ea:	887b      	ldrh	r3, [r7, #2]
 80059ec:	401a      	ands	r2, r3
 80059ee:	887b      	ldrh	r3, [r7, #2]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d104      	bne.n	80059fe <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80059f4:	887b      	ldrh	r3, [r7, #2]
 80059f6:	041a      	lsls	r2, r3, #16
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80059fc:	e002      	b.n	8005a04 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80059fe:	887a      	ldrh	r2, [r7, #2]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	619a      	str	r2, [r3, #24]
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005a18:	4b29      	ldr	r3, [pc, #164]	; (8005ac0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f003 0307 	and.w	r3, r3, #7
 8005a20:	2b06      	cmp	r3, #6
 8005a22:	d00a      	beq.n	8005a3a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005a24:	4b26      	ldr	r3, [pc, #152]	; (8005ac0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d001      	beq.n	8005a36 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e040      	b.n	8005ab8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005a36:	2300      	movs	r3, #0
 8005a38:	e03e      	b.n	8005ab8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005a3a:	4b21      	ldr	r3, [pc, #132]	; (8005ac0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005a42:	491f      	ldr	r1, [pc, #124]	; (8005ac0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005a4a:	f7fc f937 	bl	8001cbc <HAL_GetTick>
 8005a4e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005a50:	e009      	b.n	8005a66 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005a52:	f7fc f933 	bl	8001cbc <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a60:	d901      	bls.n	8005a66 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e028      	b.n	8005ab8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005a66:	4b16      	ldr	r3, [pc, #88]	; (8005ac0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a72:	d1ee      	bne.n	8005a52 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b1e      	cmp	r3, #30
 8005a78:	d008      	beq.n	8005a8c <HAL_PWREx_ConfigSupply+0x7c>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b2e      	cmp	r3, #46	; 0x2e
 8005a7e:	d005      	beq.n	8005a8c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b1d      	cmp	r3, #29
 8005a84:	d002      	beq.n	8005a8c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2b2d      	cmp	r3, #45	; 0x2d
 8005a8a:	d114      	bne.n	8005ab6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005a8c:	f7fc f916 	bl	8001cbc <HAL_GetTick>
 8005a90:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005a92:	e009      	b.n	8005aa8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005a94:	f7fc f912 	bl	8001cbc <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005aa2:	d901      	bls.n	8005aa8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e007      	b.n	8005ab8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005aa8:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ab4:	d1ee      	bne.n	8005a94 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	58024800 	.word	0x58024800

08005ac4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b08c      	sub	sp, #48	; 0x30
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d101      	bne.n	8005ad6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e3d7      	b.n	8006286 <HAL_RCC_OscConfig+0x7c2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f000 80b3 	beq.w	8005c4a <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ae4:	4b90      	ldr	r3, [pc, #576]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005aec:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005aee:	4b8e      	ldr	r3, [pc, #568]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af6:	2b10      	cmp	r3, #16
 8005af8:	d007      	beq.n	8005b0a <HAL_RCC_OscConfig+0x46>
 8005afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afc:	2b18      	cmp	r3, #24
 8005afe:	d112      	bne.n	8005b26 <HAL_RCC_OscConfig+0x62>
 8005b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b02:	f003 0303 	and.w	r3, r3, #3
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d10d      	bne.n	8005b26 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b0a:	4b87      	ldr	r3, [pc, #540]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f000 8098 	beq.w	8005c48 <HAL_RCC_OscConfig+0x184>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f040 8093 	bne.w	8005c48 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e3af      	b.n	8006286 <HAL_RCC_OscConfig+0x7c2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b2e:	d106      	bne.n	8005b3e <HAL_RCC_OscConfig+0x7a>
 8005b30:	4b7d      	ldr	r3, [pc, #500]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a7c      	ldr	r2, [pc, #496]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b3a:	6013      	str	r3, [r2, #0]
 8005b3c:	e058      	b.n	8005bf0 <HAL_RCC_OscConfig+0x12c>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d112      	bne.n	8005b6c <HAL_RCC_OscConfig+0xa8>
 8005b46:	4b78      	ldr	r3, [pc, #480]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a77      	ldr	r2, [pc, #476]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005b4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b50:	6013      	str	r3, [r2, #0]
 8005b52:	4b75      	ldr	r3, [pc, #468]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a74      	ldr	r2, [pc, #464]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005b58:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005b5c:	6013      	str	r3, [r2, #0]
 8005b5e:	4b72      	ldr	r3, [pc, #456]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a71      	ldr	r2, [pc, #452]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005b64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b68:	6013      	str	r3, [r2, #0]
 8005b6a:	e041      	b.n	8005bf0 <HAL_RCC_OscConfig+0x12c>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b74:	d112      	bne.n	8005b9c <HAL_RCC_OscConfig+0xd8>
 8005b76:	4b6c      	ldr	r3, [pc, #432]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a6b      	ldr	r2, [pc, #428]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b80:	6013      	str	r3, [r2, #0]
 8005b82:	4b69      	ldr	r3, [pc, #420]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a68      	ldr	r2, [pc, #416]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005b88:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005b8c:	6013      	str	r3, [r2, #0]
 8005b8e:	4b66      	ldr	r3, [pc, #408]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a65      	ldr	r2, [pc, #404]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b98:	6013      	str	r3, [r2, #0]
 8005b9a:	e029      	b.n	8005bf0 <HAL_RCC_OscConfig+0x12c>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8005ba4:	d112      	bne.n	8005bcc <HAL_RCC_OscConfig+0x108>
 8005ba6:	4b60      	ldr	r3, [pc, #384]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a5f      	ldr	r2, [pc, #380]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bb0:	6013      	str	r3, [r2, #0]
 8005bb2:	4b5d      	ldr	r3, [pc, #372]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a5c      	ldr	r2, [pc, #368]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005bb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bbc:	6013      	str	r3, [r2, #0]
 8005bbe:	4b5a      	ldr	r3, [pc, #360]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a59      	ldr	r2, [pc, #356]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bc8:	6013      	str	r3, [r2, #0]
 8005bca:	e011      	b.n	8005bf0 <HAL_RCC_OscConfig+0x12c>
 8005bcc:	4b56      	ldr	r3, [pc, #344]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a55      	ldr	r2, [pc, #340]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bd6:	6013      	str	r3, [r2, #0]
 8005bd8:	4b53      	ldr	r3, [pc, #332]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a52      	ldr	r2, [pc, #328]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005bde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005be2:	6013      	str	r3, [r2, #0]
 8005be4:	4b50      	ldr	r3, [pc, #320]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a4f      	ldr	r2, [pc, #316]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005bea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005bee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d013      	beq.n	8005c20 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf8:	f7fc f860 	bl	8001cbc <HAL_GetTick>
 8005bfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005bfe:	e008      	b.n	8005c12 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c00:	f7fc f85c 	bl	8001cbc <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	2b64      	cmp	r3, #100	; 0x64
 8005c0c:	d901      	bls.n	8005c12 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e339      	b.n	8006286 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c12:	4b45      	ldr	r3, [pc, #276]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d0f0      	beq.n	8005c00 <HAL_RCC_OscConfig+0x13c>
 8005c1e:	e014      	b.n	8005c4a <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c20:	f7fc f84c 	bl	8001cbc <HAL_GetTick>
 8005c24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c26:	e008      	b.n	8005c3a <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c28:	f7fc f848 	bl	8001cbc <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b64      	cmp	r3, #100	; 0x64
 8005c34:	d901      	bls.n	8005c3a <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e325      	b.n	8006286 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c3a:	4b3b      	ldr	r3, [pc, #236]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1f0      	bne.n	8005c28 <HAL_RCC_OscConfig+0x164>
 8005c46:	e000      	b.n	8005c4a <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d070      	beq.n	8005d38 <HAL_RCC_OscConfig+0x274>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c56:	4b34      	ldr	r3, [pc, #208]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c5e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c60:	4b31      	ldr	r3, [pc, #196]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c64:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005c66:	6a3b      	ldr	r3, [r7, #32]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d007      	beq.n	8005c7c <HAL_RCC_OscConfig+0x1b8>
 8005c6c:	6a3b      	ldr	r3, [r7, #32]
 8005c6e:	2b18      	cmp	r3, #24
 8005c70:	d11b      	bne.n	8005caa <HAL_RCC_OscConfig+0x1e6>
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	f003 0303 	and.w	r3, r3, #3
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d116      	bne.n	8005caa <HAL_RCC_OscConfig+0x1e6>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c7c:	4b2a      	ldr	r3, [pc, #168]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0304 	and.w	r3, r3, #4
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d005      	beq.n	8005c94 <HAL_RCC_OscConfig+0x1d0>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <HAL_RCC_OscConfig+0x1d0>
      {
        return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e2f8      	b.n	8006286 <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c94:	4b24      	ldr	r3, [pc, #144]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	061b      	lsls	r3, r3, #24
 8005ca2:	4921      	ldr	r1, [pc, #132]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ca8:	e046      	b.n	8005d38 <HAL_RCC_OscConfig+0x274>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d026      	beq.n	8005d00 <HAL_RCC_OscConfig+0x23c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005cb2:	4b1d      	ldr	r3, [pc, #116]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f023 0219 	bic.w	r2, r3, #25
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	491a      	ldr	r1, [pc, #104]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc4:	f7fb fffa 	bl	8001cbc <HAL_GetTick>
 8005cc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005cca:	e008      	b.n	8005cde <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ccc:	f7fb fff6 	bl	8001cbc <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d901      	bls.n	8005cde <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e2d3      	b.n	8006286 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005cde:	4b12      	ldr	r3, [pc, #72]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0304 	and.w	r3, r3, #4
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0f0      	beq.n	8005ccc <HAL_RCC_OscConfig+0x208>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cea:	4b0f      	ldr	r3, [pc, #60]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	061b      	lsls	r3, r3, #24
 8005cf8:	490b      	ldr	r1, [pc, #44]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	604b      	str	r3, [r1, #4]
 8005cfe:	e01b      	b.n	8005d38 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d00:	4b09      	ldr	r3, [pc, #36]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a08      	ldr	r2, [pc, #32]	; (8005d28 <HAL_RCC_OscConfig+0x264>)
 8005d06:	f023 0301 	bic.w	r3, r3, #1
 8005d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d0c:	f7fb ffd6 	bl	8001cbc <HAL_GetTick>
 8005d10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d12:	e00b      	b.n	8005d2c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d14:	f7fb ffd2 	bl	8001cbc <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d904      	bls.n	8005d2c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e2af      	b.n	8006286 <HAL_RCC_OscConfig+0x7c2>
 8005d26:	bf00      	nop
 8005d28:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d2c:	4b99      	ldr	r3, [pc, #612]	; (8005f94 <HAL_RCC_OscConfig+0x4d0>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1ed      	bne.n	8005d14 <HAL_RCC_OscConfig+0x250>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0310 	and.w	r3, r3, #16
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d06a      	beq.n	8005e1a <HAL_RCC_OscConfig+0x356>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d44:	4b93      	ldr	r3, [pc, #588]	; (8005f94 <HAL_RCC_OscConfig+0x4d0>)
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d4c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d4e:	4b91      	ldr	r3, [pc, #580]	; (8005f94 <HAL_RCC_OscConfig+0x4d0>)
 8005d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d52:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	2b08      	cmp	r3, #8
 8005d58:	d007      	beq.n	8005d6a <HAL_RCC_OscConfig+0x2a6>
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	2b18      	cmp	r3, #24
 8005d5e:	d11b      	bne.n	8005d98 <HAL_RCC_OscConfig+0x2d4>
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	f003 0303 	and.w	r3, r3, #3
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d116      	bne.n	8005d98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d6a:	4b8a      	ldr	r3, [pc, #552]	; (8005f94 <HAL_RCC_OscConfig+0x4d0>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d005      	beq.n	8005d82 <HAL_RCC_OscConfig+0x2be>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	2b80      	cmp	r3, #128	; 0x80
 8005d7c:	d001      	beq.n	8005d82 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e281      	b.n	8006286 <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d82:	4b84      	ldr	r3, [pc, #528]	; (8005f94 <HAL_RCC_OscConfig+0x4d0>)
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	061b      	lsls	r3, r3, #24
 8005d90:	4980      	ldr	r1, [pc, #512]	; (8005f94 <HAL_RCC_OscConfig+0x4d0>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d96:	e040      	b.n	8005e1a <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	69db      	ldr	r3, [r3, #28]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d023      	beq.n	8005de8 <HAL_RCC_OscConfig+0x324>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005da0:	4b7c      	ldr	r3, [pc, #496]	; (8005f94 <HAL_RCC_OscConfig+0x4d0>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a7b      	ldr	r2, [pc, #492]	; (8005f94 <HAL_RCC_OscConfig+0x4d0>)
 8005da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005daa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dac:	f7fb ff86 	bl	8001cbc <HAL_GetTick>
 8005db0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005db2:	e008      	b.n	8005dc6 <HAL_RCC_OscConfig+0x302>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005db4:	f7fb ff82 	bl	8001cbc <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d901      	bls.n	8005dc6 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e25f      	b.n	8006286 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005dc6:	4b73      	ldr	r3, [pc, #460]	; (8005f94 <HAL_RCC_OscConfig+0x4d0>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d0f0      	beq.n	8005db4 <HAL_RCC_OscConfig+0x2f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005dd2:	4b70      	ldr	r3, [pc, #448]	; (8005f94 <HAL_RCC_OscConfig+0x4d0>)
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	061b      	lsls	r3, r3, #24
 8005de0:	496c      	ldr	r1, [pc, #432]	; (8005f94 <HAL_RCC_OscConfig+0x4d0>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	60cb      	str	r3, [r1, #12]
 8005de6:	e018      	b.n	8005e1a <HAL_RCC_OscConfig+0x356>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005de8:	4b6a      	ldr	r3, [pc, #424]	; (8005f94 <HAL_RCC_OscConfig+0x4d0>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a69      	ldr	r2, [pc, #420]	; (8005f94 <HAL_RCC_OscConfig+0x4d0>)
 8005dee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df4:	f7fb ff62 	bl	8001cbc <HAL_GetTick>
 8005df8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005dfa:	e008      	b.n	8005e0e <HAL_RCC_OscConfig+0x34a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005dfc:	f7fb ff5e 	bl	8001cbc <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d901      	bls.n	8005e0e <HAL_RCC_OscConfig+0x34a>
          {
            return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e23b      	b.n	8006286 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e0e:	4b61      	ldr	r3, [pc, #388]	; (8005f94 <HAL_RCC_OscConfig+0x4d0>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1f0      	bne.n	8005dfc <HAL_RCC_OscConfig+0x338>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0308 	and.w	r3, r3, #8
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d036      	beq.n	8005e94 <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d019      	beq.n	8005e62 <HAL_RCC_OscConfig+0x39e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e2e:	4b59      	ldr	r3, [pc, #356]	; (8005f94 <HAL_RCC_OscConfig+0x4d0>)
 8005e30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e32:	4a58      	ldr	r2, [pc, #352]	; (8005f94 <HAL_RCC_OscConfig+0x4d0>)
 8005e34:	f043 0301 	orr.w	r3, r3, #1
 8005e38:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e3a:	f7fb ff3f 	bl	8001cbc <HAL_GetTick>
 8005e3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e40:	e008      	b.n	8005e54 <HAL_RCC_OscConfig+0x390>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e42:	f7fb ff3b 	bl	8001cbc <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d901      	bls.n	8005e54 <HAL_RCC_OscConfig+0x390>
        {
          return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e218      	b.n	8006286 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e54:	4b4f      	ldr	r3, [pc, #316]	; (8005f94 <HAL_RCC_OscConfig+0x4d0>)
 8005e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d0f0      	beq.n	8005e42 <HAL_RCC_OscConfig+0x37e>
 8005e60:	e018      	b.n	8005e94 <HAL_RCC_OscConfig+0x3d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e62:	4b4c      	ldr	r3, [pc, #304]	; (8005f94 <HAL_RCC_OscConfig+0x4d0>)
 8005e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e66:	4a4b      	ldr	r2, [pc, #300]	; (8005f94 <HAL_RCC_OscConfig+0x4d0>)
 8005e68:	f023 0301 	bic.w	r3, r3, #1
 8005e6c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e6e:	f7fb ff25 	bl	8001cbc <HAL_GetTick>
 8005e72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e74:	e008      	b.n	8005e88 <HAL_RCC_OscConfig+0x3c4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e76:	f7fb ff21 	bl	8001cbc <HAL_GetTick>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d901      	bls.n	8005e88 <HAL_RCC_OscConfig+0x3c4>
        {
          return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e1fe      	b.n	8006286 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e88:	4b42      	ldr	r3, [pc, #264]	; (8005f94 <HAL_RCC_OscConfig+0x4d0>)
 8005e8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e8c:	f003 0302 	and.w	r3, r3, #2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1f0      	bne.n	8005e76 <HAL_RCC_OscConfig+0x3b2>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0320 	and.w	r3, r3, #32
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d036      	beq.n	8005f0e <HAL_RCC_OscConfig+0x44a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d019      	beq.n	8005edc <HAL_RCC_OscConfig+0x418>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ea8:	4b3a      	ldr	r3, [pc, #232]	; (8005f94 <HAL_RCC_OscConfig+0x4d0>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a39      	ldr	r2, [pc, #228]	; (8005f94 <HAL_RCC_OscConfig+0x4d0>)
 8005eae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005eb2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005eb4:	f7fb ff02 	bl	8001cbc <HAL_GetTick>
 8005eb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005eba:	e008      	b.n	8005ece <HAL_RCC_OscConfig+0x40a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005ebc:	f7fb fefe 	bl	8001cbc <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d901      	bls.n	8005ece <HAL_RCC_OscConfig+0x40a>
        {
          return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e1db      	b.n	8006286 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ece:	4b31      	ldr	r3, [pc, #196]	; (8005f94 <HAL_RCC_OscConfig+0x4d0>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d0f0      	beq.n	8005ebc <HAL_RCC_OscConfig+0x3f8>
 8005eda:	e018      	b.n	8005f0e <HAL_RCC_OscConfig+0x44a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005edc:	4b2d      	ldr	r3, [pc, #180]	; (8005f94 <HAL_RCC_OscConfig+0x4d0>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a2c      	ldr	r2, [pc, #176]	; (8005f94 <HAL_RCC_OscConfig+0x4d0>)
 8005ee2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ee6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005ee8:	f7fb fee8 	bl	8001cbc <HAL_GetTick>
 8005eec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005eee:	e008      	b.n	8005f02 <HAL_RCC_OscConfig+0x43e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005ef0:	f7fb fee4 	bl	8001cbc <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e1c1      	b.n	8006286 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f02:	4b24      	ldr	r3, [pc, #144]	; (8005f94 <HAL_RCC_OscConfig+0x4d0>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1f0      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x42c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0304 	and.w	r3, r3, #4
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	f000 80af 	beq.w	800607a <HAL_RCC_OscConfig+0x5b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005f1c:	4b1e      	ldr	r3, [pc, #120]	; (8005f98 <HAL_RCC_OscConfig+0x4d4>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a1d      	ldr	r2, [pc, #116]	; (8005f98 <HAL_RCC_OscConfig+0x4d4>)
 8005f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f28:	f7fb fec8 	bl	8001cbc <HAL_GetTick>
 8005f2c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f2e:	e008      	b.n	8005f42 <HAL_RCC_OscConfig+0x47e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005f30:	f7fb fec4 	bl	8001cbc <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	2b64      	cmp	r3, #100	; 0x64
 8005f3c:	d901      	bls.n	8005f42 <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e1a1      	b.n	8006286 <HAL_RCC_OscConfig+0x7c2>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f42:	4b15      	ldr	r3, [pc, #84]	; (8005f98 <HAL_RCC_OscConfig+0x4d4>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d0f0      	beq.n	8005f30 <HAL_RCC_OscConfig+0x46c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d106      	bne.n	8005f64 <HAL_RCC_OscConfig+0x4a0>
 8005f56:	4b0f      	ldr	r3, [pc, #60]	; (8005f94 <HAL_RCC_OscConfig+0x4d0>)
 8005f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5a:	4a0e      	ldr	r2, [pc, #56]	; (8005f94 <HAL_RCC_OscConfig+0x4d0>)
 8005f5c:	f043 0301 	orr.w	r3, r3, #1
 8005f60:	6713      	str	r3, [r2, #112]	; 0x70
 8005f62:	e05b      	b.n	800601c <HAL_RCC_OscConfig+0x558>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d117      	bne.n	8005f9c <HAL_RCC_OscConfig+0x4d8>
 8005f6c:	4b09      	ldr	r3, [pc, #36]	; (8005f94 <HAL_RCC_OscConfig+0x4d0>)
 8005f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f70:	4a08      	ldr	r2, [pc, #32]	; (8005f94 <HAL_RCC_OscConfig+0x4d0>)
 8005f72:	f023 0301 	bic.w	r3, r3, #1
 8005f76:	6713      	str	r3, [r2, #112]	; 0x70
 8005f78:	4b06      	ldr	r3, [pc, #24]	; (8005f94 <HAL_RCC_OscConfig+0x4d0>)
 8005f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f7c:	4a05      	ldr	r2, [pc, #20]	; (8005f94 <HAL_RCC_OscConfig+0x4d0>)
 8005f7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f82:	6713      	str	r3, [r2, #112]	; 0x70
 8005f84:	4b03      	ldr	r3, [pc, #12]	; (8005f94 <HAL_RCC_OscConfig+0x4d0>)
 8005f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f88:	4a02      	ldr	r2, [pc, #8]	; (8005f94 <HAL_RCC_OscConfig+0x4d0>)
 8005f8a:	f023 0304 	bic.w	r3, r3, #4
 8005f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f90:	e044      	b.n	800601c <HAL_RCC_OscConfig+0x558>
 8005f92:	bf00      	nop
 8005f94:	58024400 	.word	0x58024400
 8005f98:	58024800 	.word	0x58024800
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	2b05      	cmp	r3, #5
 8005fa2:	d112      	bne.n	8005fca <HAL_RCC_OscConfig+0x506>
 8005fa4:	4b95      	ldr	r3, [pc, #596]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 8005fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa8:	4a94      	ldr	r2, [pc, #592]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 8005faa:	f043 0304 	orr.w	r3, r3, #4
 8005fae:	6713      	str	r3, [r2, #112]	; 0x70
 8005fb0:	4b92      	ldr	r3, [pc, #584]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 8005fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb4:	4a91      	ldr	r2, [pc, #580]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 8005fb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fba:	6713      	str	r3, [r2, #112]	; 0x70
 8005fbc:	4b8f      	ldr	r3, [pc, #572]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 8005fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc0:	4a8e      	ldr	r2, [pc, #568]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 8005fc2:	f043 0301 	orr.w	r3, r3, #1
 8005fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8005fc8:	e028      	b.n	800601c <HAL_RCC_OscConfig+0x558>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	2b85      	cmp	r3, #133	; 0x85
 8005fd0:	d112      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x534>
 8005fd2:	4b8a      	ldr	r3, [pc, #552]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 8005fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd6:	4a89      	ldr	r2, [pc, #548]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 8005fd8:	f043 0304 	orr.w	r3, r3, #4
 8005fdc:	6713      	str	r3, [r2, #112]	; 0x70
 8005fde:	4b87      	ldr	r3, [pc, #540]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 8005fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe2:	4a86      	ldr	r2, [pc, #536]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 8005fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fe8:	6713      	str	r3, [r2, #112]	; 0x70
 8005fea:	4b84      	ldr	r3, [pc, #528]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 8005fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fee:	4a83      	ldr	r2, [pc, #524]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 8005ff0:	f043 0301 	orr.w	r3, r3, #1
 8005ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8005ff6:	e011      	b.n	800601c <HAL_RCC_OscConfig+0x558>
 8005ff8:	4b80      	ldr	r3, [pc, #512]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 8005ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffc:	4a7f      	ldr	r2, [pc, #508]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 8005ffe:	f023 0301 	bic.w	r3, r3, #1
 8006002:	6713      	str	r3, [r2, #112]	; 0x70
 8006004:	4b7d      	ldr	r3, [pc, #500]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 8006006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006008:	4a7c      	ldr	r2, [pc, #496]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 800600a:	f023 0304 	bic.w	r3, r3, #4
 800600e:	6713      	str	r3, [r2, #112]	; 0x70
 8006010:	4b7a      	ldr	r3, [pc, #488]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 8006012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006014:	4a79      	ldr	r2, [pc, #484]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 8006016:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800601a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d015      	beq.n	8006050 <HAL_RCC_OscConfig+0x58c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006024:	f7fb fe4a 	bl	8001cbc <HAL_GetTick>
 8006028:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800602a:	e00a      	b.n	8006042 <HAL_RCC_OscConfig+0x57e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800602c:	f7fb fe46 	bl	8001cbc <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	f241 3288 	movw	r2, #5000	; 0x1388
 800603a:	4293      	cmp	r3, r2
 800603c:	d901      	bls.n	8006042 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e121      	b.n	8006286 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006042:	4b6e      	ldr	r3, [pc, #440]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 8006044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006046:	f003 0302 	and.w	r3, r3, #2
 800604a:	2b00      	cmp	r3, #0
 800604c:	d0ee      	beq.n	800602c <HAL_RCC_OscConfig+0x568>
 800604e:	e014      	b.n	800607a <HAL_RCC_OscConfig+0x5b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006050:	f7fb fe34 	bl	8001cbc <HAL_GetTick>
 8006054:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006056:	e00a      	b.n	800606e <HAL_RCC_OscConfig+0x5aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006058:	f7fb fe30 	bl	8001cbc <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	f241 3288 	movw	r2, #5000	; 0x1388
 8006066:	4293      	cmp	r3, r2
 8006068:	d901      	bls.n	800606e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e10b      	b.n	8006286 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800606e:	4b63      	ldr	r3, [pc, #396]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 8006070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006072:	f003 0302 	and.w	r3, r3, #2
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1ee      	bne.n	8006058 <HAL_RCC_OscConfig+0x594>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607e:	2b00      	cmp	r3, #0
 8006080:	f000 8100 	beq.w	8006284 <HAL_RCC_OscConfig+0x7c0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006084:	4b5d      	ldr	r3, [pc, #372]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800608c:	2b18      	cmp	r3, #24
 800608e:	f000 80bb 	beq.w	8006208 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006096:	2b02      	cmp	r3, #2
 8006098:	f040 8095 	bne.w	80061c6 <HAL_RCC_OscConfig+0x702>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800609c:	4b57      	ldr	r3, [pc, #348]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a56      	ldr	r2, [pc, #344]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 80060a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a8:	f7fb fe08 	bl	8001cbc <HAL_GetTick>
 80060ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060ae:	e008      	b.n	80060c2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060b0:	f7fb fe04 	bl	8001cbc <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d901      	bls.n	80060c2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e0e1      	b.n	8006286 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060c2:	4b4e      	ldr	r3, [pc, #312]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1f0      	bne.n	80060b0 <HAL_RCC_OscConfig+0x5ec>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060ce:	4b4b      	ldr	r3, [pc, #300]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 80060d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060d2:	4b4b      	ldr	r3, [pc, #300]	; (8006200 <HAL_RCC_OscConfig+0x73c>)
 80060d4:	4013      	ands	r3, r2
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80060de:	0112      	lsls	r2, r2, #4
 80060e0:	430a      	orrs	r2, r1
 80060e2:	4946      	ldr	r1, [pc, #280]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 80060e4:	4313      	orrs	r3, r2
 80060e6:	628b      	str	r3, [r1, #40]	; 0x28
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ec:	3b01      	subs	r3, #1
 80060ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060f6:	3b01      	subs	r3, #1
 80060f8:	025b      	lsls	r3, r3, #9
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	431a      	orrs	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006102:	3b01      	subs	r3, #1
 8006104:	041b      	lsls	r3, r3, #16
 8006106:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800610a:	431a      	orrs	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006110:	3b01      	subs	r3, #1
 8006112:	061b      	lsls	r3, r3, #24
 8006114:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006118:	4938      	ldr	r1, [pc, #224]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 800611a:	4313      	orrs	r3, r2
 800611c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800611e:	4b37      	ldr	r3, [pc, #220]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 8006120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006122:	4a36      	ldr	r2, [pc, #216]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 8006124:	f023 0301 	bic.w	r3, r3, #1
 8006128:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800612a:	4b34      	ldr	r3, [pc, #208]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 800612c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800612e:	4b35      	ldr	r3, [pc, #212]	; (8006204 <HAL_RCC_OscConfig+0x740>)
 8006130:	4013      	ands	r3, r2
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006136:	00d2      	lsls	r2, r2, #3
 8006138:	4930      	ldr	r1, [pc, #192]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 800613a:	4313      	orrs	r3, r2
 800613c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800613e:	4b2f      	ldr	r3, [pc, #188]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 8006140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006142:	f023 020c 	bic.w	r2, r3, #12
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614a:	492c      	ldr	r1, [pc, #176]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 800614c:	4313      	orrs	r3, r2
 800614e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006150:	4b2a      	ldr	r3, [pc, #168]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 8006152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006154:	f023 0202 	bic.w	r2, r3, #2
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800615c:	4927      	ldr	r1, [pc, #156]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 800615e:	4313      	orrs	r3, r2
 8006160:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006162:	4b26      	ldr	r3, [pc, #152]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 8006164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006166:	4a25      	ldr	r2, [pc, #148]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 8006168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800616c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800616e:	4b23      	ldr	r3, [pc, #140]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 8006170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006172:	4a22      	ldr	r2, [pc, #136]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 8006174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006178:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800617a:	4b20      	ldr	r3, [pc, #128]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 800617c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617e:	4a1f      	ldr	r2, [pc, #124]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 8006180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006184:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006186:	4b1d      	ldr	r3, [pc, #116]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 8006188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618a:	4a1c      	ldr	r2, [pc, #112]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 800618c:	f043 0301 	orr.w	r3, r3, #1
 8006190:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006192:	4b1a      	ldr	r3, [pc, #104]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a19      	ldr	r2, [pc, #100]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 8006198:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800619c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800619e:	f7fb fd8d 	bl	8001cbc <HAL_GetTick>
 80061a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80061a4:	e008      	b.n	80061b8 <HAL_RCC_OscConfig+0x6f4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061a6:	f7fb fd89 	bl	8001cbc <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d901      	bls.n	80061b8 <HAL_RCC_OscConfig+0x6f4>
          {
            return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e066      	b.n	8006286 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80061b8:	4b10      	ldr	r3, [pc, #64]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d0f0      	beq.n	80061a6 <HAL_RCC_OscConfig+0x6e2>
 80061c4:	e05e      	b.n	8006284 <HAL_RCC_OscConfig+0x7c0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061c6:	4b0d      	ldr	r3, [pc, #52]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a0c      	ldr	r2, [pc, #48]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 80061cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d2:	f7fb fd73 	bl	8001cbc <HAL_GetTick>
 80061d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061d8:	e008      	b.n	80061ec <HAL_RCC_OscConfig+0x728>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061da:	f7fb fd6f 	bl	8001cbc <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d901      	bls.n	80061ec <HAL_RCC_OscConfig+0x728>
          {
            return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e04c      	b.n	8006286 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061ec:	4b03      	ldr	r3, [pc, #12]	; (80061fc <HAL_RCC_OscConfig+0x738>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1f0      	bne.n	80061da <HAL_RCC_OscConfig+0x716>
 80061f8:	e044      	b.n	8006284 <HAL_RCC_OscConfig+0x7c0>
 80061fa:	bf00      	nop
 80061fc:	58024400 	.word	0x58024400
 8006200:	fffffc0c 	.word	0xfffffc0c
 8006204:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006208:	4b21      	ldr	r3, [pc, #132]	; (8006290 <HAL_RCC_OscConfig+0x7cc>)
 800620a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800620e:	4b20      	ldr	r3, [pc, #128]	; (8006290 <HAL_RCC_OscConfig+0x7cc>)
 8006210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006212:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	2b01      	cmp	r3, #1
 800621a:	d031      	beq.n	8006280 <HAL_RCC_OscConfig+0x7bc>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	f003 0203 	and.w	r2, r3, #3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006226:	429a      	cmp	r2, r3
 8006228:	d12a      	bne.n	8006280 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	091b      	lsrs	r3, r3, #4
 800622e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006236:	429a      	cmp	r2, r3
 8006238:	d122      	bne.n	8006280 <HAL_RCC_OscConfig+0x7bc>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006244:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006246:	429a      	cmp	r2, r3
 8006248:	d11a      	bne.n	8006280 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	0a5b      	lsrs	r3, r3, #9
 800624e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006256:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006258:	429a      	cmp	r2, r3
 800625a:	d111      	bne.n	8006280 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	0c1b      	lsrs	r3, r3, #16
 8006260:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006268:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800626a:	429a      	cmp	r2, r3
 800626c:	d108      	bne.n	8006280 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	0e1b      	lsrs	r3, r3, #24
 8006272:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800627a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800627c:	429a      	cmp	r2, r3
 800627e:	d001      	beq.n	8006284 <HAL_RCC_OscConfig+0x7c0>
      {
        return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e000      	b.n	8006286 <HAL_RCC_OscConfig+0x7c2>
      }
    }
  }
  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3730      	adds	r7, #48	; 0x30
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	58024400 	.word	0x58024400

08006294 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d101      	bne.n	80062a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e19c      	b.n	80065e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062a8:	4b8a      	ldr	r3, [pc, #552]	; (80064d4 <HAL_RCC_ClockConfig+0x240>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 030f 	and.w	r3, r3, #15
 80062b0:	683a      	ldr	r2, [r7, #0]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d910      	bls.n	80062d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062b6:	4b87      	ldr	r3, [pc, #540]	; (80064d4 <HAL_RCC_ClockConfig+0x240>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f023 020f 	bic.w	r2, r3, #15
 80062be:	4985      	ldr	r1, [pc, #532]	; (80064d4 <HAL_RCC_ClockConfig+0x240>)
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062c6:	4b83      	ldr	r3, [pc, #524]	; (80064d4 <HAL_RCC_ClockConfig+0x240>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 030f 	and.w	r3, r3, #15
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d001      	beq.n	80062d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e184      	b.n	80065e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0304 	and.w	r3, r3, #4
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d010      	beq.n	8006306 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	691a      	ldr	r2, [r3, #16]
 80062e8:	4b7b      	ldr	r3, [pc, #492]	; (80064d8 <HAL_RCC_ClockConfig+0x244>)
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d908      	bls.n	8006306 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80062f4:	4b78      	ldr	r3, [pc, #480]	; (80064d8 <HAL_RCC_ClockConfig+0x244>)
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	4975      	ldr	r1, [pc, #468]	; (80064d8 <HAL_RCC_ClockConfig+0x244>)
 8006302:	4313      	orrs	r3, r2
 8006304:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0308 	and.w	r3, r3, #8
 800630e:	2b00      	cmp	r3, #0
 8006310:	d010      	beq.n	8006334 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	695a      	ldr	r2, [r3, #20]
 8006316:	4b70      	ldr	r3, [pc, #448]	; (80064d8 <HAL_RCC_ClockConfig+0x244>)
 8006318:	69db      	ldr	r3, [r3, #28]
 800631a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800631e:	429a      	cmp	r2, r3
 8006320:	d908      	bls.n	8006334 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006322:	4b6d      	ldr	r3, [pc, #436]	; (80064d8 <HAL_RCC_ClockConfig+0x244>)
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	496a      	ldr	r1, [pc, #424]	; (80064d8 <HAL_RCC_ClockConfig+0x244>)
 8006330:	4313      	orrs	r3, r2
 8006332:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0310 	and.w	r3, r3, #16
 800633c:	2b00      	cmp	r3, #0
 800633e:	d010      	beq.n	8006362 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	699a      	ldr	r2, [r3, #24]
 8006344:	4b64      	ldr	r3, [pc, #400]	; (80064d8 <HAL_RCC_ClockConfig+0x244>)
 8006346:	69db      	ldr	r3, [r3, #28]
 8006348:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800634c:	429a      	cmp	r2, r3
 800634e:	d908      	bls.n	8006362 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006350:	4b61      	ldr	r3, [pc, #388]	; (80064d8 <HAL_RCC_ClockConfig+0x244>)
 8006352:	69db      	ldr	r3, [r3, #28]
 8006354:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	495e      	ldr	r1, [pc, #376]	; (80064d8 <HAL_RCC_ClockConfig+0x244>)
 800635e:	4313      	orrs	r3, r2
 8006360:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0320 	and.w	r3, r3, #32
 800636a:	2b00      	cmp	r3, #0
 800636c:	d010      	beq.n	8006390 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	69da      	ldr	r2, [r3, #28]
 8006372:	4b59      	ldr	r3, [pc, #356]	; (80064d8 <HAL_RCC_ClockConfig+0x244>)
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800637a:	429a      	cmp	r2, r3
 800637c:	d908      	bls.n	8006390 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800637e:	4b56      	ldr	r3, [pc, #344]	; (80064d8 <HAL_RCC_ClockConfig+0x244>)
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	69db      	ldr	r3, [r3, #28]
 800638a:	4953      	ldr	r1, [pc, #332]	; (80064d8 <HAL_RCC_ClockConfig+0x244>)
 800638c:	4313      	orrs	r3, r2
 800638e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0302 	and.w	r3, r3, #2
 8006398:	2b00      	cmp	r3, #0
 800639a:	d010      	beq.n	80063be <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	68da      	ldr	r2, [r3, #12]
 80063a0:	4b4d      	ldr	r3, [pc, #308]	; (80064d8 <HAL_RCC_ClockConfig+0x244>)
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	f003 030f 	and.w	r3, r3, #15
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d908      	bls.n	80063be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063ac:	4b4a      	ldr	r3, [pc, #296]	; (80064d8 <HAL_RCC_ClockConfig+0x244>)
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	f023 020f 	bic.w	r2, r3, #15
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	4947      	ldr	r1, [pc, #284]	; (80064d8 <HAL_RCC_ClockConfig+0x244>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0301 	and.w	r3, r3, #1
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d055      	beq.n	8006476 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80063ca:	4b43      	ldr	r3, [pc, #268]	; (80064d8 <HAL_RCC_ClockConfig+0x244>)
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	4940      	ldr	r1, [pc, #256]	; (80064d8 <HAL_RCC_ClockConfig+0x244>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d107      	bne.n	80063f4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80063e4:	4b3c      	ldr	r3, [pc, #240]	; (80064d8 <HAL_RCC_ClockConfig+0x244>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d121      	bne.n	8006434 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e0f6      	b.n	80065e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	2b03      	cmp	r3, #3
 80063fa:	d107      	bne.n	800640c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80063fc:	4b36      	ldr	r3, [pc, #216]	; (80064d8 <HAL_RCC_ClockConfig+0x244>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d115      	bne.n	8006434 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e0ea      	b.n	80065e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d107      	bne.n	8006424 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006414:	4b30      	ldr	r3, [pc, #192]	; (80064d8 <HAL_RCC_ClockConfig+0x244>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800641c:	2b00      	cmp	r3, #0
 800641e:	d109      	bne.n	8006434 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e0de      	b.n	80065e2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006424:	4b2c      	ldr	r3, [pc, #176]	; (80064d8 <HAL_RCC_ClockConfig+0x244>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0304 	and.w	r3, r3, #4
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e0d6      	b.n	80065e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006434:	4b28      	ldr	r3, [pc, #160]	; (80064d8 <HAL_RCC_ClockConfig+0x244>)
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	f023 0207 	bic.w	r2, r3, #7
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	4925      	ldr	r1, [pc, #148]	; (80064d8 <HAL_RCC_ClockConfig+0x244>)
 8006442:	4313      	orrs	r3, r2
 8006444:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006446:	f7fb fc39 	bl	8001cbc <HAL_GetTick>
 800644a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800644c:	e00a      	b.n	8006464 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800644e:	f7fb fc35 	bl	8001cbc <HAL_GetTick>
 8006452:	4602      	mov	r2, r0
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	f241 3288 	movw	r2, #5000	; 0x1388
 800645c:	4293      	cmp	r3, r2
 800645e:	d901      	bls.n	8006464 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	e0be      	b.n	80065e2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006464:	4b1c      	ldr	r3, [pc, #112]	; (80064d8 <HAL_RCC_ClockConfig+0x244>)
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	00db      	lsls	r3, r3, #3
 8006472:	429a      	cmp	r2, r3
 8006474:	d1eb      	bne.n	800644e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0302 	and.w	r3, r3, #2
 800647e:	2b00      	cmp	r3, #0
 8006480:	d010      	beq.n	80064a4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68da      	ldr	r2, [r3, #12]
 8006486:	4b14      	ldr	r3, [pc, #80]	; (80064d8 <HAL_RCC_ClockConfig+0x244>)
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	f003 030f 	and.w	r3, r3, #15
 800648e:	429a      	cmp	r2, r3
 8006490:	d208      	bcs.n	80064a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006492:	4b11      	ldr	r3, [pc, #68]	; (80064d8 <HAL_RCC_ClockConfig+0x244>)
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	f023 020f 	bic.w	r2, r3, #15
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	490e      	ldr	r1, [pc, #56]	; (80064d8 <HAL_RCC_ClockConfig+0x244>)
 80064a0:	4313      	orrs	r3, r2
 80064a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80064a4:	4b0b      	ldr	r3, [pc, #44]	; (80064d4 <HAL_RCC_ClockConfig+0x240>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 030f 	and.w	r3, r3, #15
 80064ac:	683a      	ldr	r2, [r7, #0]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d214      	bcs.n	80064dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064b2:	4b08      	ldr	r3, [pc, #32]	; (80064d4 <HAL_RCC_ClockConfig+0x240>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f023 020f 	bic.w	r2, r3, #15
 80064ba:	4906      	ldr	r1, [pc, #24]	; (80064d4 <HAL_RCC_ClockConfig+0x240>)
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	4313      	orrs	r3, r2
 80064c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064c2:	4b04      	ldr	r3, [pc, #16]	; (80064d4 <HAL_RCC_ClockConfig+0x240>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 030f 	and.w	r3, r3, #15
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d005      	beq.n	80064dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e086      	b.n	80065e2 <HAL_RCC_ClockConfig+0x34e>
 80064d4:	52002000 	.word	0x52002000
 80064d8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0304 	and.w	r3, r3, #4
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d010      	beq.n	800650a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	691a      	ldr	r2, [r3, #16]
 80064ec:	4b3f      	ldr	r3, [pc, #252]	; (80065ec <HAL_RCC_ClockConfig+0x358>)
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d208      	bcs.n	800650a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80064f8:	4b3c      	ldr	r3, [pc, #240]	; (80065ec <HAL_RCC_ClockConfig+0x358>)
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	4939      	ldr	r1, [pc, #228]	; (80065ec <HAL_RCC_ClockConfig+0x358>)
 8006506:	4313      	orrs	r3, r2
 8006508:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0308 	and.w	r3, r3, #8
 8006512:	2b00      	cmp	r3, #0
 8006514:	d010      	beq.n	8006538 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	695a      	ldr	r2, [r3, #20]
 800651a:	4b34      	ldr	r3, [pc, #208]	; (80065ec <HAL_RCC_ClockConfig+0x358>)
 800651c:	69db      	ldr	r3, [r3, #28]
 800651e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006522:	429a      	cmp	r2, r3
 8006524:	d208      	bcs.n	8006538 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006526:	4b31      	ldr	r3, [pc, #196]	; (80065ec <HAL_RCC_ClockConfig+0x358>)
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	492e      	ldr	r1, [pc, #184]	; (80065ec <HAL_RCC_ClockConfig+0x358>)
 8006534:	4313      	orrs	r3, r2
 8006536:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0310 	and.w	r3, r3, #16
 8006540:	2b00      	cmp	r3, #0
 8006542:	d010      	beq.n	8006566 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	699a      	ldr	r2, [r3, #24]
 8006548:	4b28      	ldr	r3, [pc, #160]	; (80065ec <HAL_RCC_ClockConfig+0x358>)
 800654a:	69db      	ldr	r3, [r3, #28]
 800654c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006550:	429a      	cmp	r2, r3
 8006552:	d208      	bcs.n	8006566 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006554:	4b25      	ldr	r3, [pc, #148]	; (80065ec <HAL_RCC_ClockConfig+0x358>)
 8006556:	69db      	ldr	r3, [r3, #28]
 8006558:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	4922      	ldr	r1, [pc, #136]	; (80065ec <HAL_RCC_ClockConfig+0x358>)
 8006562:	4313      	orrs	r3, r2
 8006564:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0320 	and.w	r3, r3, #32
 800656e:	2b00      	cmp	r3, #0
 8006570:	d010      	beq.n	8006594 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	69da      	ldr	r2, [r3, #28]
 8006576:	4b1d      	ldr	r3, [pc, #116]	; (80065ec <HAL_RCC_ClockConfig+0x358>)
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800657e:	429a      	cmp	r2, r3
 8006580:	d208      	bcs.n	8006594 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006582:	4b1a      	ldr	r3, [pc, #104]	; (80065ec <HAL_RCC_ClockConfig+0x358>)
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	69db      	ldr	r3, [r3, #28]
 800658e:	4917      	ldr	r1, [pc, #92]	; (80065ec <HAL_RCC_ClockConfig+0x358>)
 8006590:	4313      	orrs	r3, r2
 8006592:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006594:	f000 f834 	bl	8006600 <HAL_RCC_GetSysClockFreq>
 8006598:	4601      	mov	r1, r0
 800659a:	4b14      	ldr	r3, [pc, #80]	; (80065ec <HAL_RCC_ClockConfig+0x358>)
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	0a1b      	lsrs	r3, r3, #8
 80065a0:	f003 030f 	and.w	r3, r3, #15
 80065a4:	4a12      	ldr	r2, [pc, #72]	; (80065f0 <HAL_RCC_ClockConfig+0x35c>)
 80065a6:	5cd3      	ldrb	r3, [r2, r3]
 80065a8:	f003 031f 	and.w	r3, r3, #31
 80065ac:	fa21 f303 	lsr.w	r3, r1, r3
 80065b0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80065b2:	4b0e      	ldr	r3, [pc, #56]	; (80065ec <HAL_RCC_ClockConfig+0x358>)
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	f003 030f 	and.w	r3, r3, #15
 80065ba:	4a0d      	ldr	r2, [pc, #52]	; (80065f0 <HAL_RCC_ClockConfig+0x35c>)
 80065bc:	5cd3      	ldrb	r3, [r2, r3]
 80065be:	f003 031f 	and.w	r3, r3, #31
 80065c2:	693a      	ldr	r2, [r7, #16]
 80065c4:	fa22 f303 	lsr.w	r3, r2, r3
 80065c8:	4a0a      	ldr	r2, [pc, #40]	; (80065f4 <HAL_RCC_ClockConfig+0x360>)
 80065ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80065cc:	4a0a      	ldr	r2, [pc, #40]	; (80065f8 <HAL_RCC_ClockConfig+0x364>)
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80065d2:	4b0a      	ldr	r3, [pc, #40]	; (80065fc <HAL_RCC_ClockConfig+0x368>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7fb fb26 	bl	8001c28 <HAL_InitTick>
 80065dc:	4603      	mov	r3, r0
 80065de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80065e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3718      	adds	r7, #24
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	58024400 	.word	0x58024400
 80065f0:	0800bc90 	.word	0x0800bc90
 80065f4:	24000010 	.word	0x24000010
 80065f8:	2400000c 	.word	0x2400000c
 80065fc:	24000014 	.word	0x24000014

08006600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006600:	b480      	push	{r7}
 8006602:	b089      	sub	sp, #36	; 0x24
 8006604:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006606:	4baf      	ldr	r3, [pc, #700]	; (80068c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800660e:	2b18      	cmp	r3, #24
 8006610:	f200 814e 	bhi.w	80068b0 <HAL_RCC_GetSysClockFreq+0x2b0>
 8006614:	a201      	add	r2, pc, #4	; (adr r2, 800661c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661a:	bf00      	nop
 800661c:	08006681 	.word	0x08006681
 8006620:	080068b1 	.word	0x080068b1
 8006624:	080068b1 	.word	0x080068b1
 8006628:	080068b1 	.word	0x080068b1
 800662c:	080068b1 	.word	0x080068b1
 8006630:	080068b1 	.word	0x080068b1
 8006634:	080068b1 	.word	0x080068b1
 8006638:	080068b1 	.word	0x080068b1
 800663c:	080066a7 	.word	0x080066a7
 8006640:	080068b1 	.word	0x080068b1
 8006644:	080068b1 	.word	0x080068b1
 8006648:	080068b1 	.word	0x080068b1
 800664c:	080068b1 	.word	0x080068b1
 8006650:	080068b1 	.word	0x080068b1
 8006654:	080068b1 	.word	0x080068b1
 8006658:	080068b1 	.word	0x080068b1
 800665c:	080066ad 	.word	0x080066ad
 8006660:	080068b1 	.word	0x080068b1
 8006664:	080068b1 	.word	0x080068b1
 8006668:	080068b1 	.word	0x080068b1
 800666c:	080068b1 	.word	0x080068b1
 8006670:	080068b1 	.word	0x080068b1
 8006674:	080068b1 	.word	0x080068b1
 8006678:	080068b1 	.word	0x080068b1
 800667c:	080066b3 	.word	0x080066b3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006680:	4b90      	ldr	r3, [pc, #576]	; (80068c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0320 	and.w	r3, r3, #32
 8006688:	2b00      	cmp	r3, #0
 800668a:	d009      	beq.n	80066a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800668c:	4b8d      	ldr	r3, [pc, #564]	; (80068c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	08db      	lsrs	r3, r3, #3
 8006692:	f003 0303 	and.w	r3, r3, #3
 8006696:	4a8c      	ldr	r2, [pc, #560]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006698:	fa22 f303 	lsr.w	r3, r2, r3
 800669c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800669e:	e10a      	b.n	80068b6 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80066a0:	4b89      	ldr	r3, [pc, #548]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80066a2:	61bb      	str	r3, [r7, #24]
    break;
 80066a4:	e107      	b.n	80068b6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80066a6:	4b89      	ldr	r3, [pc, #548]	; (80068cc <HAL_RCC_GetSysClockFreq+0x2cc>)
 80066a8:	61bb      	str	r3, [r7, #24]
    break;
 80066aa:	e104      	b.n	80068b6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80066ac:	4b88      	ldr	r3, [pc, #544]	; (80068d0 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80066ae:	61bb      	str	r3, [r7, #24]
    break;
 80066b0:	e101      	b.n	80068b6 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066b2:	4b84      	ldr	r3, [pc, #528]	; (80068c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80066b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b6:	f003 0303 	and.w	r3, r3, #3
 80066ba:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80066bc:	4b81      	ldr	r3, [pc, #516]	; (80068c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80066be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c0:	091b      	lsrs	r3, r3, #4
 80066c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066c6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80066c8:	4b7e      	ldr	r3, [pc, #504]	; (80068c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80066ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066cc:	f003 0301 	and.w	r3, r3, #1
 80066d0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80066d2:	4b7c      	ldr	r3, [pc, #496]	; (80068c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80066d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d6:	08db      	lsrs	r3, r3, #3
 80066d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	fb02 f303 	mul.w	r3, r2, r3
 80066e2:	ee07 3a90 	vmov	s15, r3
 80066e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ea:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f000 80da 	beq.w	80068aa <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d05a      	beq.n	80067b2 <HAL_RCC_GetSysClockFreq+0x1b2>
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d302      	bcc.n	8006706 <HAL_RCC_GetSysClockFreq+0x106>
 8006700:	2b02      	cmp	r3, #2
 8006702:	d078      	beq.n	80067f6 <HAL_RCC_GetSysClockFreq+0x1f6>
 8006704:	e099      	b.n	800683a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006706:	4b6f      	ldr	r3, [pc, #444]	; (80068c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0320 	and.w	r3, r3, #32
 800670e:	2b00      	cmp	r3, #0
 8006710:	d02d      	beq.n	800676e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006712:	4b6c      	ldr	r3, [pc, #432]	; (80068c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	08db      	lsrs	r3, r3, #3
 8006718:	f003 0303 	and.w	r3, r3, #3
 800671c:	4a6a      	ldr	r2, [pc, #424]	; (80068c8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800671e:	fa22 f303 	lsr.w	r3, r2, r3
 8006722:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	ee07 3a90 	vmov	s15, r3
 800672a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	ee07 3a90 	vmov	s15, r3
 8006734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006738:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800673c:	4b61      	ldr	r3, [pc, #388]	; (80068c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800673e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006744:	ee07 3a90 	vmov	s15, r3
 8006748:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800674c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006750:	eddf 5a60 	vldr	s11, [pc, #384]	; 80068d4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006754:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006758:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800675c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006760:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006768:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800676c:	e087      	b.n	800687e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	ee07 3a90 	vmov	s15, r3
 8006774:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006778:	eddf 6a57 	vldr	s13, [pc, #348]	; 80068d8 <HAL_RCC_GetSysClockFreq+0x2d8>
 800677c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006780:	4b50      	ldr	r3, [pc, #320]	; (80068c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006788:	ee07 3a90 	vmov	s15, r3
 800678c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006790:	ed97 6a02 	vldr	s12, [r7, #8]
 8006794:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80068d4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006798:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800679c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067b0:	e065      	b.n	800687e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	ee07 3a90 	vmov	s15, r3
 80067b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067bc:	eddf 6a47 	vldr	s13, [pc, #284]	; 80068dc <HAL_RCC_GetSysClockFreq+0x2dc>
 80067c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067c4:	4b3f      	ldr	r3, [pc, #252]	; (80068c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80067c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067cc:	ee07 3a90 	vmov	s15, r3
 80067d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067d4:	ed97 6a02 	vldr	s12, [r7, #8]
 80067d8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80068d4 <HAL_RCC_GetSysClockFreq+0x2d4>
 80067dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067f4:	e043      	b.n	800687e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	ee07 3a90 	vmov	s15, r3
 80067fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006800:	eddf 6a37 	vldr	s13, [pc, #220]	; 80068e0 <HAL_RCC_GetSysClockFreq+0x2e0>
 8006804:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006808:	4b2e      	ldr	r3, [pc, #184]	; (80068c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800680a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006810:	ee07 3a90 	vmov	s15, r3
 8006814:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006818:	ed97 6a02 	vldr	s12, [r7, #8]
 800681c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80068d4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006820:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006824:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006828:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800682c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006830:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006834:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006838:	e021      	b.n	800687e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	ee07 3a90 	vmov	s15, r3
 8006840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006844:	eddf 6a25 	vldr	s13, [pc, #148]	; 80068dc <HAL_RCC_GetSysClockFreq+0x2dc>
 8006848:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800684c:	4b1d      	ldr	r3, [pc, #116]	; (80068c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800684e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006854:	ee07 3a90 	vmov	s15, r3
 8006858:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800685c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006860:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80068d4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006864:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006868:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800686c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006870:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006874:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006878:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800687c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800687e:	4b11      	ldr	r3, [pc, #68]	; (80068c4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006882:	0a5b      	lsrs	r3, r3, #9
 8006884:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006888:	3301      	adds	r3, #1
 800688a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	ee07 3a90 	vmov	s15, r3
 8006892:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006896:	edd7 6a07 	vldr	s13, [r7, #28]
 800689a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800689e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068a2:	ee17 3a90 	vmov	r3, s15
 80068a6:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80068a8:	e005      	b.n	80068b6 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80068aa:	2300      	movs	r3, #0
 80068ac:	61bb      	str	r3, [r7, #24]
    break;
 80068ae:	e002      	b.n	80068b6 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80068b0:	4b06      	ldr	r3, [pc, #24]	; (80068cc <HAL_RCC_GetSysClockFreq+0x2cc>)
 80068b2:	61bb      	str	r3, [r7, #24]
    break;
 80068b4:	bf00      	nop
  }

  return sysclockfreq;
 80068b6:	69bb      	ldr	r3, [r7, #24]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3724      	adds	r7, #36	; 0x24
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr
 80068c4:	58024400 	.word	0x58024400
 80068c8:	03d09000 	.word	0x03d09000
 80068cc:	003d0900 	.word	0x003d0900
 80068d0:	007a1200 	.word	0x007a1200
 80068d4:	46000000 	.word	0x46000000
 80068d8:	4c742400 	.word	0x4c742400
 80068dc:	4a742400 	.word	0x4a742400
 80068e0:	4af42400 	.word	0x4af42400

080068e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80068ea:	f7ff fe89 	bl	8006600 <HAL_RCC_GetSysClockFreq>
 80068ee:	4601      	mov	r1, r0
 80068f0:	4b10      	ldr	r3, [pc, #64]	; (8006934 <HAL_RCC_GetHCLKFreq+0x50>)
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	0a1b      	lsrs	r3, r3, #8
 80068f6:	f003 030f 	and.w	r3, r3, #15
 80068fa:	4a0f      	ldr	r2, [pc, #60]	; (8006938 <HAL_RCC_GetHCLKFreq+0x54>)
 80068fc:	5cd3      	ldrb	r3, [r2, r3]
 80068fe:	f003 031f 	and.w	r3, r3, #31
 8006902:	fa21 f303 	lsr.w	r3, r1, r3
 8006906:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006908:	4b0a      	ldr	r3, [pc, #40]	; (8006934 <HAL_RCC_GetHCLKFreq+0x50>)
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	f003 030f 	and.w	r3, r3, #15
 8006910:	4a09      	ldr	r2, [pc, #36]	; (8006938 <HAL_RCC_GetHCLKFreq+0x54>)
 8006912:	5cd3      	ldrb	r3, [r2, r3]
 8006914:	f003 031f 	and.w	r3, r3, #31
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	fa22 f303 	lsr.w	r3, r2, r3
 800691e:	4a07      	ldr	r2, [pc, #28]	; (800693c <HAL_RCC_GetHCLKFreq+0x58>)
 8006920:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006922:	4a07      	ldr	r2, [pc, #28]	; (8006940 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006928:	4b04      	ldr	r3, [pc, #16]	; (800693c <HAL_RCC_GetHCLKFreq+0x58>)
 800692a:	681b      	ldr	r3, [r3, #0]
}
 800692c:	4618      	mov	r0, r3
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	58024400 	.word	0x58024400
 8006938:	0800bc90 	.word	0x0800bc90
 800693c:	24000010 	.word	0x24000010
 8006940:	2400000c 	.word	0x2400000c

08006944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8006948:	f7ff ffcc 	bl	80068e4 <HAL_RCC_GetHCLKFreq>
 800694c:	4601      	mov	r1, r0
 800694e:	4b06      	ldr	r3, [pc, #24]	; (8006968 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006950:	69db      	ldr	r3, [r3, #28]
 8006952:	091b      	lsrs	r3, r3, #4
 8006954:	f003 0307 	and.w	r3, r3, #7
 8006958:	4a04      	ldr	r2, [pc, #16]	; (800696c <HAL_RCC_GetPCLK1Freq+0x28>)
 800695a:	5cd3      	ldrb	r3, [r2, r3]
 800695c:	f003 031f 	and.w	r3, r3, #31
 8006960:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 8006964:	4618      	mov	r0, r3
 8006966:	bd80      	pop	{r7, pc}
 8006968:	58024400 	.word	0x58024400
 800696c:	0800bc90 	.word	0x0800bc90

08006970 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8006974:	f7ff ffb6 	bl	80068e4 <HAL_RCC_GetHCLKFreq>
 8006978:	4601      	mov	r1, r0
 800697a:	4b06      	ldr	r3, [pc, #24]	; (8006994 <HAL_RCC_GetPCLK2Freq+0x24>)
 800697c:	69db      	ldr	r3, [r3, #28]
 800697e:	0a1b      	lsrs	r3, r3, #8
 8006980:	f003 0307 	and.w	r3, r3, #7
 8006984:	4a04      	ldr	r2, [pc, #16]	; (8006998 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006986:	5cd3      	ldrb	r3, [r2, r3]
 8006988:	f003 031f 	and.w	r3, r3, #31
 800698c:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 8006990:	4618      	mov	r0, r3
 8006992:	bd80      	pop	{r7, pc}
 8006994:	58024400 	.word	0x58024400
 8006998:	0800bc90 	.word	0x0800bc90

0800699c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b086      	sub	sp, #24
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80069a4:	2300      	movs	r3, #0
 80069a6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80069a8:	2300      	movs	r3, #0
 80069aa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d03d      	beq.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069c0:	d013      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80069c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069c6:	d802      	bhi.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x32>
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d007      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x40>
 80069cc:	e01f      	b.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x72>
 80069ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069d2:	d013      	beq.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x60>
 80069d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80069d8:	d01c      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80069da:	e018      	b.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069dc:	4bad      	ldr	r3, [pc, #692]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80069de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e0:	4aac      	ldr	r2, [pc, #688]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80069e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80069e8:	e015      	b.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	3304      	adds	r3, #4
 80069ee:	2102      	movs	r1, #2
 80069f0:	4618      	mov	r0, r3
 80069f2:	f001 fca7 	bl	8008344 <RCCEx_PLL2_Config>
 80069f6:	4603      	mov	r3, r0
 80069f8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80069fa:	e00c      	b.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	3324      	adds	r3, #36	; 0x24
 8006a00:	2102      	movs	r1, #2
 8006a02:	4618      	mov	r0, r3
 8006a04:	f001 fd50 	bl	80084a8 <RCCEx_PLL3_Config>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006a0c:	e003      	b.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	75fb      	strb	r3, [r7, #23]
      break;
 8006a12:	e000      	b.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006a14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a16:	7dfb      	ldrb	r3, [r7, #23]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d109      	bne.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006a1c:	4b9d      	ldr	r3, [pc, #628]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a28:	499a      	ldr	r1, [pc, #616]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	650b      	str	r3, [r1, #80]	; 0x50
 8006a2e:	e001      	b.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a30:	7dfb      	ldrb	r3, [r7, #23]
 8006a32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d03d      	beq.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a44:	2b04      	cmp	r3, #4
 8006a46:	d826      	bhi.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006a48:	a201      	add	r2, pc, #4	; (adr r2, 8006a50 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a4e:	bf00      	nop
 8006a50:	08006a65 	.word	0x08006a65
 8006a54:	08006a73 	.word	0x08006a73
 8006a58:	08006a85 	.word	0x08006a85
 8006a5c:	08006a9d 	.word	0x08006a9d
 8006a60:	08006a9d 	.word	0x08006a9d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a64:	4b8b      	ldr	r3, [pc, #556]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a68:	4a8a      	ldr	r2, [pc, #552]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006a6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a70:	e015      	b.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	3304      	adds	r3, #4
 8006a76:	2100      	movs	r1, #0
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f001 fc63 	bl	8008344 <RCCEx_PLL2_Config>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a82:	e00c      	b.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	3324      	adds	r3, #36	; 0x24
 8006a88:	2100      	movs	r1, #0
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f001 fd0c 	bl	80084a8 <RCCEx_PLL3_Config>
 8006a90:	4603      	mov	r3, r0
 8006a92:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a94:	e003      	b.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	75fb      	strb	r3, [r7, #23]
      break;
 8006a9a:	e000      	b.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006a9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a9e:	7dfb      	ldrb	r3, [r7, #23]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d109      	bne.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006aa4:	4b7b      	ldr	r3, [pc, #492]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aa8:	f023 0207 	bic.w	r2, r3, #7
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ab0:	4978      	ldr	r1, [pc, #480]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	650b      	str	r3, [r1, #80]	; 0x50
 8006ab6:	e001      	b.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ab8:	7dfb      	ldrb	r3, [r7, #23]
 8006aba:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d043      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006acc:	2b80      	cmp	r3, #128	; 0x80
 8006ace:	d01f      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8006ad0:	2b80      	cmp	r3, #128	; 0x80
 8006ad2:	d804      	bhi.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00b      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006ad8:	2b40      	cmp	r3, #64	; 0x40
 8006ada:	d010      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x162>
 8006adc:	e021      	b.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006ade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ae2:	d021      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006ae4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006ae8:	d020      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006aea:	2bc0      	cmp	r3, #192	; 0xc0
 8006aec:	d020      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8006aee:	e018      	b.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006af0:	4b68      	ldr	r3, [pc, #416]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af4:	4a67      	ldr	r2, [pc, #412]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006afa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8006afc:	e019      	b.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x196>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	3304      	adds	r3, #4
 8006b02:	2100      	movs	r1, #0
 8006b04:	4618      	mov	r0, r3
 8006b06:	f001 fc1d 	bl	8008344 <RCCEx_PLL2_Config>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8006b0e:	e010      	b.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x196>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	3324      	adds	r3, #36	; 0x24
 8006b14:	2100      	movs	r1, #0
 8006b16:	4618      	mov	r0, r3
 8006b18:	f001 fcc6 	bl	80084a8 <RCCEx_PLL3_Config>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8006b20:	e007      	b.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x196>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	75fb      	strb	r3, [r7, #23]
      break;
 8006b26:	e004      	b.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 8006b28:	bf00      	nop
 8006b2a:	e002      	b.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 8006b2c:	bf00      	nop
 8006b2e:	e000      	b.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 8006b30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b32:	7dfb      	ldrb	r3, [r7, #23]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d109      	bne.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8006b38:	4b56      	ldr	r3, [pc, #344]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b3c:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b44:	4953      	ldr	r1, [pc, #332]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	650b      	str	r3, [r1, #80]	; 0x50
 8006b4a:	e001      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b4c:	7dfb      	ldrb	r3, [r7, #23]
 8006b4e:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d047      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b64:	d022      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x210>
 8006b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b6a:	d805      	bhi.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00d      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8006b70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b74:	d011      	beq.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8006b76:	e022      	b.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006b78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b7c:	d022      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8006b7e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006b82:	d021      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8006b84:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006b88:	d020      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006b8a:	e018      	b.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x222>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b8c:	4b41      	ldr	r3, [pc, #260]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b90:	4a40      	ldr	r2, [pc, #256]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006b92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006b98:	e019      	b.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x232>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	3304      	adds	r3, #4
 8006b9e:	2100      	movs	r1, #0
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f001 fbcf 	bl	8008344 <RCCEx_PLL2_Config>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006baa:	e010      	b.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x232>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	3324      	adds	r3, #36	; 0x24
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f001 fc78 	bl	80084a8 <RCCEx_PLL3_Config>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006bbc:	e007      	b.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x232>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	75fb      	strb	r3, [r7, #23]
      break;
 8006bc2:	e004      	b.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 8006bc4:	bf00      	nop
 8006bc6:	e002      	b.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 8006bc8:	bf00      	nop
 8006bca:	e000      	b.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 8006bcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bce:	7dfb      	ldrb	r3, [r7, #23]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d109      	bne.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8006bd4:	4b2f      	ldr	r3, [pc, #188]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bd8:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006be0:	492c      	ldr	r1, [pc, #176]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	650b      	str	r3, [r1, #80]	; 0x50
 8006be6:	e001      	b.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x250>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be8:	7dfb      	ldrb	r3, [r7, #23]
 8006bea:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d032      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bfc:	2b10      	cmp	r3, #16
 8006bfe:	d009      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8006c00:	2b10      	cmp	r3, #16
 8006c02:	d802      	bhi.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d018      	beq.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x29e>
 8006c08:	e014      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006c0a:	2b20      	cmp	r3, #32
 8006c0c:	d009      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006c0e:	2b30      	cmp	r3, #48	; 0x30
 8006c10:	d015      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 8006c12:	e00f      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x298>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c14:	4b1f      	ldr	r3, [pc, #124]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c18:	4a1e      	ldr	r2, [pc, #120]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006c1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006c20:	e00e      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x2a4>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	3304      	adds	r3, #4
 8006c26:	2102      	movs	r1, #2
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f001 fb8b 	bl	8008344 <RCCEx_PLL2_Config>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006c32:	e005      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	75fb      	strb	r3, [r7, #23]
      break;
 8006c38:	e002      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      break;
 8006c3a:	bf00      	nop
 8006c3c:	e000      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      break;
 8006c3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c40:	7dfb      	ldrb	r3, [r7, #23]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d109      	bne.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006c46:	4b13      	ldr	r3, [pc, #76]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c4a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c52:	4910      	ldr	r1, [pc, #64]	; (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006c54:	4313      	orrs	r3, r2
 8006c56:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006c58:	e001      	b.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c5a:	7dfb      	ldrb	r3, [r7, #23]
 8006c5c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d044      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c72:	d021      	beq.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8006c74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c78:	d805      	bhi.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00c      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c82:	d010      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8006c84:	e021      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006c86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c8a:	d021      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x334>
 8006c8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c90:	d020      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8006c92:	e01a      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006c94:	58024400 	.word	0x58024400
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c98:	4ba6      	ldr	r3, [pc, #664]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9c:	4aa5      	ldr	r2, [pc, #660]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006c9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ca2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006ca4:	e017      	b.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x33a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	3304      	adds	r3, #4
 8006caa:	2100      	movs	r1, #0
 8006cac:	4618      	mov	r0, r3
 8006cae:	f001 fb49 	bl	8008344 <RCCEx_PLL2_Config>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006cb6:	e00e      	b.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x33a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	3324      	adds	r3, #36	; 0x24
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f001 fbf2 	bl	80084a8 <RCCEx_PLL3_Config>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006cc8:	e005      	b.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x33a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	75fb      	strb	r3, [r7, #23]
      break;
 8006cce:	e002      	b.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x33a>
      break;
 8006cd0:	bf00      	nop
 8006cd2:	e000      	b.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x33a>
      break;
 8006cd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cd6:	7dfb      	ldrb	r3, [r7, #23]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d109      	bne.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x354>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006cdc:	4b95      	ldr	r3, [pc, #596]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ce0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ce8:	4992      	ldr	r1, [pc, #584]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006cea:	4313      	orrs	r3, r2
 8006cec:	650b      	str	r3, [r1, #80]	; 0x50
 8006cee:	e001      	b.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x358>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cf0:	7dfb      	ldrb	r3, [r7, #23]
 8006cf2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d042      	beq.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d08:	d01b      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 8006d0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d0e:	d805      	bhi.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x380>
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d022      	beq.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x3be>
 8006d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d18:	d00a      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x394>
 8006d1a:	e01b      	b.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8006d1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d20:	d01d      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8006d22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d26:	d01c      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8006d28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d2c:	d01b      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8006d2e:	e011      	b.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	3304      	adds	r3, #4
 8006d34:	2101      	movs	r1, #1
 8006d36:	4618      	mov	r0, r3
 8006d38:	f001 fb04 	bl	8008344 <RCCEx_PLL2_Config>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006d40:	e012      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	3324      	adds	r3, #36	; 0x24
 8006d46:	2101      	movs	r1, #1
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f001 fbad 	bl	80084a8 <RCCEx_PLL3_Config>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006d52:	e009      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	75fb      	strb	r3, [r7, #23]
      break;
 8006d58:	e006      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006d5a:	bf00      	nop
 8006d5c:	e004      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006d5e:	bf00      	nop
 8006d60:	e002      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006d62:	bf00      	nop
 8006d64:	e000      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006d66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d68:	7dfb      	ldrb	r3, [r7, #23]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d109      	bne.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006d6e:	4b71      	ldr	r3, [pc, #452]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d72:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d7a:	496e      	ldr	r1, [pc, #440]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	650b      	str	r3, [r1, #80]	; 0x50
 8006d80:	e001      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d82:	7dfb      	ldrb	r3, [r7, #23]
 8006d84:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d049      	beq.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006d98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d9c:	d02a      	beq.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8006d9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006da2:	d808      	bhi.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006da4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006da8:	d00f      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006daa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dae:	d015      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d021      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8006db4:	e01b      	b.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x452>
 8006db6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006dba:	d01f      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x460>
 8006dbc:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006dc0:	d01e      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8006dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc6:	d01d      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8006dc8:	e011      	b.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x452>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	3304      	adds	r3, #4
 8006dce:	2101      	movs	r1, #1
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f001 fab7 	bl	8008344 <RCCEx_PLL2_Config>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006dda:	e014      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	3324      	adds	r3, #36	; 0x24
 8006de0:	2101      	movs	r1, #1
 8006de2:	4618      	mov	r0, r3
 8006de4:	f001 fb60 	bl	80084a8 <RCCEx_PLL3_Config>
 8006de8:	4603      	mov	r3, r0
 8006dea:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006dec:	e00b      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	75fb      	strb	r3, [r7, #23]
      break;
 8006df2:	e008      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006df4:	bf00      	nop
 8006df6:	e006      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006df8:	bf00      	nop
 8006dfa:	e004      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006dfc:	bf00      	nop
 8006dfe:	e002      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006e00:	bf00      	nop
 8006e02:	e000      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006e04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e06:	7dfb      	ldrb	r3, [r7, #23]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d10a      	bne.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x486>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006e0c:	4b49      	ldr	r3, [pc, #292]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e10:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006e1a:	4946      	ldr	r1, [pc, #280]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	658b      	str	r3, [r1, #88]	; 0x58
 8006e20:	e001      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e22:	7dfb      	ldrb	r3, [r7, #23]
 8006e24:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d02d      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e3a:	d005      	beq.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8006e3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e40:	d009      	beq.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d013      	beq.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006e46:	e00f      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e48:	4b3a      	ldr	r3, [pc, #232]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e4c:	4a39      	ldr	r2, [pc, #228]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006e54:	e00c      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x4d4>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	3304      	adds	r3, #4
 8006e5a:	2101      	movs	r1, #1
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f001 fa71 	bl	8008344 <RCCEx_PLL2_Config>
 8006e62:	4603      	mov	r3, r0
 8006e64:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006e66:	e003      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e6c:	e000      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      break;
 8006e6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e70:	7dfb      	ldrb	r3, [r7, #23]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d109      	bne.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006e76:	4b2f      	ldr	r3, [pc, #188]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e82:	492c      	ldr	r1, [pc, #176]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006e84:	4313      	orrs	r3, r2
 8006e86:	650b      	str	r3, [r1, #80]	; 0x50
 8006e88:	e001      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e8a:	7dfb      	ldrb	r3, [r7, #23]
 8006e8c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d031      	beq.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x562>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e9e:	2b03      	cmp	r3, #3
 8006ea0:	d81a      	bhi.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x53c>
 8006ea2:	a201      	add	r2, pc, #4	; (adr r2, 8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea8:	08006edf 	.word	0x08006edf
 8006eac:	08006eb9 	.word	0x08006eb9
 8006eb0:	08006ec7 	.word	0x08006ec7
 8006eb4:	08006edf 	.word	0x08006edf
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eb8:	4b1e      	ldr	r3, [pc, #120]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ebc:	4a1d      	ldr	r2, [pc, #116]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ec2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006ec4:	e00c      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x544>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	3304      	adds	r3, #4
 8006eca:	2102      	movs	r1, #2
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f001 fa39 	bl	8008344 <RCCEx_PLL2_Config>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006ed6:	e003      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	75fb      	strb	r3, [r7, #23]
      break;
 8006edc:	e000      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      break;
 8006ede:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ee0:	7dfb      	ldrb	r3, [r7, #23]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d109      	bne.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006ee6:	4b13      	ldr	r3, [pc, #76]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eea:	f023 0203 	bic.w	r2, r3, #3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ef2:	4910      	ldr	r1, [pc, #64]	; (8006f34 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006ef8:	e001      	b.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x562>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006efa:	7dfb      	ldrb	r3, [r7, #23]
 8006efc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	f000 808a 	beq.w	8007020 <HAL_RCCEx_PeriphCLKConfig+0x684>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f0c:	4b0a      	ldr	r3, [pc, #40]	; (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a09      	ldr	r2, [pc, #36]	; (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8006f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f18:	f7fa fed0 	bl	8001cbc <HAL_GetTick>
 8006f1c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f1e:	e00d      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f20:	f7fa fecc 	bl	8001cbc <HAL_GetTick>
 8006f24:	4602      	mov	r2, r0
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	2b64      	cmp	r3, #100	; 0x64
 8006f2c:	d906      	bls.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        ret = HAL_TIMEOUT;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	75fb      	strb	r3, [r7, #23]
        break;
 8006f32:	e009      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8006f34:	58024400 	.word	0x58024400
 8006f38:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f3c:	4bba      	ldr	r3, [pc, #744]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x88c>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d0eb      	beq.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x584>
      }
    }

    if(ret == HAL_OK)
 8006f48:	7dfb      	ldrb	r3, [r7, #23]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d166      	bne.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006f4e:	4bb7      	ldr	r3, [pc, #732]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f58:	4053      	eors	r3, r2
 8006f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d013      	beq.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f62:	4bb2      	ldr	r3, [pc, #712]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f6a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f6c:	4baf      	ldr	r3, [pc, #700]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f70:	4aae      	ldr	r2, [pc, #696]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f76:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f78:	4bac      	ldr	r3, [pc, #688]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f7c:	4aab      	ldr	r2, [pc, #684]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f82:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006f84:	4aa9      	ldr	r2, [pc, #676]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f94:	d115      	bne.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x626>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f96:	f7fa fe91 	bl	8001cbc <HAL_GetTick>
 8006f9a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f9c:	e00b      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f9e:	f7fa fe8d 	bl	8001cbc <HAL_GetTick>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d902      	bls.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
          {
            ret = HAL_TIMEOUT;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	75fb      	strb	r3, [r7, #23]
            break;
 8006fb4:	e005      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x626>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006fb6:	4b9d      	ldr	r3, [pc, #628]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fba:	f003 0302 	and.w	r3, r3, #2
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d0ed      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x602>
          }
        }
      }

      if(ret == HAL_OK)
 8006fc2:	7dfb      	ldrb	r3, [r7, #23]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d126      	bne.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fd6:	d10d      	bne.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x658>
 8006fd8:	4b94      	ldr	r3, [pc, #592]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006fe6:	0919      	lsrs	r1, r3, #4
 8006fe8:	4b91      	ldr	r3, [pc, #580]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8006fea:	400b      	ands	r3, r1
 8006fec:	498f      	ldr	r1, [pc, #572]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	610b      	str	r3, [r1, #16]
 8006ff2:	e005      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006ff4:	4b8d      	ldr	r3, [pc, #564]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	4a8c      	ldr	r2, [pc, #560]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006ffa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006ffe:	6113      	str	r3, [r2, #16]
 8007000:	4b8a      	ldr	r3, [pc, #552]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8007002:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800700a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800700e:	4987      	ldr	r1, [pc, #540]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8007010:	4313      	orrs	r3, r2
 8007012:	670b      	str	r3, [r1, #112]	; 0x70
 8007014:	e004      	b.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x684>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007016:	7dfb      	ldrb	r3, [r7, #23]
 8007018:	75bb      	strb	r3, [r7, #22]
 800701a:	e001      	b.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x684>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800701c:	7dfb      	ldrb	r3, [r7, #23]
 800701e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0301 	and.w	r3, r3, #1
 8007028:	2b00      	cmp	r3, #0
 800702a:	d07f      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x790>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007032:	2b28      	cmp	r3, #40	; 0x28
 8007034:	d866      	bhi.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x768>
 8007036:	a201      	add	r2, pc, #4	; (adr r2, 800703c <HAL_RCCEx_PeriphCLKConfig+0x6a0>)
 8007038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800703c:	0800710b 	.word	0x0800710b
 8007040:	08007105 	.word	0x08007105
 8007044:	08007105 	.word	0x08007105
 8007048:	08007105 	.word	0x08007105
 800704c:	08007105 	.word	0x08007105
 8007050:	08007105 	.word	0x08007105
 8007054:	08007105 	.word	0x08007105
 8007058:	08007105 	.word	0x08007105
 800705c:	080070e1 	.word	0x080070e1
 8007060:	08007105 	.word	0x08007105
 8007064:	08007105 	.word	0x08007105
 8007068:	08007105 	.word	0x08007105
 800706c:	08007105 	.word	0x08007105
 8007070:	08007105 	.word	0x08007105
 8007074:	08007105 	.word	0x08007105
 8007078:	08007105 	.word	0x08007105
 800707c:	080070f3 	.word	0x080070f3
 8007080:	08007105 	.word	0x08007105
 8007084:	08007105 	.word	0x08007105
 8007088:	08007105 	.word	0x08007105
 800708c:	08007105 	.word	0x08007105
 8007090:	08007105 	.word	0x08007105
 8007094:	08007105 	.word	0x08007105
 8007098:	08007105 	.word	0x08007105
 800709c:	0800710b 	.word	0x0800710b
 80070a0:	08007105 	.word	0x08007105
 80070a4:	08007105 	.word	0x08007105
 80070a8:	08007105 	.word	0x08007105
 80070ac:	08007105 	.word	0x08007105
 80070b0:	08007105 	.word	0x08007105
 80070b4:	08007105 	.word	0x08007105
 80070b8:	08007105 	.word	0x08007105
 80070bc:	0800710b 	.word	0x0800710b
 80070c0:	08007105 	.word	0x08007105
 80070c4:	08007105 	.word	0x08007105
 80070c8:	08007105 	.word	0x08007105
 80070cc:	08007105 	.word	0x08007105
 80070d0:	08007105 	.word	0x08007105
 80070d4:	08007105 	.word	0x08007105
 80070d8:	08007105 	.word	0x08007105
 80070dc:	0800710b 	.word	0x0800710b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	3304      	adds	r3, #4
 80070e4:	2101      	movs	r1, #1
 80070e6:	4618      	mov	r0, r3
 80070e8:	f001 f92c 	bl	8008344 <RCCEx_PLL2_Config>
 80070ec:	4603      	mov	r3, r0
 80070ee:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80070f0:	e00c      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x770>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	3324      	adds	r3, #36	; 0x24
 80070f6:	2101      	movs	r1, #1
 80070f8:	4618      	mov	r0, r3
 80070fa:	f001 f9d5 	bl	80084a8 <RCCEx_PLL3_Config>
 80070fe:	4603      	mov	r3, r0
 8007100:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007102:	e003      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x770>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	75fb      	strb	r3, [r7, #23]
      break;
 8007108:	e000      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x770>
      break;
 800710a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800710c:	7dfb      	ldrb	r3, [r7, #23]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10a      	bne.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x78c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007112:	4b46      	ldr	r3, [pc, #280]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8007114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007116:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007120:	4942      	ldr	r1, [pc, #264]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8007122:	4313      	orrs	r3, r2
 8007124:	654b      	str	r3, [r1, #84]	; 0x54
 8007126:	e001      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x790>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007128:	7dfb      	ldrb	r3, [r7, #23]
 800712a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0302 	and.w	r3, r3, #2
 8007134:	2b00      	cmp	r3, #0
 8007136:	d038      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x80e>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800713c:	2b05      	cmp	r3, #5
 800713e:	d821      	bhi.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
 8007140:	a201      	add	r2, pc, #4	; (adr r2, 8007148 <HAL_RCCEx_PeriphCLKConfig+0x7ac>)
 8007142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007146:	bf00      	nop
 8007148:	0800718b 	.word	0x0800718b
 800714c:	08007161 	.word	0x08007161
 8007150:	08007173 	.word	0x08007173
 8007154:	0800718b 	.word	0x0800718b
 8007158:	0800718b 	.word	0x0800718b
 800715c:	0800718b 	.word	0x0800718b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	3304      	adds	r3, #4
 8007164:	2101      	movs	r1, #1
 8007166:	4618      	mov	r0, r3
 8007168:	f001 f8ec 	bl	8008344 <RCCEx_PLL2_Config>
 800716c:	4603      	mov	r3, r0
 800716e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007170:	e00c      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x7f0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	3324      	adds	r3, #36	; 0x24
 8007176:	2101      	movs	r1, #1
 8007178:	4618      	mov	r0, r3
 800717a:	f001 f995 	bl	80084a8 <RCCEx_PLL3_Config>
 800717e:	4603      	mov	r3, r0
 8007180:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007182:	e003      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	75fb      	strb	r3, [r7, #23]
      break;
 8007188:	e000      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      break;
 800718a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800718c:	7dfb      	ldrb	r3, [r7, #23]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d109      	bne.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007192:	4b26      	ldr	r3, [pc, #152]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8007194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007196:	f023 0207 	bic.w	r2, r3, #7
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800719e:	4923      	ldr	r1, [pc, #140]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80071a0:	4313      	orrs	r3, r2
 80071a2:	654b      	str	r3, [r1, #84]	; 0x54
 80071a4:	e001      	b.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x80e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071a6:	7dfb      	ldrb	r3, [r7, #23]
 80071a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 0304 	and.w	r3, r3, #4
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d040      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x89c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071bc:	2b05      	cmp	r3, #5
 80071be:	d821      	bhi.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x868>
 80071c0:	a201      	add	r2, pc, #4	; (adr r2, 80071c8 <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 80071c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c6:	bf00      	nop
 80071c8:	0800720b 	.word	0x0800720b
 80071cc:	080071e1 	.word	0x080071e1
 80071d0:	080071f3 	.word	0x080071f3
 80071d4:	0800720b 	.word	0x0800720b
 80071d8:	0800720b 	.word	0x0800720b
 80071dc:	0800720b 	.word	0x0800720b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	3304      	adds	r3, #4
 80071e4:	2101      	movs	r1, #1
 80071e6:	4618      	mov	r0, r3
 80071e8:	f001 f8ac 	bl	8008344 <RCCEx_PLL2_Config>
 80071ec:	4603      	mov	r3, r0
 80071ee:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80071f0:	e00c      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x870>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	3324      	adds	r3, #36	; 0x24
 80071f6:	2101      	movs	r1, #1
 80071f8:	4618      	mov	r0, r3
 80071fa:	f001 f955 	bl	80084a8 <RCCEx_PLL3_Config>
 80071fe:	4603      	mov	r3, r0
 8007200:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007202:	e003      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x870>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	75fb      	strb	r3, [r7, #23]
      break;
 8007208:	e000      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x870>
      break;
 800720a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800720c:	7dfb      	ldrb	r3, [r7, #23]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d110      	bne.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x898>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007212:	4b06      	ldr	r3, [pc, #24]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8007214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007216:	f023 0207 	bic.w	r2, r3, #7
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007220:	4902      	ldr	r1, [pc, #8]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8007222:	4313      	orrs	r3, r2
 8007224:	658b      	str	r3, [r1, #88]	; 0x58
 8007226:	e007      	b.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 8007228:	58024800 	.word	0x58024800
 800722c:	58024400 	.word	0x58024400
 8007230:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007234:	7dfb      	ldrb	r3, [r7, #23]
 8007236:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0320 	and.w	r3, r3, #32
 8007240:	2b00      	cmp	r3, #0
 8007242:	d044      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800724a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800724e:	d01b      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8007250:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007254:	d805      	bhi.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 8007256:	2b00      	cmp	r3, #0
 8007258:	d022      	beq.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x904>
 800725a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800725e:	d00a      	beq.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x8da>
 8007260:	e01b      	b.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8007262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007266:	d01d      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x908>
 8007268:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800726c:	d01c      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
 800726e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007272:	d01b      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x910>
 8007274:	e011      	b.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	3304      	adds	r3, #4
 800727a:	2100      	movs	r1, #0
 800727c:	4618      	mov	r0, r3
 800727e:	f001 f861 	bl	8008344 <RCCEx_PLL2_Config>
 8007282:	4603      	mov	r3, r0
 8007284:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007286:	e012      	b.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x912>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	3324      	adds	r3, #36	; 0x24
 800728c:	2102      	movs	r1, #2
 800728e:	4618      	mov	r0, r3
 8007290:	f001 f90a 	bl	80084a8 <RCCEx_PLL3_Config>
 8007294:	4603      	mov	r3, r0
 8007296:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007298:	e009      	b.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	75fb      	strb	r3, [r7, #23]
      break;
 800729e:	e006      	b.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 80072a0:	bf00      	nop
 80072a2:	e004      	b.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 80072a4:	bf00      	nop
 80072a6:	e002      	b.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 80072a8:	bf00      	nop
 80072aa:	e000      	b.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 80072ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072ae:	7dfb      	ldrb	r3, [r7, #23]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d10a      	bne.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80072b4:	4bb3      	ldr	r3, [pc, #716]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80072b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072c2:	49b0      	ldr	r1, [pc, #704]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80072c4:	4313      	orrs	r3, r2
 80072c6:	654b      	str	r3, [r1, #84]	; 0x54
 80072c8:	e001      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x932>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ca:	7dfb      	ldrb	r3, [r7, #23]
 80072cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d044      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80072e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072e4:	d01b      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x982>
 80072e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072ea:	d805      	bhi.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d022      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x99a>
 80072f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072f4:	d00a      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x970>
 80072f6:	e01b      	b.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x994>
 80072f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072fc:	d01d      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x99e>
 80072fe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007302:	d01c      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8007304:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007308:	d01b      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 800730a:	e011      	b.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x994>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	3304      	adds	r3, #4
 8007310:	2100      	movs	r1, #0
 8007312:	4618      	mov	r0, r3
 8007314:	f001 f816 	bl	8008344 <RCCEx_PLL2_Config>
 8007318:	4603      	mov	r3, r0
 800731a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800731c:	e012      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x9a8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	3324      	adds	r3, #36	; 0x24
 8007322:	2102      	movs	r1, #2
 8007324:	4618      	mov	r0, r3
 8007326:	f001 f8bf 	bl	80084a8 <RCCEx_PLL3_Config>
 800732a:	4603      	mov	r3, r0
 800732c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800732e:	e009      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	75fb      	strb	r3, [r7, #23]
      break;
 8007334:	e006      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 8007336:	bf00      	nop
 8007338:	e004      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 800733a:	bf00      	nop
 800733c:	e002      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 800733e:	bf00      	nop
 8007340:	e000      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 8007342:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007344:	7dfb      	ldrb	r3, [r7, #23]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d10a      	bne.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x9c4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800734a:	4b8e      	ldr	r3, [pc, #568]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800734c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800734e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007358:	498a      	ldr	r1, [pc, #552]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800735a:	4313      	orrs	r3, r2
 800735c:	658b      	str	r3, [r1, #88]	; 0x58
 800735e:	e001      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007360:	7dfb      	ldrb	r3, [r7, #23]
 8007362:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800736c:	2b00      	cmp	r3, #0
 800736e:	d044      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0xa5e>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007376:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800737a:	d01b      	beq.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
 800737c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007380:	d805      	bhi.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8007382:	2b00      	cmp	r3, #0
 8007384:	d022      	beq.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800738a:	d00a      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800738c:	e01b      	b.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 800738e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007392:	d01d      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8007394:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007398:	d01c      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
 800739a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800739e:	d01b      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 80073a0:	e011      	b.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	3304      	adds	r3, #4
 80073a6:	2100      	movs	r1, #0
 80073a8:	4618      	mov	r0, r3
 80073aa:	f000 ffcb 	bl	8008344 <RCCEx_PLL2_Config>
 80073ae:	4603      	mov	r3, r0
 80073b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80073b2:	e012      	b.n	80073da <HAL_RCCEx_PeriphCLKConfig+0xa3e>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	3324      	adds	r3, #36	; 0x24
 80073b8:	2102      	movs	r1, #2
 80073ba:	4618      	mov	r0, r3
 80073bc:	f001 f874 	bl	80084a8 <RCCEx_PLL3_Config>
 80073c0:	4603      	mov	r3, r0
 80073c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80073c4:	e009      	b.n	80073da <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	75fb      	strb	r3, [r7, #23]
      break;
 80073ca:	e006      	b.n	80073da <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 80073cc:	bf00      	nop
 80073ce:	e004      	b.n	80073da <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 80073d0:	bf00      	nop
 80073d2:	e002      	b.n	80073da <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 80073d4:	bf00      	nop
 80073d6:	e000      	b.n	80073da <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 80073d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073da:	7dfb      	ldrb	r3, [r7, #23]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d10a      	bne.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80073e0:	4b68      	ldr	r3, [pc, #416]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80073e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073e4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80073ee:	4965      	ldr	r1, [pc, #404]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80073f0:	4313      	orrs	r3, r2
 80073f2:	658b      	str	r3, [r1, #88]	; 0x58
 80073f4:	e001      	b.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073f6:	7dfb      	ldrb	r3, [r7, #23]
 80073f8:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 0308 	and.w	r3, r3, #8
 8007402:	2b00      	cmp	r3, #0
 8007404:	d01a      	beq.n	800743c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800740c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007410:	d10a      	bne.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	3324      	adds	r3, #36	; 0x24
 8007416:	2102      	movs	r1, #2
 8007418:	4618      	mov	r0, r3
 800741a:	f001 f845 	bl	80084a8 <RCCEx_PLL3_Config>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d001      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
        {
          status = HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007428:	4b56      	ldr	r3, [pc, #344]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800742a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800742c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007436:	4953      	ldr	r1, [pc, #332]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007438:	4313      	orrs	r3, r2
 800743a:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 0310 	and.w	r3, r3, #16
 8007444:	2b00      	cmp	r3, #0
 8007446:	d01a      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0xae2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800744e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007452:	d10a      	bne.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	3324      	adds	r3, #36	; 0x24
 8007458:	2102      	movs	r1, #2
 800745a:	4618      	mov	r0, r3
 800745c:	f001 f824 	bl	80084a8 <RCCEx_PLL3_Config>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d001      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xace>
      {
        status = HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800746a:	4b46      	ldr	r3, [pc, #280]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800746c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800746e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007478:	4942      	ldr	r1, [pc, #264]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800747a:	4313      	orrs	r3, r2
 800747c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007486:	2b00      	cmp	r3, #0
 8007488:	d030      	beq.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007494:	d00d      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0xb16>
 8007496:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800749a:	d016      	beq.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800749c:	2b00      	cmp	r3, #0
 800749e:	d111      	bne.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	3304      	adds	r3, #4
 80074a4:	2100      	movs	r1, #0
 80074a6:	4618      	mov	r0, r3
 80074a8:	f000 ff4c 	bl	8008344 <RCCEx_PLL2_Config>
 80074ac:	4603      	mov	r3, r0
 80074ae:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80074b0:	e00c      	b.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	3324      	adds	r3, #36	; 0x24
 80074b6:	2102      	movs	r1, #2
 80074b8:	4618      	mov	r0, r3
 80074ba:	f000 fff5 	bl	80084a8 <RCCEx_PLL3_Config>
 80074be:	4603      	mov	r3, r0
 80074c0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80074c2:	e003      	b.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	75fb      	strb	r3, [r7, #23]
      break;
 80074c8:	e000      	b.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80074ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074cc:	7dfb      	ldrb	r3, [r7, #23]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10a      	bne.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80074d2:	4b2c      	ldr	r3, [pc, #176]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80074d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80074e0:	4928      	ldr	r1, [pc, #160]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80074e2:	4313      	orrs	r3, r2
 80074e4:	658b      	str	r3, [r1, #88]	; 0x58
 80074e6:	e001      	b.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074e8:	7dfb      	ldrb	r3, [r7, #23]
 80074ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d02f      	beq.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007502:	d00c      	beq.n	800751e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007504:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007508:	d015      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0xb9a>
 800750a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800750e:	d10f      	bne.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0xb94>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007510:	4b1c      	ldr	r3, [pc, #112]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007514:	4a1b      	ldr	r2, [pc, #108]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800751a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800751c:	e00c      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0xb9c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	3324      	adds	r3, #36	; 0x24
 8007522:	2101      	movs	r1, #1
 8007524:	4618      	mov	r0, r3
 8007526:	f000 ffbf 	bl	80084a8 <RCCEx_PLL3_Config>
 800752a:	4603      	mov	r3, r0
 800752c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800752e:	e003      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	75fb      	strb	r3, [r7, #23]
      break;
 8007534:	e000      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      break;
 8007536:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007538:	7dfb      	ldrb	r3, [r7, #23]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d10a      	bne.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800753e:	4b11      	ldr	r3, [pc, #68]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007542:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800754c:	490d      	ldr	r1, [pc, #52]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800754e:	4313      	orrs	r3, r2
 8007550:	654b      	str	r3, [r1, #84]	; 0x54
 8007552:	e001      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007554:	7dfb      	ldrb	r3, [r7, #23]
 8007556:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007560:	2b00      	cmp	r3, #0
 8007562:	d02c      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0xc22>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007568:	2b00      	cmp	r3, #0
 800756a:	d003      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 800756c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007570:	d00a      	beq.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8007572:	e012      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007574:	4b03      	ldr	r3, [pc, #12]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007578:	4a02      	ldr	r2, [pc, #8]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800757a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800757e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007580:	e00e      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0xc04>
 8007582:	bf00      	nop
 8007584:	58024400 	.word	0x58024400

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	3304      	adds	r3, #4
 800758c:	2102      	movs	r1, #2
 800758e:	4618      	mov	r0, r3
 8007590:	f000 fed8 	bl	8008344 <RCCEx_PLL2_Config>
 8007594:	4603      	mov	r3, r0
 8007596:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007598:	e002      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0xc04>

    default:
      ret = HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	75fb      	strb	r3, [r7, #23]
      break;
 800759e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075a0:	7dfb      	ldrb	r3, [r7, #23]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d109      	bne.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80075a6:	4b56      	ldr	r3, [pc, #344]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80075a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075b2:	4953      	ldr	r1, [pc, #332]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80075b4:	4313      	orrs	r3, r2
 80075b6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80075b8:	e001      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0xc22>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ba:	7dfb      	ldrb	r3, [r7, #23]
 80075bc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00a      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	3324      	adds	r3, #36	; 0x24
 80075ce:	2102      	movs	r1, #2
 80075d0:	4618      	mov	r0, r3
 80075d2:	f000 ff69 	bl	80084a8 <RCCEx_PLL3_Config>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d001      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
    {
      status=HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d031      	beq.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075f6:	d00c      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80075f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075fc:	d802      	bhi.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d011      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0xc8a>
 8007602:	e00d      	b.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8007604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007608:	d00f      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0xc8e>
 800760a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800760e:	d00e      	beq.n	800762e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007610:	e006      	b.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0xc84>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007612:	4b3b      	ldr	r3, [pc, #236]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007616:	4a3a      	ldr	r2, [pc, #232]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800761c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800761e:	e007      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	75fb      	strb	r3, [r7, #23]
      break;
 8007624:	e004      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 8007626:	bf00      	nop
 8007628:	e002      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 800762a:	bf00      	nop
 800762c:	e000      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 800762e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007630:	7dfb      	ldrb	r3, [r7, #23]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d10a      	bne.n	800764c <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007636:	4b32      	ldr	r3, [pc, #200]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800763a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007644:	492e      	ldr	r1, [pc, #184]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007646:	4313      	orrs	r3, r2
 8007648:	654b      	str	r3, [r1, #84]	; 0x54
 800764a:	e001      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800764c:	7dfb      	ldrb	r3, [r7, #23]
 800764e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d008      	beq.n	800766e <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800765c:	4b28      	ldr	r3, [pc, #160]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800765e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007660:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007668:	4925      	ldr	r1, [pc, #148]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800766a:	4313      	orrs	r3, r2
 800766c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d008      	beq.n	800768c <HAL_RCCEx_PeriphCLKConfig+0xcf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800767a:	4b21      	ldr	r3, [pc, #132]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800767c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800767e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007686:	491e      	ldr	r1, [pc, #120]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007688:	4313      	orrs	r3, r2
 800768a:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007694:	2b00      	cmp	r3, #0
 8007696:	d008      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007698:	4b19      	ldr	r3, [pc, #100]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800769a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800769c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076a4:	4916      	ldr	r1, [pc, #88]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80076a6:	4313      	orrs	r3, r2
 80076a8:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00d      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80076b6:	4b12      	ldr	r3, [pc, #72]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	4a11      	ldr	r2, [pc, #68]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80076bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80076c0:	6113      	str	r3, [r2, #16]
 80076c2:	4b0f      	ldr	r3, [pc, #60]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80076c4:	691a      	ldr	r2, [r3, #16]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80076cc:	490c      	ldr	r1, [pc, #48]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80076ce:	4313      	orrs	r3, r2
 80076d0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	da08      	bge.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0xd50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80076da:	4b09      	ldr	r3, [pc, #36]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80076dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076e6:	4906      	ldr	r1, [pc, #24]	; (8007700 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80076e8:	4313      	orrs	r3, r2
 80076ea:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80076ec:	7dbb      	ldrb	r3, [r7, #22]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d101      	bne.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    return HAL_OK;
 80076f2:	2300      	movs	r3, #0
 80076f4:	e000      	b.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
  }
  return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3718      	adds	r7, #24
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	58024400 	.word	0x58024400

08007704 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b090      	sub	sp, #64	; 0x40
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007712:	d150      	bne.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007714:	4ba1      	ldr	r3, [pc, #644]	; (800799c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007718:	f003 0307 	and.w	r3, r3, #7
 800771c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800771e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007720:	2b04      	cmp	r3, #4
 8007722:	d844      	bhi.n	80077ae <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8007724:	a201      	add	r2, pc, #4	; (adr r2, 800772c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772a:	bf00      	nop
 800772c:	08007741 	.word	0x08007741
 8007730:	08007751 	.word	0x08007751
 8007734:	08007761 	.word	0x08007761
 8007738:	080077a9 	.word	0x080077a9
 800773c:	08007771 	.word	0x08007771
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007744:	4618      	mov	r0, r3
 8007746:	f000 fcb1 	bl	80080ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800774a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800774e:	e1ef      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007750:	f107 0318 	add.w	r3, r7, #24
 8007754:	4618      	mov	r0, r3
 8007756:	f000 fa11 	bl	8007b7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800775e:	e1e7      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007760:	f107 030c 	add.w	r3, r7, #12
 8007764:	4618      	mov	r0, r3
 8007766:	f000 fb55 	bl	8007e14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800776e:	e1df      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007770:	4b8a      	ldr	r3, [pc, #552]	; (800799c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007774:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007778:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800777a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800777c:	2b00      	cmp	r3, #0
 800777e:	d102      	bne.n	8007786 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007780:	4b87      	ldr	r3, [pc, #540]	; (80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007782:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007784:	e1d4      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007788:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800778c:	d102      	bne.n	8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800778e:	4b85      	ldr	r3, [pc, #532]	; (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007790:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007792:	e1cd      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007796:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800779a:	d102      	bne.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 800779c:	4b82      	ldr	r3, [pc, #520]	; (80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800779e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077a0:	e1c6      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 80077a2:	2300      	movs	r3, #0
 80077a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077a6:	e1c3      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80077a8:	4b80      	ldr	r3, [pc, #512]	; (80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80077aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077ac:	e1c0      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      default :
        {
          frequency = 0;
 80077ae:	2300      	movs	r3, #0
 80077b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077b2:	bf00      	nop
 80077b4:	e1bc      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077bc:	d14f      	bne.n	800785e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 80077be:	4b77      	ldr	r3, [pc, #476]	; (800799c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80077c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077c2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80077c6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80077c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ca:	2b80      	cmp	r3, #128	; 0x80
 80077cc:	d01c      	beq.n	8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80077ce:	2b80      	cmp	r3, #128	; 0x80
 80077d0:	d804      	bhi.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d008      	beq.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 80077d6:	2b40      	cmp	r3, #64	; 0x40
 80077d8:	d00e      	beq.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80077da:	e03c      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 80077dc:	2bc0      	cmp	r3, #192	; 0xc0
 80077de:	d037      	beq.n	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80077e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077e4:	d018      	beq.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 80077e6:	e036      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80077e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077ec:	4618      	mov	r0, r3
 80077ee:	f000 fc5d 	bl	80080ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80077f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077f6:	e19b      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077f8:	f107 0318 	add.w	r3, r7, #24
 80077fc:	4618      	mov	r0, r3
 80077fe:	f000 f9bd 	bl	8007b7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007806:	e193      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007808:	f107 030c 	add.w	r3, r7, #12
 800780c:	4618      	mov	r0, r3
 800780e:	f000 fb01 	bl	8007e14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007816:	e18b      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007818:	4b60      	ldr	r3, [pc, #384]	; (800799c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800781a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800781c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007820:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007824:	2b00      	cmp	r3, #0
 8007826:	d102      	bne.n	800782e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007828:	4b5d      	ldr	r3, [pc, #372]	; (80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800782a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800782c:	e180      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800782e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007830:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007834:	d102      	bne.n	800783c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8007836:	4b5b      	ldr	r3, [pc, #364]	; (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007838:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800783a:	e179      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800783c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800783e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007842:	d102      	bne.n	800784a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8007844:	4b58      	ldr	r3, [pc, #352]	; (80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007846:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007848:	e172      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 800784a:	2300      	movs	r3, #0
 800784c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800784e:	e16f      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007850:	4b56      	ldr	r3, [pc, #344]	; (80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007852:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007854:	e16c      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 8007856:	2300      	movs	r3, #0
 8007858:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800785a:	bf00      	nop
 800785c:	e168      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007864:	d153      	bne.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8007866:	4b4d      	ldr	r3, [pc, #308]	; (800799c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800786a:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800786e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007876:	d01f      	beq.n	80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8007878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800787c:	d805      	bhi.n	800788a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00a      	beq.n	8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8007882:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007886:	d00f      	beq.n	80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8007888:	e03d      	b.n	8007906 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800788a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800788e:	d037      	beq.n	8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8007890:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007894:	d018      	beq.n	80078c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8007896:	e036      	b.n	8007906 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800789c:	4618      	mov	r0, r3
 800789e:	f000 fc05 	bl	80080ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80078a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078a6:	e143      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078a8:	f107 0318 	add.w	r3, r7, #24
 80078ac:	4618      	mov	r0, r3
 80078ae:	f000 f965 	bl	8007b7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078b6:	e13b      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078b8:	f107 030c 	add.w	r3, r7, #12
 80078bc:	4618      	mov	r0, r3
 80078be:	f000 faa9 	bl	8007e14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078c6:	e133      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80078c8:	4b34      	ldr	r3, [pc, #208]	; (800799c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80078ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80078d0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80078d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d102      	bne.n	80078de <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80078d8:	4b31      	ldr	r3, [pc, #196]	; (80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80078da:	63fb      	str	r3, [r7, #60]	; 0x3c
          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }
          break;
 80078dc:	e128      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80078de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078e4:	d102      	bne.n	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 80078e6:	4b2f      	ldr	r3, [pc, #188]	; (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80078e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078ea:	e121      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80078ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078f2:	d102      	bne.n	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 80078f4:	4b2c      	ldr	r3, [pc, #176]	; (80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80078f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078f8:	e11a      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 80078fa:	2300      	movs	r3, #0
 80078fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078fe:	e117      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007900:	4b2a      	ldr	r3, [pc, #168]	; (80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007902:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007904:	e114      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 8007906:	2300      	movs	r3, #0
 8007908:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800790a:	bf00      	nop
 800790c:	e110      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007914:	d15d      	bne.n	80079d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007916:	4b21      	ldr	r3, [pc, #132]	; (800799c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800791a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800791e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007922:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007926:	d01f      	beq.n	8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007928:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800792c:	d805      	bhi.n	800793a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00a      	beq.n	8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007936:	d00f      	beq.n	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8007938:	e047      	b.n	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800793a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800793e:	d041      	beq.n	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8007940:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007944:	d018      	beq.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8007946:	e040      	b.n	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800794c:	4618      	mov	r0, r3
 800794e:	f000 fbad 	bl	80080ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007954:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007956:	e0eb      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007958:	f107 0318 	add.w	r3, r7, #24
 800795c:	4618      	mov	r0, r3
 800795e:	f000 f90d 	bl	8007b7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007966:	e0e3      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007968:	f107 030c 	add.w	r3, r7, #12
 800796c:	4618      	mov	r0, r3
 800796e:	f000 fa51 	bl	8007e14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007976:	e0db      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007978:	4b08      	ldr	r3, [pc, #32]	; (800799c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800797a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800797c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007980:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007984:	2b00      	cmp	r3, #0
 8007986:	d102      	bne.n	800798e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007988:	4b05      	ldr	r3, [pc, #20]	; (80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800798a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800798c:	e0d0      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800798e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007990:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007994:	d10c      	bne.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8007996:	4b03      	ldr	r3, [pc, #12]	; (80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007998:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800799a:	e0c9      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
 800799c:	58024400 	.word	0x58024400
 80079a0:	03d09000 	.word	0x03d09000
 80079a4:	003d0900 	.word	0x003d0900
 80079a8:	007a1200 	.word	0x007a1200
 80079ac:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80079b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079b6:	d102      	bne.n	80079be <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 80079b8:	4b60      	ldr	r3, [pc, #384]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80079ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079bc:	e0b8      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 80079be:	2300      	movs	r3, #0
 80079c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079c2:	e0b5      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80079c4:	4b5e      	ldr	r3, [pc, #376]	; (8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 80079c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079c8:	e0b2      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      default :
        {
          frequency = 0;
 80079ca:	2300      	movs	r3, #0
 80079cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079ce:	bf00      	nop
 80079d0:	e0ae      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80079d8:	d13d      	bne.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80079da:	4b5a      	ldr	r3, [pc, #360]	; (8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 80079dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80079e2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80079e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079ea:	d00c      	beq.n	8007a06 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 80079ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079f0:	d011      	beq.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d12b      	bne.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079f6:	f107 0318 	add.w	r3, r7, #24
 80079fa:	4618      	mov	r0, r3
 80079fc:	f000 f8be 	bl	8007b7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a04:	e094      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a06:	f107 030c 	add.w	r3, r7, #12
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f000 fa02 	bl	8007e14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a14:	e08c      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007a16:	4b4b      	ldr	r3, [pc, #300]	; (8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8007a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007a1e:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d102      	bne.n	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007a26:	4b48      	ldr	r3, [pc, #288]	; (8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x444>)
 8007a28:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007a2a:	e081      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a32:	d102      	bne.n	8007a3a <HAL_RCCEx_GetPeriphCLKFreq+0x336>
            frequency = CSI_VALUE;
 8007a34:	4b45      	ldr	r3, [pc, #276]	; (8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x448>)
 8007a36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a38:	e07a      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a40:	d102      	bne.n	8007a48 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
            frequency = HSE_VALUE;
 8007a42:	4b3e      	ldr	r3, [pc, #248]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8007a44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a46:	e073      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a4c:	e070      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a52:	bf00      	nop
 8007a54:	e06c      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a5c:	d11f      	bne.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007a5e:	4b39      	ldr	r3, [pc, #228]	; (8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8007a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a66:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d003      	beq.n	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a72:	d008      	beq.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
 8007a74:	e00f      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x392>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 fb16 	bl	80080ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a84:	e054      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a86:	f107 0318 	add.w	r3, r7, #24
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f000 f876 	bl	8007b7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007a90:	6a3b      	ldr	r3, [r7, #32]
 8007a92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a94:	e04c      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 8007a96:	2300      	movs	r3, #0
 8007a98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a9a:	bf00      	nop
 8007a9c:	e048      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007aa4:	d142      	bne.n	8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x428>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007aa6:	4b27      	ldr	r3, [pc, #156]	; (8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8007aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aaa:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007aae:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ab6:	d029      	beq.n	8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x408>
 8007ab8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007abc:	d808      	bhi.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8007abe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ac2:	d013      	beq.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007ac4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ac8:	d018      	beq.n	8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00a      	beq.n	8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 8007ace:	e029      	b.n	8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 8007ad0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ad4:	d020      	beq.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8007ad6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007ada:	d020      	beq.n	8007b1e <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 8007adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ae0:	d017      	beq.n	8007b12 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8007ae2:	e01f      	b.n	8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007ae4:	f000 f834 	bl	8007b50 <HAL_RCCEx_GetD3PCLK1Freq>
 8007ae8:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007aea:	e021      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007aec:	f107 0318 	add.w	r3, r7, #24
 8007af0:	4618      	mov	r0, r3
 8007af2:	f000 f843 	bl	8007b7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007afa:	e019      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007afc:	f107 030c 	add.w	r3, r7, #12
 8007b00:	4618      	mov	r0, r3
 8007b02:	f000 f987 	bl	8007e14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b0a:	e011      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8007b0c:	4b0e      	ldr	r3, [pc, #56]	; (8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x444>)
 8007b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b10:	e00e      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8007b12:	4b0e      	ldr	r3, [pc, #56]	; (8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x448>)
 8007b14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b16:	e00b      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8007b18:	4b08      	ldr	r3, [pc, #32]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8007b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b1c:	e008      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007b1e:	4b08      	ldr	r3, [pc, #32]	; (8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 8007b20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b22:	e005      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007b24:	2300      	movs	r3, #0
 8007b26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b28:	bf00      	nop
 8007b2a:	e001      	b.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else
    {
      frequency = 0;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3740      	adds	r7, #64	; 0x40
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	007a1200 	.word	0x007a1200
 8007b40:	00bb8000 	.word	0x00bb8000
 8007b44:	58024400 	.word	0x58024400
 8007b48:	03d09000 	.word	0x03d09000
 8007b4c:	003d0900 	.word	0x003d0900

08007b50 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8007b54:	f7fe fec6 	bl	80068e4 <HAL_RCC_GetHCLKFreq>
 8007b58:	4601      	mov	r1, r0
 8007b5a:	4b06      	ldr	r3, [pc, #24]	; (8007b74 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007b5c:	6a1b      	ldr	r3, [r3, #32]
 8007b5e:	091b      	lsrs	r3, r3, #4
 8007b60:	f003 0307 	and.w	r3, r3, #7
 8007b64:	4a04      	ldr	r2, [pc, #16]	; (8007b78 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007b66:	5cd3      	ldrb	r3, [r2, r3]
 8007b68:	f003 031f 	and.w	r3, r3, #31
 8007b6c:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	58024400 	.word	0x58024400
 8007b78:	0800bc90 	.word	0x0800bc90

08007b7c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b089      	sub	sp, #36	; 0x24
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b84:	4b9d      	ldr	r3, [pc, #628]	; (8007dfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b88:	f003 0303 	and.w	r3, r3, #3
 8007b8c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007b8e:	4b9b      	ldr	r3, [pc, #620]	; (8007dfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b92:	0b1b      	lsrs	r3, r3, #12
 8007b94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b98:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007b9a:	4b98      	ldr	r3, [pc, #608]	; (8007dfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9e:	091b      	lsrs	r3, r3, #4
 8007ba0:	f003 0301 	and.w	r3, r3, #1
 8007ba4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007ba6:	4b95      	ldr	r3, [pc, #596]	; (8007dfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007baa:	08db      	lsrs	r3, r3, #3
 8007bac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007bb0:	693a      	ldr	r2, [r7, #16]
 8007bb2:	fb02 f303 	mul.w	r3, r2, r3
 8007bb6:	ee07 3a90 	vmov	s15, r3
 8007bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bbe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f000 810a 	beq.w	8007dde <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d05a      	beq.n	8007c86 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d302      	bcc.n	8007bda <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d078      	beq.n	8007cca <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8007bd8:	e099      	b.n	8007d0e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bda:	4b88      	ldr	r3, [pc, #544]	; (8007dfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 0320 	and.w	r3, r3, #32
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d02d      	beq.n	8007c42 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007be6:	4b85      	ldr	r3, [pc, #532]	; (8007dfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	08db      	lsrs	r3, r3, #3
 8007bec:	f003 0303 	and.w	r3, r3, #3
 8007bf0:	4a83      	ldr	r2, [pc, #524]	; (8007e00 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8007bf6:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	ee07 3a90 	vmov	s15, r3
 8007bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	ee07 3a90 	vmov	s15, r3
 8007c08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c10:	4b7a      	ldr	r3, [pc, #488]	; (8007dfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c18:	ee07 3a90 	vmov	s15, r3
 8007c1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c20:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c24:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007e04 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007c28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c3c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007c40:	e087      	b.n	8007d52 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	ee07 3a90 	vmov	s15, r3
 8007c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c4c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007e08 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007c50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c54:	4b69      	ldr	r3, [pc, #420]	; (8007dfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c5c:	ee07 3a90 	vmov	s15, r3
 8007c60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c64:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c68:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007e04 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007c6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c80:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c84:	e065      	b.n	8007d52 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	ee07 3a90 	vmov	s15, r3
 8007c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c90:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007c94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c98:	4b58      	ldr	r3, [pc, #352]	; (8007dfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ca0:	ee07 3a90 	vmov	s15, r3
 8007ca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ca8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cac:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007e04 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007cb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cc4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007cc8:	e043      	b.n	8007d52 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	ee07 3a90 	vmov	s15, r3
 8007cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cd4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007e10 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8007cd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cdc:	4b47      	ldr	r3, [pc, #284]	; (8007dfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ce4:	ee07 3a90 	vmov	s15, r3
 8007ce8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cec:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cf0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007e04 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007cf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d08:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d0c:	e021      	b.n	8007d52 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	ee07 3a90 	vmov	s15, r3
 8007d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d18:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007d1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d20:	4b36      	ldr	r3, [pc, #216]	; (8007dfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d28:	ee07 3a90 	vmov	s15, r3
 8007d2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d30:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d34:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007e04 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007d38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d4c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d50:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007d52:	4b2a      	ldr	r3, [pc, #168]	; (8007dfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d56:	0a5b      	lsrs	r3, r3, #9
 8007d58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d5c:	ee07 3a90 	vmov	s15, r3
 8007d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d78:	ee17 2a90 	vmov	r2, s15
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007d80:	4b1e      	ldr	r3, [pc, #120]	; (8007dfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d84:	0c1b      	lsrs	r3, r3, #16
 8007d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d8a:	ee07 3a90 	vmov	s15, r3
 8007d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007da2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007da6:	ee17 2a90 	vmov	r2, s15
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007dae:	4b13      	ldr	r3, [pc, #76]	; (8007dfc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db2:	0e1b      	lsrs	r3, r3, #24
 8007db4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007db8:	ee07 3a90 	vmov	s15, r3
 8007dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007dc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007dc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dd4:	ee17 2a90 	vmov	r2, s15
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007ddc:	e008      	b.n	8007df0 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	609a      	str	r2, [r3, #8]
}
 8007df0:	bf00      	nop
 8007df2:	3724      	adds	r7, #36	; 0x24
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr
 8007dfc:	58024400 	.word	0x58024400
 8007e00:	03d09000 	.word	0x03d09000
 8007e04:	46000000 	.word	0x46000000
 8007e08:	4c742400 	.word	0x4c742400
 8007e0c:	4a742400 	.word	0x4a742400
 8007e10:	4af42400 	.word	0x4af42400

08007e14 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b089      	sub	sp, #36	; 0x24
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e1c:	4b9d      	ldr	r3, [pc, #628]	; (8008094 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e20:	f003 0303 	and.w	r3, r3, #3
 8007e24:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007e26:	4b9b      	ldr	r3, [pc, #620]	; (8008094 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e2a:	0d1b      	lsrs	r3, r3, #20
 8007e2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e30:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007e32:	4b98      	ldr	r3, [pc, #608]	; (8008094 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e36:	0a1b      	lsrs	r3, r3, #8
 8007e38:	f003 0301 	and.w	r3, r3, #1
 8007e3c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007e3e:	4b95      	ldr	r3, [pc, #596]	; (8008094 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e42:	08db      	lsrs	r3, r3, #3
 8007e44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e48:	693a      	ldr	r2, [r7, #16]
 8007e4a:	fb02 f303 	mul.w	r3, r2, r3
 8007e4e:	ee07 3a90 	vmov	s15, r3
 8007e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	f000 810a 	beq.w	8008076 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d05a      	beq.n	8007f1e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d302      	bcc.n	8007e72 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d078      	beq.n	8007f62 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8007e70:	e099      	b.n	8007fa6 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e72:	4b88      	ldr	r3, [pc, #544]	; (8008094 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f003 0320 	and.w	r3, r3, #32
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d02d      	beq.n	8007eda <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e7e:	4b85      	ldr	r3, [pc, #532]	; (8008094 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	08db      	lsrs	r3, r3, #3
 8007e84:	f003 0303 	and.w	r3, r3, #3
 8007e88:	4a83      	ldr	r2, [pc, #524]	; (8008098 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e8e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	ee07 3a90 	vmov	s15, r3
 8007e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	ee07 3a90 	vmov	s15, r3
 8007ea0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ea4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ea8:	4b7a      	ldr	r3, [pc, #488]	; (8008094 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eb0:	ee07 3a90 	vmov	s15, r3
 8007eb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eb8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ebc:	eddf 5a77 	vldr	s11, [pc, #476]	; 800809c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007ec0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ec4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ec8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ecc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ed4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007ed8:	e087      	b.n	8007fea <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	ee07 3a90 	vmov	s15, r3
 8007ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ee4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80080a0 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8007ee8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eec:	4b69      	ldr	r3, [pc, #420]	; (8008094 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ef4:	ee07 3a90 	vmov	s15, r3
 8007ef8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007efc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f00:	eddf 5a66 	vldr	s11, [pc, #408]	; 800809c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007f04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f1c:	e065      	b.n	8007fea <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	ee07 3a90 	vmov	s15, r3
 8007f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f28:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80080a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007f2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f30:	4b58      	ldr	r3, [pc, #352]	; (8008094 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f38:	ee07 3a90 	vmov	s15, r3
 8007f3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f40:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f44:	eddf 5a55 	vldr	s11, [pc, #340]	; 800809c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007f48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f5c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f60:	e043      	b.n	8007fea <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	ee07 3a90 	vmov	s15, r3
 8007f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f6c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80080a8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8007f70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f74:	4b47      	ldr	r3, [pc, #284]	; (8008094 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f7c:	ee07 3a90 	vmov	s15, r3
 8007f80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f84:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f88:	eddf 5a44 	vldr	s11, [pc, #272]	; 800809c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007f8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fa0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007fa4:	e021      	b.n	8007fea <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	ee07 3a90 	vmov	s15, r3
 8007fac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fb0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80080a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007fb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fb8:	4b36      	ldr	r3, [pc, #216]	; (8008094 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fc0:	ee07 3a90 	vmov	s15, r3
 8007fc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fc8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fcc:	eddf 5a33 	vldr	s11, [pc, #204]	; 800809c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007fd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fe4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007fe8:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007fea:	4b2a      	ldr	r3, [pc, #168]	; (8008094 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fee:	0a5b      	lsrs	r3, r3, #9
 8007ff0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ff4:	ee07 3a90 	vmov	s15, r3
 8007ff8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ffc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008000:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008004:	edd7 6a07 	vldr	s13, [r7, #28]
 8008008:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800800c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008010:	ee17 2a90 	vmov	r2, s15
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008018:	4b1e      	ldr	r3, [pc, #120]	; (8008094 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800801a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800801c:	0c1b      	lsrs	r3, r3, #16
 800801e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008022:	ee07 3a90 	vmov	s15, r3
 8008026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800802a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800802e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008032:	edd7 6a07 	vldr	s13, [r7, #28]
 8008036:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800803a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800803e:	ee17 2a90 	vmov	r2, s15
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008046:	4b13      	ldr	r3, [pc, #76]	; (8008094 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804a:	0e1b      	lsrs	r3, r3, #24
 800804c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008050:	ee07 3a90 	vmov	s15, r3
 8008054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008058:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800805c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008060:	edd7 6a07 	vldr	s13, [r7, #28]
 8008064:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008068:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800806c:	ee17 2a90 	vmov	r2, s15
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008074:	e008      	b.n	8008088 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	609a      	str	r2, [r3, #8]
}
 8008088:	bf00      	nop
 800808a:	3724      	adds	r7, #36	; 0x24
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr
 8008094:	58024400 	.word	0x58024400
 8008098:	03d09000 	.word	0x03d09000
 800809c:	46000000 	.word	0x46000000
 80080a0:	4c742400 	.word	0x4c742400
 80080a4:	4a742400 	.word	0x4a742400
 80080a8:	4af42400 	.word	0x4af42400

080080ac <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b089      	sub	sp, #36	; 0x24
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80080b4:	4b9d      	ldr	r3, [pc, #628]	; (800832c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80080b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b8:	f003 0303 	and.w	r3, r3, #3
 80080bc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80080be:	4b9b      	ldr	r3, [pc, #620]	; (800832c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80080c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c2:	091b      	lsrs	r3, r3, #4
 80080c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080c8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80080ca:	4b98      	ldr	r3, [pc, #608]	; (800832c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80080cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ce:	f003 0301 	and.w	r3, r3, #1
 80080d2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80080d4:	4b95      	ldr	r3, [pc, #596]	; (800832c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80080d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080d8:	08db      	lsrs	r3, r3, #3
 80080da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80080de:	693a      	ldr	r2, [r7, #16]
 80080e0:	fb02 f303 	mul.w	r3, r2, r3
 80080e4:	ee07 3a90 	vmov	s15, r3
 80080e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ec:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	f000 810a 	beq.w	800830c <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d05a      	beq.n	80081b4 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d302      	bcc.n	8008108 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8008102:	2b02      	cmp	r3, #2
 8008104:	d078      	beq.n	80081f8 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8008106:	e099      	b.n	800823c <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008108:	4b88      	ldr	r3, [pc, #544]	; (800832c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f003 0320 	and.w	r3, r3, #32
 8008110:	2b00      	cmp	r3, #0
 8008112:	d02d      	beq.n	8008170 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008114:	4b85      	ldr	r3, [pc, #532]	; (800832c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	08db      	lsrs	r3, r3, #3
 800811a:	f003 0303 	and.w	r3, r3, #3
 800811e:	4a84      	ldr	r2, [pc, #528]	; (8008330 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8008120:	fa22 f303 	lsr.w	r3, r2, r3
 8008124:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	ee07 3a90 	vmov	s15, r3
 800812c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	ee07 3a90 	vmov	s15, r3
 8008136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800813a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800813e:	4b7b      	ldr	r3, [pc, #492]	; (800832c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008146:	ee07 3a90 	vmov	s15, r3
 800814a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800814e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008152:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008334 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800815a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800815e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800816a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800816e:	e087      	b.n	8008280 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	ee07 3a90 	vmov	s15, r3
 8008176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800817a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008338 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800817e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008182:	4b6a      	ldr	r3, [pc, #424]	; (800832c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800818a:	ee07 3a90 	vmov	s15, r3
 800818e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008192:	ed97 6a03 	vldr	s12, [r7, #12]
 8008196:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008334 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800819a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800819e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081b2:	e065      	b.n	8008280 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	ee07 3a90 	vmov	s15, r3
 80081ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800833c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80081c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081c6:	4b59      	ldr	r3, [pc, #356]	; (800832c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80081c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ce:	ee07 3a90 	vmov	s15, r3
 80081d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80081da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008334 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80081de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081f6:	e043      	b.n	8008280 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	ee07 3a90 	vmov	s15, r3
 80081fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008202:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008340 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800820a:	4b48      	ldr	r3, [pc, #288]	; (800832c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800820c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800820e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008212:	ee07 3a90 	vmov	s15, r3
 8008216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800821a:	ed97 6a03 	vldr	s12, [r7, #12]
 800821e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008334 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800822a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800822e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008236:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800823a:	e021      	b.n	8008280 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	ee07 3a90 	vmov	s15, r3
 8008242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008246:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800833c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800824a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800824e:	4b37      	ldr	r3, [pc, #220]	; (800832c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008256:	ee07 3a90 	vmov	s15, r3
 800825a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800825e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008262:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008334 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800826a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800826e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800827a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800827e:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008280:	4b2a      	ldr	r3, [pc, #168]	; (800832c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008284:	0a5b      	lsrs	r3, r3, #9
 8008286:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800828a:	ee07 3a90 	vmov	s15, r3
 800828e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008292:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008296:	ee37 7a87 	vadd.f32	s14, s15, s14
 800829a:	edd7 6a07 	vldr	s13, [r7, #28]
 800829e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082a6:	ee17 2a90 	vmov	r2, s15
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80082ae:	4b1f      	ldr	r3, [pc, #124]	; (800832c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80082b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082b2:	0c1b      	lsrs	r3, r3, #16
 80082b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082b8:	ee07 3a90 	vmov	s15, r3
 80082bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80082c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80082cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082d4:	ee17 2a90 	vmov	r2, s15
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80082dc:	4b13      	ldr	r3, [pc, #76]	; (800832c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80082de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082e0:	0e1b      	lsrs	r3, r3, #24
 80082e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082e6:	ee07 3a90 	vmov	s15, r3
 80082ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80082f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80082fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008302:	ee17 2a90 	vmov	r2, s15
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800830a:	e008      	b.n	800831e <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2200      	movs	r2, #0
 8008316:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	609a      	str	r2, [r3, #8]
}
 800831e:	bf00      	nop
 8008320:	3724      	adds	r7, #36	; 0x24
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr
 800832a:	bf00      	nop
 800832c:	58024400 	.word	0x58024400
 8008330:	03d09000 	.word	0x03d09000
 8008334:	46000000 	.word	0x46000000
 8008338:	4c742400 	.word	0x4c742400
 800833c:	4a742400 	.word	0x4a742400
 8008340:	4af42400 	.word	0x4af42400

08008344 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800834e:	2300      	movs	r3, #0
 8008350:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008352:	4b53      	ldr	r3, [pc, #332]	; (80084a0 <RCCEx_PLL2_Config+0x15c>)
 8008354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008356:	f003 0303 	and.w	r3, r3, #3
 800835a:	2b03      	cmp	r3, #3
 800835c:	d101      	bne.n	8008362 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	e099      	b.n	8008496 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008362:	4b4f      	ldr	r3, [pc, #316]	; (80084a0 <RCCEx_PLL2_Config+0x15c>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a4e      	ldr	r2, [pc, #312]	; (80084a0 <RCCEx_PLL2_Config+0x15c>)
 8008368:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800836c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800836e:	f7f9 fca5 	bl	8001cbc <HAL_GetTick>
 8008372:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008374:	e008      	b.n	8008388 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008376:	f7f9 fca1 	bl	8001cbc <HAL_GetTick>
 800837a:	4602      	mov	r2, r0
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	1ad3      	subs	r3, r2, r3
 8008380:	2b02      	cmp	r3, #2
 8008382:	d901      	bls.n	8008388 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008384:	2303      	movs	r3, #3
 8008386:	e086      	b.n	8008496 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008388:	4b45      	ldr	r3, [pc, #276]	; (80084a0 <RCCEx_PLL2_Config+0x15c>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008390:	2b00      	cmp	r3, #0
 8008392:	d1f0      	bne.n	8008376 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008394:	4b42      	ldr	r3, [pc, #264]	; (80084a0 <RCCEx_PLL2_Config+0x15c>)
 8008396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008398:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	031b      	lsls	r3, r3, #12
 80083a2:	493f      	ldr	r1, [pc, #252]	; (80084a0 <RCCEx_PLL2_Config+0x15c>)
 80083a4:	4313      	orrs	r3, r2
 80083a6:	628b      	str	r3, [r1, #40]	; 0x28
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	3b01      	subs	r3, #1
 80083ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	3b01      	subs	r3, #1
 80083b8:	025b      	lsls	r3, r3, #9
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	431a      	orrs	r2, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	3b01      	subs	r3, #1
 80083c4:	041b      	lsls	r3, r3, #16
 80083c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80083ca:	431a      	orrs	r2, r3
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	3b01      	subs	r3, #1
 80083d2:	061b      	lsls	r3, r3, #24
 80083d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80083d8:	4931      	ldr	r1, [pc, #196]	; (80084a0 <RCCEx_PLL2_Config+0x15c>)
 80083da:	4313      	orrs	r3, r2
 80083dc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80083de:	4b30      	ldr	r3, [pc, #192]	; (80084a0 <RCCEx_PLL2_Config+0x15c>)
 80083e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	695b      	ldr	r3, [r3, #20]
 80083ea:	492d      	ldr	r1, [pc, #180]	; (80084a0 <RCCEx_PLL2_Config+0x15c>)
 80083ec:	4313      	orrs	r3, r2
 80083ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80083f0:	4b2b      	ldr	r3, [pc, #172]	; (80084a0 <RCCEx_PLL2_Config+0x15c>)
 80083f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f4:	f023 0220 	bic.w	r2, r3, #32
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	699b      	ldr	r3, [r3, #24]
 80083fc:	4928      	ldr	r1, [pc, #160]	; (80084a0 <RCCEx_PLL2_Config+0x15c>)
 80083fe:	4313      	orrs	r3, r2
 8008400:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008402:	4b27      	ldr	r3, [pc, #156]	; (80084a0 <RCCEx_PLL2_Config+0x15c>)
 8008404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008406:	4a26      	ldr	r2, [pc, #152]	; (80084a0 <RCCEx_PLL2_Config+0x15c>)
 8008408:	f023 0310 	bic.w	r3, r3, #16
 800840c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800840e:	4b24      	ldr	r3, [pc, #144]	; (80084a0 <RCCEx_PLL2_Config+0x15c>)
 8008410:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008412:	4b24      	ldr	r3, [pc, #144]	; (80084a4 <RCCEx_PLL2_Config+0x160>)
 8008414:	4013      	ands	r3, r2
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	69d2      	ldr	r2, [r2, #28]
 800841a:	00d2      	lsls	r2, r2, #3
 800841c:	4920      	ldr	r1, [pc, #128]	; (80084a0 <RCCEx_PLL2_Config+0x15c>)
 800841e:	4313      	orrs	r3, r2
 8008420:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008422:	4b1f      	ldr	r3, [pc, #124]	; (80084a0 <RCCEx_PLL2_Config+0x15c>)
 8008424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008426:	4a1e      	ldr	r2, [pc, #120]	; (80084a0 <RCCEx_PLL2_Config+0x15c>)
 8008428:	f043 0310 	orr.w	r3, r3, #16
 800842c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d106      	bne.n	8008442 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008434:	4b1a      	ldr	r3, [pc, #104]	; (80084a0 <RCCEx_PLL2_Config+0x15c>)
 8008436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008438:	4a19      	ldr	r2, [pc, #100]	; (80084a0 <RCCEx_PLL2_Config+0x15c>)
 800843a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800843e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008440:	e00f      	b.n	8008462 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	2b01      	cmp	r3, #1
 8008446:	d106      	bne.n	8008456 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008448:	4b15      	ldr	r3, [pc, #84]	; (80084a0 <RCCEx_PLL2_Config+0x15c>)
 800844a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844c:	4a14      	ldr	r2, [pc, #80]	; (80084a0 <RCCEx_PLL2_Config+0x15c>)
 800844e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008452:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008454:	e005      	b.n	8008462 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008456:	4b12      	ldr	r3, [pc, #72]	; (80084a0 <RCCEx_PLL2_Config+0x15c>)
 8008458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845a:	4a11      	ldr	r2, [pc, #68]	; (80084a0 <RCCEx_PLL2_Config+0x15c>)
 800845c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008460:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008462:	4b0f      	ldr	r3, [pc, #60]	; (80084a0 <RCCEx_PLL2_Config+0x15c>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a0e      	ldr	r2, [pc, #56]	; (80084a0 <RCCEx_PLL2_Config+0x15c>)
 8008468:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800846c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800846e:	f7f9 fc25 	bl	8001cbc <HAL_GetTick>
 8008472:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008474:	e008      	b.n	8008488 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008476:	f7f9 fc21 	bl	8001cbc <HAL_GetTick>
 800847a:	4602      	mov	r2, r0
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	1ad3      	subs	r3, r2, r3
 8008480:	2b02      	cmp	r3, #2
 8008482:	d901      	bls.n	8008488 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008484:	2303      	movs	r3, #3
 8008486:	e006      	b.n	8008496 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008488:	4b05      	ldr	r3, [pc, #20]	; (80084a0 <RCCEx_PLL2_Config+0x15c>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008490:	2b00      	cmp	r3, #0
 8008492:	d0f0      	beq.n	8008476 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008494:	7bfb      	ldrb	r3, [r7, #15]
}
 8008496:	4618      	mov	r0, r3
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	58024400 	.word	0x58024400
 80084a4:	ffff0007 	.word	0xffff0007

080084a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80084b2:	2300      	movs	r3, #0
 80084b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80084b6:	4b53      	ldr	r3, [pc, #332]	; (8008604 <RCCEx_PLL3_Config+0x15c>)
 80084b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ba:	f003 0303 	and.w	r3, r3, #3
 80084be:	2b03      	cmp	r3, #3
 80084c0:	d101      	bne.n	80084c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	e099      	b.n	80085fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80084c6:	4b4f      	ldr	r3, [pc, #316]	; (8008604 <RCCEx_PLL3_Config+0x15c>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a4e      	ldr	r2, [pc, #312]	; (8008604 <RCCEx_PLL3_Config+0x15c>)
 80084cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084d2:	f7f9 fbf3 	bl	8001cbc <HAL_GetTick>
 80084d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80084d8:	e008      	b.n	80084ec <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80084da:	f7f9 fbef 	bl	8001cbc <HAL_GetTick>
 80084de:	4602      	mov	r2, r0
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	1ad3      	subs	r3, r2, r3
 80084e4:	2b02      	cmp	r3, #2
 80084e6:	d901      	bls.n	80084ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80084e8:	2303      	movs	r3, #3
 80084ea:	e086      	b.n	80085fa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80084ec:	4b45      	ldr	r3, [pc, #276]	; (8008604 <RCCEx_PLL3_Config+0x15c>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1f0      	bne.n	80084da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80084f8:	4b42      	ldr	r3, [pc, #264]	; (8008604 <RCCEx_PLL3_Config+0x15c>)
 80084fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084fc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	051b      	lsls	r3, r3, #20
 8008506:	493f      	ldr	r1, [pc, #252]	; (8008604 <RCCEx_PLL3_Config+0x15c>)
 8008508:	4313      	orrs	r3, r2
 800850a:	628b      	str	r3, [r1, #40]	; 0x28
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	3b01      	subs	r3, #1
 8008512:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	3b01      	subs	r3, #1
 800851c:	025b      	lsls	r3, r3, #9
 800851e:	b29b      	uxth	r3, r3
 8008520:	431a      	orrs	r2, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	3b01      	subs	r3, #1
 8008528:	041b      	lsls	r3, r3, #16
 800852a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800852e:	431a      	orrs	r2, r3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	691b      	ldr	r3, [r3, #16]
 8008534:	3b01      	subs	r3, #1
 8008536:	061b      	lsls	r3, r3, #24
 8008538:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800853c:	4931      	ldr	r1, [pc, #196]	; (8008604 <RCCEx_PLL3_Config+0x15c>)
 800853e:	4313      	orrs	r3, r2
 8008540:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008542:	4b30      	ldr	r3, [pc, #192]	; (8008604 <RCCEx_PLL3_Config+0x15c>)
 8008544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008546:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	695b      	ldr	r3, [r3, #20]
 800854e:	492d      	ldr	r1, [pc, #180]	; (8008604 <RCCEx_PLL3_Config+0x15c>)
 8008550:	4313      	orrs	r3, r2
 8008552:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008554:	4b2b      	ldr	r3, [pc, #172]	; (8008604 <RCCEx_PLL3_Config+0x15c>)
 8008556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008558:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	699b      	ldr	r3, [r3, #24]
 8008560:	4928      	ldr	r1, [pc, #160]	; (8008604 <RCCEx_PLL3_Config+0x15c>)
 8008562:	4313      	orrs	r3, r2
 8008564:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008566:	4b27      	ldr	r3, [pc, #156]	; (8008604 <RCCEx_PLL3_Config+0x15c>)
 8008568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800856a:	4a26      	ldr	r2, [pc, #152]	; (8008604 <RCCEx_PLL3_Config+0x15c>)
 800856c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008570:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008572:	4b24      	ldr	r3, [pc, #144]	; (8008604 <RCCEx_PLL3_Config+0x15c>)
 8008574:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008576:	4b24      	ldr	r3, [pc, #144]	; (8008608 <RCCEx_PLL3_Config+0x160>)
 8008578:	4013      	ands	r3, r2
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	69d2      	ldr	r2, [r2, #28]
 800857e:	00d2      	lsls	r2, r2, #3
 8008580:	4920      	ldr	r1, [pc, #128]	; (8008604 <RCCEx_PLL3_Config+0x15c>)
 8008582:	4313      	orrs	r3, r2
 8008584:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008586:	4b1f      	ldr	r3, [pc, #124]	; (8008604 <RCCEx_PLL3_Config+0x15c>)
 8008588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858a:	4a1e      	ldr	r2, [pc, #120]	; (8008604 <RCCEx_PLL3_Config+0x15c>)
 800858c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008590:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d106      	bne.n	80085a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008598:	4b1a      	ldr	r3, [pc, #104]	; (8008604 <RCCEx_PLL3_Config+0x15c>)
 800859a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859c:	4a19      	ldr	r2, [pc, #100]	; (8008604 <RCCEx_PLL3_Config+0x15c>)
 800859e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80085a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80085a4:	e00f      	b.n	80085c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d106      	bne.n	80085ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80085ac:	4b15      	ldr	r3, [pc, #84]	; (8008604 <RCCEx_PLL3_Config+0x15c>)
 80085ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b0:	4a14      	ldr	r2, [pc, #80]	; (8008604 <RCCEx_PLL3_Config+0x15c>)
 80085b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80085b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80085b8:	e005      	b.n	80085c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80085ba:	4b12      	ldr	r3, [pc, #72]	; (8008604 <RCCEx_PLL3_Config+0x15c>)
 80085bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085be:	4a11      	ldr	r2, [pc, #68]	; (8008604 <RCCEx_PLL3_Config+0x15c>)
 80085c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80085c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80085c6:	4b0f      	ldr	r3, [pc, #60]	; (8008604 <RCCEx_PLL3_Config+0x15c>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a0e      	ldr	r2, [pc, #56]	; (8008604 <RCCEx_PLL3_Config+0x15c>)
 80085cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085d2:	f7f9 fb73 	bl	8001cbc <HAL_GetTick>
 80085d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80085d8:	e008      	b.n	80085ec <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80085da:	f7f9 fb6f 	bl	8001cbc <HAL_GetTick>
 80085de:	4602      	mov	r2, r0
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	1ad3      	subs	r3, r2, r3
 80085e4:	2b02      	cmp	r3, #2
 80085e6:	d901      	bls.n	80085ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80085e8:	2303      	movs	r3, #3
 80085ea:	e006      	b.n	80085fa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80085ec:	4b05      	ldr	r3, [pc, #20]	; (8008604 <RCCEx_PLL3_Config+0x15c>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d0f0      	beq.n	80085da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80085f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3710      	adds	r7, #16
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	58024400 	.word	0x58024400
 8008608:	ffff0007 	.word	0xffff0007

0800860c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d101      	bne.n	800861e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e049      	b.n	80086b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008624:	b2db      	uxtb	r3, r3
 8008626:	2b00      	cmp	r3, #0
 8008628:	d106      	bne.n	8008638 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2200      	movs	r2, #0
 800862e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f7f9 f80e 	bl	8001654 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2202      	movs	r2, #2
 800863c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	3304      	adds	r3, #4
 8008648:	4619      	mov	r1, r3
 800864a:	4610      	mov	r0, r2
 800864c:	f000 fa24 	bl	8008a98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2201      	movs	r2, #1
 8008654:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2201      	movs	r2, #1
 8008664:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2201      	movs	r2, #1
 800867c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2201      	movs	r2, #1
 800868c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3708      	adds	r7, #8
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
	...

080086bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80086bc:	b480      	push	{r7}
 80086be:	b085      	sub	sp, #20
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d001      	beq.n	80086d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80086d0:	2301      	movs	r3, #1
 80086d2:	e019      	b.n	8008708 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2202      	movs	r2, #2
 80086d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	689a      	ldr	r2, [r3, #8]
 80086e2:	4b0c      	ldr	r3, [pc, #48]	; (8008714 <HAL_TIM_Base_Start+0x58>)
 80086e4:	4013      	ands	r3, r2
 80086e6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2b06      	cmp	r3, #6
 80086ec:	d00b      	beq.n	8008706 <HAL_TIM_Base_Start+0x4a>
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086f4:	d007      	beq.n	8008706 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f042 0201 	orr.w	r2, r2, #1
 8008704:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008706:	2300      	movs	r3, #0
}
 8008708:	4618      	mov	r0, r3
 800870a:	3714      	adds	r7, #20
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr
 8008714:	00010007 	.word	0x00010007

08008718 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008726:	b2db      	uxtb	r3, r3
 8008728:	2b01      	cmp	r3, #1
 800872a:	d001      	beq.n	8008730 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800872c:	2301      	movs	r3, #1
 800872e:	e021      	b.n	8008774 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2202      	movs	r2, #2
 8008734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68da      	ldr	r2, [r3, #12]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f042 0201 	orr.w	r2, r2, #1
 8008746:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	689a      	ldr	r2, [r3, #8]
 800874e:	4b0c      	ldr	r3, [pc, #48]	; (8008780 <HAL_TIM_Base_Start_IT+0x68>)
 8008750:	4013      	ands	r3, r2
 8008752:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2b06      	cmp	r3, #6
 8008758:	d00b      	beq.n	8008772 <HAL_TIM_Base_Start_IT+0x5a>
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008760:	d007      	beq.n	8008772 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f042 0201 	orr.w	r2, r2, #1
 8008770:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008772:	2300      	movs	r3, #0
}
 8008774:	4618      	mov	r0, r3
 8008776:	3714      	adds	r7, #20
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr
 8008780:	00010007 	.word	0x00010007

08008784 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	691b      	ldr	r3, [r3, #16]
 8008792:	f003 0302 	and.w	r3, r3, #2
 8008796:	2b02      	cmp	r3, #2
 8008798:	d122      	bne.n	80087e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	68db      	ldr	r3, [r3, #12]
 80087a0:	f003 0302 	and.w	r3, r3, #2
 80087a4:	2b02      	cmp	r3, #2
 80087a6:	d11b      	bne.n	80087e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f06f 0202 	mvn.w	r2, #2
 80087b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2201      	movs	r2, #1
 80087b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	699b      	ldr	r3, [r3, #24]
 80087be:	f003 0303 	and.w	r3, r3, #3
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d003      	beq.n	80087ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 f947 	bl	8008a5a <HAL_TIM_IC_CaptureCallback>
 80087cc:	e005      	b.n	80087da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 f939 	bl	8008a46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 f94a 	bl	8008a6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	f003 0304 	and.w	r3, r3, #4
 80087ea:	2b04      	cmp	r3, #4
 80087ec:	d122      	bne.n	8008834 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	f003 0304 	and.w	r3, r3, #4
 80087f8:	2b04      	cmp	r3, #4
 80087fa:	d11b      	bne.n	8008834 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f06f 0204 	mvn.w	r2, #4
 8008804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2202      	movs	r2, #2
 800880a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	699b      	ldr	r3, [r3, #24]
 8008812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008816:	2b00      	cmp	r3, #0
 8008818:	d003      	beq.n	8008822 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 f91d 	bl	8008a5a <HAL_TIM_IC_CaptureCallback>
 8008820:	e005      	b.n	800882e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 f90f 	bl	8008a46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 f920 	bl	8008a6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	691b      	ldr	r3, [r3, #16]
 800883a:	f003 0308 	and.w	r3, r3, #8
 800883e:	2b08      	cmp	r3, #8
 8008840:	d122      	bne.n	8008888 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	f003 0308 	and.w	r3, r3, #8
 800884c:	2b08      	cmp	r3, #8
 800884e:	d11b      	bne.n	8008888 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f06f 0208 	mvn.w	r2, #8
 8008858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2204      	movs	r2, #4
 800885e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	69db      	ldr	r3, [r3, #28]
 8008866:	f003 0303 	and.w	r3, r3, #3
 800886a:	2b00      	cmp	r3, #0
 800886c:	d003      	beq.n	8008876 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 f8f3 	bl	8008a5a <HAL_TIM_IC_CaptureCallback>
 8008874:	e005      	b.n	8008882 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 f8e5 	bl	8008a46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 f8f6 	bl	8008a6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	691b      	ldr	r3, [r3, #16]
 800888e:	f003 0310 	and.w	r3, r3, #16
 8008892:	2b10      	cmp	r3, #16
 8008894:	d122      	bne.n	80088dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	f003 0310 	and.w	r3, r3, #16
 80088a0:	2b10      	cmp	r3, #16
 80088a2:	d11b      	bne.n	80088dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f06f 0210 	mvn.w	r2, #16
 80088ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2208      	movs	r2, #8
 80088b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	69db      	ldr	r3, [r3, #28]
 80088ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d003      	beq.n	80088ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 f8c9 	bl	8008a5a <HAL_TIM_IC_CaptureCallback>
 80088c8:	e005      	b.n	80088d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 f8bb 	bl	8008a46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 f8cc 	bl	8008a6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	f003 0301 	and.w	r3, r3, #1
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d10e      	bne.n	8008908 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	f003 0301 	and.w	r3, r3, #1
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d107      	bne.n	8008908 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f06f 0201 	mvn.w	r2, #1
 8008900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f7f8 fc00 	bl	8001108 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008912:	2b80      	cmp	r3, #128	; 0x80
 8008914:	d10e      	bne.n	8008934 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008920:	2b80      	cmp	r3, #128	; 0x80
 8008922:	d107      	bne.n	8008934 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800892c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 fb28 	bl	8008f84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	691b      	ldr	r3, [r3, #16]
 800893a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800893e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008942:	d10e      	bne.n	8008962 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800894e:	2b80      	cmp	r3, #128	; 0x80
 8008950:	d107      	bne.n	8008962 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800895a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 fb1b 	bl	8008f98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	691b      	ldr	r3, [r3, #16]
 8008968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800896c:	2b40      	cmp	r3, #64	; 0x40
 800896e:	d10e      	bne.n	800898e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800897a:	2b40      	cmp	r3, #64	; 0x40
 800897c:	d107      	bne.n	800898e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 f87a 	bl	8008a82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	691b      	ldr	r3, [r3, #16]
 8008994:	f003 0320 	and.w	r3, r3, #32
 8008998:	2b20      	cmp	r3, #32
 800899a:	d10e      	bne.n	80089ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	68db      	ldr	r3, [r3, #12]
 80089a2:	f003 0320 	and.w	r3, r3, #32
 80089a6:	2b20      	cmp	r3, #32
 80089a8:	d107      	bne.n	80089ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f06f 0220 	mvn.w	r2, #32
 80089b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 fadb 	bl	8008f70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80089ba:	bf00      	nop
 80089bc:	3708      	adds	r7, #8
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80089c2:	b580      	push	{r7, lr}
 80089c4:	b082      	sub	sp, #8
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
 80089ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d101      	bne.n	80089da <HAL_TIM_SlaveConfigSynchro+0x18>
 80089d6:	2302      	movs	r3, #2
 80089d8:	e031      	b.n	8008a3e <HAL_TIM_SlaveConfigSynchro+0x7c>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2201      	movs	r2, #1
 80089de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2202      	movs	r2, #2
 80089e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80089ea:	6839      	ldr	r1, [r7, #0]
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 f8ed 	bl	8008bcc <TIM_SlaveTimer_SetConfig>
 80089f2:	4603      	mov	r3, r0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d009      	beq.n	8008a0c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	e018      	b.n	8008a3e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	68da      	ldr	r2, [r3, #12]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a1a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	68da      	ldr	r2, [r3, #12]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008a2a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3708      	adds	r7, #8
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a46:	b480      	push	{r7}
 8008a48:	b083      	sub	sp, #12
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a4e:	bf00      	nop
 8008a50:	370c      	adds	r7, #12
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr

08008a5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a5a:	b480      	push	{r7}
 8008a5c:	b083      	sub	sp, #12
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a62:	bf00      	nop
 8008a64:	370c      	adds	r7, #12
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr

08008a6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a6e:	b480      	push	{r7}
 8008a70:	b083      	sub	sp, #12
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008a76:	bf00      	nop
 8008a78:	370c      	adds	r7, #12
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr

08008a82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008a82:	b480      	push	{r7}
 8008a84:	b083      	sub	sp, #12
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a8a:	bf00      	nop
 8008a8c:	370c      	adds	r7, #12
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr
	...

08008a98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b085      	sub	sp, #20
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	4a40      	ldr	r2, [pc, #256]	; (8008bac <TIM_Base_SetConfig+0x114>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d013      	beq.n	8008ad8 <TIM_Base_SetConfig+0x40>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ab6:	d00f      	beq.n	8008ad8 <TIM_Base_SetConfig+0x40>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	4a3d      	ldr	r2, [pc, #244]	; (8008bb0 <TIM_Base_SetConfig+0x118>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d00b      	beq.n	8008ad8 <TIM_Base_SetConfig+0x40>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	4a3c      	ldr	r2, [pc, #240]	; (8008bb4 <TIM_Base_SetConfig+0x11c>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d007      	beq.n	8008ad8 <TIM_Base_SetConfig+0x40>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4a3b      	ldr	r2, [pc, #236]	; (8008bb8 <TIM_Base_SetConfig+0x120>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d003      	beq.n	8008ad8 <TIM_Base_SetConfig+0x40>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4a3a      	ldr	r2, [pc, #232]	; (8008bbc <TIM_Base_SetConfig+0x124>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d108      	bne.n	8008aea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ade:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	68fa      	ldr	r2, [r7, #12]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4a2f      	ldr	r2, [pc, #188]	; (8008bac <TIM_Base_SetConfig+0x114>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d01f      	beq.n	8008b32 <TIM_Base_SetConfig+0x9a>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008af8:	d01b      	beq.n	8008b32 <TIM_Base_SetConfig+0x9a>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4a2c      	ldr	r2, [pc, #176]	; (8008bb0 <TIM_Base_SetConfig+0x118>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d017      	beq.n	8008b32 <TIM_Base_SetConfig+0x9a>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	4a2b      	ldr	r2, [pc, #172]	; (8008bb4 <TIM_Base_SetConfig+0x11c>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d013      	beq.n	8008b32 <TIM_Base_SetConfig+0x9a>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4a2a      	ldr	r2, [pc, #168]	; (8008bb8 <TIM_Base_SetConfig+0x120>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d00f      	beq.n	8008b32 <TIM_Base_SetConfig+0x9a>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4a29      	ldr	r2, [pc, #164]	; (8008bbc <TIM_Base_SetConfig+0x124>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d00b      	beq.n	8008b32 <TIM_Base_SetConfig+0x9a>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4a28      	ldr	r2, [pc, #160]	; (8008bc0 <TIM_Base_SetConfig+0x128>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d007      	beq.n	8008b32 <TIM_Base_SetConfig+0x9a>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	4a27      	ldr	r2, [pc, #156]	; (8008bc4 <TIM_Base_SetConfig+0x12c>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d003      	beq.n	8008b32 <TIM_Base_SetConfig+0x9a>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4a26      	ldr	r2, [pc, #152]	; (8008bc8 <TIM_Base_SetConfig+0x130>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d108      	bne.n	8008b44 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	4313      	orrs	r3, r2
 8008b42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	695b      	ldr	r3, [r3, #20]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	689a      	ldr	r2, [r3, #8]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	4a10      	ldr	r2, [pc, #64]	; (8008bac <TIM_Base_SetConfig+0x114>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d00f      	beq.n	8008b90 <TIM_Base_SetConfig+0xf8>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4a12      	ldr	r2, [pc, #72]	; (8008bbc <TIM_Base_SetConfig+0x124>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d00b      	beq.n	8008b90 <TIM_Base_SetConfig+0xf8>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	4a11      	ldr	r2, [pc, #68]	; (8008bc0 <TIM_Base_SetConfig+0x128>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d007      	beq.n	8008b90 <TIM_Base_SetConfig+0xf8>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4a10      	ldr	r2, [pc, #64]	; (8008bc4 <TIM_Base_SetConfig+0x12c>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d003      	beq.n	8008b90 <TIM_Base_SetConfig+0xf8>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4a0f      	ldr	r2, [pc, #60]	; (8008bc8 <TIM_Base_SetConfig+0x130>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d103      	bne.n	8008b98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	691a      	ldr	r2, [r3, #16]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	615a      	str	r2, [r3, #20]
}
 8008b9e:	bf00      	nop
 8008ba0:	3714      	adds	r7, #20
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr
 8008baa:	bf00      	nop
 8008bac:	40010000 	.word	0x40010000
 8008bb0:	40000400 	.word	0x40000400
 8008bb4:	40000800 	.word	0x40000800
 8008bb8:	40000c00 	.word	0x40000c00
 8008bbc:	40010400 	.word	0x40010400
 8008bc0:	40014000 	.word	0x40014000
 8008bc4:	40014400 	.word	0x40014400
 8008bc8:	40014800 	.word	0x40014800

08008bcc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b086      	sub	sp, #24
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008bde:	697a      	ldr	r2, [r7, #20]
 8008be0:	4b56      	ldr	r3, [pc, #344]	; (8008d3c <TIM_SlaveTimer_SetConfig+0x170>)
 8008be2:	4013      	ands	r3, r2
 8008be4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	697a      	ldr	r2, [r7, #20]
 8008bec:	4313      	orrs	r3, r2
 8008bee:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008bf0:	697a      	ldr	r2, [r7, #20]
 8008bf2:	4b53      	ldr	r3, [pc, #332]	; (8008d40 <TIM_SlaveTimer_SetConfig+0x174>)
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	697a      	ldr	r2, [r7, #20]
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	697a      	ldr	r2, [r7, #20]
 8008c08:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c12:	f000 808c 	beq.w	8008d2e <TIM_SlaveTimer_SetConfig+0x162>
 8008c16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c1a:	d818      	bhi.n	8008c4e <TIM_SlaveTimer_SetConfig+0x82>
 8008c1c:	2b30      	cmp	r3, #48	; 0x30
 8008c1e:	f000 8086 	beq.w	8008d2e <TIM_SlaveTimer_SetConfig+0x162>
 8008c22:	2b30      	cmp	r3, #48	; 0x30
 8008c24:	d807      	bhi.n	8008c36 <TIM_SlaveTimer_SetConfig+0x6a>
 8008c26:	2b10      	cmp	r3, #16
 8008c28:	f000 8081 	beq.w	8008d2e <TIM_SlaveTimer_SetConfig+0x162>
 8008c2c:	2b20      	cmp	r3, #32
 8008c2e:	d07e      	beq.n	8008d2e <TIM_SlaveTimer_SetConfig+0x162>
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d07c      	beq.n	8008d2e <TIM_SlaveTimer_SetConfig+0x162>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8008c34:	e07c      	b.n	8008d30 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8008c36:	2b50      	cmp	r3, #80	; 0x50
 8008c38:	d065      	beq.n	8008d06 <TIM_SlaveTimer_SetConfig+0x13a>
 8008c3a:	2b50      	cmp	r3, #80	; 0x50
 8008c3c:	d802      	bhi.n	8008c44 <TIM_SlaveTimer_SetConfig+0x78>
 8008c3e:	2b40      	cmp	r3, #64	; 0x40
 8008c40:	d038      	beq.n	8008cb4 <TIM_SlaveTimer_SetConfig+0xe8>
      break;
 8008c42:	e075      	b.n	8008d30 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8008c44:	2b60      	cmp	r3, #96	; 0x60
 8008c46:	d068      	beq.n	8008d1a <TIM_SlaveTimer_SetConfig+0x14e>
 8008c48:	2b70      	cmp	r3, #112	; 0x70
 8008c4a:	d028      	beq.n	8008c9e <TIM_SlaveTimer_SetConfig+0xd2>
      break;
 8008c4c:	e070      	b.n	8008d30 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8008c4e:	4a3d      	ldr	r2, [pc, #244]	; (8008d44 <TIM_SlaveTimer_SetConfig+0x178>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d06c      	beq.n	8008d2e <TIM_SlaveTimer_SetConfig+0x162>
 8008c54:	4a3b      	ldr	r2, [pc, #236]	; (8008d44 <TIM_SlaveTimer_SetConfig+0x178>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d810      	bhi.n	8008c7c <TIM_SlaveTimer_SetConfig+0xb0>
 8008c5a:	4a3b      	ldr	r2, [pc, #236]	; (8008d48 <TIM_SlaveTimer_SetConfig+0x17c>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d066      	beq.n	8008d2e <TIM_SlaveTimer_SetConfig+0x162>
 8008c60:	4a39      	ldr	r2, [pc, #228]	; (8008d48 <TIM_SlaveTimer_SetConfig+0x17c>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d803      	bhi.n	8008c6e <TIM_SlaveTimer_SetConfig+0xa2>
 8008c66:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008c6a:	d060      	beq.n	8008d2e <TIM_SlaveTimer_SetConfig+0x162>
      break;
 8008c6c:	e060      	b.n	8008d30 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8008c6e:	4a37      	ldr	r2, [pc, #220]	; (8008d4c <TIM_SlaveTimer_SetConfig+0x180>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d05c      	beq.n	8008d2e <TIM_SlaveTimer_SetConfig+0x162>
 8008c74:	4a36      	ldr	r2, [pc, #216]	; (8008d50 <TIM_SlaveTimer_SetConfig+0x184>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d059      	beq.n	8008d2e <TIM_SlaveTimer_SetConfig+0x162>
      break;
 8008c7a:	e059      	b.n	8008d30 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8008c7c:	4a35      	ldr	r2, [pc, #212]	; (8008d54 <TIM_SlaveTimer_SetConfig+0x188>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d055      	beq.n	8008d2e <TIM_SlaveTimer_SetConfig+0x162>
 8008c82:	4a34      	ldr	r2, [pc, #208]	; (8008d54 <TIM_SlaveTimer_SetConfig+0x188>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d803      	bhi.n	8008c90 <TIM_SlaveTimer_SetConfig+0xc4>
 8008c88:	4a33      	ldr	r2, [pc, #204]	; (8008d58 <TIM_SlaveTimer_SetConfig+0x18c>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d04f      	beq.n	8008d2e <TIM_SlaveTimer_SetConfig+0x162>
      break;
 8008c8e:	e04f      	b.n	8008d30 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8008c90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c94:	d04b      	beq.n	8008d2e <TIM_SlaveTimer_SetConfig+0x162>
 8008c96:	4a31      	ldr	r2, [pc, #196]	; (8008d5c <TIM_SlaveTimer_SetConfig+0x190>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d048      	beq.n	8008d2e <TIM_SlaveTimer_SetConfig+0x162>
      break;
 8008c9c:	e048      	b.n	8008d30 <TIM_SlaveTimer_SetConfig+0x164>
      TIM_ETR_SetConfig(htim->Instance,
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6818      	ldr	r0, [r3, #0]
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	68d9      	ldr	r1, [r3, #12]
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	689a      	ldr	r2, [r3, #8]
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	691b      	ldr	r3, [r3, #16]
 8008cae:	f000 f8b6 	bl	8008e1e <TIM_ETR_SetConfig>
      break;
 8008cb2:	e03d      	b.n	8008d30 <TIM_SlaveTimer_SetConfig+0x164>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2b05      	cmp	r3, #5
 8008cba:	d101      	bne.n	8008cc0 <TIM_SlaveTimer_SetConfig+0xf4>
        return HAL_ERROR;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	e038      	b.n	8008d32 <TIM_SlaveTimer_SetConfig+0x166>
      tmpccer = htim->Instance->CCER;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	6a1b      	ldr	r3, [r3, #32]
 8008cc6:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	6a1a      	ldr	r2, [r3, #32]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f022 0201 	bic.w	r2, r2, #1
 8008cd6:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	699b      	ldr	r3, [r3, #24]
 8008cde:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ce6:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	011b      	lsls	r3, r3, #4
 8008cee:	68fa      	ldr	r2, [r7, #12]
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	68fa      	ldr	r2, [r7, #12]
 8008cfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	693a      	ldr	r2, [r7, #16]
 8008d02:	621a      	str	r2, [r3, #32]
      break;
 8008d04:	e014      	b.n	8008d30 <TIM_SlaveTimer_SetConfig+0x164>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6818      	ldr	r0, [r3, #0]
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	6899      	ldr	r1, [r3, #8]
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	691b      	ldr	r3, [r3, #16]
 8008d12:	461a      	mov	r2, r3
 8008d14:	f000 f824 	bl	8008d60 <TIM_TI1_ConfigInputStage>
      break;
 8008d18:	e00a      	b.n	8008d30 <TIM_SlaveTimer_SetConfig+0x164>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6818      	ldr	r0, [r3, #0]
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	6899      	ldr	r1, [r3, #8]
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	691b      	ldr	r3, [r3, #16]
 8008d26:	461a      	mov	r2, r3
 8008d28:	f000 f849 	bl	8008dbe <TIM_TI2_ConfigInputStage>
      break;
 8008d2c:	e000      	b.n	8008d30 <TIM_SlaveTimer_SetConfig+0x164>
      break;
 8008d2e:	bf00      	nop
  }
  return HAL_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3718      	adds	r7, #24
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	ffcfff8f 	.word	0xffcfff8f
 8008d40:	fffefff8 	.word	0xfffefff8
 8008d44:	00100050 	.word	0x00100050
 8008d48:	00100020 	.word	0x00100020
 8008d4c:	00100030 	.word	0x00100030
 8008d50:	00100040 	.word	0x00100040
 8008d54:	00100070 	.word	0x00100070
 8008d58:	00100060 	.word	0x00100060
 8008d5c:	00200010 	.word	0x00200010

08008d60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b087      	sub	sp, #28
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	60b9      	str	r1, [r7, #8]
 8008d6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6a1b      	ldr	r3, [r3, #32]
 8008d70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	6a1b      	ldr	r3, [r3, #32]
 8008d76:	f023 0201 	bic.w	r2, r3, #1
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	699b      	ldr	r3, [r3, #24]
 8008d82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	011b      	lsls	r3, r3, #4
 8008d90:	693a      	ldr	r2, [r7, #16]
 8008d92:	4313      	orrs	r3, r2
 8008d94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	f023 030a 	bic.w	r3, r3, #10
 8008d9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d9e:	697a      	ldr	r2, [r7, #20]
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	4313      	orrs	r3, r2
 8008da4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	693a      	ldr	r2, [r7, #16]
 8008daa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	697a      	ldr	r2, [r7, #20]
 8008db0:	621a      	str	r2, [r3, #32]
}
 8008db2:	bf00      	nop
 8008db4:	371c      	adds	r7, #28
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr

08008dbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008dbe:	b480      	push	{r7}
 8008dc0:	b087      	sub	sp, #28
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	60f8      	str	r0, [r7, #12]
 8008dc6:	60b9      	str	r1, [r7, #8]
 8008dc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6a1b      	ldr	r3, [r3, #32]
 8008dce:	f023 0210 	bic.w	r2, r3, #16
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	699b      	ldr	r3, [r3, #24]
 8008dda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6a1b      	ldr	r3, [r3, #32]
 8008de0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008de8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	031b      	lsls	r3, r3, #12
 8008dee:	697a      	ldr	r2, [r7, #20]
 8008df0:	4313      	orrs	r3, r2
 8008df2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008dfa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	011b      	lsls	r3, r3, #4
 8008e00:	693a      	ldr	r2, [r7, #16]
 8008e02:	4313      	orrs	r3, r2
 8008e04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	697a      	ldr	r2, [r7, #20]
 8008e0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	693a      	ldr	r2, [r7, #16]
 8008e10:	621a      	str	r2, [r3, #32]
}
 8008e12:	bf00      	nop
 8008e14:	371c      	adds	r7, #28
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr

08008e1e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e1e:	b480      	push	{r7}
 8008e20:	b087      	sub	sp, #28
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	60f8      	str	r0, [r7, #12]
 8008e26:	60b9      	str	r1, [r7, #8]
 8008e28:	607a      	str	r2, [r7, #4]
 8008e2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e38:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	021a      	lsls	r2, r3, #8
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	431a      	orrs	r2, r3
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	4313      	orrs	r3, r2
 8008e46:	697a      	ldr	r2, [r7, #20]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	697a      	ldr	r2, [r7, #20]
 8008e50:	609a      	str	r2, [r3, #8]
}
 8008e52:	bf00      	nop
 8008e54:	371c      	adds	r7, #28
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr
	...

08008e60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b085      	sub	sp, #20
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d101      	bne.n	8008e78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e74:	2302      	movs	r3, #2
 8008e76:	e068      	b.n	8008f4a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2202      	movs	r2, #2
 8008e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a2e      	ldr	r2, [pc, #184]	; (8008f58 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d004      	beq.n	8008eac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a2d      	ldr	r2, [pc, #180]	; (8008f5c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d108      	bne.n	8008ebe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008eb2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ec4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	68fa      	ldr	r2, [r7, #12]
 8008ed6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a1e      	ldr	r2, [pc, #120]	; (8008f58 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d01d      	beq.n	8008f1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eea:	d018      	beq.n	8008f1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a1b      	ldr	r2, [pc, #108]	; (8008f60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d013      	beq.n	8008f1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a1a      	ldr	r2, [pc, #104]	; (8008f64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d00e      	beq.n	8008f1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a18      	ldr	r2, [pc, #96]	; (8008f68 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d009      	beq.n	8008f1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4a13      	ldr	r2, [pc, #76]	; (8008f5c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d004      	beq.n	8008f1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a14      	ldr	r2, [pc, #80]	; (8008f6c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d10c      	bne.n	8008f38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	68ba      	ldr	r2, [r7, #8]
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	68ba      	ldr	r2, [r7, #8]
 8008f36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3714      	adds	r7, #20
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr
 8008f56:	bf00      	nop
 8008f58:	40010000 	.word	0x40010000
 8008f5c:	40010400 	.word	0x40010400
 8008f60:	40000400 	.word	0x40000400
 8008f64:	40000800 	.word	0x40000800
 8008f68:	40000c00 	.word	0x40000c00
 8008f6c:	40001800 	.word	0x40001800

08008f70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f78:	bf00      	nop
 8008f7a:	370c      	adds	r7, #12
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f8c:	bf00      	nop
 8008f8e:	370c      	adds	r7, #12
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008fa0:	bf00      	nop
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d101      	bne.n	8008fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e042      	b.n	8009044 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d106      	bne.n	8008fd6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f7f8 fbf3 	bl	80017bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2224      	movs	r2, #36	; 0x24
 8008fda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f022 0201 	bic.w	r2, r2, #1
 8008fec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 f8c2 	bl	8009178 <UART_SetConfig>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d101      	bne.n	8008ffe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e022      	b.n	8009044 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009002:	2b00      	cmp	r3, #0
 8009004:	d002      	beq.n	800900c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 ff62 	bl	8009ed0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	685a      	ldr	r2, [r3, #4]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800901a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	689a      	ldr	r2, [r3, #8]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800902a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f042 0201 	orr.w	r2, r2, #1
 800903a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 ffe9 	bl	800a014 <UART_CheckIdleState>
 8009042:	4603      	mov	r3, r0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3708      	adds	r7, #8
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b08a      	sub	sp, #40	; 0x28
 8009050:	af02      	add	r7, sp, #8
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	603b      	str	r3, [r7, #0]
 8009058:	4613      	mov	r3, r2
 800905a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009062:	2b20      	cmp	r3, #32
 8009064:	f040 8083 	bne.w	800916e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d002      	beq.n	8009074 <HAL_UART_Transmit+0x28>
 800906e:	88fb      	ldrh	r3, [r7, #6]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d101      	bne.n	8009078 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009074:	2301      	movs	r3, #1
 8009076:	e07b      	b.n	8009170 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800907e:	2b01      	cmp	r3, #1
 8009080:	d101      	bne.n	8009086 <HAL_UART_Transmit+0x3a>
 8009082:	2302      	movs	r3, #2
 8009084:	e074      	b.n	8009170 <HAL_UART_Transmit+0x124>
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2201      	movs	r2, #1
 800908a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2200      	movs	r2, #0
 8009092:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2221      	movs	r2, #33	; 0x21
 800909a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800909e:	f7f8 fe0d 	bl	8001cbc <HAL_GetTick>
 80090a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	88fa      	ldrh	r2, [r7, #6]
 80090a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	88fa      	ldrh	r2, [r7, #6]
 80090b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090bc:	d108      	bne.n	80090d0 <HAL_UART_Transmit+0x84>
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	691b      	ldr	r3, [r3, #16]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d104      	bne.n	80090d0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80090c6:	2300      	movs	r3, #0
 80090c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	61bb      	str	r3, [r7, #24]
 80090ce:	e003      	b.n	80090d8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80090d4:	2300      	movs	r3, #0
 80090d6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2200      	movs	r2, #0
 80090dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 80090e0:	e02c      	b.n	800913c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	9300      	str	r3, [sp, #0]
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	2200      	movs	r2, #0
 80090ea:	2180      	movs	r1, #128	; 0x80
 80090ec:	68f8      	ldr	r0, [r7, #12]
 80090ee:	f000 ffd9 	bl	800a0a4 <UART_WaitOnFlagUntilTimeout>
 80090f2:	4603      	mov	r3, r0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d001      	beq.n	80090fc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80090f8:	2303      	movs	r3, #3
 80090fa:	e039      	b.n	8009170 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d10b      	bne.n	800911a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	881b      	ldrh	r3, [r3, #0]
 8009106:	461a      	mov	r2, r3
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009110:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009112:	69bb      	ldr	r3, [r7, #24]
 8009114:	3302      	adds	r3, #2
 8009116:	61bb      	str	r3, [r7, #24]
 8009118:	e007      	b.n	800912a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	781a      	ldrb	r2, [r3, #0]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009124:	69fb      	ldr	r3, [r7, #28]
 8009126:	3301      	adds	r3, #1
 8009128:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009130:	b29b      	uxth	r3, r3
 8009132:	3b01      	subs	r3, #1
 8009134:	b29a      	uxth	r2, r3
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009142:	b29b      	uxth	r3, r3
 8009144:	2b00      	cmp	r3, #0
 8009146:	d1cc      	bne.n	80090e2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	9300      	str	r3, [sp, #0]
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	2200      	movs	r2, #0
 8009150:	2140      	movs	r1, #64	; 0x40
 8009152:	68f8      	ldr	r0, [r7, #12]
 8009154:	f000 ffa6 	bl	800a0a4 <UART_WaitOnFlagUntilTimeout>
 8009158:	4603      	mov	r3, r0
 800915a:	2b00      	cmp	r3, #0
 800915c:	d001      	beq.n	8009162 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800915e:	2303      	movs	r3, #3
 8009160:	e006      	b.n	8009170 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2220      	movs	r2, #32
 8009166:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800916a:	2300      	movs	r3, #0
 800916c:	e000      	b.n	8009170 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800916e:	2302      	movs	r3, #2
  }
}
 8009170:	4618      	mov	r0, r3
 8009172:	3720      	adds	r7, #32
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009178:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800917c:	b08e      	sub	sp, #56	; 0x38
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009182:	2300      	movs	r3, #0
 8009184:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	689a      	ldr	r2, [r3, #8]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	691b      	ldr	r3, [r3, #16]
 8009190:	431a      	orrs	r2, r3
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	695b      	ldr	r3, [r3, #20]
 8009196:	431a      	orrs	r2, r3
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	69db      	ldr	r3, [r3, #28]
 800919c:	4313      	orrs	r3, r2
 800919e:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091a6:	4313      	orrs	r3, r2
 80091a8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	4bc1      	ldr	r3, [pc, #772]	; (80094b8 <UART_SetConfig+0x340>)
 80091b2:	4013      	ands	r3, r2
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	6812      	ldr	r2, [r2, #0]
 80091b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80091ba:	430b      	orrs	r3, r1
 80091bc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	68da      	ldr	r2, [r3, #12]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	430a      	orrs	r2, r1
 80091d2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	699b      	ldr	r3, [r3, #24]
 80091d8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4ab7      	ldr	r2, [pc, #732]	; (80094bc <UART_SetConfig+0x344>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d004      	beq.n	80091ee <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6a1b      	ldr	r3, [r3, #32]
 80091e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091ea:	4313      	orrs	r3, r2
 80091ec:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	689a      	ldr	r2, [r3, #8]
 80091f4:	4bb2      	ldr	r3, [pc, #712]	; (80094c0 <UART_SetConfig+0x348>)
 80091f6:	4013      	ands	r3, r2
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	6812      	ldr	r2, [r2, #0]
 80091fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80091fe:	430b      	orrs	r3, r1
 8009200:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009208:	f023 010f 	bic.w	r1, r3, #15
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	430a      	orrs	r2, r1
 8009216:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4aa9      	ldr	r2, [pc, #676]	; (80094c4 <UART_SetConfig+0x34c>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d177      	bne.n	8009312 <UART_SetConfig+0x19a>
 8009222:	4ba9      	ldr	r3, [pc, #676]	; (80094c8 <UART_SetConfig+0x350>)
 8009224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009226:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800922a:	2b28      	cmp	r3, #40	; 0x28
 800922c:	d86c      	bhi.n	8009308 <UART_SetConfig+0x190>
 800922e:	a201      	add	r2, pc, #4	; (adr r2, 8009234 <UART_SetConfig+0xbc>)
 8009230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009234:	080092d9 	.word	0x080092d9
 8009238:	08009309 	.word	0x08009309
 800923c:	08009309 	.word	0x08009309
 8009240:	08009309 	.word	0x08009309
 8009244:	08009309 	.word	0x08009309
 8009248:	08009309 	.word	0x08009309
 800924c:	08009309 	.word	0x08009309
 8009250:	08009309 	.word	0x08009309
 8009254:	080092e1 	.word	0x080092e1
 8009258:	08009309 	.word	0x08009309
 800925c:	08009309 	.word	0x08009309
 8009260:	08009309 	.word	0x08009309
 8009264:	08009309 	.word	0x08009309
 8009268:	08009309 	.word	0x08009309
 800926c:	08009309 	.word	0x08009309
 8009270:	08009309 	.word	0x08009309
 8009274:	080092e9 	.word	0x080092e9
 8009278:	08009309 	.word	0x08009309
 800927c:	08009309 	.word	0x08009309
 8009280:	08009309 	.word	0x08009309
 8009284:	08009309 	.word	0x08009309
 8009288:	08009309 	.word	0x08009309
 800928c:	08009309 	.word	0x08009309
 8009290:	08009309 	.word	0x08009309
 8009294:	080092f1 	.word	0x080092f1
 8009298:	08009309 	.word	0x08009309
 800929c:	08009309 	.word	0x08009309
 80092a0:	08009309 	.word	0x08009309
 80092a4:	08009309 	.word	0x08009309
 80092a8:	08009309 	.word	0x08009309
 80092ac:	08009309 	.word	0x08009309
 80092b0:	08009309 	.word	0x08009309
 80092b4:	080092f9 	.word	0x080092f9
 80092b8:	08009309 	.word	0x08009309
 80092bc:	08009309 	.word	0x08009309
 80092c0:	08009309 	.word	0x08009309
 80092c4:	08009309 	.word	0x08009309
 80092c8:	08009309 	.word	0x08009309
 80092cc:	08009309 	.word	0x08009309
 80092d0:	08009309 	.word	0x08009309
 80092d4:	08009301 	.word	0x08009301
 80092d8:	2301      	movs	r3, #1
 80092da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092de:	e339      	b.n	8009954 <UART_SetConfig+0x7dc>
 80092e0:	2304      	movs	r3, #4
 80092e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092e6:	e335      	b.n	8009954 <UART_SetConfig+0x7dc>
 80092e8:	2308      	movs	r3, #8
 80092ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092ee:	e331      	b.n	8009954 <UART_SetConfig+0x7dc>
 80092f0:	2310      	movs	r3, #16
 80092f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092f6:	e32d      	b.n	8009954 <UART_SetConfig+0x7dc>
 80092f8:	2320      	movs	r3, #32
 80092fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092fe:	e329      	b.n	8009954 <UART_SetConfig+0x7dc>
 8009300:	2340      	movs	r3, #64	; 0x40
 8009302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009306:	e325      	b.n	8009954 <UART_SetConfig+0x7dc>
 8009308:	2380      	movs	r3, #128	; 0x80
 800930a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800930e:	bf00      	nop
 8009310:	e320      	b.n	8009954 <UART_SetConfig+0x7dc>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a6d      	ldr	r2, [pc, #436]	; (80094cc <UART_SetConfig+0x354>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d132      	bne.n	8009382 <UART_SetConfig+0x20a>
 800931c:	4b6a      	ldr	r3, [pc, #424]	; (80094c8 <UART_SetConfig+0x350>)
 800931e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009320:	f003 0307 	and.w	r3, r3, #7
 8009324:	2b05      	cmp	r3, #5
 8009326:	d827      	bhi.n	8009378 <UART_SetConfig+0x200>
 8009328:	a201      	add	r2, pc, #4	; (adr r2, 8009330 <UART_SetConfig+0x1b8>)
 800932a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800932e:	bf00      	nop
 8009330:	08009349 	.word	0x08009349
 8009334:	08009351 	.word	0x08009351
 8009338:	08009359 	.word	0x08009359
 800933c:	08009361 	.word	0x08009361
 8009340:	08009369 	.word	0x08009369
 8009344:	08009371 	.word	0x08009371
 8009348:	2300      	movs	r3, #0
 800934a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800934e:	e301      	b.n	8009954 <UART_SetConfig+0x7dc>
 8009350:	2304      	movs	r3, #4
 8009352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009356:	e2fd      	b.n	8009954 <UART_SetConfig+0x7dc>
 8009358:	2308      	movs	r3, #8
 800935a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800935e:	e2f9      	b.n	8009954 <UART_SetConfig+0x7dc>
 8009360:	2310      	movs	r3, #16
 8009362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009366:	e2f5      	b.n	8009954 <UART_SetConfig+0x7dc>
 8009368:	2320      	movs	r3, #32
 800936a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800936e:	e2f1      	b.n	8009954 <UART_SetConfig+0x7dc>
 8009370:	2340      	movs	r3, #64	; 0x40
 8009372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009376:	e2ed      	b.n	8009954 <UART_SetConfig+0x7dc>
 8009378:	2380      	movs	r3, #128	; 0x80
 800937a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800937e:	bf00      	nop
 8009380:	e2e8      	b.n	8009954 <UART_SetConfig+0x7dc>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a52      	ldr	r2, [pc, #328]	; (80094d0 <UART_SetConfig+0x358>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d132      	bne.n	80093f2 <UART_SetConfig+0x27a>
 800938c:	4b4e      	ldr	r3, [pc, #312]	; (80094c8 <UART_SetConfig+0x350>)
 800938e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009390:	f003 0307 	and.w	r3, r3, #7
 8009394:	2b05      	cmp	r3, #5
 8009396:	d827      	bhi.n	80093e8 <UART_SetConfig+0x270>
 8009398:	a201      	add	r2, pc, #4	; (adr r2, 80093a0 <UART_SetConfig+0x228>)
 800939a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800939e:	bf00      	nop
 80093a0:	080093b9 	.word	0x080093b9
 80093a4:	080093c1 	.word	0x080093c1
 80093a8:	080093c9 	.word	0x080093c9
 80093ac:	080093d1 	.word	0x080093d1
 80093b0:	080093d9 	.word	0x080093d9
 80093b4:	080093e1 	.word	0x080093e1
 80093b8:	2300      	movs	r3, #0
 80093ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093be:	e2c9      	b.n	8009954 <UART_SetConfig+0x7dc>
 80093c0:	2304      	movs	r3, #4
 80093c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093c6:	e2c5      	b.n	8009954 <UART_SetConfig+0x7dc>
 80093c8:	2308      	movs	r3, #8
 80093ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093ce:	e2c1      	b.n	8009954 <UART_SetConfig+0x7dc>
 80093d0:	2310      	movs	r3, #16
 80093d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093d6:	e2bd      	b.n	8009954 <UART_SetConfig+0x7dc>
 80093d8:	2320      	movs	r3, #32
 80093da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093de:	e2b9      	b.n	8009954 <UART_SetConfig+0x7dc>
 80093e0:	2340      	movs	r3, #64	; 0x40
 80093e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093e6:	e2b5      	b.n	8009954 <UART_SetConfig+0x7dc>
 80093e8:	2380      	movs	r3, #128	; 0x80
 80093ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093ee:	bf00      	nop
 80093f0:	e2b0      	b.n	8009954 <UART_SetConfig+0x7dc>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a37      	ldr	r2, [pc, #220]	; (80094d4 <UART_SetConfig+0x35c>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d132      	bne.n	8009462 <UART_SetConfig+0x2ea>
 80093fc:	4b32      	ldr	r3, [pc, #200]	; (80094c8 <UART_SetConfig+0x350>)
 80093fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009400:	f003 0307 	and.w	r3, r3, #7
 8009404:	2b05      	cmp	r3, #5
 8009406:	d827      	bhi.n	8009458 <UART_SetConfig+0x2e0>
 8009408:	a201      	add	r2, pc, #4	; (adr r2, 8009410 <UART_SetConfig+0x298>)
 800940a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800940e:	bf00      	nop
 8009410:	08009429 	.word	0x08009429
 8009414:	08009431 	.word	0x08009431
 8009418:	08009439 	.word	0x08009439
 800941c:	08009441 	.word	0x08009441
 8009420:	08009449 	.word	0x08009449
 8009424:	08009451 	.word	0x08009451
 8009428:	2300      	movs	r3, #0
 800942a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800942e:	e291      	b.n	8009954 <UART_SetConfig+0x7dc>
 8009430:	2304      	movs	r3, #4
 8009432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009436:	e28d      	b.n	8009954 <UART_SetConfig+0x7dc>
 8009438:	2308      	movs	r3, #8
 800943a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800943e:	e289      	b.n	8009954 <UART_SetConfig+0x7dc>
 8009440:	2310      	movs	r3, #16
 8009442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009446:	e285      	b.n	8009954 <UART_SetConfig+0x7dc>
 8009448:	2320      	movs	r3, #32
 800944a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800944e:	e281      	b.n	8009954 <UART_SetConfig+0x7dc>
 8009450:	2340      	movs	r3, #64	; 0x40
 8009452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009456:	e27d      	b.n	8009954 <UART_SetConfig+0x7dc>
 8009458:	2380      	movs	r3, #128	; 0x80
 800945a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800945e:	bf00      	nop
 8009460:	e278      	b.n	8009954 <UART_SetConfig+0x7dc>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a1c      	ldr	r2, [pc, #112]	; (80094d8 <UART_SetConfig+0x360>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d144      	bne.n	80094f6 <UART_SetConfig+0x37e>
 800946c:	4b16      	ldr	r3, [pc, #88]	; (80094c8 <UART_SetConfig+0x350>)
 800946e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009470:	f003 0307 	and.w	r3, r3, #7
 8009474:	2b05      	cmp	r3, #5
 8009476:	d839      	bhi.n	80094ec <UART_SetConfig+0x374>
 8009478:	a201      	add	r2, pc, #4	; (adr r2, 8009480 <UART_SetConfig+0x308>)
 800947a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800947e:	bf00      	nop
 8009480:	08009499 	.word	0x08009499
 8009484:	080094a1 	.word	0x080094a1
 8009488:	080094a9 	.word	0x080094a9
 800948c:	080094b1 	.word	0x080094b1
 8009490:	080094dd 	.word	0x080094dd
 8009494:	080094e5 	.word	0x080094e5
 8009498:	2300      	movs	r3, #0
 800949a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800949e:	e259      	b.n	8009954 <UART_SetConfig+0x7dc>
 80094a0:	2304      	movs	r3, #4
 80094a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094a6:	e255      	b.n	8009954 <UART_SetConfig+0x7dc>
 80094a8:	2308      	movs	r3, #8
 80094aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094ae:	e251      	b.n	8009954 <UART_SetConfig+0x7dc>
 80094b0:	2310      	movs	r3, #16
 80094b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094b6:	e24d      	b.n	8009954 <UART_SetConfig+0x7dc>
 80094b8:	cfff69f3 	.word	0xcfff69f3
 80094bc:	58000c00 	.word	0x58000c00
 80094c0:	11fff4ff 	.word	0x11fff4ff
 80094c4:	40011000 	.word	0x40011000
 80094c8:	58024400 	.word	0x58024400
 80094cc:	40004400 	.word	0x40004400
 80094d0:	40004800 	.word	0x40004800
 80094d4:	40004c00 	.word	0x40004c00
 80094d8:	40005000 	.word	0x40005000
 80094dc:	2320      	movs	r3, #32
 80094de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094e2:	e237      	b.n	8009954 <UART_SetConfig+0x7dc>
 80094e4:	2340      	movs	r3, #64	; 0x40
 80094e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094ea:	e233      	b.n	8009954 <UART_SetConfig+0x7dc>
 80094ec:	2380      	movs	r3, #128	; 0x80
 80094ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094f2:	bf00      	nop
 80094f4:	e22e      	b.n	8009954 <UART_SetConfig+0x7dc>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4ab5      	ldr	r2, [pc, #724]	; (80097d0 <UART_SetConfig+0x658>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d178      	bne.n	80095f2 <UART_SetConfig+0x47a>
 8009500:	4bb4      	ldr	r3, [pc, #720]	; (80097d4 <UART_SetConfig+0x65c>)
 8009502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009504:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009508:	2b28      	cmp	r3, #40	; 0x28
 800950a:	d86d      	bhi.n	80095e8 <UART_SetConfig+0x470>
 800950c:	a201      	add	r2, pc, #4	; (adr r2, 8009514 <UART_SetConfig+0x39c>)
 800950e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009512:	bf00      	nop
 8009514:	080095b9 	.word	0x080095b9
 8009518:	080095e9 	.word	0x080095e9
 800951c:	080095e9 	.word	0x080095e9
 8009520:	080095e9 	.word	0x080095e9
 8009524:	080095e9 	.word	0x080095e9
 8009528:	080095e9 	.word	0x080095e9
 800952c:	080095e9 	.word	0x080095e9
 8009530:	080095e9 	.word	0x080095e9
 8009534:	080095c1 	.word	0x080095c1
 8009538:	080095e9 	.word	0x080095e9
 800953c:	080095e9 	.word	0x080095e9
 8009540:	080095e9 	.word	0x080095e9
 8009544:	080095e9 	.word	0x080095e9
 8009548:	080095e9 	.word	0x080095e9
 800954c:	080095e9 	.word	0x080095e9
 8009550:	080095e9 	.word	0x080095e9
 8009554:	080095c9 	.word	0x080095c9
 8009558:	080095e9 	.word	0x080095e9
 800955c:	080095e9 	.word	0x080095e9
 8009560:	080095e9 	.word	0x080095e9
 8009564:	080095e9 	.word	0x080095e9
 8009568:	080095e9 	.word	0x080095e9
 800956c:	080095e9 	.word	0x080095e9
 8009570:	080095e9 	.word	0x080095e9
 8009574:	080095d1 	.word	0x080095d1
 8009578:	080095e9 	.word	0x080095e9
 800957c:	080095e9 	.word	0x080095e9
 8009580:	080095e9 	.word	0x080095e9
 8009584:	080095e9 	.word	0x080095e9
 8009588:	080095e9 	.word	0x080095e9
 800958c:	080095e9 	.word	0x080095e9
 8009590:	080095e9 	.word	0x080095e9
 8009594:	080095d9 	.word	0x080095d9
 8009598:	080095e9 	.word	0x080095e9
 800959c:	080095e9 	.word	0x080095e9
 80095a0:	080095e9 	.word	0x080095e9
 80095a4:	080095e9 	.word	0x080095e9
 80095a8:	080095e9 	.word	0x080095e9
 80095ac:	080095e9 	.word	0x080095e9
 80095b0:	080095e9 	.word	0x080095e9
 80095b4:	080095e1 	.word	0x080095e1
 80095b8:	2301      	movs	r3, #1
 80095ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095be:	e1c9      	b.n	8009954 <UART_SetConfig+0x7dc>
 80095c0:	2304      	movs	r3, #4
 80095c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095c6:	e1c5      	b.n	8009954 <UART_SetConfig+0x7dc>
 80095c8:	2308      	movs	r3, #8
 80095ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095ce:	e1c1      	b.n	8009954 <UART_SetConfig+0x7dc>
 80095d0:	2310      	movs	r3, #16
 80095d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095d6:	e1bd      	b.n	8009954 <UART_SetConfig+0x7dc>
 80095d8:	2320      	movs	r3, #32
 80095da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095de:	e1b9      	b.n	8009954 <UART_SetConfig+0x7dc>
 80095e0:	2340      	movs	r3, #64	; 0x40
 80095e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095e6:	e1b5      	b.n	8009954 <UART_SetConfig+0x7dc>
 80095e8:	2380      	movs	r3, #128	; 0x80
 80095ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095ee:	bf00      	nop
 80095f0:	e1b0      	b.n	8009954 <UART_SetConfig+0x7dc>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a78      	ldr	r2, [pc, #480]	; (80097d8 <UART_SetConfig+0x660>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d132      	bne.n	8009662 <UART_SetConfig+0x4ea>
 80095fc:	4b75      	ldr	r3, [pc, #468]	; (80097d4 <UART_SetConfig+0x65c>)
 80095fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009600:	f003 0307 	and.w	r3, r3, #7
 8009604:	2b05      	cmp	r3, #5
 8009606:	d827      	bhi.n	8009658 <UART_SetConfig+0x4e0>
 8009608:	a201      	add	r2, pc, #4	; (adr r2, 8009610 <UART_SetConfig+0x498>)
 800960a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800960e:	bf00      	nop
 8009610:	08009629 	.word	0x08009629
 8009614:	08009631 	.word	0x08009631
 8009618:	08009639 	.word	0x08009639
 800961c:	08009641 	.word	0x08009641
 8009620:	08009649 	.word	0x08009649
 8009624:	08009651 	.word	0x08009651
 8009628:	2300      	movs	r3, #0
 800962a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800962e:	e191      	b.n	8009954 <UART_SetConfig+0x7dc>
 8009630:	2304      	movs	r3, #4
 8009632:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009636:	e18d      	b.n	8009954 <UART_SetConfig+0x7dc>
 8009638:	2308      	movs	r3, #8
 800963a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800963e:	e189      	b.n	8009954 <UART_SetConfig+0x7dc>
 8009640:	2310      	movs	r3, #16
 8009642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009646:	e185      	b.n	8009954 <UART_SetConfig+0x7dc>
 8009648:	2320      	movs	r3, #32
 800964a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800964e:	e181      	b.n	8009954 <UART_SetConfig+0x7dc>
 8009650:	2340      	movs	r3, #64	; 0x40
 8009652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009656:	e17d      	b.n	8009954 <UART_SetConfig+0x7dc>
 8009658:	2380      	movs	r3, #128	; 0x80
 800965a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800965e:	bf00      	nop
 8009660:	e178      	b.n	8009954 <UART_SetConfig+0x7dc>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a5d      	ldr	r2, [pc, #372]	; (80097dc <UART_SetConfig+0x664>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d132      	bne.n	80096d2 <UART_SetConfig+0x55a>
 800966c:	4b59      	ldr	r3, [pc, #356]	; (80097d4 <UART_SetConfig+0x65c>)
 800966e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009670:	f003 0307 	and.w	r3, r3, #7
 8009674:	2b05      	cmp	r3, #5
 8009676:	d827      	bhi.n	80096c8 <UART_SetConfig+0x550>
 8009678:	a201      	add	r2, pc, #4	; (adr r2, 8009680 <UART_SetConfig+0x508>)
 800967a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800967e:	bf00      	nop
 8009680:	08009699 	.word	0x08009699
 8009684:	080096a1 	.word	0x080096a1
 8009688:	080096a9 	.word	0x080096a9
 800968c:	080096b1 	.word	0x080096b1
 8009690:	080096b9 	.word	0x080096b9
 8009694:	080096c1 	.word	0x080096c1
 8009698:	2300      	movs	r3, #0
 800969a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800969e:	e159      	b.n	8009954 <UART_SetConfig+0x7dc>
 80096a0:	2304      	movs	r3, #4
 80096a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096a6:	e155      	b.n	8009954 <UART_SetConfig+0x7dc>
 80096a8:	2308      	movs	r3, #8
 80096aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ae:	e151      	b.n	8009954 <UART_SetConfig+0x7dc>
 80096b0:	2310      	movs	r3, #16
 80096b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096b6:	e14d      	b.n	8009954 <UART_SetConfig+0x7dc>
 80096b8:	2320      	movs	r3, #32
 80096ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096be:	e149      	b.n	8009954 <UART_SetConfig+0x7dc>
 80096c0:	2340      	movs	r3, #64	; 0x40
 80096c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096c6:	e145      	b.n	8009954 <UART_SetConfig+0x7dc>
 80096c8:	2380      	movs	r3, #128	; 0x80
 80096ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ce:	bf00      	nop
 80096d0:	e140      	b.n	8009954 <UART_SetConfig+0x7dc>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4a42      	ldr	r2, [pc, #264]	; (80097e0 <UART_SetConfig+0x668>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	f040 8083 	bne.w	80097e4 <UART_SetConfig+0x66c>
 80096de:	4b3d      	ldr	r3, [pc, #244]	; (80097d4 <UART_SetConfig+0x65c>)
 80096e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80096e6:	2b28      	cmp	r3, #40	; 0x28
 80096e8:	d86c      	bhi.n	80097c4 <UART_SetConfig+0x64c>
 80096ea:	a201      	add	r2, pc, #4	; (adr r2, 80096f0 <UART_SetConfig+0x578>)
 80096ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f0:	08009795 	.word	0x08009795
 80096f4:	080097c5 	.word	0x080097c5
 80096f8:	080097c5 	.word	0x080097c5
 80096fc:	080097c5 	.word	0x080097c5
 8009700:	080097c5 	.word	0x080097c5
 8009704:	080097c5 	.word	0x080097c5
 8009708:	080097c5 	.word	0x080097c5
 800970c:	080097c5 	.word	0x080097c5
 8009710:	0800979d 	.word	0x0800979d
 8009714:	080097c5 	.word	0x080097c5
 8009718:	080097c5 	.word	0x080097c5
 800971c:	080097c5 	.word	0x080097c5
 8009720:	080097c5 	.word	0x080097c5
 8009724:	080097c5 	.word	0x080097c5
 8009728:	080097c5 	.word	0x080097c5
 800972c:	080097c5 	.word	0x080097c5
 8009730:	080097a5 	.word	0x080097a5
 8009734:	080097c5 	.word	0x080097c5
 8009738:	080097c5 	.word	0x080097c5
 800973c:	080097c5 	.word	0x080097c5
 8009740:	080097c5 	.word	0x080097c5
 8009744:	080097c5 	.word	0x080097c5
 8009748:	080097c5 	.word	0x080097c5
 800974c:	080097c5 	.word	0x080097c5
 8009750:	080097ad 	.word	0x080097ad
 8009754:	080097c5 	.word	0x080097c5
 8009758:	080097c5 	.word	0x080097c5
 800975c:	080097c5 	.word	0x080097c5
 8009760:	080097c5 	.word	0x080097c5
 8009764:	080097c5 	.word	0x080097c5
 8009768:	080097c5 	.word	0x080097c5
 800976c:	080097c5 	.word	0x080097c5
 8009770:	080097b5 	.word	0x080097b5
 8009774:	080097c5 	.word	0x080097c5
 8009778:	080097c5 	.word	0x080097c5
 800977c:	080097c5 	.word	0x080097c5
 8009780:	080097c5 	.word	0x080097c5
 8009784:	080097c5 	.word	0x080097c5
 8009788:	080097c5 	.word	0x080097c5
 800978c:	080097c5 	.word	0x080097c5
 8009790:	080097bd 	.word	0x080097bd
 8009794:	2301      	movs	r3, #1
 8009796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800979a:	e0db      	b.n	8009954 <UART_SetConfig+0x7dc>
 800979c:	2304      	movs	r3, #4
 800979e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097a2:	e0d7      	b.n	8009954 <UART_SetConfig+0x7dc>
 80097a4:	2308      	movs	r3, #8
 80097a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097aa:	e0d3      	b.n	8009954 <UART_SetConfig+0x7dc>
 80097ac:	2310      	movs	r3, #16
 80097ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097b2:	e0cf      	b.n	8009954 <UART_SetConfig+0x7dc>
 80097b4:	2320      	movs	r3, #32
 80097b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097ba:	e0cb      	b.n	8009954 <UART_SetConfig+0x7dc>
 80097bc:	2340      	movs	r3, #64	; 0x40
 80097be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097c2:	e0c7      	b.n	8009954 <UART_SetConfig+0x7dc>
 80097c4:	2380      	movs	r3, #128	; 0x80
 80097c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097ca:	bf00      	nop
 80097cc:	e0c2      	b.n	8009954 <UART_SetConfig+0x7dc>
 80097ce:	bf00      	nop
 80097d0:	40011400 	.word	0x40011400
 80097d4:	58024400 	.word	0x58024400
 80097d8:	40007800 	.word	0x40007800
 80097dc:	40007c00 	.word	0x40007c00
 80097e0:	40011800 	.word	0x40011800
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4ab2      	ldr	r2, [pc, #712]	; (8009ab4 <UART_SetConfig+0x93c>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d177      	bne.n	80098de <UART_SetConfig+0x766>
 80097ee:	4bb2      	ldr	r3, [pc, #712]	; (8009ab8 <UART_SetConfig+0x940>)
 80097f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80097f6:	2b28      	cmp	r3, #40	; 0x28
 80097f8:	d86c      	bhi.n	80098d4 <UART_SetConfig+0x75c>
 80097fa:	a201      	add	r2, pc, #4	; (adr r2, 8009800 <UART_SetConfig+0x688>)
 80097fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009800:	080098a5 	.word	0x080098a5
 8009804:	080098d5 	.word	0x080098d5
 8009808:	080098d5 	.word	0x080098d5
 800980c:	080098d5 	.word	0x080098d5
 8009810:	080098d5 	.word	0x080098d5
 8009814:	080098d5 	.word	0x080098d5
 8009818:	080098d5 	.word	0x080098d5
 800981c:	080098d5 	.word	0x080098d5
 8009820:	080098ad 	.word	0x080098ad
 8009824:	080098d5 	.word	0x080098d5
 8009828:	080098d5 	.word	0x080098d5
 800982c:	080098d5 	.word	0x080098d5
 8009830:	080098d5 	.word	0x080098d5
 8009834:	080098d5 	.word	0x080098d5
 8009838:	080098d5 	.word	0x080098d5
 800983c:	080098d5 	.word	0x080098d5
 8009840:	080098b5 	.word	0x080098b5
 8009844:	080098d5 	.word	0x080098d5
 8009848:	080098d5 	.word	0x080098d5
 800984c:	080098d5 	.word	0x080098d5
 8009850:	080098d5 	.word	0x080098d5
 8009854:	080098d5 	.word	0x080098d5
 8009858:	080098d5 	.word	0x080098d5
 800985c:	080098d5 	.word	0x080098d5
 8009860:	080098bd 	.word	0x080098bd
 8009864:	080098d5 	.word	0x080098d5
 8009868:	080098d5 	.word	0x080098d5
 800986c:	080098d5 	.word	0x080098d5
 8009870:	080098d5 	.word	0x080098d5
 8009874:	080098d5 	.word	0x080098d5
 8009878:	080098d5 	.word	0x080098d5
 800987c:	080098d5 	.word	0x080098d5
 8009880:	080098c5 	.word	0x080098c5
 8009884:	080098d5 	.word	0x080098d5
 8009888:	080098d5 	.word	0x080098d5
 800988c:	080098d5 	.word	0x080098d5
 8009890:	080098d5 	.word	0x080098d5
 8009894:	080098d5 	.word	0x080098d5
 8009898:	080098d5 	.word	0x080098d5
 800989c:	080098d5 	.word	0x080098d5
 80098a0:	080098cd 	.word	0x080098cd
 80098a4:	2301      	movs	r3, #1
 80098a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098aa:	e053      	b.n	8009954 <UART_SetConfig+0x7dc>
 80098ac:	2304      	movs	r3, #4
 80098ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098b2:	e04f      	b.n	8009954 <UART_SetConfig+0x7dc>
 80098b4:	2308      	movs	r3, #8
 80098b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098ba:	e04b      	b.n	8009954 <UART_SetConfig+0x7dc>
 80098bc:	2310      	movs	r3, #16
 80098be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098c2:	e047      	b.n	8009954 <UART_SetConfig+0x7dc>
 80098c4:	2320      	movs	r3, #32
 80098c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098ca:	e043      	b.n	8009954 <UART_SetConfig+0x7dc>
 80098cc:	2340      	movs	r3, #64	; 0x40
 80098ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098d2:	e03f      	b.n	8009954 <UART_SetConfig+0x7dc>
 80098d4:	2380      	movs	r3, #128	; 0x80
 80098d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098da:	bf00      	nop
 80098dc:	e03a      	b.n	8009954 <UART_SetConfig+0x7dc>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a76      	ldr	r2, [pc, #472]	; (8009abc <UART_SetConfig+0x944>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d132      	bne.n	800994e <UART_SetConfig+0x7d6>
 80098e8:	4b73      	ldr	r3, [pc, #460]	; (8009ab8 <UART_SetConfig+0x940>)
 80098ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098ec:	f003 0307 	and.w	r3, r3, #7
 80098f0:	2b05      	cmp	r3, #5
 80098f2:	d827      	bhi.n	8009944 <UART_SetConfig+0x7cc>
 80098f4:	a201      	add	r2, pc, #4	; (adr r2, 80098fc <UART_SetConfig+0x784>)
 80098f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098fa:	bf00      	nop
 80098fc:	08009915 	.word	0x08009915
 8009900:	0800991d 	.word	0x0800991d
 8009904:	08009925 	.word	0x08009925
 8009908:	0800992d 	.word	0x0800992d
 800990c:	08009935 	.word	0x08009935
 8009910:	0800993d 	.word	0x0800993d
 8009914:	2302      	movs	r3, #2
 8009916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800991a:	e01b      	b.n	8009954 <UART_SetConfig+0x7dc>
 800991c:	2304      	movs	r3, #4
 800991e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009922:	e017      	b.n	8009954 <UART_SetConfig+0x7dc>
 8009924:	2308      	movs	r3, #8
 8009926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800992a:	e013      	b.n	8009954 <UART_SetConfig+0x7dc>
 800992c:	2310      	movs	r3, #16
 800992e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009932:	e00f      	b.n	8009954 <UART_SetConfig+0x7dc>
 8009934:	2320      	movs	r3, #32
 8009936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800993a:	e00b      	b.n	8009954 <UART_SetConfig+0x7dc>
 800993c:	2340      	movs	r3, #64	; 0x40
 800993e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009942:	e007      	b.n	8009954 <UART_SetConfig+0x7dc>
 8009944:	2380      	movs	r3, #128	; 0x80
 8009946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800994a:	bf00      	nop
 800994c:	e002      	b.n	8009954 <UART_SetConfig+0x7dc>
 800994e:	2380      	movs	r3, #128	; 0x80
 8009950:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a58      	ldr	r2, [pc, #352]	; (8009abc <UART_SetConfig+0x944>)
 800995a:	4293      	cmp	r3, r2
 800995c:	f040 80b6 	bne.w	8009acc <UART_SetConfig+0x954>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009960:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009964:	2b08      	cmp	r3, #8
 8009966:	d019      	beq.n	800999c <UART_SetConfig+0x824>
 8009968:	2b08      	cmp	r3, #8
 800996a:	dc04      	bgt.n	8009976 <UART_SetConfig+0x7fe>
 800996c:	2b02      	cmp	r3, #2
 800996e:	d009      	beq.n	8009984 <UART_SetConfig+0x80c>
 8009970:	2b04      	cmp	r3, #4
 8009972:	d00b      	beq.n	800998c <UART_SetConfig+0x814>
 8009974:	e034      	b.n	80099e0 <UART_SetConfig+0x868>
 8009976:	2b20      	cmp	r3, #32
 8009978:	d02b      	beq.n	80099d2 <UART_SetConfig+0x85a>
 800997a:	2b40      	cmp	r3, #64	; 0x40
 800997c:	d02c      	beq.n	80099d8 <UART_SetConfig+0x860>
 800997e:	2b10      	cmp	r3, #16
 8009980:	d014      	beq.n	80099ac <UART_SetConfig+0x834>
 8009982:	e02d      	b.n	80099e0 <UART_SetConfig+0x868>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009984:	f7fe f8e4 	bl	8007b50 <HAL_RCCEx_GetD3PCLK1Freq>
 8009988:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800998a:	e02f      	b.n	80099ec <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800998c:	f107 0314 	add.w	r3, r7, #20
 8009990:	4618      	mov	r0, r3
 8009992:	f7fe f8f3 	bl	8007b7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009996:	69bb      	ldr	r3, [r7, #24]
 8009998:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800999a:	e027      	b.n	80099ec <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800999c:	f107 0308 	add.w	r3, r7, #8
 80099a0:	4618      	mov	r0, r3
 80099a2:	f7fe fa37 	bl	8007e14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80099aa:	e01f      	b.n	80099ec <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099ac:	4b42      	ldr	r3, [pc, #264]	; (8009ab8 <UART_SetConfig+0x940>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f003 0320 	and.w	r3, r3, #32
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d009      	beq.n	80099cc <UART_SetConfig+0x854>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80099b8:	4b3f      	ldr	r3, [pc, #252]	; (8009ab8 <UART_SetConfig+0x940>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	08db      	lsrs	r3, r3, #3
 80099be:	f003 0303 	and.w	r3, r3, #3
 80099c2:	4a3f      	ldr	r2, [pc, #252]	; (8009ac0 <UART_SetConfig+0x948>)
 80099c4:	fa22 f303 	lsr.w	r3, r2, r3
 80099c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80099ca:	e00f      	b.n	80099ec <UART_SetConfig+0x874>
          pclk = (uint32_t) HSI_VALUE;
 80099cc:	4b3c      	ldr	r3, [pc, #240]	; (8009ac0 <UART_SetConfig+0x948>)
 80099ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80099d0:	e00c      	b.n	80099ec <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80099d2:	4b3c      	ldr	r3, [pc, #240]	; (8009ac4 <UART_SetConfig+0x94c>)
 80099d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80099d6:	e009      	b.n	80099ec <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80099de:	e005      	b.n	80099ec <UART_SetConfig+0x874>
      default:
        pclk = 0U;
 80099e0:	2300      	movs	r3, #0
 80099e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80099ea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80099ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	f000 8251 	beq.w	8009e96 <UART_SetConfig+0xd1e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f8:	4a33      	ldr	r2, [pc, #204]	; (8009ac8 <UART_SetConfig+0x950>)
 80099fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099fe:	461a      	mov	r2, r3
 8009a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a02:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a06:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	685a      	ldr	r2, [r3, #4]
 8009a0c:	4613      	mov	r3, r2
 8009a0e:	005b      	lsls	r3, r3, #1
 8009a10:	4413      	add	r3, r2
 8009a12:	6a3a      	ldr	r2, [r7, #32]
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d305      	bcc.n	8009a24 <UART_SetConfig+0x8ac>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a1e:	6a3a      	ldr	r2, [r7, #32]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d903      	bls.n	8009a2c <UART_SetConfig+0x8b4>
      {
        ret = HAL_ERROR;
 8009a24:	2301      	movs	r3, #1
 8009a26:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009a2a:	e234      	b.n	8009e96 <UART_SetConfig+0xd1e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f04f 0100 	mov.w	r1, #0
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a38:	4a23      	ldr	r2, [pc, #140]	; (8009ac8 <UART_SetConfig+0x950>)
 8009a3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a3e:	b29b      	uxth	r3, r3
 8009a40:	f04f 0400 	mov.w	r4, #0
 8009a44:	461a      	mov	r2, r3
 8009a46:	4623      	mov	r3, r4
 8009a48:	f7f6 fca2 	bl	8000390 <__aeabi_uldivmod>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	460c      	mov	r4, r1
 8009a50:	4619      	mov	r1, r3
 8009a52:	4622      	mov	r2, r4
 8009a54:	f04f 0300 	mov.w	r3, #0
 8009a58:	f04f 0400 	mov.w	r4, #0
 8009a5c:	0214      	lsls	r4, r2, #8
 8009a5e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009a62:	020b      	lsls	r3, r1, #8
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	6852      	ldr	r2, [r2, #4]
 8009a68:	0852      	lsrs	r2, r2, #1
 8009a6a:	4611      	mov	r1, r2
 8009a6c:	f04f 0200 	mov.w	r2, #0
 8009a70:	eb13 0b01 	adds.w	fp, r3, r1
 8009a74:	eb44 0c02 	adc.w	ip, r4, r2
 8009a78:	4658      	mov	r0, fp
 8009a7a:	4661      	mov	r1, ip
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	f04f 0400 	mov.w	r4, #0
 8009a84:	461a      	mov	r2, r3
 8009a86:	4623      	mov	r3, r4
 8009a88:	f7f6 fc82 	bl	8000390 <__aeabi_uldivmod>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	460c      	mov	r4, r1
 8009a90:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a98:	d308      	bcc.n	8009aac <UART_SetConfig+0x934>
 8009a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009aa0:	d204      	bcs.n	8009aac <UART_SetConfig+0x934>
        {
          huart->Instance->BRR = usartdiv;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009aa8:	60da      	str	r2, [r3, #12]
 8009aaa:	e1f4      	b.n	8009e96 <UART_SetConfig+0xd1e>
        }
        else
        {
          ret = HAL_ERROR;
 8009aac:	2301      	movs	r3, #1
 8009aae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009ab2:	e1f0      	b.n	8009e96 <UART_SetConfig+0xd1e>
 8009ab4:	40011c00 	.word	0x40011c00
 8009ab8:	58024400 	.word	0x58024400
 8009abc:	58000c00 	.word	0x58000c00
 8009ac0:	03d09000 	.word	0x03d09000
 8009ac4:	003d0900 	.word	0x003d0900
 8009ac8:	0800bca8 	.word	0x0800bca8
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	69db      	ldr	r3, [r3, #28]
 8009ad0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ad4:	f040 80f8 	bne.w	8009cc8 <UART_SetConfig+0xb50>
  {
    switch (clocksource)
 8009ad8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009adc:	2b40      	cmp	r3, #64	; 0x40
 8009ade:	f200 80b7 	bhi.w	8009c50 <UART_SetConfig+0xad8>
 8009ae2:	a201      	add	r2, pc, #4	; (adr r2, 8009ae8 <UART_SetConfig+0x970>)
 8009ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae8:	08009bed 	.word	0x08009bed
 8009aec:	08009bf5 	.word	0x08009bf5
 8009af0:	08009c51 	.word	0x08009c51
 8009af4:	08009c51 	.word	0x08009c51
 8009af8:	08009bfd 	.word	0x08009bfd
 8009afc:	08009c51 	.word	0x08009c51
 8009b00:	08009c51 	.word	0x08009c51
 8009b04:	08009c51 	.word	0x08009c51
 8009b08:	08009c0d 	.word	0x08009c0d
 8009b0c:	08009c51 	.word	0x08009c51
 8009b10:	08009c51 	.word	0x08009c51
 8009b14:	08009c51 	.word	0x08009c51
 8009b18:	08009c51 	.word	0x08009c51
 8009b1c:	08009c51 	.word	0x08009c51
 8009b20:	08009c51 	.word	0x08009c51
 8009b24:	08009c51 	.word	0x08009c51
 8009b28:	08009c1d 	.word	0x08009c1d
 8009b2c:	08009c51 	.word	0x08009c51
 8009b30:	08009c51 	.word	0x08009c51
 8009b34:	08009c51 	.word	0x08009c51
 8009b38:	08009c51 	.word	0x08009c51
 8009b3c:	08009c51 	.word	0x08009c51
 8009b40:	08009c51 	.word	0x08009c51
 8009b44:	08009c51 	.word	0x08009c51
 8009b48:	08009c51 	.word	0x08009c51
 8009b4c:	08009c51 	.word	0x08009c51
 8009b50:	08009c51 	.word	0x08009c51
 8009b54:	08009c51 	.word	0x08009c51
 8009b58:	08009c51 	.word	0x08009c51
 8009b5c:	08009c51 	.word	0x08009c51
 8009b60:	08009c51 	.word	0x08009c51
 8009b64:	08009c51 	.word	0x08009c51
 8009b68:	08009c43 	.word	0x08009c43
 8009b6c:	08009c51 	.word	0x08009c51
 8009b70:	08009c51 	.word	0x08009c51
 8009b74:	08009c51 	.word	0x08009c51
 8009b78:	08009c51 	.word	0x08009c51
 8009b7c:	08009c51 	.word	0x08009c51
 8009b80:	08009c51 	.word	0x08009c51
 8009b84:	08009c51 	.word	0x08009c51
 8009b88:	08009c51 	.word	0x08009c51
 8009b8c:	08009c51 	.word	0x08009c51
 8009b90:	08009c51 	.word	0x08009c51
 8009b94:	08009c51 	.word	0x08009c51
 8009b98:	08009c51 	.word	0x08009c51
 8009b9c:	08009c51 	.word	0x08009c51
 8009ba0:	08009c51 	.word	0x08009c51
 8009ba4:	08009c51 	.word	0x08009c51
 8009ba8:	08009c51 	.word	0x08009c51
 8009bac:	08009c51 	.word	0x08009c51
 8009bb0:	08009c51 	.word	0x08009c51
 8009bb4:	08009c51 	.word	0x08009c51
 8009bb8:	08009c51 	.word	0x08009c51
 8009bbc:	08009c51 	.word	0x08009c51
 8009bc0:	08009c51 	.word	0x08009c51
 8009bc4:	08009c51 	.word	0x08009c51
 8009bc8:	08009c51 	.word	0x08009c51
 8009bcc:	08009c51 	.word	0x08009c51
 8009bd0:	08009c51 	.word	0x08009c51
 8009bd4:	08009c51 	.word	0x08009c51
 8009bd8:	08009c51 	.word	0x08009c51
 8009bdc:	08009c51 	.word	0x08009c51
 8009be0:	08009c51 	.word	0x08009c51
 8009be4:	08009c51 	.word	0x08009c51
 8009be8:	08009c49 	.word	0x08009c49
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bec:	f7fc feaa 	bl	8006944 <HAL_RCC_GetPCLK1Freq>
 8009bf0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009bf2:	e033      	b.n	8009c5c <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009bf4:	f7fc febc 	bl	8006970 <HAL_RCC_GetPCLK2Freq>
 8009bf8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009bfa:	e02f      	b.n	8009c5c <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bfc:	f107 0314 	add.w	r3, r7, #20
 8009c00:	4618      	mov	r0, r3
 8009c02:	f7fd ffbb 	bl	8007b7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c06:	69bb      	ldr	r3, [r7, #24]
 8009c08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c0a:	e027      	b.n	8009c5c <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c0c:	f107 0308 	add.w	r3, r7, #8
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7fe f8ff 	bl	8007e14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c1a:	e01f      	b.n	8009c5c <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c1c:	4ba8      	ldr	r3, [pc, #672]	; (8009ec0 <UART_SetConfig+0xd48>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f003 0320 	and.w	r3, r3, #32
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d009      	beq.n	8009c3c <UART_SetConfig+0xac4>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c28:	4ba5      	ldr	r3, [pc, #660]	; (8009ec0 <UART_SetConfig+0xd48>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	08db      	lsrs	r3, r3, #3
 8009c2e:	f003 0303 	and.w	r3, r3, #3
 8009c32:	4aa4      	ldr	r2, [pc, #656]	; (8009ec4 <UART_SetConfig+0xd4c>)
 8009c34:	fa22 f303 	lsr.w	r3, r2, r3
 8009c38:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c3a:	e00f      	b.n	8009c5c <UART_SetConfig+0xae4>
          pclk = (uint32_t) HSI_VALUE;
 8009c3c:	4ba1      	ldr	r3, [pc, #644]	; (8009ec4 <UART_SetConfig+0xd4c>)
 8009c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c40:	e00c      	b.n	8009c5c <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c42:	4ba1      	ldr	r3, [pc, #644]	; (8009ec8 <UART_SetConfig+0xd50>)
 8009c44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c46:	e009      	b.n	8009c5c <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c4e:	e005      	b.n	8009c5c <UART_SetConfig+0xae4>
      default:
        pclk = 0U;
 8009c50:	2300      	movs	r3, #0
 8009c52:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009c54:	2301      	movs	r3, #1
 8009c56:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009c5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	f000 8119 	beq.w	8009e96 <UART_SetConfig+0xd1e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c68:	4a98      	ldr	r2, [pc, #608]	; (8009ecc <UART_SetConfig+0xd54>)
 8009c6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c6e:	461a      	mov	r2, r3
 8009c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c72:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c76:	005a      	lsls	r2, r3, #1
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	085b      	lsrs	r3, r3, #1
 8009c7e:	441a      	add	r2, r3
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c8e:	2b0f      	cmp	r3, #15
 8009c90:	d916      	bls.n	8009cc0 <UART_SetConfig+0xb48>
 8009c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c98:	d212      	bcs.n	8009cc0 <UART_SetConfig+0xb48>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	f023 030f 	bic.w	r3, r3, #15
 8009ca2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca6:	085b      	lsrs	r3, r3, #1
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	f003 0307 	and.w	r3, r3, #7
 8009cae:	b29a      	uxth	r2, r3
 8009cb0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009cbc:	60da      	str	r2, [r3, #12]
 8009cbe:	e0ea      	b.n	8009e96 <UART_SetConfig+0xd1e>
      }
      else
      {
        ret = HAL_ERROR;
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009cc6:	e0e6      	b.n	8009e96 <UART_SetConfig+0xd1e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009cc8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009ccc:	2b40      	cmp	r3, #64	; 0x40
 8009cce:	f200 80b7 	bhi.w	8009e40 <UART_SetConfig+0xcc8>
 8009cd2:	a201      	add	r2, pc, #4	; (adr r2, 8009cd8 <UART_SetConfig+0xb60>)
 8009cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cd8:	08009ddd 	.word	0x08009ddd
 8009cdc:	08009de5 	.word	0x08009de5
 8009ce0:	08009e41 	.word	0x08009e41
 8009ce4:	08009e41 	.word	0x08009e41
 8009ce8:	08009ded 	.word	0x08009ded
 8009cec:	08009e41 	.word	0x08009e41
 8009cf0:	08009e41 	.word	0x08009e41
 8009cf4:	08009e41 	.word	0x08009e41
 8009cf8:	08009dfd 	.word	0x08009dfd
 8009cfc:	08009e41 	.word	0x08009e41
 8009d00:	08009e41 	.word	0x08009e41
 8009d04:	08009e41 	.word	0x08009e41
 8009d08:	08009e41 	.word	0x08009e41
 8009d0c:	08009e41 	.word	0x08009e41
 8009d10:	08009e41 	.word	0x08009e41
 8009d14:	08009e41 	.word	0x08009e41
 8009d18:	08009e0d 	.word	0x08009e0d
 8009d1c:	08009e41 	.word	0x08009e41
 8009d20:	08009e41 	.word	0x08009e41
 8009d24:	08009e41 	.word	0x08009e41
 8009d28:	08009e41 	.word	0x08009e41
 8009d2c:	08009e41 	.word	0x08009e41
 8009d30:	08009e41 	.word	0x08009e41
 8009d34:	08009e41 	.word	0x08009e41
 8009d38:	08009e41 	.word	0x08009e41
 8009d3c:	08009e41 	.word	0x08009e41
 8009d40:	08009e41 	.word	0x08009e41
 8009d44:	08009e41 	.word	0x08009e41
 8009d48:	08009e41 	.word	0x08009e41
 8009d4c:	08009e41 	.word	0x08009e41
 8009d50:	08009e41 	.word	0x08009e41
 8009d54:	08009e41 	.word	0x08009e41
 8009d58:	08009e33 	.word	0x08009e33
 8009d5c:	08009e41 	.word	0x08009e41
 8009d60:	08009e41 	.word	0x08009e41
 8009d64:	08009e41 	.word	0x08009e41
 8009d68:	08009e41 	.word	0x08009e41
 8009d6c:	08009e41 	.word	0x08009e41
 8009d70:	08009e41 	.word	0x08009e41
 8009d74:	08009e41 	.word	0x08009e41
 8009d78:	08009e41 	.word	0x08009e41
 8009d7c:	08009e41 	.word	0x08009e41
 8009d80:	08009e41 	.word	0x08009e41
 8009d84:	08009e41 	.word	0x08009e41
 8009d88:	08009e41 	.word	0x08009e41
 8009d8c:	08009e41 	.word	0x08009e41
 8009d90:	08009e41 	.word	0x08009e41
 8009d94:	08009e41 	.word	0x08009e41
 8009d98:	08009e41 	.word	0x08009e41
 8009d9c:	08009e41 	.word	0x08009e41
 8009da0:	08009e41 	.word	0x08009e41
 8009da4:	08009e41 	.word	0x08009e41
 8009da8:	08009e41 	.word	0x08009e41
 8009dac:	08009e41 	.word	0x08009e41
 8009db0:	08009e41 	.word	0x08009e41
 8009db4:	08009e41 	.word	0x08009e41
 8009db8:	08009e41 	.word	0x08009e41
 8009dbc:	08009e41 	.word	0x08009e41
 8009dc0:	08009e41 	.word	0x08009e41
 8009dc4:	08009e41 	.word	0x08009e41
 8009dc8:	08009e41 	.word	0x08009e41
 8009dcc:	08009e41 	.word	0x08009e41
 8009dd0:	08009e41 	.word	0x08009e41
 8009dd4:	08009e41 	.word	0x08009e41
 8009dd8:	08009e39 	.word	0x08009e39
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ddc:	f7fc fdb2 	bl	8006944 <HAL_RCC_GetPCLK1Freq>
 8009de0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009de2:	e033      	b.n	8009e4c <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009de4:	f7fc fdc4 	bl	8006970 <HAL_RCC_GetPCLK2Freq>
 8009de8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009dea:	e02f      	b.n	8009e4c <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dec:	f107 0314 	add.w	r3, r7, #20
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7fd fec3 	bl	8007b7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009df6:	69bb      	ldr	r3, [r7, #24]
 8009df8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009dfa:	e027      	b.n	8009e4c <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dfc:	f107 0308 	add.w	r3, r7, #8
 8009e00:	4618      	mov	r0, r3
 8009e02:	f7fe f807 	bl	8007e14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e0a:	e01f      	b.n	8009e4c <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e0c:	4b2c      	ldr	r3, [pc, #176]	; (8009ec0 <UART_SetConfig+0xd48>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f003 0320 	and.w	r3, r3, #32
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d009      	beq.n	8009e2c <UART_SetConfig+0xcb4>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e18:	4b29      	ldr	r3, [pc, #164]	; (8009ec0 <UART_SetConfig+0xd48>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	08db      	lsrs	r3, r3, #3
 8009e1e:	f003 0303 	and.w	r3, r3, #3
 8009e22:	4a28      	ldr	r2, [pc, #160]	; (8009ec4 <UART_SetConfig+0xd4c>)
 8009e24:	fa22 f303 	lsr.w	r3, r2, r3
 8009e28:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e2a:	e00f      	b.n	8009e4c <UART_SetConfig+0xcd4>
          pclk = (uint32_t) HSI_VALUE;
 8009e2c:	4b25      	ldr	r3, [pc, #148]	; (8009ec4 <UART_SetConfig+0xd4c>)
 8009e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e30:	e00c      	b.n	8009e4c <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e32:	4b25      	ldr	r3, [pc, #148]	; (8009ec8 <UART_SetConfig+0xd50>)
 8009e34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e36:	e009      	b.n	8009e4c <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e3e:	e005      	b.n	8009e4c <UART_SetConfig+0xcd4>
      default:
        pclk = 0U;
 8009e40:	2300      	movs	r3, #0
 8009e42:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009e44:	2301      	movs	r3, #1
 8009e46:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009e4a:	bf00      	nop
    }

    if (pclk != 0U)
 8009e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d021      	beq.n	8009e96 <UART_SetConfig+0xd1e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e56:	4a1d      	ldr	r2, [pc, #116]	; (8009ecc <UART_SetConfig+0xd54>)
 8009e58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e60:	fbb3 f2f2 	udiv	r2, r3, r2
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	085b      	lsrs	r3, r3, #1
 8009e6a:	441a      	add	r2, r3
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e74:	b29b      	uxth	r3, r3
 8009e76:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e7a:	2b0f      	cmp	r3, #15
 8009e7c:	d908      	bls.n	8009e90 <UART_SetConfig+0xd18>
 8009e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e84:	d204      	bcs.n	8009e90 <UART_SetConfig+0xd18>
      {
        huart->Instance->BRR = usartdiv;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e8c:	60da      	str	r2, [r3, #12]
 8009e8e:	e002      	b.n	8009e96 <UART_SetConfig+0xd1e>
      }
      else
      {
        ret = HAL_ERROR;
 8009e90:	2301      	movs	r3, #1
 8009e92:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2201      	movs	r2, #1
 8009e9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009eb2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3738      	adds	r7, #56	; 0x38
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8009ec0:	58024400 	.word	0x58024400
 8009ec4:	03d09000 	.word	0x03d09000
 8009ec8:	003d0900 	.word	0x003d0900
 8009ecc:	0800bca8 	.word	0x0800bca8

08009ed0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009edc:	f003 0301 	and.w	r3, r3, #1
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d00a      	beq.n	8009efa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	430a      	orrs	r2, r1
 8009ef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009efe:	f003 0302 	and.w	r3, r3, #2
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d00a      	beq.n	8009f1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	430a      	orrs	r2, r1
 8009f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f20:	f003 0304 	and.w	r3, r3, #4
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d00a      	beq.n	8009f3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	430a      	orrs	r2, r1
 8009f3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f42:	f003 0308 	and.w	r3, r3, #8
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d00a      	beq.n	8009f60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	430a      	orrs	r2, r1
 8009f5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f64:	f003 0310 	and.w	r3, r3, #16
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d00a      	beq.n	8009f82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	689b      	ldr	r3, [r3, #8]
 8009f72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	430a      	orrs	r2, r1
 8009f80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f86:	f003 0320 	and.w	r3, r3, #32
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d00a      	beq.n	8009fa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	689b      	ldr	r3, [r3, #8]
 8009f94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	430a      	orrs	r2, r1
 8009fa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d01a      	beq.n	8009fe6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	430a      	orrs	r2, r1
 8009fc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fce:	d10a      	bne.n	8009fe6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	430a      	orrs	r2, r1
 8009fe4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d00a      	beq.n	800a008 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	430a      	orrs	r2, r1
 800a006:	605a      	str	r2, [r3, #4]
  }
}
 800a008:	bf00      	nop
 800a00a:	370c      	adds	r7, #12
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b086      	sub	sp, #24
 800a018:	af02      	add	r7, sp, #8
 800a01a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2200      	movs	r2, #0
 800a020:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a024:	f7f7 fe4a 	bl	8001cbc <HAL_GetTick>
 800a028:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f003 0308 	and.w	r3, r3, #8
 800a034:	2b08      	cmp	r3, #8
 800a036:	d10e      	bne.n	800a056 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a038:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a03c:	9300      	str	r3, [sp, #0]
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2200      	movs	r2, #0
 800a042:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 f82c 	bl	800a0a4 <UART_WaitOnFlagUntilTimeout>
 800a04c:	4603      	mov	r3, r0
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d001      	beq.n	800a056 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a052:	2303      	movs	r3, #3
 800a054:	e022      	b.n	800a09c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f003 0304 	and.w	r3, r3, #4
 800a060:	2b04      	cmp	r3, #4
 800a062:	d10e      	bne.n	800a082 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a064:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a068:	9300      	str	r3, [sp, #0]
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2200      	movs	r2, #0
 800a06e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 f816 	bl	800a0a4 <UART_WaitOnFlagUntilTimeout>
 800a078:	4603      	mov	r3, r0
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d001      	beq.n	800a082 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a07e:	2303      	movs	r3, #3
 800a080:	e00c      	b.n	800a09c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2220      	movs	r2, #32
 800a086:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2220      	movs	r2, #32
 800a08e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a09a:	2300      	movs	r3, #0
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3710      	adds	r7, #16
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b084      	sub	sp, #16
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	603b      	str	r3, [r7, #0]
 800a0b0:	4613      	mov	r3, r2
 800a0b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0b4:	e062      	b.n	800a17c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0bc:	d05e      	beq.n	800a17c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0be:	f7f7 fdfd 	bl	8001cbc <HAL_GetTick>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	1ad3      	subs	r3, r2, r3
 800a0c8:	69ba      	ldr	r2, [r7, #24]
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	d302      	bcc.n	800a0d4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a0ce:	69bb      	ldr	r3, [r7, #24]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d11d      	bne.n	800a110 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a0e2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	689a      	ldr	r2, [r3, #8]
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f022 0201 	bic.w	r2, r2, #1
 800a0f2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2220      	movs	r2, #32
 800a0f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2220      	movs	r2, #32
 800a100:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2200      	movs	r2, #0
 800a108:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a10c:	2303      	movs	r3, #3
 800a10e:	e045      	b.n	800a19c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f003 0304 	and.w	r3, r3, #4
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d02e      	beq.n	800a17c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	69db      	ldr	r3, [r3, #28]
 800a124:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a128:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a12c:	d126      	bne.n	800a17c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a136:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a146:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	689a      	ldr	r2, [r3, #8]
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f022 0201 	bic.w	r2, r2, #1
 800a156:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2220      	movs	r2, #32
 800a15c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2220      	movs	r2, #32
 800a164:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2220      	movs	r2, #32
 800a16c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2200      	movs	r2, #0
 800a174:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800a178:	2303      	movs	r3, #3
 800a17a:	e00f      	b.n	800a19c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	69da      	ldr	r2, [r3, #28]
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	4013      	ands	r3, r2
 800a186:	68ba      	ldr	r2, [r7, #8]
 800a188:	429a      	cmp	r2, r3
 800a18a:	bf0c      	ite	eq
 800a18c:	2301      	moveq	r3, #1
 800a18e:	2300      	movne	r3, #0
 800a190:	b2db      	uxtb	r3, r3
 800a192:	461a      	mov	r2, r3
 800a194:	79fb      	ldrb	r3, [r7, #7]
 800a196:	429a      	cmp	r2, r3
 800a198:	d08d      	beq.n	800a0b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a19a:	2300      	movs	r3, #0
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3710      	adds	r7, #16
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b085      	sub	sp, #20
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	d101      	bne.n	800a1ba <HAL_UARTEx_DisableFifoMode+0x16>
 800a1b6:	2302      	movs	r3, #2
 800a1b8:	e027      	b.n	800a20a <HAL_UARTEx_DisableFifoMode+0x66>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2201      	movs	r2, #1
 800a1be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2224      	movs	r2, #36	; 0x24
 800a1c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f022 0201 	bic.w	r2, r2, #1
 800a1e0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a1e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	68fa      	ldr	r2, [r7, #12]
 800a1f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2220      	movs	r2, #32
 800a1fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2200      	movs	r2, #0
 800a204:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a208:	2300      	movs	r3, #0
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3714      	adds	r7, #20
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr

0800a216 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a216:	b580      	push	{r7, lr}
 800a218:	b084      	sub	sp, #16
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
 800a21e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a226:	2b01      	cmp	r3, #1
 800a228:	d101      	bne.n	800a22e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a22a:	2302      	movs	r3, #2
 800a22c:	e02d      	b.n	800a28a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2201      	movs	r2, #1
 800a232:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2224      	movs	r2, #36	; 0x24
 800a23a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f022 0201 	bic.w	r2, r2, #1
 800a254:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	689b      	ldr	r3, [r3, #8]
 800a25c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	683a      	ldr	r2, [r7, #0]
 800a266:	430a      	orrs	r2, r1
 800a268:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 f850 	bl	800a310 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	68fa      	ldr	r2, [r7, #12]
 800a276:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2220      	movs	r2, #32
 800a27c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2200      	movs	r2, #0
 800a284:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a288:	2300      	movs	r3, #0
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3710      	adds	r7, #16
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}

0800a292 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a292:	b580      	push	{r7, lr}
 800a294:	b084      	sub	sp, #16
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
 800a29a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d101      	bne.n	800a2aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a2a6:	2302      	movs	r3, #2
 800a2a8:	e02d      	b.n	800a306 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2224      	movs	r2, #36	; 0x24
 800a2b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	681a      	ldr	r2, [r3, #0]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f022 0201 	bic.w	r2, r2, #1
 800a2d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	689b      	ldr	r3, [r3, #8]
 800a2d8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	683a      	ldr	r2, [r7, #0]
 800a2e2:	430a      	orrs	r2, r1
 800a2e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 f812 	bl	800a310 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	68fa      	ldr	r2, [r7, #12]
 800a2f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2220      	movs	r2, #32
 800a2f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2200      	movs	r2, #0
 800a300:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a304:	2300      	movs	r3, #0
}
 800a306:	4618      	mov	r0, r3
 800a308:	3710      	adds	r7, #16
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
	...

0800a310 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a310:	b480      	push	{r7}
 800a312:	b089      	sub	sp, #36	; 0x24
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a318:	4a2f      	ldr	r2, [pc, #188]	; (800a3d8 <UARTEx_SetNbDataToProcess+0xc8>)
 800a31a:	f107 0314 	add.w	r3, r7, #20
 800a31e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a322:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a326:	4a2d      	ldr	r2, [pc, #180]	; (800a3dc <UARTEx_SetNbDataToProcess+0xcc>)
 800a328:	f107 030c 	add.w	r3, r7, #12
 800a32c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a330:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d108      	bne.n	800a34e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2201      	movs	r2, #1
 800a340:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2201      	movs	r2, #1
 800a348:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a34c:	e03d      	b.n	800a3ca <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a34e:	2310      	movs	r3, #16
 800a350:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a352:	2310      	movs	r3, #16
 800a354:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	689b      	ldr	r3, [r3, #8]
 800a35c:	0e5b      	lsrs	r3, r3, #25
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	f003 0307 	and.w	r3, r3, #7
 800a364:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	689b      	ldr	r3, [r3, #8]
 800a36c:	0f5b      	lsrs	r3, r3, #29
 800a36e:	b2db      	uxtb	r3, r3
 800a370:	f003 0307 	and.w	r3, r3, #7
 800a374:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a376:	7fbb      	ldrb	r3, [r7, #30]
 800a378:	7f3a      	ldrb	r2, [r7, #28]
 800a37a:	f107 0120 	add.w	r1, r7, #32
 800a37e:	440a      	add	r2, r1
 800a380:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a384:	fb02 f303 	mul.w	r3, r2, r3
 800a388:	7f3a      	ldrb	r2, [r7, #28]
 800a38a:	f107 0120 	add.w	r1, r7, #32
 800a38e:	440a      	add	r2, r1
 800a390:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a394:	fb93 f3f2 	sdiv	r3, r3, r2
 800a398:	b29a      	uxth	r2, r3
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a3a0:	7ffb      	ldrb	r3, [r7, #31]
 800a3a2:	7f7a      	ldrb	r2, [r7, #29]
 800a3a4:	f107 0120 	add.w	r1, r7, #32
 800a3a8:	440a      	add	r2, r1
 800a3aa:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a3ae:	fb02 f303 	mul.w	r3, r2, r3
 800a3b2:	7f7a      	ldrb	r2, [r7, #29]
 800a3b4:	f107 0120 	add.w	r1, r7, #32
 800a3b8:	440a      	add	r2, r1
 800a3ba:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a3be:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3c2:	b29a      	uxth	r2, r3
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a3ca:	bf00      	nop
 800a3cc:	3724      	adds	r7, #36	; 0x24
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr
 800a3d6:	bf00      	nop
 800a3d8:	0800b480 	.word	0x0800b480
 800a3dc:	0800b488 	.word	0x0800b488

0800a3e0 <calloc>:
 800a3e0:	4b02      	ldr	r3, [pc, #8]	; (800a3ec <calloc+0xc>)
 800a3e2:	460a      	mov	r2, r1
 800a3e4:	4601      	mov	r1, r0
 800a3e6:	6818      	ldr	r0, [r3, #0]
 800a3e8:	f000 b850 	b.w	800a48c <_calloc_r>
 800a3ec:	2400001c 	.word	0x2400001c

0800a3f0 <__errno>:
 800a3f0:	4b01      	ldr	r3, [pc, #4]	; (800a3f8 <__errno+0x8>)
 800a3f2:	6818      	ldr	r0, [r3, #0]
 800a3f4:	4770      	bx	lr
 800a3f6:	bf00      	nop
 800a3f8:	2400001c 	.word	0x2400001c

0800a3fc <exit>:
 800a3fc:	b508      	push	{r3, lr}
 800a3fe:	4b07      	ldr	r3, [pc, #28]	; (800a41c <exit+0x20>)
 800a400:	4604      	mov	r4, r0
 800a402:	b113      	cbz	r3, 800a40a <exit+0xe>
 800a404:	2100      	movs	r1, #0
 800a406:	f3af 8000 	nop.w
 800a40a:	4b05      	ldr	r3, [pc, #20]	; (800a420 <exit+0x24>)
 800a40c:	6818      	ldr	r0, [r3, #0]
 800a40e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a410:	b103      	cbz	r3, 800a414 <exit+0x18>
 800a412:	4798      	blx	r3
 800a414:	4620      	mov	r0, r4
 800a416:	f7f7 fa77 	bl	8001908 <_exit>
 800a41a:	bf00      	nop
 800a41c:	00000000 	.word	0x00000000
 800a420:	0800bcc0 	.word	0x0800bcc0

0800a424 <__libc_init_array>:
 800a424:	b570      	push	{r4, r5, r6, lr}
 800a426:	4e0d      	ldr	r6, [pc, #52]	; (800a45c <__libc_init_array+0x38>)
 800a428:	4c0d      	ldr	r4, [pc, #52]	; (800a460 <__libc_init_array+0x3c>)
 800a42a:	1ba4      	subs	r4, r4, r6
 800a42c:	10a4      	asrs	r4, r4, #2
 800a42e:	2500      	movs	r5, #0
 800a430:	42a5      	cmp	r5, r4
 800a432:	d109      	bne.n	800a448 <__libc_init_array+0x24>
 800a434:	4e0b      	ldr	r6, [pc, #44]	; (800a464 <__libc_init_array+0x40>)
 800a436:	4c0c      	ldr	r4, [pc, #48]	; (800a468 <__libc_init_array+0x44>)
 800a438:	f000 ffea 	bl	800b410 <_init>
 800a43c:	1ba4      	subs	r4, r4, r6
 800a43e:	10a4      	asrs	r4, r4, #2
 800a440:	2500      	movs	r5, #0
 800a442:	42a5      	cmp	r5, r4
 800a444:	d105      	bne.n	800a452 <__libc_init_array+0x2e>
 800a446:	bd70      	pop	{r4, r5, r6, pc}
 800a448:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a44c:	4798      	blx	r3
 800a44e:	3501      	adds	r5, #1
 800a450:	e7ee      	b.n	800a430 <__libc_init_array+0xc>
 800a452:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a456:	4798      	blx	r3
 800a458:	3501      	adds	r5, #1
 800a45a:	e7f2      	b.n	800a442 <__libc_init_array+0x1e>
 800a45c:	0800bd60 	.word	0x0800bd60
 800a460:	0800bd60 	.word	0x0800bd60
 800a464:	0800bd60 	.word	0x0800bd60
 800a468:	0800bd64 	.word	0x0800bd64

0800a46c <malloc>:
 800a46c:	4b02      	ldr	r3, [pc, #8]	; (800a478 <malloc+0xc>)
 800a46e:	4601      	mov	r1, r0
 800a470:	6818      	ldr	r0, [r3, #0]
 800a472:	f000 b867 	b.w	800a544 <_malloc_r>
 800a476:	bf00      	nop
 800a478:	2400001c 	.word	0x2400001c

0800a47c <memset>:
 800a47c:	4402      	add	r2, r0
 800a47e:	4603      	mov	r3, r0
 800a480:	4293      	cmp	r3, r2
 800a482:	d100      	bne.n	800a486 <memset+0xa>
 800a484:	4770      	bx	lr
 800a486:	f803 1b01 	strb.w	r1, [r3], #1
 800a48a:	e7f9      	b.n	800a480 <memset+0x4>

0800a48c <_calloc_r>:
 800a48c:	b538      	push	{r3, r4, r5, lr}
 800a48e:	fb02 f401 	mul.w	r4, r2, r1
 800a492:	4621      	mov	r1, r4
 800a494:	f000 f856 	bl	800a544 <_malloc_r>
 800a498:	4605      	mov	r5, r0
 800a49a:	b118      	cbz	r0, 800a4a4 <_calloc_r+0x18>
 800a49c:	4622      	mov	r2, r4
 800a49e:	2100      	movs	r1, #0
 800a4a0:	f7ff ffec 	bl	800a47c <memset>
 800a4a4:	4628      	mov	r0, r5
 800a4a6:	bd38      	pop	{r3, r4, r5, pc}

0800a4a8 <_free_r>:
 800a4a8:	b538      	push	{r3, r4, r5, lr}
 800a4aa:	4605      	mov	r5, r0
 800a4ac:	2900      	cmp	r1, #0
 800a4ae:	d045      	beq.n	800a53c <_free_r+0x94>
 800a4b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4b4:	1f0c      	subs	r4, r1, #4
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	bfb8      	it	lt
 800a4ba:	18e4      	addlt	r4, r4, r3
 800a4bc:	f000 fbce 	bl	800ac5c <__malloc_lock>
 800a4c0:	4a1f      	ldr	r2, [pc, #124]	; (800a540 <_free_r+0x98>)
 800a4c2:	6813      	ldr	r3, [r2, #0]
 800a4c4:	4610      	mov	r0, r2
 800a4c6:	b933      	cbnz	r3, 800a4d6 <_free_r+0x2e>
 800a4c8:	6063      	str	r3, [r4, #4]
 800a4ca:	6014      	str	r4, [r2, #0]
 800a4cc:	4628      	mov	r0, r5
 800a4ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4d2:	f000 bbc4 	b.w	800ac5e <__malloc_unlock>
 800a4d6:	42a3      	cmp	r3, r4
 800a4d8:	d90c      	bls.n	800a4f4 <_free_r+0x4c>
 800a4da:	6821      	ldr	r1, [r4, #0]
 800a4dc:	1862      	adds	r2, r4, r1
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	bf04      	itt	eq
 800a4e2:	681a      	ldreq	r2, [r3, #0]
 800a4e4:	685b      	ldreq	r3, [r3, #4]
 800a4e6:	6063      	str	r3, [r4, #4]
 800a4e8:	bf04      	itt	eq
 800a4ea:	1852      	addeq	r2, r2, r1
 800a4ec:	6022      	streq	r2, [r4, #0]
 800a4ee:	6004      	str	r4, [r0, #0]
 800a4f0:	e7ec      	b.n	800a4cc <_free_r+0x24>
 800a4f2:	4613      	mov	r3, r2
 800a4f4:	685a      	ldr	r2, [r3, #4]
 800a4f6:	b10a      	cbz	r2, 800a4fc <_free_r+0x54>
 800a4f8:	42a2      	cmp	r2, r4
 800a4fa:	d9fa      	bls.n	800a4f2 <_free_r+0x4a>
 800a4fc:	6819      	ldr	r1, [r3, #0]
 800a4fe:	1858      	adds	r0, r3, r1
 800a500:	42a0      	cmp	r0, r4
 800a502:	d10b      	bne.n	800a51c <_free_r+0x74>
 800a504:	6820      	ldr	r0, [r4, #0]
 800a506:	4401      	add	r1, r0
 800a508:	1858      	adds	r0, r3, r1
 800a50a:	4282      	cmp	r2, r0
 800a50c:	6019      	str	r1, [r3, #0]
 800a50e:	d1dd      	bne.n	800a4cc <_free_r+0x24>
 800a510:	6810      	ldr	r0, [r2, #0]
 800a512:	6852      	ldr	r2, [r2, #4]
 800a514:	605a      	str	r2, [r3, #4]
 800a516:	4401      	add	r1, r0
 800a518:	6019      	str	r1, [r3, #0]
 800a51a:	e7d7      	b.n	800a4cc <_free_r+0x24>
 800a51c:	d902      	bls.n	800a524 <_free_r+0x7c>
 800a51e:	230c      	movs	r3, #12
 800a520:	602b      	str	r3, [r5, #0]
 800a522:	e7d3      	b.n	800a4cc <_free_r+0x24>
 800a524:	6820      	ldr	r0, [r4, #0]
 800a526:	1821      	adds	r1, r4, r0
 800a528:	428a      	cmp	r2, r1
 800a52a:	bf04      	itt	eq
 800a52c:	6811      	ldreq	r1, [r2, #0]
 800a52e:	6852      	ldreq	r2, [r2, #4]
 800a530:	6062      	str	r2, [r4, #4]
 800a532:	bf04      	itt	eq
 800a534:	1809      	addeq	r1, r1, r0
 800a536:	6021      	streq	r1, [r4, #0]
 800a538:	605c      	str	r4, [r3, #4]
 800a53a:	e7c7      	b.n	800a4cc <_free_r+0x24>
 800a53c:	bd38      	pop	{r3, r4, r5, pc}
 800a53e:	bf00      	nop
 800a540:	240000b0 	.word	0x240000b0

0800a544 <_malloc_r>:
 800a544:	b570      	push	{r4, r5, r6, lr}
 800a546:	1ccd      	adds	r5, r1, #3
 800a548:	f025 0503 	bic.w	r5, r5, #3
 800a54c:	3508      	adds	r5, #8
 800a54e:	2d0c      	cmp	r5, #12
 800a550:	bf38      	it	cc
 800a552:	250c      	movcc	r5, #12
 800a554:	2d00      	cmp	r5, #0
 800a556:	4606      	mov	r6, r0
 800a558:	db01      	blt.n	800a55e <_malloc_r+0x1a>
 800a55a:	42a9      	cmp	r1, r5
 800a55c:	d903      	bls.n	800a566 <_malloc_r+0x22>
 800a55e:	230c      	movs	r3, #12
 800a560:	6033      	str	r3, [r6, #0]
 800a562:	2000      	movs	r0, #0
 800a564:	bd70      	pop	{r4, r5, r6, pc}
 800a566:	f000 fb79 	bl	800ac5c <__malloc_lock>
 800a56a:	4a21      	ldr	r2, [pc, #132]	; (800a5f0 <_malloc_r+0xac>)
 800a56c:	6814      	ldr	r4, [r2, #0]
 800a56e:	4621      	mov	r1, r4
 800a570:	b991      	cbnz	r1, 800a598 <_malloc_r+0x54>
 800a572:	4c20      	ldr	r4, [pc, #128]	; (800a5f4 <_malloc_r+0xb0>)
 800a574:	6823      	ldr	r3, [r4, #0]
 800a576:	b91b      	cbnz	r3, 800a580 <_malloc_r+0x3c>
 800a578:	4630      	mov	r0, r6
 800a57a:	f000 f8a1 	bl	800a6c0 <_sbrk_r>
 800a57e:	6020      	str	r0, [r4, #0]
 800a580:	4629      	mov	r1, r5
 800a582:	4630      	mov	r0, r6
 800a584:	f000 f89c 	bl	800a6c0 <_sbrk_r>
 800a588:	1c43      	adds	r3, r0, #1
 800a58a:	d124      	bne.n	800a5d6 <_malloc_r+0x92>
 800a58c:	230c      	movs	r3, #12
 800a58e:	6033      	str	r3, [r6, #0]
 800a590:	4630      	mov	r0, r6
 800a592:	f000 fb64 	bl	800ac5e <__malloc_unlock>
 800a596:	e7e4      	b.n	800a562 <_malloc_r+0x1e>
 800a598:	680b      	ldr	r3, [r1, #0]
 800a59a:	1b5b      	subs	r3, r3, r5
 800a59c:	d418      	bmi.n	800a5d0 <_malloc_r+0x8c>
 800a59e:	2b0b      	cmp	r3, #11
 800a5a0:	d90f      	bls.n	800a5c2 <_malloc_r+0x7e>
 800a5a2:	600b      	str	r3, [r1, #0]
 800a5a4:	50cd      	str	r5, [r1, r3]
 800a5a6:	18cc      	adds	r4, r1, r3
 800a5a8:	4630      	mov	r0, r6
 800a5aa:	f000 fb58 	bl	800ac5e <__malloc_unlock>
 800a5ae:	f104 000b 	add.w	r0, r4, #11
 800a5b2:	1d23      	adds	r3, r4, #4
 800a5b4:	f020 0007 	bic.w	r0, r0, #7
 800a5b8:	1ac3      	subs	r3, r0, r3
 800a5ba:	d0d3      	beq.n	800a564 <_malloc_r+0x20>
 800a5bc:	425a      	negs	r2, r3
 800a5be:	50e2      	str	r2, [r4, r3]
 800a5c0:	e7d0      	b.n	800a564 <_malloc_r+0x20>
 800a5c2:	428c      	cmp	r4, r1
 800a5c4:	684b      	ldr	r3, [r1, #4]
 800a5c6:	bf16      	itet	ne
 800a5c8:	6063      	strne	r3, [r4, #4]
 800a5ca:	6013      	streq	r3, [r2, #0]
 800a5cc:	460c      	movne	r4, r1
 800a5ce:	e7eb      	b.n	800a5a8 <_malloc_r+0x64>
 800a5d0:	460c      	mov	r4, r1
 800a5d2:	6849      	ldr	r1, [r1, #4]
 800a5d4:	e7cc      	b.n	800a570 <_malloc_r+0x2c>
 800a5d6:	1cc4      	adds	r4, r0, #3
 800a5d8:	f024 0403 	bic.w	r4, r4, #3
 800a5dc:	42a0      	cmp	r0, r4
 800a5de:	d005      	beq.n	800a5ec <_malloc_r+0xa8>
 800a5e0:	1a21      	subs	r1, r4, r0
 800a5e2:	4630      	mov	r0, r6
 800a5e4:	f000 f86c 	bl	800a6c0 <_sbrk_r>
 800a5e8:	3001      	adds	r0, #1
 800a5ea:	d0cf      	beq.n	800a58c <_malloc_r+0x48>
 800a5ec:	6025      	str	r5, [r4, #0]
 800a5ee:	e7db      	b.n	800a5a8 <_malloc_r+0x64>
 800a5f0:	240000b0 	.word	0x240000b0
 800a5f4:	240000b4 	.word	0x240000b4

0800a5f8 <_puts_r>:
 800a5f8:	b570      	push	{r4, r5, r6, lr}
 800a5fa:	460e      	mov	r6, r1
 800a5fc:	4605      	mov	r5, r0
 800a5fe:	b118      	cbz	r0, 800a608 <_puts_r+0x10>
 800a600:	6983      	ldr	r3, [r0, #24]
 800a602:	b90b      	cbnz	r3, 800a608 <_puts_r+0x10>
 800a604:	f000 fa3c 	bl	800aa80 <__sinit>
 800a608:	69ab      	ldr	r3, [r5, #24]
 800a60a:	68ac      	ldr	r4, [r5, #8]
 800a60c:	b913      	cbnz	r3, 800a614 <_puts_r+0x1c>
 800a60e:	4628      	mov	r0, r5
 800a610:	f000 fa36 	bl	800aa80 <__sinit>
 800a614:	4b23      	ldr	r3, [pc, #140]	; (800a6a4 <_puts_r+0xac>)
 800a616:	429c      	cmp	r4, r3
 800a618:	d117      	bne.n	800a64a <_puts_r+0x52>
 800a61a:	686c      	ldr	r4, [r5, #4]
 800a61c:	89a3      	ldrh	r3, [r4, #12]
 800a61e:	071b      	lsls	r3, r3, #28
 800a620:	d51d      	bpl.n	800a65e <_puts_r+0x66>
 800a622:	6923      	ldr	r3, [r4, #16]
 800a624:	b1db      	cbz	r3, 800a65e <_puts_r+0x66>
 800a626:	3e01      	subs	r6, #1
 800a628:	68a3      	ldr	r3, [r4, #8]
 800a62a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a62e:	3b01      	subs	r3, #1
 800a630:	60a3      	str	r3, [r4, #8]
 800a632:	b9e9      	cbnz	r1, 800a670 <_puts_r+0x78>
 800a634:	2b00      	cmp	r3, #0
 800a636:	da2e      	bge.n	800a696 <_puts_r+0x9e>
 800a638:	4622      	mov	r2, r4
 800a63a:	210a      	movs	r1, #10
 800a63c:	4628      	mov	r0, r5
 800a63e:	f000 f86f 	bl	800a720 <__swbuf_r>
 800a642:	3001      	adds	r0, #1
 800a644:	d011      	beq.n	800a66a <_puts_r+0x72>
 800a646:	200a      	movs	r0, #10
 800a648:	e011      	b.n	800a66e <_puts_r+0x76>
 800a64a:	4b17      	ldr	r3, [pc, #92]	; (800a6a8 <_puts_r+0xb0>)
 800a64c:	429c      	cmp	r4, r3
 800a64e:	d101      	bne.n	800a654 <_puts_r+0x5c>
 800a650:	68ac      	ldr	r4, [r5, #8]
 800a652:	e7e3      	b.n	800a61c <_puts_r+0x24>
 800a654:	4b15      	ldr	r3, [pc, #84]	; (800a6ac <_puts_r+0xb4>)
 800a656:	429c      	cmp	r4, r3
 800a658:	bf08      	it	eq
 800a65a:	68ec      	ldreq	r4, [r5, #12]
 800a65c:	e7de      	b.n	800a61c <_puts_r+0x24>
 800a65e:	4621      	mov	r1, r4
 800a660:	4628      	mov	r0, r5
 800a662:	f000 f8af 	bl	800a7c4 <__swsetup_r>
 800a666:	2800      	cmp	r0, #0
 800a668:	d0dd      	beq.n	800a626 <_puts_r+0x2e>
 800a66a:	f04f 30ff 	mov.w	r0, #4294967295
 800a66e:	bd70      	pop	{r4, r5, r6, pc}
 800a670:	2b00      	cmp	r3, #0
 800a672:	da04      	bge.n	800a67e <_puts_r+0x86>
 800a674:	69a2      	ldr	r2, [r4, #24]
 800a676:	429a      	cmp	r2, r3
 800a678:	dc06      	bgt.n	800a688 <_puts_r+0x90>
 800a67a:	290a      	cmp	r1, #10
 800a67c:	d004      	beq.n	800a688 <_puts_r+0x90>
 800a67e:	6823      	ldr	r3, [r4, #0]
 800a680:	1c5a      	adds	r2, r3, #1
 800a682:	6022      	str	r2, [r4, #0]
 800a684:	7019      	strb	r1, [r3, #0]
 800a686:	e7cf      	b.n	800a628 <_puts_r+0x30>
 800a688:	4622      	mov	r2, r4
 800a68a:	4628      	mov	r0, r5
 800a68c:	f000 f848 	bl	800a720 <__swbuf_r>
 800a690:	3001      	adds	r0, #1
 800a692:	d1c9      	bne.n	800a628 <_puts_r+0x30>
 800a694:	e7e9      	b.n	800a66a <_puts_r+0x72>
 800a696:	6823      	ldr	r3, [r4, #0]
 800a698:	200a      	movs	r0, #10
 800a69a:	1c5a      	adds	r2, r3, #1
 800a69c:	6022      	str	r2, [r4, #0]
 800a69e:	7018      	strb	r0, [r3, #0]
 800a6a0:	e7e5      	b.n	800a66e <_puts_r+0x76>
 800a6a2:	bf00      	nop
 800a6a4:	0800bce4 	.word	0x0800bce4
 800a6a8:	0800bd04 	.word	0x0800bd04
 800a6ac:	0800bcc4 	.word	0x0800bcc4

0800a6b0 <puts>:
 800a6b0:	4b02      	ldr	r3, [pc, #8]	; (800a6bc <puts+0xc>)
 800a6b2:	4601      	mov	r1, r0
 800a6b4:	6818      	ldr	r0, [r3, #0]
 800a6b6:	f7ff bf9f 	b.w	800a5f8 <_puts_r>
 800a6ba:	bf00      	nop
 800a6bc:	2400001c 	.word	0x2400001c

0800a6c0 <_sbrk_r>:
 800a6c0:	b538      	push	{r3, r4, r5, lr}
 800a6c2:	4c06      	ldr	r4, [pc, #24]	; (800a6dc <_sbrk_r+0x1c>)
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	4605      	mov	r5, r0
 800a6c8:	4608      	mov	r0, r1
 800a6ca:	6023      	str	r3, [r4, #0]
 800a6cc:	f7f7 f994 	bl	80019f8 <_sbrk>
 800a6d0:	1c43      	adds	r3, r0, #1
 800a6d2:	d102      	bne.n	800a6da <_sbrk_r+0x1a>
 800a6d4:	6823      	ldr	r3, [r4, #0]
 800a6d6:	b103      	cbz	r3, 800a6da <_sbrk_r+0x1a>
 800a6d8:	602b      	str	r3, [r5, #0]
 800a6da:	bd38      	pop	{r3, r4, r5, pc}
 800a6dc:	240003e4 	.word	0x240003e4

0800a6e0 <siprintf>:
 800a6e0:	b40e      	push	{r1, r2, r3}
 800a6e2:	b500      	push	{lr}
 800a6e4:	b09c      	sub	sp, #112	; 0x70
 800a6e6:	ab1d      	add	r3, sp, #116	; 0x74
 800a6e8:	9002      	str	r0, [sp, #8]
 800a6ea:	9006      	str	r0, [sp, #24]
 800a6ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a6f0:	4809      	ldr	r0, [pc, #36]	; (800a718 <siprintf+0x38>)
 800a6f2:	9107      	str	r1, [sp, #28]
 800a6f4:	9104      	str	r1, [sp, #16]
 800a6f6:	4909      	ldr	r1, [pc, #36]	; (800a71c <siprintf+0x3c>)
 800a6f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6fc:	9105      	str	r1, [sp, #20]
 800a6fe:	6800      	ldr	r0, [r0, #0]
 800a700:	9301      	str	r3, [sp, #4]
 800a702:	a902      	add	r1, sp, #8
 800a704:	f000 fb06 	bl	800ad14 <_svfiprintf_r>
 800a708:	9b02      	ldr	r3, [sp, #8]
 800a70a:	2200      	movs	r2, #0
 800a70c:	701a      	strb	r2, [r3, #0]
 800a70e:	b01c      	add	sp, #112	; 0x70
 800a710:	f85d eb04 	ldr.w	lr, [sp], #4
 800a714:	b003      	add	sp, #12
 800a716:	4770      	bx	lr
 800a718:	2400001c 	.word	0x2400001c
 800a71c:	ffff0208 	.word	0xffff0208

0800a720 <__swbuf_r>:
 800a720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a722:	460e      	mov	r6, r1
 800a724:	4614      	mov	r4, r2
 800a726:	4605      	mov	r5, r0
 800a728:	b118      	cbz	r0, 800a732 <__swbuf_r+0x12>
 800a72a:	6983      	ldr	r3, [r0, #24]
 800a72c:	b90b      	cbnz	r3, 800a732 <__swbuf_r+0x12>
 800a72e:	f000 f9a7 	bl	800aa80 <__sinit>
 800a732:	4b21      	ldr	r3, [pc, #132]	; (800a7b8 <__swbuf_r+0x98>)
 800a734:	429c      	cmp	r4, r3
 800a736:	d12a      	bne.n	800a78e <__swbuf_r+0x6e>
 800a738:	686c      	ldr	r4, [r5, #4]
 800a73a:	69a3      	ldr	r3, [r4, #24]
 800a73c:	60a3      	str	r3, [r4, #8]
 800a73e:	89a3      	ldrh	r3, [r4, #12]
 800a740:	071a      	lsls	r2, r3, #28
 800a742:	d52e      	bpl.n	800a7a2 <__swbuf_r+0x82>
 800a744:	6923      	ldr	r3, [r4, #16]
 800a746:	b363      	cbz	r3, 800a7a2 <__swbuf_r+0x82>
 800a748:	6923      	ldr	r3, [r4, #16]
 800a74a:	6820      	ldr	r0, [r4, #0]
 800a74c:	1ac0      	subs	r0, r0, r3
 800a74e:	6963      	ldr	r3, [r4, #20]
 800a750:	b2f6      	uxtb	r6, r6
 800a752:	4283      	cmp	r3, r0
 800a754:	4637      	mov	r7, r6
 800a756:	dc04      	bgt.n	800a762 <__swbuf_r+0x42>
 800a758:	4621      	mov	r1, r4
 800a75a:	4628      	mov	r0, r5
 800a75c:	f000 f926 	bl	800a9ac <_fflush_r>
 800a760:	bb28      	cbnz	r0, 800a7ae <__swbuf_r+0x8e>
 800a762:	68a3      	ldr	r3, [r4, #8]
 800a764:	3b01      	subs	r3, #1
 800a766:	60a3      	str	r3, [r4, #8]
 800a768:	6823      	ldr	r3, [r4, #0]
 800a76a:	1c5a      	adds	r2, r3, #1
 800a76c:	6022      	str	r2, [r4, #0]
 800a76e:	701e      	strb	r6, [r3, #0]
 800a770:	6963      	ldr	r3, [r4, #20]
 800a772:	3001      	adds	r0, #1
 800a774:	4283      	cmp	r3, r0
 800a776:	d004      	beq.n	800a782 <__swbuf_r+0x62>
 800a778:	89a3      	ldrh	r3, [r4, #12]
 800a77a:	07db      	lsls	r3, r3, #31
 800a77c:	d519      	bpl.n	800a7b2 <__swbuf_r+0x92>
 800a77e:	2e0a      	cmp	r6, #10
 800a780:	d117      	bne.n	800a7b2 <__swbuf_r+0x92>
 800a782:	4621      	mov	r1, r4
 800a784:	4628      	mov	r0, r5
 800a786:	f000 f911 	bl	800a9ac <_fflush_r>
 800a78a:	b190      	cbz	r0, 800a7b2 <__swbuf_r+0x92>
 800a78c:	e00f      	b.n	800a7ae <__swbuf_r+0x8e>
 800a78e:	4b0b      	ldr	r3, [pc, #44]	; (800a7bc <__swbuf_r+0x9c>)
 800a790:	429c      	cmp	r4, r3
 800a792:	d101      	bne.n	800a798 <__swbuf_r+0x78>
 800a794:	68ac      	ldr	r4, [r5, #8]
 800a796:	e7d0      	b.n	800a73a <__swbuf_r+0x1a>
 800a798:	4b09      	ldr	r3, [pc, #36]	; (800a7c0 <__swbuf_r+0xa0>)
 800a79a:	429c      	cmp	r4, r3
 800a79c:	bf08      	it	eq
 800a79e:	68ec      	ldreq	r4, [r5, #12]
 800a7a0:	e7cb      	b.n	800a73a <__swbuf_r+0x1a>
 800a7a2:	4621      	mov	r1, r4
 800a7a4:	4628      	mov	r0, r5
 800a7a6:	f000 f80d 	bl	800a7c4 <__swsetup_r>
 800a7aa:	2800      	cmp	r0, #0
 800a7ac:	d0cc      	beq.n	800a748 <__swbuf_r+0x28>
 800a7ae:	f04f 37ff 	mov.w	r7, #4294967295
 800a7b2:	4638      	mov	r0, r7
 800a7b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7b6:	bf00      	nop
 800a7b8:	0800bce4 	.word	0x0800bce4
 800a7bc:	0800bd04 	.word	0x0800bd04
 800a7c0:	0800bcc4 	.word	0x0800bcc4

0800a7c4 <__swsetup_r>:
 800a7c4:	4b32      	ldr	r3, [pc, #200]	; (800a890 <__swsetup_r+0xcc>)
 800a7c6:	b570      	push	{r4, r5, r6, lr}
 800a7c8:	681d      	ldr	r5, [r3, #0]
 800a7ca:	4606      	mov	r6, r0
 800a7cc:	460c      	mov	r4, r1
 800a7ce:	b125      	cbz	r5, 800a7da <__swsetup_r+0x16>
 800a7d0:	69ab      	ldr	r3, [r5, #24]
 800a7d2:	b913      	cbnz	r3, 800a7da <__swsetup_r+0x16>
 800a7d4:	4628      	mov	r0, r5
 800a7d6:	f000 f953 	bl	800aa80 <__sinit>
 800a7da:	4b2e      	ldr	r3, [pc, #184]	; (800a894 <__swsetup_r+0xd0>)
 800a7dc:	429c      	cmp	r4, r3
 800a7de:	d10f      	bne.n	800a800 <__swsetup_r+0x3c>
 800a7e0:	686c      	ldr	r4, [r5, #4]
 800a7e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7e6:	b29a      	uxth	r2, r3
 800a7e8:	0715      	lsls	r5, r2, #28
 800a7ea:	d42c      	bmi.n	800a846 <__swsetup_r+0x82>
 800a7ec:	06d0      	lsls	r0, r2, #27
 800a7ee:	d411      	bmi.n	800a814 <__swsetup_r+0x50>
 800a7f0:	2209      	movs	r2, #9
 800a7f2:	6032      	str	r2, [r6, #0]
 800a7f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7f8:	81a3      	strh	r3, [r4, #12]
 800a7fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a7fe:	e03e      	b.n	800a87e <__swsetup_r+0xba>
 800a800:	4b25      	ldr	r3, [pc, #148]	; (800a898 <__swsetup_r+0xd4>)
 800a802:	429c      	cmp	r4, r3
 800a804:	d101      	bne.n	800a80a <__swsetup_r+0x46>
 800a806:	68ac      	ldr	r4, [r5, #8]
 800a808:	e7eb      	b.n	800a7e2 <__swsetup_r+0x1e>
 800a80a:	4b24      	ldr	r3, [pc, #144]	; (800a89c <__swsetup_r+0xd8>)
 800a80c:	429c      	cmp	r4, r3
 800a80e:	bf08      	it	eq
 800a810:	68ec      	ldreq	r4, [r5, #12]
 800a812:	e7e6      	b.n	800a7e2 <__swsetup_r+0x1e>
 800a814:	0751      	lsls	r1, r2, #29
 800a816:	d512      	bpl.n	800a83e <__swsetup_r+0x7a>
 800a818:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a81a:	b141      	cbz	r1, 800a82e <__swsetup_r+0x6a>
 800a81c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a820:	4299      	cmp	r1, r3
 800a822:	d002      	beq.n	800a82a <__swsetup_r+0x66>
 800a824:	4630      	mov	r0, r6
 800a826:	f7ff fe3f 	bl	800a4a8 <_free_r>
 800a82a:	2300      	movs	r3, #0
 800a82c:	6363      	str	r3, [r4, #52]	; 0x34
 800a82e:	89a3      	ldrh	r3, [r4, #12]
 800a830:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a834:	81a3      	strh	r3, [r4, #12]
 800a836:	2300      	movs	r3, #0
 800a838:	6063      	str	r3, [r4, #4]
 800a83a:	6923      	ldr	r3, [r4, #16]
 800a83c:	6023      	str	r3, [r4, #0]
 800a83e:	89a3      	ldrh	r3, [r4, #12]
 800a840:	f043 0308 	orr.w	r3, r3, #8
 800a844:	81a3      	strh	r3, [r4, #12]
 800a846:	6923      	ldr	r3, [r4, #16]
 800a848:	b94b      	cbnz	r3, 800a85e <__swsetup_r+0x9a>
 800a84a:	89a3      	ldrh	r3, [r4, #12]
 800a84c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a854:	d003      	beq.n	800a85e <__swsetup_r+0x9a>
 800a856:	4621      	mov	r1, r4
 800a858:	4630      	mov	r0, r6
 800a85a:	f000 f9bf 	bl	800abdc <__smakebuf_r>
 800a85e:	89a2      	ldrh	r2, [r4, #12]
 800a860:	f012 0301 	ands.w	r3, r2, #1
 800a864:	d00c      	beq.n	800a880 <__swsetup_r+0xbc>
 800a866:	2300      	movs	r3, #0
 800a868:	60a3      	str	r3, [r4, #8]
 800a86a:	6963      	ldr	r3, [r4, #20]
 800a86c:	425b      	negs	r3, r3
 800a86e:	61a3      	str	r3, [r4, #24]
 800a870:	6923      	ldr	r3, [r4, #16]
 800a872:	b953      	cbnz	r3, 800a88a <__swsetup_r+0xc6>
 800a874:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a878:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a87c:	d1ba      	bne.n	800a7f4 <__swsetup_r+0x30>
 800a87e:	bd70      	pop	{r4, r5, r6, pc}
 800a880:	0792      	lsls	r2, r2, #30
 800a882:	bf58      	it	pl
 800a884:	6963      	ldrpl	r3, [r4, #20]
 800a886:	60a3      	str	r3, [r4, #8]
 800a888:	e7f2      	b.n	800a870 <__swsetup_r+0xac>
 800a88a:	2000      	movs	r0, #0
 800a88c:	e7f7      	b.n	800a87e <__swsetup_r+0xba>
 800a88e:	bf00      	nop
 800a890:	2400001c 	.word	0x2400001c
 800a894:	0800bce4 	.word	0x0800bce4
 800a898:	0800bd04 	.word	0x0800bd04
 800a89c:	0800bcc4 	.word	0x0800bcc4

0800a8a0 <__sflush_r>:
 800a8a0:	898a      	ldrh	r2, [r1, #12]
 800a8a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8a6:	4605      	mov	r5, r0
 800a8a8:	0710      	lsls	r0, r2, #28
 800a8aa:	460c      	mov	r4, r1
 800a8ac:	d458      	bmi.n	800a960 <__sflush_r+0xc0>
 800a8ae:	684b      	ldr	r3, [r1, #4]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	dc05      	bgt.n	800a8c0 <__sflush_r+0x20>
 800a8b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	dc02      	bgt.n	800a8c0 <__sflush_r+0x20>
 800a8ba:	2000      	movs	r0, #0
 800a8bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8c2:	2e00      	cmp	r6, #0
 800a8c4:	d0f9      	beq.n	800a8ba <__sflush_r+0x1a>
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a8cc:	682f      	ldr	r7, [r5, #0]
 800a8ce:	6a21      	ldr	r1, [r4, #32]
 800a8d0:	602b      	str	r3, [r5, #0]
 800a8d2:	d032      	beq.n	800a93a <__sflush_r+0x9a>
 800a8d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a8d6:	89a3      	ldrh	r3, [r4, #12]
 800a8d8:	075a      	lsls	r2, r3, #29
 800a8da:	d505      	bpl.n	800a8e8 <__sflush_r+0x48>
 800a8dc:	6863      	ldr	r3, [r4, #4]
 800a8de:	1ac0      	subs	r0, r0, r3
 800a8e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a8e2:	b10b      	cbz	r3, 800a8e8 <__sflush_r+0x48>
 800a8e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a8e6:	1ac0      	subs	r0, r0, r3
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8ee:	6a21      	ldr	r1, [r4, #32]
 800a8f0:	4628      	mov	r0, r5
 800a8f2:	47b0      	blx	r6
 800a8f4:	1c43      	adds	r3, r0, #1
 800a8f6:	89a3      	ldrh	r3, [r4, #12]
 800a8f8:	d106      	bne.n	800a908 <__sflush_r+0x68>
 800a8fa:	6829      	ldr	r1, [r5, #0]
 800a8fc:	291d      	cmp	r1, #29
 800a8fe:	d848      	bhi.n	800a992 <__sflush_r+0xf2>
 800a900:	4a29      	ldr	r2, [pc, #164]	; (800a9a8 <__sflush_r+0x108>)
 800a902:	40ca      	lsrs	r2, r1
 800a904:	07d6      	lsls	r6, r2, #31
 800a906:	d544      	bpl.n	800a992 <__sflush_r+0xf2>
 800a908:	2200      	movs	r2, #0
 800a90a:	6062      	str	r2, [r4, #4]
 800a90c:	04d9      	lsls	r1, r3, #19
 800a90e:	6922      	ldr	r2, [r4, #16]
 800a910:	6022      	str	r2, [r4, #0]
 800a912:	d504      	bpl.n	800a91e <__sflush_r+0x7e>
 800a914:	1c42      	adds	r2, r0, #1
 800a916:	d101      	bne.n	800a91c <__sflush_r+0x7c>
 800a918:	682b      	ldr	r3, [r5, #0]
 800a91a:	b903      	cbnz	r3, 800a91e <__sflush_r+0x7e>
 800a91c:	6560      	str	r0, [r4, #84]	; 0x54
 800a91e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a920:	602f      	str	r7, [r5, #0]
 800a922:	2900      	cmp	r1, #0
 800a924:	d0c9      	beq.n	800a8ba <__sflush_r+0x1a>
 800a926:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a92a:	4299      	cmp	r1, r3
 800a92c:	d002      	beq.n	800a934 <__sflush_r+0x94>
 800a92e:	4628      	mov	r0, r5
 800a930:	f7ff fdba 	bl	800a4a8 <_free_r>
 800a934:	2000      	movs	r0, #0
 800a936:	6360      	str	r0, [r4, #52]	; 0x34
 800a938:	e7c0      	b.n	800a8bc <__sflush_r+0x1c>
 800a93a:	2301      	movs	r3, #1
 800a93c:	4628      	mov	r0, r5
 800a93e:	47b0      	blx	r6
 800a940:	1c41      	adds	r1, r0, #1
 800a942:	d1c8      	bne.n	800a8d6 <__sflush_r+0x36>
 800a944:	682b      	ldr	r3, [r5, #0]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d0c5      	beq.n	800a8d6 <__sflush_r+0x36>
 800a94a:	2b1d      	cmp	r3, #29
 800a94c:	d001      	beq.n	800a952 <__sflush_r+0xb2>
 800a94e:	2b16      	cmp	r3, #22
 800a950:	d101      	bne.n	800a956 <__sflush_r+0xb6>
 800a952:	602f      	str	r7, [r5, #0]
 800a954:	e7b1      	b.n	800a8ba <__sflush_r+0x1a>
 800a956:	89a3      	ldrh	r3, [r4, #12]
 800a958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a95c:	81a3      	strh	r3, [r4, #12]
 800a95e:	e7ad      	b.n	800a8bc <__sflush_r+0x1c>
 800a960:	690f      	ldr	r7, [r1, #16]
 800a962:	2f00      	cmp	r7, #0
 800a964:	d0a9      	beq.n	800a8ba <__sflush_r+0x1a>
 800a966:	0793      	lsls	r3, r2, #30
 800a968:	680e      	ldr	r6, [r1, #0]
 800a96a:	bf08      	it	eq
 800a96c:	694b      	ldreq	r3, [r1, #20]
 800a96e:	600f      	str	r7, [r1, #0]
 800a970:	bf18      	it	ne
 800a972:	2300      	movne	r3, #0
 800a974:	eba6 0807 	sub.w	r8, r6, r7
 800a978:	608b      	str	r3, [r1, #8]
 800a97a:	f1b8 0f00 	cmp.w	r8, #0
 800a97e:	dd9c      	ble.n	800a8ba <__sflush_r+0x1a>
 800a980:	4643      	mov	r3, r8
 800a982:	463a      	mov	r2, r7
 800a984:	6a21      	ldr	r1, [r4, #32]
 800a986:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a988:	4628      	mov	r0, r5
 800a98a:	47b0      	blx	r6
 800a98c:	2800      	cmp	r0, #0
 800a98e:	dc06      	bgt.n	800a99e <__sflush_r+0xfe>
 800a990:	89a3      	ldrh	r3, [r4, #12]
 800a992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a996:	81a3      	strh	r3, [r4, #12]
 800a998:	f04f 30ff 	mov.w	r0, #4294967295
 800a99c:	e78e      	b.n	800a8bc <__sflush_r+0x1c>
 800a99e:	4407      	add	r7, r0
 800a9a0:	eba8 0800 	sub.w	r8, r8, r0
 800a9a4:	e7e9      	b.n	800a97a <__sflush_r+0xda>
 800a9a6:	bf00      	nop
 800a9a8:	20400001 	.word	0x20400001

0800a9ac <_fflush_r>:
 800a9ac:	b538      	push	{r3, r4, r5, lr}
 800a9ae:	690b      	ldr	r3, [r1, #16]
 800a9b0:	4605      	mov	r5, r0
 800a9b2:	460c      	mov	r4, r1
 800a9b4:	b1db      	cbz	r3, 800a9ee <_fflush_r+0x42>
 800a9b6:	b118      	cbz	r0, 800a9c0 <_fflush_r+0x14>
 800a9b8:	6983      	ldr	r3, [r0, #24]
 800a9ba:	b90b      	cbnz	r3, 800a9c0 <_fflush_r+0x14>
 800a9bc:	f000 f860 	bl	800aa80 <__sinit>
 800a9c0:	4b0c      	ldr	r3, [pc, #48]	; (800a9f4 <_fflush_r+0x48>)
 800a9c2:	429c      	cmp	r4, r3
 800a9c4:	d109      	bne.n	800a9da <_fflush_r+0x2e>
 800a9c6:	686c      	ldr	r4, [r5, #4]
 800a9c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9cc:	b17b      	cbz	r3, 800a9ee <_fflush_r+0x42>
 800a9ce:	4621      	mov	r1, r4
 800a9d0:	4628      	mov	r0, r5
 800a9d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9d6:	f7ff bf63 	b.w	800a8a0 <__sflush_r>
 800a9da:	4b07      	ldr	r3, [pc, #28]	; (800a9f8 <_fflush_r+0x4c>)
 800a9dc:	429c      	cmp	r4, r3
 800a9de:	d101      	bne.n	800a9e4 <_fflush_r+0x38>
 800a9e0:	68ac      	ldr	r4, [r5, #8]
 800a9e2:	e7f1      	b.n	800a9c8 <_fflush_r+0x1c>
 800a9e4:	4b05      	ldr	r3, [pc, #20]	; (800a9fc <_fflush_r+0x50>)
 800a9e6:	429c      	cmp	r4, r3
 800a9e8:	bf08      	it	eq
 800a9ea:	68ec      	ldreq	r4, [r5, #12]
 800a9ec:	e7ec      	b.n	800a9c8 <_fflush_r+0x1c>
 800a9ee:	2000      	movs	r0, #0
 800a9f0:	bd38      	pop	{r3, r4, r5, pc}
 800a9f2:	bf00      	nop
 800a9f4:	0800bce4 	.word	0x0800bce4
 800a9f8:	0800bd04 	.word	0x0800bd04
 800a9fc:	0800bcc4 	.word	0x0800bcc4

0800aa00 <std>:
 800aa00:	2300      	movs	r3, #0
 800aa02:	b510      	push	{r4, lr}
 800aa04:	4604      	mov	r4, r0
 800aa06:	e9c0 3300 	strd	r3, r3, [r0]
 800aa0a:	6083      	str	r3, [r0, #8]
 800aa0c:	8181      	strh	r1, [r0, #12]
 800aa0e:	6643      	str	r3, [r0, #100]	; 0x64
 800aa10:	81c2      	strh	r2, [r0, #14]
 800aa12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa16:	6183      	str	r3, [r0, #24]
 800aa18:	4619      	mov	r1, r3
 800aa1a:	2208      	movs	r2, #8
 800aa1c:	305c      	adds	r0, #92	; 0x5c
 800aa1e:	f7ff fd2d 	bl	800a47c <memset>
 800aa22:	4b05      	ldr	r3, [pc, #20]	; (800aa38 <std+0x38>)
 800aa24:	6263      	str	r3, [r4, #36]	; 0x24
 800aa26:	4b05      	ldr	r3, [pc, #20]	; (800aa3c <std+0x3c>)
 800aa28:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa2a:	4b05      	ldr	r3, [pc, #20]	; (800aa40 <std+0x40>)
 800aa2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa2e:	4b05      	ldr	r3, [pc, #20]	; (800aa44 <std+0x44>)
 800aa30:	6224      	str	r4, [r4, #32]
 800aa32:	6323      	str	r3, [r4, #48]	; 0x30
 800aa34:	bd10      	pop	{r4, pc}
 800aa36:	bf00      	nop
 800aa38:	0800b215 	.word	0x0800b215
 800aa3c:	0800b237 	.word	0x0800b237
 800aa40:	0800b26f 	.word	0x0800b26f
 800aa44:	0800b293 	.word	0x0800b293

0800aa48 <_cleanup_r>:
 800aa48:	4901      	ldr	r1, [pc, #4]	; (800aa50 <_cleanup_r+0x8>)
 800aa4a:	f000 b885 	b.w	800ab58 <_fwalk_reent>
 800aa4e:	bf00      	nop
 800aa50:	0800a9ad 	.word	0x0800a9ad

0800aa54 <__sfmoreglue>:
 800aa54:	b570      	push	{r4, r5, r6, lr}
 800aa56:	1e4a      	subs	r2, r1, #1
 800aa58:	2568      	movs	r5, #104	; 0x68
 800aa5a:	4355      	muls	r5, r2
 800aa5c:	460e      	mov	r6, r1
 800aa5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aa62:	f7ff fd6f 	bl	800a544 <_malloc_r>
 800aa66:	4604      	mov	r4, r0
 800aa68:	b140      	cbz	r0, 800aa7c <__sfmoreglue+0x28>
 800aa6a:	2100      	movs	r1, #0
 800aa6c:	e9c0 1600 	strd	r1, r6, [r0]
 800aa70:	300c      	adds	r0, #12
 800aa72:	60a0      	str	r0, [r4, #8]
 800aa74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aa78:	f7ff fd00 	bl	800a47c <memset>
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	bd70      	pop	{r4, r5, r6, pc}

0800aa80 <__sinit>:
 800aa80:	6983      	ldr	r3, [r0, #24]
 800aa82:	b510      	push	{r4, lr}
 800aa84:	4604      	mov	r4, r0
 800aa86:	bb33      	cbnz	r3, 800aad6 <__sinit+0x56>
 800aa88:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800aa8c:	6503      	str	r3, [r0, #80]	; 0x50
 800aa8e:	4b12      	ldr	r3, [pc, #72]	; (800aad8 <__sinit+0x58>)
 800aa90:	4a12      	ldr	r2, [pc, #72]	; (800aadc <__sinit+0x5c>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	6282      	str	r2, [r0, #40]	; 0x28
 800aa96:	4298      	cmp	r0, r3
 800aa98:	bf04      	itt	eq
 800aa9a:	2301      	moveq	r3, #1
 800aa9c:	6183      	streq	r3, [r0, #24]
 800aa9e:	f000 f81f 	bl	800aae0 <__sfp>
 800aaa2:	6060      	str	r0, [r4, #4]
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	f000 f81b 	bl	800aae0 <__sfp>
 800aaaa:	60a0      	str	r0, [r4, #8]
 800aaac:	4620      	mov	r0, r4
 800aaae:	f000 f817 	bl	800aae0 <__sfp>
 800aab2:	2200      	movs	r2, #0
 800aab4:	60e0      	str	r0, [r4, #12]
 800aab6:	2104      	movs	r1, #4
 800aab8:	6860      	ldr	r0, [r4, #4]
 800aaba:	f7ff ffa1 	bl	800aa00 <std>
 800aabe:	2201      	movs	r2, #1
 800aac0:	2109      	movs	r1, #9
 800aac2:	68a0      	ldr	r0, [r4, #8]
 800aac4:	f7ff ff9c 	bl	800aa00 <std>
 800aac8:	2202      	movs	r2, #2
 800aaca:	2112      	movs	r1, #18
 800aacc:	68e0      	ldr	r0, [r4, #12]
 800aace:	f7ff ff97 	bl	800aa00 <std>
 800aad2:	2301      	movs	r3, #1
 800aad4:	61a3      	str	r3, [r4, #24]
 800aad6:	bd10      	pop	{r4, pc}
 800aad8:	0800bcc0 	.word	0x0800bcc0
 800aadc:	0800aa49 	.word	0x0800aa49

0800aae0 <__sfp>:
 800aae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aae2:	4b1b      	ldr	r3, [pc, #108]	; (800ab50 <__sfp+0x70>)
 800aae4:	681e      	ldr	r6, [r3, #0]
 800aae6:	69b3      	ldr	r3, [r6, #24]
 800aae8:	4607      	mov	r7, r0
 800aaea:	b913      	cbnz	r3, 800aaf2 <__sfp+0x12>
 800aaec:	4630      	mov	r0, r6
 800aaee:	f7ff ffc7 	bl	800aa80 <__sinit>
 800aaf2:	3648      	adds	r6, #72	; 0x48
 800aaf4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aaf8:	3b01      	subs	r3, #1
 800aafa:	d503      	bpl.n	800ab04 <__sfp+0x24>
 800aafc:	6833      	ldr	r3, [r6, #0]
 800aafe:	b133      	cbz	r3, 800ab0e <__sfp+0x2e>
 800ab00:	6836      	ldr	r6, [r6, #0]
 800ab02:	e7f7      	b.n	800aaf4 <__sfp+0x14>
 800ab04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ab08:	b16d      	cbz	r5, 800ab26 <__sfp+0x46>
 800ab0a:	3468      	adds	r4, #104	; 0x68
 800ab0c:	e7f4      	b.n	800aaf8 <__sfp+0x18>
 800ab0e:	2104      	movs	r1, #4
 800ab10:	4638      	mov	r0, r7
 800ab12:	f7ff ff9f 	bl	800aa54 <__sfmoreglue>
 800ab16:	6030      	str	r0, [r6, #0]
 800ab18:	2800      	cmp	r0, #0
 800ab1a:	d1f1      	bne.n	800ab00 <__sfp+0x20>
 800ab1c:	230c      	movs	r3, #12
 800ab1e:	603b      	str	r3, [r7, #0]
 800ab20:	4604      	mov	r4, r0
 800ab22:	4620      	mov	r0, r4
 800ab24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab26:	4b0b      	ldr	r3, [pc, #44]	; (800ab54 <__sfp+0x74>)
 800ab28:	6665      	str	r5, [r4, #100]	; 0x64
 800ab2a:	e9c4 5500 	strd	r5, r5, [r4]
 800ab2e:	60a5      	str	r5, [r4, #8]
 800ab30:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ab34:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800ab38:	2208      	movs	r2, #8
 800ab3a:	4629      	mov	r1, r5
 800ab3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ab40:	f7ff fc9c 	bl	800a47c <memset>
 800ab44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ab48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ab4c:	e7e9      	b.n	800ab22 <__sfp+0x42>
 800ab4e:	bf00      	nop
 800ab50:	0800bcc0 	.word	0x0800bcc0
 800ab54:	ffff0001 	.word	0xffff0001

0800ab58 <_fwalk_reent>:
 800ab58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab5c:	4680      	mov	r8, r0
 800ab5e:	4689      	mov	r9, r1
 800ab60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ab64:	2600      	movs	r6, #0
 800ab66:	b914      	cbnz	r4, 800ab6e <_fwalk_reent+0x16>
 800ab68:	4630      	mov	r0, r6
 800ab6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab6e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800ab72:	3f01      	subs	r7, #1
 800ab74:	d501      	bpl.n	800ab7a <_fwalk_reent+0x22>
 800ab76:	6824      	ldr	r4, [r4, #0]
 800ab78:	e7f5      	b.n	800ab66 <_fwalk_reent+0xe>
 800ab7a:	89ab      	ldrh	r3, [r5, #12]
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d907      	bls.n	800ab90 <_fwalk_reent+0x38>
 800ab80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab84:	3301      	adds	r3, #1
 800ab86:	d003      	beq.n	800ab90 <_fwalk_reent+0x38>
 800ab88:	4629      	mov	r1, r5
 800ab8a:	4640      	mov	r0, r8
 800ab8c:	47c8      	blx	r9
 800ab8e:	4306      	orrs	r6, r0
 800ab90:	3568      	adds	r5, #104	; 0x68
 800ab92:	e7ee      	b.n	800ab72 <_fwalk_reent+0x1a>

0800ab94 <__swhatbuf_r>:
 800ab94:	b570      	push	{r4, r5, r6, lr}
 800ab96:	460e      	mov	r6, r1
 800ab98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab9c:	2900      	cmp	r1, #0
 800ab9e:	b096      	sub	sp, #88	; 0x58
 800aba0:	4614      	mov	r4, r2
 800aba2:	461d      	mov	r5, r3
 800aba4:	da07      	bge.n	800abb6 <__swhatbuf_r+0x22>
 800aba6:	2300      	movs	r3, #0
 800aba8:	602b      	str	r3, [r5, #0]
 800abaa:	89b3      	ldrh	r3, [r6, #12]
 800abac:	061a      	lsls	r2, r3, #24
 800abae:	d410      	bmi.n	800abd2 <__swhatbuf_r+0x3e>
 800abb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abb4:	e00e      	b.n	800abd4 <__swhatbuf_r+0x40>
 800abb6:	466a      	mov	r2, sp
 800abb8:	f000 fb92 	bl	800b2e0 <_fstat_r>
 800abbc:	2800      	cmp	r0, #0
 800abbe:	dbf2      	blt.n	800aba6 <__swhatbuf_r+0x12>
 800abc0:	9a01      	ldr	r2, [sp, #4]
 800abc2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800abc6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800abca:	425a      	negs	r2, r3
 800abcc:	415a      	adcs	r2, r3
 800abce:	602a      	str	r2, [r5, #0]
 800abd0:	e7ee      	b.n	800abb0 <__swhatbuf_r+0x1c>
 800abd2:	2340      	movs	r3, #64	; 0x40
 800abd4:	2000      	movs	r0, #0
 800abd6:	6023      	str	r3, [r4, #0]
 800abd8:	b016      	add	sp, #88	; 0x58
 800abda:	bd70      	pop	{r4, r5, r6, pc}

0800abdc <__smakebuf_r>:
 800abdc:	898b      	ldrh	r3, [r1, #12]
 800abde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800abe0:	079d      	lsls	r5, r3, #30
 800abe2:	4606      	mov	r6, r0
 800abe4:	460c      	mov	r4, r1
 800abe6:	d507      	bpl.n	800abf8 <__smakebuf_r+0x1c>
 800abe8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800abec:	6023      	str	r3, [r4, #0]
 800abee:	6123      	str	r3, [r4, #16]
 800abf0:	2301      	movs	r3, #1
 800abf2:	6163      	str	r3, [r4, #20]
 800abf4:	b002      	add	sp, #8
 800abf6:	bd70      	pop	{r4, r5, r6, pc}
 800abf8:	ab01      	add	r3, sp, #4
 800abfa:	466a      	mov	r2, sp
 800abfc:	f7ff ffca 	bl	800ab94 <__swhatbuf_r>
 800ac00:	9900      	ldr	r1, [sp, #0]
 800ac02:	4605      	mov	r5, r0
 800ac04:	4630      	mov	r0, r6
 800ac06:	f7ff fc9d 	bl	800a544 <_malloc_r>
 800ac0a:	b948      	cbnz	r0, 800ac20 <__smakebuf_r+0x44>
 800ac0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac10:	059a      	lsls	r2, r3, #22
 800ac12:	d4ef      	bmi.n	800abf4 <__smakebuf_r+0x18>
 800ac14:	f023 0303 	bic.w	r3, r3, #3
 800ac18:	f043 0302 	orr.w	r3, r3, #2
 800ac1c:	81a3      	strh	r3, [r4, #12]
 800ac1e:	e7e3      	b.n	800abe8 <__smakebuf_r+0xc>
 800ac20:	4b0d      	ldr	r3, [pc, #52]	; (800ac58 <__smakebuf_r+0x7c>)
 800ac22:	62b3      	str	r3, [r6, #40]	; 0x28
 800ac24:	89a3      	ldrh	r3, [r4, #12]
 800ac26:	6020      	str	r0, [r4, #0]
 800ac28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac2c:	81a3      	strh	r3, [r4, #12]
 800ac2e:	9b00      	ldr	r3, [sp, #0]
 800ac30:	6163      	str	r3, [r4, #20]
 800ac32:	9b01      	ldr	r3, [sp, #4]
 800ac34:	6120      	str	r0, [r4, #16]
 800ac36:	b15b      	cbz	r3, 800ac50 <__smakebuf_r+0x74>
 800ac38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac3c:	4630      	mov	r0, r6
 800ac3e:	f000 fb61 	bl	800b304 <_isatty_r>
 800ac42:	b128      	cbz	r0, 800ac50 <__smakebuf_r+0x74>
 800ac44:	89a3      	ldrh	r3, [r4, #12]
 800ac46:	f023 0303 	bic.w	r3, r3, #3
 800ac4a:	f043 0301 	orr.w	r3, r3, #1
 800ac4e:	81a3      	strh	r3, [r4, #12]
 800ac50:	89a3      	ldrh	r3, [r4, #12]
 800ac52:	431d      	orrs	r5, r3
 800ac54:	81a5      	strh	r5, [r4, #12]
 800ac56:	e7cd      	b.n	800abf4 <__smakebuf_r+0x18>
 800ac58:	0800aa49 	.word	0x0800aa49

0800ac5c <__malloc_lock>:
 800ac5c:	4770      	bx	lr

0800ac5e <__malloc_unlock>:
 800ac5e:	4770      	bx	lr

0800ac60 <__ssputs_r>:
 800ac60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac64:	688e      	ldr	r6, [r1, #8]
 800ac66:	429e      	cmp	r6, r3
 800ac68:	4682      	mov	sl, r0
 800ac6a:	460c      	mov	r4, r1
 800ac6c:	4690      	mov	r8, r2
 800ac6e:	4699      	mov	r9, r3
 800ac70:	d837      	bhi.n	800ace2 <__ssputs_r+0x82>
 800ac72:	898a      	ldrh	r2, [r1, #12]
 800ac74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac78:	d031      	beq.n	800acde <__ssputs_r+0x7e>
 800ac7a:	6825      	ldr	r5, [r4, #0]
 800ac7c:	6909      	ldr	r1, [r1, #16]
 800ac7e:	1a6f      	subs	r7, r5, r1
 800ac80:	6965      	ldr	r5, [r4, #20]
 800ac82:	2302      	movs	r3, #2
 800ac84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac88:	fb95 f5f3 	sdiv	r5, r5, r3
 800ac8c:	f109 0301 	add.w	r3, r9, #1
 800ac90:	443b      	add	r3, r7
 800ac92:	429d      	cmp	r5, r3
 800ac94:	bf38      	it	cc
 800ac96:	461d      	movcc	r5, r3
 800ac98:	0553      	lsls	r3, r2, #21
 800ac9a:	d530      	bpl.n	800acfe <__ssputs_r+0x9e>
 800ac9c:	4629      	mov	r1, r5
 800ac9e:	f7ff fc51 	bl	800a544 <_malloc_r>
 800aca2:	4606      	mov	r6, r0
 800aca4:	b950      	cbnz	r0, 800acbc <__ssputs_r+0x5c>
 800aca6:	230c      	movs	r3, #12
 800aca8:	f8ca 3000 	str.w	r3, [sl]
 800acac:	89a3      	ldrh	r3, [r4, #12]
 800acae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acb2:	81a3      	strh	r3, [r4, #12]
 800acb4:	f04f 30ff 	mov.w	r0, #4294967295
 800acb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acbc:	463a      	mov	r2, r7
 800acbe:	6921      	ldr	r1, [r4, #16]
 800acc0:	f000 fb42 	bl	800b348 <memcpy>
 800acc4:	89a3      	ldrh	r3, [r4, #12]
 800acc6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800acca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acce:	81a3      	strh	r3, [r4, #12]
 800acd0:	6126      	str	r6, [r4, #16]
 800acd2:	6165      	str	r5, [r4, #20]
 800acd4:	443e      	add	r6, r7
 800acd6:	1bed      	subs	r5, r5, r7
 800acd8:	6026      	str	r6, [r4, #0]
 800acda:	60a5      	str	r5, [r4, #8]
 800acdc:	464e      	mov	r6, r9
 800acde:	454e      	cmp	r6, r9
 800ace0:	d900      	bls.n	800ace4 <__ssputs_r+0x84>
 800ace2:	464e      	mov	r6, r9
 800ace4:	4632      	mov	r2, r6
 800ace6:	4641      	mov	r1, r8
 800ace8:	6820      	ldr	r0, [r4, #0]
 800acea:	f000 fb38 	bl	800b35e <memmove>
 800acee:	68a3      	ldr	r3, [r4, #8]
 800acf0:	1b9b      	subs	r3, r3, r6
 800acf2:	60a3      	str	r3, [r4, #8]
 800acf4:	6823      	ldr	r3, [r4, #0]
 800acf6:	441e      	add	r6, r3
 800acf8:	6026      	str	r6, [r4, #0]
 800acfa:	2000      	movs	r0, #0
 800acfc:	e7dc      	b.n	800acb8 <__ssputs_r+0x58>
 800acfe:	462a      	mov	r2, r5
 800ad00:	f000 fb46 	bl	800b390 <_realloc_r>
 800ad04:	4606      	mov	r6, r0
 800ad06:	2800      	cmp	r0, #0
 800ad08:	d1e2      	bne.n	800acd0 <__ssputs_r+0x70>
 800ad0a:	6921      	ldr	r1, [r4, #16]
 800ad0c:	4650      	mov	r0, sl
 800ad0e:	f7ff fbcb 	bl	800a4a8 <_free_r>
 800ad12:	e7c8      	b.n	800aca6 <__ssputs_r+0x46>

0800ad14 <_svfiprintf_r>:
 800ad14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad18:	461d      	mov	r5, r3
 800ad1a:	898b      	ldrh	r3, [r1, #12]
 800ad1c:	061f      	lsls	r7, r3, #24
 800ad1e:	b09d      	sub	sp, #116	; 0x74
 800ad20:	4680      	mov	r8, r0
 800ad22:	460c      	mov	r4, r1
 800ad24:	4616      	mov	r6, r2
 800ad26:	d50f      	bpl.n	800ad48 <_svfiprintf_r+0x34>
 800ad28:	690b      	ldr	r3, [r1, #16]
 800ad2a:	b96b      	cbnz	r3, 800ad48 <_svfiprintf_r+0x34>
 800ad2c:	2140      	movs	r1, #64	; 0x40
 800ad2e:	f7ff fc09 	bl	800a544 <_malloc_r>
 800ad32:	6020      	str	r0, [r4, #0]
 800ad34:	6120      	str	r0, [r4, #16]
 800ad36:	b928      	cbnz	r0, 800ad44 <_svfiprintf_r+0x30>
 800ad38:	230c      	movs	r3, #12
 800ad3a:	f8c8 3000 	str.w	r3, [r8]
 800ad3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad42:	e0c8      	b.n	800aed6 <_svfiprintf_r+0x1c2>
 800ad44:	2340      	movs	r3, #64	; 0x40
 800ad46:	6163      	str	r3, [r4, #20]
 800ad48:	2300      	movs	r3, #0
 800ad4a:	9309      	str	r3, [sp, #36]	; 0x24
 800ad4c:	2320      	movs	r3, #32
 800ad4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad52:	2330      	movs	r3, #48	; 0x30
 800ad54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad58:	9503      	str	r5, [sp, #12]
 800ad5a:	f04f 0b01 	mov.w	fp, #1
 800ad5e:	4637      	mov	r7, r6
 800ad60:	463d      	mov	r5, r7
 800ad62:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ad66:	b10b      	cbz	r3, 800ad6c <_svfiprintf_r+0x58>
 800ad68:	2b25      	cmp	r3, #37	; 0x25
 800ad6a:	d13e      	bne.n	800adea <_svfiprintf_r+0xd6>
 800ad6c:	ebb7 0a06 	subs.w	sl, r7, r6
 800ad70:	d00b      	beq.n	800ad8a <_svfiprintf_r+0x76>
 800ad72:	4653      	mov	r3, sl
 800ad74:	4632      	mov	r2, r6
 800ad76:	4621      	mov	r1, r4
 800ad78:	4640      	mov	r0, r8
 800ad7a:	f7ff ff71 	bl	800ac60 <__ssputs_r>
 800ad7e:	3001      	adds	r0, #1
 800ad80:	f000 80a4 	beq.w	800aecc <_svfiprintf_r+0x1b8>
 800ad84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad86:	4453      	add	r3, sl
 800ad88:	9309      	str	r3, [sp, #36]	; 0x24
 800ad8a:	783b      	ldrb	r3, [r7, #0]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	f000 809d 	beq.w	800aecc <_svfiprintf_r+0x1b8>
 800ad92:	2300      	movs	r3, #0
 800ad94:	f04f 32ff 	mov.w	r2, #4294967295
 800ad98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad9c:	9304      	str	r3, [sp, #16]
 800ad9e:	9307      	str	r3, [sp, #28]
 800ada0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ada4:	931a      	str	r3, [sp, #104]	; 0x68
 800ada6:	462f      	mov	r7, r5
 800ada8:	2205      	movs	r2, #5
 800adaa:	f817 1b01 	ldrb.w	r1, [r7], #1
 800adae:	4850      	ldr	r0, [pc, #320]	; (800aef0 <_svfiprintf_r+0x1dc>)
 800adb0:	f7f5 fa9e 	bl	80002f0 <memchr>
 800adb4:	9b04      	ldr	r3, [sp, #16]
 800adb6:	b9d0      	cbnz	r0, 800adee <_svfiprintf_r+0xda>
 800adb8:	06d9      	lsls	r1, r3, #27
 800adba:	bf44      	itt	mi
 800adbc:	2220      	movmi	r2, #32
 800adbe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800adc2:	071a      	lsls	r2, r3, #28
 800adc4:	bf44      	itt	mi
 800adc6:	222b      	movmi	r2, #43	; 0x2b
 800adc8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800adcc:	782a      	ldrb	r2, [r5, #0]
 800adce:	2a2a      	cmp	r2, #42	; 0x2a
 800add0:	d015      	beq.n	800adfe <_svfiprintf_r+0xea>
 800add2:	9a07      	ldr	r2, [sp, #28]
 800add4:	462f      	mov	r7, r5
 800add6:	2000      	movs	r0, #0
 800add8:	250a      	movs	r5, #10
 800adda:	4639      	mov	r1, r7
 800addc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ade0:	3b30      	subs	r3, #48	; 0x30
 800ade2:	2b09      	cmp	r3, #9
 800ade4:	d94d      	bls.n	800ae82 <_svfiprintf_r+0x16e>
 800ade6:	b1b8      	cbz	r0, 800ae18 <_svfiprintf_r+0x104>
 800ade8:	e00f      	b.n	800ae0a <_svfiprintf_r+0xf6>
 800adea:	462f      	mov	r7, r5
 800adec:	e7b8      	b.n	800ad60 <_svfiprintf_r+0x4c>
 800adee:	4a40      	ldr	r2, [pc, #256]	; (800aef0 <_svfiprintf_r+0x1dc>)
 800adf0:	1a80      	subs	r0, r0, r2
 800adf2:	fa0b f000 	lsl.w	r0, fp, r0
 800adf6:	4318      	orrs	r0, r3
 800adf8:	9004      	str	r0, [sp, #16]
 800adfa:	463d      	mov	r5, r7
 800adfc:	e7d3      	b.n	800ada6 <_svfiprintf_r+0x92>
 800adfe:	9a03      	ldr	r2, [sp, #12]
 800ae00:	1d11      	adds	r1, r2, #4
 800ae02:	6812      	ldr	r2, [r2, #0]
 800ae04:	9103      	str	r1, [sp, #12]
 800ae06:	2a00      	cmp	r2, #0
 800ae08:	db01      	blt.n	800ae0e <_svfiprintf_r+0xfa>
 800ae0a:	9207      	str	r2, [sp, #28]
 800ae0c:	e004      	b.n	800ae18 <_svfiprintf_r+0x104>
 800ae0e:	4252      	negs	r2, r2
 800ae10:	f043 0302 	orr.w	r3, r3, #2
 800ae14:	9207      	str	r2, [sp, #28]
 800ae16:	9304      	str	r3, [sp, #16]
 800ae18:	783b      	ldrb	r3, [r7, #0]
 800ae1a:	2b2e      	cmp	r3, #46	; 0x2e
 800ae1c:	d10c      	bne.n	800ae38 <_svfiprintf_r+0x124>
 800ae1e:	787b      	ldrb	r3, [r7, #1]
 800ae20:	2b2a      	cmp	r3, #42	; 0x2a
 800ae22:	d133      	bne.n	800ae8c <_svfiprintf_r+0x178>
 800ae24:	9b03      	ldr	r3, [sp, #12]
 800ae26:	1d1a      	adds	r2, r3, #4
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	9203      	str	r2, [sp, #12]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	bfb8      	it	lt
 800ae30:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae34:	3702      	adds	r7, #2
 800ae36:	9305      	str	r3, [sp, #20]
 800ae38:	4d2e      	ldr	r5, [pc, #184]	; (800aef4 <_svfiprintf_r+0x1e0>)
 800ae3a:	7839      	ldrb	r1, [r7, #0]
 800ae3c:	2203      	movs	r2, #3
 800ae3e:	4628      	mov	r0, r5
 800ae40:	f7f5 fa56 	bl	80002f0 <memchr>
 800ae44:	b138      	cbz	r0, 800ae56 <_svfiprintf_r+0x142>
 800ae46:	2340      	movs	r3, #64	; 0x40
 800ae48:	1b40      	subs	r0, r0, r5
 800ae4a:	fa03 f000 	lsl.w	r0, r3, r0
 800ae4e:	9b04      	ldr	r3, [sp, #16]
 800ae50:	4303      	orrs	r3, r0
 800ae52:	3701      	adds	r7, #1
 800ae54:	9304      	str	r3, [sp, #16]
 800ae56:	7839      	ldrb	r1, [r7, #0]
 800ae58:	4827      	ldr	r0, [pc, #156]	; (800aef8 <_svfiprintf_r+0x1e4>)
 800ae5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae5e:	2206      	movs	r2, #6
 800ae60:	1c7e      	adds	r6, r7, #1
 800ae62:	f7f5 fa45 	bl	80002f0 <memchr>
 800ae66:	2800      	cmp	r0, #0
 800ae68:	d038      	beq.n	800aedc <_svfiprintf_r+0x1c8>
 800ae6a:	4b24      	ldr	r3, [pc, #144]	; (800aefc <_svfiprintf_r+0x1e8>)
 800ae6c:	bb13      	cbnz	r3, 800aeb4 <_svfiprintf_r+0x1a0>
 800ae6e:	9b03      	ldr	r3, [sp, #12]
 800ae70:	3307      	adds	r3, #7
 800ae72:	f023 0307 	bic.w	r3, r3, #7
 800ae76:	3308      	adds	r3, #8
 800ae78:	9303      	str	r3, [sp, #12]
 800ae7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae7c:	444b      	add	r3, r9
 800ae7e:	9309      	str	r3, [sp, #36]	; 0x24
 800ae80:	e76d      	b.n	800ad5e <_svfiprintf_r+0x4a>
 800ae82:	fb05 3202 	mla	r2, r5, r2, r3
 800ae86:	2001      	movs	r0, #1
 800ae88:	460f      	mov	r7, r1
 800ae8a:	e7a6      	b.n	800adda <_svfiprintf_r+0xc6>
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	3701      	adds	r7, #1
 800ae90:	9305      	str	r3, [sp, #20]
 800ae92:	4619      	mov	r1, r3
 800ae94:	250a      	movs	r5, #10
 800ae96:	4638      	mov	r0, r7
 800ae98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae9c:	3a30      	subs	r2, #48	; 0x30
 800ae9e:	2a09      	cmp	r2, #9
 800aea0:	d903      	bls.n	800aeaa <_svfiprintf_r+0x196>
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d0c8      	beq.n	800ae38 <_svfiprintf_r+0x124>
 800aea6:	9105      	str	r1, [sp, #20]
 800aea8:	e7c6      	b.n	800ae38 <_svfiprintf_r+0x124>
 800aeaa:	fb05 2101 	mla	r1, r5, r1, r2
 800aeae:	2301      	movs	r3, #1
 800aeb0:	4607      	mov	r7, r0
 800aeb2:	e7f0      	b.n	800ae96 <_svfiprintf_r+0x182>
 800aeb4:	ab03      	add	r3, sp, #12
 800aeb6:	9300      	str	r3, [sp, #0]
 800aeb8:	4622      	mov	r2, r4
 800aeba:	4b11      	ldr	r3, [pc, #68]	; (800af00 <_svfiprintf_r+0x1ec>)
 800aebc:	a904      	add	r1, sp, #16
 800aebe:	4640      	mov	r0, r8
 800aec0:	f3af 8000 	nop.w
 800aec4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800aec8:	4681      	mov	r9, r0
 800aeca:	d1d6      	bne.n	800ae7a <_svfiprintf_r+0x166>
 800aecc:	89a3      	ldrh	r3, [r4, #12]
 800aece:	065b      	lsls	r3, r3, #25
 800aed0:	f53f af35 	bmi.w	800ad3e <_svfiprintf_r+0x2a>
 800aed4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aed6:	b01d      	add	sp, #116	; 0x74
 800aed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aedc:	ab03      	add	r3, sp, #12
 800aede:	9300      	str	r3, [sp, #0]
 800aee0:	4622      	mov	r2, r4
 800aee2:	4b07      	ldr	r3, [pc, #28]	; (800af00 <_svfiprintf_r+0x1ec>)
 800aee4:	a904      	add	r1, sp, #16
 800aee6:	4640      	mov	r0, r8
 800aee8:	f000 f882 	bl	800aff0 <_printf_i>
 800aeec:	e7ea      	b.n	800aec4 <_svfiprintf_r+0x1b0>
 800aeee:	bf00      	nop
 800aef0:	0800bd24 	.word	0x0800bd24
 800aef4:	0800bd2a 	.word	0x0800bd2a
 800aef8:	0800bd2e 	.word	0x0800bd2e
 800aefc:	00000000 	.word	0x00000000
 800af00:	0800ac61 	.word	0x0800ac61

0800af04 <_printf_common>:
 800af04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af08:	4691      	mov	r9, r2
 800af0a:	461f      	mov	r7, r3
 800af0c:	688a      	ldr	r2, [r1, #8]
 800af0e:	690b      	ldr	r3, [r1, #16]
 800af10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af14:	4293      	cmp	r3, r2
 800af16:	bfb8      	it	lt
 800af18:	4613      	movlt	r3, r2
 800af1a:	f8c9 3000 	str.w	r3, [r9]
 800af1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af22:	4606      	mov	r6, r0
 800af24:	460c      	mov	r4, r1
 800af26:	b112      	cbz	r2, 800af2e <_printf_common+0x2a>
 800af28:	3301      	adds	r3, #1
 800af2a:	f8c9 3000 	str.w	r3, [r9]
 800af2e:	6823      	ldr	r3, [r4, #0]
 800af30:	0699      	lsls	r1, r3, #26
 800af32:	bf42      	ittt	mi
 800af34:	f8d9 3000 	ldrmi.w	r3, [r9]
 800af38:	3302      	addmi	r3, #2
 800af3a:	f8c9 3000 	strmi.w	r3, [r9]
 800af3e:	6825      	ldr	r5, [r4, #0]
 800af40:	f015 0506 	ands.w	r5, r5, #6
 800af44:	d107      	bne.n	800af56 <_printf_common+0x52>
 800af46:	f104 0a19 	add.w	sl, r4, #25
 800af4a:	68e3      	ldr	r3, [r4, #12]
 800af4c:	f8d9 2000 	ldr.w	r2, [r9]
 800af50:	1a9b      	subs	r3, r3, r2
 800af52:	42ab      	cmp	r3, r5
 800af54:	dc28      	bgt.n	800afa8 <_printf_common+0xa4>
 800af56:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800af5a:	6822      	ldr	r2, [r4, #0]
 800af5c:	3300      	adds	r3, #0
 800af5e:	bf18      	it	ne
 800af60:	2301      	movne	r3, #1
 800af62:	0692      	lsls	r2, r2, #26
 800af64:	d42d      	bmi.n	800afc2 <_printf_common+0xbe>
 800af66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af6a:	4639      	mov	r1, r7
 800af6c:	4630      	mov	r0, r6
 800af6e:	47c0      	blx	r8
 800af70:	3001      	adds	r0, #1
 800af72:	d020      	beq.n	800afb6 <_printf_common+0xb2>
 800af74:	6823      	ldr	r3, [r4, #0]
 800af76:	68e5      	ldr	r5, [r4, #12]
 800af78:	f8d9 2000 	ldr.w	r2, [r9]
 800af7c:	f003 0306 	and.w	r3, r3, #6
 800af80:	2b04      	cmp	r3, #4
 800af82:	bf08      	it	eq
 800af84:	1aad      	subeq	r5, r5, r2
 800af86:	68a3      	ldr	r3, [r4, #8]
 800af88:	6922      	ldr	r2, [r4, #16]
 800af8a:	bf0c      	ite	eq
 800af8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af90:	2500      	movne	r5, #0
 800af92:	4293      	cmp	r3, r2
 800af94:	bfc4      	itt	gt
 800af96:	1a9b      	subgt	r3, r3, r2
 800af98:	18ed      	addgt	r5, r5, r3
 800af9a:	f04f 0900 	mov.w	r9, #0
 800af9e:	341a      	adds	r4, #26
 800afa0:	454d      	cmp	r5, r9
 800afa2:	d11a      	bne.n	800afda <_printf_common+0xd6>
 800afa4:	2000      	movs	r0, #0
 800afa6:	e008      	b.n	800afba <_printf_common+0xb6>
 800afa8:	2301      	movs	r3, #1
 800afaa:	4652      	mov	r2, sl
 800afac:	4639      	mov	r1, r7
 800afae:	4630      	mov	r0, r6
 800afb0:	47c0      	blx	r8
 800afb2:	3001      	adds	r0, #1
 800afb4:	d103      	bne.n	800afbe <_printf_common+0xba>
 800afb6:	f04f 30ff 	mov.w	r0, #4294967295
 800afba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afbe:	3501      	adds	r5, #1
 800afc0:	e7c3      	b.n	800af4a <_printf_common+0x46>
 800afc2:	18e1      	adds	r1, r4, r3
 800afc4:	1c5a      	adds	r2, r3, #1
 800afc6:	2030      	movs	r0, #48	; 0x30
 800afc8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800afcc:	4422      	add	r2, r4
 800afce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800afd2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800afd6:	3302      	adds	r3, #2
 800afd8:	e7c5      	b.n	800af66 <_printf_common+0x62>
 800afda:	2301      	movs	r3, #1
 800afdc:	4622      	mov	r2, r4
 800afde:	4639      	mov	r1, r7
 800afe0:	4630      	mov	r0, r6
 800afe2:	47c0      	blx	r8
 800afe4:	3001      	adds	r0, #1
 800afe6:	d0e6      	beq.n	800afb6 <_printf_common+0xb2>
 800afe8:	f109 0901 	add.w	r9, r9, #1
 800afec:	e7d8      	b.n	800afa0 <_printf_common+0x9c>
	...

0800aff0 <_printf_i>:
 800aff0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aff4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800aff8:	460c      	mov	r4, r1
 800affa:	7e09      	ldrb	r1, [r1, #24]
 800affc:	b085      	sub	sp, #20
 800affe:	296e      	cmp	r1, #110	; 0x6e
 800b000:	4617      	mov	r7, r2
 800b002:	4606      	mov	r6, r0
 800b004:	4698      	mov	r8, r3
 800b006:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b008:	f000 80b3 	beq.w	800b172 <_printf_i+0x182>
 800b00c:	d822      	bhi.n	800b054 <_printf_i+0x64>
 800b00e:	2963      	cmp	r1, #99	; 0x63
 800b010:	d036      	beq.n	800b080 <_printf_i+0x90>
 800b012:	d80a      	bhi.n	800b02a <_printf_i+0x3a>
 800b014:	2900      	cmp	r1, #0
 800b016:	f000 80b9 	beq.w	800b18c <_printf_i+0x19c>
 800b01a:	2958      	cmp	r1, #88	; 0x58
 800b01c:	f000 8083 	beq.w	800b126 <_printf_i+0x136>
 800b020:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b024:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b028:	e032      	b.n	800b090 <_printf_i+0xa0>
 800b02a:	2964      	cmp	r1, #100	; 0x64
 800b02c:	d001      	beq.n	800b032 <_printf_i+0x42>
 800b02e:	2969      	cmp	r1, #105	; 0x69
 800b030:	d1f6      	bne.n	800b020 <_printf_i+0x30>
 800b032:	6820      	ldr	r0, [r4, #0]
 800b034:	6813      	ldr	r3, [r2, #0]
 800b036:	0605      	lsls	r5, r0, #24
 800b038:	f103 0104 	add.w	r1, r3, #4
 800b03c:	d52a      	bpl.n	800b094 <_printf_i+0xa4>
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	6011      	str	r1, [r2, #0]
 800b042:	2b00      	cmp	r3, #0
 800b044:	da03      	bge.n	800b04e <_printf_i+0x5e>
 800b046:	222d      	movs	r2, #45	; 0x2d
 800b048:	425b      	negs	r3, r3
 800b04a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b04e:	486f      	ldr	r0, [pc, #444]	; (800b20c <_printf_i+0x21c>)
 800b050:	220a      	movs	r2, #10
 800b052:	e039      	b.n	800b0c8 <_printf_i+0xd8>
 800b054:	2973      	cmp	r1, #115	; 0x73
 800b056:	f000 809d 	beq.w	800b194 <_printf_i+0x1a4>
 800b05a:	d808      	bhi.n	800b06e <_printf_i+0x7e>
 800b05c:	296f      	cmp	r1, #111	; 0x6f
 800b05e:	d020      	beq.n	800b0a2 <_printf_i+0xb2>
 800b060:	2970      	cmp	r1, #112	; 0x70
 800b062:	d1dd      	bne.n	800b020 <_printf_i+0x30>
 800b064:	6823      	ldr	r3, [r4, #0]
 800b066:	f043 0320 	orr.w	r3, r3, #32
 800b06a:	6023      	str	r3, [r4, #0]
 800b06c:	e003      	b.n	800b076 <_printf_i+0x86>
 800b06e:	2975      	cmp	r1, #117	; 0x75
 800b070:	d017      	beq.n	800b0a2 <_printf_i+0xb2>
 800b072:	2978      	cmp	r1, #120	; 0x78
 800b074:	d1d4      	bne.n	800b020 <_printf_i+0x30>
 800b076:	2378      	movs	r3, #120	; 0x78
 800b078:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b07c:	4864      	ldr	r0, [pc, #400]	; (800b210 <_printf_i+0x220>)
 800b07e:	e055      	b.n	800b12c <_printf_i+0x13c>
 800b080:	6813      	ldr	r3, [r2, #0]
 800b082:	1d19      	adds	r1, r3, #4
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	6011      	str	r1, [r2, #0]
 800b088:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b08c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b090:	2301      	movs	r3, #1
 800b092:	e08c      	b.n	800b1ae <_printf_i+0x1be>
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	6011      	str	r1, [r2, #0]
 800b098:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b09c:	bf18      	it	ne
 800b09e:	b21b      	sxthne	r3, r3
 800b0a0:	e7cf      	b.n	800b042 <_printf_i+0x52>
 800b0a2:	6813      	ldr	r3, [r2, #0]
 800b0a4:	6825      	ldr	r5, [r4, #0]
 800b0a6:	1d18      	adds	r0, r3, #4
 800b0a8:	6010      	str	r0, [r2, #0]
 800b0aa:	0628      	lsls	r0, r5, #24
 800b0ac:	d501      	bpl.n	800b0b2 <_printf_i+0xc2>
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	e002      	b.n	800b0b8 <_printf_i+0xc8>
 800b0b2:	0668      	lsls	r0, r5, #25
 800b0b4:	d5fb      	bpl.n	800b0ae <_printf_i+0xbe>
 800b0b6:	881b      	ldrh	r3, [r3, #0]
 800b0b8:	4854      	ldr	r0, [pc, #336]	; (800b20c <_printf_i+0x21c>)
 800b0ba:	296f      	cmp	r1, #111	; 0x6f
 800b0bc:	bf14      	ite	ne
 800b0be:	220a      	movne	r2, #10
 800b0c0:	2208      	moveq	r2, #8
 800b0c2:	2100      	movs	r1, #0
 800b0c4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b0c8:	6865      	ldr	r5, [r4, #4]
 800b0ca:	60a5      	str	r5, [r4, #8]
 800b0cc:	2d00      	cmp	r5, #0
 800b0ce:	f2c0 8095 	blt.w	800b1fc <_printf_i+0x20c>
 800b0d2:	6821      	ldr	r1, [r4, #0]
 800b0d4:	f021 0104 	bic.w	r1, r1, #4
 800b0d8:	6021      	str	r1, [r4, #0]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d13d      	bne.n	800b15a <_printf_i+0x16a>
 800b0de:	2d00      	cmp	r5, #0
 800b0e0:	f040 808e 	bne.w	800b200 <_printf_i+0x210>
 800b0e4:	4665      	mov	r5, ip
 800b0e6:	2a08      	cmp	r2, #8
 800b0e8:	d10b      	bne.n	800b102 <_printf_i+0x112>
 800b0ea:	6823      	ldr	r3, [r4, #0]
 800b0ec:	07db      	lsls	r3, r3, #31
 800b0ee:	d508      	bpl.n	800b102 <_printf_i+0x112>
 800b0f0:	6923      	ldr	r3, [r4, #16]
 800b0f2:	6862      	ldr	r2, [r4, #4]
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	bfde      	ittt	le
 800b0f8:	2330      	movle	r3, #48	; 0x30
 800b0fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b0fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b102:	ebac 0305 	sub.w	r3, ip, r5
 800b106:	6123      	str	r3, [r4, #16]
 800b108:	f8cd 8000 	str.w	r8, [sp]
 800b10c:	463b      	mov	r3, r7
 800b10e:	aa03      	add	r2, sp, #12
 800b110:	4621      	mov	r1, r4
 800b112:	4630      	mov	r0, r6
 800b114:	f7ff fef6 	bl	800af04 <_printf_common>
 800b118:	3001      	adds	r0, #1
 800b11a:	d14d      	bne.n	800b1b8 <_printf_i+0x1c8>
 800b11c:	f04f 30ff 	mov.w	r0, #4294967295
 800b120:	b005      	add	sp, #20
 800b122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b126:	4839      	ldr	r0, [pc, #228]	; (800b20c <_printf_i+0x21c>)
 800b128:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b12c:	6813      	ldr	r3, [r2, #0]
 800b12e:	6821      	ldr	r1, [r4, #0]
 800b130:	1d1d      	adds	r5, r3, #4
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	6015      	str	r5, [r2, #0]
 800b136:	060a      	lsls	r2, r1, #24
 800b138:	d50b      	bpl.n	800b152 <_printf_i+0x162>
 800b13a:	07ca      	lsls	r2, r1, #31
 800b13c:	bf44      	itt	mi
 800b13e:	f041 0120 	orrmi.w	r1, r1, #32
 800b142:	6021      	strmi	r1, [r4, #0]
 800b144:	b91b      	cbnz	r3, 800b14e <_printf_i+0x15e>
 800b146:	6822      	ldr	r2, [r4, #0]
 800b148:	f022 0220 	bic.w	r2, r2, #32
 800b14c:	6022      	str	r2, [r4, #0]
 800b14e:	2210      	movs	r2, #16
 800b150:	e7b7      	b.n	800b0c2 <_printf_i+0xd2>
 800b152:	064d      	lsls	r5, r1, #25
 800b154:	bf48      	it	mi
 800b156:	b29b      	uxthmi	r3, r3
 800b158:	e7ef      	b.n	800b13a <_printf_i+0x14a>
 800b15a:	4665      	mov	r5, ip
 800b15c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b160:	fb02 3311 	mls	r3, r2, r1, r3
 800b164:	5cc3      	ldrb	r3, [r0, r3]
 800b166:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b16a:	460b      	mov	r3, r1
 800b16c:	2900      	cmp	r1, #0
 800b16e:	d1f5      	bne.n	800b15c <_printf_i+0x16c>
 800b170:	e7b9      	b.n	800b0e6 <_printf_i+0xf6>
 800b172:	6813      	ldr	r3, [r2, #0]
 800b174:	6825      	ldr	r5, [r4, #0]
 800b176:	6961      	ldr	r1, [r4, #20]
 800b178:	1d18      	adds	r0, r3, #4
 800b17a:	6010      	str	r0, [r2, #0]
 800b17c:	0628      	lsls	r0, r5, #24
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	d501      	bpl.n	800b186 <_printf_i+0x196>
 800b182:	6019      	str	r1, [r3, #0]
 800b184:	e002      	b.n	800b18c <_printf_i+0x19c>
 800b186:	066a      	lsls	r2, r5, #25
 800b188:	d5fb      	bpl.n	800b182 <_printf_i+0x192>
 800b18a:	8019      	strh	r1, [r3, #0]
 800b18c:	2300      	movs	r3, #0
 800b18e:	6123      	str	r3, [r4, #16]
 800b190:	4665      	mov	r5, ip
 800b192:	e7b9      	b.n	800b108 <_printf_i+0x118>
 800b194:	6813      	ldr	r3, [r2, #0]
 800b196:	1d19      	adds	r1, r3, #4
 800b198:	6011      	str	r1, [r2, #0]
 800b19a:	681d      	ldr	r5, [r3, #0]
 800b19c:	6862      	ldr	r2, [r4, #4]
 800b19e:	2100      	movs	r1, #0
 800b1a0:	4628      	mov	r0, r5
 800b1a2:	f7f5 f8a5 	bl	80002f0 <memchr>
 800b1a6:	b108      	cbz	r0, 800b1ac <_printf_i+0x1bc>
 800b1a8:	1b40      	subs	r0, r0, r5
 800b1aa:	6060      	str	r0, [r4, #4]
 800b1ac:	6863      	ldr	r3, [r4, #4]
 800b1ae:	6123      	str	r3, [r4, #16]
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1b6:	e7a7      	b.n	800b108 <_printf_i+0x118>
 800b1b8:	6923      	ldr	r3, [r4, #16]
 800b1ba:	462a      	mov	r2, r5
 800b1bc:	4639      	mov	r1, r7
 800b1be:	4630      	mov	r0, r6
 800b1c0:	47c0      	blx	r8
 800b1c2:	3001      	adds	r0, #1
 800b1c4:	d0aa      	beq.n	800b11c <_printf_i+0x12c>
 800b1c6:	6823      	ldr	r3, [r4, #0]
 800b1c8:	079b      	lsls	r3, r3, #30
 800b1ca:	d413      	bmi.n	800b1f4 <_printf_i+0x204>
 800b1cc:	68e0      	ldr	r0, [r4, #12]
 800b1ce:	9b03      	ldr	r3, [sp, #12]
 800b1d0:	4298      	cmp	r0, r3
 800b1d2:	bfb8      	it	lt
 800b1d4:	4618      	movlt	r0, r3
 800b1d6:	e7a3      	b.n	800b120 <_printf_i+0x130>
 800b1d8:	2301      	movs	r3, #1
 800b1da:	464a      	mov	r2, r9
 800b1dc:	4639      	mov	r1, r7
 800b1de:	4630      	mov	r0, r6
 800b1e0:	47c0      	blx	r8
 800b1e2:	3001      	adds	r0, #1
 800b1e4:	d09a      	beq.n	800b11c <_printf_i+0x12c>
 800b1e6:	3501      	adds	r5, #1
 800b1e8:	68e3      	ldr	r3, [r4, #12]
 800b1ea:	9a03      	ldr	r2, [sp, #12]
 800b1ec:	1a9b      	subs	r3, r3, r2
 800b1ee:	42ab      	cmp	r3, r5
 800b1f0:	dcf2      	bgt.n	800b1d8 <_printf_i+0x1e8>
 800b1f2:	e7eb      	b.n	800b1cc <_printf_i+0x1dc>
 800b1f4:	2500      	movs	r5, #0
 800b1f6:	f104 0919 	add.w	r9, r4, #25
 800b1fa:	e7f5      	b.n	800b1e8 <_printf_i+0x1f8>
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d1ac      	bne.n	800b15a <_printf_i+0x16a>
 800b200:	7803      	ldrb	r3, [r0, #0]
 800b202:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b206:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b20a:	e76c      	b.n	800b0e6 <_printf_i+0xf6>
 800b20c:	0800bd35 	.word	0x0800bd35
 800b210:	0800bd46 	.word	0x0800bd46

0800b214 <__sread>:
 800b214:	b510      	push	{r4, lr}
 800b216:	460c      	mov	r4, r1
 800b218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b21c:	f000 f8de 	bl	800b3dc <_read_r>
 800b220:	2800      	cmp	r0, #0
 800b222:	bfab      	itete	ge
 800b224:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b226:	89a3      	ldrhlt	r3, [r4, #12]
 800b228:	181b      	addge	r3, r3, r0
 800b22a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b22e:	bfac      	ite	ge
 800b230:	6563      	strge	r3, [r4, #84]	; 0x54
 800b232:	81a3      	strhlt	r3, [r4, #12]
 800b234:	bd10      	pop	{r4, pc}

0800b236 <__swrite>:
 800b236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b23a:	461f      	mov	r7, r3
 800b23c:	898b      	ldrh	r3, [r1, #12]
 800b23e:	05db      	lsls	r3, r3, #23
 800b240:	4605      	mov	r5, r0
 800b242:	460c      	mov	r4, r1
 800b244:	4616      	mov	r6, r2
 800b246:	d505      	bpl.n	800b254 <__swrite+0x1e>
 800b248:	2302      	movs	r3, #2
 800b24a:	2200      	movs	r2, #0
 800b24c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b250:	f000 f868 	bl	800b324 <_lseek_r>
 800b254:	89a3      	ldrh	r3, [r4, #12]
 800b256:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b25a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b25e:	81a3      	strh	r3, [r4, #12]
 800b260:	4632      	mov	r2, r6
 800b262:	463b      	mov	r3, r7
 800b264:	4628      	mov	r0, r5
 800b266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b26a:	f000 b817 	b.w	800b29c <_write_r>

0800b26e <__sseek>:
 800b26e:	b510      	push	{r4, lr}
 800b270:	460c      	mov	r4, r1
 800b272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b276:	f000 f855 	bl	800b324 <_lseek_r>
 800b27a:	1c43      	adds	r3, r0, #1
 800b27c:	89a3      	ldrh	r3, [r4, #12]
 800b27e:	bf15      	itete	ne
 800b280:	6560      	strne	r0, [r4, #84]	; 0x54
 800b282:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b286:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b28a:	81a3      	strheq	r3, [r4, #12]
 800b28c:	bf18      	it	ne
 800b28e:	81a3      	strhne	r3, [r4, #12]
 800b290:	bd10      	pop	{r4, pc}

0800b292 <__sclose>:
 800b292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b296:	f000 b813 	b.w	800b2c0 <_close_r>
	...

0800b29c <_write_r>:
 800b29c:	b538      	push	{r3, r4, r5, lr}
 800b29e:	4c07      	ldr	r4, [pc, #28]	; (800b2bc <_write_r+0x20>)
 800b2a0:	4605      	mov	r5, r0
 800b2a2:	4608      	mov	r0, r1
 800b2a4:	4611      	mov	r1, r2
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	6022      	str	r2, [r4, #0]
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	f7f6 fb53 	bl	8001956 <_write>
 800b2b0:	1c43      	adds	r3, r0, #1
 800b2b2:	d102      	bne.n	800b2ba <_write_r+0x1e>
 800b2b4:	6823      	ldr	r3, [r4, #0]
 800b2b6:	b103      	cbz	r3, 800b2ba <_write_r+0x1e>
 800b2b8:	602b      	str	r3, [r5, #0]
 800b2ba:	bd38      	pop	{r3, r4, r5, pc}
 800b2bc:	240003e4 	.word	0x240003e4

0800b2c0 <_close_r>:
 800b2c0:	b538      	push	{r3, r4, r5, lr}
 800b2c2:	4c06      	ldr	r4, [pc, #24]	; (800b2dc <_close_r+0x1c>)
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	4605      	mov	r5, r0
 800b2c8:	4608      	mov	r0, r1
 800b2ca:	6023      	str	r3, [r4, #0]
 800b2cc:	f7f6 fb5f 	bl	800198e <_close>
 800b2d0:	1c43      	adds	r3, r0, #1
 800b2d2:	d102      	bne.n	800b2da <_close_r+0x1a>
 800b2d4:	6823      	ldr	r3, [r4, #0]
 800b2d6:	b103      	cbz	r3, 800b2da <_close_r+0x1a>
 800b2d8:	602b      	str	r3, [r5, #0]
 800b2da:	bd38      	pop	{r3, r4, r5, pc}
 800b2dc:	240003e4 	.word	0x240003e4

0800b2e0 <_fstat_r>:
 800b2e0:	b538      	push	{r3, r4, r5, lr}
 800b2e2:	4c07      	ldr	r4, [pc, #28]	; (800b300 <_fstat_r+0x20>)
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	4605      	mov	r5, r0
 800b2e8:	4608      	mov	r0, r1
 800b2ea:	4611      	mov	r1, r2
 800b2ec:	6023      	str	r3, [r4, #0]
 800b2ee:	f7f6 fb5a 	bl	80019a6 <_fstat>
 800b2f2:	1c43      	adds	r3, r0, #1
 800b2f4:	d102      	bne.n	800b2fc <_fstat_r+0x1c>
 800b2f6:	6823      	ldr	r3, [r4, #0]
 800b2f8:	b103      	cbz	r3, 800b2fc <_fstat_r+0x1c>
 800b2fa:	602b      	str	r3, [r5, #0]
 800b2fc:	bd38      	pop	{r3, r4, r5, pc}
 800b2fe:	bf00      	nop
 800b300:	240003e4 	.word	0x240003e4

0800b304 <_isatty_r>:
 800b304:	b538      	push	{r3, r4, r5, lr}
 800b306:	4c06      	ldr	r4, [pc, #24]	; (800b320 <_isatty_r+0x1c>)
 800b308:	2300      	movs	r3, #0
 800b30a:	4605      	mov	r5, r0
 800b30c:	4608      	mov	r0, r1
 800b30e:	6023      	str	r3, [r4, #0]
 800b310:	f7f6 fb59 	bl	80019c6 <_isatty>
 800b314:	1c43      	adds	r3, r0, #1
 800b316:	d102      	bne.n	800b31e <_isatty_r+0x1a>
 800b318:	6823      	ldr	r3, [r4, #0]
 800b31a:	b103      	cbz	r3, 800b31e <_isatty_r+0x1a>
 800b31c:	602b      	str	r3, [r5, #0]
 800b31e:	bd38      	pop	{r3, r4, r5, pc}
 800b320:	240003e4 	.word	0x240003e4

0800b324 <_lseek_r>:
 800b324:	b538      	push	{r3, r4, r5, lr}
 800b326:	4c07      	ldr	r4, [pc, #28]	; (800b344 <_lseek_r+0x20>)
 800b328:	4605      	mov	r5, r0
 800b32a:	4608      	mov	r0, r1
 800b32c:	4611      	mov	r1, r2
 800b32e:	2200      	movs	r2, #0
 800b330:	6022      	str	r2, [r4, #0]
 800b332:	461a      	mov	r2, r3
 800b334:	f7f6 fb52 	bl	80019dc <_lseek>
 800b338:	1c43      	adds	r3, r0, #1
 800b33a:	d102      	bne.n	800b342 <_lseek_r+0x1e>
 800b33c:	6823      	ldr	r3, [r4, #0]
 800b33e:	b103      	cbz	r3, 800b342 <_lseek_r+0x1e>
 800b340:	602b      	str	r3, [r5, #0]
 800b342:	bd38      	pop	{r3, r4, r5, pc}
 800b344:	240003e4 	.word	0x240003e4

0800b348 <memcpy>:
 800b348:	b510      	push	{r4, lr}
 800b34a:	1e43      	subs	r3, r0, #1
 800b34c:	440a      	add	r2, r1
 800b34e:	4291      	cmp	r1, r2
 800b350:	d100      	bne.n	800b354 <memcpy+0xc>
 800b352:	bd10      	pop	{r4, pc}
 800b354:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b358:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b35c:	e7f7      	b.n	800b34e <memcpy+0x6>

0800b35e <memmove>:
 800b35e:	4288      	cmp	r0, r1
 800b360:	b510      	push	{r4, lr}
 800b362:	eb01 0302 	add.w	r3, r1, r2
 800b366:	d807      	bhi.n	800b378 <memmove+0x1a>
 800b368:	1e42      	subs	r2, r0, #1
 800b36a:	4299      	cmp	r1, r3
 800b36c:	d00a      	beq.n	800b384 <memmove+0x26>
 800b36e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b372:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b376:	e7f8      	b.n	800b36a <memmove+0xc>
 800b378:	4283      	cmp	r3, r0
 800b37a:	d9f5      	bls.n	800b368 <memmove+0xa>
 800b37c:	1881      	adds	r1, r0, r2
 800b37e:	1ad2      	subs	r2, r2, r3
 800b380:	42d3      	cmn	r3, r2
 800b382:	d100      	bne.n	800b386 <memmove+0x28>
 800b384:	bd10      	pop	{r4, pc}
 800b386:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b38a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b38e:	e7f7      	b.n	800b380 <memmove+0x22>

0800b390 <_realloc_r>:
 800b390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b392:	4607      	mov	r7, r0
 800b394:	4614      	mov	r4, r2
 800b396:	460e      	mov	r6, r1
 800b398:	b921      	cbnz	r1, 800b3a4 <_realloc_r+0x14>
 800b39a:	4611      	mov	r1, r2
 800b39c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b3a0:	f7ff b8d0 	b.w	800a544 <_malloc_r>
 800b3a4:	b922      	cbnz	r2, 800b3b0 <_realloc_r+0x20>
 800b3a6:	f7ff f87f 	bl	800a4a8 <_free_r>
 800b3aa:	4625      	mov	r5, r4
 800b3ac:	4628      	mov	r0, r5
 800b3ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3b0:	f000 f826 	bl	800b400 <_malloc_usable_size_r>
 800b3b4:	42a0      	cmp	r0, r4
 800b3b6:	d20f      	bcs.n	800b3d8 <_realloc_r+0x48>
 800b3b8:	4621      	mov	r1, r4
 800b3ba:	4638      	mov	r0, r7
 800b3bc:	f7ff f8c2 	bl	800a544 <_malloc_r>
 800b3c0:	4605      	mov	r5, r0
 800b3c2:	2800      	cmp	r0, #0
 800b3c4:	d0f2      	beq.n	800b3ac <_realloc_r+0x1c>
 800b3c6:	4631      	mov	r1, r6
 800b3c8:	4622      	mov	r2, r4
 800b3ca:	f7ff ffbd 	bl	800b348 <memcpy>
 800b3ce:	4631      	mov	r1, r6
 800b3d0:	4638      	mov	r0, r7
 800b3d2:	f7ff f869 	bl	800a4a8 <_free_r>
 800b3d6:	e7e9      	b.n	800b3ac <_realloc_r+0x1c>
 800b3d8:	4635      	mov	r5, r6
 800b3da:	e7e7      	b.n	800b3ac <_realloc_r+0x1c>

0800b3dc <_read_r>:
 800b3dc:	b538      	push	{r3, r4, r5, lr}
 800b3de:	4c07      	ldr	r4, [pc, #28]	; (800b3fc <_read_r+0x20>)
 800b3e0:	4605      	mov	r5, r0
 800b3e2:	4608      	mov	r0, r1
 800b3e4:	4611      	mov	r1, r2
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	6022      	str	r2, [r4, #0]
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	f7f6 fa96 	bl	800191c <_read>
 800b3f0:	1c43      	adds	r3, r0, #1
 800b3f2:	d102      	bne.n	800b3fa <_read_r+0x1e>
 800b3f4:	6823      	ldr	r3, [r4, #0]
 800b3f6:	b103      	cbz	r3, 800b3fa <_read_r+0x1e>
 800b3f8:	602b      	str	r3, [r5, #0]
 800b3fa:	bd38      	pop	{r3, r4, r5, pc}
 800b3fc:	240003e4 	.word	0x240003e4

0800b400 <_malloc_usable_size_r>:
 800b400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b404:	1f18      	subs	r0, r3, #4
 800b406:	2b00      	cmp	r3, #0
 800b408:	bfbc      	itt	lt
 800b40a:	580b      	ldrlt	r3, [r1, r0]
 800b40c:	18c0      	addlt	r0, r0, r3
 800b40e:	4770      	bx	lr

0800b410 <_init>:
 800b410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b412:	bf00      	nop
 800b414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b416:	bc08      	pop	{r3}
 800b418:	469e      	mov	lr, r3
 800b41a:	4770      	bx	lr

0800b41c <_fini>:
 800b41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b41e:	bf00      	nop
 800b420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b422:	bc08      	pop	{r3}
 800b424:	469e      	mov	lr, r3
 800b426:	4770      	bx	lr
