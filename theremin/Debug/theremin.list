
theremin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088bc  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008b68  08008b68  00018b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ba8  08008ba8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008ba8  08008ba8  00018ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bb0  08008bb0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bb0  08008bb0  00018bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bb4  08008bb4  00018bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08008bb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002188  24000010  08008bc8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24002198  08008bc8  00022198  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019670  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028b4  00000000  00000000  000396ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ed0  00000000  00000000  0003bf68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dd8  00000000  00000000  0003ce38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002f60e  00000000  00000000  0003dc10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d88d  00000000  00000000  0006d21e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00146da5  00000000  00000000  0007aaab  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c1850  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ed0  00000000  00000000  001c18cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08008b50 	.word	0x08008b50

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08008b50 	.word	0x08008b50

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b972 	b.w	80005e8 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9e08      	ldr	r6, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	4688      	mov	r8, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d14b      	bne.n	80003c2 <__udivmoddi4+0xa6>
 800032a:	428a      	cmp	r2, r1
 800032c:	4615      	mov	r5, r2
 800032e:	d967      	bls.n	8000400 <__udivmoddi4+0xe4>
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	b14a      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000336:	f1c2 0720 	rsb	r7, r2, #32
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	fa20 f707 	lsr.w	r7, r0, r7
 8000342:	4095      	lsls	r5, r2
 8000344:	ea47 0803 	orr.w	r8, r7, r3
 8000348:	4094      	lsls	r4, r2
 800034a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800034e:	0c23      	lsrs	r3, r4, #16
 8000350:	fbb8 f7fe 	udiv	r7, r8, lr
 8000354:	fa1f fc85 	uxth.w	ip, r5
 8000358:	fb0e 8817 	mls	r8, lr, r7, r8
 800035c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000360:	fb07 f10c 	mul.w	r1, r7, ip
 8000364:	4299      	cmp	r1, r3
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x60>
 8000368:	18eb      	adds	r3, r5, r3
 800036a:	f107 30ff 	add.w	r0, r7, #4294967295
 800036e:	f080 811b 	bcs.w	80005a8 <__udivmoddi4+0x28c>
 8000372:	4299      	cmp	r1, r3
 8000374:	f240 8118 	bls.w	80005a8 <__udivmoddi4+0x28c>
 8000378:	3f02      	subs	r7, #2
 800037a:	442b      	add	r3, r5
 800037c:	1a5b      	subs	r3, r3, r1
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb3 f0fe 	udiv	r0, r3, lr
 8000384:	fb0e 3310 	mls	r3, lr, r0, r3
 8000388:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000390:	45a4      	cmp	ip, r4
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x8c>
 8000394:	192c      	adds	r4, r5, r4
 8000396:	f100 33ff 	add.w	r3, r0, #4294967295
 800039a:	f080 8107 	bcs.w	80005ac <__udivmoddi4+0x290>
 800039e:	45a4      	cmp	ip, r4
 80003a0:	f240 8104 	bls.w	80005ac <__udivmoddi4+0x290>
 80003a4:	3802      	subs	r0, #2
 80003a6:	442c      	add	r4, r5
 80003a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003ac:	eba4 040c 	sub.w	r4, r4, ip
 80003b0:	2700      	movs	r7, #0
 80003b2:	b11e      	cbz	r6, 80003bc <__udivmoddi4+0xa0>
 80003b4:	40d4      	lsrs	r4, r2
 80003b6:	2300      	movs	r3, #0
 80003b8:	e9c6 4300 	strd	r4, r3, [r6]
 80003bc:	4639      	mov	r1, r7
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d909      	bls.n	80003da <__udivmoddi4+0xbe>
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f000 80eb 	beq.w	80005a2 <__udivmoddi4+0x286>
 80003cc:	2700      	movs	r7, #0
 80003ce:	e9c6 0100 	strd	r0, r1, [r6]
 80003d2:	4638      	mov	r0, r7
 80003d4:	4639      	mov	r1, r7
 80003d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003da:	fab3 f783 	clz	r7, r3
 80003de:	2f00      	cmp	r7, #0
 80003e0:	d147      	bne.n	8000472 <__udivmoddi4+0x156>
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xd0>
 80003e6:	4282      	cmp	r2, r0
 80003e8:	f200 80fa 	bhi.w	80005e0 <__udivmoddi4+0x2c4>
 80003ec:	1a84      	subs	r4, r0, r2
 80003ee:	eb61 0303 	sbc.w	r3, r1, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	4698      	mov	r8, r3
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	d0e0      	beq.n	80003bc <__udivmoddi4+0xa0>
 80003fa:	e9c6 4800 	strd	r4, r8, [r6]
 80003fe:	e7dd      	b.n	80003bc <__udivmoddi4+0xa0>
 8000400:	b902      	cbnz	r2, 8000404 <__udivmoddi4+0xe8>
 8000402:	deff      	udf	#255	; 0xff
 8000404:	fab2 f282 	clz	r2, r2
 8000408:	2a00      	cmp	r2, #0
 800040a:	f040 808f 	bne.w	800052c <__udivmoddi4+0x210>
 800040e:	1b49      	subs	r1, r1, r5
 8000410:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000414:	fa1f f885 	uxth.w	r8, r5
 8000418:	2701      	movs	r7, #1
 800041a:	fbb1 fcfe 	udiv	ip, r1, lr
 800041e:	0c23      	lsrs	r3, r4, #16
 8000420:	fb0e 111c 	mls	r1, lr, ip, r1
 8000424:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000428:	fb08 f10c 	mul.w	r1, r8, ip
 800042c:	4299      	cmp	r1, r3
 800042e:	d907      	bls.n	8000440 <__udivmoddi4+0x124>
 8000430:	18eb      	adds	r3, r5, r3
 8000432:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000436:	d202      	bcs.n	800043e <__udivmoddi4+0x122>
 8000438:	4299      	cmp	r1, r3
 800043a:	f200 80cd 	bhi.w	80005d8 <__udivmoddi4+0x2bc>
 800043e:	4684      	mov	ip, r0
 8000440:	1a59      	subs	r1, r3, r1
 8000442:	b2a3      	uxth	r3, r4
 8000444:	fbb1 f0fe 	udiv	r0, r1, lr
 8000448:	fb0e 1410 	mls	r4, lr, r0, r1
 800044c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000450:	fb08 f800 	mul.w	r8, r8, r0
 8000454:	45a0      	cmp	r8, r4
 8000456:	d907      	bls.n	8000468 <__udivmoddi4+0x14c>
 8000458:	192c      	adds	r4, r5, r4
 800045a:	f100 33ff 	add.w	r3, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x14a>
 8000460:	45a0      	cmp	r8, r4
 8000462:	f200 80b6 	bhi.w	80005d2 <__udivmoddi4+0x2b6>
 8000466:	4618      	mov	r0, r3
 8000468:	eba4 0408 	sub.w	r4, r4, r8
 800046c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000470:	e79f      	b.n	80003b2 <__udivmoddi4+0x96>
 8000472:	f1c7 0c20 	rsb	ip, r7, #32
 8000476:	40bb      	lsls	r3, r7
 8000478:	fa22 fe0c 	lsr.w	lr, r2, ip
 800047c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000480:	fa01 f407 	lsl.w	r4, r1, r7
 8000484:	fa20 f50c 	lsr.w	r5, r0, ip
 8000488:	fa21 f30c 	lsr.w	r3, r1, ip
 800048c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000490:	4325      	orrs	r5, r4
 8000492:	fbb3 f9f8 	udiv	r9, r3, r8
 8000496:	0c2c      	lsrs	r4, r5, #16
 8000498:	fb08 3319 	mls	r3, r8, r9, r3
 800049c:	fa1f fa8e 	uxth.w	sl, lr
 80004a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a4:	fb09 f40a 	mul.w	r4, r9, sl
 80004a8:	429c      	cmp	r4, r3
 80004aa:	fa02 f207 	lsl.w	r2, r2, r7
 80004ae:	fa00 f107 	lsl.w	r1, r0, r7
 80004b2:	d90b      	bls.n	80004cc <__udivmoddi4+0x1b0>
 80004b4:	eb1e 0303 	adds.w	r3, lr, r3
 80004b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80004bc:	f080 8087 	bcs.w	80005ce <__udivmoddi4+0x2b2>
 80004c0:	429c      	cmp	r4, r3
 80004c2:	f240 8084 	bls.w	80005ce <__udivmoddi4+0x2b2>
 80004c6:	f1a9 0902 	sub.w	r9, r9, #2
 80004ca:	4473      	add	r3, lr
 80004cc:	1b1b      	subs	r3, r3, r4
 80004ce:	b2ad      	uxth	r5, r5
 80004d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d4:	fb08 3310 	mls	r3, r8, r0, r3
 80004d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e0:	45a2      	cmp	sl, r4
 80004e2:	d908      	bls.n	80004f6 <__udivmoddi4+0x1da>
 80004e4:	eb1e 0404 	adds.w	r4, lr, r4
 80004e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80004ec:	d26b      	bcs.n	80005c6 <__udivmoddi4+0x2aa>
 80004ee:	45a2      	cmp	sl, r4
 80004f0:	d969      	bls.n	80005c6 <__udivmoddi4+0x2aa>
 80004f2:	3802      	subs	r0, #2
 80004f4:	4474      	add	r4, lr
 80004f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fa:	fba0 8902 	umull	r8, r9, r0, r2
 80004fe:	eba4 040a 	sub.w	r4, r4, sl
 8000502:	454c      	cmp	r4, r9
 8000504:	46c2      	mov	sl, r8
 8000506:	464b      	mov	r3, r9
 8000508:	d354      	bcc.n	80005b4 <__udivmoddi4+0x298>
 800050a:	d051      	beq.n	80005b0 <__udivmoddi4+0x294>
 800050c:	2e00      	cmp	r6, #0
 800050e:	d069      	beq.n	80005e4 <__udivmoddi4+0x2c8>
 8000510:	ebb1 050a 	subs.w	r5, r1, sl
 8000514:	eb64 0403 	sbc.w	r4, r4, r3
 8000518:	fa04 fc0c 	lsl.w	ip, r4, ip
 800051c:	40fd      	lsrs	r5, r7
 800051e:	40fc      	lsrs	r4, r7
 8000520:	ea4c 0505 	orr.w	r5, ip, r5
 8000524:	e9c6 5400 	strd	r5, r4, [r6]
 8000528:	2700      	movs	r7, #0
 800052a:	e747      	b.n	80003bc <__udivmoddi4+0xa0>
 800052c:	f1c2 0320 	rsb	r3, r2, #32
 8000530:	fa20 f703 	lsr.w	r7, r0, r3
 8000534:	4095      	lsls	r5, r2
 8000536:	fa01 f002 	lsl.w	r0, r1, r2
 800053a:	fa21 f303 	lsr.w	r3, r1, r3
 800053e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000542:	4338      	orrs	r0, r7
 8000544:	0c01      	lsrs	r1, r0, #16
 8000546:	fbb3 f7fe 	udiv	r7, r3, lr
 800054a:	fa1f f885 	uxth.w	r8, r5
 800054e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb07 f308 	mul.w	r3, r7, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	fa04 f402 	lsl.w	r4, r4, r2
 8000560:	d907      	bls.n	8000572 <__udivmoddi4+0x256>
 8000562:	1869      	adds	r1, r5, r1
 8000564:	f107 3cff 	add.w	ip, r7, #4294967295
 8000568:	d22f      	bcs.n	80005ca <__udivmoddi4+0x2ae>
 800056a:	428b      	cmp	r3, r1
 800056c:	d92d      	bls.n	80005ca <__udivmoddi4+0x2ae>
 800056e:	3f02      	subs	r7, #2
 8000570:	4429      	add	r1, r5
 8000572:	1acb      	subs	r3, r1, r3
 8000574:	b281      	uxth	r1, r0
 8000576:	fbb3 f0fe 	udiv	r0, r3, lr
 800057a:	fb0e 3310 	mls	r3, lr, r0, r3
 800057e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000582:	fb00 f308 	mul.w	r3, r0, r8
 8000586:	428b      	cmp	r3, r1
 8000588:	d907      	bls.n	800059a <__udivmoddi4+0x27e>
 800058a:	1869      	adds	r1, r5, r1
 800058c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000590:	d217      	bcs.n	80005c2 <__udivmoddi4+0x2a6>
 8000592:	428b      	cmp	r3, r1
 8000594:	d915      	bls.n	80005c2 <__udivmoddi4+0x2a6>
 8000596:	3802      	subs	r0, #2
 8000598:	4429      	add	r1, r5
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a0:	e73b      	b.n	800041a <__udivmoddi4+0xfe>
 80005a2:	4637      	mov	r7, r6
 80005a4:	4630      	mov	r0, r6
 80005a6:	e709      	b.n	80003bc <__udivmoddi4+0xa0>
 80005a8:	4607      	mov	r7, r0
 80005aa:	e6e7      	b.n	800037c <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fb      	b.n	80003a8 <__udivmoddi4+0x8c>
 80005b0:	4541      	cmp	r1, r8
 80005b2:	d2ab      	bcs.n	800050c <__udivmoddi4+0x1f0>
 80005b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80005b8:	eb69 020e 	sbc.w	r2, r9, lr
 80005bc:	3801      	subs	r0, #1
 80005be:	4613      	mov	r3, r2
 80005c0:	e7a4      	b.n	800050c <__udivmoddi4+0x1f0>
 80005c2:	4660      	mov	r0, ip
 80005c4:	e7e9      	b.n	800059a <__udivmoddi4+0x27e>
 80005c6:	4618      	mov	r0, r3
 80005c8:	e795      	b.n	80004f6 <__udivmoddi4+0x1da>
 80005ca:	4667      	mov	r7, ip
 80005cc:	e7d1      	b.n	8000572 <__udivmoddi4+0x256>
 80005ce:	4681      	mov	r9, r0
 80005d0:	e77c      	b.n	80004cc <__udivmoddi4+0x1b0>
 80005d2:	3802      	subs	r0, #2
 80005d4:	442c      	add	r4, r5
 80005d6:	e747      	b.n	8000468 <__udivmoddi4+0x14c>
 80005d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80005dc:	442b      	add	r3, r5
 80005de:	e72f      	b.n	8000440 <__udivmoddi4+0x124>
 80005e0:	4638      	mov	r0, r7
 80005e2:	e708      	b.n	80003f6 <__udivmoddi4+0xda>
 80005e4:	4637      	mov	r7, r6
 80005e6:	e6e9      	b.n	80003bc <__udivmoddi4+0xa0>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 fcea 	bl	8000fc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f816 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 f9cc 	bl	8000994 <MX_GPIO_Init>
  MX_DMA_Init();
 80005fc:	f000 f9aa 	bl	8000954 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000600:	f000 f954 	bl	80008ac <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000604:	f000 f99e 	bl	8000944 <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 8000608:	f000 f8d8 	bl	80007bc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
//  HAL_Delay(5000);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_SIZE);
 800060c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000610:	4902      	ldr	r1, [pc, #8]	; (800061c <main+0x30>)
 8000612:	4803      	ldr	r0, [pc, #12]	; (8000620 <main+0x34>)
 8000614:	f001 f8ac 	bl	8001770 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000618:	e7fe      	b.n	8000618 <main+0x2c>
 800061a:	bf00      	nop
 800061c:	24000194 	.word	0x24000194
 8000620:	240000b8 	.word	0x240000b8

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b0ca      	sub	sp, #296	; 0x128
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800062e:	224c      	movs	r2, #76	; 0x4c
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f008 fa84 	bl	8008b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800063c:	2220      	movs	r2, #32
 800063e:	2100      	movs	r1, #0
 8000640:	4618      	mov	r0, r3
 8000642:	f008 fa7d 	bl	8008b40 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	4618      	mov	r0, r3
 800064a:	23b8      	movs	r3, #184	; 0xb8
 800064c:	461a      	mov	r2, r3
 800064e:	2100      	movs	r1, #0
 8000650:	f008 fa76 	bl	8008b40 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000654:	2004      	movs	r0, #4
 8000656:	f004 facd 	bl	8004bf4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800065a:	463b      	mov	r3, r7
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	4b53      	ldr	r3, [pc, #332]	; (80007b0 <SystemClock_Config+0x18c>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a52      	ldr	r2, [pc, #328]	; (80007b0 <SystemClock_Config+0x18c>)
 8000666:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800066a:	6193      	str	r3, [r2, #24]
 800066c:	4b50      	ldr	r3, [pc, #320]	; (80007b0 <SystemClock_Config+0x18c>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000674:	463b      	mov	r3, r7
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	463b      	mov	r3, r7
 800067a:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800067c:	bf00      	nop
 800067e:	4b4c      	ldr	r3, [pc, #304]	; (80007b0 <SystemClock_Config+0x18c>)
 8000680:	699b      	ldr	r3, [r3, #24]
 8000682:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800068a:	d1f8      	bne.n	800067e <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800068c:	4b49      	ldr	r3, [pc, #292]	; (80007b4 <SystemClock_Config+0x190>)
 800068e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000690:	f023 0303 	bic.w	r3, r3, #3
 8000694:	4a47      	ldr	r2, [pc, #284]	; (80007b4 <SystemClock_Config+0x190>)
 8000696:	f043 0302 	orr.w	r3, r3, #2
 800069a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800069c:	2321      	movs	r3, #33	; 0x21
 800069e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006a2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006aa:	2301      	movs	r3, #1
 80006ac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b0:	2302      	movs	r3, #2
 80006b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b6:	2302      	movs	r3, #2
 80006b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006bc:	2301      	movs	r3, #1
 80006be:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLN = 24;
 80006c2:	2318      	movs	r3, #24
 80006c4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ce:	2304      	movs	r3, #4
 80006d0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006da:	230c      	movs	r3, #12
 80006dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006e0:	2300      	movs	r3, #0
 80006e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80006f0:	4618      	mov	r0, r3
 80006f2:	f004 fad9 	bl	8004ca8 <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80006fc:	f000 faa0 	bl	8000c40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	233f      	movs	r3, #63	; 0x3f
 8000702:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000706:	2303      	movs	r3, #3
 8000708:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000730:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000734:	2102      	movs	r1, #2
 8000736:	4618      	mov	r0, r3
 8000738:	f004 fe9e 	bl	8005478 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0x122>
  {
    Error_Handler();
 8000742:	f000 fa7d 	bl	8000c40 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_ADC
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	4a1b      	ldr	r2, [pc, #108]	; (80007b8 <SystemClock_Config+0x194>)
 800074a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2201      	movs	r2, #1
 8000750:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2210      	movs	r2, #16
 8000756:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2202      	movs	r2, #2
 800075c:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2202      	movs	r2, #2
 8000762:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2202      	movs	r2, #2
 8000768:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	22c0      	movs	r2, #192	; 0xc0
 800076e:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	2200      	movs	r2, #0
 8000780:	67da      	str	r2, [r3, #124]	; 0x7c
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000788:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2200      	movs	r2, #0
 8000790:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	4618      	mov	r0, r3
 8000798:	f005 f9f2 	bl	8005b80 <HAL_RCCEx_PeriphCLKConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0x182>
  {
    Error_Handler();
 80007a2:	f000 fa4d 	bl	8000c40 <Error_Handler>
  }
}
 80007a6:	bf00      	nop
 80007a8:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	58024800 	.word	0x58024800
 80007b4:	58024400 	.word	0x58024400
 80007b8:	000c0002 	.word	0x000c0002

080007bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007ce:	463b      	mov	r3, r7
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
 80007dc:	615a      	str	r2, [r3, #20]
 80007de:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80007e0:	4b2f      	ldr	r3, [pc, #188]	; (80008a0 <MX_ADC1_Init+0xe4>)
 80007e2:	4a30      	ldr	r2, [pc, #192]	; (80008a4 <MX_ADC1_Init+0xe8>)
 80007e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007e6:	4b2e      	ldr	r3, [pc, #184]	; (80008a0 <MX_ADC1_Init+0xe4>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80007ec:	4b2c      	ldr	r3, [pc, #176]	; (80008a0 <MX_ADC1_Init+0xe4>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007f2:	4b2b      	ldr	r3, [pc, #172]	; (80008a0 <MX_ADC1_Init+0xe4>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f8:	4b29      	ldr	r3, [pc, #164]	; (80008a0 <MX_ADC1_Init+0xe4>)
 80007fa:	2204      	movs	r2, #4
 80007fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007fe:	4b28      	ldr	r3, [pc, #160]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000800:	2200      	movs	r2, #0
 8000802:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000804:	4b26      	ldr	r3, [pc, #152]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000806:	2201      	movs	r2, #1
 8000808:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800080a:	4b25      	ldr	r3, [pc, #148]	; (80008a0 <MX_ADC1_Init+0xe4>)
 800080c:	2201      	movs	r2, #1
 800080e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000810:	4b23      	ldr	r3, [pc, #140]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000812:	2200      	movs	r2, #0
 8000814:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000816:	4b22      	ldr	r3, [pc, #136]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000818:	2200      	movs	r2, #0
 800081a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800081c:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <MX_ADC1_Init+0xe4>)
 800081e:	2200      	movs	r2, #0
 8000820:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000822:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000824:	2203      	movs	r2, #3
 8000826:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000828:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <MX_ADC1_Init+0xe4>)
 800082a:	2200      	movs	r2, #0
 800082c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800082e:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000830:	2200      	movs	r2, #0
 8000832:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000834:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000836:	2200      	movs	r2, #0
 8000838:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800083c:	4818      	ldr	r0, [pc, #96]	; (80008a0 <MX_ADC1_Init+0xe4>)
 800083e:	f000 fe3d 	bl	80014bc <HAL_ADC_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000848:	f000 f9fa 	bl	8000c40 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	4812      	ldr	r0, [pc, #72]	; (80008a0 <MX_ADC1_Init+0xe4>)
 8000858:	f001 fcde 	bl	8002218 <HAL_ADCEx_MultiModeConfigChannel>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000862:	f000 f9ed 	bl	8000c40 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000866:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <MX_ADC1_Init+0xec>)
 8000868:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800086a:	2306      	movs	r3, #6
 800086c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000872:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000876:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000878:	2304      	movs	r3, #4
 800087a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000884:	463b      	mov	r3, r7
 8000886:	4619      	mov	r1, r3
 8000888:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_ADC1_Init+0xe4>)
 800088a:	f001 f82f 	bl	80018ec <HAL_ADC_ConfigChannel>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000894:	f000 f9d4 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	3728      	adds	r7, #40	; 0x28
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	240000b8 	.word	0x240000b8
 80008a4:	40022000 	.word	0x40022000
 80008a8:	14f00020 	.word	0x14f00020

080008ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008b0:	4b22      	ldr	r3, [pc, #136]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008b2:	4a23      	ldr	r2, [pc, #140]	; (8000940 <MX_USART3_UART_Init+0x94>)
 80008b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008b6:	4b21      	ldr	r3, [pc, #132]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008be:	4b1f      	ldr	r3, [pc, #124]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008c4:	4b1d      	ldr	r3, [pc, #116]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ca:	4b1c      	ldr	r3, [pc, #112]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008d0:	4b1a      	ldr	r3, [pc, #104]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008d2:	220c      	movs	r2, #12
 80008d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d6:	4b19      	ldr	r3, [pc, #100]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e2:	4b16      	ldr	r3, [pc, #88]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ee:	4b13      	ldr	r3, [pc, #76]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008f4:	4811      	ldr	r0, [pc, #68]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008f6:	f006 ff7b 	bl	80077f0 <HAL_UART_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000900:	f000 f99e 	bl	8000c40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000904:	2100      	movs	r1, #0
 8000906:	480d      	ldr	r0, [pc, #52]	; (800093c <MX_USART3_UART_Init+0x90>)
 8000908:	f008 f811 	bl	800892e <HAL_UARTEx_SetTxFifoThreshold>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000912:	f000 f995 	bl	8000c40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000916:	2100      	movs	r1, #0
 8000918:	4808      	ldr	r0, [pc, #32]	; (800093c <MX_USART3_UART_Init+0x90>)
 800091a:	f008 f846 	bl	80089aa <HAL_UARTEx_SetRxFifoThreshold>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000924:	f000 f98c 	bl	8000c40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000928:	4804      	ldr	r0, [pc, #16]	; (800093c <MX_USART3_UART_Init+0x90>)
 800092a:	f007 ffc7 	bl	80088bc <HAL_UARTEx_DisableFifoMode>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000934:	f000 f984 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	2400002c 	.word	0x2400002c
 8000940:	40004800 	.word	0x40004800

08000944 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
	...

08000954 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800095a:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <MX_DMA_Init+0x3c>)
 800095c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000960:	4a0b      	ldr	r2, [pc, #44]	; (8000990 <MX_DMA_Init+0x3c>)
 8000962:	f043 0301 	orr.w	r3, r3, #1
 8000966:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_DMA_Init+0x3c>)
 800096c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000970:	f003 0301 	and.w	r3, r3, #1
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000978:	2200      	movs	r2, #0
 800097a:	2100      	movs	r1, #0
 800097c:	200b      	movs	r0, #11
 800097e:	f001 fdbe 	bl	80024fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000982:	200b      	movs	r0, #11
 8000984:	f001 fdd5 	bl	8002532 <HAL_NVIC_EnableIRQ>

}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	58024400 	.word	0x58024400

08000994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08e      	sub	sp, #56	; 0x38
 8000998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009aa:	4b8d      	ldr	r3, [pc, #564]	; (8000be0 <MX_GPIO_Init+0x24c>)
 80009ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009b0:	4a8b      	ldr	r2, [pc, #556]	; (8000be0 <MX_GPIO_Init+0x24c>)
 80009b2:	f043 0304 	orr.w	r3, r3, #4
 80009b6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009ba:	4b89      	ldr	r3, [pc, #548]	; (8000be0 <MX_GPIO_Init+0x24c>)
 80009bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009c0:	f003 0304 	and.w	r3, r3, #4
 80009c4:	623b      	str	r3, [r7, #32]
 80009c6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009c8:	4b85      	ldr	r3, [pc, #532]	; (8000be0 <MX_GPIO_Init+0x24c>)
 80009ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009ce:	4a84      	ldr	r2, [pc, #528]	; (8000be0 <MX_GPIO_Init+0x24c>)
 80009d0:	f043 0320 	orr.w	r3, r3, #32
 80009d4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009d8:	4b81      	ldr	r3, [pc, #516]	; (8000be0 <MX_GPIO_Init+0x24c>)
 80009da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009de:	f003 0320 	and.w	r3, r3, #32
 80009e2:	61fb      	str	r3, [r7, #28]
 80009e4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e6:	4b7e      	ldr	r3, [pc, #504]	; (8000be0 <MX_GPIO_Init+0x24c>)
 80009e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009ec:	4a7c      	ldr	r2, [pc, #496]	; (8000be0 <MX_GPIO_Init+0x24c>)
 80009ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009f6:	4b7a      	ldr	r3, [pc, #488]	; (8000be0 <MX_GPIO_Init+0x24c>)
 80009f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a00:	61bb      	str	r3, [r7, #24]
 8000a02:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a04:	4b76      	ldr	r3, [pc, #472]	; (8000be0 <MX_GPIO_Init+0x24c>)
 8000a06:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a0a:	4a75      	ldr	r2, [pc, #468]	; (8000be0 <MX_GPIO_Init+0x24c>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a14:	4b72      	ldr	r3, [pc, #456]	; (8000be0 <MX_GPIO_Init+0x24c>)
 8000a16:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	4b6f      	ldr	r3, [pc, #444]	; (8000be0 <MX_GPIO_Init+0x24c>)
 8000a24:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a28:	4a6d      	ldr	r2, [pc, #436]	; (8000be0 <MX_GPIO_Init+0x24c>)
 8000a2a:	f043 0302 	orr.w	r3, r3, #2
 8000a2e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a32:	4b6b      	ldr	r3, [pc, #428]	; (8000be0 <MX_GPIO_Init+0x24c>)
 8000a34:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a38:	f003 0302 	and.w	r3, r3, #2
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a40:	4b67      	ldr	r3, [pc, #412]	; (8000be0 <MX_GPIO_Init+0x24c>)
 8000a42:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a46:	4a66      	ldr	r2, [pc, #408]	; (8000be0 <MX_GPIO_Init+0x24c>)
 8000a48:	f043 0308 	orr.w	r3, r3, #8
 8000a4c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a50:	4b63      	ldr	r3, [pc, #396]	; (8000be0 <MX_GPIO_Init+0x24c>)
 8000a52:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a56:	f003 0308 	and.w	r3, r3, #8
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a5e:	4b60      	ldr	r3, [pc, #384]	; (8000be0 <MX_GPIO_Init+0x24c>)
 8000a60:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a64:	4a5e      	ldr	r2, [pc, #376]	; (8000be0 <MX_GPIO_Init+0x24c>)
 8000a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a6a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a6e:	4b5c      	ldr	r3, [pc, #368]	; (8000be0 <MX_GPIO_Init+0x24c>)
 8000a70:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a7c:	4b58      	ldr	r3, [pc, #352]	; (8000be0 <MX_GPIO_Init+0x24c>)
 8000a7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a82:	4a57      	ldr	r2, [pc, #348]	; (8000be0 <MX_GPIO_Init+0x24c>)
 8000a84:	f043 0310 	orr.w	r3, r3, #16
 8000a88:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a8c:	4b54      	ldr	r3, [pc, #336]	; (8000be0 <MX_GPIO_Init+0x24c>)
 8000a8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a92:	f003 0310 	and.w	r3, r3, #16
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aa0:	4850      	ldr	r0, [pc, #320]	; (8000be4 <MX_GPIO_Init+0x250>)
 8000aa2:	f004 f88d 	bl	8004bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f244 0101 	movw	r1, #16385	; 0x4001
 8000aac:	484e      	ldr	r0, [pc, #312]	; (8000be8 <MX_GPIO_Init+0x254>)
 8000aae:	f004 f887 	bl	8004bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2102      	movs	r1, #2
 8000ab6:	484d      	ldr	r0, [pc, #308]	; (8000bec <MX_GPIO_Init+0x258>)
 8000ab8:	f004 f882 	bl	8004bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000abc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4847      	ldr	r0, [pc, #284]	; (8000bf0 <MX_GPIO_Init+0x25c>)
 8000ad2:	f003 fec5 	bl	8004860 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000ad6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000adc:	2301      	movs	r3, #1
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aec:	4619      	mov	r1, r3
 8000aee:	483d      	ldr	r0, [pc, #244]	; (8000be4 <MX_GPIO_Init+0x250>)
 8000af0:	f003 feb6 	bl	8004860 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000af4:	2310      	movs	r3, #16
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000af8:	2303      	movs	r3, #3
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b04:	4619      	mov	r1, r3
 8000b06:	483b      	ldr	r0, [pc, #236]	; (8000bf4 <MX_GPIO_Init+0x260>)
 8000b08:	f003 feaa 	bl	8004860 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b0c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b22:	4619      	mov	r1, r3
 8000b24:	4830      	ldr	r0, [pc, #192]	; (8000be8 <MX_GPIO_Init+0x254>)
 8000b26:	f003 fe9b 	bl	8004860 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000b2a:	2380      	movs	r3, #128	; 0x80
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b2e:	4b32      	ldr	r3, [pc, #200]	; (8000bf8 <MX_GPIO_Init+0x264>)
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	482f      	ldr	r0, [pc, #188]	; (8000bfc <MX_GPIO_Init+0x268>)
 8000b3e:	f003 fe8f 	bl	8004860 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000b42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b54:	4619      	mov	r1, r3
 8000b56:	4827      	ldr	r0, [pc, #156]	; (8000bf4 <MX_GPIO_Init+0x260>)
 8000b58:	f003 fe82 	bl	8004860 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000b6e:	230a      	movs	r3, #10
 8000b70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b76:	4619      	mov	r1, r3
 8000b78:	481e      	ldr	r0, [pc, #120]	; (8000bf4 <MX_GPIO_Init+0x260>)
 8000b7a:	f003 fe71 	bl	8004860 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000b7e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b94:	4619      	mov	r1, r3
 8000b96:	4817      	ldr	r0, [pc, #92]	; (8000bf4 <MX_GPIO_Init+0x260>)
 8000b98:	f003 fe62 	bl	8004860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b9c:	23c0      	movs	r3, #192	; 0xc0
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bac:	2307      	movs	r3, #7
 8000bae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	480c      	ldr	r0, [pc, #48]	; (8000be8 <MX_GPIO_Init+0x254>)
 8000bb8:	f003 fe52 	bl	8004860 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4806      	ldr	r0, [pc, #24]	; (8000bec <MX_GPIO_Init+0x258>)
 8000bd4:	f003 fe44 	bl	8004860 <HAL_GPIO_Init>

}
 8000bd8:	bf00      	nop
 8000bda:	3738      	adds	r7, #56	; 0x38
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	58024400 	.word	0x58024400
 8000be4:	58021400 	.word	0x58021400
 8000be8:	58020400 	.word	0x58020400
 8000bec:	58021000 	.word	0x58021000
 8000bf0:	58020800 	.word	0x58020800
 8000bf4:	58020000 	.word	0x58020000
 8000bf8:	11110000 	.word	0x11110000
 8000bfc:	58021800 	.word	0x58021800

08000c00 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
//This code idea was made by Shawn Hymel from digikey. I am using it to test, and MUST DELETE IT!
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	4803      	ldr	r0, [pc, #12]	; (8000c1c <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8000c0e:	f003 ffd7 	bl	8004bc0 <HAL_GPIO_WritePin>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	58020400 	.word	0x58020400

08000c20 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	4803      	ldr	r0, [pc, #12]	; (8000c3c <HAL_ADC_ConvCpltCallback+0x1c>)
 8000c2e:	f003 ffc7 	bl	8004bc0 <HAL_GPIO_WritePin>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	58020400 	.word	0x58020400

08000c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
	...

08000c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c56:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <HAL_MspInit+0x30>)
 8000c58:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000c5c:	4a08      	ldr	r2, [pc, #32]	; (8000c80 <HAL_MspInit+0x30>)
 8000c5e:	f043 0302 	orr.w	r3, r3, #2
 8000c62:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_MspInit+0x30>)
 8000c68:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000c6c:	f003 0302 	and.w	r3, r3, #2
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	58024400 	.word	0x58024400

08000c84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a30      	ldr	r2, [pc, #192]	; (8000d64 <HAL_ADC_MspInit+0xe0>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d159      	bne.n	8000d5a <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000ca6:	4b30      	ldr	r3, [pc, #192]	; (8000d68 <HAL_ADC_MspInit+0xe4>)
 8000ca8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000cac:	4a2e      	ldr	r2, [pc, #184]	; (8000d68 <HAL_ADC_MspInit+0xe4>)
 8000cae:	f043 0320 	orr.w	r3, r3, #32
 8000cb2:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000cb6:	4b2c      	ldr	r3, [pc, #176]	; (8000d68 <HAL_ADC_MspInit+0xe4>)
 8000cb8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000cbc:	f003 0320 	and.w	r3, r3, #32
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc4:	4b28      	ldr	r3, [pc, #160]	; (8000d68 <HAL_ADC_MspInit+0xe4>)
 8000cc6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cca:	4a27      	ldr	r2, [pc, #156]	; (8000d68 <HAL_ADC_MspInit+0xe4>)
 8000ccc:	f043 0302 	orr.w	r3, r3, #2
 8000cd0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cd4:	4b24      	ldr	r3, [pc, #144]	; (8000d68 <HAL_ADC_MspInit+0xe4>)
 8000cd6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	481d      	ldr	r0, [pc, #116]	; (8000d6c <HAL_ADC_MspInit+0xe8>)
 8000cf6:	f003 fdb3 	bl	8004860 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000cfa:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <HAL_ADC_MspInit+0xec>)
 8000cfc:	4a1d      	ldr	r2, [pc, #116]	; (8000d74 <HAL_ADC_MspInit+0xf0>)
 8000cfe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000d00:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <HAL_ADC_MspInit+0xec>)
 8000d02:	2209      	movs	r2, #9
 8000d04:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d06:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <HAL_ADC_MspInit+0xec>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d0c:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <HAL_ADC_MspInit+0xec>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d12:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <HAL_ADC_MspInit+0xec>)
 8000d14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d18:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <HAL_ADC_MspInit+0xec>)
 8000d1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d20:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d22:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <HAL_ADC_MspInit+0xec>)
 8000d24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d28:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <HAL_ADC_MspInit+0xec>)
 8000d2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d30:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d32:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <HAL_ADC_MspInit+0xec>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d38:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <HAL_ADC_MspInit+0xec>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d3e:	480c      	ldr	r0, [pc, #48]	; (8000d70 <HAL_ADC_MspInit+0xec>)
 8000d40:	f001 fc12 	bl	8002568 <HAL_DMA_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <HAL_ADC_MspInit+0xca>
    {
      Error_Handler();
 8000d4a:	f7ff ff79 	bl	8000c40 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a07      	ldr	r2, [pc, #28]	; (8000d70 <HAL_ADC_MspInit+0xec>)
 8000d52:	64da      	str	r2, [r3, #76]	; 0x4c
 8000d54:	4a06      	ldr	r2, [pc, #24]	; (8000d70 <HAL_ADC_MspInit+0xec>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d5a:	bf00      	nop
 8000d5c:	3728      	adds	r7, #40	; 0x28
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40022000 	.word	0x40022000
 8000d68:	58024400 	.word	0x58024400
 8000d6c:	58020400 	.word	0x58020400
 8000d70:	2400011c 	.word	0x2400011c
 8000d74:	40020010 	.word	0x40020010

08000d78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	; 0x28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a1a      	ldr	r2, [pc, #104]	; (8000e00 <HAL_UART_MspInit+0x88>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d12e      	bne.n	8000df8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d9a:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <HAL_UART_MspInit+0x8c>)
 8000d9c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000da0:	4a18      	ldr	r2, [pc, #96]	; (8000e04 <HAL_UART_MspInit+0x8c>)
 8000da2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000da6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000daa:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <HAL_UART_MspInit+0x8c>)
 8000dac:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000db0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <HAL_UART_MspInit+0x8c>)
 8000dba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dbe:	4a11      	ldr	r2, [pc, #68]	; (8000e04 <HAL_UART_MspInit+0x8c>)
 8000dc0:	f043 0308 	orr.w	r3, r3, #8
 8000dc4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000dc8:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <HAL_UART_MspInit+0x8c>)
 8000dca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dce:	f003 0308 	and.w	r3, r3, #8
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000dd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000de8:	2307      	movs	r3, #7
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	4619      	mov	r1, r3
 8000df2:	4805      	ldr	r0, [pc, #20]	; (8000e08 <HAL_UART_MspInit+0x90>)
 8000df4:	f003 fd34 	bl	8004860 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000df8:	bf00      	nop
 8000dfa:	3728      	adds	r7, #40	; 0x28
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40004800 	.word	0x40004800
 8000e04:	58024400 	.word	0x58024400
 8000e08:	58020c00 	.word	0x58020c00

08000e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <HardFault_Handler+0x4>

08000e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <MemManage_Handler+0x4>

08000e26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2a:	e7fe      	b.n	8000e2a <BusFault_Handler+0x4>

08000e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <UsageFault_Handler+0x4>

08000e32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e60:	f000 f924 	bl	80010ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e6c:	4802      	ldr	r0, [pc, #8]	; (8000e78 <DMA1_Stream0_IRQHandler+0x10>)
 8000e6e:	f002 f975 	bl	800315c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	2400011c 	.word	0x2400011c

08000e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e80:	4b34      	ldr	r3, [pc, #208]	; (8000f54 <SystemInit+0xd8>)
 8000e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e86:	4a33      	ldr	r2, [pc, #204]	; (8000f54 <SystemInit+0xd8>)
 8000e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e90:	4b31      	ldr	r3, [pc, #196]	; (8000f58 <SystemInit+0xdc>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f003 030f 	and.w	r3, r3, #15
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d807      	bhi.n	8000eac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e9c:	4b2e      	ldr	r3, [pc, #184]	; (8000f58 <SystemInit+0xdc>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f023 030f 	bic.w	r3, r3, #15
 8000ea4:	4a2c      	ldr	r2, [pc, #176]	; (8000f58 <SystemInit+0xdc>)
 8000ea6:	f043 0303 	orr.w	r3, r3, #3
 8000eaa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000eac:	4b2b      	ldr	r3, [pc, #172]	; (8000f5c <SystemInit+0xe0>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a2a      	ldr	r2, [pc, #168]	; (8000f5c <SystemInit+0xe0>)
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000eb8:	4b28      	ldr	r3, [pc, #160]	; (8000f5c <SystemInit+0xe0>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ebe:	4b27      	ldr	r3, [pc, #156]	; (8000f5c <SystemInit+0xe0>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	4926      	ldr	r1, [pc, #152]	; (8000f5c <SystemInit+0xe0>)
 8000ec4:	4b26      	ldr	r3, [pc, #152]	; (8000f60 <SystemInit+0xe4>)
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000eca:	4b23      	ldr	r3, [pc, #140]	; (8000f58 <SystemInit+0xdc>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 030f 	and.w	r3, r3, #15
 8000ed2:	2b03      	cmp	r3, #3
 8000ed4:	d907      	bls.n	8000ee6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ed6:	4b20      	ldr	r3, [pc, #128]	; (8000f58 <SystemInit+0xdc>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f023 030f 	bic.w	r3, r3, #15
 8000ede:	4a1e      	ldr	r2, [pc, #120]	; (8000f58 <SystemInit+0xdc>)
 8000ee0:	f043 0303 	orr.w	r3, r3, #3
 8000ee4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000ee6:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <SystemInit+0xe0>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000eec:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <SystemInit+0xe0>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <SystemInit+0xe0>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ef8:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <SystemInit+0xe0>)
 8000efa:	4a1a      	ldr	r2, [pc, #104]	; (8000f64 <SystemInit+0xe8>)
 8000efc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000efe:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <SystemInit+0xe0>)
 8000f00:	4a19      	ldr	r2, [pc, #100]	; (8000f68 <SystemInit+0xec>)
 8000f02:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f04:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <SystemInit+0xe0>)
 8000f06:	4a19      	ldr	r2, [pc, #100]	; (8000f6c <SystemInit+0xf0>)
 8000f08:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <SystemInit+0xe0>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <SystemInit+0xe0>)
 8000f12:	4a16      	ldr	r2, [pc, #88]	; (8000f6c <SystemInit+0xf0>)
 8000f14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <SystemInit+0xe0>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <SystemInit+0xe0>)
 8000f1e:	4a13      	ldr	r2, [pc, #76]	; (8000f6c <SystemInit+0xf0>)
 8000f20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <SystemInit+0xe0>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <SystemInit+0xe0>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a0b      	ldr	r2, [pc, #44]	; (8000f5c <SystemInit+0xe0>)
 8000f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f32:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f34:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <SystemInit+0xe0>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <SystemInit+0xf4>)
 8000f3c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000f40:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f42:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <SystemInit+0xd8>)
 8000f44:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f48:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00
 8000f58:	52002000 	.word	0x52002000
 8000f5c:	58024400 	.word	0x58024400
 8000f60:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f64:	02020200 	.word	0x02020200
 8000f68:	01ff0000 	.word	0x01ff0000
 8000f6c:	01010280 	.word	0x01010280
 8000f70:	52004000 	.word	0x52004000

08000f74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fac <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f78:	f7ff ff80 	bl	8000e7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000f7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f7e:	e003      	b.n	8000f88 <LoopCopyDataInit>

08000f80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f80:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8000f82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f86:	3104      	adds	r1, #4

08000f88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f88:	480a      	ldr	r0, [pc, #40]	; (8000fb4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000f8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f90:	d3f6      	bcc.n	8000f80 <CopyDataInit>
  ldr  r2, =_sbss
 8000f92:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000f94:	e002      	b.n	8000f9c <LoopFillZerobss>

08000f96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000f96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f98:	f842 3b04 	str.w	r3, [r2], #4

08000f9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8000f9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fa0:	d3f9      	bcc.n	8000f96 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000fa2:	f007 fda9 	bl	8008af8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fa6:	f7ff fb21 	bl	80005ec <main>
  bx  lr
 8000faa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fac:	24100000 	.word	0x24100000
  ldr  r3, =_sidata
 8000fb0:	08008bb8 	.word	0x08008bb8
  ldr  r0, =_sdata
 8000fb4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8000fb8:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 8000fbc:	24000010 	.word	0x24000010
  ldr  r3, = _ebss
 8000fc0:	24002198 	.word	0x24002198

08000fc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc4:	e7fe      	b.n	8000fc4 <ADC_IRQHandler>
	...

08000fc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fce:	2003      	movs	r0, #3
 8000fd0:	f001 fa8a 	bl	80024e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000fd4:	f004 fc06 	bl	80057e4 <HAL_RCC_GetSysClockFreq>
 8000fd8:	4601      	mov	r1, r0
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <HAL_Init+0x68>)
 8000fdc:	699b      	ldr	r3, [r3, #24]
 8000fde:	0a1b      	lsrs	r3, r3, #8
 8000fe0:	f003 030f 	and.w	r3, r3, #15
 8000fe4:	4a13      	ldr	r2, [pc, #76]	; (8001034 <HAL_Init+0x6c>)
 8000fe6:	5cd3      	ldrb	r3, [r2, r3]
 8000fe8:	f003 031f 	and.w	r3, r3, #31
 8000fec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ff0:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <HAL_Init+0x68>)
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	f003 030f 	and.w	r3, r3, #15
 8000ffa:	4a0e      	ldr	r2, [pc, #56]	; (8001034 <HAL_Init+0x6c>)
 8000ffc:	5cd3      	ldrb	r3, [r2, r3]
 8000ffe:	f003 031f 	and.w	r3, r3, #31
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	fa22 f303 	lsr.w	r3, r2, r3
 8001008:	4a0b      	ldr	r2, [pc, #44]	; (8001038 <HAL_Init+0x70>)
 800100a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800100c:	4a0b      	ldr	r2, [pc, #44]	; (800103c <HAL_Init+0x74>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001012:	2000      	movs	r0, #0
 8001014:	f000 f814 	bl	8001040 <HAL_InitTick>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e002      	b.n	8001028 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001022:	f7ff fe15 	bl	8000c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	58024400 	.word	0x58024400
 8001034:	08008b78 	.word	0x08008b78
 8001038:	24000004 	.word	0x24000004
 800103c:	24000000 	.word	0x24000000

08001040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001048:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <HAL_InitTick+0x60>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d101      	bne.n	8001054 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e021      	b.n	8001098 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <HAL_InitTick+0x64>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <HAL_InitTick+0x60>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	4619      	mov	r1, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	fbb3 f3f1 	udiv	r3, r3, r1
 8001066:	fbb2 f3f3 	udiv	r3, r2, r3
 800106a:	4618      	mov	r0, r3
 800106c:	f001 fa6f 	bl	800254e <HAL_SYSTICK_Config>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e00e      	b.n	8001098 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b0f      	cmp	r3, #15
 800107e:	d80a      	bhi.n	8001096 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001080:	2200      	movs	r2, #0
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	f001 fa39 	bl	80024fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800108c:	4a06      	ldr	r2, [pc, #24]	; (80010a8 <HAL_InitTick+0x68>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	e000      	b.n	8001098 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	2400000c 	.word	0x2400000c
 80010a4:	24000000 	.word	0x24000000
 80010a8:	24000008 	.word	0x24000008

080010ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_IncTick+0x20>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_IncTick+0x24>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4413      	add	r3, r2
 80010bc:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <HAL_IncTick+0x24>)
 80010be:	6013      	str	r3, [r2, #0]
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	2400000c 	.word	0x2400000c
 80010d0:	24002194 	.word	0x24002194

080010d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return uwTick;
 80010d8:	4b03      	ldr	r3, [pc, #12]	; (80010e8 <HAL_GetTick+0x14>)
 80010da:	681b      	ldr	r3, [r3, #0]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	24002194 	.word	0x24002194

080010ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	431a      	orrs	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	609a      	str	r2, [r3, #8]
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
 800111a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	431a      	orrs	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	609a      	str	r2, [r3, #8]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001148:	4618      	mov	r0, r3
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001154:	b480      	push	{r7}
 8001156:	b087      	sub	sp, #28
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
 8001160:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	3360      	adds	r3, #96	; 0x60
 8001166:	461a      	mov	r2, r3
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	430b      	orrs	r3, r1
 8001182:	431a      	orrs	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001188:	bf00      	nop
 800118a:	371c      	adds	r7, #28
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	f003 031f 	and.w	r3, r3, #31
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	fa01 f303 	lsl.w	r3, r1, r3
 80011b4:	431a      	orrs	r2, r3
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	611a      	str	r2, [r3, #16]
}
 80011ba:	bf00      	nop
 80011bc:	3714      	adds	r7, #20
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80011c6:	b480      	push	{r7}
 80011c8:	b087      	sub	sp, #28
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	60f8      	str	r0, [r7, #12]
 80011ce:	60b9      	str	r1, [r7, #8]
 80011d0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	3360      	adds	r3, #96	; 0x60
 80011d6:	461a      	mov	r2, r3
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4413      	add	r3, r2
 80011de:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	431a      	orrs	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	601a      	str	r2, [r3, #0]
  }
}
 80011f0:	bf00      	nop
 80011f2:	371c      	adds	r7, #28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800120c:	2b00      	cmp	r3, #0
 800120e:	d101      	bne.n	8001214 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001210:	2301      	movs	r3, #1
 8001212:	e000      	b.n	8001216 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001222:	b480      	push	{r7}
 8001224:	b087      	sub	sp, #28
 8001226:	af00      	add	r7, sp, #0
 8001228:	60f8      	str	r0, [r7, #12]
 800122a:	60b9      	str	r1, [r7, #8]
 800122c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	3330      	adds	r3, #48	; 0x30
 8001232:	461a      	mov	r2, r3
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	0a1b      	lsrs	r3, r3, #8
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	f003 030c 	and.w	r3, r3, #12
 800123e:	4413      	add	r3, r2
 8001240:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	f003 031f 	and.w	r3, r3, #31
 800124c:	211f      	movs	r1, #31
 800124e:	fa01 f303 	lsl.w	r3, r1, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	401a      	ands	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	0e9b      	lsrs	r3, r3, #26
 800125a:	f003 011f 	and.w	r1, r3, #31
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	f003 031f 	and.w	r3, r3, #31
 8001264:	fa01 f303 	lsl.w	r3, r1, r3
 8001268:	431a      	orrs	r2, r3
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800126e:	bf00      	nop
 8001270:	371c      	adds	r7, #28
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
 8001282:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	f023 0203 	bic.w	r2, r3, #3
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	431a      	orrs	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	60da      	str	r2, [r3, #12]
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b087      	sub	sp, #28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	3314      	adds	r3, #20
 80012b0:	461a      	mov	r2, r3
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	0e5b      	lsrs	r3, r3, #25
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	f003 0304 	and.w	r3, r3, #4
 80012bc:	4413      	add	r3, r2
 80012be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	0d1b      	lsrs	r3, r3, #20
 80012c8:	f003 031f 	and.w	r3, r3, #31
 80012cc:	2107      	movs	r1, #7
 80012ce:	fa01 f303 	lsl.w	r3, r1, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	401a      	ands	r2, r3
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	0d1b      	lsrs	r3, r3, #20
 80012da:	f003 031f 	and.w	r3, r3, #31
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	fa01 f303 	lsl.w	r3, r1, r3
 80012e4:	431a      	orrs	r2, r3
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80012ea:	bf00      	nop
 80012ec:	371c      	adds	r7, #28
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001310:	43db      	mvns	r3, r3
 8001312:	401a      	ands	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f003 0318 	and.w	r3, r3, #24
 800131a:	4908      	ldr	r1, [pc, #32]	; (800133c <LL_ADC_SetChannelSingleDiff+0x44>)
 800131c:	40d9      	lsrs	r1, r3
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	400b      	ands	r3, r1
 8001322:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001326:	431a      	orrs	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800132e:	bf00      	nop
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	000fffff 	.word	0x000fffff

08001340 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f003 031f 	and.w	r3, r3, #31
}
 8001350:	4618      	mov	r0, r3
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689a      	ldr	r2, [r3, #8]
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <LL_ADC_DisableDeepPowerDown+0x20>)
 800136a:	4013      	ands	r3, r2
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	6093      	str	r3, [r2, #8]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	5fffffc0 	.word	0x5fffffc0

08001380 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001390:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001394:	d101      	bne.n	800139a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001396:	2301      	movs	r3, #1
 8001398:	e000      	b.n	800139c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <LL_ADC_EnableInternalRegulator+0x24>)
 80013b6:	4013      	ands	r3, r2
 80013b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	6fffffc0 	.word	0x6fffffc0

080013d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80013e4:	d101      	bne.n	80013ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80013e6:	2301      	movs	r3, #1
 80013e8:	e000      	b.n	80013ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	4b05      	ldr	r3, [pc, #20]	; (800141c <LL_ADC_Enable+0x24>)
 8001406:	4013      	ands	r3, r2
 8001408:	f043 0201 	orr.w	r2, r3, #1
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	7fffffc0 	.word	0x7fffffc0

08001420 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	2b01      	cmp	r3, #1
 8001432:	d101      	bne.n	8001438 <LL_ADC_IsEnabled+0x18>
 8001434:	2301      	movs	r3, #1
 8001436:	e000      	b.n	800143a <LL_ADC_IsEnabled+0x1a>
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
	...

08001448 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <LL_ADC_REG_StartConversion+0x24>)
 8001456:	4013      	ands	r3, r2
 8001458:	f043 0204 	orr.w	r2, r3, #4
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	7fffffc0 	.word	0x7fffffc0

08001470 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	2b04      	cmp	r3, #4
 8001482:	d101      	bne.n	8001488 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001484:	2301      	movs	r3, #1
 8001486:	e000      	b.n	800148a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 0308 	and.w	r3, r3, #8
 80014a6:	2b08      	cmp	r3, #8
 80014a8:	d101      	bne.n	80014ae <LL_ADC_INJ_IsConversionOngoing+0x18>
 80014aa:	2301      	movs	r3, #1
 80014ac:	e000      	b.n	80014b0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014bc:	b590      	push	{r4, r7, lr}
 80014be:	b089      	sub	sp, #36	; 0x24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014c4:	2300      	movs	r3, #0
 80014c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e137      	b.n	8001746 <HAL_ADC_Init+0x28a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d109      	bne.n	80014f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff fbcd 	bl	8000c84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff3f 	bl	8001380 <LL_ADC_IsDeepPowerDownEnabled>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d004      	beq.n	8001512 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff25 	bl	800135c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff ff5a 	bl	80013d0 <LL_ADC_IsInternalRegulatorEnabled>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d113      	bne.n	800154a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff ff3e 	bl	80013a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800152c:	4b88      	ldr	r3, [pc, #544]	; (8001750 <HAL_ADC_Init+0x294>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	099b      	lsrs	r3, r3, #6
 8001532:	4a88      	ldr	r2, [pc, #544]	; (8001754 <HAL_ADC_Init+0x298>)
 8001534:	fba2 2303 	umull	r2, r3, r2, r3
 8001538:	099b      	lsrs	r3, r3, #6
 800153a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800153c:	e002      	b.n	8001544 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	3b01      	subs	r3, #1
 8001542:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1f9      	bne.n	800153e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff ff3e 	bl	80013d0 <LL_ADC_IsInternalRegulatorEnabled>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d10d      	bne.n	8001576 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800155e:	f043 0210 	orr.w	r2, r3, #16
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156a:	f043 0201 	orr.w	r2, r3, #1
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff ff78 	bl	8001470 <LL_ADC_REG_IsConversionOngoing>
 8001580:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001586:	f003 0310 	and.w	r3, r3, #16
 800158a:	2b00      	cmp	r3, #0
 800158c:	f040 80d2 	bne.w	8001734 <HAL_ADC_Init+0x278>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	2b00      	cmp	r3, #0
 8001594:	f040 80ce 	bne.w	8001734 <HAL_ADC_Init+0x278>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800159c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80015a0:	f043 0202 	orr.w	r2, r3, #2
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff37 	bl	8001420 <LL_ADC_IsEnabled>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d110      	bne.n	80015da <HAL_ADC_Init+0x11e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80015b8:	4867      	ldr	r0, [pc, #412]	; (8001758 <HAL_ADC_Init+0x29c>)
 80015ba:	f7ff ff31 	bl	8001420 <LL_ADC_IsEnabled>
 80015be:	4604      	mov	r4, r0
 80015c0:	4866      	ldr	r0, [pc, #408]	; (800175c <HAL_ADC_Init+0x2a0>)
 80015c2:	f7ff ff2d 	bl	8001420 <LL_ADC_IsEnabled>
 80015c6:	4603      	mov	r3, r0
 80015c8:	4323      	orrs	r3, r4
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d105      	bne.n	80015da <HAL_ADC_Init+0x11e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	4619      	mov	r1, r3
 80015d4:	4862      	ldr	r0, [pc, #392]	; (8001760 <HAL_ADC_Init+0x2a4>)
 80015d6:	f7ff fd89 	bl	80010ec <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	7d5b      	ldrb	r3, [r3, #21]
 80015de:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015e4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 80015ea:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	7f1b      	ldrb	r3, [r3, #28]
 80015f0:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	7f1b      	ldrb	r3, [r3, #28]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d106      	bne.n	800160c <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a1b      	ldr	r3, [r3, #32]
 8001602:	3b01      	subs	r3, #1
 8001604:	045b      	lsls	r3, r3, #17
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4313      	orrs	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001610:	2b00      	cmp	r3, #0
 8001612:	d009      	beq.n	8001628 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001618:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001620:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4313      	orrs	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68da      	ldr	r2, [r3, #12]
 800162e:	4b4d      	ldr	r3, [pc, #308]	; (8001764 <HAL_ADC_Init+0x2a8>)
 8001630:	4013      	ands	r3, r2
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	6812      	ldr	r2, [r2, #0]
 8001636:	69b9      	ldr	r1, [r7, #24]
 8001638:	430b      	orrs	r3, r1
 800163a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff15 	bl	8001470 <LL_ADC_REG_IsConversionOngoing>
 8001646:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ff22 	bl	8001496 <LL_ADC_INJ_IsConversionOngoing>
 8001652:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d14a      	bne.n	80016f0 <HAL_ADC_Init+0x234>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d147      	bne.n	80016f0 <HAL_ADC_Init+0x234>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	7d1b      	ldrb	r3, [r3, #20]
 8001664:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	68da      	ldr	r2, [r3, #12]
 8001674:	4b3c      	ldr	r3, [pc, #240]	; (8001768 <HAL_ADC_Init+0x2ac>)
 8001676:	4013      	ands	r3, r2
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	69b9      	ldr	r1, [r7, #24]
 800167e:	430b      	orrs	r3, r1
 8001680:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001688:	2b01      	cmp	r3, #1
 800168a:	d11b      	bne.n	80016c4 <HAL_ADC_Init+0x208>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001690:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	691a      	ldr	r2, [r3, #16]
 8001698:	4b34      	ldr	r3, [pc, #208]	; (800176c <HAL_ADC_Init+0x2b0>)
 800169a:	4013      	ands	r3, r2
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80016a0:	3a01      	subs	r2, #1
 80016a2:	0411      	lsls	r1, r2, #16
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016a8:	4311      	orrs	r1, r2
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80016ae:	4311      	orrs	r1, r2
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80016b4:	430a      	orrs	r2, r1
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f042 0201 	orr.w	r2, r2, #1
 80016c0:	611a      	str	r2, [r3, #16]
 80016c2:	e007      	b.n	80016d4 <HAL_ADC_Init+0x218>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	691a      	ldr	r2, [r3, #16]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 0201 	bic.w	r2, r2, #1
 80016d2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 fcb4 	bl	8002058 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d10c      	bne.n	8001712 <HAL_ADC_Init+0x256>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f023 010f 	bic.w	r1, r3, #15
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	1e5a      	subs	r2, r3, #1
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	430a      	orrs	r2, r1
 800170e:	631a      	str	r2, [r3, #48]	; 0x30
 8001710:	e007      	b.n	8001722 <HAL_ADC_Init+0x266>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 020f 	bic.w	r2, r2, #15
 8001720:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001726:	f023 0303 	bic.w	r3, r3, #3
 800172a:	f043 0201 	orr.w	r2, r3, #1
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	655a      	str	r2, [r3, #84]	; 0x54
 8001732:	e007      	b.n	8001744 <HAL_ADC_Init+0x288>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001738:	f043 0210 	orr.w	r2, r3, #16
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001744:	7ffb      	ldrb	r3, [r7, #31]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3724      	adds	r7, #36	; 0x24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd90      	pop	{r4, r7, pc}
 800174e:	bf00      	nop
 8001750:	24000000 	.word	0x24000000
 8001754:	053e2d63 	.word	0x053e2d63
 8001758:	40022000 	.word	0x40022000
 800175c:	40022100 	.word	0x40022100
 8001760:	40022300 	.word	0x40022300
 8001764:	fff0c003 	.word	0xfff0c003
 8001768:	ffffbffc 	.word	0xffffbffc
 800176c:	fc00f81e 	.word	0xfc00f81e

08001770 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800177c:	484f      	ldr	r0, [pc, #316]	; (80018bc <HAL_ADC_Start_DMA+0x14c>)
 800177e:	f7ff fddf 	bl	8001340 <LL_ADC_GetMultimode>
 8001782:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fe71 	bl	8001470 <LL_ADC_REG_IsConversionOngoing>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	f040 808c 	bne.w	80018ae <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800179c:	2b01      	cmp	r3, #1
 800179e:	d101      	bne.n	80017a4 <HAL_ADC_Start_DMA+0x34>
 80017a0:	2302      	movs	r3, #2
 80017a2:	e087      	b.n	80018b4 <HAL_ADC_Start_DMA+0x144>
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d005      	beq.n	80017be <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	2b05      	cmp	r3, #5
 80017b6:	d002      	beq.n	80017be <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	2b09      	cmp	r3, #9
 80017bc:	d170      	bne.n	80018a0 <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	f000 fb42 	bl	8001e48 <ADC_Enable>
 80017c4:	4603      	mov	r3, r0
 80017c6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80017c8:	7dfb      	ldrb	r3, [r7, #23]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d163      	bne.n	8001896 <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80017d2:	4b3b      	ldr	r3, [pc, #236]	; (80018c0 <HAL_ADC_Start_DMA+0x150>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a38      	ldr	r2, [pc, #224]	; (80018c4 <HAL_ADC_Start_DMA+0x154>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d002      	beq.n	80017ee <HAL_ADC_Start_DMA+0x7e>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	e000      	b.n	80017f0 <HAL_ADC_Start_DMA+0x80>
 80017ee:	4b36      	ldr	r3, [pc, #216]	; (80018c8 <HAL_ADC_Start_DMA+0x158>)
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	6812      	ldr	r2, [r2, #0]
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d002      	beq.n	80017fe <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d105      	bne.n	800180a <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001802:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800180e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d006      	beq.n	8001824 <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181a:	f023 0206 	bic.w	r2, r3, #6
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	659a      	str	r2, [r3, #88]	; 0x58
 8001822:	e002      	b.n	800182a <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2200      	movs	r2, #0
 8001828:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182e:	4a27      	ldr	r2, [pc, #156]	; (80018cc <HAL_ADC_Start_DMA+0x15c>)
 8001830:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001836:	4a26      	ldr	r2, [pc, #152]	; (80018d0 <HAL_ADC_Start_DMA+0x160>)
 8001838:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183e:	4a25      	ldr	r2, [pc, #148]	; (80018d4 <HAL_ADC_Start_DMA+0x164>)
 8001840:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	221c      	movs	r2, #28
 8001848:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f042 0210 	orr.w	r2, r2, #16
 8001860:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186a:	4619      	mov	r1, r3
 800186c:	4610      	mov	r0, r2
 800186e:	f7ff fd04 	bl	800127a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	3340      	adds	r3, #64	; 0x40
 800187c:	4619      	mov	r1, r3
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f001 fa01 	bl	8002c88 <HAL_DMA_Start_IT>
 8001886:	4603      	mov	r3, r0
 8001888:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff fdda 	bl	8001448 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001894:	e00d      	b.n	80018b2 <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800189e:	e008      	b.n	80018b2 <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80018ac:	e001      	b.n	80018b2 <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80018ae:	2302      	movs	r3, #2
 80018b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80018b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40022300 	.word	0x40022300
 80018c0:	fffff0fe 	.word	0xfffff0fe
 80018c4:	40022100 	.word	0x40022100
 80018c8:	40022000 	.word	0x40022000
 80018cc:	08001f31 	.word	0x08001f31
 80018d0:	08002009 	.word	0x08002009
 80018d4:	08002025 	.word	0x08002025

080018d8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80018ec:	b590      	push	{r4, r7, lr}
 80018ee:	b099      	sub	sp, #100	; 0x64
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	4aa1      	ldr	r2, [pc, #644]	; (8001b8c <HAL_ADC_ConfigChannel+0x2a0>)
 8001906:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800190e:	2b01      	cmp	r3, #1
 8001910:	d101      	bne.n	8001916 <HAL_ADC_ConfigChannel+0x2a>
 8001912:	2302      	movs	r3, #2
 8001914:	e283      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x532>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fda4 	bl	8001470 <LL_ADC_REG_IsConversionOngoing>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	f040 8268 	bne.w	8001e00 <HAL_ADC_ConfigChannel+0x514>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001938:	2b00      	cmp	r3, #0
 800193a:	d108      	bne.n	800194e <HAL_ADC_ConfigChannel+0x62>
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	0e9b      	lsrs	r3, r3, #26
 8001942:	f003 031f 	and.w	r3, r3, #31
 8001946:	2201      	movs	r2, #1
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	e00f      	b.n	800196e <HAL_ADC_ConfigChannel+0x82>
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001954:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001956:	fa93 f3a3 	rbit	r3, r3
 800195a:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800195c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800195e:	fab3 f383 	clz	r3, r3
 8001962:	b2db      	uxtb	r3, r3
 8001964:	f003 031f 	and.w	r3, r3, #31
 8001968:	2201      	movs	r2, #1
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	6812      	ldr	r2, [r2, #0]
 8001972:	69d1      	ldr	r1, [r2, #28]
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6812      	ldr	r2, [r2, #0]
 8001978:	430b      	orrs	r3, r1
 800197a:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6818      	ldr	r0, [r3, #0]
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	6859      	ldr	r1, [r3, #4]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	f7ff fc4a 	bl	8001222 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff fd6c 	bl	8001470 <LL_ADC_REG_IsConversionOngoing>
 8001998:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff fd79 	bl	8001496 <LL_ADC_INJ_IsConversionOngoing>
 80019a4:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f040 80a0 	bne.w	8001aee <HAL_ADC_ConfigChannel+0x202>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f040 809c 	bne.w	8001aee <HAL_ADC_ConfigChannel+0x202>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6818      	ldr	r0, [r3, #0]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	6819      	ldr	r1, [r3, #0]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	461a      	mov	r2, r3
 80019c4:	f7ff fc6c 	bl	80012a0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	f003 0310 	and.w	r3, r3, #16
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10b      	bne.n	80019ee <HAL_ADC_ConfigChannel+0x102>
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	695a      	ldr	r2, [r3, #20]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	089b      	lsrs	r3, r3, #2
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	e00a      	b.n	8001a04 <HAL_ADC_ConfigChannel+0x118>
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	695a      	ldr	r2, [r3, #20]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	089b      	lsrs	r3, r3, #2
 80019fa:	f003 0304 	and.w	r3, r3, #4
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	d027      	beq.n	8001a5e <HAL_ADC_ConfigChannel+0x172>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6818      	ldr	r0, [r3, #0]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	6919      	ldr	r1, [r3, #16]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a1c:	f7ff fb9a 	bl	8001154 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6818      	ldr	r0, [r3, #0]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	6919      	ldr	r1, [r3, #16]
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	7e5b      	ldrb	r3, [r3, #25]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d102      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x14a>
 8001a30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001a34:	e000      	b.n	8001a38 <HAL_ADC_ConfigChannel+0x14c>
 8001a36:	2300      	movs	r3, #0
 8001a38:	461a      	mov	r2, r3
 8001a3a:	f7ff fbc4 	bl	80011c6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6818      	ldr	r0, [r3, #0]
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	6919      	ldr	r1, [r3, #16]
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	7e1b      	ldrb	r3, [r3, #24]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d102      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x168>
 8001a4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a52:	e000      	b.n	8001a56 <HAL_ADC_ConfigChannel+0x16a>
 8001a54:	2300      	movs	r3, #0
 8001a56:	461a      	mov	r2, r3
 8001a58:	f7ff fb9c 	bl	8001194 <LL_ADC_SetDataRightShift>
 8001a5c:	e047      	b.n	8001aee <HAL_ADC_ConfigChannel+0x202>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	069b      	lsls	r3, r3, #26
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d107      	bne.n	8001a82 <HAL_ADC_ConfigChannel+0x196>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a80:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	069b      	lsls	r3, r3, #26
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d107      	bne.n	8001aa6 <HAL_ADC_ConfigChannel+0x1ba>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001aa4:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001aac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	069b      	lsls	r3, r3, #26
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d107      	bne.n	8001aca <HAL_ADC_ConfigChannel+0x1de>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ac8:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ad0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	069b      	lsls	r3, r3, #26
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d107      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x202>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001aec:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fc94 	bl	8001420 <LL_ADC_IsEnabled>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f040 8189 	bne.w	8001e12 <HAL_ADC_ConfigChannel+0x526>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6818      	ldr	r0, [r3, #0]
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	6819      	ldr	r1, [r3, #0]
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	f7ff fbf3 	bl	80012f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	4a1d      	ldr	r2, [pc, #116]	; (8001b8c <HAL_ADC_ConfigChannel+0x2a0>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	f040 80ff 	bne.w	8001d1c <HAL_ADC_ConfigChannel+0x430>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10b      	bne.n	8001b46 <HAL_ADC_ConfigChannel+0x25a>
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	0e9b      	lsrs	r3, r3, #26
 8001b34:	3301      	adds	r3, #1
 8001b36:	f003 031f 	and.w	r3, r3, #31
 8001b3a:	2b09      	cmp	r3, #9
 8001b3c:	bf94      	ite	ls
 8001b3e:	2301      	movls	r3, #1
 8001b40:	2300      	movhi	r3, #0
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	e012      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x280>
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b4e:	fa93 f3a3 	rbit	r3, r3
 8001b52:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b56:	fab3 f383 	clz	r3, r3
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	f003 031f 	and.w	r3, r3, #31
 8001b62:	2b09      	cmp	r3, #9
 8001b64:	bf94      	ite	ls
 8001b66:	2301      	movls	r3, #1
 8001b68:	2300      	movhi	r3, #0
 8001b6a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d066      	beq.n	8001c3e <HAL_ADC_ConfigChannel+0x352>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d109      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x2a4>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	0e9b      	lsrs	r3, r3, #26
 8001b82:	3301      	adds	r3, #1
 8001b84:	069b      	lsls	r3, r3, #26
 8001b86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b8a:	e010      	b.n	8001bae <HAL_ADC_ConfigChannel+0x2c2>
 8001b8c:	47ff0000 	.word	0x47ff0000
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b98:	fa93 f3a3 	rbit	r3, r3
 8001b9c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba0:	fab3 f383 	clz	r3, r3
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	069b      	lsls	r3, r3, #26
 8001baa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d109      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x2e2>
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	0e9b      	lsrs	r3, r3, #26
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	f003 031f 	and.w	r3, r3, #31
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bcc:	e010      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x304>
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bd6:	fa93 f3a3 	rbit	r3, r3
 8001bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bde:	fab3 f383 	clz	r3, r3
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	3301      	adds	r3, #1
 8001be6:	f003 031f 	and.w	r3, r3, #31
 8001bea:	2101      	movs	r1, #1
 8001bec:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf0:	ea42 0103 	orr.w	r1, r2, r3
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d10a      	bne.n	8001c16 <HAL_ADC_ConfigChannel+0x32a>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	0e9b      	lsrs	r3, r3, #26
 8001c06:	3301      	adds	r3, #1
 8001c08:	f003 021f 	and.w	r2, r3, #31
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	4413      	add	r3, r2
 8001c12:	051b      	lsls	r3, r3, #20
 8001c14:	e011      	b.n	8001c3a <HAL_ADC_ConfigChannel+0x34e>
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c1e:	fa93 f3a3 	rbit	r3, r3
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	fab3 f383 	clz	r3, r3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	f003 021f 	and.w	r2, r3, #31
 8001c32:	4613      	mov	r3, r2
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	4413      	add	r3, r2
 8001c38:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c3a:	430b      	orrs	r3, r1
 8001c3c:	e069      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x426>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d107      	bne.n	8001c5a <HAL_ADC_ConfigChannel+0x36e>
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	0e9b      	lsrs	r3, r3, #26
 8001c50:	3301      	adds	r3, #1
 8001c52:	069b      	lsls	r3, r3, #26
 8001c54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c58:	e00e      	b.n	8001c78 <HAL_ADC_ConfigChannel+0x38c>
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c60:	6a3b      	ldr	r3, [r7, #32]
 8001c62:	fa93 f3a3 	rbit	r3, r3
 8001c66:	61fb      	str	r3, [r7, #28]
  return result;
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	fab3 f383 	clz	r3, r3
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	3301      	adds	r3, #1
 8001c72:	069b      	lsls	r3, r3, #26
 8001c74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d109      	bne.n	8001c98 <HAL_ADC_ConfigChannel+0x3ac>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	0e9b      	lsrs	r3, r3, #26
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	f003 031f 	and.w	r3, r3, #31
 8001c90:	2101      	movs	r1, #1
 8001c92:	fa01 f303 	lsl.w	r3, r1, r3
 8001c96:	e010      	b.n	8001cba <HAL_ADC_ConfigChannel+0x3ce>
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	fa93 f3a3 	rbit	r3, r3
 8001ca4:	617b      	str	r3, [r7, #20]
  return result;
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	fab3 f383 	clz	r3, r3
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	3301      	adds	r3, #1
 8001cb0:	f003 031f 	and.w	r3, r3, #31
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cba:	ea42 0103 	orr.w	r1, r2, r3
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10d      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x3fa>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	0e9b      	lsrs	r3, r3, #26
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	f003 021f 	and.w	r2, r3, #31
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	4413      	add	r3, r2
 8001cdc:	3b1e      	subs	r3, #30
 8001cde:	051b      	lsls	r3, r3, #20
 8001ce0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ce4:	e014      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x424>
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	fa93 f3a3 	rbit	r3, r3
 8001cf2:	60fb      	str	r3, [r7, #12]
  return result;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	fab3 f383 	clz	r3, r3
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	f003 021f 	and.w	r2, r3, #31
 8001d02:	4613      	mov	r3, r2
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	4413      	add	r3, r2
 8001d08:	3b1e      	subs	r3, #30
 8001d0a:	051b      	lsls	r3, r3, #20
 8001d0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d10:	430b      	orrs	r3, r1
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	6892      	ldr	r2, [r2, #8]
 8001d16:	4619      	mov	r1, r3
 8001d18:	f7ff fac2 	bl	80012a0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	da76      	bge.n	8001e12 <HAL_ADC_ConfigChannel+0x526>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d24:	4840      	ldr	r0, [pc, #256]	; (8001e28 <HAL_ADC_ConfigChannel+0x53c>)
 8001d26:	f7ff fa07 	bl	8001138 <LL_ADC_GetCommonPathInternalCh>
 8001d2a:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d2c:	483f      	ldr	r0, [pc, #252]	; (8001e2c <HAL_ADC_ConfigChannel+0x540>)
 8001d2e:	f7ff fb77 	bl	8001420 <LL_ADC_IsEnabled>
 8001d32:	4604      	mov	r4, r0
 8001d34:	483e      	ldr	r0, [pc, #248]	; (8001e30 <HAL_ADC_ConfigChannel+0x544>)
 8001d36:	f7ff fb73 	bl	8001420 <LL_ADC_IsEnabled>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	4323      	orrs	r3, r4
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d154      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x500>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a3b      	ldr	r2, [pc, #236]	; (8001e34 <HAL_ADC_ConfigChannel+0x548>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d121      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x4a4>
 8001d4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d11c      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x4a4>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a35      	ldr	r2, [pc, #212]	; (8001e30 <HAL_ADC_ConfigChannel+0x544>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d158      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d62:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d66:	4619      	mov	r1, r3
 8001d68:	482f      	ldr	r0, [pc, #188]	; (8001e28 <HAL_ADC_ConfigChannel+0x53c>)
 8001d6a:	f7ff f9d2 	bl	8001112 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001d6e:	4b32      	ldr	r3, [pc, #200]	; (8001e38 <HAL_ADC_ConfigChannel+0x54c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	099b      	lsrs	r3, r3, #6
 8001d74:	4a31      	ldr	r2, [pc, #196]	; (8001e3c <HAL_ADC_ConfigChannel+0x550>)
 8001d76:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7a:	099b      	lsrs	r3, r3, #6
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001d80:	e002      	b.n	8001d88 <HAL_ADC_ConfigChannel+0x49c>
              {
                wait_loop_index--;
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	3b01      	subs	r3, #1
 8001d86:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f9      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x496>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d8e:	e040      	b.n	8001e12 <HAL_ADC_ConfigChannel+0x526>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a2a      	ldr	r2, [pc, #168]	; (8001e40 <HAL_ADC_ConfigChannel+0x554>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d111      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x4d2>
 8001d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d10c      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x4d2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a21      	ldr	r2, [pc, #132]	; (8001e30 <HAL_ADC_ConfigChannel+0x544>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d131      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001dae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001db0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001db4:	4619      	mov	r1, r3
 8001db6:	481c      	ldr	r0, [pc, #112]	; (8001e28 <HAL_ADC_ConfigChannel+0x53c>)
 8001db8:	f7ff f9ab 	bl	8001112 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001dbc:	e029      	b.n	8001e12 <HAL_ADC_ConfigChannel+0x526>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a20      	ldr	r2, [pc, #128]	; (8001e44 <HAL_ADC_ConfigChannel+0x558>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d124      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x526>
 8001dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d11f      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x526>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a16      	ldr	r2, [pc, #88]	; (8001e30 <HAL_ADC_ConfigChannel+0x544>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d11a      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dde:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001de2:	4619      	mov	r1, r3
 8001de4:	4810      	ldr	r0, [pc, #64]	; (8001e28 <HAL_ADC_ConfigChannel+0x53c>)
 8001de6:	f7ff f994 	bl	8001112 <LL_ADC_SetCommonPathInternalCh>
 8001dea:	e012      	b.n	8001e12 <HAL_ADC_ConfigChannel+0x526>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df0:	f043 0220 	orr.w	r2, r3, #32
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001dfe:	e008      	b.n	8001e12 <HAL_ADC_ConfigChannel+0x526>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e04:	f043 0220 	orr.w	r2, r3, #32
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001e1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3764      	adds	r7, #100	; 0x64
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd90      	pop	{r4, r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40022300 	.word	0x40022300
 8001e2c:	40022000 	.word	0x40022000
 8001e30:	40022100 	.word	0x40022100
 8001e34:	cb840000 	.word	0xcb840000
 8001e38:	24000000 	.word	0x24000000
 8001e3c:	053e2d63 	.word	0x053e2d63
 8001e40:	bac04000 	.word	0xbac04000
 8001e44:	cfb80000 	.word	0xcfb80000

08001e48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff fae3 	bl	8001420 <LL_ADC_IsEnabled>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d15a      	bne.n	8001f16 <ADC_Enable+0xce>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	4b2e      	ldr	r3, [pc, #184]	; (8001f20 <ADC_Enable+0xd8>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00d      	beq.n	8001e8a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e72:	f043 0210 	orr.w	r2, r3, #16
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7e:	f043 0201 	orr.w	r2, r3, #1
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e046      	b.n	8001f18 <ADC_Enable+0xd0>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff fab2 	bl	80013f8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001e94:	f7ff f91e 	bl	80010d4 <HAL_GetTick>
 8001e98:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e9a:	4822      	ldr	r0, [pc, #136]	; (8001f24 <ADC_Enable+0xdc>)
 8001e9c:	f7ff fa50 	bl	8001340 <LL_ADC_GetMultimode>
 8001ea0:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a20      	ldr	r2, [pc, #128]	; (8001f28 <ADC_Enable+0xe0>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d002      	beq.n	8001eb2 <ADC_Enable+0x6a>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	e000      	b.n	8001eb4 <ADC_Enable+0x6c>
 8001eb2:	4b1e      	ldr	r3, [pc, #120]	; (8001f2c <ADC_Enable+0xe4>)
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6812      	ldr	r2, [r2, #0]
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d025      	beq.n	8001f08 <ADC_Enable+0xc0>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d129      	bne.n	8001f16 <ADC_Enable+0xce>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ec2:	e021      	b.n	8001f08 <ADC_Enable+0xc0>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff faa9 	bl	8001420 <LL_ADC_IsEnabled>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d104      	bne.n	8001ede <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff fa8d 	bl	80013f8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ede:	f7ff f8f9 	bl	80010d4 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d90d      	bls.n	8001f08 <ADC_Enable+0xc0>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef0:	f043 0210 	orr.w	r2, r3, #16
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efc:	f043 0201 	orr.w	r2, r3, #1
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e007      	b.n	8001f18 <ADC_Enable+0xd0>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d1d6      	bne.n	8001ec4 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	8000003f 	.word	0x8000003f
 8001f24:	40022300 	.word	0x40022300
 8001f28:	40022100 	.word	0x40022100
 8001f2c:	40022000 	.word	0x40022000

08001f30 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f3c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f42:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d14b      	bne.n	8001fe2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d021      	beq.n	8001fa8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff f947 	bl	80011fc <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d032      	beq.n	8001fda <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d12b      	bne.n	8001fda <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d11f      	bne.n	8001fda <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f9e:	f043 0201 	orr.w	r2, r3, #1
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	655a      	str	r2, [r3, #84]	; 0x54
 8001fa6:	e018      	b.n	8001fda <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d111      	bne.n	8001fda <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d105      	bne.n	8001fda <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd2:	f043 0201 	orr.w	r2, r3, #1
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f7fe fe20 	bl	8000c20 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001fe0:	e00e      	b.n	8002000 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe6:	f003 0310 	and.w	r3, r3, #16
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f7ff fc72 	bl	80018d8 <HAL_ADC_ErrorCallback>
}
 8001ff4:	e004      	b.n	8002000 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	4798      	blx	r3
}
 8002000:	bf00      	nop
 8002002:	3710      	adds	r7, #16
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002014:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f7fe fdf2 	bl	8000c00 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800201c:	bf00      	nop
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002030:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002036:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002042:	f043 0204 	orr.w	r2, r3, #4
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f7ff fc44 	bl	80018d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002050:	bf00      	nop
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002060:	4b56      	ldr	r3, [pc, #344]	; (80021bc <ADC_ConfigureBoostMode+0x164>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d01a      	beq.n	80020a2 <ADC_ConfigureBoostMode+0x4a>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800206c:	f003 fd2c 	bl	8005ac8 <HAL_RCC_GetHCLKFreq>
 8002070:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800207a:	d006      	beq.n	800208a <ADC_ConfigureBoostMode+0x32>
 800207c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002080:	d00b      	beq.n	800209a <ADC_ConfigureBoostMode+0x42>
 8002082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002086:	d000      	beq.n	800208a <ADC_ConfigureBoostMode+0x32>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8002088:	e05d      	b.n	8002146 <ADC_ConfigureBoostMode+0xee>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	0c1b      	lsrs	r3, r3, #16
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	fbb2 f3f3 	udiv	r3, r2, r3
 8002096:	60fb      	str	r3, [r7, #12]
        break;
 8002098:	e055      	b.n	8002146 <ADC_ConfigureBoostMode+0xee>
        freq /= 4UL;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	089b      	lsrs	r3, r3, #2
 800209e:	60fb      	str	r3, [r7, #12]
        break;
 80020a0:	e051      	b.n	8002146 <ADC_ConfigureBoostMode+0xee>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80020a2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80020a6:	f004 fc1f 	bl	80068e8 <HAL_RCCEx_GetPeriphCLKFreq>
 80020aa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80020b4:	d02a      	beq.n	800210c <ADC_ConfigureBoostMode+0xb4>
 80020b6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80020ba:	d813      	bhi.n	80020e4 <ADC_ConfigureBoostMode+0x8c>
 80020bc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80020c0:	d024      	beq.n	800210c <ADC_ConfigureBoostMode+0xb4>
 80020c2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80020c6:	d806      	bhi.n	80020d6 <ADC_ConfigureBoostMode+0x7e>
 80020c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80020cc:	d01e      	beq.n	800210c <ADC_ConfigureBoostMode+0xb4>
 80020ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80020d2:	d01b      	beq.n	800210c <ADC_ConfigureBoostMode+0xb4>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 80020d4:	e037      	b.n	8002146 <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 80020d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020da:	d017      	beq.n	800210c <ADC_ConfigureBoostMode+0xb4>
 80020dc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80020e0:	d014      	beq.n	800210c <ADC_ConfigureBoostMode+0xb4>
        break;
 80020e2:	e030      	b.n	8002146 <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 80020e4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80020e8:	d021      	beq.n	800212e <ADC_ConfigureBoostMode+0xd6>
 80020ea:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80020ee:	d806      	bhi.n	80020fe <ADC_ConfigureBoostMode+0xa6>
 80020f0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80020f4:	d013      	beq.n	800211e <ADC_ConfigureBoostMode+0xc6>
 80020f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020fa:	d014      	beq.n	8002126 <ADC_ConfigureBoostMode+0xce>
        break;
 80020fc:	e023      	b.n	8002146 <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 80020fe:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002102:	d018      	beq.n	8002136 <ADC_ConfigureBoostMode+0xde>
 8002104:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002108:	d019      	beq.n	800213e <ADC_ConfigureBoostMode+0xe6>
        break;
 800210a:	e01c      	b.n	8002146 <ADC_ConfigureBoostMode+0xee>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	0c9b      	lsrs	r3, r3, #18
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	fbb2 f3f3 	udiv	r3, r2, r3
 800211a:	60fb      	str	r3, [r7, #12]
        break;
 800211c:	e013      	b.n	8002146 <ADC_ConfigureBoostMode+0xee>
        freq /= 16UL;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	091b      	lsrs	r3, r3, #4
 8002122:	60fb      	str	r3, [r7, #12]
        break;
 8002124:	e00f      	b.n	8002146 <ADC_ConfigureBoostMode+0xee>
        freq /= 32UL;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	095b      	lsrs	r3, r3, #5
 800212a:	60fb      	str	r3, [r7, #12]
        break;
 800212c:	e00b      	b.n	8002146 <ADC_ConfigureBoostMode+0xee>
        freq /= 64UL;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	099b      	lsrs	r3, r3, #6
 8002132:	60fb      	str	r3, [r7, #12]
        break;
 8002134:	e007      	b.n	8002146 <ADC_ConfigureBoostMode+0xee>
        freq /= 128UL;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	09db      	lsrs	r3, r3, #7
 800213a:	60fb      	str	r3, [r7, #12]
        break;
 800213c:	e003      	b.n	8002146 <ADC_ConfigureBoostMode+0xee>
        freq /= 256UL;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	0a1b      	lsrs	r3, r3, #8
 8002142:	60fb      	str	r3, [r7, #12]
        break;
 8002144:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	085b      	lsrs	r3, r3, #1
 800214a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4a1c      	ldr	r2, [pc, #112]	; (80021c0 <ADC_ConfigureBoostMode+0x168>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d808      	bhi.n	8002166 <ADC_ConfigureBoostMode+0x10e>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002162:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002164:	e025      	b.n	80021b2 <ADC_ConfigureBoostMode+0x15a>
  else if (freq <= 12500000UL)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	4a16      	ldr	r2, [pc, #88]	; (80021c4 <ADC_ConfigureBoostMode+0x16c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d80a      	bhi.n	8002184 <ADC_ConfigureBoostMode+0x12c>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002180:	609a      	str	r2, [r3, #8]
}
 8002182:	e016      	b.n	80021b2 <ADC_ConfigureBoostMode+0x15a>
  else if (freq <= 25000000UL)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4a10      	ldr	r2, [pc, #64]	; (80021c8 <ADC_ConfigureBoostMode+0x170>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d80a      	bhi.n	80021a2 <ADC_ConfigureBoostMode+0x14a>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800219e:	609a      	str	r2, [r3, #8]
}
 80021a0:	e007      	b.n	80021b2 <ADC_ConfigureBoostMode+0x15a>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80021b0:	609a      	str	r2, [r3, #8]
}
 80021b2:	bf00      	nop
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40022300 	.word	0x40022300
 80021c0:	005f5e10 	.word	0x005f5e10
 80021c4:	00bebc20 	.word	0x00bebc20
 80021c8:	017d7840 	.word	0x017d7840

080021cc <LL_ADC_IsEnabled>:
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <LL_ADC_IsEnabled+0x18>
 80021e0:	2301      	movs	r3, #1
 80021e2:	e000      	b.n	80021e6 <LL_ADC_IsEnabled+0x1a>
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <LL_ADC_REG_IsConversionOngoing>:
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 0304 	and.w	r3, r3, #4
 8002202:	2b04      	cmp	r3, #4
 8002204:	d101      	bne.n	800220a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002206:	2301      	movs	r3, #1
 8002208:	e000      	b.n	800220c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002218:	b590      	push	{r4, r7, lr}
 800221a:	b09f      	sub	sp, #124	; 0x7c
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002222:	2300      	movs	r3, #0
 8002224:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800222e:	2b01      	cmp	r3, #1
 8002230:	d101      	bne.n	8002236 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002232:	2302      	movs	r3, #2
 8002234:	e07c      	b.n	8002330 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a3d      	ldr	r2, [pc, #244]	; (8002338 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d102      	bne.n	800224e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002248:	4b3c      	ldr	r3, [pc, #240]	; (800233c <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	e001      	b.n	8002252 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800224e:	2300      	movs	r3, #0
 8002250:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d10b      	bne.n	8002270 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800225c:	f043 0220 	orr.w	r2, r3, #32
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e05f      	b.n	8002330 <HAL_ADCEx_MultiModeConfigChannel+0x118>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff ffbd 	bl	80021f2 <LL_ADC_REG_IsConversionOngoing>
 8002278:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff ffb7 	bl	80021f2 <LL_ADC_REG_IsConversionOngoing>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d141      	bne.n	800230e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800228a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800228c:	2b00      	cmp	r3, #0
 800228e:	d13e      	bne.n	800230e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002290:	4b2b      	ldr	r3, [pc, #172]	; (8002340 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002292:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d020      	beq.n	80022de <HAL_ADCEx_MultiModeConfigChannel+0xc6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800229c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	431a      	orrs	r2, r3
 80022aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ac:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022ae:	4822      	ldr	r0, [pc, #136]	; (8002338 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 80022b0:	f7ff ff8c 	bl	80021cc <LL_ADC_IsEnabled>
 80022b4:	4604      	mov	r4, r0
 80022b6:	4821      	ldr	r0, [pc, #132]	; (800233c <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 80022b8:	f7ff ff88 	bl	80021cc <LL_ADC_IsEnabled>
 80022bc:	4603      	mov	r3, r0
 80022be:	4323      	orrs	r3, r4
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d12e      	bne.n	8002322 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80022c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	4b1e      	ldr	r3, [pc, #120]	; (8002344 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80022ca:	4013      	ands	r3, r2
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	6811      	ldr	r1, [r2, #0]
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	6892      	ldr	r2, [r2, #8]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	431a      	orrs	r2, r3
 80022d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022da:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80022dc:	e021      	b.n	8002322 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80022de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022e8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022ea:	4813      	ldr	r0, [pc, #76]	; (8002338 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 80022ec:	f7ff ff6e 	bl	80021cc <LL_ADC_IsEnabled>
 80022f0:	4604      	mov	r4, r0
 80022f2:	4812      	ldr	r0, [pc, #72]	; (800233c <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 80022f4:	f7ff ff6a 	bl	80021cc <LL_ADC_IsEnabled>
 80022f8:	4603      	mov	r3, r0
 80022fa:	4323      	orrs	r3, r4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d110      	bne.n	8002322 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002306:	4013      	ands	r3, r2
 8002308:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800230a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800230c:	e009      	b.n	8002322 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002312:	f043 0220 	orr.w	r2, r3, #32
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002320:	e000      	b.n	8002324 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002322:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800232c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002330:	4618      	mov	r0, r3
 8002332:	377c      	adds	r7, #124	; 0x7c
 8002334:	46bd      	mov	sp, r7
 8002336:	bd90      	pop	{r4, r7, pc}
 8002338:	40022000 	.word	0x40022000
 800233c:	40022100 	.word	0x40022100
 8002340:	40022300 	.word	0x40022300
 8002344:	fffff0e0 	.word	0xfffff0e0

08002348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002358:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <__NVIC_SetPriorityGrouping+0x40>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002364:	4013      	ands	r3, r2
 8002366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002370:	4b06      	ldr	r3, [pc, #24]	; (800238c <__NVIC_SetPriorityGrouping+0x44>)
 8002372:	4313      	orrs	r3, r2
 8002374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002376:	4a04      	ldr	r2, [pc, #16]	; (8002388 <__NVIC_SetPriorityGrouping+0x40>)
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	60d3      	str	r3, [r2, #12]
}
 800237c:	bf00      	nop
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	e000ed00 	.word	0xe000ed00
 800238c:	05fa0000 	.word	0x05fa0000

08002390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002394:	4b04      	ldr	r3, [pc, #16]	; (80023a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	0a1b      	lsrs	r3, r3, #8
 800239a:	f003 0307 	and.w	r3, r3, #7
}
 800239e:	4618      	mov	r0, r3
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	db0b      	blt.n	80023d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023be:	88fb      	ldrh	r3, [r7, #6]
 80023c0:	f003 021f 	and.w	r2, r3, #31
 80023c4:	4907      	ldr	r1, [pc, #28]	; (80023e4 <__NVIC_EnableIRQ+0x38>)
 80023c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023ca:	095b      	lsrs	r3, r3, #5
 80023cc:	2001      	movs	r0, #1
 80023ce:	fa00 f202 	lsl.w	r2, r0, r2
 80023d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	e000e100 	.word	0xe000e100

080023e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	6039      	str	r1, [r7, #0]
 80023f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	db0a      	blt.n	8002412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	490c      	ldr	r1, [pc, #48]	; (8002434 <__NVIC_SetPriority+0x4c>)
 8002402:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002406:	0112      	lsls	r2, r2, #4
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	440b      	add	r3, r1
 800240c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002410:	e00a      	b.n	8002428 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	b2da      	uxtb	r2, r3
 8002416:	4908      	ldr	r1, [pc, #32]	; (8002438 <__NVIC_SetPriority+0x50>)
 8002418:	88fb      	ldrh	r3, [r7, #6]
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	3b04      	subs	r3, #4
 8002420:	0112      	lsls	r2, r2, #4
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	440b      	add	r3, r1
 8002426:	761a      	strb	r2, [r3, #24]
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	e000e100 	.word	0xe000e100
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800243c:	b480      	push	{r7}
 800243e:	b089      	sub	sp, #36	; 0x24
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f1c3 0307 	rsb	r3, r3, #7
 8002456:	2b04      	cmp	r3, #4
 8002458:	bf28      	it	cs
 800245a:	2304      	movcs	r3, #4
 800245c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	3304      	adds	r3, #4
 8002462:	2b06      	cmp	r3, #6
 8002464:	d902      	bls.n	800246c <NVIC_EncodePriority+0x30>
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	3b03      	subs	r3, #3
 800246a:	e000      	b.n	800246e <NVIC_EncodePriority+0x32>
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002470:	f04f 32ff 	mov.w	r2, #4294967295
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43da      	mvns	r2, r3
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	401a      	ands	r2, r3
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002484:	f04f 31ff 	mov.w	r1, #4294967295
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	fa01 f303 	lsl.w	r3, r1, r3
 800248e:	43d9      	mvns	r1, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002494:	4313      	orrs	r3, r2
         );
}
 8002496:	4618      	mov	r0, r3
 8002498:	3724      	adds	r7, #36	; 0x24
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
	...

080024a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024b4:	d301      	bcc.n	80024ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024b6:	2301      	movs	r3, #1
 80024b8:	e00f      	b.n	80024da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ba:	4a0a      	ldr	r2, [pc, #40]	; (80024e4 <SysTick_Config+0x40>)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3b01      	subs	r3, #1
 80024c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024c2:	210f      	movs	r1, #15
 80024c4:	f04f 30ff 	mov.w	r0, #4294967295
 80024c8:	f7ff ff8e 	bl	80023e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024cc:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <SysTick_Config+0x40>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024d2:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <SysTick_Config+0x40>)
 80024d4:	2207      	movs	r2, #7
 80024d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	e000e010 	.word	0xe000e010

080024e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff ff29 	bl	8002348 <__NVIC_SetPriorityGrouping>
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b086      	sub	sp, #24
 8002502:	af00      	add	r7, sp, #0
 8002504:	4603      	mov	r3, r0
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	607a      	str	r2, [r7, #4]
 800250a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800250c:	f7ff ff40 	bl	8002390 <__NVIC_GetPriorityGrouping>
 8002510:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	68b9      	ldr	r1, [r7, #8]
 8002516:	6978      	ldr	r0, [r7, #20]
 8002518:	f7ff ff90 	bl	800243c <NVIC_EncodePriority>
 800251c:	4602      	mov	r2, r0
 800251e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002522:	4611      	mov	r1, r2
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff ff5f 	bl	80023e8 <__NVIC_SetPriority>
}
 800252a:	bf00      	nop
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	4603      	mov	r3, r0
 800253a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800253c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff33 	bl	80023ac <__NVIC_EnableIRQ>
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff ffa4 	bl	80024a4 <SysTick_Config>
 800255c:	4603      	mov	r3, r0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002570:	f7fe fdb0 	bl	80010d4 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e37f      	b.n	8002c80 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a66      	ldr	r2, [pc, #408]	; (8002720 <HAL_DMA_Init+0x1b8>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d04a      	beq.n	8002620 <HAL_DMA_Init+0xb8>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a65      	ldr	r2, [pc, #404]	; (8002724 <HAL_DMA_Init+0x1bc>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d045      	beq.n	8002620 <HAL_DMA_Init+0xb8>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a63      	ldr	r2, [pc, #396]	; (8002728 <HAL_DMA_Init+0x1c0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d040      	beq.n	8002620 <HAL_DMA_Init+0xb8>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a62      	ldr	r2, [pc, #392]	; (800272c <HAL_DMA_Init+0x1c4>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d03b      	beq.n	8002620 <HAL_DMA_Init+0xb8>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a60      	ldr	r2, [pc, #384]	; (8002730 <HAL_DMA_Init+0x1c8>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d036      	beq.n	8002620 <HAL_DMA_Init+0xb8>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a5f      	ldr	r2, [pc, #380]	; (8002734 <HAL_DMA_Init+0x1cc>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d031      	beq.n	8002620 <HAL_DMA_Init+0xb8>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a5d      	ldr	r2, [pc, #372]	; (8002738 <HAL_DMA_Init+0x1d0>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d02c      	beq.n	8002620 <HAL_DMA_Init+0xb8>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a5c      	ldr	r2, [pc, #368]	; (800273c <HAL_DMA_Init+0x1d4>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d027      	beq.n	8002620 <HAL_DMA_Init+0xb8>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a5a      	ldr	r2, [pc, #360]	; (8002740 <HAL_DMA_Init+0x1d8>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d022      	beq.n	8002620 <HAL_DMA_Init+0xb8>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a59      	ldr	r2, [pc, #356]	; (8002744 <HAL_DMA_Init+0x1dc>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d01d      	beq.n	8002620 <HAL_DMA_Init+0xb8>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a57      	ldr	r2, [pc, #348]	; (8002748 <HAL_DMA_Init+0x1e0>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d018      	beq.n	8002620 <HAL_DMA_Init+0xb8>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a56      	ldr	r2, [pc, #344]	; (800274c <HAL_DMA_Init+0x1e4>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d013      	beq.n	8002620 <HAL_DMA_Init+0xb8>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a54      	ldr	r2, [pc, #336]	; (8002750 <HAL_DMA_Init+0x1e8>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d00e      	beq.n	8002620 <HAL_DMA_Init+0xb8>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a53      	ldr	r2, [pc, #332]	; (8002754 <HAL_DMA_Init+0x1ec>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d009      	beq.n	8002620 <HAL_DMA_Init+0xb8>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a51      	ldr	r2, [pc, #324]	; (8002758 <HAL_DMA_Init+0x1f0>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d004      	beq.n	8002620 <HAL_DMA_Init+0xb8>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a50      	ldr	r2, [pc, #320]	; (800275c <HAL_DMA_Init+0x1f4>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d101      	bne.n	8002624 <HAL_DMA_Init+0xbc>
 8002620:	2301      	movs	r3, #1
 8002622:	e000      	b.n	8002626 <HAL_DMA_Init+0xbe>
 8002624:	2300      	movs	r3, #0
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 813c 	beq.w	80028a4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2202      	movs	r2, #2
 8002638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a37      	ldr	r2, [pc, #220]	; (8002720 <HAL_DMA_Init+0x1b8>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d04a      	beq.n	80026dc <HAL_DMA_Init+0x174>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a36      	ldr	r2, [pc, #216]	; (8002724 <HAL_DMA_Init+0x1bc>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d045      	beq.n	80026dc <HAL_DMA_Init+0x174>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a34      	ldr	r2, [pc, #208]	; (8002728 <HAL_DMA_Init+0x1c0>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d040      	beq.n	80026dc <HAL_DMA_Init+0x174>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a33      	ldr	r2, [pc, #204]	; (800272c <HAL_DMA_Init+0x1c4>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d03b      	beq.n	80026dc <HAL_DMA_Init+0x174>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a31      	ldr	r2, [pc, #196]	; (8002730 <HAL_DMA_Init+0x1c8>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d036      	beq.n	80026dc <HAL_DMA_Init+0x174>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a30      	ldr	r2, [pc, #192]	; (8002734 <HAL_DMA_Init+0x1cc>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d031      	beq.n	80026dc <HAL_DMA_Init+0x174>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a2e      	ldr	r2, [pc, #184]	; (8002738 <HAL_DMA_Init+0x1d0>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d02c      	beq.n	80026dc <HAL_DMA_Init+0x174>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a2d      	ldr	r2, [pc, #180]	; (800273c <HAL_DMA_Init+0x1d4>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d027      	beq.n	80026dc <HAL_DMA_Init+0x174>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a2b      	ldr	r2, [pc, #172]	; (8002740 <HAL_DMA_Init+0x1d8>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d022      	beq.n	80026dc <HAL_DMA_Init+0x174>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a2a      	ldr	r2, [pc, #168]	; (8002744 <HAL_DMA_Init+0x1dc>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d01d      	beq.n	80026dc <HAL_DMA_Init+0x174>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a28      	ldr	r2, [pc, #160]	; (8002748 <HAL_DMA_Init+0x1e0>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d018      	beq.n	80026dc <HAL_DMA_Init+0x174>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a27      	ldr	r2, [pc, #156]	; (800274c <HAL_DMA_Init+0x1e4>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d013      	beq.n	80026dc <HAL_DMA_Init+0x174>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a25      	ldr	r2, [pc, #148]	; (8002750 <HAL_DMA_Init+0x1e8>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d00e      	beq.n	80026dc <HAL_DMA_Init+0x174>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a24      	ldr	r2, [pc, #144]	; (8002754 <HAL_DMA_Init+0x1ec>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d009      	beq.n	80026dc <HAL_DMA_Init+0x174>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a22      	ldr	r2, [pc, #136]	; (8002758 <HAL_DMA_Init+0x1f0>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d004      	beq.n	80026dc <HAL_DMA_Init+0x174>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a21      	ldr	r2, [pc, #132]	; (800275c <HAL_DMA_Init+0x1f4>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d108      	bne.n	80026ee <HAL_DMA_Init+0x186>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0201 	bic.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	e007      	b.n	80026fe <HAL_DMA_Init+0x196>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 0201 	bic.w	r2, r2, #1
 80026fc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80026fe:	e02f      	b.n	8002760 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002700:	f7fe fce8 	bl	80010d4 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b05      	cmp	r3, #5
 800270c:	d928      	bls.n	8002760 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2220      	movs	r2, #32
 8002712:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2203      	movs	r2, #3
 8002718:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e2af      	b.n	8002c80 <HAL_DMA_Init+0x718>
 8002720:	40020010 	.word	0x40020010
 8002724:	40020028 	.word	0x40020028
 8002728:	40020040 	.word	0x40020040
 800272c:	40020058 	.word	0x40020058
 8002730:	40020070 	.word	0x40020070
 8002734:	40020088 	.word	0x40020088
 8002738:	400200a0 	.word	0x400200a0
 800273c:	400200b8 	.word	0x400200b8
 8002740:	40020410 	.word	0x40020410
 8002744:	40020428 	.word	0x40020428
 8002748:	40020440 	.word	0x40020440
 800274c:	40020458 	.word	0x40020458
 8002750:	40020470 	.word	0x40020470
 8002754:	40020488 	.word	0x40020488
 8002758:	400204a0 	.word	0x400204a0
 800275c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1c8      	bne.n	8002700 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	4b73      	ldr	r3, [pc, #460]	; (8002948 <HAL_DMA_Init+0x3e0>)
 800277a:	4013      	ands	r3, r2
 800277c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002786:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002792:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800279e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	2b04      	cmp	r3, #4
 80027b2:	d107      	bne.n	80027c4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	4313      	orrs	r3, r2
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	617b      	str	r3, [r7, #20]
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b28      	cmp	r3, #40	; 0x28
 80027ca:	d903      	bls.n	80027d4 <HAL_DMA_Init+0x26c>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	2b2e      	cmp	r3, #46	; 0x2e
 80027d2:	d91f      	bls.n	8002814 <HAL_DMA_Init+0x2ac>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b3e      	cmp	r3, #62	; 0x3e
 80027da:	d903      	bls.n	80027e4 <HAL_DMA_Init+0x27c>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b42      	cmp	r3, #66	; 0x42
 80027e2:	d917      	bls.n	8002814 <HAL_DMA_Init+0x2ac>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b46      	cmp	r3, #70	; 0x46
 80027ea:	d903      	bls.n	80027f4 <HAL_DMA_Init+0x28c>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2b48      	cmp	r3, #72	; 0x48
 80027f2:	d90f      	bls.n	8002814 <HAL_DMA_Init+0x2ac>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2b4e      	cmp	r3, #78	; 0x4e
 80027fa:	d903      	bls.n	8002804 <HAL_DMA_Init+0x29c>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b52      	cmp	r3, #82	; 0x52
 8002802:	d907      	bls.n	8002814 <HAL_DMA_Init+0x2ac>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b73      	cmp	r3, #115	; 0x73
 800280a:	d905      	bls.n	8002818 <HAL_DMA_Init+0x2b0>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b77      	cmp	r3, #119	; 0x77
 8002812:	d801      	bhi.n	8002818 <HAL_DMA_Init+0x2b0>
 8002814:	2301      	movs	r3, #1
 8002816:	e000      	b.n	800281a <HAL_DMA_Init+0x2b2>
 8002818:	2300      	movs	r3, #0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002824:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f023 0307 	bic.w	r3, r3, #7
 800283c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	4313      	orrs	r3, r2
 8002846:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	2b04      	cmp	r3, #4
 800284e:	d117      	bne.n	8002880 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	4313      	orrs	r3, r2
 8002858:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00e      	beq.n	8002880 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f001 fe72 	bl	800454c <DMA_CheckFifoParam>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d008      	beq.n	8002880 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2240      	movs	r2, #64	; 0x40
 8002872:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e1ff      	b.n	8002c80 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f001 fdad 	bl	80043e8 <DMA_CalcBaseAndBitshift>
 800288e:	4603      	mov	r3, r0
 8002890:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002896:	f003 031f 	and.w	r3, r3, #31
 800289a:	223f      	movs	r2, #63	; 0x3f
 800289c:	409a      	lsls	r2, r3
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	609a      	str	r2, [r3, #8]
 80028a2:	e0fe      	b.n	8002aa2 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a28      	ldr	r2, [pc, #160]	; (800294c <HAL_DMA_Init+0x3e4>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d04a      	beq.n	8002944 <HAL_DMA_Init+0x3dc>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a27      	ldr	r2, [pc, #156]	; (8002950 <HAL_DMA_Init+0x3e8>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d045      	beq.n	8002944 <HAL_DMA_Init+0x3dc>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a25      	ldr	r2, [pc, #148]	; (8002954 <HAL_DMA_Init+0x3ec>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d040      	beq.n	8002944 <HAL_DMA_Init+0x3dc>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a24      	ldr	r2, [pc, #144]	; (8002958 <HAL_DMA_Init+0x3f0>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d03b      	beq.n	8002944 <HAL_DMA_Init+0x3dc>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a22      	ldr	r2, [pc, #136]	; (800295c <HAL_DMA_Init+0x3f4>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d036      	beq.n	8002944 <HAL_DMA_Init+0x3dc>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a21      	ldr	r2, [pc, #132]	; (8002960 <HAL_DMA_Init+0x3f8>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d031      	beq.n	8002944 <HAL_DMA_Init+0x3dc>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a1f      	ldr	r2, [pc, #124]	; (8002964 <HAL_DMA_Init+0x3fc>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d02c      	beq.n	8002944 <HAL_DMA_Init+0x3dc>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a1e      	ldr	r2, [pc, #120]	; (8002968 <HAL_DMA_Init+0x400>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d027      	beq.n	8002944 <HAL_DMA_Init+0x3dc>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a1c      	ldr	r2, [pc, #112]	; (800296c <HAL_DMA_Init+0x404>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d022      	beq.n	8002944 <HAL_DMA_Init+0x3dc>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a1b      	ldr	r2, [pc, #108]	; (8002970 <HAL_DMA_Init+0x408>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d01d      	beq.n	8002944 <HAL_DMA_Init+0x3dc>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a19      	ldr	r2, [pc, #100]	; (8002974 <HAL_DMA_Init+0x40c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d018      	beq.n	8002944 <HAL_DMA_Init+0x3dc>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a18      	ldr	r2, [pc, #96]	; (8002978 <HAL_DMA_Init+0x410>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d013      	beq.n	8002944 <HAL_DMA_Init+0x3dc>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a16      	ldr	r2, [pc, #88]	; (800297c <HAL_DMA_Init+0x414>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d00e      	beq.n	8002944 <HAL_DMA_Init+0x3dc>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a15      	ldr	r2, [pc, #84]	; (8002980 <HAL_DMA_Init+0x418>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d009      	beq.n	8002944 <HAL_DMA_Init+0x3dc>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a13      	ldr	r2, [pc, #76]	; (8002984 <HAL_DMA_Init+0x41c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d004      	beq.n	8002944 <HAL_DMA_Init+0x3dc>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a12      	ldr	r2, [pc, #72]	; (8002988 <HAL_DMA_Init+0x420>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d123      	bne.n	800298c <HAL_DMA_Init+0x424>
 8002944:	2301      	movs	r3, #1
 8002946:	e022      	b.n	800298e <HAL_DMA_Init+0x426>
 8002948:	fe10803f 	.word	0xfe10803f
 800294c:	48022c08 	.word	0x48022c08
 8002950:	48022c1c 	.word	0x48022c1c
 8002954:	48022c30 	.word	0x48022c30
 8002958:	48022c44 	.word	0x48022c44
 800295c:	48022c58 	.word	0x48022c58
 8002960:	48022c6c 	.word	0x48022c6c
 8002964:	48022c80 	.word	0x48022c80
 8002968:	48022c94 	.word	0x48022c94
 800296c:	58025408 	.word	0x58025408
 8002970:	5802541c 	.word	0x5802541c
 8002974:	58025430 	.word	0x58025430
 8002978:	58025444 	.word	0x58025444
 800297c:	58025458 	.word	0x58025458
 8002980:	5802546c 	.word	0x5802546c
 8002984:	58025480 	.word	0x58025480
 8002988:	58025494 	.word	0x58025494
 800298c:	2300      	movs	r3, #0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d07e      	beq.n	8002a90 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a80      	ldr	r2, [pc, #512]	; (8002b98 <HAL_DMA_Init+0x630>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d021      	beq.n	80029e0 <HAL_DMA_Init+0x478>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a7e      	ldr	r2, [pc, #504]	; (8002b9c <HAL_DMA_Init+0x634>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d01c      	beq.n	80029e0 <HAL_DMA_Init+0x478>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a7d      	ldr	r2, [pc, #500]	; (8002ba0 <HAL_DMA_Init+0x638>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d017      	beq.n	80029e0 <HAL_DMA_Init+0x478>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a7b      	ldr	r2, [pc, #492]	; (8002ba4 <HAL_DMA_Init+0x63c>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d012      	beq.n	80029e0 <HAL_DMA_Init+0x478>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a7a      	ldr	r2, [pc, #488]	; (8002ba8 <HAL_DMA_Init+0x640>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d00d      	beq.n	80029e0 <HAL_DMA_Init+0x478>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a78      	ldr	r2, [pc, #480]	; (8002bac <HAL_DMA_Init+0x644>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d008      	beq.n	80029e0 <HAL_DMA_Init+0x478>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a77      	ldr	r2, [pc, #476]	; (8002bb0 <HAL_DMA_Init+0x648>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d003      	beq.n	80029e0 <HAL_DMA_Init+0x478>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a75      	ldr	r2, [pc, #468]	; (8002bb4 <HAL_DMA_Init+0x64c>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2202      	movs	r2, #2
 80029ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	4b6e      	ldr	r3, [pc, #440]	; (8002bb8 <HAL_DMA_Init+0x650>)
 80029fe:	4013      	ands	r3, r2
 8002a00:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	2b40      	cmp	r3, #64	; 0x40
 8002a08:	d008      	beq.n	8002a1c <HAL_DMA_Init+0x4b4>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	2b80      	cmp	r3, #128	; 0x80
 8002a10:	d102      	bne.n	8002a18 <HAL_DMA_Init+0x4b0>
 8002a12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a16:	e002      	b.n	8002a1e <HAL_DMA_Init+0x4b6>
 8002a18:	2300      	movs	r3, #0
 8002a1a:	e000      	b.n	8002a1e <HAL_DMA_Init+0x4b6>
 8002a1c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	68d2      	ldr	r2, [r2, #12]
 8002a22:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002a24:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002a2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002a34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002a3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002a44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002a4c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	4b56      	ldr	r3, [pc, #344]	; (8002bbc <HAL_DMA_Init+0x654>)
 8002a64:	4413      	add	r3, r2
 8002a66:	4a56      	ldr	r2, [pc, #344]	; (8002bc0 <HAL_DMA_Init+0x658>)
 8002a68:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6c:	091b      	lsrs	r3, r3, #4
 8002a6e:	009a      	lsls	r2, r3, #2
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f001 fcb7 	bl	80043e8 <DMA_CalcBaseAndBitshift>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a82:	f003 031f 	and.w	r3, r3, #31
 8002a86:	2201      	movs	r2, #1
 8002a88:	409a      	lsls	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	e008      	b.n	8002aa2 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2240      	movs	r2, #64	; 0x40
 8002a94:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2203      	movs	r2, #3
 8002a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e0ee      	b.n	8002c80 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a47      	ldr	r2, [pc, #284]	; (8002bc4 <HAL_DMA_Init+0x65c>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d072      	beq.n	8002b92 <HAL_DMA_Init+0x62a>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a45      	ldr	r2, [pc, #276]	; (8002bc8 <HAL_DMA_Init+0x660>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d06d      	beq.n	8002b92 <HAL_DMA_Init+0x62a>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a44      	ldr	r2, [pc, #272]	; (8002bcc <HAL_DMA_Init+0x664>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d068      	beq.n	8002b92 <HAL_DMA_Init+0x62a>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a42      	ldr	r2, [pc, #264]	; (8002bd0 <HAL_DMA_Init+0x668>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d063      	beq.n	8002b92 <HAL_DMA_Init+0x62a>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a41      	ldr	r2, [pc, #260]	; (8002bd4 <HAL_DMA_Init+0x66c>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d05e      	beq.n	8002b92 <HAL_DMA_Init+0x62a>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a3f      	ldr	r2, [pc, #252]	; (8002bd8 <HAL_DMA_Init+0x670>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d059      	beq.n	8002b92 <HAL_DMA_Init+0x62a>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a3e      	ldr	r2, [pc, #248]	; (8002bdc <HAL_DMA_Init+0x674>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d054      	beq.n	8002b92 <HAL_DMA_Init+0x62a>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a3c      	ldr	r2, [pc, #240]	; (8002be0 <HAL_DMA_Init+0x678>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d04f      	beq.n	8002b92 <HAL_DMA_Init+0x62a>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a3b      	ldr	r2, [pc, #236]	; (8002be4 <HAL_DMA_Init+0x67c>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d04a      	beq.n	8002b92 <HAL_DMA_Init+0x62a>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a39      	ldr	r2, [pc, #228]	; (8002be8 <HAL_DMA_Init+0x680>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d045      	beq.n	8002b92 <HAL_DMA_Init+0x62a>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a38      	ldr	r2, [pc, #224]	; (8002bec <HAL_DMA_Init+0x684>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d040      	beq.n	8002b92 <HAL_DMA_Init+0x62a>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a36      	ldr	r2, [pc, #216]	; (8002bf0 <HAL_DMA_Init+0x688>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d03b      	beq.n	8002b92 <HAL_DMA_Init+0x62a>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a35      	ldr	r2, [pc, #212]	; (8002bf4 <HAL_DMA_Init+0x68c>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d036      	beq.n	8002b92 <HAL_DMA_Init+0x62a>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a33      	ldr	r2, [pc, #204]	; (8002bf8 <HAL_DMA_Init+0x690>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d031      	beq.n	8002b92 <HAL_DMA_Init+0x62a>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a32      	ldr	r2, [pc, #200]	; (8002bfc <HAL_DMA_Init+0x694>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d02c      	beq.n	8002b92 <HAL_DMA_Init+0x62a>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a30      	ldr	r2, [pc, #192]	; (8002c00 <HAL_DMA_Init+0x698>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d027      	beq.n	8002b92 <HAL_DMA_Init+0x62a>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a14      	ldr	r2, [pc, #80]	; (8002b98 <HAL_DMA_Init+0x630>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d022      	beq.n	8002b92 <HAL_DMA_Init+0x62a>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a12      	ldr	r2, [pc, #72]	; (8002b9c <HAL_DMA_Init+0x634>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d01d      	beq.n	8002b92 <HAL_DMA_Init+0x62a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a11      	ldr	r2, [pc, #68]	; (8002ba0 <HAL_DMA_Init+0x638>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d018      	beq.n	8002b92 <HAL_DMA_Init+0x62a>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a0f      	ldr	r2, [pc, #60]	; (8002ba4 <HAL_DMA_Init+0x63c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d013      	beq.n	8002b92 <HAL_DMA_Init+0x62a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a0e      	ldr	r2, [pc, #56]	; (8002ba8 <HAL_DMA_Init+0x640>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d00e      	beq.n	8002b92 <HAL_DMA_Init+0x62a>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a0c      	ldr	r2, [pc, #48]	; (8002bac <HAL_DMA_Init+0x644>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d009      	beq.n	8002b92 <HAL_DMA_Init+0x62a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a0b      	ldr	r2, [pc, #44]	; (8002bb0 <HAL_DMA_Init+0x648>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d004      	beq.n	8002b92 <HAL_DMA_Init+0x62a>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a09      	ldr	r2, [pc, #36]	; (8002bb4 <HAL_DMA_Init+0x64c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d138      	bne.n	8002c04 <HAL_DMA_Init+0x69c>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e037      	b.n	8002c06 <HAL_DMA_Init+0x69e>
 8002b96:	bf00      	nop
 8002b98:	58025408 	.word	0x58025408
 8002b9c:	5802541c 	.word	0x5802541c
 8002ba0:	58025430 	.word	0x58025430
 8002ba4:	58025444 	.word	0x58025444
 8002ba8:	58025458 	.word	0x58025458
 8002bac:	5802546c 	.word	0x5802546c
 8002bb0:	58025480 	.word	0x58025480
 8002bb4:	58025494 	.word	0x58025494
 8002bb8:	fffe000f 	.word	0xfffe000f
 8002bbc:	a7fdabf8 	.word	0xa7fdabf8
 8002bc0:	cccccccd 	.word	0xcccccccd
 8002bc4:	40020010 	.word	0x40020010
 8002bc8:	40020028 	.word	0x40020028
 8002bcc:	40020040 	.word	0x40020040
 8002bd0:	40020058 	.word	0x40020058
 8002bd4:	40020070 	.word	0x40020070
 8002bd8:	40020088 	.word	0x40020088
 8002bdc:	400200a0 	.word	0x400200a0
 8002be0:	400200b8 	.word	0x400200b8
 8002be4:	40020410 	.word	0x40020410
 8002be8:	40020428 	.word	0x40020428
 8002bec:	40020440 	.word	0x40020440
 8002bf0:	40020458 	.word	0x40020458
 8002bf4:	40020470 	.word	0x40020470
 8002bf8:	40020488 	.word	0x40020488
 8002bfc:	400204a0 	.word	0x400204a0
 8002c00:	400204b8 	.word	0x400204b8
 8002c04:	2300      	movs	r3, #0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d032      	beq.n	8002c70 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f001 fd1a 	bl	8004644 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	2b80      	cmp	r3, #128	; 0x80
 8002c16:	d102      	bne.n	8002c1e <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002c32:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d010      	beq.n	8002c5e <HAL_DMA_Init+0x6f6>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	d80c      	bhi.n	8002c5e <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f001 fd97 	bl	8004778 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002c5a:	605a      	str	r2, [r3, #4]
 8002c5c:	e008      	b.n	8002c70 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3718      	adds	r7, #24
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
 8002c94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e226      	b.n	80030f2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d101      	bne.n	8002cb2 <HAL_DMA_Start_IT+0x2a>
 8002cae:	2302      	movs	r3, #2
 8002cb0:	e21f      	b.n	80030f2 <HAL_DMA_Start_IT+0x46a>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	f040 820a 	bne.w	80030dc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a68      	ldr	r2, [pc, #416]	; (8002e7c <HAL_DMA_Start_IT+0x1f4>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d04a      	beq.n	8002d76 <HAL_DMA_Start_IT+0xee>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a66      	ldr	r2, [pc, #408]	; (8002e80 <HAL_DMA_Start_IT+0x1f8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d045      	beq.n	8002d76 <HAL_DMA_Start_IT+0xee>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a65      	ldr	r2, [pc, #404]	; (8002e84 <HAL_DMA_Start_IT+0x1fc>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d040      	beq.n	8002d76 <HAL_DMA_Start_IT+0xee>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a63      	ldr	r2, [pc, #396]	; (8002e88 <HAL_DMA_Start_IT+0x200>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d03b      	beq.n	8002d76 <HAL_DMA_Start_IT+0xee>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a62      	ldr	r2, [pc, #392]	; (8002e8c <HAL_DMA_Start_IT+0x204>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d036      	beq.n	8002d76 <HAL_DMA_Start_IT+0xee>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a60      	ldr	r2, [pc, #384]	; (8002e90 <HAL_DMA_Start_IT+0x208>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d031      	beq.n	8002d76 <HAL_DMA_Start_IT+0xee>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a5f      	ldr	r2, [pc, #380]	; (8002e94 <HAL_DMA_Start_IT+0x20c>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d02c      	beq.n	8002d76 <HAL_DMA_Start_IT+0xee>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a5d      	ldr	r2, [pc, #372]	; (8002e98 <HAL_DMA_Start_IT+0x210>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d027      	beq.n	8002d76 <HAL_DMA_Start_IT+0xee>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a5c      	ldr	r2, [pc, #368]	; (8002e9c <HAL_DMA_Start_IT+0x214>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d022      	beq.n	8002d76 <HAL_DMA_Start_IT+0xee>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a5a      	ldr	r2, [pc, #360]	; (8002ea0 <HAL_DMA_Start_IT+0x218>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d01d      	beq.n	8002d76 <HAL_DMA_Start_IT+0xee>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a59      	ldr	r2, [pc, #356]	; (8002ea4 <HAL_DMA_Start_IT+0x21c>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d018      	beq.n	8002d76 <HAL_DMA_Start_IT+0xee>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a57      	ldr	r2, [pc, #348]	; (8002ea8 <HAL_DMA_Start_IT+0x220>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d013      	beq.n	8002d76 <HAL_DMA_Start_IT+0xee>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a56      	ldr	r2, [pc, #344]	; (8002eac <HAL_DMA_Start_IT+0x224>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d00e      	beq.n	8002d76 <HAL_DMA_Start_IT+0xee>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a54      	ldr	r2, [pc, #336]	; (8002eb0 <HAL_DMA_Start_IT+0x228>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d009      	beq.n	8002d76 <HAL_DMA_Start_IT+0xee>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a53      	ldr	r2, [pc, #332]	; (8002eb4 <HAL_DMA_Start_IT+0x22c>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d004      	beq.n	8002d76 <HAL_DMA_Start_IT+0xee>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a51      	ldr	r2, [pc, #324]	; (8002eb8 <HAL_DMA_Start_IT+0x230>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d108      	bne.n	8002d88 <HAL_DMA_Start_IT+0x100>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 0201 	bic.w	r2, r2, #1
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	e007      	b.n	8002d98 <HAL_DMA_Start_IT+0x110>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0201 	bic.w	r2, r2, #1
 8002d96:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	68b9      	ldr	r1, [r7, #8]
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f001 f93e 	bl	8004020 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a34      	ldr	r2, [pc, #208]	; (8002e7c <HAL_DMA_Start_IT+0x1f4>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d04a      	beq.n	8002e44 <HAL_DMA_Start_IT+0x1bc>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a33      	ldr	r2, [pc, #204]	; (8002e80 <HAL_DMA_Start_IT+0x1f8>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d045      	beq.n	8002e44 <HAL_DMA_Start_IT+0x1bc>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a31      	ldr	r2, [pc, #196]	; (8002e84 <HAL_DMA_Start_IT+0x1fc>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d040      	beq.n	8002e44 <HAL_DMA_Start_IT+0x1bc>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a30      	ldr	r2, [pc, #192]	; (8002e88 <HAL_DMA_Start_IT+0x200>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d03b      	beq.n	8002e44 <HAL_DMA_Start_IT+0x1bc>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a2e      	ldr	r2, [pc, #184]	; (8002e8c <HAL_DMA_Start_IT+0x204>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d036      	beq.n	8002e44 <HAL_DMA_Start_IT+0x1bc>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a2d      	ldr	r2, [pc, #180]	; (8002e90 <HAL_DMA_Start_IT+0x208>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d031      	beq.n	8002e44 <HAL_DMA_Start_IT+0x1bc>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a2b      	ldr	r2, [pc, #172]	; (8002e94 <HAL_DMA_Start_IT+0x20c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d02c      	beq.n	8002e44 <HAL_DMA_Start_IT+0x1bc>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a2a      	ldr	r2, [pc, #168]	; (8002e98 <HAL_DMA_Start_IT+0x210>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d027      	beq.n	8002e44 <HAL_DMA_Start_IT+0x1bc>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a28      	ldr	r2, [pc, #160]	; (8002e9c <HAL_DMA_Start_IT+0x214>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d022      	beq.n	8002e44 <HAL_DMA_Start_IT+0x1bc>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a27      	ldr	r2, [pc, #156]	; (8002ea0 <HAL_DMA_Start_IT+0x218>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d01d      	beq.n	8002e44 <HAL_DMA_Start_IT+0x1bc>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a25      	ldr	r2, [pc, #148]	; (8002ea4 <HAL_DMA_Start_IT+0x21c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d018      	beq.n	8002e44 <HAL_DMA_Start_IT+0x1bc>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a24      	ldr	r2, [pc, #144]	; (8002ea8 <HAL_DMA_Start_IT+0x220>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d013      	beq.n	8002e44 <HAL_DMA_Start_IT+0x1bc>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a22      	ldr	r2, [pc, #136]	; (8002eac <HAL_DMA_Start_IT+0x224>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d00e      	beq.n	8002e44 <HAL_DMA_Start_IT+0x1bc>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a21      	ldr	r2, [pc, #132]	; (8002eb0 <HAL_DMA_Start_IT+0x228>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d009      	beq.n	8002e44 <HAL_DMA_Start_IT+0x1bc>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a1f      	ldr	r2, [pc, #124]	; (8002eb4 <HAL_DMA_Start_IT+0x22c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d004      	beq.n	8002e44 <HAL_DMA_Start_IT+0x1bc>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a1e      	ldr	r2, [pc, #120]	; (8002eb8 <HAL_DMA_Start_IT+0x230>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d101      	bne.n	8002e48 <HAL_DMA_Start_IT+0x1c0>
 8002e44:	2301      	movs	r3, #1
 8002e46:	e000      	b.n	8002e4a <HAL_DMA_Start_IT+0x1c2>
 8002e48:	2300      	movs	r3, #0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d036      	beq.n	8002ebc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f023 021e 	bic.w	r2, r3, #30
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f042 0216 	orr.w	r2, r2, #22
 8002e60:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d03e      	beq.n	8002ee8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f042 0208 	orr.w	r2, r2, #8
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	e035      	b.n	8002ee8 <HAL_DMA_Start_IT+0x260>
 8002e7c:	40020010 	.word	0x40020010
 8002e80:	40020028 	.word	0x40020028
 8002e84:	40020040 	.word	0x40020040
 8002e88:	40020058 	.word	0x40020058
 8002e8c:	40020070 	.word	0x40020070
 8002e90:	40020088 	.word	0x40020088
 8002e94:	400200a0 	.word	0x400200a0
 8002e98:	400200b8 	.word	0x400200b8
 8002e9c:	40020410 	.word	0x40020410
 8002ea0:	40020428 	.word	0x40020428
 8002ea4:	40020440 	.word	0x40020440
 8002ea8:	40020458 	.word	0x40020458
 8002eac:	40020470 	.word	0x40020470
 8002eb0:	40020488 	.word	0x40020488
 8002eb4:	400204a0 	.word	0x400204a0
 8002eb8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f023 020e 	bic.w	r2, r3, #14
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 020a 	orr.w	r2, r2, #10
 8002ece:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d007      	beq.n	8002ee8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0204 	orr.w	r2, r2, #4
 8002ee6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a83      	ldr	r2, [pc, #524]	; (80030fc <HAL_DMA_Start_IT+0x474>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d072      	beq.n	8002fd8 <HAL_DMA_Start_IT+0x350>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a82      	ldr	r2, [pc, #520]	; (8003100 <HAL_DMA_Start_IT+0x478>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d06d      	beq.n	8002fd8 <HAL_DMA_Start_IT+0x350>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a80      	ldr	r2, [pc, #512]	; (8003104 <HAL_DMA_Start_IT+0x47c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d068      	beq.n	8002fd8 <HAL_DMA_Start_IT+0x350>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a7f      	ldr	r2, [pc, #508]	; (8003108 <HAL_DMA_Start_IT+0x480>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d063      	beq.n	8002fd8 <HAL_DMA_Start_IT+0x350>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a7d      	ldr	r2, [pc, #500]	; (800310c <HAL_DMA_Start_IT+0x484>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d05e      	beq.n	8002fd8 <HAL_DMA_Start_IT+0x350>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a7c      	ldr	r2, [pc, #496]	; (8003110 <HAL_DMA_Start_IT+0x488>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d059      	beq.n	8002fd8 <HAL_DMA_Start_IT+0x350>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a7a      	ldr	r2, [pc, #488]	; (8003114 <HAL_DMA_Start_IT+0x48c>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d054      	beq.n	8002fd8 <HAL_DMA_Start_IT+0x350>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a79      	ldr	r2, [pc, #484]	; (8003118 <HAL_DMA_Start_IT+0x490>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d04f      	beq.n	8002fd8 <HAL_DMA_Start_IT+0x350>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a77      	ldr	r2, [pc, #476]	; (800311c <HAL_DMA_Start_IT+0x494>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d04a      	beq.n	8002fd8 <HAL_DMA_Start_IT+0x350>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a76      	ldr	r2, [pc, #472]	; (8003120 <HAL_DMA_Start_IT+0x498>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d045      	beq.n	8002fd8 <HAL_DMA_Start_IT+0x350>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a74      	ldr	r2, [pc, #464]	; (8003124 <HAL_DMA_Start_IT+0x49c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d040      	beq.n	8002fd8 <HAL_DMA_Start_IT+0x350>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a73      	ldr	r2, [pc, #460]	; (8003128 <HAL_DMA_Start_IT+0x4a0>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d03b      	beq.n	8002fd8 <HAL_DMA_Start_IT+0x350>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a71      	ldr	r2, [pc, #452]	; (800312c <HAL_DMA_Start_IT+0x4a4>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d036      	beq.n	8002fd8 <HAL_DMA_Start_IT+0x350>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a70      	ldr	r2, [pc, #448]	; (8003130 <HAL_DMA_Start_IT+0x4a8>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d031      	beq.n	8002fd8 <HAL_DMA_Start_IT+0x350>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a6e      	ldr	r2, [pc, #440]	; (8003134 <HAL_DMA_Start_IT+0x4ac>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d02c      	beq.n	8002fd8 <HAL_DMA_Start_IT+0x350>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a6d      	ldr	r2, [pc, #436]	; (8003138 <HAL_DMA_Start_IT+0x4b0>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d027      	beq.n	8002fd8 <HAL_DMA_Start_IT+0x350>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a6b      	ldr	r2, [pc, #428]	; (800313c <HAL_DMA_Start_IT+0x4b4>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d022      	beq.n	8002fd8 <HAL_DMA_Start_IT+0x350>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a6a      	ldr	r2, [pc, #424]	; (8003140 <HAL_DMA_Start_IT+0x4b8>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d01d      	beq.n	8002fd8 <HAL_DMA_Start_IT+0x350>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a68      	ldr	r2, [pc, #416]	; (8003144 <HAL_DMA_Start_IT+0x4bc>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d018      	beq.n	8002fd8 <HAL_DMA_Start_IT+0x350>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a67      	ldr	r2, [pc, #412]	; (8003148 <HAL_DMA_Start_IT+0x4c0>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d013      	beq.n	8002fd8 <HAL_DMA_Start_IT+0x350>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a65      	ldr	r2, [pc, #404]	; (800314c <HAL_DMA_Start_IT+0x4c4>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d00e      	beq.n	8002fd8 <HAL_DMA_Start_IT+0x350>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a64      	ldr	r2, [pc, #400]	; (8003150 <HAL_DMA_Start_IT+0x4c8>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d009      	beq.n	8002fd8 <HAL_DMA_Start_IT+0x350>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a62      	ldr	r2, [pc, #392]	; (8003154 <HAL_DMA_Start_IT+0x4cc>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d004      	beq.n	8002fd8 <HAL_DMA_Start_IT+0x350>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a61      	ldr	r2, [pc, #388]	; (8003158 <HAL_DMA_Start_IT+0x4d0>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d101      	bne.n	8002fdc <HAL_DMA_Start_IT+0x354>
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e000      	b.n	8002fde <HAL_DMA_Start_IT+0x356>
 8002fdc:	2300      	movs	r3, #0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d01a      	beq.n	8003018 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d007      	beq.n	8003000 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ffa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ffe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003004:	2b00      	cmp	r3, #0
 8003006:	d007      	beq.n	8003018 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003012:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003016:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a37      	ldr	r2, [pc, #220]	; (80030fc <HAL_DMA_Start_IT+0x474>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d04a      	beq.n	80030b8 <HAL_DMA_Start_IT+0x430>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a36      	ldr	r2, [pc, #216]	; (8003100 <HAL_DMA_Start_IT+0x478>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d045      	beq.n	80030b8 <HAL_DMA_Start_IT+0x430>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a34      	ldr	r2, [pc, #208]	; (8003104 <HAL_DMA_Start_IT+0x47c>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d040      	beq.n	80030b8 <HAL_DMA_Start_IT+0x430>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a33      	ldr	r2, [pc, #204]	; (8003108 <HAL_DMA_Start_IT+0x480>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d03b      	beq.n	80030b8 <HAL_DMA_Start_IT+0x430>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a31      	ldr	r2, [pc, #196]	; (800310c <HAL_DMA_Start_IT+0x484>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d036      	beq.n	80030b8 <HAL_DMA_Start_IT+0x430>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a30      	ldr	r2, [pc, #192]	; (8003110 <HAL_DMA_Start_IT+0x488>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d031      	beq.n	80030b8 <HAL_DMA_Start_IT+0x430>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a2e      	ldr	r2, [pc, #184]	; (8003114 <HAL_DMA_Start_IT+0x48c>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d02c      	beq.n	80030b8 <HAL_DMA_Start_IT+0x430>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a2d      	ldr	r2, [pc, #180]	; (8003118 <HAL_DMA_Start_IT+0x490>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d027      	beq.n	80030b8 <HAL_DMA_Start_IT+0x430>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a2b      	ldr	r2, [pc, #172]	; (800311c <HAL_DMA_Start_IT+0x494>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d022      	beq.n	80030b8 <HAL_DMA_Start_IT+0x430>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a2a      	ldr	r2, [pc, #168]	; (8003120 <HAL_DMA_Start_IT+0x498>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d01d      	beq.n	80030b8 <HAL_DMA_Start_IT+0x430>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a28      	ldr	r2, [pc, #160]	; (8003124 <HAL_DMA_Start_IT+0x49c>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d018      	beq.n	80030b8 <HAL_DMA_Start_IT+0x430>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a27      	ldr	r2, [pc, #156]	; (8003128 <HAL_DMA_Start_IT+0x4a0>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d013      	beq.n	80030b8 <HAL_DMA_Start_IT+0x430>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a25      	ldr	r2, [pc, #148]	; (800312c <HAL_DMA_Start_IT+0x4a4>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d00e      	beq.n	80030b8 <HAL_DMA_Start_IT+0x430>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a24      	ldr	r2, [pc, #144]	; (8003130 <HAL_DMA_Start_IT+0x4a8>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d009      	beq.n	80030b8 <HAL_DMA_Start_IT+0x430>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a22      	ldr	r2, [pc, #136]	; (8003134 <HAL_DMA_Start_IT+0x4ac>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d004      	beq.n	80030b8 <HAL_DMA_Start_IT+0x430>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a21      	ldr	r2, [pc, #132]	; (8003138 <HAL_DMA_Start_IT+0x4b0>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d108      	bne.n	80030ca <HAL_DMA_Start_IT+0x442>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f042 0201 	orr.w	r2, r2, #1
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	e012      	b.n	80030f0 <HAL_DMA_Start_IT+0x468>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f042 0201 	orr.w	r2, r2, #1
 80030d8:	601a      	str	r2, [r3, #0]
 80030da:	e009      	b.n	80030f0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80030f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3718      	adds	r7, #24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40020010 	.word	0x40020010
 8003100:	40020028 	.word	0x40020028
 8003104:	40020040 	.word	0x40020040
 8003108:	40020058 	.word	0x40020058
 800310c:	40020070 	.word	0x40020070
 8003110:	40020088 	.word	0x40020088
 8003114:	400200a0 	.word	0x400200a0
 8003118:	400200b8 	.word	0x400200b8
 800311c:	40020410 	.word	0x40020410
 8003120:	40020428 	.word	0x40020428
 8003124:	40020440 	.word	0x40020440
 8003128:	40020458 	.word	0x40020458
 800312c:	40020470 	.word	0x40020470
 8003130:	40020488 	.word	0x40020488
 8003134:	400204a0 	.word	0x400204a0
 8003138:	400204b8 	.word	0x400204b8
 800313c:	58025408 	.word	0x58025408
 8003140:	5802541c 	.word	0x5802541c
 8003144:	58025430 	.word	0x58025430
 8003148:	58025444 	.word	0x58025444
 800314c:	58025458 	.word	0x58025458
 8003150:	5802546c 	.word	0x5802546c
 8003154:	58025480 	.word	0x58025480
 8003158:	58025494 	.word	0x58025494

0800315c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b08a      	sub	sp, #40	; 0x28
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003164:	2300      	movs	r3, #0
 8003166:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003168:	4b67      	ldr	r3, [pc, #412]	; (8003308 <HAL_DMA_IRQHandler+0x1ac>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a67      	ldr	r2, [pc, #412]	; (800330c <HAL_DMA_IRQHandler+0x1b0>)
 800316e:	fba2 2303 	umull	r2, r3, r2, r3
 8003172:	0a9b      	lsrs	r3, r3, #10
 8003174:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003180:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a5f      	ldr	r2, [pc, #380]	; (8003310 <HAL_DMA_IRQHandler+0x1b4>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d04a      	beq.n	800322e <HAL_DMA_IRQHandler+0xd2>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a5d      	ldr	r2, [pc, #372]	; (8003314 <HAL_DMA_IRQHandler+0x1b8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d045      	beq.n	800322e <HAL_DMA_IRQHandler+0xd2>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a5c      	ldr	r2, [pc, #368]	; (8003318 <HAL_DMA_IRQHandler+0x1bc>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d040      	beq.n	800322e <HAL_DMA_IRQHandler+0xd2>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a5a      	ldr	r2, [pc, #360]	; (800331c <HAL_DMA_IRQHandler+0x1c0>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d03b      	beq.n	800322e <HAL_DMA_IRQHandler+0xd2>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a59      	ldr	r2, [pc, #356]	; (8003320 <HAL_DMA_IRQHandler+0x1c4>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d036      	beq.n	800322e <HAL_DMA_IRQHandler+0xd2>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a57      	ldr	r2, [pc, #348]	; (8003324 <HAL_DMA_IRQHandler+0x1c8>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d031      	beq.n	800322e <HAL_DMA_IRQHandler+0xd2>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a56      	ldr	r2, [pc, #344]	; (8003328 <HAL_DMA_IRQHandler+0x1cc>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d02c      	beq.n	800322e <HAL_DMA_IRQHandler+0xd2>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a54      	ldr	r2, [pc, #336]	; (800332c <HAL_DMA_IRQHandler+0x1d0>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d027      	beq.n	800322e <HAL_DMA_IRQHandler+0xd2>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a53      	ldr	r2, [pc, #332]	; (8003330 <HAL_DMA_IRQHandler+0x1d4>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d022      	beq.n	800322e <HAL_DMA_IRQHandler+0xd2>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a51      	ldr	r2, [pc, #324]	; (8003334 <HAL_DMA_IRQHandler+0x1d8>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d01d      	beq.n	800322e <HAL_DMA_IRQHandler+0xd2>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a50      	ldr	r2, [pc, #320]	; (8003338 <HAL_DMA_IRQHandler+0x1dc>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d018      	beq.n	800322e <HAL_DMA_IRQHandler+0xd2>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a4e      	ldr	r2, [pc, #312]	; (800333c <HAL_DMA_IRQHandler+0x1e0>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d013      	beq.n	800322e <HAL_DMA_IRQHandler+0xd2>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a4d      	ldr	r2, [pc, #308]	; (8003340 <HAL_DMA_IRQHandler+0x1e4>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d00e      	beq.n	800322e <HAL_DMA_IRQHandler+0xd2>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a4b      	ldr	r2, [pc, #300]	; (8003344 <HAL_DMA_IRQHandler+0x1e8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d009      	beq.n	800322e <HAL_DMA_IRQHandler+0xd2>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a4a      	ldr	r2, [pc, #296]	; (8003348 <HAL_DMA_IRQHandler+0x1ec>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d004      	beq.n	800322e <HAL_DMA_IRQHandler+0xd2>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a48      	ldr	r2, [pc, #288]	; (800334c <HAL_DMA_IRQHandler+0x1f0>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d101      	bne.n	8003232 <HAL_DMA_IRQHandler+0xd6>
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <HAL_DMA_IRQHandler+0xd8>
 8003232:	2300      	movs	r3, #0
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 842b 	beq.w	8003a90 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323e:	f003 031f 	and.w	r3, r3, #31
 8003242:	2208      	movs	r2, #8
 8003244:	409a      	lsls	r2, r3
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	4013      	ands	r3, r2
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 80a2 	beq.w	8003394 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a2e      	ldr	r2, [pc, #184]	; (8003310 <HAL_DMA_IRQHandler+0x1b4>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d04a      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x194>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a2d      	ldr	r2, [pc, #180]	; (8003314 <HAL_DMA_IRQHandler+0x1b8>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d045      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x194>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a2b      	ldr	r2, [pc, #172]	; (8003318 <HAL_DMA_IRQHandler+0x1bc>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d040      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x194>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a2a      	ldr	r2, [pc, #168]	; (800331c <HAL_DMA_IRQHandler+0x1c0>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d03b      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x194>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a28      	ldr	r2, [pc, #160]	; (8003320 <HAL_DMA_IRQHandler+0x1c4>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d036      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x194>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a27      	ldr	r2, [pc, #156]	; (8003324 <HAL_DMA_IRQHandler+0x1c8>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d031      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x194>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a25      	ldr	r2, [pc, #148]	; (8003328 <HAL_DMA_IRQHandler+0x1cc>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d02c      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x194>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a24      	ldr	r2, [pc, #144]	; (800332c <HAL_DMA_IRQHandler+0x1d0>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d027      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x194>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a22      	ldr	r2, [pc, #136]	; (8003330 <HAL_DMA_IRQHandler+0x1d4>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d022      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x194>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a21      	ldr	r2, [pc, #132]	; (8003334 <HAL_DMA_IRQHandler+0x1d8>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d01d      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x194>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a1f      	ldr	r2, [pc, #124]	; (8003338 <HAL_DMA_IRQHandler+0x1dc>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d018      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x194>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a1e      	ldr	r2, [pc, #120]	; (800333c <HAL_DMA_IRQHandler+0x1e0>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d013      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x194>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a1c      	ldr	r2, [pc, #112]	; (8003340 <HAL_DMA_IRQHandler+0x1e4>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d00e      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x194>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a1b      	ldr	r2, [pc, #108]	; (8003344 <HAL_DMA_IRQHandler+0x1e8>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d009      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x194>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a19      	ldr	r2, [pc, #100]	; (8003348 <HAL_DMA_IRQHandler+0x1ec>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d004      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x194>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a18      	ldr	r2, [pc, #96]	; (800334c <HAL_DMA_IRQHandler+0x1f0>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d12f      	bne.n	8003350 <HAL_DMA_IRQHandler+0x1f4>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0304 	and.w	r3, r3, #4
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	bf14      	ite	ne
 80032fe:	2301      	movne	r3, #1
 8003300:	2300      	moveq	r3, #0
 8003302:	b2db      	uxtb	r3, r3
 8003304:	e02e      	b.n	8003364 <HAL_DMA_IRQHandler+0x208>
 8003306:	bf00      	nop
 8003308:	24000000 	.word	0x24000000
 800330c:	1b4e81b5 	.word	0x1b4e81b5
 8003310:	40020010 	.word	0x40020010
 8003314:	40020028 	.word	0x40020028
 8003318:	40020040 	.word	0x40020040
 800331c:	40020058 	.word	0x40020058
 8003320:	40020070 	.word	0x40020070
 8003324:	40020088 	.word	0x40020088
 8003328:	400200a0 	.word	0x400200a0
 800332c:	400200b8 	.word	0x400200b8
 8003330:	40020410 	.word	0x40020410
 8003334:	40020428 	.word	0x40020428
 8003338:	40020440 	.word	0x40020440
 800333c:	40020458 	.word	0x40020458
 8003340:	40020470 	.word	0x40020470
 8003344:	40020488 	.word	0x40020488
 8003348:	400204a0 	.word	0x400204a0
 800334c:	400204b8 	.word	0x400204b8
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b00      	cmp	r3, #0
 800335c:	bf14      	ite	ne
 800335e:	2301      	movne	r3, #1
 8003360:	2300      	moveq	r3, #0
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	d015      	beq.n	8003394 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0204 	bic.w	r2, r2, #4
 8003376:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337c:	f003 031f 	and.w	r3, r3, #31
 8003380:	2208      	movs	r2, #8
 8003382:	409a      	lsls	r2, r3
 8003384:	6a3b      	ldr	r3, [r7, #32]
 8003386:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338c:	f043 0201 	orr.w	r2, r3, #1
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003398:	f003 031f 	and.w	r3, r3, #31
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	fa22 f303 	lsr.w	r3, r2, r3
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d06e      	beq.n	8003488 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a69      	ldr	r2, [pc, #420]	; (8003554 <HAL_DMA_IRQHandler+0x3f8>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d04a      	beq.n	800344a <HAL_DMA_IRQHandler+0x2ee>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a67      	ldr	r2, [pc, #412]	; (8003558 <HAL_DMA_IRQHandler+0x3fc>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d045      	beq.n	800344a <HAL_DMA_IRQHandler+0x2ee>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a66      	ldr	r2, [pc, #408]	; (800355c <HAL_DMA_IRQHandler+0x400>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d040      	beq.n	800344a <HAL_DMA_IRQHandler+0x2ee>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a64      	ldr	r2, [pc, #400]	; (8003560 <HAL_DMA_IRQHandler+0x404>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d03b      	beq.n	800344a <HAL_DMA_IRQHandler+0x2ee>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a63      	ldr	r2, [pc, #396]	; (8003564 <HAL_DMA_IRQHandler+0x408>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d036      	beq.n	800344a <HAL_DMA_IRQHandler+0x2ee>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a61      	ldr	r2, [pc, #388]	; (8003568 <HAL_DMA_IRQHandler+0x40c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d031      	beq.n	800344a <HAL_DMA_IRQHandler+0x2ee>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a60      	ldr	r2, [pc, #384]	; (800356c <HAL_DMA_IRQHandler+0x410>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d02c      	beq.n	800344a <HAL_DMA_IRQHandler+0x2ee>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a5e      	ldr	r2, [pc, #376]	; (8003570 <HAL_DMA_IRQHandler+0x414>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d027      	beq.n	800344a <HAL_DMA_IRQHandler+0x2ee>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a5d      	ldr	r2, [pc, #372]	; (8003574 <HAL_DMA_IRQHandler+0x418>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d022      	beq.n	800344a <HAL_DMA_IRQHandler+0x2ee>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a5b      	ldr	r2, [pc, #364]	; (8003578 <HAL_DMA_IRQHandler+0x41c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d01d      	beq.n	800344a <HAL_DMA_IRQHandler+0x2ee>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a5a      	ldr	r2, [pc, #360]	; (800357c <HAL_DMA_IRQHandler+0x420>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d018      	beq.n	800344a <HAL_DMA_IRQHandler+0x2ee>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a58      	ldr	r2, [pc, #352]	; (8003580 <HAL_DMA_IRQHandler+0x424>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d013      	beq.n	800344a <HAL_DMA_IRQHandler+0x2ee>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a57      	ldr	r2, [pc, #348]	; (8003584 <HAL_DMA_IRQHandler+0x428>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d00e      	beq.n	800344a <HAL_DMA_IRQHandler+0x2ee>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a55      	ldr	r2, [pc, #340]	; (8003588 <HAL_DMA_IRQHandler+0x42c>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d009      	beq.n	800344a <HAL_DMA_IRQHandler+0x2ee>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a54      	ldr	r2, [pc, #336]	; (800358c <HAL_DMA_IRQHandler+0x430>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d004      	beq.n	800344a <HAL_DMA_IRQHandler+0x2ee>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a52      	ldr	r2, [pc, #328]	; (8003590 <HAL_DMA_IRQHandler+0x434>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d10a      	bne.n	8003460 <HAL_DMA_IRQHandler+0x304>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003454:	2b00      	cmp	r3, #0
 8003456:	bf14      	ite	ne
 8003458:	2301      	movne	r3, #1
 800345a:	2300      	moveq	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	e003      	b.n	8003468 <HAL_DMA_IRQHandler+0x30c>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2300      	movs	r3, #0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00d      	beq.n	8003488 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003470:	f003 031f 	and.w	r3, r3, #31
 8003474:	2201      	movs	r2, #1
 8003476:	409a      	lsls	r2, r3
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003480:	f043 0202 	orr.w	r2, r3, #2
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348c:	f003 031f 	and.w	r3, r3, #31
 8003490:	2204      	movs	r2, #4
 8003492:	409a      	lsls	r2, r3
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	4013      	ands	r3, r2
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 808f 	beq.w	80035bc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a2c      	ldr	r2, [pc, #176]	; (8003554 <HAL_DMA_IRQHandler+0x3f8>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d04a      	beq.n	800353e <HAL_DMA_IRQHandler+0x3e2>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a2a      	ldr	r2, [pc, #168]	; (8003558 <HAL_DMA_IRQHandler+0x3fc>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d045      	beq.n	800353e <HAL_DMA_IRQHandler+0x3e2>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a29      	ldr	r2, [pc, #164]	; (800355c <HAL_DMA_IRQHandler+0x400>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d040      	beq.n	800353e <HAL_DMA_IRQHandler+0x3e2>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a27      	ldr	r2, [pc, #156]	; (8003560 <HAL_DMA_IRQHandler+0x404>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d03b      	beq.n	800353e <HAL_DMA_IRQHandler+0x3e2>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a26      	ldr	r2, [pc, #152]	; (8003564 <HAL_DMA_IRQHandler+0x408>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d036      	beq.n	800353e <HAL_DMA_IRQHandler+0x3e2>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a24      	ldr	r2, [pc, #144]	; (8003568 <HAL_DMA_IRQHandler+0x40c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d031      	beq.n	800353e <HAL_DMA_IRQHandler+0x3e2>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a23      	ldr	r2, [pc, #140]	; (800356c <HAL_DMA_IRQHandler+0x410>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d02c      	beq.n	800353e <HAL_DMA_IRQHandler+0x3e2>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a21      	ldr	r2, [pc, #132]	; (8003570 <HAL_DMA_IRQHandler+0x414>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d027      	beq.n	800353e <HAL_DMA_IRQHandler+0x3e2>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a20      	ldr	r2, [pc, #128]	; (8003574 <HAL_DMA_IRQHandler+0x418>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d022      	beq.n	800353e <HAL_DMA_IRQHandler+0x3e2>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a1e      	ldr	r2, [pc, #120]	; (8003578 <HAL_DMA_IRQHandler+0x41c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d01d      	beq.n	800353e <HAL_DMA_IRQHandler+0x3e2>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a1d      	ldr	r2, [pc, #116]	; (800357c <HAL_DMA_IRQHandler+0x420>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d018      	beq.n	800353e <HAL_DMA_IRQHandler+0x3e2>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a1b      	ldr	r2, [pc, #108]	; (8003580 <HAL_DMA_IRQHandler+0x424>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d013      	beq.n	800353e <HAL_DMA_IRQHandler+0x3e2>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a1a      	ldr	r2, [pc, #104]	; (8003584 <HAL_DMA_IRQHandler+0x428>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d00e      	beq.n	800353e <HAL_DMA_IRQHandler+0x3e2>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a18      	ldr	r2, [pc, #96]	; (8003588 <HAL_DMA_IRQHandler+0x42c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d009      	beq.n	800353e <HAL_DMA_IRQHandler+0x3e2>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a17      	ldr	r2, [pc, #92]	; (800358c <HAL_DMA_IRQHandler+0x430>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d004      	beq.n	800353e <HAL_DMA_IRQHandler+0x3e2>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a15      	ldr	r2, [pc, #84]	; (8003590 <HAL_DMA_IRQHandler+0x434>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d12a      	bne.n	8003594 <HAL_DMA_IRQHandler+0x438>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	bf14      	ite	ne
 800354c:	2301      	movne	r3, #1
 800354e:	2300      	moveq	r3, #0
 8003550:	b2db      	uxtb	r3, r3
 8003552:	e023      	b.n	800359c <HAL_DMA_IRQHandler+0x440>
 8003554:	40020010 	.word	0x40020010
 8003558:	40020028 	.word	0x40020028
 800355c:	40020040 	.word	0x40020040
 8003560:	40020058 	.word	0x40020058
 8003564:	40020070 	.word	0x40020070
 8003568:	40020088 	.word	0x40020088
 800356c:	400200a0 	.word	0x400200a0
 8003570:	400200b8 	.word	0x400200b8
 8003574:	40020410 	.word	0x40020410
 8003578:	40020428 	.word	0x40020428
 800357c:	40020440 	.word	0x40020440
 8003580:	40020458 	.word	0x40020458
 8003584:	40020470 	.word	0x40020470
 8003588:	40020488 	.word	0x40020488
 800358c:	400204a0 	.word	0x400204a0
 8003590:	400204b8 	.word	0x400204b8
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2300      	movs	r3, #0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00d      	beq.n	80035bc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a4:	f003 031f 	and.w	r3, r3, #31
 80035a8:	2204      	movs	r2, #4
 80035aa:	409a      	lsls	r2, r3
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b4:	f043 0204 	orr.w	r2, r3, #4
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c0:	f003 031f 	and.w	r3, r3, #31
 80035c4:	2210      	movs	r2, #16
 80035c6:	409a      	lsls	r2, r3
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	4013      	ands	r3, r2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 80a6 	beq.w	800371e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a85      	ldr	r2, [pc, #532]	; (80037ec <HAL_DMA_IRQHandler+0x690>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d04a      	beq.n	8003672 <HAL_DMA_IRQHandler+0x516>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a83      	ldr	r2, [pc, #524]	; (80037f0 <HAL_DMA_IRQHandler+0x694>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d045      	beq.n	8003672 <HAL_DMA_IRQHandler+0x516>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a82      	ldr	r2, [pc, #520]	; (80037f4 <HAL_DMA_IRQHandler+0x698>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d040      	beq.n	8003672 <HAL_DMA_IRQHandler+0x516>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a80      	ldr	r2, [pc, #512]	; (80037f8 <HAL_DMA_IRQHandler+0x69c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d03b      	beq.n	8003672 <HAL_DMA_IRQHandler+0x516>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a7f      	ldr	r2, [pc, #508]	; (80037fc <HAL_DMA_IRQHandler+0x6a0>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d036      	beq.n	8003672 <HAL_DMA_IRQHandler+0x516>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a7d      	ldr	r2, [pc, #500]	; (8003800 <HAL_DMA_IRQHandler+0x6a4>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d031      	beq.n	8003672 <HAL_DMA_IRQHandler+0x516>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a7c      	ldr	r2, [pc, #496]	; (8003804 <HAL_DMA_IRQHandler+0x6a8>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d02c      	beq.n	8003672 <HAL_DMA_IRQHandler+0x516>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a7a      	ldr	r2, [pc, #488]	; (8003808 <HAL_DMA_IRQHandler+0x6ac>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d027      	beq.n	8003672 <HAL_DMA_IRQHandler+0x516>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a79      	ldr	r2, [pc, #484]	; (800380c <HAL_DMA_IRQHandler+0x6b0>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d022      	beq.n	8003672 <HAL_DMA_IRQHandler+0x516>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a77      	ldr	r2, [pc, #476]	; (8003810 <HAL_DMA_IRQHandler+0x6b4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d01d      	beq.n	8003672 <HAL_DMA_IRQHandler+0x516>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a76      	ldr	r2, [pc, #472]	; (8003814 <HAL_DMA_IRQHandler+0x6b8>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d018      	beq.n	8003672 <HAL_DMA_IRQHandler+0x516>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a74      	ldr	r2, [pc, #464]	; (8003818 <HAL_DMA_IRQHandler+0x6bc>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d013      	beq.n	8003672 <HAL_DMA_IRQHandler+0x516>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a73      	ldr	r2, [pc, #460]	; (800381c <HAL_DMA_IRQHandler+0x6c0>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d00e      	beq.n	8003672 <HAL_DMA_IRQHandler+0x516>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a71      	ldr	r2, [pc, #452]	; (8003820 <HAL_DMA_IRQHandler+0x6c4>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d009      	beq.n	8003672 <HAL_DMA_IRQHandler+0x516>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a70      	ldr	r2, [pc, #448]	; (8003824 <HAL_DMA_IRQHandler+0x6c8>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d004      	beq.n	8003672 <HAL_DMA_IRQHandler+0x516>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a6e      	ldr	r2, [pc, #440]	; (8003828 <HAL_DMA_IRQHandler+0x6cc>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d10a      	bne.n	8003688 <HAL_DMA_IRQHandler+0x52c>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0308 	and.w	r3, r3, #8
 800367c:	2b00      	cmp	r3, #0
 800367e:	bf14      	ite	ne
 8003680:	2301      	movne	r3, #1
 8003682:	2300      	moveq	r3, #0
 8003684:	b2db      	uxtb	r3, r3
 8003686:	e009      	b.n	800369c <HAL_DMA_IRQHandler+0x540>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0304 	and.w	r3, r3, #4
 8003692:	2b00      	cmp	r3, #0
 8003694:	bf14      	ite	ne
 8003696:	2301      	movne	r3, #1
 8003698:	2300      	moveq	r3, #0
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d03e      	beq.n	800371e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a4:	f003 031f 	and.w	r3, r3, #31
 80036a8:	2210      	movs	r2, #16
 80036aa:	409a      	lsls	r2, r3
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d018      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d108      	bne.n	80036de <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d024      	beq.n	800371e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	4798      	blx	r3
 80036dc:	e01f      	b.n	800371e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d01b      	beq.n	800371e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	4798      	blx	r3
 80036ee:	e016      	b.n	800371e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d107      	bne.n	800370e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 0208 	bic.w	r2, r2, #8
 800370c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003722:	f003 031f 	and.w	r3, r3, #31
 8003726:	2220      	movs	r2, #32
 8003728:	409a      	lsls	r2, r3
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	4013      	ands	r3, r2
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 8110 	beq.w	8003954 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a2c      	ldr	r2, [pc, #176]	; (80037ec <HAL_DMA_IRQHandler+0x690>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d04a      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x678>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a2b      	ldr	r2, [pc, #172]	; (80037f0 <HAL_DMA_IRQHandler+0x694>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d045      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x678>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a29      	ldr	r2, [pc, #164]	; (80037f4 <HAL_DMA_IRQHandler+0x698>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d040      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x678>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a28      	ldr	r2, [pc, #160]	; (80037f8 <HAL_DMA_IRQHandler+0x69c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d03b      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x678>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a26      	ldr	r2, [pc, #152]	; (80037fc <HAL_DMA_IRQHandler+0x6a0>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d036      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x678>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a25      	ldr	r2, [pc, #148]	; (8003800 <HAL_DMA_IRQHandler+0x6a4>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d031      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x678>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a23      	ldr	r2, [pc, #140]	; (8003804 <HAL_DMA_IRQHandler+0x6a8>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d02c      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x678>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a22      	ldr	r2, [pc, #136]	; (8003808 <HAL_DMA_IRQHandler+0x6ac>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d027      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x678>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a20      	ldr	r2, [pc, #128]	; (800380c <HAL_DMA_IRQHandler+0x6b0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d022      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x678>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a1f      	ldr	r2, [pc, #124]	; (8003810 <HAL_DMA_IRQHandler+0x6b4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d01d      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x678>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a1d      	ldr	r2, [pc, #116]	; (8003814 <HAL_DMA_IRQHandler+0x6b8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d018      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x678>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a1c      	ldr	r2, [pc, #112]	; (8003818 <HAL_DMA_IRQHandler+0x6bc>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d013      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x678>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a1a      	ldr	r2, [pc, #104]	; (800381c <HAL_DMA_IRQHandler+0x6c0>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d00e      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x678>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a19      	ldr	r2, [pc, #100]	; (8003820 <HAL_DMA_IRQHandler+0x6c4>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d009      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x678>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a17      	ldr	r2, [pc, #92]	; (8003824 <HAL_DMA_IRQHandler+0x6c8>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d004      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x678>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a16      	ldr	r2, [pc, #88]	; (8003828 <HAL_DMA_IRQHandler+0x6cc>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d12b      	bne.n	800382c <HAL_DMA_IRQHandler+0x6d0>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0310 	and.w	r3, r3, #16
 80037de:	2b00      	cmp	r3, #0
 80037e0:	bf14      	ite	ne
 80037e2:	2301      	movne	r3, #1
 80037e4:	2300      	moveq	r3, #0
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	e02a      	b.n	8003840 <HAL_DMA_IRQHandler+0x6e4>
 80037ea:	bf00      	nop
 80037ec:	40020010 	.word	0x40020010
 80037f0:	40020028 	.word	0x40020028
 80037f4:	40020040 	.word	0x40020040
 80037f8:	40020058 	.word	0x40020058
 80037fc:	40020070 	.word	0x40020070
 8003800:	40020088 	.word	0x40020088
 8003804:	400200a0 	.word	0x400200a0
 8003808:	400200b8 	.word	0x400200b8
 800380c:	40020410 	.word	0x40020410
 8003810:	40020428 	.word	0x40020428
 8003814:	40020440 	.word	0x40020440
 8003818:	40020458 	.word	0x40020458
 800381c:	40020470 	.word	0x40020470
 8003820:	40020488 	.word	0x40020488
 8003824:	400204a0 	.word	0x400204a0
 8003828:	400204b8 	.word	0x400204b8
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	bf14      	ite	ne
 800383a:	2301      	movne	r3, #1
 800383c:	2300      	moveq	r3, #0
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 8087 	beq.w	8003954 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384a:	f003 031f 	and.w	r3, r3, #31
 800384e:	2220      	movs	r2, #32
 8003850:	409a      	lsls	r2, r3
 8003852:	6a3b      	ldr	r3, [r7, #32]
 8003854:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b04      	cmp	r3, #4
 8003860:	d139      	bne.n	80038d6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0216 	bic.w	r2, r2, #22
 8003870:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	695a      	ldr	r2, [r3, #20]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003880:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	2b00      	cmp	r3, #0
 8003888:	d103      	bne.n	8003892 <HAL_DMA_IRQHandler+0x736>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800388e:	2b00      	cmp	r3, #0
 8003890:	d007      	beq.n	80038a2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0208 	bic.w	r2, r2, #8
 80038a0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a6:	f003 031f 	and.w	r3, r3, #31
 80038aa:	223f      	movs	r2, #63	; 0x3f
 80038ac:	409a      	lsls	r2, r3
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 8382 	beq.w	8003fd0 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	4798      	blx	r3
          }
          return;
 80038d4:	e37c      	b.n	8003fd0 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d018      	beq.n	8003916 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d108      	bne.n	8003904 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d02c      	beq.n	8003954 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	4798      	blx	r3
 8003902:	e027      	b.n	8003954 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003908:	2b00      	cmp	r3, #0
 800390a:	d023      	beq.n	8003954 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	4798      	blx	r3
 8003914:	e01e      	b.n	8003954 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10f      	bne.n	8003944 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0210 	bic.w	r2, r2, #16
 8003932:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 833e 	beq.w	8003fda <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 8088 	beq.w	8003a7c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2204      	movs	r2, #4
 8003970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a8e      	ldr	r2, [pc, #568]	; (8003bb4 <HAL_DMA_IRQHandler+0xa58>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d04a      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x8b8>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a8d      	ldr	r2, [pc, #564]	; (8003bb8 <HAL_DMA_IRQHandler+0xa5c>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d045      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x8b8>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a8b      	ldr	r2, [pc, #556]	; (8003bbc <HAL_DMA_IRQHandler+0xa60>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d040      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x8b8>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a8a      	ldr	r2, [pc, #552]	; (8003bc0 <HAL_DMA_IRQHandler+0xa64>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d03b      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x8b8>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a88      	ldr	r2, [pc, #544]	; (8003bc4 <HAL_DMA_IRQHandler+0xa68>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d036      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x8b8>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a87      	ldr	r2, [pc, #540]	; (8003bc8 <HAL_DMA_IRQHandler+0xa6c>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d031      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x8b8>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a85      	ldr	r2, [pc, #532]	; (8003bcc <HAL_DMA_IRQHandler+0xa70>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d02c      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x8b8>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a84      	ldr	r2, [pc, #528]	; (8003bd0 <HAL_DMA_IRQHandler+0xa74>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d027      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x8b8>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a82      	ldr	r2, [pc, #520]	; (8003bd4 <HAL_DMA_IRQHandler+0xa78>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d022      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x8b8>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a81      	ldr	r2, [pc, #516]	; (8003bd8 <HAL_DMA_IRQHandler+0xa7c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d01d      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x8b8>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a7f      	ldr	r2, [pc, #508]	; (8003bdc <HAL_DMA_IRQHandler+0xa80>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d018      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x8b8>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a7e      	ldr	r2, [pc, #504]	; (8003be0 <HAL_DMA_IRQHandler+0xa84>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d013      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x8b8>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a7c      	ldr	r2, [pc, #496]	; (8003be4 <HAL_DMA_IRQHandler+0xa88>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d00e      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x8b8>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a7b      	ldr	r2, [pc, #492]	; (8003be8 <HAL_DMA_IRQHandler+0xa8c>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d009      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x8b8>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a79      	ldr	r2, [pc, #484]	; (8003bec <HAL_DMA_IRQHandler+0xa90>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d004      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x8b8>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a78      	ldr	r2, [pc, #480]	; (8003bf0 <HAL_DMA_IRQHandler+0xa94>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d108      	bne.n	8003a26 <HAL_DMA_IRQHandler+0x8ca>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 0201 	bic.w	r2, r2, #1
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	e007      	b.n	8003a36 <HAL_DMA_IRQHandler+0x8da>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 0201 	bic.w	r2, r2, #1
 8003a34:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	60fb      	str	r3, [r7, #12]
 8003a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d307      	bcc.n	8003a52 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1f2      	bne.n	8003a36 <HAL_DMA_IRQHandler+0x8da>
 8003a50:	e000      	b.n	8003a54 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003a52:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d004      	beq.n	8003a74 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2203      	movs	r2, #3
 8003a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003a72:	e003      	b.n	8003a7c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 82aa 	beq.w	8003fda <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	4798      	blx	r3
 8003a8e:	e2a4      	b.n	8003fda <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a57      	ldr	r2, [pc, #348]	; (8003bf4 <HAL_DMA_IRQHandler+0xa98>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d04a      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x9d4>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a56      	ldr	r2, [pc, #344]	; (8003bf8 <HAL_DMA_IRQHandler+0xa9c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d045      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x9d4>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a54      	ldr	r2, [pc, #336]	; (8003bfc <HAL_DMA_IRQHandler+0xaa0>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d040      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x9d4>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a53      	ldr	r2, [pc, #332]	; (8003c00 <HAL_DMA_IRQHandler+0xaa4>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d03b      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x9d4>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a51      	ldr	r2, [pc, #324]	; (8003c04 <HAL_DMA_IRQHandler+0xaa8>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d036      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x9d4>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a50      	ldr	r2, [pc, #320]	; (8003c08 <HAL_DMA_IRQHandler+0xaac>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d031      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x9d4>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a4e      	ldr	r2, [pc, #312]	; (8003c0c <HAL_DMA_IRQHandler+0xab0>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d02c      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x9d4>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a4d      	ldr	r2, [pc, #308]	; (8003c10 <HAL_DMA_IRQHandler+0xab4>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d027      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x9d4>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a4b      	ldr	r2, [pc, #300]	; (8003c14 <HAL_DMA_IRQHandler+0xab8>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d022      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x9d4>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a4a      	ldr	r2, [pc, #296]	; (8003c18 <HAL_DMA_IRQHandler+0xabc>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d01d      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x9d4>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a48      	ldr	r2, [pc, #288]	; (8003c1c <HAL_DMA_IRQHandler+0xac0>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d018      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x9d4>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a47      	ldr	r2, [pc, #284]	; (8003c20 <HAL_DMA_IRQHandler+0xac4>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d013      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x9d4>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a45      	ldr	r2, [pc, #276]	; (8003c24 <HAL_DMA_IRQHandler+0xac8>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d00e      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x9d4>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a44      	ldr	r2, [pc, #272]	; (8003c28 <HAL_DMA_IRQHandler+0xacc>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d009      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x9d4>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a42      	ldr	r2, [pc, #264]	; (8003c2c <HAL_DMA_IRQHandler+0xad0>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d004      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x9d4>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a41      	ldr	r2, [pc, #260]	; (8003c30 <HAL_DMA_IRQHandler+0xad4>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d101      	bne.n	8003b34 <HAL_DMA_IRQHandler+0x9d8>
 8003b30:	2301      	movs	r3, #1
 8003b32:	e000      	b.n	8003b36 <HAL_DMA_IRQHandler+0x9da>
 8003b34:	2300      	movs	r3, #0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 824f 	beq.w	8003fda <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b48:	f003 031f 	and.w	r3, r3, #31
 8003b4c:	2204      	movs	r2, #4
 8003b4e:	409a      	lsls	r2, r3
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	4013      	ands	r3, r2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 80dd 	beq.w	8003d14 <HAL_DMA_IRQHandler+0xbb8>
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 80d7 	beq.w	8003d14 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6a:	f003 031f 	and.w	r3, r3, #31
 8003b6e:	2204      	movs	r2, #4
 8003b70:	409a      	lsls	r2, r3
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d059      	beq.n	8003c34 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d109      	bne.n	8003b9e <HAL_DMA_IRQHandler+0xa42>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 8220 	beq.w	8003fd4 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b9c:	e21a      	b.n	8003fd4 <HAL_DMA_IRQHandler+0xe78>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 8216 	beq.w	8003fd4 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bb0:	e210      	b.n	8003fd4 <HAL_DMA_IRQHandler+0xe78>
 8003bb2:	bf00      	nop
 8003bb4:	40020010 	.word	0x40020010
 8003bb8:	40020028 	.word	0x40020028
 8003bbc:	40020040 	.word	0x40020040
 8003bc0:	40020058 	.word	0x40020058
 8003bc4:	40020070 	.word	0x40020070
 8003bc8:	40020088 	.word	0x40020088
 8003bcc:	400200a0 	.word	0x400200a0
 8003bd0:	400200b8 	.word	0x400200b8
 8003bd4:	40020410 	.word	0x40020410
 8003bd8:	40020428 	.word	0x40020428
 8003bdc:	40020440 	.word	0x40020440
 8003be0:	40020458 	.word	0x40020458
 8003be4:	40020470 	.word	0x40020470
 8003be8:	40020488 	.word	0x40020488
 8003bec:	400204a0 	.word	0x400204a0
 8003bf0:	400204b8 	.word	0x400204b8
 8003bf4:	48022c08 	.word	0x48022c08
 8003bf8:	48022c1c 	.word	0x48022c1c
 8003bfc:	48022c30 	.word	0x48022c30
 8003c00:	48022c44 	.word	0x48022c44
 8003c04:	48022c58 	.word	0x48022c58
 8003c08:	48022c6c 	.word	0x48022c6c
 8003c0c:	48022c80 	.word	0x48022c80
 8003c10:	48022c94 	.word	0x48022c94
 8003c14:	58025408 	.word	0x58025408
 8003c18:	5802541c 	.word	0x5802541c
 8003c1c:	58025430 	.word	0x58025430
 8003c20:	58025444 	.word	0x58025444
 8003c24:	58025458 	.word	0x58025458
 8003c28:	5802546c 	.word	0x5802546c
 8003c2c:	58025480 	.word	0x58025480
 8003c30:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	f003 0320 	and.w	r3, r3, #32
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d160      	bne.n	8003d00 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a8c      	ldr	r2, [pc, #560]	; (8003e74 <HAL_DMA_IRQHandler+0xd18>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d04a      	beq.n	8003cde <HAL_DMA_IRQHandler+0xb82>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a8a      	ldr	r2, [pc, #552]	; (8003e78 <HAL_DMA_IRQHandler+0xd1c>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d045      	beq.n	8003cde <HAL_DMA_IRQHandler+0xb82>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a89      	ldr	r2, [pc, #548]	; (8003e7c <HAL_DMA_IRQHandler+0xd20>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d040      	beq.n	8003cde <HAL_DMA_IRQHandler+0xb82>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a87      	ldr	r2, [pc, #540]	; (8003e80 <HAL_DMA_IRQHandler+0xd24>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d03b      	beq.n	8003cde <HAL_DMA_IRQHandler+0xb82>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a86      	ldr	r2, [pc, #536]	; (8003e84 <HAL_DMA_IRQHandler+0xd28>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d036      	beq.n	8003cde <HAL_DMA_IRQHandler+0xb82>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a84      	ldr	r2, [pc, #528]	; (8003e88 <HAL_DMA_IRQHandler+0xd2c>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d031      	beq.n	8003cde <HAL_DMA_IRQHandler+0xb82>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a83      	ldr	r2, [pc, #524]	; (8003e8c <HAL_DMA_IRQHandler+0xd30>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d02c      	beq.n	8003cde <HAL_DMA_IRQHandler+0xb82>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a81      	ldr	r2, [pc, #516]	; (8003e90 <HAL_DMA_IRQHandler+0xd34>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d027      	beq.n	8003cde <HAL_DMA_IRQHandler+0xb82>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a80      	ldr	r2, [pc, #512]	; (8003e94 <HAL_DMA_IRQHandler+0xd38>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d022      	beq.n	8003cde <HAL_DMA_IRQHandler+0xb82>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a7e      	ldr	r2, [pc, #504]	; (8003e98 <HAL_DMA_IRQHandler+0xd3c>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d01d      	beq.n	8003cde <HAL_DMA_IRQHandler+0xb82>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a7d      	ldr	r2, [pc, #500]	; (8003e9c <HAL_DMA_IRQHandler+0xd40>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d018      	beq.n	8003cde <HAL_DMA_IRQHandler+0xb82>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a7b      	ldr	r2, [pc, #492]	; (8003ea0 <HAL_DMA_IRQHandler+0xd44>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d013      	beq.n	8003cde <HAL_DMA_IRQHandler+0xb82>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a7a      	ldr	r2, [pc, #488]	; (8003ea4 <HAL_DMA_IRQHandler+0xd48>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d00e      	beq.n	8003cde <HAL_DMA_IRQHandler+0xb82>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a78      	ldr	r2, [pc, #480]	; (8003ea8 <HAL_DMA_IRQHandler+0xd4c>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d009      	beq.n	8003cde <HAL_DMA_IRQHandler+0xb82>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a77      	ldr	r2, [pc, #476]	; (8003eac <HAL_DMA_IRQHandler+0xd50>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d004      	beq.n	8003cde <HAL_DMA_IRQHandler+0xb82>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a75      	ldr	r2, [pc, #468]	; (8003eb0 <HAL_DMA_IRQHandler+0xd54>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d108      	bne.n	8003cf0 <HAL_DMA_IRQHandler+0xb94>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0208 	bic.w	r2, r2, #8
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	e007      	b.n	8003d00 <HAL_DMA_IRQHandler+0xba4>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0204 	bic.w	r2, r2, #4
 8003cfe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 8165 	beq.w	8003fd4 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d12:	e15f      	b.n	8003fd4 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d18:	f003 031f 	and.w	r3, r3, #31
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	409a      	lsls	r2, r3
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	4013      	ands	r3, r2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 80c5 	beq.w	8003eb4 <HAL_DMA_IRQHandler+0xd58>
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 80bf 	beq.w	8003eb4 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d3a:	f003 031f 	and.w	r3, r3, #31
 8003d3e:	2202      	movs	r2, #2
 8003d40:	409a      	lsls	r2, r3
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d018      	beq.n	8003d82 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d109      	bne.n	8003d6e <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 813a 	beq.w	8003fd8 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d6c:	e134      	b.n	8003fd8 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f000 8130 	beq.w	8003fd8 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d80:	e12a      	b.n	8003fd8 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	f003 0320 	and.w	r3, r3, #32
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d168      	bne.n	8003e5e <HAL_DMA_IRQHandler+0xd02>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a38      	ldr	r2, [pc, #224]	; (8003e74 <HAL_DMA_IRQHandler+0xd18>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d04a      	beq.n	8003e2c <HAL_DMA_IRQHandler+0xcd0>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a37      	ldr	r2, [pc, #220]	; (8003e78 <HAL_DMA_IRQHandler+0xd1c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d045      	beq.n	8003e2c <HAL_DMA_IRQHandler+0xcd0>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a35      	ldr	r2, [pc, #212]	; (8003e7c <HAL_DMA_IRQHandler+0xd20>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d040      	beq.n	8003e2c <HAL_DMA_IRQHandler+0xcd0>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a34      	ldr	r2, [pc, #208]	; (8003e80 <HAL_DMA_IRQHandler+0xd24>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d03b      	beq.n	8003e2c <HAL_DMA_IRQHandler+0xcd0>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a32      	ldr	r2, [pc, #200]	; (8003e84 <HAL_DMA_IRQHandler+0xd28>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d036      	beq.n	8003e2c <HAL_DMA_IRQHandler+0xcd0>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a31      	ldr	r2, [pc, #196]	; (8003e88 <HAL_DMA_IRQHandler+0xd2c>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d031      	beq.n	8003e2c <HAL_DMA_IRQHandler+0xcd0>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a2f      	ldr	r2, [pc, #188]	; (8003e8c <HAL_DMA_IRQHandler+0xd30>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d02c      	beq.n	8003e2c <HAL_DMA_IRQHandler+0xcd0>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a2e      	ldr	r2, [pc, #184]	; (8003e90 <HAL_DMA_IRQHandler+0xd34>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d027      	beq.n	8003e2c <HAL_DMA_IRQHandler+0xcd0>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a2c      	ldr	r2, [pc, #176]	; (8003e94 <HAL_DMA_IRQHandler+0xd38>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d022      	beq.n	8003e2c <HAL_DMA_IRQHandler+0xcd0>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a2b      	ldr	r2, [pc, #172]	; (8003e98 <HAL_DMA_IRQHandler+0xd3c>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d01d      	beq.n	8003e2c <HAL_DMA_IRQHandler+0xcd0>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a29      	ldr	r2, [pc, #164]	; (8003e9c <HAL_DMA_IRQHandler+0xd40>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d018      	beq.n	8003e2c <HAL_DMA_IRQHandler+0xcd0>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a28      	ldr	r2, [pc, #160]	; (8003ea0 <HAL_DMA_IRQHandler+0xd44>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d013      	beq.n	8003e2c <HAL_DMA_IRQHandler+0xcd0>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a26      	ldr	r2, [pc, #152]	; (8003ea4 <HAL_DMA_IRQHandler+0xd48>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d00e      	beq.n	8003e2c <HAL_DMA_IRQHandler+0xcd0>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a25      	ldr	r2, [pc, #148]	; (8003ea8 <HAL_DMA_IRQHandler+0xd4c>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d009      	beq.n	8003e2c <HAL_DMA_IRQHandler+0xcd0>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a23      	ldr	r2, [pc, #140]	; (8003eac <HAL_DMA_IRQHandler+0xd50>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d004      	beq.n	8003e2c <HAL_DMA_IRQHandler+0xcd0>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a22      	ldr	r2, [pc, #136]	; (8003eb0 <HAL_DMA_IRQHandler+0xd54>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d108      	bne.n	8003e3e <HAL_DMA_IRQHandler+0xce2>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0214 	bic.w	r2, r2, #20
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	e007      	b.n	8003e4e <HAL_DMA_IRQHandler+0xcf2>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 020a 	bic.w	r2, r2, #10
 8003e4c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 80b8 	beq.w	8003fd8 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e70:	e0b2      	b.n	8003fd8 <HAL_DMA_IRQHandler+0xe7c>
 8003e72:	bf00      	nop
 8003e74:	40020010 	.word	0x40020010
 8003e78:	40020028 	.word	0x40020028
 8003e7c:	40020040 	.word	0x40020040
 8003e80:	40020058 	.word	0x40020058
 8003e84:	40020070 	.word	0x40020070
 8003e88:	40020088 	.word	0x40020088
 8003e8c:	400200a0 	.word	0x400200a0
 8003e90:	400200b8 	.word	0x400200b8
 8003e94:	40020410 	.word	0x40020410
 8003e98:	40020428 	.word	0x40020428
 8003e9c:	40020440 	.word	0x40020440
 8003ea0:	40020458 	.word	0x40020458
 8003ea4:	40020470 	.word	0x40020470
 8003ea8:	40020488 	.word	0x40020488
 8003eac:	400204a0 	.word	0x400204a0
 8003eb0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb8:	f003 031f 	and.w	r3, r3, #31
 8003ebc:	2208      	movs	r2, #8
 8003ebe:	409a      	lsls	r2, r3
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 8088 	beq.w	8003fda <HAL_DMA_IRQHandler+0xe7e>
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	f003 0308 	and.w	r3, r3, #8
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 8082 	beq.w	8003fda <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a41      	ldr	r2, [pc, #260]	; (8003fe0 <HAL_DMA_IRQHandler+0xe84>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d04a      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xe1a>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a3f      	ldr	r2, [pc, #252]	; (8003fe4 <HAL_DMA_IRQHandler+0xe88>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d045      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xe1a>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a3e      	ldr	r2, [pc, #248]	; (8003fe8 <HAL_DMA_IRQHandler+0xe8c>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d040      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xe1a>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a3c      	ldr	r2, [pc, #240]	; (8003fec <HAL_DMA_IRQHandler+0xe90>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d03b      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xe1a>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a3b      	ldr	r2, [pc, #236]	; (8003ff0 <HAL_DMA_IRQHandler+0xe94>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d036      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xe1a>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a39      	ldr	r2, [pc, #228]	; (8003ff4 <HAL_DMA_IRQHandler+0xe98>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d031      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xe1a>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a38      	ldr	r2, [pc, #224]	; (8003ff8 <HAL_DMA_IRQHandler+0xe9c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d02c      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xe1a>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a36      	ldr	r2, [pc, #216]	; (8003ffc <HAL_DMA_IRQHandler+0xea0>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d027      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xe1a>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a35      	ldr	r2, [pc, #212]	; (8004000 <HAL_DMA_IRQHandler+0xea4>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d022      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xe1a>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a33      	ldr	r2, [pc, #204]	; (8004004 <HAL_DMA_IRQHandler+0xea8>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d01d      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xe1a>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a32      	ldr	r2, [pc, #200]	; (8004008 <HAL_DMA_IRQHandler+0xeac>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d018      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xe1a>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a30      	ldr	r2, [pc, #192]	; (800400c <HAL_DMA_IRQHandler+0xeb0>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d013      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xe1a>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a2f      	ldr	r2, [pc, #188]	; (8004010 <HAL_DMA_IRQHandler+0xeb4>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d00e      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xe1a>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a2d      	ldr	r2, [pc, #180]	; (8004014 <HAL_DMA_IRQHandler+0xeb8>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d009      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xe1a>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a2c      	ldr	r2, [pc, #176]	; (8004018 <HAL_DMA_IRQHandler+0xebc>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d004      	beq.n	8003f76 <HAL_DMA_IRQHandler+0xe1a>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a2a      	ldr	r2, [pc, #168]	; (800401c <HAL_DMA_IRQHandler+0xec0>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d108      	bne.n	8003f88 <HAL_DMA_IRQHandler+0xe2c>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 021c 	bic.w	r2, r2, #28
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	e007      	b.n	8003f98 <HAL_DMA_IRQHandler+0xe3c>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 020e 	bic.w	r2, r2, #14
 8003f96:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9c:	f003 031f 	and.w	r3, r3, #31
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	409a      	lsls	r2, r3
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d009      	beq.n	8003fda <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	4798      	blx	r3
 8003fce:	e004      	b.n	8003fda <HAL_DMA_IRQHandler+0xe7e>
          return;
 8003fd0:	bf00      	nop
 8003fd2:	e002      	b.n	8003fda <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fd4:	bf00      	nop
 8003fd6:	e000      	b.n	8003fda <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fd8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003fda:	3728      	adds	r7, #40	; 0x28
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	40020010 	.word	0x40020010
 8003fe4:	40020028 	.word	0x40020028
 8003fe8:	40020040 	.word	0x40020040
 8003fec:	40020058 	.word	0x40020058
 8003ff0:	40020070 	.word	0x40020070
 8003ff4:	40020088 	.word	0x40020088
 8003ff8:	400200a0 	.word	0x400200a0
 8003ffc:	400200b8 	.word	0x400200b8
 8004000:	40020410 	.word	0x40020410
 8004004:	40020428 	.word	0x40020428
 8004008:	40020440 	.word	0x40020440
 800400c:	40020458 	.word	0x40020458
 8004010:	40020470 	.word	0x40020470
 8004014:	40020488 	.word	0x40020488
 8004018:	400204a0 	.word	0x400204a0
 800401c:	400204b8 	.word	0x400204b8

08004020 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
 800402c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004032:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004038:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a84      	ldr	r2, [pc, #528]	; (8004250 <DMA_SetConfig+0x230>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d072      	beq.n	800412a <DMA_SetConfig+0x10a>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a82      	ldr	r2, [pc, #520]	; (8004254 <DMA_SetConfig+0x234>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d06d      	beq.n	800412a <DMA_SetConfig+0x10a>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a81      	ldr	r2, [pc, #516]	; (8004258 <DMA_SetConfig+0x238>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d068      	beq.n	800412a <DMA_SetConfig+0x10a>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a7f      	ldr	r2, [pc, #508]	; (800425c <DMA_SetConfig+0x23c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d063      	beq.n	800412a <DMA_SetConfig+0x10a>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a7e      	ldr	r2, [pc, #504]	; (8004260 <DMA_SetConfig+0x240>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d05e      	beq.n	800412a <DMA_SetConfig+0x10a>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a7c      	ldr	r2, [pc, #496]	; (8004264 <DMA_SetConfig+0x244>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d059      	beq.n	800412a <DMA_SetConfig+0x10a>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a7b      	ldr	r2, [pc, #492]	; (8004268 <DMA_SetConfig+0x248>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d054      	beq.n	800412a <DMA_SetConfig+0x10a>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a79      	ldr	r2, [pc, #484]	; (800426c <DMA_SetConfig+0x24c>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d04f      	beq.n	800412a <DMA_SetConfig+0x10a>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a78      	ldr	r2, [pc, #480]	; (8004270 <DMA_SetConfig+0x250>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d04a      	beq.n	800412a <DMA_SetConfig+0x10a>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a76      	ldr	r2, [pc, #472]	; (8004274 <DMA_SetConfig+0x254>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d045      	beq.n	800412a <DMA_SetConfig+0x10a>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a75      	ldr	r2, [pc, #468]	; (8004278 <DMA_SetConfig+0x258>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d040      	beq.n	800412a <DMA_SetConfig+0x10a>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a73      	ldr	r2, [pc, #460]	; (800427c <DMA_SetConfig+0x25c>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d03b      	beq.n	800412a <DMA_SetConfig+0x10a>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a72      	ldr	r2, [pc, #456]	; (8004280 <DMA_SetConfig+0x260>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d036      	beq.n	800412a <DMA_SetConfig+0x10a>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a70      	ldr	r2, [pc, #448]	; (8004284 <DMA_SetConfig+0x264>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d031      	beq.n	800412a <DMA_SetConfig+0x10a>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a6f      	ldr	r2, [pc, #444]	; (8004288 <DMA_SetConfig+0x268>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d02c      	beq.n	800412a <DMA_SetConfig+0x10a>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a6d      	ldr	r2, [pc, #436]	; (800428c <DMA_SetConfig+0x26c>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d027      	beq.n	800412a <DMA_SetConfig+0x10a>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a6c      	ldr	r2, [pc, #432]	; (8004290 <DMA_SetConfig+0x270>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d022      	beq.n	800412a <DMA_SetConfig+0x10a>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a6a      	ldr	r2, [pc, #424]	; (8004294 <DMA_SetConfig+0x274>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d01d      	beq.n	800412a <DMA_SetConfig+0x10a>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a69      	ldr	r2, [pc, #420]	; (8004298 <DMA_SetConfig+0x278>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d018      	beq.n	800412a <DMA_SetConfig+0x10a>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a67      	ldr	r2, [pc, #412]	; (800429c <DMA_SetConfig+0x27c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d013      	beq.n	800412a <DMA_SetConfig+0x10a>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a66      	ldr	r2, [pc, #408]	; (80042a0 <DMA_SetConfig+0x280>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d00e      	beq.n	800412a <DMA_SetConfig+0x10a>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a64      	ldr	r2, [pc, #400]	; (80042a4 <DMA_SetConfig+0x284>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d009      	beq.n	800412a <DMA_SetConfig+0x10a>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a63      	ldr	r2, [pc, #396]	; (80042a8 <DMA_SetConfig+0x288>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d004      	beq.n	800412a <DMA_SetConfig+0x10a>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a61      	ldr	r2, [pc, #388]	; (80042ac <DMA_SetConfig+0x28c>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d101      	bne.n	800412e <DMA_SetConfig+0x10e>
 800412a:	2301      	movs	r3, #1
 800412c:	e000      	b.n	8004130 <DMA_SetConfig+0x110>
 800412e:	2300      	movs	r3, #0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00d      	beq.n	8004150 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800413c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004142:	2b00      	cmp	r3, #0
 8004144:	d004      	beq.n	8004150 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800414e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a3e      	ldr	r2, [pc, #248]	; (8004250 <DMA_SetConfig+0x230>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d04a      	beq.n	80041f0 <DMA_SetConfig+0x1d0>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a3d      	ldr	r2, [pc, #244]	; (8004254 <DMA_SetConfig+0x234>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d045      	beq.n	80041f0 <DMA_SetConfig+0x1d0>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a3b      	ldr	r2, [pc, #236]	; (8004258 <DMA_SetConfig+0x238>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d040      	beq.n	80041f0 <DMA_SetConfig+0x1d0>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a3a      	ldr	r2, [pc, #232]	; (800425c <DMA_SetConfig+0x23c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d03b      	beq.n	80041f0 <DMA_SetConfig+0x1d0>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a38      	ldr	r2, [pc, #224]	; (8004260 <DMA_SetConfig+0x240>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d036      	beq.n	80041f0 <DMA_SetConfig+0x1d0>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a37      	ldr	r2, [pc, #220]	; (8004264 <DMA_SetConfig+0x244>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d031      	beq.n	80041f0 <DMA_SetConfig+0x1d0>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a35      	ldr	r2, [pc, #212]	; (8004268 <DMA_SetConfig+0x248>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d02c      	beq.n	80041f0 <DMA_SetConfig+0x1d0>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a34      	ldr	r2, [pc, #208]	; (800426c <DMA_SetConfig+0x24c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d027      	beq.n	80041f0 <DMA_SetConfig+0x1d0>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a32      	ldr	r2, [pc, #200]	; (8004270 <DMA_SetConfig+0x250>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d022      	beq.n	80041f0 <DMA_SetConfig+0x1d0>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a31      	ldr	r2, [pc, #196]	; (8004274 <DMA_SetConfig+0x254>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d01d      	beq.n	80041f0 <DMA_SetConfig+0x1d0>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a2f      	ldr	r2, [pc, #188]	; (8004278 <DMA_SetConfig+0x258>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d018      	beq.n	80041f0 <DMA_SetConfig+0x1d0>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a2e      	ldr	r2, [pc, #184]	; (800427c <DMA_SetConfig+0x25c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d013      	beq.n	80041f0 <DMA_SetConfig+0x1d0>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a2c      	ldr	r2, [pc, #176]	; (8004280 <DMA_SetConfig+0x260>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d00e      	beq.n	80041f0 <DMA_SetConfig+0x1d0>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a2b      	ldr	r2, [pc, #172]	; (8004284 <DMA_SetConfig+0x264>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d009      	beq.n	80041f0 <DMA_SetConfig+0x1d0>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a29      	ldr	r2, [pc, #164]	; (8004288 <DMA_SetConfig+0x268>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d004      	beq.n	80041f0 <DMA_SetConfig+0x1d0>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a28      	ldr	r2, [pc, #160]	; (800428c <DMA_SetConfig+0x26c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d101      	bne.n	80041f4 <DMA_SetConfig+0x1d4>
 80041f0:	2301      	movs	r3, #1
 80041f2:	e000      	b.n	80041f6 <DMA_SetConfig+0x1d6>
 80041f4:	2300      	movs	r3, #0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d05a      	beq.n	80042b0 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041fe:	f003 031f 	and.w	r3, r3, #31
 8004202:	223f      	movs	r2, #63	; 0x3f
 8004204:	409a      	lsls	r2, r3
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004218:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	2b40      	cmp	r3, #64	; 0x40
 8004228:	d108      	bne.n	800423c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68ba      	ldr	r2, [r7, #8]
 8004238:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800423a:	e0af      	b.n	800439c <DMA_SetConfig+0x37c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	60da      	str	r2, [r3, #12]
}
 800424c:	e0a6      	b.n	800439c <DMA_SetConfig+0x37c>
 800424e:	bf00      	nop
 8004250:	40020010 	.word	0x40020010
 8004254:	40020028 	.word	0x40020028
 8004258:	40020040 	.word	0x40020040
 800425c:	40020058 	.word	0x40020058
 8004260:	40020070 	.word	0x40020070
 8004264:	40020088 	.word	0x40020088
 8004268:	400200a0 	.word	0x400200a0
 800426c:	400200b8 	.word	0x400200b8
 8004270:	40020410 	.word	0x40020410
 8004274:	40020428 	.word	0x40020428
 8004278:	40020440 	.word	0x40020440
 800427c:	40020458 	.word	0x40020458
 8004280:	40020470 	.word	0x40020470
 8004284:	40020488 	.word	0x40020488
 8004288:	400204a0 	.word	0x400204a0
 800428c:	400204b8 	.word	0x400204b8
 8004290:	58025408 	.word	0x58025408
 8004294:	5802541c 	.word	0x5802541c
 8004298:	58025430 	.word	0x58025430
 800429c:	58025444 	.word	0x58025444
 80042a0:	58025458 	.word	0x58025458
 80042a4:	5802546c 	.word	0x5802546c
 80042a8:	58025480 	.word	0x58025480
 80042ac:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a3c      	ldr	r2, [pc, #240]	; (80043a8 <DMA_SetConfig+0x388>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d04a      	beq.n	8004350 <DMA_SetConfig+0x330>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a3b      	ldr	r2, [pc, #236]	; (80043ac <DMA_SetConfig+0x38c>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d045      	beq.n	8004350 <DMA_SetConfig+0x330>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a39      	ldr	r2, [pc, #228]	; (80043b0 <DMA_SetConfig+0x390>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d040      	beq.n	8004350 <DMA_SetConfig+0x330>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a38      	ldr	r2, [pc, #224]	; (80043b4 <DMA_SetConfig+0x394>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d03b      	beq.n	8004350 <DMA_SetConfig+0x330>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a36      	ldr	r2, [pc, #216]	; (80043b8 <DMA_SetConfig+0x398>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d036      	beq.n	8004350 <DMA_SetConfig+0x330>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a35      	ldr	r2, [pc, #212]	; (80043bc <DMA_SetConfig+0x39c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d031      	beq.n	8004350 <DMA_SetConfig+0x330>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a33      	ldr	r2, [pc, #204]	; (80043c0 <DMA_SetConfig+0x3a0>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d02c      	beq.n	8004350 <DMA_SetConfig+0x330>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a32      	ldr	r2, [pc, #200]	; (80043c4 <DMA_SetConfig+0x3a4>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d027      	beq.n	8004350 <DMA_SetConfig+0x330>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a30      	ldr	r2, [pc, #192]	; (80043c8 <DMA_SetConfig+0x3a8>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d022      	beq.n	8004350 <DMA_SetConfig+0x330>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a2f      	ldr	r2, [pc, #188]	; (80043cc <DMA_SetConfig+0x3ac>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d01d      	beq.n	8004350 <DMA_SetConfig+0x330>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a2d      	ldr	r2, [pc, #180]	; (80043d0 <DMA_SetConfig+0x3b0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d018      	beq.n	8004350 <DMA_SetConfig+0x330>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a2c      	ldr	r2, [pc, #176]	; (80043d4 <DMA_SetConfig+0x3b4>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d013      	beq.n	8004350 <DMA_SetConfig+0x330>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a2a      	ldr	r2, [pc, #168]	; (80043d8 <DMA_SetConfig+0x3b8>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d00e      	beq.n	8004350 <DMA_SetConfig+0x330>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a29      	ldr	r2, [pc, #164]	; (80043dc <DMA_SetConfig+0x3bc>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d009      	beq.n	8004350 <DMA_SetConfig+0x330>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a27      	ldr	r2, [pc, #156]	; (80043e0 <DMA_SetConfig+0x3c0>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d004      	beq.n	8004350 <DMA_SetConfig+0x330>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a26      	ldr	r2, [pc, #152]	; (80043e4 <DMA_SetConfig+0x3c4>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d101      	bne.n	8004354 <DMA_SetConfig+0x334>
 8004350:	2301      	movs	r3, #1
 8004352:	e000      	b.n	8004356 <DMA_SetConfig+0x336>
 8004354:	2300      	movs	r3, #0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d020      	beq.n	800439c <DMA_SetConfig+0x37c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800435e:	f003 031f 	and.w	r3, r3, #31
 8004362:	2201      	movs	r2, #1
 8004364:	409a      	lsls	r2, r3
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	2b40      	cmp	r3, #64	; 0x40
 8004378:	d108      	bne.n	800438c <DMA_SetConfig+0x36c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	60da      	str	r2, [r3, #12]
}
 800438a:	e007      	b.n	800439c <DMA_SetConfig+0x37c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68ba      	ldr	r2, [r7, #8]
 8004392:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	60da      	str	r2, [r3, #12]
}
 800439c:	bf00      	nop
 800439e:	371c      	adds	r7, #28
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	48022c08 	.word	0x48022c08
 80043ac:	48022c1c 	.word	0x48022c1c
 80043b0:	48022c30 	.word	0x48022c30
 80043b4:	48022c44 	.word	0x48022c44
 80043b8:	48022c58 	.word	0x48022c58
 80043bc:	48022c6c 	.word	0x48022c6c
 80043c0:	48022c80 	.word	0x48022c80
 80043c4:	48022c94 	.word	0x48022c94
 80043c8:	58025408 	.word	0x58025408
 80043cc:	5802541c 	.word	0x5802541c
 80043d0:	58025430 	.word	0x58025430
 80043d4:	58025444 	.word	0x58025444
 80043d8:	58025458 	.word	0x58025458
 80043dc:	5802546c 	.word	0x5802546c
 80043e0:	58025480 	.word	0x58025480
 80043e4:	58025494 	.word	0x58025494

080043e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a42      	ldr	r2, [pc, #264]	; (8004500 <DMA_CalcBaseAndBitshift+0x118>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d04a      	beq.n	8004490 <DMA_CalcBaseAndBitshift+0xa8>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a41      	ldr	r2, [pc, #260]	; (8004504 <DMA_CalcBaseAndBitshift+0x11c>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d045      	beq.n	8004490 <DMA_CalcBaseAndBitshift+0xa8>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a3f      	ldr	r2, [pc, #252]	; (8004508 <DMA_CalcBaseAndBitshift+0x120>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d040      	beq.n	8004490 <DMA_CalcBaseAndBitshift+0xa8>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a3e      	ldr	r2, [pc, #248]	; (800450c <DMA_CalcBaseAndBitshift+0x124>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d03b      	beq.n	8004490 <DMA_CalcBaseAndBitshift+0xa8>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a3c      	ldr	r2, [pc, #240]	; (8004510 <DMA_CalcBaseAndBitshift+0x128>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d036      	beq.n	8004490 <DMA_CalcBaseAndBitshift+0xa8>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a3b      	ldr	r2, [pc, #236]	; (8004514 <DMA_CalcBaseAndBitshift+0x12c>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d031      	beq.n	8004490 <DMA_CalcBaseAndBitshift+0xa8>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a39      	ldr	r2, [pc, #228]	; (8004518 <DMA_CalcBaseAndBitshift+0x130>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d02c      	beq.n	8004490 <DMA_CalcBaseAndBitshift+0xa8>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a38      	ldr	r2, [pc, #224]	; (800451c <DMA_CalcBaseAndBitshift+0x134>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d027      	beq.n	8004490 <DMA_CalcBaseAndBitshift+0xa8>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a36      	ldr	r2, [pc, #216]	; (8004520 <DMA_CalcBaseAndBitshift+0x138>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d022      	beq.n	8004490 <DMA_CalcBaseAndBitshift+0xa8>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a35      	ldr	r2, [pc, #212]	; (8004524 <DMA_CalcBaseAndBitshift+0x13c>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d01d      	beq.n	8004490 <DMA_CalcBaseAndBitshift+0xa8>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a33      	ldr	r2, [pc, #204]	; (8004528 <DMA_CalcBaseAndBitshift+0x140>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d018      	beq.n	8004490 <DMA_CalcBaseAndBitshift+0xa8>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a32      	ldr	r2, [pc, #200]	; (800452c <DMA_CalcBaseAndBitshift+0x144>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d013      	beq.n	8004490 <DMA_CalcBaseAndBitshift+0xa8>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a30      	ldr	r2, [pc, #192]	; (8004530 <DMA_CalcBaseAndBitshift+0x148>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d00e      	beq.n	8004490 <DMA_CalcBaseAndBitshift+0xa8>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a2f      	ldr	r2, [pc, #188]	; (8004534 <DMA_CalcBaseAndBitshift+0x14c>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d009      	beq.n	8004490 <DMA_CalcBaseAndBitshift+0xa8>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a2d      	ldr	r2, [pc, #180]	; (8004538 <DMA_CalcBaseAndBitshift+0x150>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d004      	beq.n	8004490 <DMA_CalcBaseAndBitshift+0xa8>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a2c      	ldr	r2, [pc, #176]	; (800453c <DMA_CalcBaseAndBitshift+0x154>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d101      	bne.n	8004494 <DMA_CalcBaseAndBitshift+0xac>
 8004490:	2301      	movs	r3, #1
 8004492:	e000      	b.n	8004496 <DMA_CalcBaseAndBitshift+0xae>
 8004494:	2300      	movs	r3, #0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d024      	beq.n	80044e4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	3b10      	subs	r3, #16
 80044a2:	4a27      	ldr	r2, [pc, #156]	; (8004540 <DMA_CalcBaseAndBitshift+0x158>)
 80044a4:	fba2 2303 	umull	r2, r3, r2, r3
 80044a8:	091b      	lsrs	r3, r3, #4
 80044aa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f003 0307 	and.w	r3, r3, #7
 80044b2:	4a24      	ldr	r2, [pc, #144]	; (8004544 <DMA_CalcBaseAndBitshift+0x15c>)
 80044b4:	5cd3      	ldrb	r3, [r2, r3]
 80044b6:	461a      	mov	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2b03      	cmp	r3, #3
 80044c0:	d908      	bls.n	80044d4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	4b1f      	ldr	r3, [pc, #124]	; (8004548 <DMA_CalcBaseAndBitshift+0x160>)
 80044ca:	4013      	ands	r3, r2
 80044cc:	1d1a      	adds	r2, r3, #4
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	659a      	str	r2, [r3, #88]	; 0x58
 80044d2:	e00d      	b.n	80044f0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	461a      	mov	r2, r3
 80044da:	4b1b      	ldr	r3, [pc, #108]	; (8004548 <DMA_CalcBaseAndBitshift+0x160>)
 80044dc:	4013      	ands	r3, r2
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	6593      	str	r3, [r2, #88]	; 0x58
 80044e2:	e005      	b.n	80044f0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	40020010 	.word	0x40020010
 8004504:	40020028 	.word	0x40020028
 8004508:	40020040 	.word	0x40020040
 800450c:	40020058 	.word	0x40020058
 8004510:	40020070 	.word	0x40020070
 8004514:	40020088 	.word	0x40020088
 8004518:	400200a0 	.word	0x400200a0
 800451c:	400200b8 	.word	0x400200b8
 8004520:	40020410 	.word	0x40020410
 8004524:	40020428 	.word	0x40020428
 8004528:	40020440 	.word	0x40020440
 800452c:	40020458 	.word	0x40020458
 8004530:	40020470 	.word	0x40020470
 8004534:	40020488 	.word	0x40020488
 8004538:	400204a0 	.word	0x400204a0
 800453c:	400204b8 	.word	0x400204b8
 8004540:	aaaaaaab 	.word	0xaaaaaaab
 8004544:	08008b88 	.word	0x08008b88
 8004548:	fffffc00 	.word	0xfffffc00

0800454c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004554:	2300      	movs	r3, #0
 8004556:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d120      	bne.n	80045a2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004564:	2b03      	cmp	r3, #3
 8004566:	d858      	bhi.n	800461a <DMA_CheckFifoParam+0xce>
 8004568:	a201      	add	r2, pc, #4	; (adr r2, 8004570 <DMA_CheckFifoParam+0x24>)
 800456a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456e:	bf00      	nop
 8004570:	08004581 	.word	0x08004581
 8004574:	08004593 	.word	0x08004593
 8004578:	08004581 	.word	0x08004581
 800457c:	0800461b 	.word	0x0800461b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004584:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d048      	beq.n	800461e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004590:	e045      	b.n	800461e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004596:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800459a:	d142      	bne.n	8004622 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045a0:	e03f      	b.n	8004622 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045aa:	d123      	bne.n	80045f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b0:	2b03      	cmp	r3, #3
 80045b2:	d838      	bhi.n	8004626 <DMA_CheckFifoParam+0xda>
 80045b4:	a201      	add	r2, pc, #4	; (adr r2, 80045bc <DMA_CheckFifoParam+0x70>)
 80045b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ba:	bf00      	nop
 80045bc:	080045cd 	.word	0x080045cd
 80045c0:	080045d3 	.word	0x080045d3
 80045c4:	080045cd 	.word	0x080045cd
 80045c8:	080045e5 	.word	0x080045e5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	73fb      	strb	r3, [r7, #15]
        break;
 80045d0:	e030      	b.n	8004634 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d025      	beq.n	800462a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045e2:	e022      	b.n	800462a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045ec:	d11f      	bne.n	800462e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045f2:	e01c      	b.n	800462e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d902      	bls.n	8004602 <DMA_CheckFifoParam+0xb6>
 80045fc:	2b03      	cmp	r3, #3
 80045fe:	d003      	beq.n	8004608 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004600:	e018      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	73fb      	strb	r3, [r7, #15]
        break;
 8004606:	e015      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00e      	beq.n	8004632 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	73fb      	strb	r3, [r7, #15]
    break;
 8004618:	e00b      	b.n	8004632 <DMA_CheckFifoParam+0xe6>
        break;
 800461a:	bf00      	nop
 800461c:	e00a      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
        break;
 800461e:	bf00      	nop
 8004620:	e008      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
        break;
 8004622:	bf00      	nop
 8004624:	e006      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
        break;
 8004626:	bf00      	nop
 8004628:	e004      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
        break;
 800462a:	bf00      	nop
 800462c:	e002      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
        break;
 800462e:	bf00      	nop
 8004630:	e000      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
    break;
 8004632:	bf00      	nop
    }
  }

  return status;
 8004634:	7bfb      	ldrb	r3, [r7, #15]
}
 8004636:	4618      	mov	r0, r3
 8004638:	3714      	adds	r7, #20
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop

08004644 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a38      	ldr	r2, [pc, #224]	; (8004738 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d022      	beq.n	80046a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a36      	ldr	r2, [pc, #216]	; (800473c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d01d      	beq.n	80046a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a35      	ldr	r2, [pc, #212]	; (8004740 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d018      	beq.n	80046a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a33      	ldr	r2, [pc, #204]	; (8004744 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d013      	beq.n	80046a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a32      	ldr	r2, [pc, #200]	; (8004748 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d00e      	beq.n	80046a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a30      	ldr	r2, [pc, #192]	; (800474c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d009      	beq.n	80046a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a2f      	ldr	r2, [pc, #188]	; (8004750 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d004      	beq.n	80046a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a2d      	ldr	r2, [pc, #180]	; (8004754 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d101      	bne.n	80046a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80046a2:	2301      	movs	r3, #1
 80046a4:	e000      	b.n	80046a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80046a6:	2300      	movs	r3, #0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d01a      	beq.n	80046e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	3b08      	subs	r3, #8
 80046b4:	4a28      	ldr	r2, [pc, #160]	; (8004758 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80046b6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ba:	091b      	lsrs	r3, r3, #4
 80046bc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	4b26      	ldr	r3, [pc, #152]	; (800475c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80046c2:	4413      	add	r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	461a      	mov	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a24      	ldr	r2, [pc, #144]	; (8004760 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80046d0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f003 031f 	and.w	r3, r3, #31
 80046d8:	2201      	movs	r2, #1
 80046da:	409a      	lsls	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80046e0:	e024      	b.n	800472c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	3b10      	subs	r3, #16
 80046ea:	4a1e      	ldr	r2, [pc, #120]	; (8004764 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80046ec:	fba2 2303 	umull	r2, r3, r2, r3
 80046f0:	091b      	lsrs	r3, r3, #4
 80046f2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	4a1c      	ldr	r2, [pc, #112]	; (8004768 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d806      	bhi.n	800470a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	4a1b      	ldr	r2, [pc, #108]	; (800476c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d902      	bls.n	800470a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	3308      	adds	r3, #8
 8004708:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	4b18      	ldr	r3, [pc, #96]	; (8004770 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800470e:	4413      	add	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	461a      	mov	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a16      	ldr	r2, [pc, #88]	; (8004774 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800471c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f003 031f 	and.w	r3, r3, #31
 8004724:	2201      	movs	r2, #1
 8004726:	409a      	lsls	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800472c:	bf00      	nop
 800472e:	3714      	adds	r7, #20
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr
 8004738:	58025408 	.word	0x58025408
 800473c:	5802541c 	.word	0x5802541c
 8004740:	58025430 	.word	0x58025430
 8004744:	58025444 	.word	0x58025444
 8004748:	58025458 	.word	0x58025458
 800474c:	5802546c 	.word	0x5802546c
 8004750:	58025480 	.word	0x58025480
 8004754:	58025494 	.word	0x58025494
 8004758:	cccccccd 	.word	0xcccccccd
 800475c:	16009600 	.word	0x16009600
 8004760:	58025880 	.word	0x58025880
 8004764:	aaaaaaab 	.word	0xaaaaaaab
 8004768:	400204b8 	.word	0x400204b8
 800476c:	4002040f 	.word	0x4002040f
 8004770:	10008200 	.word	0x10008200
 8004774:	40020880 	.word	0x40020880

08004778 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	b2db      	uxtb	r3, r3
 8004786:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d04a      	beq.n	8004824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2b08      	cmp	r3, #8
 8004792:	d847      	bhi.n	8004824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a25      	ldr	r2, [pc, #148]	; (8004830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d022      	beq.n	80047e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a24      	ldr	r2, [pc, #144]	; (8004834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d01d      	beq.n	80047e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a22      	ldr	r2, [pc, #136]	; (8004838 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d018      	beq.n	80047e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a21      	ldr	r2, [pc, #132]	; (800483c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d013      	beq.n	80047e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a1f      	ldr	r2, [pc, #124]	; (8004840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d00e      	beq.n	80047e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a1e      	ldr	r2, [pc, #120]	; (8004844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d009      	beq.n	80047e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a1c      	ldr	r2, [pc, #112]	; (8004848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d004      	beq.n	80047e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a1b      	ldr	r2, [pc, #108]	; (800484c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d101      	bne.n	80047e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80047e4:	2301      	movs	r3, #1
 80047e6:	e000      	b.n	80047ea <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80047e8:	2300      	movs	r3, #0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00a      	beq.n	8004804 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	4b17      	ldr	r3, [pc, #92]	; (8004850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80047f2:	4413      	add	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	461a      	mov	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a15      	ldr	r2, [pc, #84]	; (8004854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004800:	671a      	str	r2, [r3, #112]	; 0x70
 8004802:	e009      	b.n	8004818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	4b14      	ldr	r3, [pc, #80]	; (8004858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004808:	4413      	add	r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	461a      	mov	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a11      	ldr	r2, [pc, #68]	; (800485c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004816:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	3b01      	subs	r3, #1
 800481c:	2201      	movs	r2, #1
 800481e:	409a      	lsls	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004824:	bf00      	nop
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	58025408 	.word	0x58025408
 8004834:	5802541c 	.word	0x5802541c
 8004838:	58025430 	.word	0x58025430
 800483c:	58025444 	.word	0x58025444
 8004840:	58025458 	.word	0x58025458
 8004844:	5802546c 	.word	0x5802546c
 8004848:	58025480 	.word	0x58025480
 800484c:	58025494 	.word	0x58025494
 8004850:	1600963f 	.word	0x1600963f
 8004854:	58025940 	.word	0x58025940
 8004858:	1000823f 	.word	0x1000823f
 800485c:	40020940 	.word	0x40020940

08004860 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004860:	b480      	push	{r7}
 8004862:	b089      	sub	sp, #36	; 0x24
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800486a:	2300      	movs	r3, #0
 800486c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800486e:	4b89      	ldr	r3, [pc, #548]	; (8004a94 <HAL_GPIO_Init+0x234>)
 8004870:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004872:	e194      	b.n	8004b9e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	2101      	movs	r1, #1
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	fa01 f303 	lsl.w	r3, r1, r3
 8004880:	4013      	ands	r3, r2
 8004882:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	2b00      	cmp	r3, #0
 8004888:	f000 8186 	beq.w	8004b98 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d00b      	beq.n	80048ac <HAL_GPIO_Init+0x4c>
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	2b02      	cmp	r3, #2
 800489a:	d007      	beq.n	80048ac <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80048a0:	2b11      	cmp	r3, #17
 80048a2:	d003      	beq.n	80048ac <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	2b12      	cmp	r3, #18
 80048aa:	d130      	bne.n	800490e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	2203      	movs	r2, #3
 80048b8:	fa02 f303 	lsl.w	r3, r2, r3
 80048bc:	43db      	mvns	r3, r3
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	4013      	ands	r3, r2
 80048c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	68da      	ldr	r2, [r3, #12]
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	005b      	lsls	r3, r3, #1
 80048cc:	fa02 f303 	lsl.w	r3, r2, r3
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048e2:	2201      	movs	r2, #1
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ea:	43db      	mvns	r3, r3
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	4013      	ands	r3, r2
 80048f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	091b      	lsrs	r3, r3, #4
 80048f8:	f003 0201 	and.w	r2, r3, #1
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	4313      	orrs	r3, r2
 8004906:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	2203      	movs	r2, #3
 800491a:	fa02 f303 	lsl.w	r3, r2, r3
 800491e:	43db      	mvns	r3, r3
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	4013      	ands	r3, r2
 8004924:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	689a      	ldr	r2, [r3, #8]
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	fa02 f303 	lsl.w	r3, r2, r3
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	4313      	orrs	r3, r2
 8004936:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	2b02      	cmp	r3, #2
 8004944:	d003      	beq.n	800494e <HAL_GPIO_Init+0xee>
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2b12      	cmp	r3, #18
 800494c:	d123      	bne.n	8004996 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	08da      	lsrs	r2, r3, #3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	3208      	adds	r2, #8
 8004956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800495a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	220f      	movs	r2, #15
 8004966:	fa02 f303 	lsl.w	r3, r2, r3
 800496a:	43db      	mvns	r3, r3
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	4013      	ands	r3, r2
 8004970:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	691a      	ldr	r2, [r3, #16]
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	f003 0307 	and.w	r3, r3, #7
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	fa02 f303 	lsl.w	r3, r2, r3
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	4313      	orrs	r3, r2
 8004986:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	08da      	lsrs	r2, r3, #3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	3208      	adds	r2, #8
 8004990:	69b9      	ldr	r1, [r7, #24]
 8004992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	005b      	lsls	r3, r3, #1
 80049a0:	2203      	movs	r2, #3
 80049a2:	fa02 f303 	lsl.w	r3, r2, r3
 80049a6:	43db      	mvns	r3, r3
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	4013      	ands	r3, r2
 80049ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f003 0203 	and.w	r2, r3, #3
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	fa02 f303 	lsl.w	r3, r2, r3
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f000 80e0 	beq.w	8004b98 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049d8:	4b2f      	ldr	r3, [pc, #188]	; (8004a98 <HAL_GPIO_Init+0x238>)
 80049da:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80049de:	4a2e      	ldr	r2, [pc, #184]	; (8004a98 <HAL_GPIO_Init+0x238>)
 80049e0:	f043 0302 	orr.w	r3, r3, #2
 80049e4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80049e8:	4b2b      	ldr	r3, [pc, #172]	; (8004a98 <HAL_GPIO_Init+0x238>)
 80049ea:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	60fb      	str	r3, [r7, #12]
 80049f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049f6:	4a29      	ldr	r2, [pc, #164]	; (8004a9c <HAL_GPIO_Init+0x23c>)
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	089b      	lsrs	r3, r3, #2
 80049fc:	3302      	adds	r3, #2
 80049fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	f003 0303 	and.w	r3, r3, #3
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	220f      	movs	r2, #15
 8004a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a12:	43db      	mvns	r3, r3
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	4013      	ands	r3, r2
 8004a18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a20      	ldr	r2, [pc, #128]	; (8004aa0 <HAL_GPIO_Init+0x240>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d052      	beq.n	8004ac8 <HAL_GPIO_Init+0x268>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a1f      	ldr	r2, [pc, #124]	; (8004aa4 <HAL_GPIO_Init+0x244>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d031      	beq.n	8004a8e <HAL_GPIO_Init+0x22e>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a1e      	ldr	r2, [pc, #120]	; (8004aa8 <HAL_GPIO_Init+0x248>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d02b      	beq.n	8004a8a <HAL_GPIO_Init+0x22a>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a1d      	ldr	r2, [pc, #116]	; (8004aac <HAL_GPIO_Init+0x24c>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d025      	beq.n	8004a86 <HAL_GPIO_Init+0x226>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a1c      	ldr	r2, [pc, #112]	; (8004ab0 <HAL_GPIO_Init+0x250>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d01f      	beq.n	8004a82 <HAL_GPIO_Init+0x222>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a1b      	ldr	r2, [pc, #108]	; (8004ab4 <HAL_GPIO_Init+0x254>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d019      	beq.n	8004a7e <HAL_GPIO_Init+0x21e>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a1a      	ldr	r2, [pc, #104]	; (8004ab8 <HAL_GPIO_Init+0x258>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d013      	beq.n	8004a7a <HAL_GPIO_Init+0x21a>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a19      	ldr	r2, [pc, #100]	; (8004abc <HAL_GPIO_Init+0x25c>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d00d      	beq.n	8004a76 <HAL_GPIO_Init+0x216>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a18      	ldr	r2, [pc, #96]	; (8004ac0 <HAL_GPIO_Init+0x260>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d007      	beq.n	8004a72 <HAL_GPIO_Init+0x212>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a17      	ldr	r2, [pc, #92]	; (8004ac4 <HAL_GPIO_Init+0x264>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d101      	bne.n	8004a6e <HAL_GPIO_Init+0x20e>
 8004a6a:	2309      	movs	r3, #9
 8004a6c:	e02d      	b.n	8004aca <HAL_GPIO_Init+0x26a>
 8004a6e:	230a      	movs	r3, #10
 8004a70:	e02b      	b.n	8004aca <HAL_GPIO_Init+0x26a>
 8004a72:	2308      	movs	r3, #8
 8004a74:	e029      	b.n	8004aca <HAL_GPIO_Init+0x26a>
 8004a76:	2307      	movs	r3, #7
 8004a78:	e027      	b.n	8004aca <HAL_GPIO_Init+0x26a>
 8004a7a:	2306      	movs	r3, #6
 8004a7c:	e025      	b.n	8004aca <HAL_GPIO_Init+0x26a>
 8004a7e:	2305      	movs	r3, #5
 8004a80:	e023      	b.n	8004aca <HAL_GPIO_Init+0x26a>
 8004a82:	2304      	movs	r3, #4
 8004a84:	e021      	b.n	8004aca <HAL_GPIO_Init+0x26a>
 8004a86:	2303      	movs	r3, #3
 8004a88:	e01f      	b.n	8004aca <HAL_GPIO_Init+0x26a>
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	e01d      	b.n	8004aca <HAL_GPIO_Init+0x26a>
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e01b      	b.n	8004aca <HAL_GPIO_Init+0x26a>
 8004a92:	bf00      	nop
 8004a94:	58000080 	.word	0x58000080
 8004a98:	58024400 	.word	0x58024400
 8004a9c:	58000400 	.word	0x58000400
 8004aa0:	58020000 	.word	0x58020000
 8004aa4:	58020400 	.word	0x58020400
 8004aa8:	58020800 	.word	0x58020800
 8004aac:	58020c00 	.word	0x58020c00
 8004ab0:	58021000 	.word	0x58021000
 8004ab4:	58021400 	.word	0x58021400
 8004ab8:	58021800 	.word	0x58021800
 8004abc:	58021c00 	.word	0x58021c00
 8004ac0:	58022000 	.word	0x58022000
 8004ac4:	58022400 	.word	0x58022400
 8004ac8:	2300      	movs	r3, #0
 8004aca:	69fa      	ldr	r2, [r7, #28]
 8004acc:	f002 0203 	and.w	r2, r2, #3
 8004ad0:	0092      	lsls	r2, r2, #2
 8004ad2:	4093      	lsls	r3, r2
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ada:	4938      	ldr	r1, [pc, #224]	; (8004bbc <HAL_GPIO_Init+0x35c>)
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	089b      	lsrs	r3, r3, #2
 8004ae0:	3302      	adds	r3, #2
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	43db      	mvns	r3, r3
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	4013      	ands	r3, r2
 8004af6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d003      	beq.n	8004b0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	43db      	mvns	r3, r3
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	43db      	mvns	r3, r3
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d003      	beq.n	8004b62 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004b5a:	69ba      	ldr	r2, [r7, #24]
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004b62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	43db      	mvns	r3, r3
 8004b76:	69ba      	ldr	r2, [r7, #24]
 8004b78:	4013      	ands	r3, r2
 8004b7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d003      	beq.n	8004b90 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004b90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f47f ae63 	bne.w	8004874 <HAL_GPIO_Init+0x14>
  }
}
 8004bae:	bf00      	nop
 8004bb0:	3724      	adds	r7, #36	; 0x24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	58000400 	.word	0x58000400

08004bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	460b      	mov	r3, r1
 8004bca:	807b      	strh	r3, [r7, #2]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004bd0:	787b      	ldrb	r3, [r7, #1]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bd6:	887a      	ldrh	r2, [r7, #2]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004bdc:	e003      	b.n	8004be6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004bde:	887b      	ldrh	r3, [r7, #2]
 8004be0:	041a      	lsls	r2, r3, #16
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	619a      	str	r2, [r3, #24]
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
	...

08004bf4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004bfc:	4b29      	ldr	r3, [pc, #164]	; (8004ca4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f003 0307 	and.w	r3, r3, #7
 8004c04:	2b06      	cmp	r3, #6
 8004c06:	d00a      	beq.n	8004c1e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004c08:	4b26      	ldr	r3, [pc, #152]	; (8004ca4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d001      	beq.n	8004c1a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e040      	b.n	8004c9c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	e03e      	b.n	8004c9c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004c1e:	4b21      	ldr	r3, [pc, #132]	; (8004ca4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004c26:	491f      	ldr	r1, [pc, #124]	; (8004ca4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004c2e:	f7fc fa51 	bl	80010d4 <HAL_GetTick>
 8004c32:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c34:	e009      	b.n	8004c4a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004c36:	f7fc fa4d 	bl	80010d4 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c44:	d901      	bls.n	8004c4a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e028      	b.n	8004c9c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c4a:	4b16      	ldr	r3, [pc, #88]	; (8004ca4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c56:	d1ee      	bne.n	8004c36 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b1e      	cmp	r3, #30
 8004c5c:	d008      	beq.n	8004c70 <HAL_PWREx_ConfigSupply+0x7c>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2b2e      	cmp	r3, #46	; 0x2e
 8004c62:	d005      	beq.n	8004c70 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b1d      	cmp	r3, #29
 8004c68:	d002      	beq.n	8004c70 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b2d      	cmp	r3, #45	; 0x2d
 8004c6e:	d114      	bne.n	8004c9a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004c70:	f7fc fa30 	bl	80010d4 <HAL_GetTick>
 8004c74:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004c76:	e009      	b.n	8004c8c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004c78:	f7fc fa2c 	bl	80010d4 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c86:	d901      	bls.n	8004c8c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e007      	b.n	8004c9c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004c8c:	4b05      	ldr	r3, [pc, #20]	; (8004ca4 <HAL_PWREx_ConfigSupply+0xb0>)
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c98:	d1ee      	bne.n	8004c78 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	58024800 	.word	0x58024800

08004ca8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08c      	sub	sp, #48	; 0x30
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e3d7      	b.n	800546a <HAL_RCC_OscConfig+0x7c2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f000 80b3 	beq.w	8004e2e <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cc8:	4b90      	ldr	r3, [pc, #576]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cd2:	4b8e      	ldr	r3, [pc, #568]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cda:	2b10      	cmp	r3, #16
 8004cdc:	d007      	beq.n	8004cee <HAL_RCC_OscConfig+0x46>
 8004cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce0:	2b18      	cmp	r3, #24
 8004ce2:	d112      	bne.n	8004d0a <HAL_RCC_OscConfig+0x62>
 8004ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce6:	f003 0303 	and.w	r3, r3, #3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d10d      	bne.n	8004d0a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cee:	4b87      	ldr	r3, [pc, #540]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f000 8098 	beq.w	8004e2c <HAL_RCC_OscConfig+0x184>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f040 8093 	bne.w	8004e2c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e3af      	b.n	800546a <HAL_RCC_OscConfig+0x7c2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d12:	d106      	bne.n	8004d22 <HAL_RCC_OscConfig+0x7a>
 8004d14:	4b7d      	ldr	r3, [pc, #500]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a7c      	ldr	r2, [pc, #496]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d1e:	6013      	str	r3, [r2, #0]
 8004d20:	e058      	b.n	8004dd4 <HAL_RCC_OscConfig+0x12c>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d112      	bne.n	8004d50 <HAL_RCC_OscConfig+0xa8>
 8004d2a:	4b78      	ldr	r3, [pc, #480]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a77      	ldr	r2, [pc, #476]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d34:	6013      	str	r3, [r2, #0]
 8004d36:	4b75      	ldr	r3, [pc, #468]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a74      	ldr	r2, [pc, #464]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004d3c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004d40:	6013      	str	r3, [r2, #0]
 8004d42:	4b72      	ldr	r3, [pc, #456]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a71      	ldr	r2, [pc, #452]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004d48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d4c:	6013      	str	r3, [r2, #0]
 8004d4e:	e041      	b.n	8004dd4 <HAL_RCC_OscConfig+0x12c>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d58:	d112      	bne.n	8004d80 <HAL_RCC_OscConfig+0xd8>
 8004d5a:	4b6c      	ldr	r3, [pc, #432]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a6b      	ldr	r2, [pc, #428]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d64:	6013      	str	r3, [r2, #0]
 8004d66:	4b69      	ldr	r3, [pc, #420]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a68      	ldr	r2, [pc, #416]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004d6c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004d70:	6013      	str	r3, [r2, #0]
 8004d72:	4b66      	ldr	r3, [pc, #408]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a65      	ldr	r2, [pc, #404]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d7c:	6013      	str	r3, [r2, #0]
 8004d7e:	e029      	b.n	8004dd4 <HAL_RCC_OscConfig+0x12c>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004d88:	d112      	bne.n	8004db0 <HAL_RCC_OscConfig+0x108>
 8004d8a:	4b60      	ldr	r3, [pc, #384]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a5f      	ldr	r2, [pc, #380]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d94:	6013      	str	r3, [r2, #0]
 8004d96:	4b5d      	ldr	r3, [pc, #372]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a5c      	ldr	r2, [pc, #368]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004d9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004da0:	6013      	str	r3, [r2, #0]
 8004da2:	4b5a      	ldr	r3, [pc, #360]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a59      	ldr	r2, [pc, #356]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dac:	6013      	str	r3, [r2, #0]
 8004dae:	e011      	b.n	8004dd4 <HAL_RCC_OscConfig+0x12c>
 8004db0:	4b56      	ldr	r3, [pc, #344]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a55      	ldr	r2, [pc, #340]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dba:	6013      	str	r3, [r2, #0]
 8004dbc:	4b53      	ldr	r3, [pc, #332]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a52      	ldr	r2, [pc, #328]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dc6:	6013      	str	r3, [r2, #0]
 8004dc8:	4b50      	ldr	r3, [pc, #320]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a4f      	ldr	r2, [pc, #316]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004dce:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d013      	beq.n	8004e04 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ddc:	f7fc f97a 	bl	80010d4 <HAL_GetTick>
 8004de0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004de2:	e008      	b.n	8004df6 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004de4:	f7fc f976 	bl	80010d4 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b64      	cmp	r3, #100	; 0x64
 8004df0:	d901      	bls.n	8004df6 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e339      	b.n	800546a <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004df6:	4b45      	ldr	r3, [pc, #276]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d0f0      	beq.n	8004de4 <HAL_RCC_OscConfig+0x13c>
 8004e02:	e014      	b.n	8004e2e <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e04:	f7fc f966 	bl	80010d4 <HAL_GetTick>
 8004e08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e0a:	e008      	b.n	8004e1e <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e0c:	f7fc f962 	bl	80010d4 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b64      	cmp	r3, #100	; 0x64
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e325      	b.n	800546a <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e1e:	4b3b      	ldr	r3, [pc, #236]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1f0      	bne.n	8004e0c <HAL_RCC_OscConfig+0x164>
 8004e2a:	e000      	b.n	8004e2e <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d070      	beq.n	8004f1c <HAL_RCC_OscConfig+0x274>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e3a:	4b34      	ldr	r3, [pc, #208]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e42:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e44:	4b31      	ldr	r3, [pc, #196]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e48:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d007      	beq.n	8004e60 <HAL_RCC_OscConfig+0x1b8>
 8004e50:	6a3b      	ldr	r3, [r7, #32]
 8004e52:	2b18      	cmp	r3, #24
 8004e54:	d11b      	bne.n	8004e8e <HAL_RCC_OscConfig+0x1e6>
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	f003 0303 	and.w	r3, r3, #3
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d116      	bne.n	8004e8e <HAL_RCC_OscConfig+0x1e6>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e60:	4b2a      	ldr	r3, [pc, #168]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0304 	and.w	r3, r3, #4
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d005      	beq.n	8004e78 <HAL_RCC_OscConfig+0x1d0>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d101      	bne.n	8004e78 <HAL_RCC_OscConfig+0x1d0>
      {
        return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e2f8      	b.n	800546a <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e78:	4b24      	ldr	r3, [pc, #144]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	061b      	lsls	r3, r3, #24
 8004e86:	4921      	ldr	r1, [pc, #132]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e8c:	e046      	b.n	8004f1c <HAL_RCC_OscConfig+0x274>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d026      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x23c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e96:	4b1d      	ldr	r3, [pc, #116]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f023 0219 	bic.w	r2, r3, #25
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	491a      	ldr	r1, [pc, #104]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea8:	f7fc f914 	bl	80010d4 <HAL_GetTick>
 8004eac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004eae:	e008      	b.n	8004ec2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004eb0:	f7fc f910 	bl	80010d4 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e2d3      	b.n	800546a <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ec2:	4b12      	ldr	r3, [pc, #72]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0304 	and.w	r3, r3, #4
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d0f0      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x208>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ece:	4b0f      	ldr	r3, [pc, #60]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	061b      	lsls	r3, r3, #24
 8004edc:	490b      	ldr	r1, [pc, #44]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	604b      	str	r3, [r1, #4]
 8004ee2:	e01b      	b.n	8004f1c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ee4:	4b09      	ldr	r3, [pc, #36]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a08      	ldr	r2, [pc, #32]	; (8004f0c <HAL_RCC_OscConfig+0x264>)
 8004eea:	f023 0301 	bic.w	r3, r3, #1
 8004eee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef0:	f7fc f8f0 	bl	80010d4 <HAL_GetTick>
 8004ef4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ef6:	e00b      	b.n	8004f10 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ef8:	f7fc f8ec 	bl	80010d4 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d904      	bls.n	8004f10 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e2af      	b.n	800546a <HAL_RCC_OscConfig+0x7c2>
 8004f0a:	bf00      	nop
 8004f0c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f10:	4b99      	ldr	r3, [pc, #612]	; (8005178 <HAL_RCC_OscConfig+0x4d0>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0304 	and.w	r3, r3, #4
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1ed      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x250>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0310 	and.w	r3, r3, #16
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d06a      	beq.n	8004ffe <HAL_RCC_OscConfig+0x356>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f28:	4b93      	ldr	r3, [pc, #588]	; (8005178 <HAL_RCC_OscConfig+0x4d0>)
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f30:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f32:	4b91      	ldr	r3, [pc, #580]	; (8005178 <HAL_RCC_OscConfig+0x4d0>)
 8004f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f36:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	2b08      	cmp	r3, #8
 8004f3c:	d007      	beq.n	8004f4e <HAL_RCC_OscConfig+0x2a6>
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	2b18      	cmp	r3, #24
 8004f42:	d11b      	bne.n	8004f7c <HAL_RCC_OscConfig+0x2d4>
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f003 0303 	and.w	r3, r3, #3
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d116      	bne.n	8004f7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f4e:	4b8a      	ldr	r3, [pc, #552]	; (8005178 <HAL_RCC_OscConfig+0x4d0>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d005      	beq.n	8004f66 <HAL_RCC_OscConfig+0x2be>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	2b80      	cmp	r3, #128	; 0x80
 8004f60:	d001      	beq.n	8004f66 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e281      	b.n	800546a <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f66:	4b84      	ldr	r3, [pc, #528]	; (8005178 <HAL_RCC_OscConfig+0x4d0>)
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	061b      	lsls	r3, r3, #24
 8004f74:	4980      	ldr	r1, [pc, #512]	; (8005178 <HAL_RCC_OscConfig+0x4d0>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f7a:	e040      	b.n	8004ffe <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	69db      	ldr	r3, [r3, #28]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d023      	beq.n	8004fcc <HAL_RCC_OscConfig+0x324>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004f84:	4b7c      	ldr	r3, [pc, #496]	; (8005178 <HAL_RCC_OscConfig+0x4d0>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a7b      	ldr	r2, [pc, #492]	; (8005178 <HAL_RCC_OscConfig+0x4d0>)
 8004f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f90:	f7fc f8a0 	bl	80010d4 <HAL_GetTick>
 8004f94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f96:	e008      	b.n	8004faa <HAL_RCC_OscConfig+0x302>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004f98:	f7fc f89c 	bl	80010d4 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e25f      	b.n	800546a <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004faa:	4b73      	ldr	r3, [pc, #460]	; (8005178 <HAL_RCC_OscConfig+0x4d0>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d0f0      	beq.n	8004f98 <HAL_RCC_OscConfig+0x2f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004fb6:	4b70      	ldr	r3, [pc, #448]	; (8005178 <HAL_RCC_OscConfig+0x4d0>)
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	061b      	lsls	r3, r3, #24
 8004fc4:	496c      	ldr	r1, [pc, #432]	; (8005178 <HAL_RCC_OscConfig+0x4d0>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60cb      	str	r3, [r1, #12]
 8004fca:	e018      	b.n	8004ffe <HAL_RCC_OscConfig+0x356>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004fcc:	4b6a      	ldr	r3, [pc, #424]	; (8005178 <HAL_RCC_OscConfig+0x4d0>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a69      	ldr	r2, [pc, #420]	; (8005178 <HAL_RCC_OscConfig+0x4d0>)
 8004fd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd8:	f7fc f87c 	bl	80010d4 <HAL_GetTick>
 8004fdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004fde:	e008      	b.n	8004ff2 <HAL_RCC_OscConfig+0x34a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004fe0:	f7fc f878 	bl	80010d4 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x34a>
          {
            return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e23b      	b.n	800546a <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ff2:	4b61      	ldr	r3, [pc, #388]	; (8005178 <HAL_RCC_OscConfig+0x4d0>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1f0      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x338>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0308 	and.w	r3, r3, #8
 8005006:	2b00      	cmp	r3, #0
 8005008:	d036      	beq.n	8005078 <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d019      	beq.n	8005046 <HAL_RCC_OscConfig+0x39e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005012:	4b59      	ldr	r3, [pc, #356]	; (8005178 <HAL_RCC_OscConfig+0x4d0>)
 8005014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005016:	4a58      	ldr	r2, [pc, #352]	; (8005178 <HAL_RCC_OscConfig+0x4d0>)
 8005018:	f043 0301 	orr.w	r3, r3, #1
 800501c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800501e:	f7fc f859 	bl	80010d4 <HAL_GetTick>
 8005022:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005024:	e008      	b.n	8005038 <HAL_RCC_OscConfig+0x390>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005026:	f7fc f855 	bl	80010d4 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b02      	cmp	r3, #2
 8005032:	d901      	bls.n	8005038 <HAL_RCC_OscConfig+0x390>
        {
          return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e218      	b.n	800546a <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005038:	4b4f      	ldr	r3, [pc, #316]	; (8005178 <HAL_RCC_OscConfig+0x4d0>)
 800503a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d0f0      	beq.n	8005026 <HAL_RCC_OscConfig+0x37e>
 8005044:	e018      	b.n	8005078 <HAL_RCC_OscConfig+0x3d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005046:	4b4c      	ldr	r3, [pc, #304]	; (8005178 <HAL_RCC_OscConfig+0x4d0>)
 8005048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800504a:	4a4b      	ldr	r2, [pc, #300]	; (8005178 <HAL_RCC_OscConfig+0x4d0>)
 800504c:	f023 0301 	bic.w	r3, r3, #1
 8005050:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005052:	f7fc f83f 	bl	80010d4 <HAL_GetTick>
 8005056:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005058:	e008      	b.n	800506c <HAL_RCC_OscConfig+0x3c4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800505a:	f7fc f83b 	bl	80010d4 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d901      	bls.n	800506c <HAL_RCC_OscConfig+0x3c4>
        {
          return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e1fe      	b.n	800546a <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800506c:	4b42      	ldr	r3, [pc, #264]	; (8005178 <HAL_RCC_OscConfig+0x4d0>)
 800506e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005070:	f003 0302 	and.w	r3, r3, #2
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1f0      	bne.n	800505a <HAL_RCC_OscConfig+0x3b2>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0320 	and.w	r3, r3, #32
 8005080:	2b00      	cmp	r3, #0
 8005082:	d036      	beq.n	80050f2 <HAL_RCC_OscConfig+0x44a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d019      	beq.n	80050c0 <HAL_RCC_OscConfig+0x418>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800508c:	4b3a      	ldr	r3, [pc, #232]	; (8005178 <HAL_RCC_OscConfig+0x4d0>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a39      	ldr	r2, [pc, #228]	; (8005178 <HAL_RCC_OscConfig+0x4d0>)
 8005092:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005096:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005098:	f7fc f81c 	bl	80010d4 <HAL_GetTick>
 800509c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800509e:	e008      	b.n	80050b2 <HAL_RCC_OscConfig+0x40a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80050a0:	f7fc f818 	bl	80010d4 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x40a>
        {
          return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e1db      	b.n	800546a <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80050b2:	4b31      	ldr	r3, [pc, #196]	; (8005178 <HAL_RCC_OscConfig+0x4d0>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d0f0      	beq.n	80050a0 <HAL_RCC_OscConfig+0x3f8>
 80050be:	e018      	b.n	80050f2 <HAL_RCC_OscConfig+0x44a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80050c0:	4b2d      	ldr	r3, [pc, #180]	; (8005178 <HAL_RCC_OscConfig+0x4d0>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a2c      	ldr	r2, [pc, #176]	; (8005178 <HAL_RCC_OscConfig+0x4d0>)
 80050c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80050cc:	f7fc f802 	bl	80010d4 <HAL_GetTick>
 80050d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_OscConfig+0x43e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80050d4:	f7fb fffe 	bl	80010d4 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e1c1      	b.n	800546a <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80050e6:	4b24      	ldr	r3, [pc, #144]	; (8005178 <HAL_RCC_OscConfig+0x4d0>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1f0      	bne.n	80050d4 <HAL_RCC_OscConfig+0x42c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0304 	and.w	r3, r3, #4
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f000 80af 	beq.w	800525e <HAL_RCC_OscConfig+0x5b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005100:	4b1e      	ldr	r3, [pc, #120]	; (800517c <HAL_RCC_OscConfig+0x4d4>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a1d      	ldr	r2, [pc, #116]	; (800517c <HAL_RCC_OscConfig+0x4d4>)
 8005106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800510a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800510c:	f7fb ffe2 	bl	80010d4 <HAL_GetTick>
 8005110:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005112:	e008      	b.n	8005126 <HAL_RCC_OscConfig+0x47e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005114:	f7fb ffde 	bl	80010d4 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b64      	cmp	r3, #100	; 0x64
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e1a1      	b.n	800546a <HAL_RCC_OscConfig+0x7c2>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005126:	4b15      	ldr	r3, [pc, #84]	; (800517c <HAL_RCC_OscConfig+0x4d4>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512e:	2b00      	cmp	r3, #0
 8005130:	d0f0      	beq.n	8005114 <HAL_RCC_OscConfig+0x46c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d106      	bne.n	8005148 <HAL_RCC_OscConfig+0x4a0>
 800513a:	4b0f      	ldr	r3, [pc, #60]	; (8005178 <HAL_RCC_OscConfig+0x4d0>)
 800513c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513e:	4a0e      	ldr	r2, [pc, #56]	; (8005178 <HAL_RCC_OscConfig+0x4d0>)
 8005140:	f043 0301 	orr.w	r3, r3, #1
 8005144:	6713      	str	r3, [r2, #112]	; 0x70
 8005146:	e05b      	b.n	8005200 <HAL_RCC_OscConfig+0x558>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d117      	bne.n	8005180 <HAL_RCC_OscConfig+0x4d8>
 8005150:	4b09      	ldr	r3, [pc, #36]	; (8005178 <HAL_RCC_OscConfig+0x4d0>)
 8005152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005154:	4a08      	ldr	r2, [pc, #32]	; (8005178 <HAL_RCC_OscConfig+0x4d0>)
 8005156:	f023 0301 	bic.w	r3, r3, #1
 800515a:	6713      	str	r3, [r2, #112]	; 0x70
 800515c:	4b06      	ldr	r3, [pc, #24]	; (8005178 <HAL_RCC_OscConfig+0x4d0>)
 800515e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005160:	4a05      	ldr	r2, [pc, #20]	; (8005178 <HAL_RCC_OscConfig+0x4d0>)
 8005162:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005166:	6713      	str	r3, [r2, #112]	; 0x70
 8005168:	4b03      	ldr	r3, [pc, #12]	; (8005178 <HAL_RCC_OscConfig+0x4d0>)
 800516a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516c:	4a02      	ldr	r2, [pc, #8]	; (8005178 <HAL_RCC_OscConfig+0x4d0>)
 800516e:	f023 0304 	bic.w	r3, r3, #4
 8005172:	6713      	str	r3, [r2, #112]	; 0x70
 8005174:	e044      	b.n	8005200 <HAL_RCC_OscConfig+0x558>
 8005176:	bf00      	nop
 8005178:	58024400 	.word	0x58024400
 800517c:	58024800 	.word	0x58024800
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	2b05      	cmp	r3, #5
 8005186:	d112      	bne.n	80051ae <HAL_RCC_OscConfig+0x506>
 8005188:	4b95      	ldr	r3, [pc, #596]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 800518a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518c:	4a94      	ldr	r2, [pc, #592]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 800518e:	f043 0304 	orr.w	r3, r3, #4
 8005192:	6713      	str	r3, [r2, #112]	; 0x70
 8005194:	4b92      	ldr	r3, [pc, #584]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 8005196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005198:	4a91      	ldr	r2, [pc, #580]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 800519a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800519e:	6713      	str	r3, [r2, #112]	; 0x70
 80051a0:	4b8f      	ldr	r3, [pc, #572]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 80051a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a4:	4a8e      	ldr	r2, [pc, #568]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 80051a6:	f043 0301 	orr.w	r3, r3, #1
 80051aa:	6713      	str	r3, [r2, #112]	; 0x70
 80051ac:	e028      	b.n	8005200 <HAL_RCC_OscConfig+0x558>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	2b85      	cmp	r3, #133	; 0x85
 80051b4:	d112      	bne.n	80051dc <HAL_RCC_OscConfig+0x534>
 80051b6:	4b8a      	ldr	r3, [pc, #552]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 80051b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ba:	4a89      	ldr	r2, [pc, #548]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 80051bc:	f043 0304 	orr.w	r3, r3, #4
 80051c0:	6713      	str	r3, [r2, #112]	; 0x70
 80051c2:	4b87      	ldr	r3, [pc, #540]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 80051c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c6:	4a86      	ldr	r2, [pc, #536]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 80051c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051cc:	6713      	str	r3, [r2, #112]	; 0x70
 80051ce:	4b84      	ldr	r3, [pc, #528]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 80051d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d2:	4a83      	ldr	r2, [pc, #524]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 80051d4:	f043 0301 	orr.w	r3, r3, #1
 80051d8:	6713      	str	r3, [r2, #112]	; 0x70
 80051da:	e011      	b.n	8005200 <HAL_RCC_OscConfig+0x558>
 80051dc:	4b80      	ldr	r3, [pc, #512]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 80051de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e0:	4a7f      	ldr	r2, [pc, #508]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 80051e2:	f023 0301 	bic.w	r3, r3, #1
 80051e6:	6713      	str	r3, [r2, #112]	; 0x70
 80051e8:	4b7d      	ldr	r3, [pc, #500]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 80051ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ec:	4a7c      	ldr	r2, [pc, #496]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 80051ee:	f023 0304 	bic.w	r3, r3, #4
 80051f2:	6713      	str	r3, [r2, #112]	; 0x70
 80051f4:	4b7a      	ldr	r3, [pc, #488]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 80051f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f8:	4a79      	ldr	r2, [pc, #484]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 80051fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d015      	beq.n	8005234 <HAL_RCC_OscConfig+0x58c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005208:	f7fb ff64 	bl	80010d4 <HAL_GetTick>
 800520c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800520e:	e00a      	b.n	8005226 <HAL_RCC_OscConfig+0x57e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005210:	f7fb ff60 	bl	80010d4 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	f241 3288 	movw	r2, #5000	; 0x1388
 800521e:	4293      	cmp	r3, r2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e121      	b.n	800546a <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005226:	4b6e      	ldr	r3, [pc, #440]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 8005228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d0ee      	beq.n	8005210 <HAL_RCC_OscConfig+0x568>
 8005232:	e014      	b.n	800525e <HAL_RCC_OscConfig+0x5b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005234:	f7fb ff4e 	bl	80010d4 <HAL_GetTick>
 8005238:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800523a:	e00a      	b.n	8005252 <HAL_RCC_OscConfig+0x5aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800523c:	f7fb ff4a 	bl	80010d4 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	f241 3288 	movw	r2, #5000	; 0x1388
 800524a:	4293      	cmp	r3, r2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e10b      	b.n	800546a <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005252:	4b63      	ldr	r3, [pc, #396]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 8005254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1ee      	bne.n	800523c <HAL_RCC_OscConfig+0x594>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005262:	2b00      	cmp	r3, #0
 8005264:	f000 8100 	beq.w	8005468 <HAL_RCC_OscConfig+0x7c0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005268:	4b5d      	ldr	r3, [pc, #372]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005270:	2b18      	cmp	r3, #24
 8005272:	f000 80bb 	beq.w	80053ec <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527a:	2b02      	cmp	r3, #2
 800527c:	f040 8095 	bne.w	80053aa <HAL_RCC_OscConfig+0x702>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005280:	4b57      	ldr	r3, [pc, #348]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a56      	ldr	r2, [pc, #344]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 8005286:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800528a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800528c:	f7fb ff22 	bl	80010d4 <HAL_GetTick>
 8005290:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005292:	e008      	b.n	80052a6 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005294:	f7fb ff1e 	bl	80010d4 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d901      	bls.n	80052a6 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e0e1      	b.n	800546a <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052a6:	4b4e      	ldr	r3, [pc, #312]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1f0      	bne.n	8005294 <HAL_RCC_OscConfig+0x5ec>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052b2:	4b4b      	ldr	r3, [pc, #300]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 80052b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052b6:	4b4b      	ldr	r3, [pc, #300]	; (80053e4 <HAL_RCC_OscConfig+0x73c>)
 80052b8:	4013      	ands	r3, r2
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80052c2:	0112      	lsls	r2, r2, #4
 80052c4:	430a      	orrs	r2, r1
 80052c6:	4946      	ldr	r1, [pc, #280]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	628b      	str	r3, [r1, #40]	; 0x28
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d0:	3b01      	subs	r3, #1
 80052d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052da:	3b01      	subs	r3, #1
 80052dc:	025b      	lsls	r3, r3, #9
 80052de:	b29b      	uxth	r3, r3
 80052e0:	431a      	orrs	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e6:	3b01      	subs	r3, #1
 80052e8:	041b      	lsls	r3, r3, #16
 80052ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80052ee:	431a      	orrs	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f4:	3b01      	subs	r3, #1
 80052f6:	061b      	lsls	r3, r3, #24
 80052f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80052fc:	4938      	ldr	r1, [pc, #224]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005302:	4b37      	ldr	r3, [pc, #220]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 8005304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005306:	4a36      	ldr	r2, [pc, #216]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 8005308:	f023 0301 	bic.w	r3, r3, #1
 800530c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800530e:	4b34      	ldr	r3, [pc, #208]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 8005310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005312:	4b35      	ldr	r3, [pc, #212]	; (80053e8 <HAL_RCC_OscConfig+0x740>)
 8005314:	4013      	ands	r3, r2
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800531a:	00d2      	lsls	r2, r2, #3
 800531c:	4930      	ldr	r1, [pc, #192]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 800531e:	4313      	orrs	r3, r2
 8005320:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005322:	4b2f      	ldr	r3, [pc, #188]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 8005324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005326:	f023 020c 	bic.w	r2, r3, #12
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532e:	492c      	ldr	r1, [pc, #176]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 8005330:	4313      	orrs	r3, r2
 8005332:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005334:	4b2a      	ldr	r3, [pc, #168]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 8005336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005338:	f023 0202 	bic.w	r2, r3, #2
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005340:	4927      	ldr	r1, [pc, #156]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 8005342:	4313      	orrs	r3, r2
 8005344:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005346:	4b26      	ldr	r3, [pc, #152]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 8005348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534a:	4a25      	ldr	r2, [pc, #148]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 800534c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005350:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005352:	4b23      	ldr	r3, [pc, #140]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 8005354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005356:	4a22      	ldr	r2, [pc, #136]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 8005358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800535c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800535e:	4b20      	ldr	r3, [pc, #128]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 8005360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005362:	4a1f      	ldr	r2, [pc, #124]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 8005364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005368:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800536a:	4b1d      	ldr	r3, [pc, #116]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 800536c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536e:	4a1c      	ldr	r2, [pc, #112]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 8005370:	f043 0301 	orr.w	r3, r3, #1
 8005374:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005376:	4b1a      	ldr	r3, [pc, #104]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a19      	ldr	r2, [pc, #100]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 800537c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005380:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005382:	f7fb fea7 	bl	80010d4 <HAL_GetTick>
 8005386:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005388:	e008      	b.n	800539c <HAL_RCC_OscConfig+0x6f4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800538a:	f7fb fea3 	bl	80010d4 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	2b02      	cmp	r3, #2
 8005396:	d901      	bls.n	800539c <HAL_RCC_OscConfig+0x6f4>
          {
            return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e066      	b.n	800546a <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800539c:	4b10      	ldr	r3, [pc, #64]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d0f0      	beq.n	800538a <HAL_RCC_OscConfig+0x6e2>
 80053a8:	e05e      	b.n	8005468 <HAL_RCC_OscConfig+0x7c0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053aa:	4b0d      	ldr	r3, [pc, #52]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a0c      	ldr	r2, [pc, #48]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 80053b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b6:	f7fb fe8d 	bl	80010d4 <HAL_GetTick>
 80053ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053bc:	e008      	b.n	80053d0 <HAL_RCC_OscConfig+0x728>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053be:	f7fb fe89 	bl	80010d4 <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d901      	bls.n	80053d0 <HAL_RCC_OscConfig+0x728>
          {
            return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e04c      	b.n	800546a <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053d0:	4b03      	ldr	r3, [pc, #12]	; (80053e0 <HAL_RCC_OscConfig+0x738>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1f0      	bne.n	80053be <HAL_RCC_OscConfig+0x716>
 80053dc:	e044      	b.n	8005468 <HAL_RCC_OscConfig+0x7c0>
 80053de:	bf00      	nop
 80053e0:	58024400 	.word	0x58024400
 80053e4:	fffffc0c 	.word	0xfffffc0c
 80053e8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80053ec:	4b21      	ldr	r3, [pc, #132]	; (8005474 <HAL_RCC_OscConfig+0x7cc>)
 80053ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80053f2:	4b20      	ldr	r3, [pc, #128]	; (8005474 <HAL_RCC_OscConfig+0x7cc>)
 80053f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d031      	beq.n	8005464 <HAL_RCC_OscConfig+0x7bc>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	f003 0203 	and.w	r2, r3, #3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800540a:	429a      	cmp	r2, r3
 800540c:	d12a      	bne.n	8005464 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	091b      	lsrs	r3, r3, #4
 8005412:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800541a:	429a      	cmp	r2, r3
 800541c:	d122      	bne.n	8005464 <HAL_RCC_OscConfig+0x7bc>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005428:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800542a:	429a      	cmp	r2, r3
 800542c:	d11a      	bne.n	8005464 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	0a5b      	lsrs	r3, r3, #9
 8005432:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800543a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800543c:	429a      	cmp	r2, r3
 800543e:	d111      	bne.n	8005464 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	0c1b      	lsrs	r3, r3, #16
 8005444:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800544e:	429a      	cmp	r2, r3
 8005450:	d108      	bne.n	8005464 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	0e1b      	lsrs	r3, r3, #24
 8005456:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800545e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005460:	429a      	cmp	r2, r3
 8005462:	d001      	beq.n	8005468 <HAL_RCC_OscConfig+0x7c0>
      {
        return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e000      	b.n	800546a <HAL_RCC_OscConfig+0x7c2>
      }
    }
  }
  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3730      	adds	r7, #48	; 0x30
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	58024400 	.word	0x58024400

08005478 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d101      	bne.n	800548c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e19c      	b.n	80057c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800548c:	4b8a      	ldr	r3, [pc, #552]	; (80056b8 <HAL_RCC_ClockConfig+0x240>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 030f 	and.w	r3, r3, #15
 8005494:	683a      	ldr	r2, [r7, #0]
 8005496:	429a      	cmp	r2, r3
 8005498:	d910      	bls.n	80054bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800549a:	4b87      	ldr	r3, [pc, #540]	; (80056b8 <HAL_RCC_ClockConfig+0x240>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f023 020f 	bic.w	r2, r3, #15
 80054a2:	4985      	ldr	r1, [pc, #532]	; (80056b8 <HAL_RCC_ClockConfig+0x240>)
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054aa:	4b83      	ldr	r3, [pc, #524]	; (80056b8 <HAL_RCC_ClockConfig+0x240>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 030f 	and.w	r3, r3, #15
 80054b2:	683a      	ldr	r2, [r7, #0]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d001      	beq.n	80054bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e184      	b.n	80057c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d010      	beq.n	80054ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	691a      	ldr	r2, [r3, #16]
 80054cc:	4b7b      	ldr	r3, [pc, #492]	; (80056bc <HAL_RCC_ClockConfig+0x244>)
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d908      	bls.n	80054ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80054d8:	4b78      	ldr	r3, [pc, #480]	; (80056bc <HAL_RCC_ClockConfig+0x244>)
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	4975      	ldr	r1, [pc, #468]	; (80056bc <HAL_RCC_ClockConfig+0x244>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0308 	and.w	r3, r3, #8
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d010      	beq.n	8005518 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	695a      	ldr	r2, [r3, #20]
 80054fa:	4b70      	ldr	r3, [pc, #448]	; (80056bc <HAL_RCC_ClockConfig+0x244>)
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005502:	429a      	cmp	r2, r3
 8005504:	d908      	bls.n	8005518 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005506:	4b6d      	ldr	r3, [pc, #436]	; (80056bc <HAL_RCC_ClockConfig+0x244>)
 8005508:	69db      	ldr	r3, [r3, #28]
 800550a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	496a      	ldr	r1, [pc, #424]	; (80056bc <HAL_RCC_ClockConfig+0x244>)
 8005514:	4313      	orrs	r3, r2
 8005516:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0310 	and.w	r3, r3, #16
 8005520:	2b00      	cmp	r3, #0
 8005522:	d010      	beq.n	8005546 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	699a      	ldr	r2, [r3, #24]
 8005528:	4b64      	ldr	r3, [pc, #400]	; (80056bc <HAL_RCC_ClockConfig+0x244>)
 800552a:	69db      	ldr	r3, [r3, #28]
 800552c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005530:	429a      	cmp	r2, r3
 8005532:	d908      	bls.n	8005546 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005534:	4b61      	ldr	r3, [pc, #388]	; (80056bc <HAL_RCC_ClockConfig+0x244>)
 8005536:	69db      	ldr	r3, [r3, #28]
 8005538:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	495e      	ldr	r1, [pc, #376]	; (80056bc <HAL_RCC_ClockConfig+0x244>)
 8005542:	4313      	orrs	r3, r2
 8005544:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0320 	and.w	r3, r3, #32
 800554e:	2b00      	cmp	r3, #0
 8005550:	d010      	beq.n	8005574 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	69da      	ldr	r2, [r3, #28]
 8005556:	4b59      	ldr	r3, [pc, #356]	; (80056bc <HAL_RCC_ClockConfig+0x244>)
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800555e:	429a      	cmp	r2, r3
 8005560:	d908      	bls.n	8005574 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005562:	4b56      	ldr	r3, [pc, #344]	; (80056bc <HAL_RCC_ClockConfig+0x244>)
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	4953      	ldr	r1, [pc, #332]	; (80056bc <HAL_RCC_ClockConfig+0x244>)
 8005570:	4313      	orrs	r3, r2
 8005572:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b00      	cmp	r3, #0
 800557e:	d010      	beq.n	80055a2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	68da      	ldr	r2, [r3, #12]
 8005584:	4b4d      	ldr	r3, [pc, #308]	; (80056bc <HAL_RCC_ClockConfig+0x244>)
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	f003 030f 	and.w	r3, r3, #15
 800558c:	429a      	cmp	r2, r3
 800558e:	d908      	bls.n	80055a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005590:	4b4a      	ldr	r3, [pc, #296]	; (80056bc <HAL_RCC_ClockConfig+0x244>)
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	f023 020f 	bic.w	r2, r3, #15
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	4947      	ldr	r1, [pc, #284]	; (80056bc <HAL_RCC_ClockConfig+0x244>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d055      	beq.n	800565a <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80055ae:	4b43      	ldr	r3, [pc, #268]	; (80056bc <HAL_RCC_ClockConfig+0x244>)
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	4940      	ldr	r1, [pc, #256]	; (80056bc <HAL_RCC_ClockConfig+0x244>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d107      	bne.n	80055d8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80055c8:	4b3c      	ldr	r3, [pc, #240]	; (80056bc <HAL_RCC_ClockConfig+0x244>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d121      	bne.n	8005618 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e0f6      	b.n	80057c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	2b03      	cmp	r3, #3
 80055de:	d107      	bne.n	80055f0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80055e0:	4b36      	ldr	r3, [pc, #216]	; (80056bc <HAL_RCC_ClockConfig+0x244>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d115      	bne.n	8005618 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e0ea      	b.n	80057c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d107      	bne.n	8005608 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055f8:	4b30      	ldr	r3, [pc, #192]	; (80056bc <HAL_RCC_ClockConfig+0x244>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005600:	2b00      	cmp	r3, #0
 8005602:	d109      	bne.n	8005618 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e0de      	b.n	80057c6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005608:	4b2c      	ldr	r3, [pc, #176]	; (80056bc <HAL_RCC_ClockConfig+0x244>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0304 	and.w	r3, r3, #4
 8005610:	2b00      	cmp	r3, #0
 8005612:	d101      	bne.n	8005618 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e0d6      	b.n	80057c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005618:	4b28      	ldr	r3, [pc, #160]	; (80056bc <HAL_RCC_ClockConfig+0x244>)
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	f023 0207 	bic.w	r2, r3, #7
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	4925      	ldr	r1, [pc, #148]	; (80056bc <HAL_RCC_ClockConfig+0x244>)
 8005626:	4313      	orrs	r3, r2
 8005628:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800562a:	f7fb fd53 	bl	80010d4 <HAL_GetTick>
 800562e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005630:	e00a      	b.n	8005648 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005632:	f7fb fd4f 	bl	80010d4 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005640:	4293      	cmp	r3, r2
 8005642:	d901      	bls.n	8005648 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e0be      	b.n	80057c6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005648:	4b1c      	ldr	r3, [pc, #112]	; (80056bc <HAL_RCC_ClockConfig+0x244>)
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	00db      	lsls	r3, r3, #3
 8005656:	429a      	cmp	r2, r3
 8005658:	d1eb      	bne.n	8005632 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0302 	and.w	r3, r3, #2
 8005662:	2b00      	cmp	r3, #0
 8005664:	d010      	beq.n	8005688 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68da      	ldr	r2, [r3, #12]
 800566a:	4b14      	ldr	r3, [pc, #80]	; (80056bc <HAL_RCC_ClockConfig+0x244>)
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	f003 030f 	and.w	r3, r3, #15
 8005672:	429a      	cmp	r2, r3
 8005674:	d208      	bcs.n	8005688 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005676:	4b11      	ldr	r3, [pc, #68]	; (80056bc <HAL_RCC_ClockConfig+0x244>)
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	f023 020f 	bic.w	r2, r3, #15
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	490e      	ldr	r1, [pc, #56]	; (80056bc <HAL_RCC_ClockConfig+0x244>)
 8005684:	4313      	orrs	r3, r2
 8005686:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005688:	4b0b      	ldr	r3, [pc, #44]	; (80056b8 <HAL_RCC_ClockConfig+0x240>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 030f 	and.w	r3, r3, #15
 8005690:	683a      	ldr	r2, [r7, #0]
 8005692:	429a      	cmp	r2, r3
 8005694:	d214      	bcs.n	80056c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005696:	4b08      	ldr	r3, [pc, #32]	; (80056b8 <HAL_RCC_ClockConfig+0x240>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f023 020f 	bic.w	r2, r3, #15
 800569e:	4906      	ldr	r1, [pc, #24]	; (80056b8 <HAL_RCC_ClockConfig+0x240>)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056a6:	4b04      	ldr	r3, [pc, #16]	; (80056b8 <HAL_RCC_ClockConfig+0x240>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 030f 	and.w	r3, r3, #15
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d005      	beq.n	80056c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e086      	b.n	80057c6 <HAL_RCC_ClockConfig+0x34e>
 80056b8:	52002000 	.word	0x52002000
 80056bc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0304 	and.w	r3, r3, #4
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d010      	beq.n	80056ee <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	691a      	ldr	r2, [r3, #16]
 80056d0:	4b3f      	ldr	r3, [pc, #252]	; (80057d0 <HAL_RCC_ClockConfig+0x358>)
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056d8:	429a      	cmp	r2, r3
 80056da:	d208      	bcs.n	80056ee <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80056dc:	4b3c      	ldr	r3, [pc, #240]	; (80057d0 <HAL_RCC_ClockConfig+0x358>)
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	4939      	ldr	r1, [pc, #228]	; (80057d0 <HAL_RCC_ClockConfig+0x358>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0308 	and.w	r3, r3, #8
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d010      	beq.n	800571c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	695a      	ldr	r2, [r3, #20]
 80056fe:	4b34      	ldr	r3, [pc, #208]	; (80057d0 <HAL_RCC_ClockConfig+0x358>)
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005706:	429a      	cmp	r2, r3
 8005708:	d208      	bcs.n	800571c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800570a:	4b31      	ldr	r3, [pc, #196]	; (80057d0 <HAL_RCC_ClockConfig+0x358>)
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	492e      	ldr	r1, [pc, #184]	; (80057d0 <HAL_RCC_ClockConfig+0x358>)
 8005718:	4313      	orrs	r3, r2
 800571a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0310 	and.w	r3, r3, #16
 8005724:	2b00      	cmp	r3, #0
 8005726:	d010      	beq.n	800574a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	699a      	ldr	r2, [r3, #24]
 800572c:	4b28      	ldr	r3, [pc, #160]	; (80057d0 <HAL_RCC_ClockConfig+0x358>)
 800572e:	69db      	ldr	r3, [r3, #28]
 8005730:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005734:	429a      	cmp	r2, r3
 8005736:	d208      	bcs.n	800574a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005738:	4b25      	ldr	r3, [pc, #148]	; (80057d0 <HAL_RCC_ClockConfig+0x358>)
 800573a:	69db      	ldr	r3, [r3, #28]
 800573c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	4922      	ldr	r1, [pc, #136]	; (80057d0 <HAL_RCC_ClockConfig+0x358>)
 8005746:	4313      	orrs	r3, r2
 8005748:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0320 	and.w	r3, r3, #32
 8005752:	2b00      	cmp	r3, #0
 8005754:	d010      	beq.n	8005778 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	69da      	ldr	r2, [r3, #28]
 800575a:	4b1d      	ldr	r3, [pc, #116]	; (80057d0 <HAL_RCC_ClockConfig+0x358>)
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005762:	429a      	cmp	r2, r3
 8005764:	d208      	bcs.n	8005778 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005766:	4b1a      	ldr	r3, [pc, #104]	; (80057d0 <HAL_RCC_ClockConfig+0x358>)
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	4917      	ldr	r1, [pc, #92]	; (80057d0 <HAL_RCC_ClockConfig+0x358>)
 8005774:	4313      	orrs	r3, r2
 8005776:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005778:	f000 f834 	bl	80057e4 <HAL_RCC_GetSysClockFreq>
 800577c:	4601      	mov	r1, r0
 800577e:	4b14      	ldr	r3, [pc, #80]	; (80057d0 <HAL_RCC_ClockConfig+0x358>)
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	0a1b      	lsrs	r3, r3, #8
 8005784:	f003 030f 	and.w	r3, r3, #15
 8005788:	4a12      	ldr	r2, [pc, #72]	; (80057d4 <HAL_RCC_ClockConfig+0x35c>)
 800578a:	5cd3      	ldrb	r3, [r2, r3]
 800578c:	f003 031f 	and.w	r3, r3, #31
 8005790:	fa21 f303 	lsr.w	r3, r1, r3
 8005794:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005796:	4b0e      	ldr	r3, [pc, #56]	; (80057d0 <HAL_RCC_ClockConfig+0x358>)
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	f003 030f 	and.w	r3, r3, #15
 800579e:	4a0d      	ldr	r2, [pc, #52]	; (80057d4 <HAL_RCC_ClockConfig+0x35c>)
 80057a0:	5cd3      	ldrb	r3, [r2, r3]
 80057a2:	f003 031f 	and.w	r3, r3, #31
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	fa22 f303 	lsr.w	r3, r2, r3
 80057ac:	4a0a      	ldr	r2, [pc, #40]	; (80057d8 <HAL_RCC_ClockConfig+0x360>)
 80057ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80057b0:	4a0a      	ldr	r2, [pc, #40]	; (80057dc <HAL_RCC_ClockConfig+0x364>)
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80057b6:	4b0a      	ldr	r3, [pc, #40]	; (80057e0 <HAL_RCC_ClockConfig+0x368>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7fb fc40 	bl	8001040 <HAL_InitTick>
 80057c0:	4603      	mov	r3, r0
 80057c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3718      	adds	r7, #24
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	58024400 	.word	0x58024400
 80057d4:	08008b78 	.word	0x08008b78
 80057d8:	24000004 	.word	0x24000004
 80057dc:	24000000 	.word	0x24000000
 80057e0:	24000008 	.word	0x24000008

080057e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b089      	sub	sp, #36	; 0x24
 80057e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057ea:	4baf      	ldr	r3, [pc, #700]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057f2:	2b18      	cmp	r3, #24
 80057f4:	f200 814e 	bhi.w	8005a94 <HAL_RCC_GetSysClockFreq+0x2b0>
 80057f8:	a201      	add	r2, pc, #4	; (adr r2, 8005800 <HAL_RCC_GetSysClockFreq+0x1c>)
 80057fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057fe:	bf00      	nop
 8005800:	08005865 	.word	0x08005865
 8005804:	08005a95 	.word	0x08005a95
 8005808:	08005a95 	.word	0x08005a95
 800580c:	08005a95 	.word	0x08005a95
 8005810:	08005a95 	.word	0x08005a95
 8005814:	08005a95 	.word	0x08005a95
 8005818:	08005a95 	.word	0x08005a95
 800581c:	08005a95 	.word	0x08005a95
 8005820:	0800588b 	.word	0x0800588b
 8005824:	08005a95 	.word	0x08005a95
 8005828:	08005a95 	.word	0x08005a95
 800582c:	08005a95 	.word	0x08005a95
 8005830:	08005a95 	.word	0x08005a95
 8005834:	08005a95 	.word	0x08005a95
 8005838:	08005a95 	.word	0x08005a95
 800583c:	08005a95 	.word	0x08005a95
 8005840:	08005891 	.word	0x08005891
 8005844:	08005a95 	.word	0x08005a95
 8005848:	08005a95 	.word	0x08005a95
 800584c:	08005a95 	.word	0x08005a95
 8005850:	08005a95 	.word	0x08005a95
 8005854:	08005a95 	.word	0x08005a95
 8005858:	08005a95 	.word	0x08005a95
 800585c:	08005a95 	.word	0x08005a95
 8005860:	08005897 	.word	0x08005897
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005864:	4b90      	ldr	r3, [pc, #576]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0320 	and.w	r3, r3, #32
 800586c:	2b00      	cmp	r3, #0
 800586e:	d009      	beq.n	8005884 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005870:	4b8d      	ldr	r3, [pc, #564]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	08db      	lsrs	r3, r3, #3
 8005876:	f003 0303 	and.w	r3, r3, #3
 800587a:	4a8c      	ldr	r2, [pc, #560]	; (8005aac <HAL_RCC_GetSysClockFreq+0x2c8>)
 800587c:	fa22 f303 	lsr.w	r3, r2, r3
 8005880:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005882:	e10a      	b.n	8005a9a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005884:	4b89      	ldr	r3, [pc, #548]	; (8005aac <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005886:	61bb      	str	r3, [r7, #24]
    break;
 8005888:	e107      	b.n	8005a9a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800588a:	4b89      	ldr	r3, [pc, #548]	; (8005ab0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800588c:	61bb      	str	r3, [r7, #24]
    break;
 800588e:	e104      	b.n	8005a9a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005890:	4b88      	ldr	r3, [pc, #544]	; (8005ab4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8005892:	61bb      	str	r3, [r7, #24]
    break;
 8005894:	e101      	b.n	8005a9a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005896:	4b84      	ldr	r3, [pc, #528]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589a:	f003 0303 	and.w	r3, r3, #3
 800589e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80058a0:	4b81      	ldr	r3, [pc, #516]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80058a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a4:	091b      	lsrs	r3, r3, #4
 80058a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058aa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80058ac:	4b7e      	ldr	r3, [pc, #504]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80058ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80058b6:	4b7c      	ldr	r3, [pc, #496]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80058b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ba:	08db      	lsrs	r3, r3, #3
 80058bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	fb02 f303 	mul.w	r3, r2, r3
 80058c6:	ee07 3a90 	vmov	s15, r3
 80058ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ce:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f000 80da 	beq.w	8005a8e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d05a      	beq.n	8005996 <HAL_RCC_GetSysClockFreq+0x1b2>
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d302      	bcc.n	80058ea <HAL_RCC_GetSysClockFreq+0x106>
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d078      	beq.n	80059da <HAL_RCC_GetSysClockFreq+0x1f6>
 80058e8:	e099      	b.n	8005a1e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058ea:	4b6f      	ldr	r3, [pc, #444]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0320 	and.w	r3, r3, #32
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d02d      	beq.n	8005952 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80058f6:	4b6c      	ldr	r3, [pc, #432]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	08db      	lsrs	r3, r3, #3
 80058fc:	f003 0303 	and.w	r3, r3, #3
 8005900:	4a6a      	ldr	r2, [pc, #424]	; (8005aac <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005902:	fa22 f303 	lsr.w	r3, r2, r3
 8005906:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	ee07 3a90 	vmov	s15, r3
 800590e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	ee07 3a90 	vmov	s15, r3
 8005918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800591c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005920:	4b61      	ldr	r3, [pc, #388]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005928:	ee07 3a90 	vmov	s15, r3
 800592c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005930:	ed97 6a02 	vldr	s12, [r7, #8]
 8005934:	eddf 5a60 	vldr	s11, [pc, #384]	; 8005ab8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005938:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800593c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005940:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005944:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005948:	ee67 7a27 	vmul.f32	s15, s14, s15
 800594c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005950:	e087      	b.n	8005a62 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	ee07 3a90 	vmov	s15, r3
 8005958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800595c:	eddf 6a57 	vldr	s13, [pc, #348]	; 8005abc <HAL_RCC_GetSysClockFreq+0x2d8>
 8005960:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005964:	4b50      	ldr	r3, [pc, #320]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800596c:	ee07 3a90 	vmov	s15, r3
 8005970:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005974:	ed97 6a02 	vldr	s12, [r7, #8]
 8005978:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8005ab8 <HAL_RCC_GetSysClockFreq+0x2d4>
 800597c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005980:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005984:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005988:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800598c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005990:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005994:	e065      	b.n	8005a62 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	ee07 3a90 	vmov	s15, r3
 800599c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a0:	eddf 6a47 	vldr	s13, [pc, #284]	; 8005ac0 <HAL_RCC_GetSysClockFreq+0x2dc>
 80059a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059a8:	4b3f      	ldr	r3, [pc, #252]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80059aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059b0:	ee07 3a90 	vmov	s15, r3
 80059b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80059bc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005ab8 <HAL_RCC_GetSysClockFreq+0x2d4>
 80059c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059d8:	e043      	b.n	8005a62 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	ee07 3a90 	vmov	s15, r3
 80059e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059e4:	eddf 6a37 	vldr	s13, [pc, #220]	; 8005ac4 <HAL_RCC_GetSysClockFreq+0x2e0>
 80059e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ec:	4b2e      	ldr	r3, [pc, #184]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80059ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059f4:	ee07 3a90 	vmov	s15, r3
 80059f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a00:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005ab8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005a04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a18:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a1c:	e021      	b.n	8005a62 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	ee07 3a90 	vmov	s15, r3
 8005a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a28:	eddf 6a25 	vldr	s13, [pc, #148]	; 8005ac0 <HAL_RCC_GetSysClockFreq+0x2dc>
 8005a2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a30:	4b1d      	ldr	r3, [pc, #116]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a38:	ee07 3a90 	vmov	s15, r3
 8005a3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a40:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a44:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8005ab8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005a48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a5c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a60:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005a62:	4b11      	ldr	r3, [pc, #68]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a66:	0a5b      	lsrs	r3, r3, #9
 8005a68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	ee07 3a90 	vmov	s15, r3
 8005a76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a86:	ee17 3a90 	vmov	r3, s15
 8005a8a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005a8c:	e005      	b.n	8005a9a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	61bb      	str	r3, [r7, #24]
    break;
 8005a92:	e002      	b.n	8005a9a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8005a94:	4b06      	ldr	r3, [pc, #24]	; (8005ab0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005a96:	61bb      	str	r3, [r7, #24]
    break;
 8005a98:	bf00      	nop
  }

  return sysclockfreq;
 8005a9a:	69bb      	ldr	r3, [r7, #24]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3724      	adds	r7, #36	; 0x24
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr
 8005aa8:	58024400 	.word	0x58024400
 8005aac:	03d09000 	.word	0x03d09000
 8005ab0:	003d0900 	.word	0x003d0900
 8005ab4:	007a1200 	.word	0x007a1200
 8005ab8:	46000000 	.word	0x46000000
 8005abc:	4c742400 	.word	0x4c742400
 8005ac0:	4a742400 	.word	0x4a742400
 8005ac4:	4af42400 	.word	0x4af42400

08005ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8005ace:	f7ff fe89 	bl	80057e4 <HAL_RCC_GetSysClockFreq>
 8005ad2:	4601      	mov	r1, r0
 8005ad4:	4b10      	ldr	r3, [pc, #64]	; (8005b18 <HAL_RCC_GetHCLKFreq+0x50>)
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	0a1b      	lsrs	r3, r3, #8
 8005ada:	f003 030f 	and.w	r3, r3, #15
 8005ade:	4a0f      	ldr	r2, [pc, #60]	; (8005b1c <HAL_RCC_GetHCLKFreq+0x54>)
 8005ae0:	5cd3      	ldrb	r3, [r2, r3]
 8005ae2:	f003 031f 	and.w	r3, r3, #31
 8005ae6:	fa21 f303 	lsr.w	r3, r1, r3
 8005aea:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005aec:	4b0a      	ldr	r3, [pc, #40]	; (8005b18 <HAL_RCC_GetHCLKFreq+0x50>)
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	f003 030f 	and.w	r3, r3, #15
 8005af4:	4a09      	ldr	r2, [pc, #36]	; (8005b1c <HAL_RCC_GetHCLKFreq+0x54>)
 8005af6:	5cd3      	ldrb	r3, [r2, r3]
 8005af8:	f003 031f 	and.w	r3, r3, #31
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	fa22 f303 	lsr.w	r3, r2, r3
 8005b02:	4a07      	ldr	r2, [pc, #28]	; (8005b20 <HAL_RCC_GetHCLKFreq+0x58>)
 8005b04:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005b06:	4a07      	ldr	r2, [pc, #28]	; (8005b24 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005b0c:	4b04      	ldr	r3, [pc, #16]	; (8005b20 <HAL_RCC_GetHCLKFreq+0x58>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3708      	adds	r7, #8
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	58024400 	.word	0x58024400
 8005b1c:	08008b78 	.word	0x08008b78
 8005b20:	24000004 	.word	0x24000004
 8005b24:	24000000 	.word	0x24000000

08005b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8005b2c:	f7ff ffcc 	bl	8005ac8 <HAL_RCC_GetHCLKFreq>
 8005b30:	4601      	mov	r1, r0
 8005b32:	4b06      	ldr	r3, [pc, #24]	; (8005b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	091b      	lsrs	r3, r3, #4
 8005b38:	f003 0307 	and.w	r3, r3, #7
 8005b3c:	4a04      	ldr	r2, [pc, #16]	; (8005b50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b3e:	5cd3      	ldrb	r3, [r2, r3]
 8005b40:	f003 031f 	and.w	r3, r3, #31
 8005b44:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	58024400 	.word	0x58024400
 8005b50:	08008b78 	.word	0x08008b78

08005b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8005b58:	f7ff ffb6 	bl	8005ac8 <HAL_RCC_GetHCLKFreq>
 8005b5c:	4601      	mov	r1, r0
 8005b5e:	4b06      	ldr	r3, [pc, #24]	; (8005b78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	0a1b      	lsrs	r3, r3, #8
 8005b64:	f003 0307 	and.w	r3, r3, #7
 8005b68:	4a04      	ldr	r2, [pc, #16]	; (8005b7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b6a:	5cd3      	ldrb	r3, [r2, r3]
 8005b6c:	f003 031f 	and.w	r3, r3, #31
 8005b70:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	58024400 	.word	0x58024400
 8005b7c:	08008b78 	.word	0x08008b78

08005b80 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b88:	2300      	movs	r3, #0
 8005b8a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d03d      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ba0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ba4:	d013      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005ba6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005baa:	d802      	bhi.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d007      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005bb0:	e01f      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8005bb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bb6:	d013      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8005bb8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005bbc:	d01c      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005bbe:	e018      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bc0:	4bad      	ldr	r3, [pc, #692]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc4:	4aac      	ldr	r2, [pc, #688]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005bcc:	e015      	b.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	3304      	adds	r3, #4
 8005bd2:	2102      	movs	r1, #2
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f001 fca7 	bl	8007528 <RCCEx_PLL2_Config>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005bde:	e00c      	b.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	3324      	adds	r3, #36	; 0x24
 8005be4:	2102      	movs	r1, #2
 8005be6:	4618      	mov	r0, r3
 8005be8:	f001 fd50 	bl	800768c <RCCEx_PLL3_Config>
 8005bec:	4603      	mov	r3, r0
 8005bee:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005bf0:	e003      	b.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	75fb      	strb	r3, [r7, #23]
      break;
 8005bf6:	e000      	b.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8005bf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bfa:	7dfb      	ldrb	r3, [r7, #23]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d109      	bne.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005c00:	4b9d      	ldr	r3, [pc, #628]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c0c:	499a      	ldr	r1, [pc, #616]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	650b      	str	r3, [r1, #80]	; 0x50
 8005c12:	e001      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c14:	7dfb      	ldrb	r3, [r7, #23]
 8005c16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d03d      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c28:	2b04      	cmp	r3, #4
 8005c2a:	d826      	bhi.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8005c2c:	a201      	add	r2, pc, #4	; (adr r2, 8005c34 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8005c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c32:	bf00      	nop
 8005c34:	08005c49 	.word	0x08005c49
 8005c38:	08005c57 	.word	0x08005c57
 8005c3c:	08005c69 	.word	0x08005c69
 8005c40:	08005c81 	.word	0x08005c81
 8005c44:	08005c81 	.word	0x08005c81
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c48:	4b8b      	ldr	r3, [pc, #556]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4c:	4a8a      	ldr	r2, [pc, #552]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005c4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c54:	e015      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	3304      	adds	r3, #4
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f001 fc63 	bl	8007528 <RCCEx_PLL2_Config>
 8005c62:	4603      	mov	r3, r0
 8005c64:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c66:	e00c      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	3324      	adds	r3, #36	; 0x24
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f001 fd0c 	bl	800768c <RCCEx_PLL3_Config>
 8005c74:	4603      	mov	r3, r0
 8005c76:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c78:	e003      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	75fb      	strb	r3, [r7, #23]
      break;
 8005c7e:	e000      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8005c80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c82:	7dfb      	ldrb	r3, [r7, #23]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d109      	bne.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c88:	4b7b      	ldr	r3, [pc, #492]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c8c:	f023 0207 	bic.w	r2, r3, #7
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c94:	4978      	ldr	r1, [pc, #480]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	650b      	str	r3, [r1, #80]	; 0x50
 8005c9a:	e001      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c9c:	7dfb      	ldrb	r3, [r7, #23]
 8005c9e:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d043      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cb0:	2b80      	cmp	r3, #128	; 0x80
 8005cb2:	d01f      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8005cb4:	2b80      	cmp	r3, #128	; 0x80
 8005cb6:	d804      	bhi.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00b      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005cbc:	2b40      	cmp	r3, #64	; 0x40
 8005cbe:	d010      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8005cc0:	e021      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cc6:	d021      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005cc8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005ccc:	d020      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005cce:	2bc0      	cmp	r3, #192	; 0xc0
 8005cd0:	d020      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8005cd2:	e018      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cd4:	4b68      	ldr	r3, [pc, #416]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd8:	4a67      	ldr	r2, [pc, #412]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cde:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8005ce0:	e019      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x196>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	3304      	adds	r3, #4
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f001 fc1d 	bl	8007528 <RCCEx_PLL2_Config>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8005cf2:	e010      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x196>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	3324      	adds	r3, #36	; 0x24
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f001 fcc6 	bl	800768c <RCCEx_PLL3_Config>
 8005d00:	4603      	mov	r3, r0
 8005d02:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8005d04:	e007      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x196>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	75fb      	strb	r3, [r7, #23]
      break;
 8005d0a:	e004      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 8005d0c:	bf00      	nop
 8005d0e:	e002      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 8005d10:	bf00      	nop
 8005d12:	e000      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 8005d14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d16:	7dfb      	ldrb	r3, [r7, #23]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d109      	bne.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8005d1c:	4b56      	ldr	r3, [pc, #344]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d20:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d28:	4953      	ldr	r1, [pc, #332]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	650b      	str	r3, [r1, #80]	; 0x50
 8005d2e:	e001      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d30:	7dfb      	ldrb	r3, [r7, #23]
 8005d32:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d047      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d48:	d022      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d4e:	d805      	bhi.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00d      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8005d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d58:	d011      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8005d5a:	e022      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8005d5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d60:	d022      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8005d62:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005d66:	d021      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8005d68:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005d6c:	d020      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005d6e:	e018      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x222>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d70:	4b41      	ldr	r3, [pc, #260]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d74:	4a40      	ldr	r2, [pc, #256]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8005d7c:	e019      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x232>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	3304      	adds	r3, #4
 8005d82:	2100      	movs	r1, #0
 8005d84:	4618      	mov	r0, r3
 8005d86:	f001 fbcf 	bl	8007528 <RCCEx_PLL2_Config>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8005d8e:	e010      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x232>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	3324      	adds	r3, #36	; 0x24
 8005d94:	2100      	movs	r1, #0
 8005d96:	4618      	mov	r0, r3
 8005d98:	f001 fc78 	bl	800768c <RCCEx_PLL3_Config>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8005da0:	e007      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x232>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	75fb      	strb	r3, [r7, #23]
      break;
 8005da6:	e004      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 8005da8:	bf00      	nop
 8005daa:	e002      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 8005dac:	bf00      	nop
 8005dae:	e000      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 8005db0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005db2:	7dfb      	ldrb	r3, [r7, #23]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d109      	bne.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x24c>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8005db8:	4b2f      	ldr	r3, [pc, #188]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dbc:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dc4:	492c      	ldr	r1, [pc, #176]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	650b      	str	r3, [r1, #80]	; 0x50
 8005dca:	e001      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x250>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dcc:	7dfb      	ldrb	r3, [r7, #23]
 8005dce:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d032      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005de0:	2b10      	cmp	r3, #16
 8005de2:	d009      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8005de4:	2b10      	cmp	r3, #16
 8005de6:	d802      	bhi.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d018      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x29e>
 8005dec:	e014      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005dee:	2b20      	cmp	r3, #32
 8005df0:	d009      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005df2:	2b30      	cmp	r3, #48	; 0x30
 8005df4:	d015      	beq.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 8005df6:	e00f      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x298>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005df8:	4b1f      	ldr	r3, [pc, #124]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfc:	4a1e      	ldr	r2, [pc, #120]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005dfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005e04:	e00e      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x2a4>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	3304      	adds	r3, #4
 8005e0a:	2102      	movs	r1, #2
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f001 fb8b 	bl	8007528 <RCCEx_PLL2_Config>
 8005e12:	4603      	mov	r3, r0
 8005e14:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005e16:	e005      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	75fb      	strb	r3, [r7, #23]
      break;
 8005e1c:	e002      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      break;
 8005e1e:	bf00      	nop
 8005e20:	e000      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      break;
 8005e22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e24:	7dfb      	ldrb	r3, [r7, #23]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d109      	bne.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005e2a:	4b13      	ldr	r3, [pc, #76]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e2e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e36:	4910      	ldr	r1, [pc, #64]	; (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005e3c:	e001      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e3e:	7dfb      	ldrb	r3, [r7, #23]
 8005e40:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d044      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e56:	d021      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8005e58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e5c:	d805      	bhi.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x2ea>
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00c      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e66:	d010      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8005e68:	e021      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8005e6a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e6e:	d021      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x334>
 8005e70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e74:	d020      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8005e76:	e01a      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8005e78:	58024400 	.word	0x58024400
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e7c:	4ba6      	ldr	r3, [pc, #664]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8005e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e80:	4aa5      	ldr	r2, [pc, #660]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8005e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005e88:	e017      	b.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x33a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	2100      	movs	r1, #0
 8005e90:	4618      	mov	r0, r3
 8005e92:	f001 fb49 	bl	8007528 <RCCEx_PLL2_Config>
 8005e96:	4603      	mov	r3, r0
 8005e98:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005e9a:	e00e      	b.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x33a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	3324      	adds	r3, #36	; 0x24
 8005ea0:	2100      	movs	r1, #0
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f001 fbf2 	bl	800768c <RCCEx_PLL3_Config>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005eac:	e005      	b.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x33a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	75fb      	strb	r3, [r7, #23]
      break;
 8005eb2:	e002      	b.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x33a>
      break;
 8005eb4:	bf00      	nop
 8005eb6:	e000      	b.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x33a>
      break;
 8005eb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005eba:	7dfb      	ldrb	r3, [r7, #23]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d109      	bne.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x354>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005ec0:	4b95      	ldr	r3, [pc, #596]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8005ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ec4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ecc:	4992      	ldr	r1, [pc, #584]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	650b      	str	r3, [r1, #80]	; 0x50
 8005ed2:	e001      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x358>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed4:	7dfb      	ldrb	r3, [r7, #23]
 8005ed6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d042      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ee8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005eec:	d01b      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 8005eee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ef2:	d805      	bhi.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x380>
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d022      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x3be>
 8005ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005efc:	d00a      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x394>
 8005efe:	e01b      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8005f00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f04:	d01d      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8005f06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f0a:	d01c      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8005f0c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f10:	d01b      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8005f12:	e011      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	3304      	adds	r3, #4
 8005f18:	2101      	movs	r1, #1
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f001 fb04 	bl	8007528 <RCCEx_PLL2_Config>
 8005f20:	4603      	mov	r3, r0
 8005f22:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005f24:	e012      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	3324      	adds	r3, #36	; 0x24
 8005f2a:	2101      	movs	r1, #1
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f001 fbad 	bl	800768c <RCCEx_PLL3_Config>
 8005f32:	4603      	mov	r3, r0
 8005f34:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005f36:	e009      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	75fb      	strb	r3, [r7, #23]
      break;
 8005f3c:	e006      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8005f3e:	bf00      	nop
 8005f40:	e004      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8005f42:	bf00      	nop
 8005f44:	e002      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8005f46:	bf00      	nop
 8005f48:	e000      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8005f4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f4c:	7dfb      	ldrb	r3, [r7, #23]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d109      	bne.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005f52:	4b71      	ldr	r3, [pc, #452]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8005f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f56:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f5e:	496e      	ldr	r1, [pc, #440]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8005f60:	4313      	orrs	r3, r2
 8005f62:	650b      	str	r3, [r1, #80]	; 0x50
 8005f64:	e001      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f66:	7dfb      	ldrb	r3, [r7, #23]
 8005f68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d049      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f7c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f80:	d02a      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8005f82:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f86:	d808      	bhi.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005f88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f8c:	d00f      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005f8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f92:	d015      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d021      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8005f98:	e01b      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8005f9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f9e:	d01f      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8005fa0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005fa4:	d01e      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8005fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005faa:	d01d      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8005fac:	e011      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	3304      	adds	r3, #4
 8005fb2:	2101      	movs	r1, #1
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f001 fab7 	bl	8007528 <RCCEx_PLL2_Config>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005fbe:	e014      	b.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x46a>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	3324      	adds	r3, #36	; 0x24
 8005fc4:	2101      	movs	r1, #1
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f001 fb60 	bl	800768c <RCCEx_PLL3_Config>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005fd0:	e00b      	b.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x46a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	75fb      	strb	r3, [r7, #23]
      break;
 8005fd6:	e008      	b.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8005fd8:	bf00      	nop
 8005fda:	e006      	b.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8005fdc:	bf00      	nop
 8005fde:	e004      	b.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8005fe0:	bf00      	nop
 8005fe2:	e002      	b.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8005fe4:	bf00      	nop
 8005fe6:	e000      	b.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8005fe8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fea:	7dfb      	ldrb	r3, [r7, #23]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10a      	bne.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x486>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005ff0:	4b49      	ldr	r3, [pc, #292]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8005ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ff4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005ffe:	4946      	ldr	r1, [pc, #280]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006000:	4313      	orrs	r3, r2
 8006002:	658b      	str	r3, [r1, #88]	; 0x58
 8006004:	e001      	b.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006006:	7dfb      	ldrb	r3, [r7, #23]
 8006008:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d02d      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800601a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800601e:	d005      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8006020:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006024:	d009      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006026:	2b00      	cmp	r3, #0
 8006028:	d013      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800602a:	e00f      	b.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800602c:	4b3a      	ldr	r3, [pc, #232]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800602e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006030:	4a39      	ldr	r2, [pc, #228]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006032:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006036:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006038:	e00c      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x4d4>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	3304      	adds	r3, #4
 800603e:	2101      	movs	r1, #1
 8006040:	4618      	mov	r0, r3
 8006042:	f001 fa71 	bl	8007528 <RCCEx_PLL2_Config>
 8006046:	4603      	mov	r3, r0
 8006048:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800604a:	e003      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	75fb      	strb	r3, [r7, #23]
      break;
 8006050:	e000      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      break;
 8006052:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006054:	7dfb      	ldrb	r3, [r7, #23]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d109      	bne.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800605a:	4b2f      	ldr	r3, [pc, #188]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800605c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800605e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006066:	492c      	ldr	r1, [pc, #176]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006068:	4313      	orrs	r3, r2
 800606a:	650b      	str	r3, [r1, #80]	; 0x50
 800606c:	e001      	b.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800606e:	7dfb      	ldrb	r3, [r7, #23]
 8006070:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d031      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x562>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006082:	2b03      	cmp	r3, #3
 8006084:	d81a      	bhi.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x53c>
 8006086:	a201      	add	r2, pc, #4	; (adr r2, 800608c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800608c:	080060c3 	.word	0x080060c3
 8006090:	0800609d 	.word	0x0800609d
 8006094:	080060ab 	.word	0x080060ab
 8006098:	080060c3 	.word	0x080060c3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800609c:	4b1e      	ldr	r3, [pc, #120]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800609e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a0:	4a1d      	ldr	r2, [pc, #116]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80060a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80060a8:	e00c      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x544>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	3304      	adds	r3, #4
 80060ae:	2102      	movs	r1, #2
 80060b0:	4618      	mov	r0, r3
 80060b2:	f001 fa39 	bl	8007528 <RCCEx_PLL2_Config>
 80060b6:	4603      	mov	r3, r0
 80060b8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80060ba:	e003      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	75fb      	strb	r3, [r7, #23]
      break;
 80060c0:	e000      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      break;
 80060c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060c4:	7dfb      	ldrb	r3, [r7, #23]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d109      	bne.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80060ca:	4b13      	ldr	r3, [pc, #76]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80060cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060ce:	f023 0203 	bic.w	r2, r3, #3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d6:	4910      	ldr	r1, [pc, #64]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80060d8:	4313      	orrs	r3, r2
 80060da:	64cb      	str	r3, [r1, #76]	; 0x4c
 80060dc:	e001      	b.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x562>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060de:	7dfb      	ldrb	r3, [r7, #23]
 80060e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f000 808a 	beq.w	8006204 <HAL_RCCEx_PeriphCLKConfig+0x684>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060f0:	4b0a      	ldr	r3, [pc, #40]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a09      	ldr	r2, [pc, #36]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80060f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80060fc:	f7fa ffea 	bl	80010d4 <HAL_GetTick>
 8006100:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006102:	e00d      	b.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006104:	f7fa ffe6 	bl	80010d4 <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	2b64      	cmp	r3, #100	; 0x64
 8006110:	d906      	bls.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        ret = HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	75fb      	strb	r3, [r7, #23]
        break;
 8006116:	e009      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8006118:	58024400 	.word	0x58024400
 800611c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006120:	4bba      	ldr	r3, [pc, #744]	; (800640c <HAL_RCCEx_PeriphCLKConfig+0x88c>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006128:	2b00      	cmp	r3, #0
 800612a:	d0eb      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x584>
      }
    }

    if(ret == HAL_OK)
 800612c:	7dfb      	ldrb	r3, [r7, #23]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d166      	bne.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006132:	4bb7      	ldr	r3, [pc, #732]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006134:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800613c:	4053      	eors	r3, r2
 800613e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006142:	2b00      	cmp	r3, #0
 8006144:	d013      	beq.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006146:	4bb2      	ldr	r3, [pc, #712]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800614a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800614e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006150:	4baf      	ldr	r3, [pc, #700]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006154:	4aae      	ldr	r2, [pc, #696]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800615a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800615c:	4bac      	ldr	r3, [pc, #688]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800615e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006160:	4aab      	ldr	r2, [pc, #684]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006166:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006168:	4aa9      	ldr	r2, [pc, #676]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006174:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006178:	d115      	bne.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x626>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800617a:	f7fa ffab 	bl	80010d4 <HAL_GetTick>
 800617e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006180:	e00b      	b.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x61a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006182:	f7fa ffa7 	bl	80010d4 <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006190:	4293      	cmp	r3, r2
 8006192:	d902      	bls.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x61a>
          {
            ret = HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	75fb      	strb	r3, [r7, #23]
            break;
 8006198:	e005      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x626>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800619a:	4b9d      	ldr	r3, [pc, #628]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800619c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800619e:	f003 0302 	and.w	r3, r3, #2
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d0ed      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x602>
          }
        }
      }

      if(ret == HAL_OK)
 80061a6:	7dfb      	ldrb	r3, [r7, #23]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d126      	bne.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80061b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061ba:	d10d      	bne.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x658>
 80061bc:	4b94      	ldr	r3, [pc, #592]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80061ca:	0919      	lsrs	r1, r3, #4
 80061cc:	4b91      	ldr	r3, [pc, #580]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 80061ce:	400b      	ands	r3, r1
 80061d0:	498f      	ldr	r1, [pc, #572]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	610b      	str	r3, [r1, #16]
 80061d6:	e005      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80061d8:	4b8d      	ldr	r3, [pc, #564]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	4a8c      	ldr	r2, [pc, #560]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80061de:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80061e2:	6113      	str	r3, [r2, #16]
 80061e4:	4b8a      	ldr	r3, [pc, #552]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80061e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80061ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061f2:	4987      	ldr	r1, [pc, #540]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	670b      	str	r3, [r1, #112]	; 0x70
 80061f8:	e004      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x684>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80061fa:	7dfb      	ldrb	r3, [r7, #23]
 80061fc:	75bb      	strb	r3, [r7, #22]
 80061fe:	e001      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x684>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006200:	7dfb      	ldrb	r3, [r7, #23]
 8006202:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0301 	and.w	r3, r3, #1
 800620c:	2b00      	cmp	r3, #0
 800620e:	d07f      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x790>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006216:	2b28      	cmp	r3, #40	; 0x28
 8006218:	d866      	bhi.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x768>
 800621a:	a201      	add	r2, pc, #4	; (adr r2, 8006220 <HAL_RCCEx_PeriphCLKConfig+0x6a0>)
 800621c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006220:	080062ef 	.word	0x080062ef
 8006224:	080062e9 	.word	0x080062e9
 8006228:	080062e9 	.word	0x080062e9
 800622c:	080062e9 	.word	0x080062e9
 8006230:	080062e9 	.word	0x080062e9
 8006234:	080062e9 	.word	0x080062e9
 8006238:	080062e9 	.word	0x080062e9
 800623c:	080062e9 	.word	0x080062e9
 8006240:	080062c5 	.word	0x080062c5
 8006244:	080062e9 	.word	0x080062e9
 8006248:	080062e9 	.word	0x080062e9
 800624c:	080062e9 	.word	0x080062e9
 8006250:	080062e9 	.word	0x080062e9
 8006254:	080062e9 	.word	0x080062e9
 8006258:	080062e9 	.word	0x080062e9
 800625c:	080062e9 	.word	0x080062e9
 8006260:	080062d7 	.word	0x080062d7
 8006264:	080062e9 	.word	0x080062e9
 8006268:	080062e9 	.word	0x080062e9
 800626c:	080062e9 	.word	0x080062e9
 8006270:	080062e9 	.word	0x080062e9
 8006274:	080062e9 	.word	0x080062e9
 8006278:	080062e9 	.word	0x080062e9
 800627c:	080062e9 	.word	0x080062e9
 8006280:	080062ef 	.word	0x080062ef
 8006284:	080062e9 	.word	0x080062e9
 8006288:	080062e9 	.word	0x080062e9
 800628c:	080062e9 	.word	0x080062e9
 8006290:	080062e9 	.word	0x080062e9
 8006294:	080062e9 	.word	0x080062e9
 8006298:	080062e9 	.word	0x080062e9
 800629c:	080062e9 	.word	0x080062e9
 80062a0:	080062ef 	.word	0x080062ef
 80062a4:	080062e9 	.word	0x080062e9
 80062a8:	080062e9 	.word	0x080062e9
 80062ac:	080062e9 	.word	0x080062e9
 80062b0:	080062e9 	.word	0x080062e9
 80062b4:	080062e9 	.word	0x080062e9
 80062b8:	080062e9 	.word	0x080062e9
 80062bc:	080062e9 	.word	0x080062e9
 80062c0:	080062ef 	.word	0x080062ef
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	3304      	adds	r3, #4
 80062c8:	2101      	movs	r1, #1
 80062ca:	4618      	mov	r0, r3
 80062cc:	f001 f92c 	bl	8007528 <RCCEx_PLL2_Config>
 80062d0:	4603      	mov	r3, r0
 80062d2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80062d4:	e00c      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x770>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	3324      	adds	r3, #36	; 0x24
 80062da:	2101      	movs	r1, #1
 80062dc:	4618      	mov	r0, r3
 80062de:	f001 f9d5 	bl	800768c <RCCEx_PLL3_Config>
 80062e2:	4603      	mov	r3, r0
 80062e4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80062e6:	e003      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x770>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	75fb      	strb	r3, [r7, #23]
      break;
 80062ec:	e000      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x770>
      break;
 80062ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062f0:	7dfb      	ldrb	r3, [r7, #23]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10a      	bne.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x78c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80062f6:	4b46      	ldr	r3, [pc, #280]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80062f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062fa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006304:	4942      	ldr	r1, [pc, #264]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006306:	4313      	orrs	r3, r2
 8006308:	654b      	str	r3, [r1, #84]	; 0x54
 800630a:	e001      	b.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x790>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800630c:	7dfb      	ldrb	r3, [r7, #23]
 800630e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0302 	and.w	r3, r3, #2
 8006318:	2b00      	cmp	r3, #0
 800631a:	d038      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x80e>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006320:	2b05      	cmp	r3, #5
 8006322:	d821      	bhi.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
 8006324:	a201      	add	r2, pc, #4	; (adr r2, 800632c <HAL_RCCEx_PeriphCLKConfig+0x7ac>)
 8006326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632a:	bf00      	nop
 800632c:	0800636f 	.word	0x0800636f
 8006330:	08006345 	.word	0x08006345
 8006334:	08006357 	.word	0x08006357
 8006338:	0800636f 	.word	0x0800636f
 800633c:	0800636f 	.word	0x0800636f
 8006340:	0800636f 	.word	0x0800636f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	3304      	adds	r3, #4
 8006348:	2101      	movs	r1, #1
 800634a:	4618      	mov	r0, r3
 800634c:	f001 f8ec 	bl	8007528 <RCCEx_PLL2_Config>
 8006350:	4603      	mov	r3, r0
 8006352:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006354:	e00c      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x7f0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	3324      	adds	r3, #36	; 0x24
 800635a:	2101      	movs	r1, #1
 800635c:	4618      	mov	r0, r3
 800635e:	f001 f995 	bl	800768c <RCCEx_PLL3_Config>
 8006362:	4603      	mov	r3, r0
 8006364:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006366:	e003      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	75fb      	strb	r3, [r7, #23]
      break;
 800636c:	e000      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      break;
 800636e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006370:	7dfb      	ldrb	r3, [r7, #23]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d109      	bne.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006376:	4b26      	ldr	r3, [pc, #152]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800637a:	f023 0207 	bic.w	r2, r3, #7
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006382:	4923      	ldr	r1, [pc, #140]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006384:	4313      	orrs	r3, r2
 8006386:	654b      	str	r3, [r1, #84]	; 0x54
 8006388:	e001      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x80e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800638a:	7dfb      	ldrb	r3, [r7, #23]
 800638c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0304 	and.w	r3, r3, #4
 8006396:	2b00      	cmp	r3, #0
 8006398:	d040      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x89c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063a0:	2b05      	cmp	r3, #5
 80063a2:	d821      	bhi.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x868>
 80063a4:	a201      	add	r2, pc, #4	; (adr r2, 80063ac <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 80063a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063aa:	bf00      	nop
 80063ac:	080063ef 	.word	0x080063ef
 80063b0:	080063c5 	.word	0x080063c5
 80063b4:	080063d7 	.word	0x080063d7
 80063b8:	080063ef 	.word	0x080063ef
 80063bc:	080063ef 	.word	0x080063ef
 80063c0:	080063ef 	.word	0x080063ef
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	3304      	adds	r3, #4
 80063c8:	2101      	movs	r1, #1
 80063ca:	4618      	mov	r0, r3
 80063cc:	f001 f8ac 	bl	8007528 <RCCEx_PLL2_Config>
 80063d0:	4603      	mov	r3, r0
 80063d2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80063d4:	e00c      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x870>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	3324      	adds	r3, #36	; 0x24
 80063da:	2101      	movs	r1, #1
 80063dc:	4618      	mov	r0, r3
 80063de:	f001 f955 	bl	800768c <RCCEx_PLL3_Config>
 80063e2:	4603      	mov	r3, r0
 80063e4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80063e6:	e003      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x870>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	75fb      	strb	r3, [r7, #23]
      break;
 80063ec:	e000      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x870>
      break;
 80063ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063f0:	7dfb      	ldrb	r3, [r7, #23]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d110      	bne.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x898>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063f6:	4b06      	ldr	r3, [pc, #24]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80063f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063fa:	f023 0207 	bic.w	r2, r3, #7
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006404:	4902      	ldr	r1, [pc, #8]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006406:	4313      	orrs	r3, r2
 8006408:	658b      	str	r3, [r1, #88]	; 0x58
 800640a:	e007      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x89c>
 800640c:	58024800 	.word	0x58024800
 8006410:	58024400 	.word	0x58024400
 8006414:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006418:	7dfb      	ldrb	r3, [r7, #23]
 800641a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0320 	and.w	r3, r3, #32
 8006424:	2b00      	cmp	r3, #0
 8006426:	d044      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800642e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006432:	d01b      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8006434:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006438:	d805      	bhi.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 800643a:	2b00      	cmp	r3, #0
 800643c:	d022      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x904>
 800643e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006442:	d00a      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x8da>
 8006444:	e01b      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8006446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800644a:	d01d      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x908>
 800644c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006450:	d01c      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x90c>
 8006452:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006456:	d01b      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8006458:	e011      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	3304      	adds	r3, #4
 800645e:	2100      	movs	r1, #0
 8006460:	4618      	mov	r0, r3
 8006462:	f001 f861 	bl	8007528 <RCCEx_PLL2_Config>
 8006466:	4603      	mov	r3, r0
 8006468:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800646a:	e012      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x912>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	3324      	adds	r3, #36	; 0x24
 8006470:	2102      	movs	r1, #2
 8006472:	4618      	mov	r0, r3
 8006474:	f001 f90a 	bl	800768c <RCCEx_PLL3_Config>
 8006478:	4603      	mov	r3, r0
 800647a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800647c:	e009      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	75fb      	strb	r3, [r7, #23]
      break;
 8006482:	e006      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8006484:	bf00      	nop
 8006486:	e004      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8006488:	bf00      	nop
 800648a:	e002      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 800648c:	bf00      	nop
 800648e:	e000      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8006490:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006492:	7dfb      	ldrb	r3, [r7, #23]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10a      	bne.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006498:	4bb3      	ldr	r3, [pc, #716]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800649a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800649c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064a6:	49b0      	ldr	r1, [pc, #704]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80064a8:	4313      	orrs	r3, r2
 80064aa:	654b      	str	r3, [r1, #84]	; 0x54
 80064ac:	e001      	b.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x932>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ae:	7dfb      	ldrb	r3, [r7, #23]
 80064b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d044      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80064c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064c8:	d01b      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x982>
 80064ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064ce:	d805      	bhi.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d022      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x99a>
 80064d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064d8:	d00a      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x970>
 80064da:	e01b      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x994>
 80064dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064e0:	d01d      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x99e>
 80064e2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80064e6:	d01c      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80064e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064ec:	d01b      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 80064ee:	e011      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x994>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	3304      	adds	r3, #4
 80064f4:	2100      	movs	r1, #0
 80064f6:	4618      	mov	r0, r3
 80064f8:	f001 f816 	bl	8007528 <RCCEx_PLL2_Config>
 80064fc:	4603      	mov	r3, r0
 80064fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006500:	e012      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x9a8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	3324      	adds	r3, #36	; 0x24
 8006506:	2102      	movs	r1, #2
 8006508:	4618      	mov	r0, r3
 800650a:	f001 f8bf 	bl	800768c <RCCEx_PLL3_Config>
 800650e:	4603      	mov	r3, r0
 8006510:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006512:	e009      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	75fb      	strb	r3, [r7, #23]
      break;
 8006518:	e006      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 800651a:	bf00      	nop
 800651c:	e004      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 800651e:	bf00      	nop
 8006520:	e002      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 8006522:	bf00      	nop
 8006524:	e000      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 8006526:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006528:	7dfb      	ldrb	r3, [r7, #23]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10a      	bne.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x9c4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800652e:	4b8e      	ldr	r3, [pc, #568]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006532:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800653c:	498a      	ldr	r1, [pc, #552]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800653e:	4313      	orrs	r3, r2
 8006540:	658b      	str	r3, [r1, #88]	; 0x58
 8006542:	e001      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006544:	7dfb      	ldrb	r3, [r7, #23]
 8006546:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006550:	2b00      	cmp	r3, #0
 8006552:	d044      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0xa5e>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800655a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800655e:	d01b      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xa18>
 8006560:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006564:	d805      	bhi.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8006566:	2b00      	cmp	r3, #0
 8006568:	d022      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800656a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800656e:	d00a      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8006570:	e01b      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8006572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006576:	d01d      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8006578:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800657c:	d01c      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0xa38>
 800657e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006582:	d01b      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 8006584:	e011      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	3304      	adds	r3, #4
 800658a:	2100      	movs	r1, #0
 800658c:	4618      	mov	r0, r3
 800658e:	f000 ffcb 	bl	8007528 <RCCEx_PLL2_Config>
 8006592:	4603      	mov	r3, r0
 8006594:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006596:	e012      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0xa3e>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	3324      	adds	r3, #36	; 0x24
 800659c:	2102      	movs	r1, #2
 800659e:	4618      	mov	r0, r3
 80065a0:	f001 f874 	bl	800768c <RCCEx_PLL3_Config>
 80065a4:	4603      	mov	r3, r0
 80065a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80065a8:	e009      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	75fb      	strb	r3, [r7, #23]
      break;
 80065ae:	e006      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 80065b0:	bf00      	nop
 80065b2:	e004      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 80065b4:	bf00      	nop
 80065b6:	e002      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 80065b8:	bf00      	nop
 80065ba:	e000      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 80065bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065be:	7dfb      	ldrb	r3, [r7, #23]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10a      	bne.n	80065da <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80065c4:	4b68      	ldr	r3, [pc, #416]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80065c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80065d2:	4965      	ldr	r1, [pc, #404]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80065d4:	4313      	orrs	r3, r2
 80065d6:	658b      	str	r3, [r1, #88]	; 0x58
 80065d8:	e001      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065da:	7dfb      	ldrb	r3, [r7, #23]
 80065dc:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0308 	and.w	r3, r3, #8
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d01a      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065f4:	d10a      	bne.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xa8c>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	3324      	adds	r3, #36	; 0x24
 80065fa:	2102      	movs	r1, #2
 80065fc:	4618      	mov	r0, r3
 80065fe:	f001 f845 	bl	800768c <RCCEx_PLL3_Config>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xa8c>
        {
          status = HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800660c:	4b56      	ldr	r3, [pc, #344]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800660e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006610:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800661a:	4953      	ldr	r1, [pc, #332]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800661c:	4313      	orrs	r3, r2
 800661e:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0310 	and.w	r3, r3, #16
 8006628:	2b00      	cmp	r3, #0
 800662a:	d01a      	beq.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0xae2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006636:	d10a      	bne.n	800664e <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	3324      	adds	r3, #36	; 0x24
 800663c:	2102      	movs	r1, #2
 800663e:	4618      	mov	r0, r3
 8006640:	f001 f824 	bl	800768c <RCCEx_PLL3_Config>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d001      	beq.n	800664e <HAL_RCCEx_PeriphCLKConfig+0xace>
      {
        status = HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800664e:	4b46      	ldr	r3, [pc, #280]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006652:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800665c:	4942      	ldr	r1, [pc, #264]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800665e:	4313      	orrs	r3, r2
 8006660:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800666a:	2b00      	cmp	r3, #0
 800666c:	d030      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006678:	d00d      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0xb16>
 800667a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800667e:	d016      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8006680:	2b00      	cmp	r3, #0
 8006682:	d111      	bne.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	3304      	adds	r3, #4
 8006688:	2100      	movs	r1, #0
 800668a:	4618      	mov	r0, r3
 800668c:	f000 ff4c 	bl	8007528 <RCCEx_PLL2_Config>
 8006690:	4603      	mov	r3, r0
 8006692:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006694:	e00c      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	3324      	adds	r3, #36	; 0x24
 800669a:	2102      	movs	r1, #2
 800669c:	4618      	mov	r0, r3
 800669e:	f000 fff5 	bl	800768c <RCCEx_PLL3_Config>
 80066a2:	4603      	mov	r3, r0
 80066a4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80066a6:	e003      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	75fb      	strb	r3, [r7, #23]
      break;
 80066ac:	e000      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80066ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066b0:	7dfb      	ldrb	r3, [r7, #23]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d10a      	bne.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066b6:	4b2c      	ldr	r3, [pc, #176]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80066b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80066c4:	4928      	ldr	r1, [pc, #160]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	658b      	str	r3, [r1, #88]	; 0x58
 80066ca:	e001      	b.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066cc:	7dfb      	ldrb	r3, [r7, #23]
 80066ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d02f      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0xbbc>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066e6:	d00c      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80066e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80066ec:	d015      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0xb9a>
 80066ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066f2:	d10f      	bne.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0xb94>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066f4:	4b1c      	ldr	r3, [pc, #112]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80066f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f8:	4a1b      	ldr	r2, [pc, #108]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80066fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006700:	e00c      	b.n	800671c <HAL_RCCEx_PeriphCLKConfig+0xb9c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	3324      	adds	r3, #36	; 0x24
 8006706:	2101      	movs	r1, #1
 8006708:	4618      	mov	r0, r3
 800670a:	f000 ffbf 	bl	800768c <RCCEx_PLL3_Config>
 800670e:	4603      	mov	r3, r0
 8006710:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006712:	e003      	b.n	800671c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	75fb      	strb	r3, [r7, #23]
      break;
 8006718:	e000      	b.n	800671c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      break;
 800671a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800671c:	7dfb      	ldrb	r3, [r7, #23]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10a      	bne.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006722:	4b11      	ldr	r3, [pc, #68]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006726:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006730:	490d      	ldr	r1, [pc, #52]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006732:	4313      	orrs	r3, r2
 8006734:	654b      	str	r3, [r1, #84]	; 0x54
 8006736:	e001      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0xbbc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006738:	7dfb      	ldrb	r3, [r7, #23]
 800673a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d02c      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800674c:	2b00      	cmp	r3, #0
 800674e:	d003      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8006750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006754:	d00a      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8006756:	e012      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006758:	4b03      	ldr	r3, [pc, #12]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800675a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675c:	4a02      	ldr	r2, [pc, #8]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800675e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006762:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006764:	e00e      	b.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0xc04>
 8006766:	bf00      	nop
 8006768:	58024400 	.word	0x58024400

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	3304      	adds	r3, #4
 8006770:	2102      	movs	r1, #2
 8006772:	4618      	mov	r0, r3
 8006774:	f000 fed8 	bl	8007528 <RCCEx_PLL2_Config>
 8006778:	4603      	mov	r3, r0
 800677a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800677c:	e002      	b.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0xc04>

    default:
      ret = HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	75fb      	strb	r3, [r7, #23]
      break;
 8006782:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006784:	7dfb      	ldrb	r3, [r7, #23]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d109      	bne.n	800679e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800678a:	4b56      	ldr	r3, [pc, #344]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800678c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800678e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006796:	4953      	ldr	r1, [pc, #332]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8006798:	4313      	orrs	r3, r2
 800679a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800679c:	e001      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800679e:	7dfb      	ldrb	r3, [r7, #23]
 80067a0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00a      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	3324      	adds	r3, #36	; 0x24
 80067b2:	2102      	movs	r1, #2
 80067b4:	4618      	mov	r0, r3
 80067b6:	f000 ff69 	bl	800768c <RCCEx_PLL3_Config>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d001      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
    {
      status=HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d031      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067da:	d00c      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80067dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067e0:	d802      	bhi.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d011      	beq.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xc8a>
 80067e6:	e00d      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80067e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067ec:	d00f      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0xc8e>
 80067ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067f2:	d00e      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80067f4:	e006      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xc84>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067f6:	4b3b      	ldr	r3, [pc, #236]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80067f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fa:	4a3a      	ldr	r2, [pc, #232]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80067fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006800:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006802:	e007      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	75fb      	strb	r3, [r7, #23]
      break;
 8006808:	e004      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 800680a:	bf00      	nop
 800680c:	e002      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 800680e:	bf00      	nop
 8006810:	e000      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 8006812:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006814:	7dfb      	ldrb	r3, [r7, #23]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10a      	bne.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800681a:	4b32      	ldr	r3, [pc, #200]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800681c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800681e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006828:	492e      	ldr	r1, [pc, #184]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800682a:	4313      	orrs	r3, r2
 800682c:	654b      	str	r3, [r1, #84]	; 0x54
 800682e:	e001      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006830:	7dfb      	ldrb	r3, [r7, #23]
 8006832:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800683c:	2b00      	cmp	r3, #0
 800683e:	d008      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006840:	4b28      	ldr	r3, [pc, #160]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8006842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006844:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800684c:	4925      	ldr	r1, [pc, #148]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800684e:	4313      	orrs	r3, r2
 8006850:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d008      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800685e:	4b21      	ldr	r3, [pc, #132]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8006860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006862:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800686a:	491e      	ldr	r1, [pc, #120]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800686c:	4313      	orrs	r3, r2
 800686e:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006878:	2b00      	cmp	r3, #0
 800687a:	d008      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800687c:	4b19      	ldr	r3, [pc, #100]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800687e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006880:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006888:	4916      	ldr	r1, [pc, #88]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800688a:	4313      	orrs	r3, r2
 800688c:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00d      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800689a:	4b12      	ldr	r3, [pc, #72]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	4a11      	ldr	r2, [pc, #68]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80068a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068a4:	6113      	str	r3, [r2, #16]
 80068a6:	4b0f      	ldr	r3, [pc, #60]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80068a8:	691a      	ldr	r2, [r3, #16]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80068b0:	490c      	ldr	r1, [pc, #48]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80068b2:	4313      	orrs	r3, r2
 80068b4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	da08      	bge.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80068be:	4b09      	ldr	r3, [pc, #36]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80068c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068ca:	4906      	ldr	r1, [pc, #24]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80068d0:	7dbb      	ldrb	r3, [r7, #22]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    return HAL_OK;
 80068d6:	2300      	movs	r3, #0
 80068d8:	e000      	b.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0xd5c>
  }
  return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3718      	adds	r7, #24
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	58024400 	.word	0x58024400

080068e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b090      	sub	sp, #64	; 0x40
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068f6:	d150      	bne.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80068f8:	4ba1      	ldr	r3, [pc, #644]	; (8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80068fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068fc:	f003 0307 	and.w	r3, r3, #7
 8006900:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006904:	2b04      	cmp	r3, #4
 8006906:	d844      	bhi.n	8006992 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8006908:	a201      	add	r2, pc, #4	; (adr r2, 8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800690a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690e:	bf00      	nop
 8006910:	08006925 	.word	0x08006925
 8006914:	08006935 	.word	0x08006935
 8006918:	08006945 	.word	0x08006945
 800691c:	0800698d 	.word	0x0800698d
 8006920:	08006955 	.word	0x08006955
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006928:	4618      	mov	r0, r3
 800692a:	f000 fcb1 	bl	8007290 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800692e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006930:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006932:	e1ef      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006934:	f107 0318 	add.w	r3, r7, #24
 8006938:	4618      	mov	r0, r3
 800693a:	f000 fa11 	bl	8006d60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006942:	e1e7      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006944:	f107 030c 	add.w	r3, r7, #12
 8006948:	4618      	mov	r0, r3
 800694a:	f000 fb55 	bl	8006ff8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006952:	e1df      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006954:	4b8a      	ldr	r3, [pc, #552]	; (8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006958:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800695c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800695e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006960:	2b00      	cmp	r3, #0
 8006962:	d102      	bne.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006964:	4b87      	ldr	r3, [pc, #540]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006966:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006968:	e1d4      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800696a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800696c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006970:	d102      	bne.n	8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8006972:	4b85      	ldr	r3, [pc, #532]	; (8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006974:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006976:	e1cd      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800697a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800697e:	d102      	bne.n	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8006980:	4b82      	ldr	r3, [pc, #520]	; (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006982:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006984:	e1c6      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 8006986:	2300      	movs	r3, #0
 8006988:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800698a:	e1c3      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800698c:	4b80      	ldr	r3, [pc, #512]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800698e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006990:	e1c0      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      default :
        {
          frequency = 0;
 8006992:	2300      	movs	r3, #0
 8006994:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006996:	bf00      	nop
 8006998:	e1bc      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069a0:	d14f      	bne.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 80069a2:	4b77      	ldr	r3, [pc, #476]	; (8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80069a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069a6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80069aa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80069ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ae:	2b80      	cmp	r3, #128	; 0x80
 80069b0:	d01c      	beq.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80069b2:	2b80      	cmp	r3, #128	; 0x80
 80069b4:	d804      	bhi.n	80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d008      	beq.n	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 80069ba:	2b40      	cmp	r3, #64	; 0x40
 80069bc:	d00e      	beq.n	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80069be:	e03c      	b.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 80069c0:	2bc0      	cmp	r3, #192	; 0xc0
 80069c2:	d037      	beq.n	8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80069c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069c8:	d018      	beq.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 80069ca:	e036      	b.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069d0:	4618      	mov	r0, r3
 80069d2:	f000 fc5d 	bl	8007290 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069da:	e19b      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069dc:	f107 0318 	add.w	r3, r7, #24
 80069e0:	4618      	mov	r0, r3
 80069e2:	f000 f9bd 	bl	8006d60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069ea:	e193      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069ec:	f107 030c 	add.w	r3, r7, #12
 80069f0:	4618      	mov	r0, r3
 80069f2:	f000 fb01 	bl	8006ff8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069fa:	e18b      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80069fc:	4b60      	ldr	r3, [pc, #384]	; (8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80069fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a04:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d102      	bne.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006a0c:	4b5d      	ldr	r3, [pc, #372]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006a10:	e180      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a18:	d102      	bne.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8006a1a:	4b5b      	ldr	r3, [pc, #364]	; (8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a1e:	e179      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a26:	d102      	bne.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8006a28:	4b58      	ldr	r3, [pc, #352]	; (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a2c:	e172      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a32:	e16f      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006a34:	4b56      	ldr	r3, [pc, #344]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006a36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a38:	e16c      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a3e:	bf00      	nop
 8006a40:	e168      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a48:	d153      	bne.n	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8006a4a:	4b4d      	ldr	r3, [pc, #308]	; (8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a4e:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8006a52:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a5a:	d01f      	beq.n	8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8006a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a60:	d805      	bhi.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00a      	beq.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8006a66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a6a:	d00f      	beq.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8006a6c:	e03d      	b.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8006a6e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006a72:	d037      	beq.n	8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8006a74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a78:	d018      	beq.n	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8006a7a:	e036      	b.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a80:	4618      	mov	r0, r3
 8006a82:	f000 fc05 	bl	8007290 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a8a:	e143      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a8c:	f107 0318 	add.w	r3, r7, #24
 8006a90:	4618      	mov	r0, r3
 8006a92:	f000 f965 	bl	8006d60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a9a:	e13b      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a9c:	f107 030c 	add.w	r3, r7, #12
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f000 faa9 	bl	8006ff8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006aaa:	e133      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006aac:	4b34      	ldr	r3, [pc, #208]	; (8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ab0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ab4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d102      	bne.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006abc:	4b31      	ldr	r3, [pc, #196]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006abe:	63fb      	str	r3, [r7, #60]	; 0x3c
          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }
          break;
 8006ac0:	e128      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ac4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ac8:	d102      	bne.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8006aca:	4b2f      	ldr	r3, [pc, #188]	; (8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006acc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ace:	e121      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ad2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ad6:	d102      	bne.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8006ad8:	4b2c      	ldr	r3, [pc, #176]	; (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006ada:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006adc:	e11a      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ae2:	e117      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006ae4:	4b2a      	ldr	r3, [pc, #168]	; (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ae8:	e114      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 8006aea:	2300      	movs	r3, #0
 8006aec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006aee:	bf00      	nop
 8006af0:	e110      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006af8:	d15d      	bne.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006afa:	4b21      	ldr	r3, [pc, #132]	; (8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006afe:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006b02:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b0a:	d01f      	beq.n	8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8006b0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b10:	d805      	bhi.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00a      	beq.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8006b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b1a:	d00f      	beq.n	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8006b1c:	e047      	b.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8006b1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b22:	d041      	beq.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8006b24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b28:	d018      	beq.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8006b2a:	e040      	b.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b30:	4618      	mov	r0, r3
 8006b32:	f000 fbad 	bl	8007290 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b3a:	e0eb      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b3c:	f107 0318 	add.w	r3, r7, #24
 8006b40:	4618      	mov	r0, r3
 8006b42:	f000 f90d 	bl	8006d60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b4a:	e0e3      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b4c:	f107 030c 	add.w	r3, r7, #12
 8006b50:	4618      	mov	r0, r3
 8006b52:	f000 fa51 	bl	8006ff8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b5a:	e0db      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006b5c:	4b08      	ldr	r3, [pc, #32]	; (8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b64:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d102      	bne.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006b6c:	4b05      	ldr	r3, [pc, #20]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006b70:	e0d0      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b78:	d10c      	bne.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8006b7a:	4b03      	ldr	r3, [pc, #12]	; (8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b7e:	e0c9      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
 8006b80:	58024400 	.word	0x58024400
 8006b84:	03d09000 	.word	0x03d09000
 8006b88:	003d0900 	.word	0x003d0900
 8006b8c:	007a1200 	.word	0x007a1200
 8006b90:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b9a:	d102      	bne.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8006b9c:	4b60      	ldr	r3, [pc, #384]	; (8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8006b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ba0:	e0b8      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ba6:	e0b5      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006ba8:	4b5e      	ldr	r3, [pc, #376]	; (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 8006baa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bac:	e0b2      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      default :
        {
          frequency = 0;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bb2:	bf00      	nop
 8006bb4:	e0ae      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006bbc:	d13d      	bne.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0x352>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006bbe:	4b5a      	ldr	r3, [pc, #360]	; (8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8006bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bc2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006bc6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bce:	d00c      	beq.n	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8006bd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bd4:	d011      	beq.n	8006bfa <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d12b      	bne.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bda:	f107 0318 	add.w	r3, r7, #24
 8006bde:	4618      	mov	r0, r3
 8006be0:	f000 f8be 	bl	8006d60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006be8:	e094      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bea:	f107 030c 	add.w	r3, r7, #12
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f000 fa02 	bl	8006ff8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bf8:	e08c      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006bfa:	4b4b      	ldr	r3, [pc, #300]	; (8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8006bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bfe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c02:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d102      	bne.n	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006c0a:	4b48      	ldr	r3, [pc, #288]	; (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x444>)
 8006c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006c0e:	e081      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c16:	d102      	bne.n	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0x336>
            frequency = CSI_VALUE;
 8006c18:	4b45      	ldr	r3, [pc, #276]	; (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x448>)
 8006c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c1c:	e07a      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c24:	d102      	bne.n	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
            frequency = HSE_VALUE;
 8006c26:	4b3e      	ldr	r3, [pc, #248]	; (8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8006c28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c2a:	e073      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c30:	e070      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 8006c32:	2300      	movs	r3, #0
 8006c34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c36:	bf00      	nop
 8006c38:	e06c      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c40:	d11f      	bne.n	8006c82 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8006c42:	4b39      	ldr	r3, [pc, #228]	; (8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8006c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c4a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d003      	beq.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c56:	d008      	beq.n	8006c6a <HAL_RCCEx_GetPeriphCLKFreq+0x382>
 8006c58:	e00f      	b.n	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0x392>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f000 fb16 	bl	8007290 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c68:	e054      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c6a:	f107 0318 	add.w	r3, r7, #24
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f000 f876 	bl	8006d60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006c74:	6a3b      	ldr	r3, [r7, #32]
 8006c76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c78:	e04c      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c7e:	bf00      	nop
 8006c80:	e048      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c88:	d142      	bne.n	8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8006c8a:	4b27      	ldr	r3, [pc, #156]	; (8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8006c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c8e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006c92:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c9a:	d029      	beq.n	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x408>
 8006c9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ca0:	d808      	bhi.n	8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006ca2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ca6:	d013      	beq.n	8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006ca8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cac:	d018      	beq.n	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00a      	beq.n	8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 8006cb2:	e029      	b.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 8006cb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006cb8:	d020      	beq.n	8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8006cba:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006cbe:	d020      	beq.n	8006d02 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 8006cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cc4:	d017      	beq.n	8006cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8006cc6:	e01f      	b.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006cc8:	f000 f834 	bl	8006d34 <HAL_RCCEx_GetD3PCLK1Freq>
 8006ccc:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8006cce:	e021      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cd0:	f107 0318 	add.w	r3, r7, #24
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f000 f843 	bl	8006d60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cde:	e019      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ce0:	f107 030c 	add.w	r3, r7, #12
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f000 f987 	bl	8006ff8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cee:	e011      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8006cf0:	4b0e      	ldr	r3, [pc, #56]	; (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x444>)
 8006cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cf4:	e00e      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8006cf6:	4b0e      	ldr	r3, [pc, #56]	; (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x448>)
 8006cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cfa:	e00b      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8006cfc:	4b08      	ldr	r3, [pc, #32]	; (8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8006cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d00:	e008      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006d02:	4b08      	ldr	r3, [pc, #32]	; (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 8006d04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d06:	e005      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d0c:	bf00      	nop
 8006d0e:	e001      	b.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else
    {
      frequency = 0;
 8006d10:	2300      	movs	r3, #0
 8006d12:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3740      	adds	r7, #64	; 0x40
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	007a1200 	.word	0x007a1200
 8006d24:	00bb8000 	.word	0x00bb8000
 8006d28:	58024400 	.word	0x58024400
 8006d2c:	03d09000 	.word	0x03d09000
 8006d30:	003d0900 	.word	0x003d0900

08006d34 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8006d38:	f7fe fec6 	bl	8005ac8 <HAL_RCC_GetHCLKFreq>
 8006d3c:	4601      	mov	r1, r0
 8006d3e:	4b06      	ldr	r3, [pc, #24]	; (8006d58 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006d40:	6a1b      	ldr	r3, [r3, #32]
 8006d42:	091b      	lsrs	r3, r3, #4
 8006d44:	f003 0307 	and.w	r3, r3, #7
 8006d48:	4a04      	ldr	r2, [pc, #16]	; (8006d5c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006d4a:	5cd3      	ldrb	r3, [r2, r3]
 8006d4c:	f003 031f 	and.w	r3, r3, #31
 8006d50:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	58024400 	.word	0x58024400
 8006d5c:	08008b78 	.word	0x08008b78

08006d60 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b089      	sub	sp, #36	; 0x24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d68:	4b9d      	ldr	r3, [pc, #628]	; (8006fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d6c:	f003 0303 	and.w	r3, r3, #3
 8006d70:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006d72:	4b9b      	ldr	r3, [pc, #620]	; (8006fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d76:	0b1b      	lsrs	r3, r3, #12
 8006d78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d7c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006d7e:	4b98      	ldr	r3, [pc, #608]	; (8006fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d82:	091b      	lsrs	r3, r3, #4
 8006d84:	f003 0301 	and.w	r3, r3, #1
 8006d88:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006d8a:	4b95      	ldr	r3, [pc, #596]	; (8006fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d8e:	08db      	lsrs	r3, r3, #3
 8006d90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d94:	693a      	ldr	r2, [r7, #16]
 8006d96:	fb02 f303 	mul.w	r3, r2, r3
 8006d9a:	ee07 3a90 	vmov	s15, r3
 8006d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006da2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f000 810a 	beq.w	8006fc2 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d05a      	beq.n	8006e6a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d302      	bcc.n	8006dbe <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d078      	beq.n	8006eae <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8006dbc:	e099      	b.n	8006ef2 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dbe:	4b88      	ldr	r3, [pc, #544]	; (8006fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0320 	and.w	r3, r3, #32
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d02d      	beq.n	8006e26 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006dca:	4b85      	ldr	r3, [pc, #532]	; (8006fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	08db      	lsrs	r3, r3, #3
 8006dd0:	f003 0303 	and.w	r3, r3, #3
 8006dd4:	4a83      	ldr	r2, [pc, #524]	; (8006fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8006dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8006dda:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	ee07 3a90 	vmov	s15, r3
 8006de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	ee07 3a90 	vmov	s15, r3
 8006dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006df0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006df4:	4b7a      	ldr	r3, [pc, #488]	; (8006fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dfc:	ee07 3a90 	vmov	s15, r3
 8006e00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e04:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e08:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006e0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e20:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006e24:	e087      	b.n	8006f36 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	ee07 3a90 	vmov	s15, r3
 8006e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e30:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006fec <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8006e34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e38:	4b69      	ldr	r3, [pc, #420]	; (8006fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e40:	ee07 3a90 	vmov	s15, r3
 8006e44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e48:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e4c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006e50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e64:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e68:	e065      	b.n	8006f36 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	ee07 3a90 	vmov	s15, r3
 8006e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e74:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006e78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e7c:	4b58      	ldr	r3, [pc, #352]	; (8006fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e84:	ee07 3a90 	vmov	s15, r3
 8006e88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e90:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006e94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ea0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ea8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006eac:	e043      	b.n	8006f36 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	ee07 3a90 	vmov	s15, r3
 8006eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eb8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8006ebc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ec0:	4b47      	ldr	r3, [pc, #284]	; (8006fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ec8:	ee07 3a90 	vmov	s15, r3
 8006ecc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ed0:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ed4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006ed8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006edc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ee0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ee4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ef0:	e021      	b.n	8006f36 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	ee07 3a90 	vmov	s15, r3
 8006ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006efc:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006f00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f04:	4b36      	ldr	r3, [pc, #216]	; (8006fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f0c:	ee07 3a90 	vmov	s15, r3
 8006f10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f14:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f18:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006f1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f30:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f34:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006f36:	4b2a      	ldr	r3, [pc, #168]	; (8006fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3a:	0a5b      	lsrs	r3, r3, #9
 8006f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f40:	ee07 3a90 	vmov	s15, r3
 8006f44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f50:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f5c:	ee17 2a90 	vmov	r2, s15
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006f64:	4b1e      	ldr	r3, [pc, #120]	; (8006fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f68:	0c1b      	lsrs	r3, r3, #16
 8006f6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f6e:	ee07 3a90 	vmov	s15, r3
 8006f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f8a:	ee17 2a90 	vmov	r2, s15
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006f92:	4b13      	ldr	r3, [pc, #76]	; (8006fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f96:	0e1b      	lsrs	r3, r3, #24
 8006f98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f9c:	ee07 3a90 	vmov	s15, r3
 8006fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fa4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006fa8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fac:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fb8:	ee17 2a90 	vmov	r2, s15
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006fc0:	e008      	b.n	8006fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	609a      	str	r2, [r3, #8]
}
 8006fd4:	bf00      	nop
 8006fd6:	3724      	adds	r7, #36	; 0x24
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr
 8006fe0:	58024400 	.word	0x58024400
 8006fe4:	03d09000 	.word	0x03d09000
 8006fe8:	46000000 	.word	0x46000000
 8006fec:	4c742400 	.word	0x4c742400
 8006ff0:	4a742400 	.word	0x4a742400
 8006ff4:	4af42400 	.word	0x4af42400

08006ff8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b089      	sub	sp, #36	; 0x24
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007000:	4b9d      	ldr	r3, [pc, #628]	; (8007278 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007004:	f003 0303 	and.w	r3, r3, #3
 8007008:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800700a:	4b9b      	ldr	r3, [pc, #620]	; (8007278 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800700c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700e:	0d1b      	lsrs	r3, r3, #20
 8007010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007014:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007016:	4b98      	ldr	r3, [pc, #608]	; (8007278 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701a:	0a1b      	lsrs	r3, r3, #8
 800701c:	f003 0301 	and.w	r3, r3, #1
 8007020:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007022:	4b95      	ldr	r3, [pc, #596]	; (8007278 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007026:	08db      	lsrs	r3, r3, #3
 8007028:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	fb02 f303 	mul.w	r3, r2, r3
 8007032:	ee07 3a90 	vmov	s15, r3
 8007036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800703a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	2b00      	cmp	r3, #0
 8007042:	f000 810a 	beq.w	800725a <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	2b01      	cmp	r3, #1
 800704a:	d05a      	beq.n	8007102 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800704c:	2b01      	cmp	r3, #1
 800704e:	d302      	bcc.n	8007056 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8007050:	2b02      	cmp	r3, #2
 8007052:	d078      	beq.n	8007146 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8007054:	e099      	b.n	800718a <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007056:	4b88      	ldr	r3, [pc, #544]	; (8007278 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f003 0320 	and.w	r3, r3, #32
 800705e:	2b00      	cmp	r3, #0
 8007060:	d02d      	beq.n	80070be <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007062:	4b85      	ldr	r3, [pc, #532]	; (8007278 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	08db      	lsrs	r3, r3, #3
 8007068:	f003 0303 	and.w	r3, r3, #3
 800706c:	4a83      	ldr	r2, [pc, #524]	; (800727c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800706e:	fa22 f303 	lsr.w	r3, r2, r3
 8007072:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	ee07 3a90 	vmov	s15, r3
 800707a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	ee07 3a90 	vmov	s15, r3
 8007084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007088:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800708c:	4b7a      	ldr	r3, [pc, #488]	; (8007278 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800708e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007094:	ee07 3a90 	vmov	s15, r3
 8007098:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800709c:	ed97 6a03 	vldr	s12, [r7, #12]
 80070a0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007280 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80070a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070b8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80070bc:	e087      	b.n	80071ce <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	ee07 3a90 	vmov	s15, r3
 80070c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070c8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007284 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80070cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070d0:	4b69      	ldr	r3, [pc, #420]	; (8007278 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80070d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070d8:	ee07 3a90 	vmov	s15, r3
 80070dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80070e4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007280 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80070e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007100:	e065      	b.n	80071ce <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	ee07 3a90 	vmov	s15, r3
 8007108:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800710c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007110:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007114:	4b58      	ldr	r3, [pc, #352]	; (8007278 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800711c:	ee07 3a90 	vmov	s15, r3
 8007120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007124:	ed97 6a03 	vldr	s12, [r7, #12]
 8007128:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007280 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800712c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007130:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007134:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007138:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800713c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007140:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007144:	e043      	b.n	80071ce <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	ee07 3a90 	vmov	s15, r3
 800714c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007150:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800728c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8007154:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007158:	4b47      	ldr	r3, [pc, #284]	; (8007278 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800715a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007160:	ee07 3a90 	vmov	s15, r3
 8007164:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007168:	ed97 6a03 	vldr	s12, [r7, #12]
 800716c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007280 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007170:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007174:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007178:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800717c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007180:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007184:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007188:	e021      	b.n	80071ce <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	ee07 3a90 	vmov	s15, r3
 8007190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007194:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007198:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800719c:	4b36      	ldr	r3, [pc, #216]	; (8007278 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800719e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071a4:	ee07 3a90 	vmov	s15, r3
 80071a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80071b0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007280 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80071b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071cc:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80071ce:	4b2a      	ldr	r3, [pc, #168]	; (8007278 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80071d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d2:	0a5b      	lsrs	r3, r3, #9
 80071d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071d8:	ee07 3a90 	vmov	s15, r3
 80071dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80071ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071f4:	ee17 2a90 	vmov	r2, s15
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80071fc:	4b1e      	ldr	r3, [pc, #120]	; (8007278 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80071fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007200:	0c1b      	lsrs	r3, r3, #16
 8007202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007206:	ee07 3a90 	vmov	s15, r3
 800720a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800720e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007212:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007216:	edd7 6a07 	vldr	s13, [r7, #28]
 800721a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800721e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007222:	ee17 2a90 	vmov	r2, s15
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800722a:	4b13      	ldr	r3, [pc, #76]	; (8007278 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800722c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722e:	0e1b      	lsrs	r3, r3, #24
 8007230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007234:	ee07 3a90 	vmov	s15, r3
 8007238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800723c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007240:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007244:	edd7 6a07 	vldr	s13, [r7, #28]
 8007248:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800724c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007250:	ee17 2a90 	vmov	r2, s15
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007258:	e008      	b.n	800726c <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	609a      	str	r2, [r3, #8]
}
 800726c:	bf00      	nop
 800726e:	3724      	adds	r7, #36	; 0x24
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr
 8007278:	58024400 	.word	0x58024400
 800727c:	03d09000 	.word	0x03d09000
 8007280:	46000000 	.word	0x46000000
 8007284:	4c742400 	.word	0x4c742400
 8007288:	4a742400 	.word	0x4a742400
 800728c:	4af42400 	.word	0x4af42400

08007290 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007290:	b480      	push	{r7}
 8007292:	b089      	sub	sp, #36	; 0x24
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007298:	4b9d      	ldr	r3, [pc, #628]	; (8007510 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800729a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800729c:	f003 0303 	and.w	r3, r3, #3
 80072a0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80072a2:	4b9b      	ldr	r3, [pc, #620]	; (8007510 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80072a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a6:	091b      	lsrs	r3, r3, #4
 80072a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072ac:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80072ae:	4b98      	ldr	r3, [pc, #608]	; (8007510 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80072b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b2:	f003 0301 	and.w	r3, r3, #1
 80072b6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80072b8:	4b95      	ldr	r3, [pc, #596]	; (8007510 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80072ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072bc:	08db      	lsrs	r3, r3, #3
 80072be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072c2:	693a      	ldr	r2, [r7, #16]
 80072c4:	fb02 f303 	mul.w	r3, r2, r3
 80072c8:	ee07 3a90 	vmov	s15, r3
 80072cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072d0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f000 810a 	beq.w	80074f0 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d05a      	beq.n	8007398 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d302      	bcc.n	80072ec <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	d078      	beq.n	80073dc <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80072ea:	e099      	b.n	8007420 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072ec:	4b88      	ldr	r3, [pc, #544]	; (8007510 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 0320 	and.w	r3, r3, #32
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d02d      	beq.n	8007354 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80072f8:	4b85      	ldr	r3, [pc, #532]	; (8007510 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	08db      	lsrs	r3, r3, #3
 80072fe:	f003 0303 	and.w	r3, r3, #3
 8007302:	4a84      	ldr	r2, [pc, #528]	; (8007514 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8007304:	fa22 f303 	lsr.w	r3, r2, r3
 8007308:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	ee07 3a90 	vmov	s15, r3
 8007310:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	ee07 3a90 	vmov	s15, r3
 800731a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800731e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007322:	4b7b      	ldr	r3, [pc, #492]	; (8007510 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800732a:	ee07 3a90 	vmov	s15, r3
 800732e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007332:	ed97 6a03 	vldr	s12, [r7, #12]
 8007336:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007518 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800733a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800733e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007342:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800734a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800734e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007352:	e087      	b.n	8007464 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	ee07 3a90 	vmov	s15, r3
 800735a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800735e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800751c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8007362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007366:	4b6a      	ldr	r3, [pc, #424]	; (8007510 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800736a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800736e:	ee07 3a90 	vmov	s15, r3
 8007372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007376:	ed97 6a03 	vldr	s12, [r7, #12]
 800737a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007518 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800737e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800738a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800738e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007392:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007396:	e065      	b.n	8007464 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	ee07 3a90 	vmov	s15, r3
 800739e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007520 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80073a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073aa:	4b59      	ldr	r3, [pc, #356]	; (8007510 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80073ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073b2:	ee07 3a90 	vmov	s15, r3
 80073b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80073be:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007518 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80073c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073da:	e043      	b.n	8007464 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	ee07 3a90 	vmov	s15, r3
 80073e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073e6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007524 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80073ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ee:	4b48      	ldr	r3, [pc, #288]	; (8007510 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80073f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073f6:	ee07 3a90 	vmov	s15, r3
 80073fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007402:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007518 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800740a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800740e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800741a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800741e:	e021      	b.n	8007464 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	ee07 3a90 	vmov	s15, r3
 8007426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800742a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007520 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800742e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007432:	4b37      	ldr	r3, [pc, #220]	; (8007510 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800743a:	ee07 3a90 	vmov	s15, r3
 800743e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007442:	ed97 6a03 	vldr	s12, [r7, #12]
 8007446:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007518 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800744a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800744e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800745a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800745e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007462:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007464:	4b2a      	ldr	r3, [pc, #168]	; (8007510 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007468:	0a5b      	lsrs	r3, r3, #9
 800746a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800746e:	ee07 3a90 	vmov	s15, r3
 8007472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007476:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800747a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800747e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007482:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007486:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800748a:	ee17 2a90 	vmov	r2, s15
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007492:	4b1f      	ldr	r3, [pc, #124]	; (8007510 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007496:	0c1b      	lsrs	r3, r3, #16
 8007498:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800749c:	ee07 3a90 	vmov	s15, r3
 80074a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80074b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074b8:	ee17 2a90 	vmov	r2, s15
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80074c0:	4b13      	ldr	r3, [pc, #76]	; (8007510 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80074c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c4:	0e1b      	lsrs	r3, r3, #24
 80074c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074ca:	ee07 3a90 	vmov	s15, r3
 80074ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074da:	edd7 6a07 	vldr	s13, [r7, #28]
 80074de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074e6:	ee17 2a90 	vmov	r2, s15
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80074ee:	e008      	b.n	8007502 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	609a      	str	r2, [r3, #8]
}
 8007502:	bf00      	nop
 8007504:	3724      	adds	r7, #36	; 0x24
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr
 800750e:	bf00      	nop
 8007510:	58024400 	.word	0x58024400
 8007514:	03d09000 	.word	0x03d09000
 8007518:	46000000 	.word	0x46000000
 800751c:	4c742400 	.word	0x4c742400
 8007520:	4a742400 	.word	0x4a742400
 8007524:	4af42400 	.word	0x4af42400

08007528 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007532:	2300      	movs	r3, #0
 8007534:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007536:	4b53      	ldr	r3, [pc, #332]	; (8007684 <RCCEx_PLL2_Config+0x15c>)
 8007538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800753a:	f003 0303 	and.w	r3, r3, #3
 800753e:	2b03      	cmp	r3, #3
 8007540:	d101      	bne.n	8007546 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e099      	b.n	800767a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007546:	4b4f      	ldr	r3, [pc, #316]	; (8007684 <RCCEx_PLL2_Config+0x15c>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a4e      	ldr	r2, [pc, #312]	; (8007684 <RCCEx_PLL2_Config+0x15c>)
 800754c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007550:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007552:	f7f9 fdbf 	bl	80010d4 <HAL_GetTick>
 8007556:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007558:	e008      	b.n	800756c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800755a:	f7f9 fdbb 	bl	80010d4 <HAL_GetTick>
 800755e:	4602      	mov	r2, r0
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	1ad3      	subs	r3, r2, r3
 8007564:	2b02      	cmp	r3, #2
 8007566:	d901      	bls.n	800756c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007568:	2303      	movs	r3, #3
 800756a:	e086      	b.n	800767a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800756c:	4b45      	ldr	r3, [pc, #276]	; (8007684 <RCCEx_PLL2_Config+0x15c>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1f0      	bne.n	800755a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007578:	4b42      	ldr	r3, [pc, #264]	; (8007684 <RCCEx_PLL2_Config+0x15c>)
 800757a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	031b      	lsls	r3, r3, #12
 8007586:	493f      	ldr	r1, [pc, #252]	; (8007684 <RCCEx_PLL2_Config+0x15c>)
 8007588:	4313      	orrs	r3, r2
 800758a:	628b      	str	r3, [r1, #40]	; 0x28
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	3b01      	subs	r3, #1
 8007592:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	3b01      	subs	r3, #1
 800759c:	025b      	lsls	r3, r3, #9
 800759e:	b29b      	uxth	r3, r3
 80075a0:	431a      	orrs	r2, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	3b01      	subs	r3, #1
 80075a8:	041b      	lsls	r3, r3, #16
 80075aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80075ae:	431a      	orrs	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	3b01      	subs	r3, #1
 80075b6:	061b      	lsls	r3, r3, #24
 80075b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80075bc:	4931      	ldr	r1, [pc, #196]	; (8007684 <RCCEx_PLL2_Config+0x15c>)
 80075be:	4313      	orrs	r3, r2
 80075c0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80075c2:	4b30      	ldr	r3, [pc, #192]	; (8007684 <RCCEx_PLL2_Config+0x15c>)
 80075c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	695b      	ldr	r3, [r3, #20]
 80075ce:	492d      	ldr	r1, [pc, #180]	; (8007684 <RCCEx_PLL2_Config+0x15c>)
 80075d0:	4313      	orrs	r3, r2
 80075d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80075d4:	4b2b      	ldr	r3, [pc, #172]	; (8007684 <RCCEx_PLL2_Config+0x15c>)
 80075d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d8:	f023 0220 	bic.w	r2, r3, #32
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	4928      	ldr	r1, [pc, #160]	; (8007684 <RCCEx_PLL2_Config+0x15c>)
 80075e2:	4313      	orrs	r3, r2
 80075e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80075e6:	4b27      	ldr	r3, [pc, #156]	; (8007684 <RCCEx_PLL2_Config+0x15c>)
 80075e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ea:	4a26      	ldr	r2, [pc, #152]	; (8007684 <RCCEx_PLL2_Config+0x15c>)
 80075ec:	f023 0310 	bic.w	r3, r3, #16
 80075f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80075f2:	4b24      	ldr	r3, [pc, #144]	; (8007684 <RCCEx_PLL2_Config+0x15c>)
 80075f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075f6:	4b24      	ldr	r3, [pc, #144]	; (8007688 <RCCEx_PLL2_Config+0x160>)
 80075f8:	4013      	ands	r3, r2
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	69d2      	ldr	r2, [r2, #28]
 80075fe:	00d2      	lsls	r2, r2, #3
 8007600:	4920      	ldr	r1, [pc, #128]	; (8007684 <RCCEx_PLL2_Config+0x15c>)
 8007602:	4313      	orrs	r3, r2
 8007604:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007606:	4b1f      	ldr	r3, [pc, #124]	; (8007684 <RCCEx_PLL2_Config+0x15c>)
 8007608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800760a:	4a1e      	ldr	r2, [pc, #120]	; (8007684 <RCCEx_PLL2_Config+0x15c>)
 800760c:	f043 0310 	orr.w	r3, r3, #16
 8007610:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d106      	bne.n	8007626 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007618:	4b1a      	ldr	r3, [pc, #104]	; (8007684 <RCCEx_PLL2_Config+0x15c>)
 800761a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761c:	4a19      	ldr	r2, [pc, #100]	; (8007684 <RCCEx_PLL2_Config+0x15c>)
 800761e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007622:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007624:	e00f      	b.n	8007646 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	2b01      	cmp	r3, #1
 800762a:	d106      	bne.n	800763a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800762c:	4b15      	ldr	r3, [pc, #84]	; (8007684 <RCCEx_PLL2_Config+0x15c>)
 800762e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007630:	4a14      	ldr	r2, [pc, #80]	; (8007684 <RCCEx_PLL2_Config+0x15c>)
 8007632:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007636:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007638:	e005      	b.n	8007646 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800763a:	4b12      	ldr	r3, [pc, #72]	; (8007684 <RCCEx_PLL2_Config+0x15c>)
 800763c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763e:	4a11      	ldr	r2, [pc, #68]	; (8007684 <RCCEx_PLL2_Config+0x15c>)
 8007640:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007644:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007646:	4b0f      	ldr	r3, [pc, #60]	; (8007684 <RCCEx_PLL2_Config+0x15c>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a0e      	ldr	r2, [pc, #56]	; (8007684 <RCCEx_PLL2_Config+0x15c>)
 800764c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007650:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007652:	f7f9 fd3f 	bl	80010d4 <HAL_GetTick>
 8007656:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007658:	e008      	b.n	800766c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800765a:	f7f9 fd3b 	bl	80010d4 <HAL_GetTick>
 800765e:	4602      	mov	r2, r0
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	2b02      	cmp	r3, #2
 8007666:	d901      	bls.n	800766c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007668:	2303      	movs	r3, #3
 800766a:	e006      	b.n	800767a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800766c:	4b05      	ldr	r3, [pc, #20]	; (8007684 <RCCEx_PLL2_Config+0x15c>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007674:	2b00      	cmp	r3, #0
 8007676:	d0f0      	beq.n	800765a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007678:	7bfb      	ldrb	r3, [r7, #15]
}
 800767a:	4618      	mov	r0, r3
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	58024400 	.word	0x58024400
 8007688:	ffff0007 	.word	0xffff0007

0800768c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007696:	2300      	movs	r3, #0
 8007698:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800769a:	4b53      	ldr	r3, [pc, #332]	; (80077e8 <RCCEx_PLL3_Config+0x15c>)
 800769c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769e:	f003 0303 	and.w	r3, r3, #3
 80076a2:	2b03      	cmp	r3, #3
 80076a4:	d101      	bne.n	80076aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e099      	b.n	80077de <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80076aa:	4b4f      	ldr	r3, [pc, #316]	; (80077e8 <RCCEx_PLL3_Config+0x15c>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a4e      	ldr	r2, [pc, #312]	; (80077e8 <RCCEx_PLL3_Config+0x15c>)
 80076b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076b6:	f7f9 fd0d 	bl	80010d4 <HAL_GetTick>
 80076ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80076bc:	e008      	b.n	80076d0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80076be:	f7f9 fd09 	bl	80010d4 <HAL_GetTick>
 80076c2:	4602      	mov	r2, r0
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d901      	bls.n	80076d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e086      	b.n	80077de <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80076d0:	4b45      	ldr	r3, [pc, #276]	; (80077e8 <RCCEx_PLL3_Config+0x15c>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d1f0      	bne.n	80076be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80076dc:	4b42      	ldr	r3, [pc, #264]	; (80077e8 <RCCEx_PLL3_Config+0x15c>)
 80076de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	051b      	lsls	r3, r3, #20
 80076ea:	493f      	ldr	r1, [pc, #252]	; (80077e8 <RCCEx_PLL3_Config+0x15c>)
 80076ec:	4313      	orrs	r3, r2
 80076ee:	628b      	str	r3, [r1, #40]	; 0x28
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	3b01      	subs	r3, #1
 80076f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	3b01      	subs	r3, #1
 8007700:	025b      	lsls	r3, r3, #9
 8007702:	b29b      	uxth	r3, r3
 8007704:	431a      	orrs	r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	3b01      	subs	r3, #1
 800770c:	041b      	lsls	r3, r3, #16
 800770e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007712:	431a      	orrs	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	691b      	ldr	r3, [r3, #16]
 8007718:	3b01      	subs	r3, #1
 800771a:	061b      	lsls	r3, r3, #24
 800771c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007720:	4931      	ldr	r1, [pc, #196]	; (80077e8 <RCCEx_PLL3_Config+0x15c>)
 8007722:	4313      	orrs	r3, r2
 8007724:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007726:	4b30      	ldr	r3, [pc, #192]	; (80077e8 <RCCEx_PLL3_Config+0x15c>)
 8007728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	695b      	ldr	r3, [r3, #20]
 8007732:	492d      	ldr	r1, [pc, #180]	; (80077e8 <RCCEx_PLL3_Config+0x15c>)
 8007734:	4313      	orrs	r3, r2
 8007736:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007738:	4b2b      	ldr	r3, [pc, #172]	; (80077e8 <RCCEx_PLL3_Config+0x15c>)
 800773a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	699b      	ldr	r3, [r3, #24]
 8007744:	4928      	ldr	r1, [pc, #160]	; (80077e8 <RCCEx_PLL3_Config+0x15c>)
 8007746:	4313      	orrs	r3, r2
 8007748:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800774a:	4b27      	ldr	r3, [pc, #156]	; (80077e8 <RCCEx_PLL3_Config+0x15c>)
 800774c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774e:	4a26      	ldr	r2, [pc, #152]	; (80077e8 <RCCEx_PLL3_Config+0x15c>)
 8007750:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007754:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007756:	4b24      	ldr	r3, [pc, #144]	; (80077e8 <RCCEx_PLL3_Config+0x15c>)
 8007758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800775a:	4b24      	ldr	r3, [pc, #144]	; (80077ec <RCCEx_PLL3_Config+0x160>)
 800775c:	4013      	ands	r3, r2
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	69d2      	ldr	r2, [r2, #28]
 8007762:	00d2      	lsls	r2, r2, #3
 8007764:	4920      	ldr	r1, [pc, #128]	; (80077e8 <RCCEx_PLL3_Config+0x15c>)
 8007766:	4313      	orrs	r3, r2
 8007768:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800776a:	4b1f      	ldr	r3, [pc, #124]	; (80077e8 <RCCEx_PLL3_Config+0x15c>)
 800776c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776e:	4a1e      	ldr	r2, [pc, #120]	; (80077e8 <RCCEx_PLL3_Config+0x15c>)
 8007770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007774:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d106      	bne.n	800778a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800777c:	4b1a      	ldr	r3, [pc, #104]	; (80077e8 <RCCEx_PLL3_Config+0x15c>)
 800777e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007780:	4a19      	ldr	r2, [pc, #100]	; (80077e8 <RCCEx_PLL3_Config+0x15c>)
 8007782:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007786:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007788:	e00f      	b.n	80077aa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	2b01      	cmp	r3, #1
 800778e:	d106      	bne.n	800779e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007790:	4b15      	ldr	r3, [pc, #84]	; (80077e8 <RCCEx_PLL3_Config+0x15c>)
 8007792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007794:	4a14      	ldr	r2, [pc, #80]	; (80077e8 <RCCEx_PLL3_Config+0x15c>)
 8007796:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800779a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800779c:	e005      	b.n	80077aa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800779e:	4b12      	ldr	r3, [pc, #72]	; (80077e8 <RCCEx_PLL3_Config+0x15c>)
 80077a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a2:	4a11      	ldr	r2, [pc, #68]	; (80077e8 <RCCEx_PLL3_Config+0x15c>)
 80077a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80077a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80077aa:	4b0f      	ldr	r3, [pc, #60]	; (80077e8 <RCCEx_PLL3_Config+0x15c>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a0e      	ldr	r2, [pc, #56]	; (80077e8 <RCCEx_PLL3_Config+0x15c>)
 80077b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077b6:	f7f9 fc8d 	bl	80010d4 <HAL_GetTick>
 80077ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80077bc:	e008      	b.n	80077d0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80077be:	f7f9 fc89 	bl	80010d4 <HAL_GetTick>
 80077c2:	4602      	mov	r2, r0
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	1ad3      	subs	r3, r2, r3
 80077c8:	2b02      	cmp	r3, #2
 80077ca:	d901      	bls.n	80077d0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80077cc:	2303      	movs	r3, #3
 80077ce:	e006      	b.n	80077de <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80077d0:	4b05      	ldr	r3, [pc, #20]	; (80077e8 <RCCEx_PLL3_Config+0x15c>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d0f0      	beq.n	80077be <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80077dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	58024400 	.word	0x58024400
 80077ec:	ffff0007 	.word	0xffff0007

080077f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d101      	bne.n	8007802 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e042      	b.n	8007888 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007808:	2b00      	cmp	r3, #0
 800780a:	d106      	bne.n	800781a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f7f9 faaf 	bl	8000d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2224      	movs	r2, #36	; 0x24
 800781e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f022 0201 	bic.w	r2, r2, #1
 8007830:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 f82c 	bl	8007890 <UART_SetConfig>
 8007838:	4603      	mov	r3, r0
 800783a:	2b01      	cmp	r3, #1
 800783c:	d101      	bne.n	8007842 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e022      	b.n	8007888 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007846:	2b00      	cmp	r3, #0
 8007848:	d002      	beq.n	8007850 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 fecc 	bl	80085e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	685a      	ldr	r2, [r3, #4]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800785e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	689a      	ldr	r2, [r3, #8]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800786e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f042 0201 	orr.w	r2, r2, #1
 800787e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 ff53 	bl	800872c <UART_CheckIdleState>
 8007886:	4603      	mov	r3, r0
}
 8007888:	4618      	mov	r0, r3
 800788a:	3708      	adds	r7, #8
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007890:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007894:	b08e      	sub	sp, #56	; 0x38
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800789a:	2300      	movs	r3, #0
 800789c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	689a      	ldr	r2, [r3, #8]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	431a      	orrs	r2, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	431a      	orrs	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	69db      	ldr	r3, [r3, #28]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078be:	4313      	orrs	r3, r2
 80078c0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	4bc1      	ldr	r3, [pc, #772]	; (8007bd0 <UART_SetConfig+0x340>)
 80078ca:	4013      	ands	r3, r2
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	6812      	ldr	r2, [r2, #0]
 80078d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80078d2:	430b      	orrs	r3, r1
 80078d4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	68da      	ldr	r2, [r3, #12]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	430a      	orrs	r2, r1
 80078ea:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4ab7      	ldr	r2, [pc, #732]	; (8007bd4 <UART_SetConfig+0x344>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d004      	beq.n	8007906 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6a1b      	ldr	r3, [r3, #32]
 8007900:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007902:	4313      	orrs	r3, r2
 8007904:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	689a      	ldr	r2, [r3, #8]
 800790c:	4bb2      	ldr	r3, [pc, #712]	; (8007bd8 <UART_SetConfig+0x348>)
 800790e:	4013      	ands	r3, r2
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	6812      	ldr	r2, [r2, #0]
 8007914:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007916:	430b      	orrs	r3, r1
 8007918:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007920:	f023 010f 	bic.w	r1, r3, #15
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	430a      	orrs	r2, r1
 800792e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4aa9      	ldr	r2, [pc, #676]	; (8007bdc <UART_SetConfig+0x34c>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d177      	bne.n	8007a2a <UART_SetConfig+0x19a>
 800793a:	4ba9      	ldr	r3, [pc, #676]	; (8007be0 <UART_SetConfig+0x350>)
 800793c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800793e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007942:	2b28      	cmp	r3, #40	; 0x28
 8007944:	d86c      	bhi.n	8007a20 <UART_SetConfig+0x190>
 8007946:	a201      	add	r2, pc, #4	; (adr r2, 800794c <UART_SetConfig+0xbc>)
 8007948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800794c:	080079f1 	.word	0x080079f1
 8007950:	08007a21 	.word	0x08007a21
 8007954:	08007a21 	.word	0x08007a21
 8007958:	08007a21 	.word	0x08007a21
 800795c:	08007a21 	.word	0x08007a21
 8007960:	08007a21 	.word	0x08007a21
 8007964:	08007a21 	.word	0x08007a21
 8007968:	08007a21 	.word	0x08007a21
 800796c:	080079f9 	.word	0x080079f9
 8007970:	08007a21 	.word	0x08007a21
 8007974:	08007a21 	.word	0x08007a21
 8007978:	08007a21 	.word	0x08007a21
 800797c:	08007a21 	.word	0x08007a21
 8007980:	08007a21 	.word	0x08007a21
 8007984:	08007a21 	.word	0x08007a21
 8007988:	08007a21 	.word	0x08007a21
 800798c:	08007a01 	.word	0x08007a01
 8007990:	08007a21 	.word	0x08007a21
 8007994:	08007a21 	.word	0x08007a21
 8007998:	08007a21 	.word	0x08007a21
 800799c:	08007a21 	.word	0x08007a21
 80079a0:	08007a21 	.word	0x08007a21
 80079a4:	08007a21 	.word	0x08007a21
 80079a8:	08007a21 	.word	0x08007a21
 80079ac:	08007a09 	.word	0x08007a09
 80079b0:	08007a21 	.word	0x08007a21
 80079b4:	08007a21 	.word	0x08007a21
 80079b8:	08007a21 	.word	0x08007a21
 80079bc:	08007a21 	.word	0x08007a21
 80079c0:	08007a21 	.word	0x08007a21
 80079c4:	08007a21 	.word	0x08007a21
 80079c8:	08007a21 	.word	0x08007a21
 80079cc:	08007a11 	.word	0x08007a11
 80079d0:	08007a21 	.word	0x08007a21
 80079d4:	08007a21 	.word	0x08007a21
 80079d8:	08007a21 	.word	0x08007a21
 80079dc:	08007a21 	.word	0x08007a21
 80079e0:	08007a21 	.word	0x08007a21
 80079e4:	08007a21 	.word	0x08007a21
 80079e8:	08007a21 	.word	0x08007a21
 80079ec:	08007a19 	.word	0x08007a19
 80079f0:	2301      	movs	r3, #1
 80079f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079f6:	e339      	b.n	800806c <UART_SetConfig+0x7dc>
 80079f8:	2304      	movs	r3, #4
 80079fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079fe:	e335      	b.n	800806c <UART_SetConfig+0x7dc>
 8007a00:	2308      	movs	r3, #8
 8007a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a06:	e331      	b.n	800806c <UART_SetConfig+0x7dc>
 8007a08:	2310      	movs	r3, #16
 8007a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a0e:	e32d      	b.n	800806c <UART_SetConfig+0x7dc>
 8007a10:	2320      	movs	r3, #32
 8007a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a16:	e329      	b.n	800806c <UART_SetConfig+0x7dc>
 8007a18:	2340      	movs	r3, #64	; 0x40
 8007a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a1e:	e325      	b.n	800806c <UART_SetConfig+0x7dc>
 8007a20:	2380      	movs	r3, #128	; 0x80
 8007a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a26:	bf00      	nop
 8007a28:	e320      	b.n	800806c <UART_SetConfig+0x7dc>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a6d      	ldr	r2, [pc, #436]	; (8007be4 <UART_SetConfig+0x354>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d132      	bne.n	8007a9a <UART_SetConfig+0x20a>
 8007a34:	4b6a      	ldr	r3, [pc, #424]	; (8007be0 <UART_SetConfig+0x350>)
 8007a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a38:	f003 0307 	and.w	r3, r3, #7
 8007a3c:	2b05      	cmp	r3, #5
 8007a3e:	d827      	bhi.n	8007a90 <UART_SetConfig+0x200>
 8007a40:	a201      	add	r2, pc, #4	; (adr r2, 8007a48 <UART_SetConfig+0x1b8>)
 8007a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a46:	bf00      	nop
 8007a48:	08007a61 	.word	0x08007a61
 8007a4c:	08007a69 	.word	0x08007a69
 8007a50:	08007a71 	.word	0x08007a71
 8007a54:	08007a79 	.word	0x08007a79
 8007a58:	08007a81 	.word	0x08007a81
 8007a5c:	08007a89 	.word	0x08007a89
 8007a60:	2300      	movs	r3, #0
 8007a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a66:	e301      	b.n	800806c <UART_SetConfig+0x7dc>
 8007a68:	2304      	movs	r3, #4
 8007a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a6e:	e2fd      	b.n	800806c <UART_SetConfig+0x7dc>
 8007a70:	2308      	movs	r3, #8
 8007a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a76:	e2f9      	b.n	800806c <UART_SetConfig+0x7dc>
 8007a78:	2310      	movs	r3, #16
 8007a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a7e:	e2f5      	b.n	800806c <UART_SetConfig+0x7dc>
 8007a80:	2320      	movs	r3, #32
 8007a82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a86:	e2f1      	b.n	800806c <UART_SetConfig+0x7dc>
 8007a88:	2340      	movs	r3, #64	; 0x40
 8007a8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a8e:	e2ed      	b.n	800806c <UART_SetConfig+0x7dc>
 8007a90:	2380      	movs	r3, #128	; 0x80
 8007a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a96:	bf00      	nop
 8007a98:	e2e8      	b.n	800806c <UART_SetConfig+0x7dc>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a52      	ldr	r2, [pc, #328]	; (8007be8 <UART_SetConfig+0x358>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d132      	bne.n	8007b0a <UART_SetConfig+0x27a>
 8007aa4:	4b4e      	ldr	r3, [pc, #312]	; (8007be0 <UART_SetConfig+0x350>)
 8007aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aa8:	f003 0307 	and.w	r3, r3, #7
 8007aac:	2b05      	cmp	r3, #5
 8007aae:	d827      	bhi.n	8007b00 <UART_SetConfig+0x270>
 8007ab0:	a201      	add	r2, pc, #4	; (adr r2, 8007ab8 <UART_SetConfig+0x228>)
 8007ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab6:	bf00      	nop
 8007ab8:	08007ad1 	.word	0x08007ad1
 8007abc:	08007ad9 	.word	0x08007ad9
 8007ac0:	08007ae1 	.word	0x08007ae1
 8007ac4:	08007ae9 	.word	0x08007ae9
 8007ac8:	08007af1 	.word	0x08007af1
 8007acc:	08007af9 	.word	0x08007af9
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ad6:	e2c9      	b.n	800806c <UART_SetConfig+0x7dc>
 8007ad8:	2304      	movs	r3, #4
 8007ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ade:	e2c5      	b.n	800806c <UART_SetConfig+0x7dc>
 8007ae0:	2308      	movs	r3, #8
 8007ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ae6:	e2c1      	b.n	800806c <UART_SetConfig+0x7dc>
 8007ae8:	2310      	movs	r3, #16
 8007aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007aee:	e2bd      	b.n	800806c <UART_SetConfig+0x7dc>
 8007af0:	2320      	movs	r3, #32
 8007af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007af6:	e2b9      	b.n	800806c <UART_SetConfig+0x7dc>
 8007af8:	2340      	movs	r3, #64	; 0x40
 8007afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007afe:	e2b5      	b.n	800806c <UART_SetConfig+0x7dc>
 8007b00:	2380      	movs	r3, #128	; 0x80
 8007b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b06:	bf00      	nop
 8007b08:	e2b0      	b.n	800806c <UART_SetConfig+0x7dc>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a37      	ldr	r2, [pc, #220]	; (8007bec <UART_SetConfig+0x35c>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d132      	bne.n	8007b7a <UART_SetConfig+0x2ea>
 8007b14:	4b32      	ldr	r3, [pc, #200]	; (8007be0 <UART_SetConfig+0x350>)
 8007b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b18:	f003 0307 	and.w	r3, r3, #7
 8007b1c:	2b05      	cmp	r3, #5
 8007b1e:	d827      	bhi.n	8007b70 <UART_SetConfig+0x2e0>
 8007b20:	a201      	add	r2, pc, #4	; (adr r2, 8007b28 <UART_SetConfig+0x298>)
 8007b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b26:	bf00      	nop
 8007b28:	08007b41 	.word	0x08007b41
 8007b2c:	08007b49 	.word	0x08007b49
 8007b30:	08007b51 	.word	0x08007b51
 8007b34:	08007b59 	.word	0x08007b59
 8007b38:	08007b61 	.word	0x08007b61
 8007b3c:	08007b69 	.word	0x08007b69
 8007b40:	2300      	movs	r3, #0
 8007b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b46:	e291      	b.n	800806c <UART_SetConfig+0x7dc>
 8007b48:	2304      	movs	r3, #4
 8007b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b4e:	e28d      	b.n	800806c <UART_SetConfig+0x7dc>
 8007b50:	2308      	movs	r3, #8
 8007b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b56:	e289      	b.n	800806c <UART_SetConfig+0x7dc>
 8007b58:	2310      	movs	r3, #16
 8007b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b5e:	e285      	b.n	800806c <UART_SetConfig+0x7dc>
 8007b60:	2320      	movs	r3, #32
 8007b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b66:	e281      	b.n	800806c <UART_SetConfig+0x7dc>
 8007b68:	2340      	movs	r3, #64	; 0x40
 8007b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b6e:	e27d      	b.n	800806c <UART_SetConfig+0x7dc>
 8007b70:	2380      	movs	r3, #128	; 0x80
 8007b72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007b76:	bf00      	nop
 8007b78:	e278      	b.n	800806c <UART_SetConfig+0x7dc>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a1c      	ldr	r2, [pc, #112]	; (8007bf0 <UART_SetConfig+0x360>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d144      	bne.n	8007c0e <UART_SetConfig+0x37e>
 8007b84:	4b16      	ldr	r3, [pc, #88]	; (8007be0 <UART_SetConfig+0x350>)
 8007b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b88:	f003 0307 	and.w	r3, r3, #7
 8007b8c:	2b05      	cmp	r3, #5
 8007b8e:	d839      	bhi.n	8007c04 <UART_SetConfig+0x374>
 8007b90:	a201      	add	r2, pc, #4	; (adr r2, 8007b98 <UART_SetConfig+0x308>)
 8007b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b96:	bf00      	nop
 8007b98:	08007bb1 	.word	0x08007bb1
 8007b9c:	08007bb9 	.word	0x08007bb9
 8007ba0:	08007bc1 	.word	0x08007bc1
 8007ba4:	08007bc9 	.word	0x08007bc9
 8007ba8:	08007bf5 	.word	0x08007bf5
 8007bac:	08007bfd 	.word	0x08007bfd
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bb6:	e259      	b.n	800806c <UART_SetConfig+0x7dc>
 8007bb8:	2304      	movs	r3, #4
 8007bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bbe:	e255      	b.n	800806c <UART_SetConfig+0x7dc>
 8007bc0:	2308      	movs	r3, #8
 8007bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bc6:	e251      	b.n	800806c <UART_SetConfig+0x7dc>
 8007bc8:	2310      	movs	r3, #16
 8007bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bce:	e24d      	b.n	800806c <UART_SetConfig+0x7dc>
 8007bd0:	cfff69f3 	.word	0xcfff69f3
 8007bd4:	58000c00 	.word	0x58000c00
 8007bd8:	11fff4ff 	.word	0x11fff4ff
 8007bdc:	40011000 	.word	0x40011000
 8007be0:	58024400 	.word	0x58024400
 8007be4:	40004400 	.word	0x40004400
 8007be8:	40004800 	.word	0x40004800
 8007bec:	40004c00 	.word	0x40004c00
 8007bf0:	40005000 	.word	0x40005000
 8007bf4:	2320      	movs	r3, #32
 8007bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bfa:	e237      	b.n	800806c <UART_SetConfig+0x7dc>
 8007bfc:	2340      	movs	r3, #64	; 0x40
 8007bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c02:	e233      	b.n	800806c <UART_SetConfig+0x7dc>
 8007c04:	2380      	movs	r3, #128	; 0x80
 8007c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c0a:	bf00      	nop
 8007c0c:	e22e      	b.n	800806c <UART_SetConfig+0x7dc>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4ab5      	ldr	r2, [pc, #724]	; (8007ee8 <UART_SetConfig+0x658>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d178      	bne.n	8007d0a <UART_SetConfig+0x47a>
 8007c18:	4bb4      	ldr	r3, [pc, #720]	; (8007eec <UART_SetConfig+0x65c>)
 8007c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c20:	2b28      	cmp	r3, #40	; 0x28
 8007c22:	d86d      	bhi.n	8007d00 <UART_SetConfig+0x470>
 8007c24:	a201      	add	r2, pc, #4	; (adr r2, 8007c2c <UART_SetConfig+0x39c>)
 8007c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c2a:	bf00      	nop
 8007c2c:	08007cd1 	.word	0x08007cd1
 8007c30:	08007d01 	.word	0x08007d01
 8007c34:	08007d01 	.word	0x08007d01
 8007c38:	08007d01 	.word	0x08007d01
 8007c3c:	08007d01 	.word	0x08007d01
 8007c40:	08007d01 	.word	0x08007d01
 8007c44:	08007d01 	.word	0x08007d01
 8007c48:	08007d01 	.word	0x08007d01
 8007c4c:	08007cd9 	.word	0x08007cd9
 8007c50:	08007d01 	.word	0x08007d01
 8007c54:	08007d01 	.word	0x08007d01
 8007c58:	08007d01 	.word	0x08007d01
 8007c5c:	08007d01 	.word	0x08007d01
 8007c60:	08007d01 	.word	0x08007d01
 8007c64:	08007d01 	.word	0x08007d01
 8007c68:	08007d01 	.word	0x08007d01
 8007c6c:	08007ce1 	.word	0x08007ce1
 8007c70:	08007d01 	.word	0x08007d01
 8007c74:	08007d01 	.word	0x08007d01
 8007c78:	08007d01 	.word	0x08007d01
 8007c7c:	08007d01 	.word	0x08007d01
 8007c80:	08007d01 	.word	0x08007d01
 8007c84:	08007d01 	.word	0x08007d01
 8007c88:	08007d01 	.word	0x08007d01
 8007c8c:	08007ce9 	.word	0x08007ce9
 8007c90:	08007d01 	.word	0x08007d01
 8007c94:	08007d01 	.word	0x08007d01
 8007c98:	08007d01 	.word	0x08007d01
 8007c9c:	08007d01 	.word	0x08007d01
 8007ca0:	08007d01 	.word	0x08007d01
 8007ca4:	08007d01 	.word	0x08007d01
 8007ca8:	08007d01 	.word	0x08007d01
 8007cac:	08007cf1 	.word	0x08007cf1
 8007cb0:	08007d01 	.word	0x08007d01
 8007cb4:	08007d01 	.word	0x08007d01
 8007cb8:	08007d01 	.word	0x08007d01
 8007cbc:	08007d01 	.word	0x08007d01
 8007cc0:	08007d01 	.word	0x08007d01
 8007cc4:	08007d01 	.word	0x08007d01
 8007cc8:	08007d01 	.word	0x08007d01
 8007ccc:	08007cf9 	.word	0x08007cf9
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cd6:	e1c9      	b.n	800806c <UART_SetConfig+0x7dc>
 8007cd8:	2304      	movs	r3, #4
 8007cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cde:	e1c5      	b.n	800806c <UART_SetConfig+0x7dc>
 8007ce0:	2308      	movs	r3, #8
 8007ce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ce6:	e1c1      	b.n	800806c <UART_SetConfig+0x7dc>
 8007ce8:	2310      	movs	r3, #16
 8007cea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cee:	e1bd      	b.n	800806c <UART_SetConfig+0x7dc>
 8007cf0:	2320      	movs	r3, #32
 8007cf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cf6:	e1b9      	b.n	800806c <UART_SetConfig+0x7dc>
 8007cf8:	2340      	movs	r3, #64	; 0x40
 8007cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cfe:	e1b5      	b.n	800806c <UART_SetConfig+0x7dc>
 8007d00:	2380      	movs	r3, #128	; 0x80
 8007d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d06:	bf00      	nop
 8007d08:	e1b0      	b.n	800806c <UART_SetConfig+0x7dc>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a78      	ldr	r2, [pc, #480]	; (8007ef0 <UART_SetConfig+0x660>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d132      	bne.n	8007d7a <UART_SetConfig+0x4ea>
 8007d14:	4b75      	ldr	r3, [pc, #468]	; (8007eec <UART_SetConfig+0x65c>)
 8007d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d18:	f003 0307 	and.w	r3, r3, #7
 8007d1c:	2b05      	cmp	r3, #5
 8007d1e:	d827      	bhi.n	8007d70 <UART_SetConfig+0x4e0>
 8007d20:	a201      	add	r2, pc, #4	; (adr r2, 8007d28 <UART_SetConfig+0x498>)
 8007d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d26:	bf00      	nop
 8007d28:	08007d41 	.word	0x08007d41
 8007d2c:	08007d49 	.word	0x08007d49
 8007d30:	08007d51 	.word	0x08007d51
 8007d34:	08007d59 	.word	0x08007d59
 8007d38:	08007d61 	.word	0x08007d61
 8007d3c:	08007d69 	.word	0x08007d69
 8007d40:	2300      	movs	r3, #0
 8007d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d46:	e191      	b.n	800806c <UART_SetConfig+0x7dc>
 8007d48:	2304      	movs	r3, #4
 8007d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d4e:	e18d      	b.n	800806c <UART_SetConfig+0x7dc>
 8007d50:	2308      	movs	r3, #8
 8007d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d56:	e189      	b.n	800806c <UART_SetConfig+0x7dc>
 8007d58:	2310      	movs	r3, #16
 8007d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d5e:	e185      	b.n	800806c <UART_SetConfig+0x7dc>
 8007d60:	2320      	movs	r3, #32
 8007d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d66:	e181      	b.n	800806c <UART_SetConfig+0x7dc>
 8007d68:	2340      	movs	r3, #64	; 0x40
 8007d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d6e:	e17d      	b.n	800806c <UART_SetConfig+0x7dc>
 8007d70:	2380      	movs	r3, #128	; 0x80
 8007d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007d76:	bf00      	nop
 8007d78:	e178      	b.n	800806c <UART_SetConfig+0x7dc>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a5d      	ldr	r2, [pc, #372]	; (8007ef4 <UART_SetConfig+0x664>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d132      	bne.n	8007dea <UART_SetConfig+0x55a>
 8007d84:	4b59      	ldr	r3, [pc, #356]	; (8007eec <UART_SetConfig+0x65c>)
 8007d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d88:	f003 0307 	and.w	r3, r3, #7
 8007d8c:	2b05      	cmp	r3, #5
 8007d8e:	d827      	bhi.n	8007de0 <UART_SetConfig+0x550>
 8007d90:	a201      	add	r2, pc, #4	; (adr r2, 8007d98 <UART_SetConfig+0x508>)
 8007d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d96:	bf00      	nop
 8007d98:	08007db1 	.word	0x08007db1
 8007d9c:	08007db9 	.word	0x08007db9
 8007da0:	08007dc1 	.word	0x08007dc1
 8007da4:	08007dc9 	.word	0x08007dc9
 8007da8:	08007dd1 	.word	0x08007dd1
 8007dac:	08007dd9 	.word	0x08007dd9
 8007db0:	2300      	movs	r3, #0
 8007db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007db6:	e159      	b.n	800806c <UART_SetConfig+0x7dc>
 8007db8:	2304      	movs	r3, #4
 8007dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dbe:	e155      	b.n	800806c <UART_SetConfig+0x7dc>
 8007dc0:	2308      	movs	r3, #8
 8007dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dc6:	e151      	b.n	800806c <UART_SetConfig+0x7dc>
 8007dc8:	2310      	movs	r3, #16
 8007dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dce:	e14d      	b.n	800806c <UART_SetConfig+0x7dc>
 8007dd0:	2320      	movs	r3, #32
 8007dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dd6:	e149      	b.n	800806c <UART_SetConfig+0x7dc>
 8007dd8:	2340      	movs	r3, #64	; 0x40
 8007dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dde:	e145      	b.n	800806c <UART_SetConfig+0x7dc>
 8007de0:	2380      	movs	r3, #128	; 0x80
 8007de2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007de6:	bf00      	nop
 8007de8:	e140      	b.n	800806c <UART_SetConfig+0x7dc>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a42      	ldr	r2, [pc, #264]	; (8007ef8 <UART_SetConfig+0x668>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	f040 8083 	bne.w	8007efc <UART_SetConfig+0x66c>
 8007df6:	4b3d      	ldr	r3, [pc, #244]	; (8007eec <UART_SetConfig+0x65c>)
 8007df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007dfe:	2b28      	cmp	r3, #40	; 0x28
 8007e00:	d86c      	bhi.n	8007edc <UART_SetConfig+0x64c>
 8007e02:	a201      	add	r2, pc, #4	; (adr r2, 8007e08 <UART_SetConfig+0x578>)
 8007e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e08:	08007ead 	.word	0x08007ead
 8007e0c:	08007edd 	.word	0x08007edd
 8007e10:	08007edd 	.word	0x08007edd
 8007e14:	08007edd 	.word	0x08007edd
 8007e18:	08007edd 	.word	0x08007edd
 8007e1c:	08007edd 	.word	0x08007edd
 8007e20:	08007edd 	.word	0x08007edd
 8007e24:	08007edd 	.word	0x08007edd
 8007e28:	08007eb5 	.word	0x08007eb5
 8007e2c:	08007edd 	.word	0x08007edd
 8007e30:	08007edd 	.word	0x08007edd
 8007e34:	08007edd 	.word	0x08007edd
 8007e38:	08007edd 	.word	0x08007edd
 8007e3c:	08007edd 	.word	0x08007edd
 8007e40:	08007edd 	.word	0x08007edd
 8007e44:	08007edd 	.word	0x08007edd
 8007e48:	08007ebd 	.word	0x08007ebd
 8007e4c:	08007edd 	.word	0x08007edd
 8007e50:	08007edd 	.word	0x08007edd
 8007e54:	08007edd 	.word	0x08007edd
 8007e58:	08007edd 	.word	0x08007edd
 8007e5c:	08007edd 	.word	0x08007edd
 8007e60:	08007edd 	.word	0x08007edd
 8007e64:	08007edd 	.word	0x08007edd
 8007e68:	08007ec5 	.word	0x08007ec5
 8007e6c:	08007edd 	.word	0x08007edd
 8007e70:	08007edd 	.word	0x08007edd
 8007e74:	08007edd 	.word	0x08007edd
 8007e78:	08007edd 	.word	0x08007edd
 8007e7c:	08007edd 	.word	0x08007edd
 8007e80:	08007edd 	.word	0x08007edd
 8007e84:	08007edd 	.word	0x08007edd
 8007e88:	08007ecd 	.word	0x08007ecd
 8007e8c:	08007edd 	.word	0x08007edd
 8007e90:	08007edd 	.word	0x08007edd
 8007e94:	08007edd 	.word	0x08007edd
 8007e98:	08007edd 	.word	0x08007edd
 8007e9c:	08007edd 	.word	0x08007edd
 8007ea0:	08007edd 	.word	0x08007edd
 8007ea4:	08007edd 	.word	0x08007edd
 8007ea8:	08007ed5 	.word	0x08007ed5
 8007eac:	2301      	movs	r3, #1
 8007eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eb2:	e0db      	b.n	800806c <UART_SetConfig+0x7dc>
 8007eb4:	2304      	movs	r3, #4
 8007eb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eba:	e0d7      	b.n	800806c <UART_SetConfig+0x7dc>
 8007ebc:	2308      	movs	r3, #8
 8007ebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ec2:	e0d3      	b.n	800806c <UART_SetConfig+0x7dc>
 8007ec4:	2310      	movs	r3, #16
 8007ec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eca:	e0cf      	b.n	800806c <UART_SetConfig+0x7dc>
 8007ecc:	2320      	movs	r3, #32
 8007ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ed2:	e0cb      	b.n	800806c <UART_SetConfig+0x7dc>
 8007ed4:	2340      	movs	r3, #64	; 0x40
 8007ed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eda:	e0c7      	b.n	800806c <UART_SetConfig+0x7dc>
 8007edc:	2380      	movs	r3, #128	; 0x80
 8007ede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ee2:	bf00      	nop
 8007ee4:	e0c2      	b.n	800806c <UART_SetConfig+0x7dc>
 8007ee6:	bf00      	nop
 8007ee8:	40011400 	.word	0x40011400
 8007eec:	58024400 	.word	0x58024400
 8007ef0:	40007800 	.word	0x40007800
 8007ef4:	40007c00 	.word	0x40007c00
 8007ef8:	40011800 	.word	0x40011800
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4ab2      	ldr	r2, [pc, #712]	; (80081cc <UART_SetConfig+0x93c>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d177      	bne.n	8007ff6 <UART_SetConfig+0x766>
 8007f06:	4bb2      	ldr	r3, [pc, #712]	; (80081d0 <UART_SetConfig+0x940>)
 8007f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f0e:	2b28      	cmp	r3, #40	; 0x28
 8007f10:	d86c      	bhi.n	8007fec <UART_SetConfig+0x75c>
 8007f12:	a201      	add	r2, pc, #4	; (adr r2, 8007f18 <UART_SetConfig+0x688>)
 8007f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f18:	08007fbd 	.word	0x08007fbd
 8007f1c:	08007fed 	.word	0x08007fed
 8007f20:	08007fed 	.word	0x08007fed
 8007f24:	08007fed 	.word	0x08007fed
 8007f28:	08007fed 	.word	0x08007fed
 8007f2c:	08007fed 	.word	0x08007fed
 8007f30:	08007fed 	.word	0x08007fed
 8007f34:	08007fed 	.word	0x08007fed
 8007f38:	08007fc5 	.word	0x08007fc5
 8007f3c:	08007fed 	.word	0x08007fed
 8007f40:	08007fed 	.word	0x08007fed
 8007f44:	08007fed 	.word	0x08007fed
 8007f48:	08007fed 	.word	0x08007fed
 8007f4c:	08007fed 	.word	0x08007fed
 8007f50:	08007fed 	.word	0x08007fed
 8007f54:	08007fed 	.word	0x08007fed
 8007f58:	08007fcd 	.word	0x08007fcd
 8007f5c:	08007fed 	.word	0x08007fed
 8007f60:	08007fed 	.word	0x08007fed
 8007f64:	08007fed 	.word	0x08007fed
 8007f68:	08007fed 	.word	0x08007fed
 8007f6c:	08007fed 	.word	0x08007fed
 8007f70:	08007fed 	.word	0x08007fed
 8007f74:	08007fed 	.word	0x08007fed
 8007f78:	08007fd5 	.word	0x08007fd5
 8007f7c:	08007fed 	.word	0x08007fed
 8007f80:	08007fed 	.word	0x08007fed
 8007f84:	08007fed 	.word	0x08007fed
 8007f88:	08007fed 	.word	0x08007fed
 8007f8c:	08007fed 	.word	0x08007fed
 8007f90:	08007fed 	.word	0x08007fed
 8007f94:	08007fed 	.word	0x08007fed
 8007f98:	08007fdd 	.word	0x08007fdd
 8007f9c:	08007fed 	.word	0x08007fed
 8007fa0:	08007fed 	.word	0x08007fed
 8007fa4:	08007fed 	.word	0x08007fed
 8007fa8:	08007fed 	.word	0x08007fed
 8007fac:	08007fed 	.word	0x08007fed
 8007fb0:	08007fed 	.word	0x08007fed
 8007fb4:	08007fed 	.word	0x08007fed
 8007fb8:	08007fe5 	.word	0x08007fe5
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fc2:	e053      	b.n	800806c <UART_SetConfig+0x7dc>
 8007fc4:	2304      	movs	r3, #4
 8007fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fca:	e04f      	b.n	800806c <UART_SetConfig+0x7dc>
 8007fcc:	2308      	movs	r3, #8
 8007fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fd2:	e04b      	b.n	800806c <UART_SetConfig+0x7dc>
 8007fd4:	2310      	movs	r3, #16
 8007fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fda:	e047      	b.n	800806c <UART_SetConfig+0x7dc>
 8007fdc:	2320      	movs	r3, #32
 8007fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fe2:	e043      	b.n	800806c <UART_SetConfig+0x7dc>
 8007fe4:	2340      	movs	r3, #64	; 0x40
 8007fe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fea:	e03f      	b.n	800806c <UART_SetConfig+0x7dc>
 8007fec:	2380      	movs	r3, #128	; 0x80
 8007fee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ff2:	bf00      	nop
 8007ff4:	e03a      	b.n	800806c <UART_SetConfig+0x7dc>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a76      	ldr	r2, [pc, #472]	; (80081d4 <UART_SetConfig+0x944>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d132      	bne.n	8008066 <UART_SetConfig+0x7d6>
 8008000:	4b73      	ldr	r3, [pc, #460]	; (80081d0 <UART_SetConfig+0x940>)
 8008002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008004:	f003 0307 	and.w	r3, r3, #7
 8008008:	2b05      	cmp	r3, #5
 800800a:	d827      	bhi.n	800805c <UART_SetConfig+0x7cc>
 800800c:	a201      	add	r2, pc, #4	; (adr r2, 8008014 <UART_SetConfig+0x784>)
 800800e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008012:	bf00      	nop
 8008014:	0800802d 	.word	0x0800802d
 8008018:	08008035 	.word	0x08008035
 800801c:	0800803d 	.word	0x0800803d
 8008020:	08008045 	.word	0x08008045
 8008024:	0800804d 	.word	0x0800804d
 8008028:	08008055 	.word	0x08008055
 800802c:	2302      	movs	r3, #2
 800802e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008032:	e01b      	b.n	800806c <UART_SetConfig+0x7dc>
 8008034:	2304      	movs	r3, #4
 8008036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800803a:	e017      	b.n	800806c <UART_SetConfig+0x7dc>
 800803c:	2308      	movs	r3, #8
 800803e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008042:	e013      	b.n	800806c <UART_SetConfig+0x7dc>
 8008044:	2310      	movs	r3, #16
 8008046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800804a:	e00f      	b.n	800806c <UART_SetConfig+0x7dc>
 800804c:	2320      	movs	r3, #32
 800804e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008052:	e00b      	b.n	800806c <UART_SetConfig+0x7dc>
 8008054:	2340      	movs	r3, #64	; 0x40
 8008056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800805a:	e007      	b.n	800806c <UART_SetConfig+0x7dc>
 800805c:	2380      	movs	r3, #128	; 0x80
 800805e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008062:	bf00      	nop
 8008064:	e002      	b.n	800806c <UART_SetConfig+0x7dc>
 8008066:	2380      	movs	r3, #128	; 0x80
 8008068:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a58      	ldr	r2, [pc, #352]	; (80081d4 <UART_SetConfig+0x944>)
 8008072:	4293      	cmp	r3, r2
 8008074:	f040 80b6 	bne.w	80081e4 <UART_SetConfig+0x954>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008078:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800807c:	2b08      	cmp	r3, #8
 800807e:	d019      	beq.n	80080b4 <UART_SetConfig+0x824>
 8008080:	2b08      	cmp	r3, #8
 8008082:	dc04      	bgt.n	800808e <UART_SetConfig+0x7fe>
 8008084:	2b02      	cmp	r3, #2
 8008086:	d009      	beq.n	800809c <UART_SetConfig+0x80c>
 8008088:	2b04      	cmp	r3, #4
 800808a:	d00b      	beq.n	80080a4 <UART_SetConfig+0x814>
 800808c:	e034      	b.n	80080f8 <UART_SetConfig+0x868>
 800808e:	2b20      	cmp	r3, #32
 8008090:	d02b      	beq.n	80080ea <UART_SetConfig+0x85a>
 8008092:	2b40      	cmp	r3, #64	; 0x40
 8008094:	d02c      	beq.n	80080f0 <UART_SetConfig+0x860>
 8008096:	2b10      	cmp	r3, #16
 8008098:	d014      	beq.n	80080c4 <UART_SetConfig+0x834>
 800809a:	e02d      	b.n	80080f8 <UART_SetConfig+0x868>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800809c:	f7fe fe4a 	bl	8006d34 <HAL_RCCEx_GetD3PCLK1Freq>
 80080a0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80080a2:	e02f      	b.n	8008104 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080a4:	f107 0314 	add.w	r3, r7, #20
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7fe fe59 	bl	8006d60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80080b2:	e027      	b.n	8008104 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080b4:	f107 0308 	add.w	r3, r7, #8
 80080b8:	4618      	mov	r0, r3
 80080ba:	f7fe ff9d 	bl	8006ff8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80080c2:	e01f      	b.n	8008104 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080c4:	4b42      	ldr	r3, [pc, #264]	; (80081d0 <UART_SetConfig+0x940>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 0320 	and.w	r3, r3, #32
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d009      	beq.n	80080e4 <UART_SetConfig+0x854>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80080d0:	4b3f      	ldr	r3, [pc, #252]	; (80081d0 <UART_SetConfig+0x940>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	08db      	lsrs	r3, r3, #3
 80080d6:	f003 0303 	and.w	r3, r3, #3
 80080da:	4a3f      	ldr	r2, [pc, #252]	; (80081d8 <UART_SetConfig+0x948>)
 80080dc:	fa22 f303 	lsr.w	r3, r2, r3
 80080e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80080e2:	e00f      	b.n	8008104 <UART_SetConfig+0x874>
          pclk = (uint32_t) HSI_VALUE;
 80080e4:	4b3c      	ldr	r3, [pc, #240]	; (80081d8 <UART_SetConfig+0x948>)
 80080e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80080e8:	e00c      	b.n	8008104 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80080ea:	4b3c      	ldr	r3, [pc, #240]	; (80081dc <UART_SetConfig+0x94c>)
 80080ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80080ee:	e009      	b.n	8008104 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80080f6:	e005      	b.n	8008104 <UART_SetConfig+0x874>
      default:
        pclk = 0U;
 80080f8:	2300      	movs	r3, #0
 80080fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008102:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008106:	2b00      	cmp	r3, #0
 8008108:	f000 8251 	beq.w	80085ae <UART_SetConfig+0xd1e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008110:	4a33      	ldr	r2, [pc, #204]	; (80081e0 <UART_SetConfig+0x950>)
 8008112:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008116:	461a      	mov	r2, r3
 8008118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800811a:	fbb3 f3f2 	udiv	r3, r3, r2
 800811e:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	685a      	ldr	r2, [r3, #4]
 8008124:	4613      	mov	r3, r2
 8008126:	005b      	lsls	r3, r3, #1
 8008128:	4413      	add	r3, r2
 800812a:	6a3a      	ldr	r2, [r7, #32]
 800812c:	429a      	cmp	r2, r3
 800812e:	d305      	bcc.n	800813c <UART_SetConfig+0x8ac>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008136:	6a3a      	ldr	r2, [r7, #32]
 8008138:	429a      	cmp	r2, r3
 800813a:	d903      	bls.n	8008144 <UART_SetConfig+0x8b4>
      {
        ret = HAL_ERROR;
 800813c:	2301      	movs	r3, #1
 800813e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008142:	e234      	b.n	80085ae <UART_SetConfig+0xd1e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008146:	4618      	mov	r0, r3
 8008148:	f04f 0100 	mov.w	r1, #0
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008150:	4a23      	ldr	r2, [pc, #140]	; (80081e0 <UART_SetConfig+0x950>)
 8008152:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008156:	b29b      	uxth	r3, r3
 8008158:	f04f 0400 	mov.w	r4, #0
 800815c:	461a      	mov	r2, r3
 800815e:	4623      	mov	r3, r4
 8008160:	f7f8 f8c4 	bl	80002ec <__aeabi_uldivmod>
 8008164:	4603      	mov	r3, r0
 8008166:	460c      	mov	r4, r1
 8008168:	4619      	mov	r1, r3
 800816a:	4622      	mov	r2, r4
 800816c:	f04f 0300 	mov.w	r3, #0
 8008170:	f04f 0400 	mov.w	r4, #0
 8008174:	0214      	lsls	r4, r2, #8
 8008176:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800817a:	020b      	lsls	r3, r1, #8
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	6852      	ldr	r2, [r2, #4]
 8008180:	0852      	lsrs	r2, r2, #1
 8008182:	4611      	mov	r1, r2
 8008184:	f04f 0200 	mov.w	r2, #0
 8008188:	eb13 0b01 	adds.w	fp, r3, r1
 800818c:	eb44 0c02 	adc.w	ip, r4, r2
 8008190:	4658      	mov	r0, fp
 8008192:	4661      	mov	r1, ip
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	f04f 0400 	mov.w	r4, #0
 800819c:	461a      	mov	r2, r3
 800819e:	4623      	mov	r3, r4
 80081a0:	f7f8 f8a4 	bl	80002ec <__aeabi_uldivmod>
 80081a4:	4603      	mov	r3, r0
 80081a6:	460c      	mov	r4, r1
 80081a8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80081aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081b0:	d308      	bcc.n	80081c4 <UART_SetConfig+0x934>
 80081b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081b8:	d204      	bcs.n	80081c4 <UART_SetConfig+0x934>
        {
          huart->Instance->BRR = usartdiv;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081c0:	60da      	str	r2, [r3, #12]
 80081c2:	e1f4      	b.n	80085ae <UART_SetConfig+0xd1e>
        }
        else
        {
          ret = HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80081ca:	e1f0      	b.n	80085ae <UART_SetConfig+0xd1e>
 80081cc:	40011c00 	.word	0x40011c00
 80081d0:	58024400 	.word	0x58024400
 80081d4:	58000c00 	.word	0x58000c00
 80081d8:	03d09000 	.word	0x03d09000
 80081dc:	003d0900 	.word	0x003d0900
 80081e0:	08008b90 	.word	0x08008b90
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	69db      	ldr	r3, [r3, #28]
 80081e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081ec:	f040 80f8 	bne.w	80083e0 <UART_SetConfig+0xb50>
  {
    switch (clocksource)
 80081f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80081f4:	2b40      	cmp	r3, #64	; 0x40
 80081f6:	f200 80b7 	bhi.w	8008368 <UART_SetConfig+0xad8>
 80081fa:	a201      	add	r2, pc, #4	; (adr r2, 8008200 <UART_SetConfig+0x970>)
 80081fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008200:	08008305 	.word	0x08008305
 8008204:	0800830d 	.word	0x0800830d
 8008208:	08008369 	.word	0x08008369
 800820c:	08008369 	.word	0x08008369
 8008210:	08008315 	.word	0x08008315
 8008214:	08008369 	.word	0x08008369
 8008218:	08008369 	.word	0x08008369
 800821c:	08008369 	.word	0x08008369
 8008220:	08008325 	.word	0x08008325
 8008224:	08008369 	.word	0x08008369
 8008228:	08008369 	.word	0x08008369
 800822c:	08008369 	.word	0x08008369
 8008230:	08008369 	.word	0x08008369
 8008234:	08008369 	.word	0x08008369
 8008238:	08008369 	.word	0x08008369
 800823c:	08008369 	.word	0x08008369
 8008240:	08008335 	.word	0x08008335
 8008244:	08008369 	.word	0x08008369
 8008248:	08008369 	.word	0x08008369
 800824c:	08008369 	.word	0x08008369
 8008250:	08008369 	.word	0x08008369
 8008254:	08008369 	.word	0x08008369
 8008258:	08008369 	.word	0x08008369
 800825c:	08008369 	.word	0x08008369
 8008260:	08008369 	.word	0x08008369
 8008264:	08008369 	.word	0x08008369
 8008268:	08008369 	.word	0x08008369
 800826c:	08008369 	.word	0x08008369
 8008270:	08008369 	.word	0x08008369
 8008274:	08008369 	.word	0x08008369
 8008278:	08008369 	.word	0x08008369
 800827c:	08008369 	.word	0x08008369
 8008280:	0800835b 	.word	0x0800835b
 8008284:	08008369 	.word	0x08008369
 8008288:	08008369 	.word	0x08008369
 800828c:	08008369 	.word	0x08008369
 8008290:	08008369 	.word	0x08008369
 8008294:	08008369 	.word	0x08008369
 8008298:	08008369 	.word	0x08008369
 800829c:	08008369 	.word	0x08008369
 80082a0:	08008369 	.word	0x08008369
 80082a4:	08008369 	.word	0x08008369
 80082a8:	08008369 	.word	0x08008369
 80082ac:	08008369 	.word	0x08008369
 80082b0:	08008369 	.word	0x08008369
 80082b4:	08008369 	.word	0x08008369
 80082b8:	08008369 	.word	0x08008369
 80082bc:	08008369 	.word	0x08008369
 80082c0:	08008369 	.word	0x08008369
 80082c4:	08008369 	.word	0x08008369
 80082c8:	08008369 	.word	0x08008369
 80082cc:	08008369 	.word	0x08008369
 80082d0:	08008369 	.word	0x08008369
 80082d4:	08008369 	.word	0x08008369
 80082d8:	08008369 	.word	0x08008369
 80082dc:	08008369 	.word	0x08008369
 80082e0:	08008369 	.word	0x08008369
 80082e4:	08008369 	.word	0x08008369
 80082e8:	08008369 	.word	0x08008369
 80082ec:	08008369 	.word	0x08008369
 80082f0:	08008369 	.word	0x08008369
 80082f4:	08008369 	.word	0x08008369
 80082f8:	08008369 	.word	0x08008369
 80082fc:	08008369 	.word	0x08008369
 8008300:	08008361 	.word	0x08008361
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008304:	f7fd fc10 	bl	8005b28 <HAL_RCC_GetPCLK1Freq>
 8008308:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800830a:	e033      	b.n	8008374 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800830c:	f7fd fc22 	bl	8005b54 <HAL_RCC_GetPCLK2Freq>
 8008310:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008312:	e02f      	b.n	8008374 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008314:	f107 0314 	add.w	r3, r7, #20
 8008318:	4618      	mov	r0, r3
 800831a:	f7fe fd21 	bl	8006d60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008322:	e027      	b.n	8008374 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008324:	f107 0308 	add.w	r3, r7, #8
 8008328:	4618      	mov	r0, r3
 800832a:	f7fe fe65 	bl	8006ff8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008332:	e01f      	b.n	8008374 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008334:	4ba8      	ldr	r3, [pc, #672]	; (80085d8 <UART_SetConfig+0xd48>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f003 0320 	and.w	r3, r3, #32
 800833c:	2b00      	cmp	r3, #0
 800833e:	d009      	beq.n	8008354 <UART_SetConfig+0xac4>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008340:	4ba5      	ldr	r3, [pc, #660]	; (80085d8 <UART_SetConfig+0xd48>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	08db      	lsrs	r3, r3, #3
 8008346:	f003 0303 	and.w	r3, r3, #3
 800834a:	4aa4      	ldr	r2, [pc, #656]	; (80085dc <UART_SetConfig+0xd4c>)
 800834c:	fa22 f303 	lsr.w	r3, r2, r3
 8008350:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008352:	e00f      	b.n	8008374 <UART_SetConfig+0xae4>
          pclk = (uint32_t) HSI_VALUE;
 8008354:	4ba1      	ldr	r3, [pc, #644]	; (80085dc <UART_SetConfig+0xd4c>)
 8008356:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008358:	e00c      	b.n	8008374 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800835a:	4ba1      	ldr	r3, [pc, #644]	; (80085e0 <UART_SetConfig+0xd50>)
 800835c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800835e:	e009      	b.n	8008374 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008360:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008364:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008366:	e005      	b.n	8008374 <UART_SetConfig+0xae4>
      default:
        pclk = 0U;
 8008368:	2300      	movs	r3, #0
 800836a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008372:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008376:	2b00      	cmp	r3, #0
 8008378:	f000 8119 	beq.w	80085ae <UART_SetConfig+0xd1e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008380:	4a98      	ldr	r2, [pc, #608]	; (80085e4 <UART_SetConfig+0xd54>)
 8008382:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008386:	461a      	mov	r2, r3
 8008388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800838a:	fbb3 f3f2 	udiv	r3, r3, r2
 800838e:	005a      	lsls	r2, r3, #1
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	085b      	lsrs	r3, r3, #1
 8008396:	441a      	add	r2, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	fbb2 f3f3 	udiv	r3, r2, r3
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a6:	2b0f      	cmp	r3, #15
 80083a8:	d916      	bls.n	80083d8 <UART_SetConfig+0xb48>
 80083aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083b0:	d212      	bcs.n	80083d8 <UART_SetConfig+0xb48>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80083b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	f023 030f 	bic.w	r3, r3, #15
 80083ba:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80083bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083be:	085b      	lsrs	r3, r3, #1
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	f003 0307 	and.w	r3, r3, #7
 80083c6:	b29a      	uxth	r2, r3
 80083c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80083ca:	4313      	orrs	r3, r2
 80083cc:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80083d4:	60da      	str	r2, [r3, #12]
 80083d6:	e0ea      	b.n	80085ae <UART_SetConfig+0xd1e>
      }
      else
      {
        ret = HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80083de:	e0e6      	b.n	80085ae <UART_SetConfig+0xd1e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80083e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80083e4:	2b40      	cmp	r3, #64	; 0x40
 80083e6:	f200 80b7 	bhi.w	8008558 <UART_SetConfig+0xcc8>
 80083ea:	a201      	add	r2, pc, #4	; (adr r2, 80083f0 <UART_SetConfig+0xb60>)
 80083ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f0:	080084f5 	.word	0x080084f5
 80083f4:	080084fd 	.word	0x080084fd
 80083f8:	08008559 	.word	0x08008559
 80083fc:	08008559 	.word	0x08008559
 8008400:	08008505 	.word	0x08008505
 8008404:	08008559 	.word	0x08008559
 8008408:	08008559 	.word	0x08008559
 800840c:	08008559 	.word	0x08008559
 8008410:	08008515 	.word	0x08008515
 8008414:	08008559 	.word	0x08008559
 8008418:	08008559 	.word	0x08008559
 800841c:	08008559 	.word	0x08008559
 8008420:	08008559 	.word	0x08008559
 8008424:	08008559 	.word	0x08008559
 8008428:	08008559 	.word	0x08008559
 800842c:	08008559 	.word	0x08008559
 8008430:	08008525 	.word	0x08008525
 8008434:	08008559 	.word	0x08008559
 8008438:	08008559 	.word	0x08008559
 800843c:	08008559 	.word	0x08008559
 8008440:	08008559 	.word	0x08008559
 8008444:	08008559 	.word	0x08008559
 8008448:	08008559 	.word	0x08008559
 800844c:	08008559 	.word	0x08008559
 8008450:	08008559 	.word	0x08008559
 8008454:	08008559 	.word	0x08008559
 8008458:	08008559 	.word	0x08008559
 800845c:	08008559 	.word	0x08008559
 8008460:	08008559 	.word	0x08008559
 8008464:	08008559 	.word	0x08008559
 8008468:	08008559 	.word	0x08008559
 800846c:	08008559 	.word	0x08008559
 8008470:	0800854b 	.word	0x0800854b
 8008474:	08008559 	.word	0x08008559
 8008478:	08008559 	.word	0x08008559
 800847c:	08008559 	.word	0x08008559
 8008480:	08008559 	.word	0x08008559
 8008484:	08008559 	.word	0x08008559
 8008488:	08008559 	.word	0x08008559
 800848c:	08008559 	.word	0x08008559
 8008490:	08008559 	.word	0x08008559
 8008494:	08008559 	.word	0x08008559
 8008498:	08008559 	.word	0x08008559
 800849c:	08008559 	.word	0x08008559
 80084a0:	08008559 	.word	0x08008559
 80084a4:	08008559 	.word	0x08008559
 80084a8:	08008559 	.word	0x08008559
 80084ac:	08008559 	.word	0x08008559
 80084b0:	08008559 	.word	0x08008559
 80084b4:	08008559 	.word	0x08008559
 80084b8:	08008559 	.word	0x08008559
 80084bc:	08008559 	.word	0x08008559
 80084c0:	08008559 	.word	0x08008559
 80084c4:	08008559 	.word	0x08008559
 80084c8:	08008559 	.word	0x08008559
 80084cc:	08008559 	.word	0x08008559
 80084d0:	08008559 	.word	0x08008559
 80084d4:	08008559 	.word	0x08008559
 80084d8:	08008559 	.word	0x08008559
 80084dc:	08008559 	.word	0x08008559
 80084e0:	08008559 	.word	0x08008559
 80084e4:	08008559 	.word	0x08008559
 80084e8:	08008559 	.word	0x08008559
 80084ec:	08008559 	.word	0x08008559
 80084f0:	08008551 	.word	0x08008551
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084f4:	f7fd fb18 	bl	8005b28 <HAL_RCC_GetPCLK1Freq>
 80084f8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80084fa:	e033      	b.n	8008564 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084fc:	f7fd fb2a 	bl	8005b54 <HAL_RCC_GetPCLK2Freq>
 8008500:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008502:	e02f      	b.n	8008564 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008504:	f107 0314 	add.w	r3, r7, #20
 8008508:	4618      	mov	r0, r3
 800850a:	f7fe fc29 	bl	8006d60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008512:	e027      	b.n	8008564 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008514:	f107 0308 	add.w	r3, r7, #8
 8008518:	4618      	mov	r0, r3
 800851a:	f7fe fd6d 	bl	8006ff8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008522:	e01f      	b.n	8008564 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008524:	4b2c      	ldr	r3, [pc, #176]	; (80085d8 <UART_SetConfig+0xd48>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f003 0320 	and.w	r3, r3, #32
 800852c:	2b00      	cmp	r3, #0
 800852e:	d009      	beq.n	8008544 <UART_SetConfig+0xcb4>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008530:	4b29      	ldr	r3, [pc, #164]	; (80085d8 <UART_SetConfig+0xd48>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	08db      	lsrs	r3, r3, #3
 8008536:	f003 0303 	and.w	r3, r3, #3
 800853a:	4a28      	ldr	r2, [pc, #160]	; (80085dc <UART_SetConfig+0xd4c>)
 800853c:	fa22 f303 	lsr.w	r3, r2, r3
 8008540:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008542:	e00f      	b.n	8008564 <UART_SetConfig+0xcd4>
          pclk = (uint32_t) HSI_VALUE;
 8008544:	4b25      	ldr	r3, [pc, #148]	; (80085dc <UART_SetConfig+0xd4c>)
 8008546:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008548:	e00c      	b.n	8008564 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800854a:	4b25      	ldr	r3, [pc, #148]	; (80085e0 <UART_SetConfig+0xd50>)
 800854c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800854e:	e009      	b.n	8008564 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008550:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008554:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008556:	e005      	b.n	8008564 <UART_SetConfig+0xcd4>
      default:
        pclk = 0U;
 8008558:	2300      	movs	r3, #0
 800855a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008562:	bf00      	nop
    }

    if (pclk != 0U)
 8008564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008566:	2b00      	cmp	r3, #0
 8008568:	d021      	beq.n	80085ae <UART_SetConfig+0xd1e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856e:	4a1d      	ldr	r2, [pc, #116]	; (80085e4 <UART_SetConfig+0xd54>)
 8008570:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008574:	461a      	mov	r2, r3
 8008576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008578:	fbb3 f2f2 	udiv	r2, r3, r2
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	085b      	lsrs	r3, r3, #1
 8008582:	441a      	add	r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	fbb2 f3f3 	udiv	r3, r2, r3
 800858c:	b29b      	uxth	r3, r3
 800858e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008592:	2b0f      	cmp	r3, #15
 8008594:	d908      	bls.n	80085a8 <UART_SetConfig+0xd18>
 8008596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800859c:	d204      	bcs.n	80085a8 <UART_SetConfig+0xd18>
      {
        huart->Instance->BRR = usartdiv;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085a4:	60da      	str	r2, [r3, #12]
 80085a6:	e002      	b.n	80085ae <UART_SetConfig+0xd1e>
      }
      else
      {
        ret = HAL_ERROR;
 80085a8:	2301      	movs	r3, #1
 80085aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2201      	movs	r2, #1
 80085b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2201      	movs	r2, #1
 80085ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80085ca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3738      	adds	r7, #56	; 0x38
 80085d2:	46bd      	mov	sp, r7
 80085d4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80085d8:	58024400 	.word	0x58024400
 80085dc:	03d09000 	.word	0x03d09000
 80085e0:	003d0900 	.word	0x003d0900
 80085e4:	08008b90 	.word	0x08008b90

080085e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f4:	f003 0301 	and.w	r3, r3, #1
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d00a      	beq.n	8008612 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	430a      	orrs	r2, r1
 8008610:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008616:	f003 0302 	and.w	r3, r3, #2
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00a      	beq.n	8008634 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	430a      	orrs	r2, r1
 8008632:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008638:	f003 0304 	and.w	r3, r3, #4
 800863c:	2b00      	cmp	r3, #0
 800863e:	d00a      	beq.n	8008656 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	430a      	orrs	r2, r1
 8008654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800865a:	f003 0308 	and.w	r3, r3, #8
 800865e:	2b00      	cmp	r3, #0
 8008660:	d00a      	beq.n	8008678 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	430a      	orrs	r2, r1
 8008676:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800867c:	f003 0310 	and.w	r3, r3, #16
 8008680:	2b00      	cmp	r3, #0
 8008682:	d00a      	beq.n	800869a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	430a      	orrs	r2, r1
 8008698:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800869e:	f003 0320 	and.w	r3, r3, #32
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00a      	beq.n	80086bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	430a      	orrs	r2, r1
 80086ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d01a      	beq.n	80086fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	430a      	orrs	r2, r1
 80086dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086e6:	d10a      	bne.n	80086fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	430a      	orrs	r2, r1
 80086fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008706:	2b00      	cmp	r3, #0
 8008708:	d00a      	beq.n	8008720 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	430a      	orrs	r2, r1
 800871e:	605a      	str	r2, [r3, #4]
  }
}
 8008720:	bf00      	nop
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b086      	sub	sp, #24
 8008730:	af02      	add	r7, sp, #8
 8008732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800873c:	f7f8 fcca 	bl	80010d4 <HAL_GetTick>
 8008740:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f003 0308 	and.w	r3, r3, #8
 800874c:	2b08      	cmp	r3, #8
 800874e:	d10e      	bne.n	800876e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008750:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008754:	9300      	str	r3, [sp, #0]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2200      	movs	r2, #0
 800875a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 f82c 	bl	80087bc <UART_WaitOnFlagUntilTimeout>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d001      	beq.n	800876e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800876a:	2303      	movs	r3, #3
 800876c:	e022      	b.n	80087b4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f003 0304 	and.w	r3, r3, #4
 8008778:	2b04      	cmp	r3, #4
 800877a:	d10e      	bne.n	800879a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800877c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008780:	9300      	str	r3, [sp, #0]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2200      	movs	r2, #0
 8008786:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 f816 	bl	80087bc <UART_WaitOnFlagUntilTimeout>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	d001      	beq.n	800879a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008796:	2303      	movs	r3, #3
 8008798:	e00c      	b.n	80087b4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2220      	movs	r2, #32
 800879e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2220      	movs	r2, #32
 80087a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80087b2:	2300      	movs	r3, #0
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3710      	adds	r7, #16
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	603b      	str	r3, [r7, #0]
 80087c8:	4613      	mov	r3, r2
 80087ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087cc:	e062      	b.n	8008894 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087d4:	d05e      	beq.n	8008894 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087d6:	f7f8 fc7d 	bl	80010d4 <HAL_GetTick>
 80087da:	4602      	mov	r2, r0
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	1ad3      	subs	r3, r2, r3
 80087e0:	69ba      	ldr	r2, [r7, #24]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d302      	bcc.n	80087ec <UART_WaitOnFlagUntilTimeout+0x30>
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d11d      	bne.n	8008828 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80087fa:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	689a      	ldr	r2, [r3, #8]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f022 0201 	bic.w	r2, r2, #1
 800880a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2220      	movs	r2, #32
 8008810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2220      	movs	r2, #32
 8008818:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2200      	movs	r2, #0
 8008820:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008824:	2303      	movs	r3, #3
 8008826:	e045      	b.n	80088b4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f003 0304 	and.w	r3, r3, #4
 8008832:	2b00      	cmp	r3, #0
 8008834:	d02e      	beq.n	8008894 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	69db      	ldr	r3, [r3, #28]
 800883c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008844:	d126      	bne.n	8008894 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800884e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800885e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	689a      	ldr	r2, [r3, #8]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f022 0201 	bic.w	r2, r2, #1
 800886e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2220      	movs	r2, #32
 8008874:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2220      	movs	r2, #32
 800887c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2220      	movs	r2, #32
 8008884:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2200      	movs	r2, #0
 800888c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8008890:	2303      	movs	r3, #3
 8008892:	e00f      	b.n	80088b4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	69da      	ldr	r2, [r3, #28]
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	4013      	ands	r3, r2
 800889e:	68ba      	ldr	r2, [r7, #8]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	bf0c      	ite	eq
 80088a4:	2301      	moveq	r3, #1
 80088a6:	2300      	movne	r3, #0
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	461a      	mov	r2, r3
 80088ac:	79fb      	ldrb	r3, [r7, #7]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d08d      	beq.n	80087ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3710      	adds	r7, #16
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80088bc:	b480      	push	{r7}
 80088be:	b085      	sub	sp, #20
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d101      	bne.n	80088d2 <HAL_UARTEx_DisableFifoMode+0x16>
 80088ce:	2302      	movs	r3, #2
 80088d0:	e027      	b.n	8008922 <HAL_UARTEx_DisableFifoMode+0x66>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2201      	movs	r2, #1
 80088d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2224      	movs	r2, #36	; 0x24
 80088de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f022 0201 	bic.w	r2, r2, #1
 80088f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008900:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	68fa      	ldr	r2, [r7, #12]
 800890e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2220      	movs	r2, #32
 8008914:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008920:	2300      	movs	r3, #0
}
 8008922:	4618      	mov	r0, r3
 8008924:	3714      	adds	r7, #20
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr

0800892e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800892e:	b580      	push	{r7, lr}
 8008930:	b084      	sub	sp, #16
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
 8008936:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800893e:	2b01      	cmp	r3, #1
 8008940:	d101      	bne.n	8008946 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008942:	2302      	movs	r3, #2
 8008944:	e02d      	b.n	80089a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2224      	movs	r2, #36	; 0x24
 8008952:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f022 0201 	bic.w	r2, r2, #1
 800896c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	683a      	ldr	r2, [r7, #0]
 800897e:	430a      	orrs	r2, r1
 8008980:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 f850 	bl	8008a28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2220      	movs	r2, #32
 8008994:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80089a0:	2300      	movs	r3, #0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b084      	sub	sp, #16
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
 80089b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d101      	bne.n	80089c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80089be:	2302      	movs	r3, #2
 80089c0:	e02d      	b.n	8008a1e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2201      	movs	r2, #1
 80089c6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2224      	movs	r2, #36	; 0x24
 80089ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f022 0201 	bic.w	r2, r2, #1
 80089e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	683a      	ldr	r2, [r7, #0]
 80089fa:	430a      	orrs	r2, r1
 80089fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 f812 	bl	8008a28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	68fa      	ldr	r2, [r7, #12]
 8008a0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2220      	movs	r2, #32
 8008a10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008a1c:	2300      	movs	r3, #0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3710      	adds	r7, #16
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
	...

08008a28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b089      	sub	sp, #36	; 0x24
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008a30:	4a2f      	ldr	r2, [pc, #188]	; (8008af0 <UARTEx_SetNbDataToProcess+0xc8>)
 8008a32:	f107 0314 	add.w	r3, r7, #20
 8008a36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008a3a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008a3e:	4a2d      	ldr	r2, [pc, #180]	; (8008af4 <UARTEx_SetNbDataToProcess+0xcc>)
 8008a40:	f107 030c 	add.w	r3, r7, #12
 8008a44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008a48:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d108      	bne.n	8008a66 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008a64:	e03d      	b.n	8008ae2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008a66:	2310      	movs	r3, #16
 8008a68:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008a6a:	2310      	movs	r3, #16
 8008a6c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	0e5b      	lsrs	r3, r3, #25
 8008a76:	b2db      	uxtb	r3, r3
 8008a78:	f003 0307 	and.w	r3, r3, #7
 8008a7c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	0f5b      	lsrs	r3, r3, #29
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	f003 0307 	and.w	r3, r3, #7
 8008a8c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008a8e:	7fbb      	ldrb	r3, [r7, #30]
 8008a90:	7f3a      	ldrb	r2, [r7, #28]
 8008a92:	f107 0120 	add.w	r1, r7, #32
 8008a96:	440a      	add	r2, r1
 8008a98:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008a9c:	fb02 f303 	mul.w	r3, r2, r3
 8008aa0:	7f3a      	ldrb	r2, [r7, #28]
 8008aa2:	f107 0120 	add.w	r1, r7, #32
 8008aa6:	440a      	add	r2, r1
 8008aa8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008aac:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ab0:	b29a      	uxth	r2, r3
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008ab8:	7ffb      	ldrb	r3, [r7, #31]
 8008aba:	7f7a      	ldrb	r2, [r7, #29]
 8008abc:	f107 0120 	add.w	r1, r7, #32
 8008ac0:	440a      	add	r2, r1
 8008ac2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008ac6:	fb02 f303 	mul.w	r3, r2, r3
 8008aca:	7f7a      	ldrb	r2, [r7, #29]
 8008acc:	f107 0120 	add.w	r1, r7, #32
 8008ad0:	440a      	add	r2, r1
 8008ad2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008ad6:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ada:	b29a      	uxth	r2, r3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008ae2:	bf00      	nop
 8008ae4:	3724      	adds	r7, #36	; 0x24
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	08008b68 	.word	0x08008b68
 8008af4:	08008b70 	.word	0x08008b70

08008af8 <__libc_init_array>:
 8008af8:	b570      	push	{r4, r5, r6, lr}
 8008afa:	4e0d      	ldr	r6, [pc, #52]	; (8008b30 <__libc_init_array+0x38>)
 8008afc:	4c0d      	ldr	r4, [pc, #52]	; (8008b34 <__libc_init_array+0x3c>)
 8008afe:	1ba4      	subs	r4, r4, r6
 8008b00:	10a4      	asrs	r4, r4, #2
 8008b02:	2500      	movs	r5, #0
 8008b04:	42a5      	cmp	r5, r4
 8008b06:	d109      	bne.n	8008b1c <__libc_init_array+0x24>
 8008b08:	4e0b      	ldr	r6, [pc, #44]	; (8008b38 <__libc_init_array+0x40>)
 8008b0a:	4c0c      	ldr	r4, [pc, #48]	; (8008b3c <__libc_init_array+0x44>)
 8008b0c:	f000 f820 	bl	8008b50 <_init>
 8008b10:	1ba4      	subs	r4, r4, r6
 8008b12:	10a4      	asrs	r4, r4, #2
 8008b14:	2500      	movs	r5, #0
 8008b16:	42a5      	cmp	r5, r4
 8008b18:	d105      	bne.n	8008b26 <__libc_init_array+0x2e>
 8008b1a:	bd70      	pop	{r4, r5, r6, pc}
 8008b1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008b20:	4798      	blx	r3
 8008b22:	3501      	adds	r5, #1
 8008b24:	e7ee      	b.n	8008b04 <__libc_init_array+0xc>
 8008b26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008b2a:	4798      	blx	r3
 8008b2c:	3501      	adds	r5, #1
 8008b2e:	e7f2      	b.n	8008b16 <__libc_init_array+0x1e>
 8008b30:	08008bb0 	.word	0x08008bb0
 8008b34:	08008bb0 	.word	0x08008bb0
 8008b38:	08008bb0 	.word	0x08008bb0
 8008b3c:	08008bb4 	.word	0x08008bb4

08008b40 <memset>:
 8008b40:	4402      	add	r2, r0
 8008b42:	4603      	mov	r3, r0
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d100      	bne.n	8008b4a <memset+0xa>
 8008b48:	4770      	bx	lr
 8008b4a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b4e:	e7f9      	b.n	8008b44 <memset+0x4>

08008b50 <_init>:
 8008b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b52:	bf00      	nop
 8008b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b56:	bc08      	pop	{r3}
 8008b58:	469e      	mov	lr, r3
 8008b5a:	4770      	bx	lr

08008b5c <_fini>:
 8008b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b5e:	bf00      	nop
 8008b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b62:	bc08      	pop	{r3}
 8008b64:	469e      	mov	lr, r3
 8008b66:	4770      	bx	lr
