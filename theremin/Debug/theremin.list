
theremin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a954  080002b0  080002b0  000102b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008ec  0800ac04  0800ac04  0001ac04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4f0  0800b4f0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4f0  0800b4f0  0001b4f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4f8  0800b4f8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4f8  0800b4f8  0001b4f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4fc  0800b4fc  0001b4fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  24000000  0800b500  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  2400007c  0800b57c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240003e8  0800b57c  000203e8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025c70  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c2f  00000000  00000000  00045d1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001740  00000000  00000000  00049950  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015c8  00000000  00000000  0004b090  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00033d71  00000000  00000000  0004c658  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015460  00000000  00000000  000803c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0015632b  00000000  00000000  00095829  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ebb54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a10  00000000  00000000  001ebbd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	2400007c 	.word	0x2400007c
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800abec 	.word	0x0800abec

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000080 	.word	0x24000080
 80002ec:	0800abec 	.word	0x0800abec

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	; 0x50
 80005f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f001 faab 	bl	8001b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f8cf 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 fbe9 	bl	8000dd4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000602:	f000 fbaf 	bl	8000d64 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000606:	f000 fb59 	bl	8000cbc <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800060a:	f000 fba3 	bl	8000d54 <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 800060e:	f000 f995 	bl	800093c <MX_ADC1_Init>
  MX_DAC1_Init();
 8000612:	f000 fa0d 	bl	8000a30 <MX_DAC1_Init>
  MX_TIM6_Init();
 8000616:	f000 fae5 	bl	8000be4 <MX_TIM6_Init>
  MX_TIM2_Init();
 800061a:	f000 fa3b 	bl	8000a94 <MX_TIM2_Init>
  MX_TIM7_Init();
 800061e:	f000 fb17 	bl	8000c50 <MX_TIM7_Init>
  MX_TIM5_Init();
 8000622:	f000 fa8b 	bl	8000b3c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize NCO structure to create sine waves */
  s_ref = init_nco(1. / 100., 0);
 8000626:	eddf 0a4d 	vldr	s1, [pc, #308]	; 800075c <main+0x16c>
 800062a:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8000760 <main+0x170>
 800062e:	f000 fd7f 	bl	8001130 <init_nco>
 8000632:	63b8      	str	r0, [r7, #56]	; 0x38
  sin_buffer = calloc(BLOCKSIZE, sizeof(uint16_t));
 8000634:	2102      	movs	r1, #2
 8000636:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800063a:	f009 fe0b 	bl	800a254 <calloc>
 800063e:	4603      	mov	r3, r0
 8000640:	637b      	str	r3, [r7, #52]	; 0x34

  if ((sin_buffer == NULL)) {
 8000642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000644:	2b00      	cmp	r3, #0
 8000646:	d105      	bne.n	8000654 <main+0x64>
	  printf("Failed to allocate memory for arrays\n");
 8000648:	4846      	ldr	r0, [pc, #280]	; (8000764 <main+0x174>)
 800064a:	f009 ff6b 	bl	800a524 <puts>
	  exit(EXIT_FAILURE);
 800064e:	2001      	movs	r0, #1
 8000650:	f009 fe0e 	bl	800a270 <exit>
  }

  /* Start TIM6 and DAC with DMA */
  HAL_TIM_Base_Start(&htim6);
 8000654:	4844      	ldr	r0, [pc, #272]	; (8000768 <main+0x178>)
 8000656:	f008 f801 	bl	800865c <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800065a:	2100      	movs	r1, #0
 800065c:	4843      	ldr	r0, [pc, #268]	; (800076c <main+0x17c>)
 800065e:	f002 fb68 	bl	8002d32 <HAL_DAC_Start>

  set_blocksize(BLOCKSIZE);
 8000662:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000666:	f000 fe61 	bl	800132c <set_blocksize>
  dac_buff = (uint16_t *) malloc(sizeof(uint16_t)*BLOCKSIZE*2);
 800066a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800066e:	f009 fe37 	bl	800a2e0 <malloc>
 8000672:	4603      	mov	r3, r0
 8000674:	461a      	mov	r2, r3
 8000676:	4b3e      	ldr	r3, [pc, #248]	; (8000770 <main+0x180>)
 8000678:	601a      	str	r2, [r3, #0]

  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)dac_buff, 2*BLOCKSIZE, DAC_ALIGN_12B_R);
 800067a:	4b3d      	ldr	r3, [pc, #244]	; (8000770 <main+0x180>)
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	2300      	movs	r3, #0
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000686:	2100      	movs	r1, #0
 8000688:	4838      	ldr	r0, [pc, #224]	; (800076c <main+0x17c>)
 800068a:	f002 fba5 	bl	8002dd8 <HAL_DAC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  /* Timer to update and change frequencies with */
  HAL_TIM_Base_Start_IT(&htim7);
 800068e:	4839      	ldr	r0, [pc, #228]	; (8000774 <main+0x184>)
 8000690:	f008 f812 	bl	80086b8 <HAL_TIM_Base_Start_IT>

  /* Timers to count up input pulses */
  HAL_TIM_Base_Start(&htim2);
 8000694:	4838      	ldr	r0, [pc, #224]	; (8000778 <main+0x188>)
 8000696:	f007 ffe1 	bl	800865c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim5);
 800069a:	4838      	ldr	r0, [pc, #224]	; (800077c <main+0x18c>)
 800069c:	f007 ffde 	bl	800865c <HAL_TIM_Base_Start>
  i = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	647b      	str	r3, [r7, #68]	; 0x44

  while (1)
  {

	  /* Trigger every MILLISECONDS ms */
	  if (update_freq_flag) {
 80006a4:	4b36      	ldr	r3, [pc, #216]	; (8000780 <main+0x190>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d04b      	beq.n	8000746 <main+0x156>

//		  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);

		  /* Calculate the frequency to oscillate at */
		  freq = (int)((freq_timer_count * 1000 - REF_OSC_FREQ));
 80006ae:	4b35      	ldr	r3, [pc, #212]	; (8000784 <main+0x194>)
 80006b0:	edd3 7a00 	vldr	s15, [r3]
 80006b4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8000788 <main+0x198>
 80006b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006bc:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800078c <main+0x19c>
 80006c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80006c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006c8:	ee17 3a90 	vmov	r3, s15
 80006cc:	643b      	str	r3, [r7, #64]	; 0x40

		  /* Calculate the volume level */
		  vol = (int)((vol_timer_count * 1000 - /*REF_VOL_FREQ*/ 260000UL)) ;
 80006ce:	4b30      	ldr	r3, [pc, #192]	; (8000790 <main+0x1a0>)
 80006d0:	edd3 7a00 	vldr	s15, [r3]
 80006d4:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8000788 <main+0x198>
 80006d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006dc:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8000794 <main+0x1a4>
 80006e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80006e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006e8:	ee17 3a90 	vmov	r3, s15
 80006ec:	63fb      	str	r3, [r7, #60]	; 0x3c

		  /* Take the absolute value of the difference */
		  if (freq < 0)
 80006ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	da02      	bge.n	80006fa <main+0x10a>
			  freq = -freq;
 80006f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006f6:	425b      	negs	r3, r3
 80006f8:	643b      	str	r3, [r7, #64]	; 0x40
		  if (vol < 0)
 80006fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	da02      	bge.n	8000706 <main+0x116>
			  vol = -vol;
 8000700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000702:	425b      	negs	r3, r3
 8000704:	63fb      	str	r3, [r7, #60]	; 0x3c

		  if (freq > 5000)
 8000706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000708:	f241 3288 	movw	r2, #5000	; 0x1388
 800070c:	4293      	cmp	r3, r2
 800070e:	dd02      	ble.n	8000716 <main+0x126>
			  freq = 5000;
 8000710:	f241 3388 	movw	r3, #5000	; 0x1388
 8000714:	643b      	str	r3, [r7, #64]	; 0x40
		  /* Inform serial bus of the current output frequency */
//		  uart_buf_len = sprintf(uart_buf, "%dHz\r\n", (int)(freq));
//		  HAL_UART_Transmit(&huart3, uart_buf, uart_buf_len, 100);

		  /* Generate sine wave at desired frequency and amplitude */
		  nco_set_frequency(s_ref, (float)freq / 50000.);
 8000716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000718:	ee07 3a90 	vmov	s15, r3
 800071c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000720:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000798 <main+0x1a8>
 8000724:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000728:	eeb0 0a66 	vmov.f32	s0, s13
 800072c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800072e:	f000 fda9 	bl	8001284 <nco_set_frequency>
		  nco_set_amplitude(s_ref, vol);
 8000732:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000734:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000736:	f000 fdc1 	bl	80012bc <nco_set_amplitude>

		  update_freq_flag = 0;
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <main+0x190>)
 800073c:	2200      	movs	r2, #0
 800073e:	701a      	strb	r2, [r3, #0]
		  i++;
 8000740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000742:	3301      	adds	r3, #1
 8000744:	647b      	str	r3, [r7, #68]	; 0x44
	  }
//	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);

	  /* Get DAC output samples */
//	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
	  nco_get_samples(s_ref, sin_buffer, BLOCKSIZE);
 8000746:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800074a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800074c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800074e:	f000 fd3b 	bl	80011c8 <nco_get_samples>
//	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);

	  /* Output result to DAC */
	  set_dac_buff(sin_buffer);
 8000752:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000754:	f000 fe00 	bl	8001358 <set_dac_buff>
	  if (update_freq_flag) {
 8000758:	e7a4      	b.n	80006a4 <main+0xb4>
 800075a:	bf00      	nop
 800075c:	00000000 	.word	0x00000000
 8000760:	3c23d70a 	.word	0x3c23d70a
 8000764:	0800ac04 	.word	0x0800ac04
 8000768:	240002f8 	.word	0x240002f8
 800076c:	240000b8 	.word	0x240000b8
 8000770:	240000a4 	.word	0x240000a4
 8000774:	24000390 	.word	0x24000390
 8000778:	24000344 	.word	0x24000344
 800077c:	240001d0 	.word	0x240001d0
 8000780:	240003dc 	.word	0x240003dc
 8000784:	24000098 	.word	0x24000098
 8000788:	447a0000 	.word	0x447a0000
 800078c:	48751e00 	.word	0x48751e00
 8000790:	2400009c 	.word	0x2400009c
 8000794:	487de800 	.word	0x487de800
 8000798:	47435000 	.word	0x47435000

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b0ca      	sub	sp, #296	; 0x128
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80007a6:	224c      	movs	r2, #76	; 0x4c
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f009 fda0 	bl	800a2f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80007b4:	2220      	movs	r2, #32
 80007b6:	2100      	movs	r1, #0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f009 fd99 	bl	800a2f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	4618      	mov	r0, r3
 80007c2:	23b8      	movs	r3, #184	; 0xb8
 80007c4:	461a      	mov	r2, r3
 80007c6:	2100      	movs	r1, #0
 80007c8:	f009 fd92 	bl	800a2f0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007cc:	2004      	movs	r0, #4
 80007ce:	f005 f8ef 	bl	80059b0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007d2:	463b      	mov	r3, r7
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	4b55      	ldr	r3, [pc, #340]	; (8000930 <SystemClock_Config+0x194>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	4a54      	ldr	r2, [pc, #336]	; (8000930 <SystemClock_Config+0x194>)
 80007de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007e2:	6193      	str	r3, [r2, #24]
 80007e4:	4b52      	ldr	r3, [pc, #328]	; (8000930 <SystemClock_Config+0x194>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80007ec:	463b      	mov	r3, r7
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	463b      	mov	r3, r7
 80007f2:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007f4:	bf00      	nop
 80007f6:	4b4e      	ldr	r3, [pc, #312]	; (8000930 <SystemClock_Config+0x194>)
 80007f8:	699b      	ldr	r3, [r3, #24]
 80007fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000802:	d1f8      	bne.n	80007f6 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000804:	4b4b      	ldr	r3, [pc, #300]	; (8000934 <SystemClock_Config+0x198>)
 8000806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000808:	f023 0303 	bic.w	r3, r3, #3
 800080c:	4a49      	ldr	r2, [pc, #292]	; (8000934 <SystemClock_Config+0x198>)
 800080e:	f043 0302 	orr.w	r3, r3, #2
 8000812:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8000814:	2329      	movs	r3, #41	; 0x29
 8000816:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800081a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800081e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000822:	2301      	movs	r3, #1
 8000824:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000828:	2301      	movs	r3, #1
 800082a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082e:	2302      	movs	r3, #2
 8000830:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000834:	2302      	movs	r3, #2
 8000836:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  RCC_OscInitStruct.PLL.PLLM = 1;
 800083a:	2301      	movs	r3, #1
 800083c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000840:	2318      	movs	r3, #24
 8000842:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000846:	2302      	movs	r3, #2
 8000848:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800084c:	2304      	movs	r3, #4
 800084e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000852:	2302      	movs	r3, #2
 8000854:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000858:	230c      	movs	r3, #12
 800085a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800085e:	2300      	movs	r3, #0
 8000860:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800086e:	4618      	mov	r0, r3
 8000870:	f005 f8f8 	bl	8005a64 <HAL_RCC_OscConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800087a:	f000 fc4f 	bl	800111c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087e:	233f      	movs	r3, #63	; 0x3f
 8000880:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000884:	2303      	movs	r3, #3
 8000886:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000896:	2300      	movs	r3, #0
 8000898:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008a2:	2300      	movs	r3, #0
 80008a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008a8:	2300      	movs	r3, #0
 80008aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008ae:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80008b2:	2102      	movs	r1, #2
 80008b4:	4618      	mov	r0, r3
 80008b6:	f005 fcbd 	bl	8006234 <HAL_RCC_ClockConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0x128>
  {
    Error_Handler();
 80008c0:	f000 fc2c 	bl	800111c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_ADC
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	4a1c      	ldr	r2, [pc, #112]	; (8000938 <SystemClock_Config+0x19c>)
 80008c8:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2201      	movs	r2, #1
 80008ce:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2210      	movs	r2, #16
 80008d4:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	2202      	movs	r2, #2
 80008da:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	2202      	movs	r2, #2
 80008e0:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	2202      	movs	r2, #2
 80008e6:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	22c0      	movs	r2, #192	; 0xc0
 80008ec:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	2200      	movs	r2, #0
 80008f2:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	2200      	movs	r2, #0
 80008f8:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	2200      	movs	r2, #0
 80008fe:	67da      	str	r2, [r3, #124]	; 0x7c
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000906:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2200      	movs	r2, #0
 800090e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	4618      	mov	r0, r3
 8000916:	f006 f811 	bl	800693c <HAL_RCCEx_PeriphCLKConfig>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <SystemClock_Config+0x188>
  {
    Error_Handler();
 8000920:	f000 fbfc 	bl	800111c <Error_Handler>
  }
}
 8000924:	bf00      	nop
 8000926:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	58024800 	.word	0x58024800
 8000934:	58024400 	.word	0x58024400
 8000938:	000c0002 	.word	0x000c0002

0800093c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	; 0x28
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800094e:	463b      	mov	r3, r7
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
 800095c:	615a      	str	r2, [r3, #20]
 800095e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000960:	4b30      	ldr	r3, [pc, #192]	; (8000a24 <MX_ADC1_Init+0xe8>)
 8000962:	4a31      	ldr	r2, [pc, #196]	; (8000a28 <MX_ADC1_Init+0xec>)
 8000964:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000966:	4b2f      	ldr	r3, [pc, #188]	; (8000a24 <MX_ADC1_Init+0xe8>)
 8000968:	2200      	movs	r2, #0
 800096a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800096c:	4b2d      	ldr	r3, [pc, #180]	; (8000a24 <MX_ADC1_Init+0xe8>)
 800096e:	2208      	movs	r2, #8
 8000970:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000972:	4b2c      	ldr	r3, [pc, #176]	; (8000a24 <MX_ADC1_Init+0xe8>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000978:	4b2a      	ldr	r3, [pc, #168]	; (8000a24 <MX_ADC1_Init+0xe8>)
 800097a:	2204      	movs	r2, #4
 800097c:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800097e:	4b29      	ldr	r3, [pc, #164]	; (8000a24 <MX_ADC1_Init+0xe8>)
 8000980:	2200      	movs	r2, #0
 8000982:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000984:	4b27      	ldr	r3, [pc, #156]	; (8000a24 <MX_ADC1_Init+0xe8>)
 8000986:	2201      	movs	r2, #1
 8000988:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800098a:	4b26      	ldr	r3, [pc, #152]	; (8000a24 <MX_ADC1_Init+0xe8>)
 800098c:	2201      	movs	r2, #1
 800098e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000990:	4b24      	ldr	r3, [pc, #144]	; (8000a24 <MX_ADC1_Init+0xe8>)
 8000992:	2200      	movs	r2, #0
 8000994:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000996:	4b23      	ldr	r3, [pc, #140]	; (8000a24 <MX_ADC1_Init+0xe8>)
 8000998:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 800099c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800099e:	4b21      	ldr	r3, [pc, #132]	; (8000a24 <MX_ADC1_Init+0xe8>)
 80009a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80009a6:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <MX_ADC1_Init+0xe8>)
 80009a8:	2203      	movs	r2, #3
 80009aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009ac:	4b1d      	ldr	r3, [pc, #116]	; (8000a24 <MX_ADC1_Init+0xe8>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009b2:	4b1c      	ldr	r3, [pc, #112]	; (8000a24 <MX_ADC1_Init+0xe8>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80009b8:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <MX_ADC1_Init+0xe8>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009c0:	4818      	ldr	r0, [pc, #96]	; (8000a24 <MX_ADC1_Init+0xe8>)
 80009c2:	f001 fb05 	bl	8001fd0 <HAL_ADC_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80009cc:	f000 fba6 	bl	800111c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	4812      	ldr	r0, [pc, #72]	; (8000a24 <MX_ADC1_Init+0xe8>)
 80009dc:	f001 ffe0 	bl	80029a0 <HAL_ADCEx_MultiModeConfigChannel>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80009e6:	f000 fb99 	bl	800111c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <MX_ADC1_Init+0xf0>)
 80009ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009ee:	2306      	movs	r3, #6
 80009f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009f6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80009fa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009fc:	2304      	movs	r3, #4
 80009fe:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a04:	2300      	movs	r3, #0
 8000a06:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a08:	463b      	mov	r3, r7
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_ADC1_Init+0xe8>)
 8000a0e:	f001 fc39 	bl	8002284 <HAL_ADC_ConfigChannel>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000a18:	f000 fb80 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	3728      	adds	r7, #40	; 0x28
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	2400021c 	.word	0x2400021c
 8000a28:	40022000 	.word	0x40022000
 8000a2c:	14f00020 	.word	0x14f00020

08000a30 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	; 0x28
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2224      	movs	r2, #36	; 0x24
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f009 fc57 	bl	800a2f0 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000a42:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <MX_DAC1_Init+0x5c>)
 8000a44:	4a12      	ldr	r2, [pc, #72]	; (8000a90 <MX_DAC1_Init+0x60>)
 8000a46:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000a48:	4810      	ldr	r0, [pc, #64]	; (8000a8c <MX_DAC1_Init+0x5c>)
 8000a4a:	f002 f950 	bl	8002cee <HAL_DAC_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000a54:	f000 fb62 	bl	800111c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000a5c:	2316      	movs	r3, #22
 8000a5e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000a64:	2302      	movs	r3, #2
 8000a66:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	2200      	movs	r2, #0
 8000a70:	4619      	mov	r1, r3
 8000a72:	4806      	ldr	r0, [pc, #24]	; (8000a8c <MX_DAC1_Init+0x5c>)
 8000a74:	f002 fa82 	bl	8002f7c <HAL_DAC_ConfigChannel>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000a7e:	f000 fb4d 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	3728      	adds	r7, #40	; 0x28
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	240000b8 	.word	0x240000b8
 8000a90:	40007400 	.word	0x40007400

08000a94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b088      	sub	sp, #32
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a9a:	f107 030c 	add.w	r3, r7, #12
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
 8000aa8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aaa:	463b      	mov	r3, r7
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ab4:	4b20      	ldr	r3, [pc, #128]	; (8000b38 <MX_TIM2_Init+0xa4>)
 8000ab6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000abc:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <MX_TIM2_Init+0xa4>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac2:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <MX_TIM2_Init+0xa4>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ac8:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <MX_TIM2_Init+0xa4>)
 8000aca:	f04f 32ff 	mov.w	r2, #4294967295
 8000ace:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad0:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <MX_TIM2_Init+0xa4>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <MX_TIM2_Init+0xa4>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000adc:	4816      	ldr	r0, [pc, #88]	; (8000b38 <MX_TIM2_Init+0xa4>)
 8000ade:	f007 fd65 	bl	80085ac <HAL_TIM_Base_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000ae8:	f000 fb18 	bl	800111c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000aec:	2307      	movs	r3, #7
 8000aee:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000af0:	2350      	movs	r3, #80	; 0x50
 8000af2:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 1;
 8000af8:	2301      	movs	r3, #1
 8000afa:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000afc:	f107 030c 	add.w	r3, r7, #12
 8000b00:	4619      	mov	r1, r3
 8000b02:	480d      	ldr	r0, [pc, #52]	; (8000b38 <MX_TIM2_Init+0xa4>)
 8000b04:	f007 ff2d 	bl	8008962 <HAL_TIM_SlaveConfigSynchro>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000b0e:	f000 fb05 	bl	800111c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b12:	2300      	movs	r3, #0
 8000b14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b16:	2300      	movs	r3, #0
 8000b18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b1a:	463b      	mov	r3, r7
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4806      	ldr	r0, [pc, #24]	; (8000b38 <MX_TIM2_Init+0xa4>)
 8000b20:	f008 f96e 	bl	8008e00 <HAL_TIMEx_MasterConfigSynchronization>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000b2a:	f000 faf7 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	3720      	adds	r7, #32
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	24000344 	.word	0x24000344

08000b3c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b088      	sub	sp, #32
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b42:	f107 030c 	add.w	r3, r7, #12
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
 8000b50:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b52:	463b      	mov	r3, r7
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b5c:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <MX_TIM5_Init+0xa0>)
 8000b5e:	4a20      	ldr	r2, [pc, #128]	; (8000be0 <MX_TIM5_Init+0xa4>)
 8000b60:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000b62:	4b1e      	ldr	r3, [pc, #120]	; (8000bdc <MX_TIM5_Init+0xa0>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b68:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <MX_TIM5_Init+0xa0>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000b6e:	4b1b      	ldr	r3, [pc, #108]	; (8000bdc <MX_TIM5_Init+0xa0>)
 8000b70:	f04f 32ff 	mov.w	r2, #4294967295
 8000b74:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b76:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <MX_TIM5_Init+0xa0>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b7c:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <MX_TIM5_Init+0xa0>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000b82:	4816      	ldr	r0, [pc, #88]	; (8000bdc <MX_TIM5_Init+0xa0>)
 8000b84:	f007 fd12 	bl	80085ac <HAL_TIM_Base_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8000b8e:	f000 fac5 	bl	800111c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000b92:	2307      	movs	r3, #7
 8000b94:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8000b96:	2360      	movs	r3, #96	; 0x60
 8000b98:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 1;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000ba2:	f107 030c 	add.w	r3, r7, #12
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	480c      	ldr	r0, [pc, #48]	; (8000bdc <MX_TIM5_Init+0xa0>)
 8000baa:	f007 feda 	bl	8008962 <HAL_TIM_SlaveConfigSynchro>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000bb4:	f000 fab2 	bl	800111c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4805      	ldr	r0, [pc, #20]	; (8000bdc <MX_TIM5_Init+0xa0>)
 8000bc6:	f008 f91b 	bl	8008e00 <HAL_TIMEx_MasterConfigSynchronization>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000bd0:	f000 faa4 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000bd4:	bf00      	nop
 8000bd6:	3720      	adds	r7, #32
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	240001d0 	.word	0x240001d0
 8000be0:	40000c00 	.word	0x40000c00

08000be4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000bf4:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <MX_TIM6_Init+0x64>)
 8000bf6:	4a15      	ldr	r2, [pc, #84]	; (8000c4c <MX_TIM6_Init+0x68>)
 8000bf8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000bfa:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <MX_TIM6_Init+0x64>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <MX_TIM6_Init+0x64>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1919;//960 - 1;
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <MX_TIM6_Init+0x64>)
 8000c08:	f240 727f 	movw	r2, #1919	; 0x77f
 8000c0c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <MX_TIM6_Init+0x64>)
 8000c10:	2280      	movs	r2, #128	; 0x80
 8000c12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000c14:	480c      	ldr	r0, [pc, #48]	; (8000c48 <MX_TIM6_Init+0x64>)
 8000c16:	f007 fcc9 	bl	80085ac <HAL_TIM_Base_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000c20:	f000 fa7c 	bl	800111c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c24:	2320      	movs	r3, #32
 8000c26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4805      	ldr	r0, [pc, #20]	; (8000c48 <MX_TIM6_Init+0x64>)
 8000c32:	f008 f8e5 	bl	8008e00 <HAL_TIMEx_MasterConfigSynchronization>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000c3c:	f000 fa6e 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000c40:	bf00      	nop
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	240002f8 	.word	0x240002f8
 8000c4c:	40001000 	.word	0x40001000

08000c50 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000c60:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <MX_TIM7_Init+0x64>)
 8000c62:	4a15      	ldr	r2, [pc, #84]	; (8000cb8 <MX_TIM7_Init+0x68>)
 8000c64:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 96-1;
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <MX_TIM7_Init+0x64>)
 8000c68:	225f      	movs	r2, #95	; 0x5f
 8000c6a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <MX_TIM7_Init+0x64>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <MX_TIM7_Init+0x64>)
 8000c74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c78:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <MX_TIM7_Init+0x64>)
 8000c7c:	2280      	movs	r2, #128	; 0x80
 8000c7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000c80:	480c      	ldr	r0, [pc, #48]	; (8000cb4 <MX_TIM7_Init+0x64>)
 8000c82:	f007 fc93 	bl	80085ac <HAL_TIM_Base_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000c8c:	f000 fa46 	bl	800111c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c90:	2300      	movs	r3, #0
 8000c92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <MX_TIM7_Init+0x64>)
 8000c9e:	f008 f8af 	bl	8008e00 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000ca8:	f000 fa38 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000cac:	bf00      	nop
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	24000390 	.word	0x24000390
 8000cb8:	40001400 	.word	0x40001400

08000cbc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cc0:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cc2:	4a23      	ldr	r2, [pc, #140]	; (8000d50 <MX_USART3_UART_Init+0x94>)
 8000cc4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cc6:	4b21      	ldr	r3, [pc, #132]	; (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ccc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cce:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cda:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <MX_USART3_UART_Init+0x90>)
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce6:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <MX_USART3_UART_Init+0x90>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cf2:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cf8:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <MX_USART3_UART_Init+0x90>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cfe:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <MX_USART3_UART_Init+0x90>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d04:	4811      	ldr	r0, [pc, #68]	; (8000d4c <MX_USART3_UART_Init+0x90>)
 8000d06:	f008 f921 	bl	8008f4c <HAL_UART_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d10:	f000 fa04 	bl	800111c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d14:	2100      	movs	r1, #0
 8000d16:	480d      	ldr	r0, [pc, #52]	; (8000d4c <MX_USART3_UART_Init+0x90>)
 8000d18:	f009 f9b7 	bl	800a08a <HAL_UARTEx_SetTxFifoThreshold>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d22:	f000 f9fb 	bl	800111c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d26:	2100      	movs	r1, #0
 8000d28:	4808      	ldr	r0, [pc, #32]	; (8000d4c <MX_USART3_UART_Init+0x90>)
 8000d2a:	f009 f9ec 	bl	800a106 <HAL_UARTEx_SetRxFifoThreshold>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d34:	f000 f9f2 	bl	800111c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d38:	4804      	ldr	r0, [pc, #16]	; (8000d4c <MX_USART3_UART_Init+0x90>)
 8000d3a:	f009 f96d 	bl	800a018 <HAL_UARTEx_DisableFifoMode>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d44:	f000 f9ea 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	240000cc 	.word	0x240000cc
 8000d50:	40004800 	.word	0x40004800

08000d54 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
	...

08000d64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d6a:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <MX_DMA_Init+0x6c>)
 8000d6c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000d70:	4a17      	ldr	r2, [pc, #92]	; (8000dd0 <MX_DMA_Init+0x6c>)
 8000d72:	f043 0301 	orr.w	r3, r3, #1
 8000d76:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000d7a:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <MX_DMA_Init+0x6c>)
 8000d7c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <MX_DMA_Init+0x6c>)
 8000d8a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000d8e:	4a10      	ldr	r2, [pc, #64]	; (8000dd0 <MX_DMA_Init+0x6c>)
 8000d90:	f043 0302 	orr.w	r3, r3, #2
 8000d94:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000d98:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <MX_DMA_Init+0x6c>)
 8000d9a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2100      	movs	r1, #0
 8000daa:	200b      	movs	r0, #11
 8000dac:	f001 ff6b 	bl	8002c86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000db0:	200b      	movs	r0, #11
 8000db2:	f001 ff82 	bl	8002cba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2100      	movs	r1, #0
 8000dba:	2038      	movs	r0, #56	; 0x38
 8000dbc:	f001 ff63 	bl	8002c86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000dc0:	2038      	movs	r0, #56	; 0x38
 8000dc2:	f001 ff7a 	bl	8002cba <HAL_NVIC_EnableIRQ>

}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	58024400 	.word	0x58024400

08000dd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08e      	sub	sp, #56	; 0x38
 8000dd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	60da      	str	r2, [r3, #12]
 8000de8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dea:	4b87      	ldr	r3, [pc, #540]	; (8001008 <MX_GPIO_Init+0x234>)
 8000dec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000df0:	4a85      	ldr	r2, [pc, #532]	; (8001008 <MX_GPIO_Init+0x234>)
 8000df2:	f043 0304 	orr.w	r3, r3, #4
 8000df6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000dfa:	4b83      	ldr	r3, [pc, #524]	; (8001008 <MX_GPIO_Init+0x234>)
 8000dfc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e00:	f003 0304 	and.w	r3, r3, #4
 8000e04:	623b      	str	r3, [r7, #32]
 8000e06:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e08:	4b7f      	ldr	r3, [pc, #508]	; (8001008 <MX_GPIO_Init+0x234>)
 8000e0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e0e:	4a7e      	ldr	r2, [pc, #504]	; (8001008 <MX_GPIO_Init+0x234>)
 8000e10:	f043 0320 	orr.w	r3, r3, #32
 8000e14:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e18:	4b7b      	ldr	r3, [pc, #492]	; (8001008 <MX_GPIO_Init+0x234>)
 8000e1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e1e:	f003 0320 	and.w	r3, r3, #32
 8000e22:	61fb      	str	r3, [r7, #28]
 8000e24:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e26:	4b78      	ldr	r3, [pc, #480]	; (8001008 <MX_GPIO_Init+0x234>)
 8000e28:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e2c:	4a76      	ldr	r2, [pc, #472]	; (8001008 <MX_GPIO_Init+0x234>)
 8000e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e32:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e36:	4b74      	ldr	r3, [pc, #464]	; (8001008 <MX_GPIO_Init+0x234>)
 8000e38:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e40:	61bb      	str	r3, [r7, #24]
 8000e42:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e44:	4b70      	ldr	r3, [pc, #448]	; (8001008 <MX_GPIO_Init+0x234>)
 8000e46:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e4a:	4a6f      	ldr	r2, [pc, #444]	; (8001008 <MX_GPIO_Init+0x234>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e54:	4b6c      	ldr	r3, [pc, #432]	; (8001008 <MX_GPIO_Init+0x234>)
 8000e56:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	617b      	str	r3, [r7, #20]
 8000e60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e62:	4b69      	ldr	r3, [pc, #420]	; (8001008 <MX_GPIO_Init+0x234>)
 8000e64:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e68:	4a67      	ldr	r2, [pc, #412]	; (8001008 <MX_GPIO_Init+0x234>)
 8000e6a:	f043 0302 	orr.w	r3, r3, #2
 8000e6e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e72:	4b65      	ldr	r3, [pc, #404]	; (8001008 <MX_GPIO_Init+0x234>)
 8000e74:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e78:	f003 0302 	and.w	r3, r3, #2
 8000e7c:	613b      	str	r3, [r7, #16]
 8000e7e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e80:	4b61      	ldr	r3, [pc, #388]	; (8001008 <MX_GPIO_Init+0x234>)
 8000e82:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e86:	4a60      	ldr	r2, [pc, #384]	; (8001008 <MX_GPIO_Init+0x234>)
 8000e88:	f043 0308 	orr.w	r3, r3, #8
 8000e8c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e90:	4b5d      	ldr	r3, [pc, #372]	; (8001008 <MX_GPIO_Init+0x234>)
 8000e92:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e96:	f003 0308 	and.w	r3, r3, #8
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e9e:	4b5a      	ldr	r3, [pc, #360]	; (8001008 <MX_GPIO_Init+0x234>)
 8000ea0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ea4:	4a58      	ldr	r2, [pc, #352]	; (8001008 <MX_GPIO_Init+0x234>)
 8000ea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eaa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000eae:	4b56      	ldr	r3, [pc, #344]	; (8001008 <MX_GPIO_Init+0x234>)
 8000eb0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ebc:	4b52      	ldr	r3, [pc, #328]	; (8001008 <MX_GPIO_Init+0x234>)
 8000ebe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ec2:	4a51      	ldr	r2, [pc, #324]	; (8001008 <MX_GPIO_Init+0x234>)
 8000ec4:	f043 0310 	orr.w	r3, r3, #16
 8000ec8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ecc:	4b4e      	ldr	r3, [pc, #312]	; (8001008 <MX_GPIO_Init+0x234>)
 8000ece:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ed2:	f003 0310 	and.w	r3, r3, #16
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ee0:	484a      	ldr	r0, [pc, #296]	; (800100c <MX_GPIO_Init+0x238>)
 8000ee2:	f004 fd31 	bl	8005948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f244 0101 	movw	r1, #16385	; 0x4001
 8000eec:	4848      	ldr	r0, [pc, #288]	; (8001010 <MX_GPIO_Init+0x23c>)
 8000eee:	f004 fd2b 	bl	8005948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2102      	movs	r1, #2
 8000ef6:	4847      	ldr	r0, [pc, #284]	; (8001014 <MX_GPIO_Init+0x240>)
 8000ef8:	f004 fd26 	bl	8005948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000efc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f02:	2300      	movs	r3, #0
 8000f04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4841      	ldr	r0, [pc, #260]	; (8001018 <MX_GPIO_Init+0x244>)
 8000f12:	f004 fb69 	bl	80055e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000f16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2300      	movs	r3, #0
 8000f26:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000f28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4837      	ldr	r0, [pc, #220]	; (800100c <MX_GPIO_Init+0x238>)
 8000f30:	f004 fb5a 	bl	80055e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000f34:	f244 0301 	movw	r3, #16385	; 0x4001
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2300      	movs	r3, #0
 8000f44:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4830      	ldr	r0, [pc, #192]	; (8001010 <MX_GPIO_Init+0x23c>)
 8000f4e:	f004 fb4b 	bl	80055e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000f52:	2380      	movs	r3, #128	; 0x80
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f56:	4b31      	ldr	r3, [pc, #196]	; (800101c <MX_GPIO_Init+0x248>)
 8000f58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f62:	4619      	mov	r1, r3
 8000f64:	482e      	ldr	r0, [pc, #184]	; (8001020 <MX_GPIO_Init+0x24c>)
 8000f66:	f004 fb3f 	bl	80055e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000f6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4829      	ldr	r0, [pc, #164]	; (8001024 <MX_GPIO_Init+0x250>)
 8000f80:	f004 fb32 	bl	80055e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000f84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000f96:	230a      	movs	r3, #10
 8000f98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4820      	ldr	r0, [pc, #128]	; (8001024 <MX_GPIO_Init+0x250>)
 8000fa2:	f004 fb21 	bl	80055e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000fa6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4819      	ldr	r0, [pc, #100]	; (8001024 <MX_GPIO_Init+0x250>)
 8000fc0:	f004 fb12 	bl	80055e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fc4:	23c0      	movs	r3, #192	; 0xc0
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fd4:	2307      	movs	r3, #7
 8000fd6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fdc:	4619      	mov	r1, r3
 8000fde:	480c      	ldr	r0, [pc, #48]	; (8001010 <MX_GPIO_Init+0x23c>)
 8000fe0:	f004 fb02 	bl	80055e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4806      	ldr	r0, [pc, #24]	; (8001014 <MX_GPIO_Init+0x240>)
 8000ffc:	f004 faf4 	bl	80055e8 <HAL_GPIO_Init>

}
 8001000:	bf00      	nop
 8001002:	3738      	adds	r7, #56	; 0x38
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	58024400 	.word	0x58024400
 800100c:	58021400 	.word	0x58021400
 8001010:	58020400 	.word	0x58020400
 8001014:	58021000 	.word	0x58021000
 8001018:	58020800 	.word	0x58020800
 800101c:	11110000 	.word	0x11110000
 8001020:	58021800 	.word	0x58021800
 8001024:	58020000 	.word	0x58020000

08001028 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);

	if (ms == 0){
 8001030:	4b2f      	ldr	r3, [pc, #188]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d107      	bne.n	800104a <HAL_TIM_PeriodElapsedCallback+0x22>
		freq_timer_count = 0;
 800103a:	4b2e      	ldr	r3, [pc, #184]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800103c:	f04f 0200 	mov.w	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
		vol_timer_count = 0;
 8001042:	4b2d      	ldr	r3, [pc, #180]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001044:	f04f 0200 	mov.w	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
	}
	freq_timer_count += __HAL_TIM_GET_COUNTER(&htim2);
 800104a:	4b2c      	ldr	r3, [pc, #176]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001050:	ee07 3a90 	vmov	s15, r3
 8001054:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001058:	4b26      	ldr	r3, [pc, #152]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800105a:	edd3 7a00 	vldr	s15, [r3]
 800105e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001062:	4b24      	ldr	r3, [pc, #144]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001064:	edc3 7a00 	vstr	s15, [r3]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001068:	4b24      	ldr	r3, [pc, #144]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2200      	movs	r2, #0
 800106e:	625a      	str	r2, [r3, #36]	; 0x24
	vol_timer_count += __HAL_TIM_GET_COUNTER(&htim5);
 8001070:	4b23      	ldr	r3, [pc, #140]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001076:	ee07 3a90 	vmov	s15, r3
 800107a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800107e:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001080:	edd3 7a00 	vldr	s15, [r3]
 8001084:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001088:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800108a:	edc3 7a00 	vstr	s15, [r3]
	__HAL_TIM_SET_COUNTER(&htim5, 0);
 800108e:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2200      	movs	r2, #0
 8001094:	625a      	str	r2, [r3, #36]	; 0x24
	ms++;
 8001096:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	b2db      	uxtb	r3, r3
 800109c:	3301      	adds	r3, #1
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80010a2:	701a      	strb	r2, [r3, #0]
	if (ms == MILLISECONDS) {
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b0a      	cmp	r3, #10
 80010ac:	d119      	bne.n	80010e2 <HAL_TIM_PeriodElapsedCallback+0xba>
		update_freq_flag = 1;
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	701a      	strb	r2, [r3, #0]
		freq_timer_count /= MILLISECONDS;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80010b6:	ed93 7a00 	vldr	s14, [r3]
 80010ba:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80010be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80010c4:	edc3 7a00 	vstr	s15, [r3]
		vol_timer_count /= MILLISECONDS;
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80010ca:	ed93 7a00 	vldr	s14, [r3]
 80010ce:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80010d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80010d8:	edc3 7a00 	vstr	s15, [r3]
		ms = 0;
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
	}
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	240000a0 	.word	0x240000a0
 80010f4:	24000098 	.word	0x24000098
 80010f8:	2400009c 	.word	0x2400009c
 80010fc:	24000344 	.word	0x24000344
 8001100:	240001d0 	.word	0x240001d0
 8001104:	240003dc 	.word	0x240003dc

08001108 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1 (DAC_HandleTypeDef * hdac) {
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	0000      	movs	r0, r0
 800112c:	0000      	movs	r0, r0
	...

08001130 <init_nco>:
 * @returns pointer to an initialized structure of type #NCO_T which may
 * be used to get NCO samples.
 */

NCO_T *init_nco(  float f0,            //!< [in] Frequency in cycles per sample
                  float theta){        //!< [in] Offset angle in radians
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	ed87 0a01 	vstr	s0, [r7, #4]
 800113a:	edc7 0a00 	vstr	s1, [r7]

    //Allocate memory for s
    NCO_T *s = malloc(sizeof(NCO_T));
 800113e:	2010      	movs	r0, #16
 8001140:	f009 f8ce 	bl	800a2e0 <malloc>
 8001144:	4603      	mov	r3, r0
 8001146:	60fb      	str	r3, [r7, #12]
    if (s == NULL) {
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d105      	bne.n	800115a <init_nco+0x2a>
        printf("Failed to allocate memory for s\n");
 800114e:	481c      	ldr	r0, [pc, #112]	; (80011c0 <init_nco+0x90>)
 8001150:	f009 f9e8 	bl	800a524 <puts>
        exit(EXIT_FAILURE);
 8001154:	2001      	movs	r0, #1
 8001156:	f009 f88b 	bl	800a270 <exit>
    }

    //Initialize struct variables
    s->f0 = (int)(f0 * 2 * (1u << 31));
 800115a:	edd7 7a01 	vldr	s15, [r7, #4]
 800115e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001162:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80011c4 <init_nco+0x94>
 8001166:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800116e:	ee17 2a90 	vmov	r2, s15
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	601a      	str	r2, [r3, #0]
    s->theta = (int)((theta * 2 * (1u << 31))/(2.*PI));
 8001176:	edd7 7a00 	vldr	s15, [r7]
 800117a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800117e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80011c4 <init_nco+0x94>
 8001182:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001186:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800118a:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80011b8 <init_nco+0x88>
 800118e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001192:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001196:	ee17 2a90 	vmov	r2, s15
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	605a      	str	r2, [r3, #4]
    s->acc = 0;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2200      	movs	r2, #0
 80011a2:	60da      	str	r2, [r3, #12]
    s->amp = 0;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f04f 0200 	mov.w	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]

    //Return pointer to struct NCO_T
    return s;
 80011ac:	68fb      	ldr	r3, [r7, #12]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	53c8d4f1 	.word	0x53c8d4f1
 80011bc:	401921fb 	.word	0x401921fb
 80011c0:	0800ac2c 	.word	0x0800ac2c
 80011c4:	4f000000 	.word	0x4f000000

080011c8 <nco_get_samples>:
 * phase discontinuities from one call to the next.
 */

void nco_get_samples(NCO_T *s,         //!< [in,out] Pointer to NCO_T struct.
                     uint16_t *y,         //!< [out] Pointer to an array for storage of output samples.
                     int n_samples){   //!< [in] Number of NCO output samples to generate.
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b088      	sub	sp, #32
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
	unsigned int i;
	unsigned int kprime;
	unsigned int index;

	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80011d4:	2101      	movs	r1, #1
 80011d6:	4828      	ldr	r0, [pc, #160]	; (8001278 <nco_get_samples+0xb0>)
 80011d8:	f004 fbcf 	bl	800597a <HAL_GPIO_TogglePin>
	for (i = 0; i < n_samples; i++) {
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
 80011e0:	e03d      	b.n	800125e <nco_get_samples+0x96>

        if ((i == 0) && (s->acc == 0)) {
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d103      	bne.n	80011f0 <nco_get_samples+0x28>
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d008      	beq.n	8001202 <nco_get_samples+0x3a>
        } else {
            /* Keep track of where we are in the sine wave */
            s->acc += s->f0;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	461a      	mov	r2, r3
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4413      	add	r3, r2
 80011fc:	461a      	mov	r2, r3
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	60da      	str	r2, [r3, #12]
        }

        kprime = s->acc + s->theta;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	461a      	mov	r2, r3
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	4413      	add	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]

        index = kprime >> 23;
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	0ddb      	lsrs	r3, r3, #23
 8001214:	617b      	str	r3, [r7, #20]

        /* Convert from float to 16-bit */
        y[i] = (unsigned int)((cosine[index] + 1) * 2047) * s->amp;
 8001216:	4a19      	ldr	r2, [pc, #100]	; (800127c <nco_get_samples+0xb4>)
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	4413      	add	r3, r2
 800121e:	edd3 7a00 	vldr	s15, [r3]
 8001222:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001226:	ee77 7a87 	vadd.f32	s15, s15, s14
 800122a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001280 <nco_get_samples+0xb8>
 800122e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001232:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001236:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	68ba      	ldr	r2, [r7, #8]
 800124a:	4413      	add	r3, r2
 800124c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001250:	ee17 2a90 	vmov	r2, s15
 8001254:	b292      	uxth	r2, r2
 8001256:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < n_samples; i++) {
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	3301      	adds	r3, #1
 800125c:	61fb      	str	r3, [r7, #28]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	69fa      	ldr	r2, [r7, #28]
 8001262:	429a      	cmp	r2, r3
 8001264:	d3bd      	bcc.n	80011e2 <nco_get_samples+0x1a>
	}
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001266:	2101      	movs	r1, #1
 8001268:	4803      	ldr	r0, [pc, #12]	; (8001278 <nco_get_samples+0xb0>)
 800126a:	f004 fb86 	bl	800597a <HAL_GPIO_TogglePin>
}
 800126e:	bf00      	nop
 8001270:	3720      	adds	r7, #32
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	58020400 	.word	0x58020400
 800127c:	0800ac5c 	.word	0x0800ac5c
 8001280:	44ffe000 	.word	0x44ffe000

08001284 <nco_set_frequency>:
 * @returns On return, The NCO_T structure s is modified so that subsequent calls to nco_get_samples()
 * will operate at frequency f_new (without loss of phase continuity).
 */

void nco_set_frequency( NCO_T *s,      //!< [in,out] Pointer to NCO_T struct.
                        float f_new){  //!< [in] New NCO frequency (in cycles/sample).
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	ed87 0a00 	vstr	s0, [r7]
    s->f0 = (int)(f_new * 2 * (1u << 31));
 8001290:	edd7 7a00 	vldr	s15, [r7]
 8001294:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001298:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80012b8 <nco_set_frequency+0x34>
 800129c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012a4:	ee17 2a90 	vmov	r2, s15
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	601a      	str	r2, [r3, #0]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	4f000000 	.word	0x4f000000

080012bc <nco_set_amplitude>:
 * @returns On return, The NCO_T structure s is modified so that subsequent calls to nco_get_samples()
 * will operate with the amplitude given by amp
 */

void nco_set_amplitude(	NCO_T *s,
						int amp){
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
	if (amp <= 5000) {
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012cc:	4293      	cmp	r3, r2
 80012ce:	dc20      	bgt.n	8001312 <nco_set_amplitude+0x56>
		amp = 5000 - amp;
 80012d0:	683a      	ldr	r2, [r7, #0]
 80012d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80012d6:	1a9b      	subs	r3, r3, r2
 80012d8:	603b      	str	r3, [r7, #0]
		s->amp = (float)amp / 10000.;
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	ee07 3a90 	vmov	s15, r3
 80012e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012e4:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001328 <nco_set_amplitude+0x6c>
 80012e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edc3 7a02 	vstr	s15, [r3, #8]
		/* Don't want to saturate the output */
		if (s->amp > 1) {
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80012f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001304:	dc00      	bgt.n	8001308 <nco_set_amplitude+0x4c>
			s->amp = 0;
		}
	}else {
		s->amp = 0.0;
	}
}
 8001306:	e008      	b.n	800131a <nco_set_amplitude+0x5e>
			s->amp = 0;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f04f 0200 	mov.w	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
}
 8001310:	e003      	b.n	800131a <nco_set_amplitude+0x5e>
		s->amp = 0.0;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	461c4000 	.word	0x461c4000

0800132c <set_blocksize>:
/*!
 * @brief Set the block size of half the ADC buffer.
 *
 * @returns On return, the blocksize and buffersize are updated
 */
void set_blocksize( uint32_t new_blocksize) {
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	ADC_blocksize = new_blocksize;
 8001334:	4a06      	ldr	r2, [pc, #24]	; (8001350 <set_blocksize+0x24>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6013      	str	r3, [r2, #0]
	ADC_buffer_len = 2 * new_blocksize;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	4a05      	ldr	r2, [pc, #20]	; (8001354 <set_blocksize+0x28>)
 8001340:	6013      	str	r3, [r2, #0]
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	24000000 	.word	0x24000000
 8001354:	24000004 	.word	0x24000004

08001358 <set_dac_buff>:
 * @brief Put a block of data on half of the DAC buffer.
 *
 * @returns On return, ret_adc array is filled up with float values from the 12-bit ADC.
 * Ideally, this function should be called twice within the course of one full DAC conversion.
 */
void set_dac_buff(uint16_t * input_dac) { //!< [in] Pointer to input DAC array.
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	uint32_t i;

	if (Half_Done) {
 8001360:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <set_dac_buff+0x70>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d007      	beq.n	800137a <set_dac_buff+0x22>
		output_buff = dac_buff;
 800136a:	4b18      	ldr	r3, [pc, #96]	; (80013cc <set_dac_buff+0x74>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a18      	ldr	r2, [pc, #96]	; (80013d0 <set_dac_buff+0x78>)
 8001370:	6013      	str	r3, [r2, #0]
		Half_Done = 0;
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <set_dac_buff+0x70>)
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]
 8001378:	e00a      	b.n	8001390 <set_dac_buff+0x38>
	}
	else {
		output_buff = &(dac_buff[ADC_blocksize]);
 800137a:	4b14      	ldr	r3, [pc, #80]	; (80013cc <set_dac_buff+0x74>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <set_dac_buff+0x7c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	4413      	add	r3, r2
 8001386:	4a12      	ldr	r2, [pc, #72]	; (80013d0 <set_dac_buff+0x78>)
 8001388:	6013      	str	r3, [r2, #0]
		Half_Done = 1;
 800138a:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <set_dac_buff+0x70>)
 800138c:	2201      	movs	r2, #1
 800138e:	701a      	strb	r2, [r3, #0]
	}
	/* Fill DAC buffer with values */
	for (i = 0; i < ADC_blocksize; i++) {
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	e00d      	b.n	80013b2 <set_dac_buff+0x5a>
		output_buff[i] = input_dac[i];
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	441a      	add	r2, r3
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <set_dac_buff+0x78>)
 80013a0:	6819      	ldr	r1, [r3, #0]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	440b      	add	r3, r1
 80013a8:	8812      	ldrh	r2, [r2, #0]
 80013aa:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < ADC_blocksize; i++) {
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	3301      	adds	r3, #1
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <set_dac_buff+0x7c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d3ec      	bcc.n	8001396 <set_dac_buff+0x3e>
	}
}
 80013bc:	bf00      	nop
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	240000a1 	.word	0x240000a1
 80013cc:	240000a4 	.word	0x240000a4
 80013d0:	240000a8 	.word	0x240000a8
 80013d4:	24000000 	.word	0x24000000

080013d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013de:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <HAL_MspInit+0x30>)
 80013e0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80013e4:	4a08      	ldr	r2, [pc, #32]	; (8001408 <HAL_MspInit+0x30>)
 80013e6:	f043 0302 	orr.w	r3, r3, #2
 80013ea:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_MspInit+0x30>)
 80013f0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	58024400 	.word	0x58024400

0800140c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	; 0x28
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a30      	ldr	r2, [pc, #192]	; (80014ec <HAL_ADC_MspInit+0xe0>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d159      	bne.n	80014e2 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800142e:	4b30      	ldr	r3, [pc, #192]	; (80014f0 <HAL_ADC_MspInit+0xe4>)
 8001430:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001434:	4a2e      	ldr	r2, [pc, #184]	; (80014f0 <HAL_ADC_MspInit+0xe4>)
 8001436:	f043 0320 	orr.w	r3, r3, #32
 800143a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800143e:	4b2c      	ldr	r3, [pc, #176]	; (80014f0 <HAL_ADC_MspInit+0xe4>)
 8001440:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001444:	f003 0320 	and.w	r3, r3, #32
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144c:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <HAL_ADC_MspInit+0xe4>)
 800144e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001452:	4a27      	ldr	r2, [pc, #156]	; (80014f0 <HAL_ADC_MspInit+0xe4>)
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800145c:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <HAL_ADC_MspInit+0xe4>)
 800145e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800146a:	2302      	movs	r3, #2
 800146c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800146e:	2303      	movs	r3, #3
 8001470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	4619      	mov	r1, r3
 800147c:	481d      	ldr	r0, [pc, #116]	; (80014f4 <HAL_ADC_MspInit+0xe8>)
 800147e:	f004 f8b3 	bl	80055e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001482:	4b1d      	ldr	r3, [pc, #116]	; (80014f8 <HAL_ADC_MspInit+0xec>)
 8001484:	4a1d      	ldr	r2, [pc, #116]	; (80014fc <HAL_ADC_MspInit+0xf0>)
 8001486:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001488:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <HAL_ADC_MspInit+0xec>)
 800148a:	2209      	movs	r2, #9
 800148c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800148e:	4b1a      	ldr	r3, [pc, #104]	; (80014f8 <HAL_ADC_MspInit+0xec>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001494:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <HAL_ADC_MspInit+0xec>)
 8001496:	2200      	movs	r2, #0
 8001498:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800149a:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <HAL_ADC_MspInit+0xec>)
 800149c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014a0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014a2:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <HAL_ADC_MspInit+0xec>)
 80014a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014a8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014aa:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <HAL_ADC_MspInit+0xec>)
 80014ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014b2:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <HAL_ADC_MspInit+0xec>)
 80014b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014b8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014ba:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <HAL_ADC_MspInit+0xec>)
 80014bc:	2200      	movs	r2, #0
 80014be:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014c0:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <HAL_ADC_MspInit+0xec>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014c6:	480c      	ldr	r0, [pc, #48]	; (80014f8 <HAL_ADC_MspInit+0xec>)
 80014c8:	f001 ff12 	bl	80032f0 <HAL_DMA_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_ADC_MspInit+0xca>
    {
      Error_Handler();
 80014d2:	f7ff fe23 	bl	800111c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a07      	ldr	r2, [pc, #28]	; (80014f8 <HAL_ADC_MspInit+0xec>)
 80014da:	64da      	str	r2, [r3, #76]	; 0x4c
 80014dc:	4a06      	ldr	r2, [pc, #24]	; (80014f8 <HAL_ADC_MspInit+0xec>)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014e2:	bf00      	nop
 80014e4:	3728      	adds	r7, #40	; 0x28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40022000 	.word	0x40022000
 80014f0:	58024400 	.word	0x58024400
 80014f4:	58020400 	.word	0x58020400
 80014f8:	24000280 	.word	0x24000280
 80014fc:	40020010 	.word	0x40020010

08001500 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	; 0x28
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a30      	ldr	r2, [pc, #192]	; (80015e0 <HAL_DAC_MspInit+0xe0>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d159      	bne.n	80015d6 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001522:	4b30      	ldr	r3, [pc, #192]	; (80015e4 <HAL_DAC_MspInit+0xe4>)
 8001524:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001528:	4a2e      	ldr	r2, [pc, #184]	; (80015e4 <HAL_DAC_MspInit+0xe4>)
 800152a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800152e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001532:	4b2c      	ldr	r3, [pc, #176]	; (80015e4 <HAL_DAC_MspInit+0xe4>)
 8001534:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001538:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001540:	4b28      	ldr	r3, [pc, #160]	; (80015e4 <HAL_DAC_MspInit+0xe4>)
 8001542:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001546:	4a27      	ldr	r2, [pc, #156]	; (80015e4 <HAL_DAC_MspInit+0xe4>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001550:	4b24      	ldr	r3, [pc, #144]	; (80015e4 <HAL_DAC_MspInit+0xe4>)
 8001552:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800155e:	2310      	movs	r3, #16
 8001560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001562:	2303      	movs	r3, #3
 8001564:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	4619      	mov	r1, r3
 8001570:	481d      	ldr	r0, [pc, #116]	; (80015e8 <HAL_DAC_MspInit+0xe8>)
 8001572:	f004 f839 	bl	80055e8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA2_Stream0;
 8001576:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <HAL_DAC_MspInit+0xec>)
 8001578:	4a1d      	ldr	r2, [pc, #116]	; (80015f0 <HAL_DAC_MspInit+0xf0>)
 800157a:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 800157c:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <HAL_DAC_MspInit+0xec>)
 800157e:	2243      	movs	r2, #67	; 0x43
 8001580:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001582:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <HAL_DAC_MspInit+0xec>)
 8001584:	2240      	movs	r2, #64	; 0x40
 8001586:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001588:	4b18      	ldr	r3, [pc, #96]	; (80015ec <HAL_DAC_MspInit+0xec>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800158e:	4b17      	ldr	r3, [pc, #92]	; (80015ec <HAL_DAC_MspInit+0xec>)
 8001590:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001594:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <HAL_DAC_MspInit+0xec>)
 8001598:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800159c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800159e:	4b13      	ldr	r3, [pc, #76]	; (80015ec <HAL_DAC_MspInit+0xec>)
 80015a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015a4:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80015a6:	4b11      	ldr	r3, [pc, #68]	; (80015ec <HAL_DAC_MspInit+0xec>)
 80015a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015ac:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80015ae:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <HAL_DAC_MspInit+0xec>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015b4:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <HAL_DAC_MspInit+0xec>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80015ba:	480c      	ldr	r0, [pc, #48]	; (80015ec <HAL_DAC_MspInit+0xec>)
 80015bc:	f001 fe98 	bl	80032f0 <HAL_DMA_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 80015c6:	f7ff fda9 	bl	800111c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a07      	ldr	r2, [pc, #28]	; (80015ec <HAL_DAC_MspInit+0xec>)
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	4a06      	ldr	r2, [pc, #24]	; (80015ec <HAL_DAC_MspInit+0xec>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80015d6:	bf00      	nop
 80015d8:	3728      	adds	r7, #40	; 0x28
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40007400 	.word	0x40007400
 80015e4:	58024400 	.word	0x58024400
 80015e8:	58020000 	.word	0x58020000
 80015ec:	24000158 	.word	0x24000158
 80015f0:	40020410 	.word	0x40020410

080015f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08e      	sub	sp, #56	; 0x38
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001614:	d12e      	bne.n	8001674 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001616:	4b4c      	ldr	r3, [pc, #304]	; (8001748 <HAL_TIM_Base_MspInit+0x154>)
 8001618:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800161c:	4a4a      	ldr	r2, [pc, #296]	; (8001748 <HAL_TIM_Base_MspInit+0x154>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001626:	4b48      	ldr	r3, [pc, #288]	; (8001748 <HAL_TIM_Base_MspInit+0x154>)
 8001628:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	623b      	str	r3, [r7, #32]
 8001632:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001634:	4b44      	ldr	r3, [pc, #272]	; (8001748 <HAL_TIM_Base_MspInit+0x154>)
 8001636:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800163a:	4a43      	ldr	r2, [pc, #268]	; (8001748 <HAL_TIM_Base_MspInit+0x154>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001644:	4b40      	ldr	r3, [pc, #256]	; (8001748 <HAL_TIM_Base_MspInit+0x154>)
 8001646:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	61fb      	str	r3, [r7, #28]
 8001650:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001652:	2301      	movs	r3, #1
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165e:	2303      	movs	r3, #3
 8001660:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001662:	2301      	movs	r3, #1
 8001664:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166a:	4619      	mov	r1, r3
 800166c:	4837      	ldr	r0, [pc, #220]	; (800174c <HAL_TIM_Base_MspInit+0x158>)
 800166e:	f003 ffbb 	bl	80055e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001672:	e064      	b.n	800173e <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM5)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a35      	ldr	r2, [pc, #212]	; (8001750 <HAL_TIM_Base_MspInit+0x15c>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d12e      	bne.n	80016dc <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800167e:	4b32      	ldr	r3, [pc, #200]	; (8001748 <HAL_TIM_Base_MspInit+0x154>)
 8001680:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001684:	4a30      	ldr	r2, [pc, #192]	; (8001748 <HAL_TIM_Base_MspInit+0x154>)
 8001686:	f043 0308 	orr.w	r3, r3, #8
 800168a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800168e:	4b2e      	ldr	r3, [pc, #184]	; (8001748 <HAL_TIM_Base_MspInit+0x154>)
 8001690:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001694:	f003 0308 	and.w	r3, r3, #8
 8001698:	61bb      	str	r3, [r7, #24]
 800169a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169c:	4b2a      	ldr	r3, [pc, #168]	; (8001748 <HAL_TIM_Base_MspInit+0x154>)
 800169e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016a2:	4a29      	ldr	r2, [pc, #164]	; (8001748 <HAL_TIM_Base_MspInit+0x154>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80016ac:	4b26      	ldr	r3, [pc, #152]	; (8001748 <HAL_TIM_Base_MspInit+0x154>)
 80016ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016ba:	2302      	movs	r3, #2
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016be:	2302      	movs	r3, #2
 80016c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c6:	2303      	movs	r3, #3
 80016c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80016ca:	2302      	movs	r3, #2
 80016cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d2:	4619      	mov	r1, r3
 80016d4:	481d      	ldr	r0, [pc, #116]	; (800174c <HAL_TIM_Base_MspInit+0x158>)
 80016d6:	f003 ff87 	bl	80055e8 <HAL_GPIO_Init>
}
 80016da:	e030      	b.n	800173e <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM6)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a1c      	ldr	r2, [pc, #112]	; (8001754 <HAL_TIM_Base_MspInit+0x160>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d10f      	bne.n	8001706 <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80016e6:	4b18      	ldr	r3, [pc, #96]	; (8001748 <HAL_TIM_Base_MspInit+0x154>)
 80016e8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80016ec:	4a16      	ldr	r2, [pc, #88]	; (8001748 <HAL_TIM_Base_MspInit+0x154>)
 80016ee:	f043 0310 	orr.w	r3, r3, #16
 80016f2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80016f6:	4b14      	ldr	r3, [pc, #80]	; (8001748 <HAL_TIM_Base_MspInit+0x154>)
 80016f8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80016fc:	f003 0310 	and.w	r3, r3, #16
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	693b      	ldr	r3, [r7, #16]
}
 8001704:	e01b      	b.n	800173e <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM7)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a13      	ldr	r2, [pc, #76]	; (8001758 <HAL_TIM_Base_MspInit+0x164>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d116      	bne.n	800173e <HAL_TIM_Base_MspInit+0x14a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001710:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <HAL_TIM_Base_MspInit+0x154>)
 8001712:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001716:	4a0c      	ldr	r2, [pc, #48]	; (8001748 <HAL_TIM_Base_MspInit+0x154>)
 8001718:	f043 0320 	orr.w	r3, r3, #32
 800171c:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001720:	4b09      	ldr	r3, [pc, #36]	; (8001748 <HAL_TIM_Base_MspInit+0x154>)
 8001722:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001726:	f003 0320 	and.w	r3, r3, #32
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2100      	movs	r1, #0
 8001732:	2037      	movs	r0, #55	; 0x37
 8001734:	f001 faa7 	bl	8002c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001738:	2037      	movs	r0, #55	; 0x37
 800173a:	f001 fabe 	bl	8002cba <HAL_NVIC_EnableIRQ>
}
 800173e:	bf00      	nop
 8001740:	3738      	adds	r7, #56	; 0x38
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	58024400 	.word	0x58024400
 800174c:	58020000 	.word	0x58020000
 8001750:	40000c00 	.word	0x40000c00
 8001754:	40001000 	.word	0x40001000
 8001758:	40001400 	.word	0x40001400

0800175c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	; 0x28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a1a      	ldr	r2, [pc, #104]	; (80017e4 <HAL_UART_MspInit+0x88>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d12e      	bne.n	80017dc <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800177e:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <HAL_UART_MspInit+0x8c>)
 8001780:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001784:	4a18      	ldr	r2, [pc, #96]	; (80017e8 <HAL_UART_MspInit+0x8c>)
 8001786:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800178a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800178e:	4b16      	ldr	r3, [pc, #88]	; (80017e8 <HAL_UART_MspInit+0x8c>)
 8001790:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001794:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <HAL_UART_MspInit+0x8c>)
 800179e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80017a2:	4a11      	ldr	r2, [pc, #68]	; (80017e8 <HAL_UART_MspInit+0x8c>)
 80017a4:	f043 0308 	orr.w	r3, r3, #8
 80017a8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80017ac:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <HAL_UART_MspInit+0x8c>)
 80017ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80017b2:	f003 0308 	and.w	r3, r3, #8
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80017ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c0:	2302      	movs	r3, #2
 80017c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c8:	2300      	movs	r3, #0
 80017ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017cc:	2307      	movs	r3, #7
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	4619      	mov	r1, r3
 80017d6:	4805      	ldr	r0, [pc, #20]	; (80017ec <HAL_UART_MspInit+0x90>)
 80017d8:	f003 ff06 	bl	80055e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017dc:	bf00      	nop
 80017de:	3728      	adds	r7, #40	; 0x28
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40004800 	.word	0x40004800
 80017e8:	58024400 	.word	0x58024400
 80017ec:	58020c00 	.word	0x58020c00

080017f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001802:	e7fe      	b.n	8001802 <HardFault_Handler+0x4>

08001804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001808:	e7fe      	b.n	8001808 <MemManage_Handler+0x4>

0800180a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800180e:	e7fe      	b.n	800180e <BusFault_Handler+0x4>

08001810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001814:	e7fe      	b.n	8001814 <UsageFault_Handler+0x4>

08001816 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001844:	f000 f9f6 	bl	8001c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}

0800184c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001850:	4802      	ldr	r0, [pc, #8]	; (800185c <DMA1_Stream0_IRQHandler+0x10>)
 8001852:	f002 fb47 	bl	8003ee4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	24000280 	.word	0x24000280

08001860 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001864:	4802      	ldr	r0, [pc, #8]	; (8001870 <TIM7_IRQHandler+0x10>)
 8001866:	f006 ff5d 	bl	8008724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	24000390 	.word	0x24000390

08001874 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001878:	4802      	ldr	r0, [pc, #8]	; (8001884 <DMA2_Stream0_IRQHandler+0x10>)
 800187a:	f002 fb33 	bl	8003ee4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	24000158 	.word	0x24000158

08001888 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001892:	f008 fce7 	bl	800a264 <__errno>
 8001896:	4602      	mov	r2, r0
 8001898:	2316      	movs	r3, #22
 800189a:	6013      	str	r3, [r2, #0]
	return -1;
 800189c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <_exit>:

void _exit (int status)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018b0:	f04f 31ff 	mov.w	r1, #4294967295
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff ffe7 	bl	8001888 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018ba:	e7fe      	b.n	80018ba <_exit+0x12>

080018bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	e00a      	b.n	80018e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018ce:	f3af 8000 	nop.w
 80018d2:	4601      	mov	r1, r0
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	1c5a      	adds	r2, r3, #1
 80018d8:	60ba      	str	r2, [r7, #8]
 80018da:	b2ca      	uxtb	r2, r1
 80018dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	3301      	adds	r3, #1
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	dbf0      	blt.n	80018ce <_read+0x12>
	}

return len;
 80018ec:	687b      	ldr	r3, [r7, #4]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b086      	sub	sp, #24
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	60f8      	str	r0, [r7, #12]
 80018fe:	60b9      	str	r1, [r7, #8]
 8001900:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	e009      	b.n	800191c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	60ba      	str	r2, [r7, #8]
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	3301      	adds	r3, #1
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	429a      	cmp	r2, r3
 8001922:	dbf1      	blt.n	8001908 <_write+0x12>
	}
	return len;
 8001924:	687b      	ldr	r3, [r7, #4]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <_close>:

int _close(int file)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
	return -1;
 8001936:	f04f 33ff 	mov.w	r3, #4294967295
}
 800193a:	4618      	mov	r0, r3
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001956:	605a      	str	r2, [r3, #4]
	return 0;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <_isatty>:

int _isatty(int file)
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
	return 1;
 800196e:	2301      	movs	r3, #1
}
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
	return 0;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
	...

08001998 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019a0:	4a14      	ldr	r2, [pc, #80]	; (80019f4 <_sbrk+0x5c>)
 80019a2:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <_sbrk+0x60>)
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019ac:	4b13      	ldr	r3, [pc, #76]	; (80019fc <_sbrk+0x64>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d102      	bne.n	80019ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019b4:	4b11      	ldr	r3, [pc, #68]	; (80019fc <_sbrk+0x64>)
 80019b6:	4a12      	ldr	r2, [pc, #72]	; (8001a00 <_sbrk+0x68>)
 80019b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ba:	4b10      	ldr	r3, [pc, #64]	; (80019fc <_sbrk+0x64>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4413      	add	r3, r2
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d207      	bcs.n	80019d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019c8:	f008 fc4c 	bl	800a264 <__errno>
 80019cc:	4602      	mov	r2, r0
 80019ce:	230c      	movs	r3, #12
 80019d0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80019d2:	f04f 33ff 	mov.w	r3, #4294967295
 80019d6:	e009      	b.n	80019ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019d8:	4b08      	ldr	r3, [pc, #32]	; (80019fc <_sbrk+0x64>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019de:	4b07      	ldr	r3, [pc, #28]	; (80019fc <_sbrk+0x64>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	4a05      	ldr	r2, [pc, #20]	; (80019fc <_sbrk+0x64>)
 80019e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ea:	68fb      	ldr	r3, [r7, #12]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	24100000 	.word	0x24100000
 80019f8:	00000400 	.word	0x00000400
 80019fc:	240000ac 	.word	0x240000ac
 8001a00:	240003e8 	.word	0x240003e8

08001a04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a08:	4b34      	ldr	r3, [pc, #208]	; (8001adc <SystemInit+0xd8>)
 8001a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a0e:	4a33      	ldr	r2, [pc, #204]	; (8001adc <SystemInit+0xd8>)
 8001a10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a18:	4b31      	ldr	r3, [pc, #196]	; (8001ae0 <SystemInit+0xdc>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 030f 	and.w	r3, r3, #15
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d807      	bhi.n	8001a34 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a24:	4b2e      	ldr	r3, [pc, #184]	; (8001ae0 <SystemInit+0xdc>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f023 030f 	bic.w	r3, r3, #15
 8001a2c:	4a2c      	ldr	r2, [pc, #176]	; (8001ae0 <SystemInit+0xdc>)
 8001a2e:	f043 0303 	orr.w	r3, r3, #3
 8001a32:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a34:	4b2b      	ldr	r3, [pc, #172]	; (8001ae4 <SystemInit+0xe0>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a2a      	ldr	r2, [pc, #168]	; (8001ae4 <SystemInit+0xe0>)
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a40:	4b28      	ldr	r3, [pc, #160]	; (8001ae4 <SystemInit+0xe0>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a46:	4b27      	ldr	r3, [pc, #156]	; (8001ae4 <SystemInit+0xe0>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	4926      	ldr	r1, [pc, #152]	; (8001ae4 <SystemInit+0xe0>)
 8001a4c:	4b26      	ldr	r3, [pc, #152]	; (8001ae8 <SystemInit+0xe4>)
 8001a4e:	4013      	ands	r3, r2
 8001a50:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a52:	4b23      	ldr	r3, [pc, #140]	; (8001ae0 <SystemInit+0xdc>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	2b03      	cmp	r3, #3
 8001a5c:	d907      	bls.n	8001a6e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a5e:	4b20      	ldr	r3, [pc, #128]	; (8001ae0 <SystemInit+0xdc>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f023 030f 	bic.w	r3, r3, #15
 8001a66:	4a1e      	ldr	r2, [pc, #120]	; (8001ae0 <SystemInit+0xdc>)
 8001a68:	f043 0303 	orr.w	r3, r3, #3
 8001a6c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001a6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <SystemInit+0xe0>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001a74:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <SystemInit+0xe0>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <SystemInit+0xe0>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a80:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <SystemInit+0xe0>)
 8001a82:	4a1a      	ldr	r2, [pc, #104]	; (8001aec <SystemInit+0xe8>)
 8001a84:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a86:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <SystemInit+0xe0>)
 8001a88:	4a19      	ldr	r2, [pc, #100]	; (8001af0 <SystemInit+0xec>)
 8001a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a8c:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <SystemInit+0xe0>)
 8001a8e:	4a19      	ldr	r2, [pc, #100]	; (8001af4 <SystemInit+0xf0>)
 8001a90:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a92:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <SystemInit+0xe0>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a98:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <SystemInit+0xe0>)
 8001a9a:	4a16      	ldr	r2, [pc, #88]	; (8001af4 <SystemInit+0xf0>)
 8001a9c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a9e:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <SystemInit+0xe0>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001aa4:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <SystemInit+0xe0>)
 8001aa6:	4a13      	ldr	r2, [pc, #76]	; (8001af4 <SystemInit+0xf0>)
 8001aa8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <SystemInit+0xe0>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <SystemInit+0xe0>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a0b      	ldr	r2, [pc, #44]	; (8001ae4 <SystemInit+0xe0>)
 8001ab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001abc:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <SystemInit+0xe0>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <SystemInit+0xf4>)
 8001ac4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001ac8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001aca:	4b04      	ldr	r3, [pc, #16]	; (8001adc <SystemInit+0xd8>)
 8001acc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ad0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	e000ed00 	.word	0xe000ed00
 8001ae0:	52002000 	.word	0x52002000
 8001ae4:	58024400 	.word	0x58024400
 8001ae8:	eaf6ed7f 	.word	0xeaf6ed7f
 8001aec:	02020200 	.word	0x02020200
 8001af0:	01ff0000 	.word	0x01ff0000
 8001af4:	01010280 	.word	0x01010280
 8001af8:	52004000 	.word	0x52004000

08001afc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001afc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b34 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b00:	f7ff ff80 	bl	8001a04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001b04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b06:	e003      	b.n	8001b10 <LoopCopyDataInit>

08001b08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001b0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b0e:	3104      	adds	r1, #4

08001b10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b10:	480a      	ldr	r0, [pc, #40]	; (8001b3c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001b14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b18:	d3f6      	bcc.n	8001b08 <CopyDataInit>
  ldr  r2, =_sbss
 8001b1a:	4a0a      	ldr	r2, [pc, #40]	; (8001b44 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001b1c:	e002      	b.n	8001b24 <LoopFillZerobss>

08001b1e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001b1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b20:	f842 3b04 	str.w	r3, [r2], #4

08001b24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b24:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001b26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b28:	d3f9      	bcc.n	8001b1e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b2a:	f008 fbb5 	bl	800a298 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b2e:	f7fe fd5f 	bl	80005f0 <main>
  bx  lr
 8001b32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b34:	24100000 	.word	0x24100000
  ldr  r3, =_sidata
 8001b38:	0800b500 	.word	0x0800b500
  ldr  r0, =_sdata
 8001b3c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001b40:	2400007c 	.word	0x2400007c
  ldr  r2, =_sbss
 8001b44:	2400007c 	.word	0x2400007c
  ldr  r3, = _ebss
 8001b48:	240003e8 	.word	0x240003e8

08001b4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b4c:	e7fe      	b.n	8001b4c <ADC_IRQHandler>
	...

08001b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b56:	2003      	movs	r0, #3
 8001b58:	f001 f88a 	bl	8002c70 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001b5c:	f004 fd20 	bl	80065a0 <HAL_RCC_GetSysClockFreq>
 8001b60:	4601      	mov	r1, r0
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <HAL_Init+0x68>)
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	0a1b      	lsrs	r3, r3, #8
 8001b68:	f003 030f 	and.w	r3, r3, #15
 8001b6c:	4a13      	ldr	r2, [pc, #76]	; (8001bbc <HAL_Init+0x6c>)
 8001b6e:	5cd3      	ldrb	r3, [r2, r3]
 8001b70:	f003 031f 	and.w	r3, r3, #31
 8001b74:	fa21 f303 	lsr.w	r3, r1, r3
 8001b78:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001b7a:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <HAL_Init+0x68>)
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	4a0e      	ldr	r2, [pc, #56]	; (8001bbc <HAL_Init+0x6c>)
 8001b84:	5cd3      	ldrb	r3, [r2, r3]
 8001b86:	f003 031f 	and.w	r3, r3, #31
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b90:	4a0b      	ldr	r2, [pc, #44]	; (8001bc0 <HAL_Init+0x70>)
 8001b92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b94:	4a0b      	ldr	r2, [pc, #44]	; (8001bc4 <HAL_Init+0x74>)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	f000 f814 	bl	8001bc8 <HAL_InitTick>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e002      	b.n	8001bb0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001baa:	f7ff fc15 	bl	80013d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	58024400 	.word	0x58024400
 8001bbc:	0800b45c 	.word	0x0800b45c
 8001bc0:	2400000c 	.word	0x2400000c
 8001bc4:	24000008 	.word	0x24000008

08001bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001bd0:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <HAL_InitTick+0x60>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e021      	b.n	8001c20 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001bdc:	4b13      	ldr	r3, [pc, #76]	; (8001c2c <HAL_InitTick+0x64>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <HAL_InitTick+0x60>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	4619      	mov	r1, r3
 8001be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f001 f86f 	bl	8002cd6 <HAL_SYSTICK_Config>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e00e      	b.n	8001c20 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b0f      	cmp	r3, #15
 8001c06:	d80a      	bhi.n	8001c1e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c10:	f001 f839 	bl	8002c86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c14:	4a06      	ldr	r2, [pc, #24]	; (8001c30 <HAL_InitTick+0x68>)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	e000      	b.n	8001c20 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	24000014 	.word	0x24000014
 8001c2c:	24000008 	.word	0x24000008
 8001c30:	24000010 	.word	0x24000010

08001c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_IncTick+0x20>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_IncTick+0x24>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4413      	add	r3, r2
 8001c44:	4a04      	ldr	r2, [pc, #16]	; (8001c58 <HAL_IncTick+0x24>)
 8001c46:	6013      	str	r3, [r2, #0]
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	24000014 	.word	0x24000014
 8001c58:	240003e0 	.word	0x240003e0

08001c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c60:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <HAL_GetTick+0x14>)
 8001c62:	681b      	ldr	r3, [r3, #0]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	240003e0 	.word	0x240003e0

08001c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c7c:	f7ff ffee 	bl	8001c5c <HAL_GetTick>
 8001c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c8c:	d005      	beq.n	8001c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c8e:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <HAL_Delay+0x40>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	461a      	mov	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4413      	add	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c9a:	bf00      	nop
 8001c9c:	f7ff ffde 	bl	8001c5c <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d8f7      	bhi.n	8001c9c <HAL_Delay+0x28>
  {
  }
}
 8001cac:	bf00      	nop
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	24000014 	.word	0x24000014

08001cb8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	609a      	str	r2, [r3, #8]
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b087      	sub	sp, #28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
 8001d2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	3360      	adds	r3, #96	; 0x60
 8001d32:	461a      	mov	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	430b      	orrs	r3, r1
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001d54:	bf00      	nop
 8001d56:	371c      	adds	r7, #28
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	f003 031f 	and.w	r3, r3, #31
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d80:	431a      	orrs	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	611a      	str	r2, [r3, #16]
}
 8001d86:	bf00      	nop
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b087      	sub	sp, #28
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	60f8      	str	r0, [r7, #12]
 8001d9a:	60b9      	str	r1, [r7, #8]
 8001d9c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	3360      	adds	r3, #96	; 0x60
 8001da2:	461a      	mov	r2, r3
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	431a      	orrs	r2, r3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	601a      	str	r2, [r3, #0]
  }
}
 8001dbc:	bf00      	nop
 8001dbe:	371c      	adds	r7, #28
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b087      	sub	sp, #28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	3330      	adds	r3, #48	; 0x30
 8001dd8:	461a      	mov	r2, r3
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	0a1b      	lsrs	r3, r3, #8
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	f003 030c 	and.w	r3, r3, #12
 8001de4:	4413      	add	r3, r2
 8001de6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	f003 031f 	and.w	r3, r3, #31
 8001df2:	211f      	movs	r1, #31
 8001df4:	fa01 f303 	lsl.w	r3, r1, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	0e9b      	lsrs	r3, r3, #26
 8001e00:	f003 011f 	and.w	r1, r3, #31
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	f003 031f 	and.w	r3, r3, #31
 8001e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e14:	bf00      	nop
 8001e16:	371c      	adds	r7, #28
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b087      	sub	sp, #28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	3314      	adds	r3, #20
 8001e30:	461a      	mov	r2, r3
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	0e5b      	lsrs	r3, r3, #25
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	4413      	add	r3, r2
 8001e3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	0d1b      	lsrs	r3, r3, #20
 8001e48:	f003 031f 	and.w	r3, r3, #31
 8001e4c:	2107      	movs	r1, #7
 8001e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	401a      	ands	r2, r3
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	0d1b      	lsrs	r3, r3, #20
 8001e5a:	f003 031f 	and.w	r3, r3, #31
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	fa01 f303 	lsl.w	r3, r1, r3
 8001e64:	431a      	orrs	r2, r3
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e6a:	bf00      	nop
 8001e6c:	371c      	adds	r7, #28
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e90:	43db      	mvns	r3, r3
 8001e92:	401a      	ands	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f003 0318 	and.w	r3, r3, #24
 8001e9a:	4908      	ldr	r1, [pc, #32]	; (8001ebc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e9c:	40d9      	lsrs	r1, r3
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	400b      	ands	r3, r1
 8001ea2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001eae:	bf00      	nop
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	000fffff 	.word	0x000fffff

08001ec0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001ece:	4013      	ands	r3, r2
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6093      	str	r3, [r2, #8]
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	5fffffc0 	.word	0x5fffffc0

08001ee4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ef8:	d101      	bne.n	8001efe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <LL_ADC_EnableInternalRegulator+0x24>)
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	6fffffc0 	.word	0x6fffffc0

08001f34 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f48:	d101      	bne.n	8001f4e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <LL_ADC_IsEnabled+0x18>
 8001f70:	2301      	movs	r3, #1
 8001f72:	e000      	b.n	8001f76 <LL_ADC_IsEnabled+0x1a>
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 0304 	and.w	r3, r3, #4
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d101      	bne.n	8001f9a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d101      	bne.n	8001fc0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
	...

08001fd0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fd0:	b590      	push	{r4, r7, lr}
 8001fd2:	b089      	sub	sp, #36	; 0x24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e137      	b.n	800225a <HAL_ADC_Init+0x28a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d109      	bne.n	800200c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff fa07 	bl	800140c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff ff67 	bl	8001ee4 <LL_ADC_IsDeepPowerDownEnabled>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d004      	beq.n	8002026 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ff4d 	bl	8001ec0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff ff82 	bl	8001f34 <LL_ADC_IsInternalRegulatorEnabled>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d113      	bne.n	800205e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff ff66 	bl	8001f0c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002040:	4b88      	ldr	r3, [pc, #544]	; (8002264 <HAL_ADC_Init+0x294>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	099b      	lsrs	r3, r3, #6
 8002046:	4a88      	ldr	r2, [pc, #544]	; (8002268 <HAL_ADC_Init+0x298>)
 8002048:	fba2 2303 	umull	r2, r3, r2, r3
 800204c:	099b      	lsrs	r3, r3, #6
 800204e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002050:	e002      	b.n	8002058 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	3b01      	subs	r3, #1
 8002056:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f9      	bne.n	8002052 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff ff66 	bl	8001f34 <LL_ADC_IsInternalRegulatorEnabled>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10d      	bne.n	800208a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002072:	f043 0210 	orr.w	r2, r3, #16
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207e:	f043 0201 	orr.w	r2, r3, #1
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff ff77 	bl	8001f82 <LL_ADC_REG_IsConversionOngoing>
 8002094:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209a:	f003 0310 	and.w	r3, r3, #16
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f040 80d2 	bne.w	8002248 <HAL_ADC_Init+0x278>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f040 80ce 	bne.w	8002248 <HAL_ADC_Init+0x278>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80020b4:	f043 0202 	orr.w	r2, r3, #2
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff ff4b 	bl	8001f5c <LL_ADC_IsEnabled>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d110      	bne.n	80020ee <HAL_ADC_Init+0x11e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020cc:	4867      	ldr	r0, [pc, #412]	; (800226c <HAL_ADC_Init+0x29c>)
 80020ce:	f7ff ff45 	bl	8001f5c <LL_ADC_IsEnabled>
 80020d2:	4604      	mov	r4, r0
 80020d4:	4866      	ldr	r0, [pc, #408]	; (8002270 <HAL_ADC_Init+0x2a0>)
 80020d6:	f7ff ff41 	bl	8001f5c <LL_ADC_IsEnabled>
 80020da:	4603      	mov	r3, r0
 80020dc:	4323      	orrs	r3, r4
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d105      	bne.n	80020ee <HAL_ADC_Init+0x11e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	4619      	mov	r1, r3
 80020e8:	4862      	ldr	r0, [pc, #392]	; (8002274 <HAL_ADC_Init+0x2a4>)
 80020ea:	f7ff fde5 	bl	8001cb8 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	7d5b      	ldrb	r3, [r3, #21]
 80020f2:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020f8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 80020fe:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	7f1b      	ldrb	r3, [r3, #28]
 8002104:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	7f1b      	ldrb	r3, [r3, #28]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d106      	bne.n	8002120 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	3b01      	subs	r3, #1
 8002118:	045b      	lsls	r3, r3, #17
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	2b00      	cmp	r3, #0
 8002126:	d009      	beq.n	800213c <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002134:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4313      	orrs	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68da      	ldr	r2, [r3, #12]
 8002142:	4b4d      	ldr	r3, [pc, #308]	; (8002278 <HAL_ADC_Init+0x2a8>)
 8002144:	4013      	ands	r3, r2
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6812      	ldr	r2, [r2, #0]
 800214a:	69b9      	ldr	r1, [r7, #24]
 800214c:	430b      	orrs	r3, r1
 800214e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff ff14 	bl	8001f82 <LL_ADC_REG_IsConversionOngoing>
 800215a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ff21 	bl	8001fa8 <LL_ADC_INJ_IsConversionOngoing>
 8002166:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d14a      	bne.n	8002204 <HAL_ADC_Init+0x234>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d147      	bne.n	8002204 <HAL_ADC_Init+0x234>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	7d1b      	ldrb	r3, [r3, #20]
 8002178:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800217e:	4313      	orrs	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68da      	ldr	r2, [r3, #12]
 8002188:	4b3c      	ldr	r3, [pc, #240]	; (800227c <HAL_ADC_Init+0x2ac>)
 800218a:	4013      	ands	r3, r2
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	69b9      	ldr	r1, [r7, #24]
 8002192:	430b      	orrs	r3, r1
 8002194:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800219c:	2b01      	cmp	r3, #1
 800219e:	d11b      	bne.n	80021d8 <HAL_ADC_Init+0x208>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a4:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	691a      	ldr	r2, [r3, #16]
 80021ac:	4b34      	ldr	r3, [pc, #208]	; (8002280 <HAL_ADC_Init+0x2b0>)
 80021ae:	4013      	ands	r3, r2
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021b4:	3a01      	subs	r2, #1
 80021b6:	0411      	lsls	r1, r2, #16
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021bc:	4311      	orrs	r1, r2
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80021c2:	4311      	orrs	r1, r2
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80021c8:	430a      	orrs	r2, r1
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f042 0201 	orr.w	r2, r2, #1
 80021d4:	611a      	str	r2, [r3, #16]
 80021d6:	e007      	b.n	80021e8 <HAL_ADC_Init+0x218>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	691a      	ldr	r2, [r3, #16]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0201 	bic.w	r2, r2, #1
 80021e6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 faee 	bl	80027e0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d10c      	bne.n	8002226 <HAL_ADC_Init+0x256>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f023 010f 	bic.w	r1, r3, #15
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	1e5a      	subs	r2, r3, #1
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	430a      	orrs	r2, r1
 8002222:	631a      	str	r2, [r3, #48]	; 0x30
 8002224:	e007      	b.n	8002236 <HAL_ADC_Init+0x266>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 020f 	bic.w	r2, r2, #15
 8002234:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223a:	f023 0303 	bic.w	r3, r3, #3
 800223e:	f043 0201 	orr.w	r2, r3, #1
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	655a      	str	r2, [r3, #84]	; 0x54
 8002246:	e007      	b.n	8002258 <HAL_ADC_Init+0x288>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224c:	f043 0210 	orr.w	r2, r3, #16
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002258:	7ffb      	ldrb	r3, [r7, #31]
}
 800225a:	4618      	mov	r0, r3
 800225c:	3724      	adds	r7, #36	; 0x24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd90      	pop	{r4, r7, pc}
 8002262:	bf00      	nop
 8002264:	24000008 	.word	0x24000008
 8002268:	053e2d63 	.word	0x053e2d63
 800226c:	40022000 	.word	0x40022000
 8002270:	40022100 	.word	0x40022100
 8002274:	40022300 	.word	0x40022300
 8002278:	fff0c003 	.word	0xfff0c003
 800227c:	ffffbffc 	.word	0xffffbffc
 8002280:	fc00f81e 	.word	0xfc00f81e

08002284 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002284:	b590      	push	{r4, r7, lr}
 8002286:	b099      	sub	sp, #100	; 0x64
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800228e:	2300      	movs	r3, #0
 8002290:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	4aa1      	ldr	r2, [pc, #644]	; (8002524 <HAL_ADC_ConfigChannel+0x2a0>)
 800229e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d101      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x2a>
 80022aa:	2302      	movs	r3, #2
 80022ac:	e283      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x532>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff fe61 	bl	8001f82 <LL_ADC_REG_IsConversionOngoing>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f040 8268 	bne.w	8002798 <HAL_ADC_ConfigChannel+0x514>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d108      	bne.n	80022e6 <HAL_ADC_ConfigChannel+0x62>
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	0e9b      	lsrs	r3, r3, #26
 80022da:	f003 031f 	and.w	r3, r3, #31
 80022de:	2201      	movs	r2, #1
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	e00f      	b.n	8002306 <HAL_ADC_ConfigChannel+0x82>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022ee:	fa93 f3a3 	rbit	r3, r3
 80022f2:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022f6:	fab3 f383 	clz	r3, r3
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	f003 031f 	and.w	r3, r3, #31
 8002300:	2201      	movs	r2, #1
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6812      	ldr	r2, [r2, #0]
 800230a:	69d1      	ldr	r1, [r2, #28]
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6812      	ldr	r2, [r2, #0]
 8002310:	430b      	orrs	r3, r1
 8002312:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6818      	ldr	r0, [r3, #0]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	6859      	ldr	r1, [r3, #4]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	461a      	mov	r2, r3
 8002322:	f7ff fd51 	bl	8001dc8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff fe29 	bl	8001f82 <LL_ADC_REG_IsConversionOngoing>
 8002330:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff fe36 	bl	8001fa8 <LL_ADC_INJ_IsConversionOngoing>
 800233c:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800233e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002340:	2b00      	cmp	r3, #0
 8002342:	f040 80a0 	bne.w	8002486 <HAL_ADC_ConfigChannel+0x202>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002348:	2b00      	cmp	r3, #0
 800234a:	f040 809c 	bne.w	8002486 <HAL_ADC_ConfigChannel+0x202>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6818      	ldr	r0, [r3, #0]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	6819      	ldr	r1, [r3, #0]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	461a      	mov	r2, r3
 800235c:	f7ff fd60 	bl	8001e20 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	f003 0310 	and.w	r3, r3, #16
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10b      	bne.n	8002386 <HAL_ADC_ConfigChannel+0x102>
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	695a      	ldr	r2, [r3, #20]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	089b      	lsrs	r3, r3, #2
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	e00a      	b.n	800239c <HAL_ADC_ConfigChannel+0x118>
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	089b      	lsrs	r3, r3, #2
 8002392:	f003 0304 	and.w	r3, r3, #4
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	d027      	beq.n	80023f6 <HAL_ADC_ConfigChannel+0x172>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6818      	ldr	r0, [r3, #0]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	6919      	ldr	r1, [r3, #16]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023b4:	f7ff fcb4 	bl	8001d20 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6818      	ldr	r0, [r3, #0]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	6919      	ldr	r1, [r3, #16]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	7e5b      	ldrb	r3, [r3, #25]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d102      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x14a>
 80023c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80023cc:	e000      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x14c>
 80023ce:	2300      	movs	r3, #0
 80023d0:	461a      	mov	r2, r3
 80023d2:	f7ff fcde 	bl	8001d92 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6818      	ldr	r0, [r3, #0]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	6919      	ldr	r1, [r3, #16]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	7e1b      	ldrb	r3, [r3, #24]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d102      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x168>
 80023e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023ea:	e000      	b.n	80023ee <HAL_ADC_ConfigChannel+0x16a>
 80023ec:	2300      	movs	r3, #0
 80023ee:	461a      	mov	r2, r3
 80023f0:	f7ff fcb6 	bl	8001d60 <LL_ADC_SetDataRightShift>
 80023f4:	e047      	b.n	8002486 <HAL_ADC_ConfigChannel+0x202>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	069b      	lsls	r3, r3, #26
 8002406:	429a      	cmp	r2, r3
 8002408:	d107      	bne.n	800241a <HAL_ADC_ConfigChannel+0x196>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002418:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002420:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	069b      	lsls	r3, r3, #26
 800242a:	429a      	cmp	r2, r3
 800242c:	d107      	bne.n	800243e <HAL_ADC_ConfigChannel+0x1ba>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800243c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002444:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	069b      	lsls	r3, r3, #26
 800244e:	429a      	cmp	r2, r3
 8002450:	d107      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x1de>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002460:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002468:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	069b      	lsls	r3, r3, #26
 8002472:	429a      	cmp	r2, r3
 8002474:	d107      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x202>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002484:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff fd66 	bl	8001f5c <LL_ADC_IsEnabled>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	f040 8189 	bne.w	80027aa <HAL_ADC_ConfigChannel+0x526>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6818      	ldr	r0, [r3, #0]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	6819      	ldr	r1, [r3, #0]
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	461a      	mov	r2, r3
 80024a6:	f7ff fce7 	bl	8001e78 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	4a1d      	ldr	r2, [pc, #116]	; (8002524 <HAL_ADC_ConfigChannel+0x2a0>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	f040 80ff 	bne.w	80026b4 <HAL_ADC_ConfigChannel+0x430>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10b      	bne.n	80024de <HAL_ADC_ConfigChannel+0x25a>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	0e9b      	lsrs	r3, r3, #26
 80024cc:	3301      	adds	r3, #1
 80024ce:	f003 031f 	and.w	r3, r3, #31
 80024d2:	2b09      	cmp	r3, #9
 80024d4:	bf94      	ite	ls
 80024d6:	2301      	movls	r3, #1
 80024d8:	2300      	movhi	r3, #0
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	e012      	b.n	8002504 <HAL_ADC_ConfigChannel+0x280>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024e6:	fa93 f3a3 	rbit	r3, r3
 80024ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80024ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ee:	fab3 f383 	clz	r3, r3
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	3301      	adds	r3, #1
 80024f6:	f003 031f 	and.w	r3, r3, #31
 80024fa:	2b09      	cmp	r3, #9
 80024fc:	bf94      	ite	ls
 80024fe:	2301      	movls	r3, #1
 8002500:	2300      	movhi	r3, #0
 8002502:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002504:	2b00      	cmp	r3, #0
 8002506:	d066      	beq.n	80025d6 <HAL_ADC_ConfigChannel+0x352>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002510:	2b00      	cmp	r3, #0
 8002512:	d109      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x2a4>
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	0e9b      	lsrs	r3, r3, #26
 800251a:	3301      	adds	r3, #1
 800251c:	069b      	lsls	r3, r3, #26
 800251e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002522:	e010      	b.n	8002546 <HAL_ADC_ConfigChannel+0x2c2>
 8002524:	47ff0000 	.word	0x47ff0000
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002530:	fa93 f3a3 	rbit	r3, r3
 8002534:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002538:	fab3 f383 	clz	r3, r3
 800253c:	b2db      	uxtb	r3, r3
 800253e:	3301      	adds	r3, #1
 8002540:	069b      	lsls	r3, r3, #26
 8002542:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800254e:	2b00      	cmp	r3, #0
 8002550:	d109      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x2e2>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	0e9b      	lsrs	r3, r3, #26
 8002558:	3301      	adds	r3, #1
 800255a:	f003 031f 	and.w	r3, r3, #31
 800255e:	2101      	movs	r1, #1
 8002560:	fa01 f303 	lsl.w	r3, r1, r3
 8002564:	e010      	b.n	8002588 <HAL_ADC_ConfigChannel+0x304>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256e:	fa93 f3a3 	rbit	r3, r3
 8002572:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002576:	fab3 f383 	clz	r3, r3
 800257a:	b2db      	uxtb	r3, r3
 800257c:	3301      	adds	r3, #1
 800257e:	f003 031f 	and.w	r3, r3, #31
 8002582:	2101      	movs	r1, #1
 8002584:	fa01 f303 	lsl.w	r3, r1, r3
 8002588:	ea42 0103 	orr.w	r1, r2, r3
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10a      	bne.n	80025ae <HAL_ADC_ConfigChannel+0x32a>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	0e9b      	lsrs	r3, r3, #26
 800259e:	3301      	adds	r3, #1
 80025a0:	f003 021f 	and.w	r2, r3, #31
 80025a4:	4613      	mov	r3, r2
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	4413      	add	r3, r2
 80025aa:	051b      	lsls	r3, r3, #20
 80025ac:	e011      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x34e>
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b6:	fa93 f3a3 	rbit	r3, r3
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	fab3 f383 	clz	r3, r3
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	3301      	adds	r3, #1
 80025c6:	f003 021f 	and.w	r2, r3, #31
 80025ca:	4613      	mov	r3, r2
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4413      	add	r3, r2
 80025d0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025d2:	430b      	orrs	r3, r1
 80025d4:	e069      	b.n	80026aa <HAL_ADC_ConfigChannel+0x426>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d107      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x36e>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	0e9b      	lsrs	r3, r3, #26
 80025e8:	3301      	adds	r3, #1
 80025ea:	069b      	lsls	r3, r3, #26
 80025ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025f0:	e00e      	b.n	8002610 <HAL_ADC_ConfigChannel+0x38c>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f8:	6a3b      	ldr	r3, [r7, #32]
 80025fa:	fa93 f3a3 	rbit	r3, r3
 80025fe:	61fb      	str	r3, [r7, #28]
  return result;
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	fab3 f383 	clz	r3, r3
 8002606:	b2db      	uxtb	r3, r3
 8002608:	3301      	adds	r3, #1
 800260a:	069b      	lsls	r3, r3, #26
 800260c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002618:	2b00      	cmp	r3, #0
 800261a:	d109      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x3ac>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	0e9b      	lsrs	r3, r3, #26
 8002622:	3301      	adds	r3, #1
 8002624:	f003 031f 	and.w	r3, r3, #31
 8002628:	2101      	movs	r1, #1
 800262a:	fa01 f303 	lsl.w	r3, r1, r3
 800262e:	e010      	b.n	8002652 <HAL_ADC_ConfigChannel+0x3ce>
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	fa93 f3a3 	rbit	r3, r3
 800263c:	617b      	str	r3, [r7, #20]
  return result;
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	fab3 f383 	clz	r3, r3
 8002644:	b2db      	uxtb	r3, r3
 8002646:	3301      	adds	r3, #1
 8002648:	f003 031f 	and.w	r3, r3, #31
 800264c:	2101      	movs	r1, #1
 800264e:	fa01 f303 	lsl.w	r3, r1, r3
 8002652:	ea42 0103 	orr.w	r1, r2, r3
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10d      	bne.n	800267e <HAL_ADC_ConfigChannel+0x3fa>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	0e9b      	lsrs	r3, r3, #26
 8002668:	3301      	adds	r3, #1
 800266a:	f003 021f 	and.w	r2, r3, #31
 800266e:	4613      	mov	r3, r2
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	4413      	add	r3, r2
 8002674:	3b1e      	subs	r3, #30
 8002676:	051b      	lsls	r3, r3, #20
 8002678:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800267c:	e014      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x424>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	60fb      	str	r3, [r7, #12]
  return result;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	fab3 f383 	clz	r3, r3
 8002692:	b2db      	uxtb	r3, r3
 8002694:	3301      	adds	r3, #1
 8002696:	f003 021f 	and.w	r2, r3, #31
 800269a:	4613      	mov	r3, r2
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	4413      	add	r3, r2
 80026a0:	3b1e      	subs	r3, #30
 80026a2:	051b      	lsls	r3, r3, #20
 80026a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026a8:	430b      	orrs	r3, r1
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	6892      	ldr	r2, [r2, #8]
 80026ae:	4619      	mov	r1, r3
 80026b0:	f7ff fbb6 	bl	8001e20 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	da76      	bge.n	80027aa <HAL_ADC_ConfigChannel+0x526>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026bc:	4840      	ldr	r0, [pc, #256]	; (80027c0 <HAL_ADC_ConfigChannel+0x53c>)
 80026be:	f7ff fb21 	bl	8001d04 <LL_ADC_GetCommonPathInternalCh>
 80026c2:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026c4:	483f      	ldr	r0, [pc, #252]	; (80027c4 <HAL_ADC_ConfigChannel+0x540>)
 80026c6:	f7ff fc49 	bl	8001f5c <LL_ADC_IsEnabled>
 80026ca:	4604      	mov	r4, r0
 80026cc:	483e      	ldr	r0, [pc, #248]	; (80027c8 <HAL_ADC_ConfigChannel+0x544>)
 80026ce:	f7ff fc45 	bl	8001f5c <LL_ADC_IsEnabled>
 80026d2:	4603      	mov	r3, r0
 80026d4:	4323      	orrs	r3, r4
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d154      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x500>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a3b      	ldr	r2, [pc, #236]	; (80027cc <HAL_ADC_ConfigChannel+0x548>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d121      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x4a4>
 80026e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d11c      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x4a4>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a35      	ldr	r2, [pc, #212]	; (80027c8 <HAL_ADC_ConfigChannel+0x544>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d158      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80026f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026fe:	4619      	mov	r1, r3
 8002700:	482f      	ldr	r0, [pc, #188]	; (80027c0 <HAL_ADC_ConfigChannel+0x53c>)
 8002702:	f7ff faec 	bl	8001cde <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002706:	4b32      	ldr	r3, [pc, #200]	; (80027d0 <HAL_ADC_ConfigChannel+0x54c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	099b      	lsrs	r3, r3, #6
 800270c:	4a31      	ldr	r2, [pc, #196]	; (80027d4 <HAL_ADC_ConfigChannel+0x550>)
 800270e:	fba2 2303 	umull	r2, r3, r2, r3
 8002712:	099b      	lsrs	r3, r3, #6
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002718:	e002      	b.n	8002720 <HAL_ADC_ConfigChannel+0x49c>
              {
                wait_loop_index--;
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	3b01      	subs	r3, #1
 800271e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f9      	bne.n	800271a <HAL_ADC_ConfigChannel+0x496>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002726:	e040      	b.n	80027aa <HAL_ADC_ConfigChannel+0x526>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a2a      	ldr	r2, [pc, #168]	; (80027d8 <HAL_ADC_ConfigChannel+0x554>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d111      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x4d2>
 8002732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002734:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10c      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x4d2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a21      	ldr	r2, [pc, #132]	; (80027c8 <HAL_ADC_ConfigChannel+0x544>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d131      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002748:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800274c:	4619      	mov	r1, r3
 800274e:	481c      	ldr	r0, [pc, #112]	; (80027c0 <HAL_ADC_ConfigChannel+0x53c>)
 8002750:	f7ff fac5 	bl	8001cde <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002754:	e029      	b.n	80027aa <HAL_ADC_ConfigChannel+0x526>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a20      	ldr	r2, [pc, #128]	; (80027dc <HAL_ADC_ConfigChannel+0x558>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d124      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x526>
 8002760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d11f      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x526>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a16      	ldr	r2, [pc, #88]	; (80027c8 <HAL_ADC_ConfigChannel+0x544>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d11a      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002776:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800277a:	4619      	mov	r1, r3
 800277c:	4810      	ldr	r0, [pc, #64]	; (80027c0 <HAL_ADC_ConfigChannel+0x53c>)
 800277e:	f7ff faae 	bl	8001cde <LL_ADC_SetCommonPathInternalCh>
 8002782:	e012      	b.n	80027aa <HAL_ADC_ConfigChannel+0x526>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002788:	f043 0220 	orr.w	r2, r3, #32
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002796:	e008      	b.n	80027aa <HAL_ADC_ConfigChannel+0x526>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279c:	f043 0220 	orr.w	r2, r3, #32
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80027b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3764      	adds	r7, #100	; 0x64
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd90      	pop	{r4, r7, pc}
 80027be:	bf00      	nop
 80027c0:	40022300 	.word	0x40022300
 80027c4:	40022000 	.word	0x40022000
 80027c8:	40022100 	.word	0x40022100
 80027cc:	cb840000 	.word	0xcb840000
 80027d0:	24000008 	.word	0x24000008
 80027d4:	053e2d63 	.word	0x053e2d63
 80027d8:	bac04000 	.word	0xbac04000
 80027dc:	cfb80000 	.word	0xcfb80000

080027e0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80027e8:	4b56      	ldr	r3, [pc, #344]	; (8002944 <ADC_ConfigureBoostMode+0x164>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d01a      	beq.n	800282a <ADC_ConfigureBoostMode+0x4a>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80027f4:	f004 f846 	bl	8006884 <HAL_RCC_GetHCLKFreq>
 80027f8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002802:	d006      	beq.n	8002812 <ADC_ConfigureBoostMode+0x32>
 8002804:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002808:	d00b      	beq.n	8002822 <ADC_ConfigureBoostMode+0x42>
 800280a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800280e:	d000      	beq.n	8002812 <ADC_ConfigureBoostMode+0x32>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8002810:	e05d      	b.n	80028ce <ADC_ConfigureBoostMode+0xee>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	0c1b      	lsrs	r3, r3, #16
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	fbb2 f3f3 	udiv	r3, r2, r3
 800281e:	60fb      	str	r3, [r7, #12]
        break;
 8002820:	e055      	b.n	80028ce <ADC_ConfigureBoostMode+0xee>
        freq /= 4UL;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	089b      	lsrs	r3, r3, #2
 8002826:	60fb      	str	r3, [r7, #12]
        break;
 8002828:	e051      	b.n	80028ce <ADC_ConfigureBoostMode+0xee>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800282a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800282e:	f004 ff39 	bl	80076a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002832:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800283c:	d02a      	beq.n	8002894 <ADC_ConfigureBoostMode+0xb4>
 800283e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002842:	d813      	bhi.n	800286c <ADC_ConfigureBoostMode+0x8c>
 8002844:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002848:	d024      	beq.n	8002894 <ADC_ConfigureBoostMode+0xb4>
 800284a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800284e:	d806      	bhi.n	800285e <ADC_ConfigureBoostMode+0x7e>
 8002850:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002854:	d01e      	beq.n	8002894 <ADC_ConfigureBoostMode+0xb4>
 8002856:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800285a:	d01b      	beq.n	8002894 <ADC_ConfigureBoostMode+0xb4>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 800285c:	e037      	b.n	80028ce <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 800285e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002862:	d017      	beq.n	8002894 <ADC_ConfigureBoostMode+0xb4>
 8002864:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002868:	d014      	beq.n	8002894 <ADC_ConfigureBoostMode+0xb4>
        break;
 800286a:	e030      	b.n	80028ce <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 800286c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002870:	d021      	beq.n	80028b6 <ADC_ConfigureBoostMode+0xd6>
 8002872:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002876:	d806      	bhi.n	8002886 <ADC_ConfigureBoostMode+0xa6>
 8002878:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800287c:	d013      	beq.n	80028a6 <ADC_ConfigureBoostMode+0xc6>
 800287e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002882:	d014      	beq.n	80028ae <ADC_ConfigureBoostMode+0xce>
        break;
 8002884:	e023      	b.n	80028ce <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 8002886:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800288a:	d018      	beq.n	80028be <ADC_ConfigureBoostMode+0xde>
 800288c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002890:	d019      	beq.n	80028c6 <ADC_ConfigureBoostMode+0xe6>
        break;
 8002892:	e01c      	b.n	80028ce <ADC_ConfigureBoostMode+0xee>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	0c9b      	lsrs	r3, r3, #18
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a2:	60fb      	str	r3, [r7, #12]
        break;
 80028a4:	e013      	b.n	80028ce <ADC_ConfigureBoostMode+0xee>
        freq /= 16UL;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	091b      	lsrs	r3, r3, #4
 80028aa:	60fb      	str	r3, [r7, #12]
        break;
 80028ac:	e00f      	b.n	80028ce <ADC_ConfigureBoostMode+0xee>
        freq /= 32UL;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	095b      	lsrs	r3, r3, #5
 80028b2:	60fb      	str	r3, [r7, #12]
        break;
 80028b4:	e00b      	b.n	80028ce <ADC_ConfigureBoostMode+0xee>
        freq /= 64UL;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	099b      	lsrs	r3, r3, #6
 80028ba:	60fb      	str	r3, [r7, #12]
        break;
 80028bc:	e007      	b.n	80028ce <ADC_ConfigureBoostMode+0xee>
        freq /= 128UL;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	09db      	lsrs	r3, r3, #7
 80028c2:	60fb      	str	r3, [r7, #12]
        break;
 80028c4:	e003      	b.n	80028ce <ADC_ConfigureBoostMode+0xee>
        freq /= 256UL;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	0a1b      	lsrs	r3, r3, #8
 80028ca:	60fb      	str	r3, [r7, #12]
        break;
 80028cc:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	085b      	lsrs	r3, r3, #1
 80028d2:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4a1c      	ldr	r2, [pc, #112]	; (8002948 <ADC_ConfigureBoostMode+0x168>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d808      	bhi.n	80028ee <ADC_ConfigureBoostMode+0x10e>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80028ea:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80028ec:	e025      	b.n	800293a <ADC_ConfigureBoostMode+0x15a>
  else if (freq <= 12500000UL)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	4a16      	ldr	r2, [pc, #88]	; (800294c <ADC_ConfigureBoostMode+0x16c>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d80a      	bhi.n	800290c <ADC_ConfigureBoostMode+0x12c>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002908:	609a      	str	r2, [r3, #8]
}
 800290a:	e016      	b.n	800293a <ADC_ConfigureBoostMode+0x15a>
  else if (freq <= 25000000UL)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4a10      	ldr	r2, [pc, #64]	; (8002950 <ADC_ConfigureBoostMode+0x170>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d80a      	bhi.n	800292a <ADC_ConfigureBoostMode+0x14a>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002926:	609a      	str	r2, [r3, #8]
}
 8002928:	e007      	b.n	800293a <ADC_ConfigureBoostMode+0x15a>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002938:	609a      	str	r2, [r3, #8]
}
 800293a:	bf00      	nop
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40022300 	.word	0x40022300
 8002948:	005f5e10 	.word	0x005f5e10
 800294c:	00bebc20 	.word	0x00bebc20
 8002950:	017d7840 	.word	0x017d7840

08002954 <LL_ADC_IsEnabled>:
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	2b01      	cmp	r3, #1
 8002966:	d101      	bne.n	800296c <LL_ADC_IsEnabled+0x18>
 8002968:	2301      	movs	r3, #1
 800296a:	e000      	b.n	800296e <LL_ADC_IsEnabled+0x1a>
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <LL_ADC_REG_IsConversionOngoing>:
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 0304 	and.w	r3, r3, #4
 800298a:	2b04      	cmp	r3, #4
 800298c:	d101      	bne.n	8002992 <LL_ADC_REG_IsConversionOngoing+0x18>
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80029a0:	b590      	push	{r4, r7, lr}
 80029a2:	b09f      	sub	sp, #124	; 0x7c
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d101      	bne.n	80029be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80029ba:	2302      	movs	r3, #2
 80029bc:	e07c      	b.n	8002ab8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a3d      	ldr	r2, [pc, #244]	; (8002ac0 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d102      	bne.n	80029d6 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80029d0:	4b3c      	ldr	r3, [pc, #240]	; (8002ac4 <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 80029d2:	60bb      	str	r3, [r7, #8]
 80029d4:	e001      	b.n	80029da <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80029d6:	2300      	movs	r3, #0
 80029d8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10b      	bne.n	80029f8 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e4:	f043 0220 	orr.w	r2, r3, #32
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e05f      	b.n	8002ab8 <HAL_ADCEx_MultiModeConfigChannel+0x118>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff ffbd 	bl	800297a <LL_ADC_REG_IsConversionOngoing>
 8002a00:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff ffb7 	bl	800297a <LL_ADC_REG_IsConversionOngoing>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d141      	bne.n	8002a96 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002a12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d13e      	bne.n	8002a96 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a18:	4b2b      	ldr	r3, [pc, #172]	; (8002ac8 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002a1a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d020      	beq.n	8002a66 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002a24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	431a      	orrs	r2, r3
 8002a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a34:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a36:	4822      	ldr	r0, [pc, #136]	; (8002ac0 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8002a38:	f7ff ff8c 	bl	8002954 <LL_ADC_IsEnabled>
 8002a3c:	4604      	mov	r4, r0
 8002a3e:	4821      	ldr	r0, [pc, #132]	; (8002ac4 <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 8002a40:	f7ff ff88 	bl	8002954 <LL_ADC_IsEnabled>
 8002a44:	4603      	mov	r3, r0
 8002a46:	4323      	orrs	r3, r4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d12e      	bne.n	8002aaa <HAL_ADCEx_MultiModeConfigChannel+0x10a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	4b1e      	ldr	r3, [pc, #120]	; (8002acc <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002a52:	4013      	ands	r3, r2
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	6811      	ldr	r1, [r2, #0]
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	6892      	ldr	r2, [r2, #8]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a62:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a64:	e021      	b.n	8002aaa <HAL_ADCEx_MultiModeConfigChannel+0x10a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a70:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a72:	4813      	ldr	r0, [pc, #76]	; (8002ac0 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8002a74:	f7ff ff6e 	bl	8002954 <LL_ADC_IsEnabled>
 8002a78:	4604      	mov	r4, r0
 8002a7a:	4812      	ldr	r0, [pc, #72]	; (8002ac4 <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 8002a7c:	f7ff ff6a 	bl	8002954 <LL_ADC_IsEnabled>
 8002a80:	4603      	mov	r3, r0
 8002a82:	4323      	orrs	r3, r4
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d110      	bne.n	8002aaa <HAL_ADCEx_MultiModeConfigChannel+0x10a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	4b0f      	ldr	r3, [pc, #60]	; (8002acc <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002a8e:	4013      	ands	r3, r2
 8002a90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a92:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a94:	e009      	b.n	8002aaa <HAL_ADCEx_MultiModeConfigChannel+0x10a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9a:	f043 0220 	orr.w	r2, r3, #32
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002aa8:	e000      	b.n	8002aac <HAL_ADCEx_MultiModeConfigChannel+0x10c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002aaa:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ab4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	377c      	adds	r7, #124	; 0x7c
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd90      	pop	{r4, r7, pc}
 8002ac0:	40022000 	.word	0x40022000
 8002ac4:	40022100 	.word	0x40022100
 8002ac8:	40022300 	.word	0x40022300
 8002acc:	fffff0e0 	.word	0xfffff0e0

08002ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <__NVIC_SetPriorityGrouping+0x40>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aec:	4013      	ands	r3, r2
 8002aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002af8:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <__NVIC_SetPriorityGrouping+0x44>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002afe:	4a04      	ldr	r2, [pc, #16]	; (8002b10 <__NVIC_SetPriorityGrouping+0x40>)
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	60d3      	str	r3, [r2, #12]
}
 8002b04:	bf00      	nop
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	e000ed00 	.word	0xe000ed00
 8002b14:	05fa0000 	.word	0x05fa0000

08002b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b1c:	4b04      	ldr	r3, [pc, #16]	; (8002b30 <__NVIC_GetPriorityGrouping+0x18>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	0a1b      	lsrs	r3, r3, #8
 8002b22:	f003 0307 	and.w	r3, r3, #7
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	db0b      	blt.n	8002b5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b46:	88fb      	ldrh	r3, [r7, #6]
 8002b48:	f003 021f 	and.w	r2, r3, #31
 8002b4c:	4907      	ldr	r1, [pc, #28]	; (8002b6c <__NVIC_EnableIRQ+0x38>)
 8002b4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	2001      	movs	r0, #1
 8002b56:	fa00 f202 	lsl.w	r2, r0, r2
 8002b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	e000e100 	.word	0xe000e100

08002b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	6039      	str	r1, [r7, #0]
 8002b7a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	db0a      	blt.n	8002b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	490c      	ldr	r1, [pc, #48]	; (8002bbc <__NVIC_SetPriority+0x4c>)
 8002b8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b8e:	0112      	lsls	r2, r2, #4
 8002b90:	b2d2      	uxtb	r2, r2
 8002b92:	440b      	add	r3, r1
 8002b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b98:	e00a      	b.n	8002bb0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	4908      	ldr	r1, [pc, #32]	; (8002bc0 <__NVIC_SetPriority+0x50>)
 8002ba0:	88fb      	ldrh	r3, [r7, #6]
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	3b04      	subs	r3, #4
 8002ba8:	0112      	lsls	r2, r2, #4
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	440b      	add	r3, r1
 8002bae:	761a      	strb	r2, [r3, #24]
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	e000e100 	.word	0xe000e100
 8002bc0:	e000ed00 	.word	0xe000ed00

08002bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b089      	sub	sp, #36	; 0x24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f003 0307 	and.w	r3, r3, #7
 8002bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	f1c3 0307 	rsb	r3, r3, #7
 8002bde:	2b04      	cmp	r3, #4
 8002be0:	bf28      	it	cs
 8002be2:	2304      	movcs	r3, #4
 8002be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	3304      	adds	r3, #4
 8002bea:	2b06      	cmp	r3, #6
 8002bec:	d902      	bls.n	8002bf4 <NVIC_EncodePriority+0x30>
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	3b03      	subs	r3, #3
 8002bf2:	e000      	b.n	8002bf6 <NVIC_EncodePriority+0x32>
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	43da      	mvns	r2, r3
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	401a      	ands	r2, r3
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	fa01 f303 	lsl.w	r3, r1, r3
 8002c16:	43d9      	mvns	r1, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c1c:	4313      	orrs	r3, r2
         );
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3724      	adds	r7, #36	; 0x24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
	...

08002c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3b01      	subs	r3, #1
 8002c38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c3c:	d301      	bcc.n	8002c42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e00f      	b.n	8002c62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c42:	4a0a      	ldr	r2, [pc, #40]	; (8002c6c <SysTick_Config+0x40>)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c4a:	210f      	movs	r1, #15
 8002c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c50:	f7ff ff8e 	bl	8002b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c54:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <SysTick_Config+0x40>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c5a:	4b04      	ldr	r3, [pc, #16]	; (8002c6c <SysTick_Config+0x40>)
 8002c5c:	2207      	movs	r2, #7
 8002c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	e000e010 	.word	0xe000e010

08002c70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f7ff ff29 	bl	8002ad0 <__NVIC_SetPriorityGrouping>
}
 8002c7e:	bf00      	nop
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b086      	sub	sp, #24
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	60b9      	str	r1, [r7, #8]
 8002c90:	607a      	str	r2, [r7, #4]
 8002c92:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c94:	f7ff ff40 	bl	8002b18 <__NVIC_GetPriorityGrouping>
 8002c98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	68b9      	ldr	r1, [r7, #8]
 8002c9e:	6978      	ldr	r0, [r7, #20]
 8002ca0:	f7ff ff90 	bl	8002bc4 <NVIC_EncodePriority>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002caa:	4611      	mov	r1, r2
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff ff5f 	bl	8002b70 <__NVIC_SetPriority>
}
 8002cb2:	bf00      	nop
 8002cb4:	3718      	adds	r7, #24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b082      	sub	sp, #8
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff ff33 	bl	8002b34 <__NVIC_EnableIRQ>
}
 8002cce:	bf00      	nop
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b082      	sub	sp, #8
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7ff ffa4 	bl	8002c2c <SysTick_Config>
 8002ce4:	4603      	mov	r3, r0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e014      	b.n	8002d2a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	791b      	ldrb	r3, [r3, #4]
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d105      	bne.n	8002d16 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f7fe fbf5 	bl	8001500 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2202      	movs	r2, #2
 8002d1a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
 8002d3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	795b      	ldrb	r3, [r3, #5]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d101      	bne.n	8002d48 <HAL_DAC_Start+0x16>
 8002d44:	2302      	movs	r3, #2
 8002d46:	e040      	b.n	8002dca <HAL_DAC_Start+0x98>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2202      	movs	r2, #2
 8002d52:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6819      	ldr	r1, [r3, #0]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	f003 0310 	and.w	r3, r3, #16
 8002d60:	2201      	movs	r2, #1
 8002d62:	409a      	lsls	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10f      	bne.n	8002d92 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d11d      	bne.n	8002dbc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0201 	orr.w	r2, r2, #1
 8002d8e:	605a      	str	r2, [r3, #4]
 8002d90:	e014      	b.n	8002dbc <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	f003 0310 	and.w	r3, r3, #16
 8002da2:	2102      	movs	r1, #2
 8002da4:	fa01 f303 	lsl.w	r3, r1, r3
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d107      	bne.n	8002dbc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0202 	orr.w	r2, r2, #2
 8002dba:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
	...

08002dd8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
 8002de4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	795b      	ldrb	r3, [r3, #5]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d101      	bne.n	8002df6 <HAL_DAC_Start_DMA+0x1e>
 8002df2:	2302      	movs	r3, #2
 8002df4:	e09e      	b.n	8002f34 <HAL_DAC_Start_DMA+0x15c>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d12a      	bne.n	8002e5e <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	4a4b      	ldr	r2, [pc, #300]	; (8002f3c <HAL_DAC_Start_DMA+0x164>)
 8002e0e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	4a4a      	ldr	r2, [pc, #296]	; (8002f40 <HAL_DAC_Start_DMA+0x168>)
 8002e16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	4a49      	ldr	r2, [pc, #292]	; (8002f44 <HAL_DAC_Start_DMA+0x16c>)
 8002e1e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e2e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d009      	beq.n	8002e4a <HAL_DAC_Start_DMA+0x72>
 8002e36:	2b08      	cmp	r3, #8
 8002e38:	d00c      	beq.n	8002e54 <HAL_DAC_Start_DMA+0x7c>
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d000      	beq.n	8002e40 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002e3e:	e039      	b.n	8002eb4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	3308      	adds	r3, #8
 8002e46:	613b      	str	r3, [r7, #16]
        break;
 8002e48:	e034      	b.n	8002eb4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	330c      	adds	r3, #12
 8002e50:	613b      	str	r3, [r7, #16]
        break;
 8002e52:	e02f      	b.n	8002eb4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	3310      	adds	r3, #16
 8002e5a:	613b      	str	r3, [r7, #16]
        break;
 8002e5c:	e02a      	b.n	8002eb4 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	4a39      	ldr	r2, [pc, #228]	; (8002f48 <HAL_DAC_Start_DMA+0x170>)
 8002e64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	4a38      	ldr	r2, [pc, #224]	; (8002f4c <HAL_DAC_Start_DMA+0x174>)
 8002e6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	4a37      	ldr	r2, [pc, #220]	; (8002f50 <HAL_DAC_Start_DMA+0x178>)
 8002e74:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e84:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002e86:	6a3b      	ldr	r3, [r7, #32]
 8002e88:	2b04      	cmp	r3, #4
 8002e8a:	d009      	beq.n	8002ea0 <HAL_DAC_Start_DMA+0xc8>
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d00c      	beq.n	8002eaa <HAL_DAC_Start_DMA+0xd2>
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d000      	beq.n	8002e96 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002e94:	e00e      	b.n	8002eb4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	3314      	adds	r3, #20
 8002e9c:	613b      	str	r3, [r7, #16]
        break;
 8002e9e:	e009      	b.n	8002eb4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	3318      	adds	r3, #24
 8002ea6:	613b      	str	r3, [r7, #16]
        break;
 8002ea8:	e004      	b.n	8002eb4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	331c      	adds	r3, #28
 8002eb0:	613b      	str	r3, [r7, #16]
        break;
 8002eb2:	bf00      	nop
    }
  }

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d111      	bne.n	8002ede <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ec8:	601a      	str	r2, [r3, #0]

   /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6898      	ldr	r0, [r3, #8]
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	f000 fd9c 	bl	8003a10 <HAL_DMA_Start_IT>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	75fb      	strb	r3, [r7, #23]
 8002edc:	e010      	b.n	8002f00 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002eec:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	68d8      	ldr	r0, [r3, #12]
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	f000 fd8a 	bl	8003a10 <HAL_DMA_Start_IT>
 8002efc:	4603      	mov	r3, r0
 8002efe:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002f06:	7dfb      	ldrb	r3, [r7, #23]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10c      	bne.n	8002f26 <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6819      	ldr	r1, [r3, #0]
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	f003 0310 	and.w	r3, r3, #16
 8002f18:	2201      	movs	r2, #1
 8002f1a:	409a      	lsls	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	430a      	orrs	r2, r1
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	e005      	b.n	8002f32 <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	f043 0204 	orr.w	r2, r3, #4
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3718      	adds	r7, #24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	080031dd 	.word	0x080031dd
 8002f40:	080031ff 	.word	0x080031ff
 8002f44:	0800321b 	.word	0x0800321b
 8002f48:	08003285 	.word	0x08003285
 8002f4c:	080032a7 	.word	0x080032a7
 8002f50:	080032c3 	.word	0x080032c3

08002f54 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b088      	sub	sp, #32
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	795b      	ldrb	r3, [r3, #5]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_DAC_ConfigChannel+0x18>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e11d      	b.n	80031d0 <HAL_DAC_ConfigChannel+0x254>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2201      	movs	r2, #1
 8002f98:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d174      	bne.n	8003092 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002fa8:	f7fe fe58 	bl	8001c5c <HAL_GetTick>
 8002fac:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d134      	bne.n	800301e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002fb4:	e011      	b.n	8002fda <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002fb6:	f7fe fe51 	bl	8001c5c <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d90a      	bls.n	8002fda <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	f043 0208 	orr.w	r2, r3, #8
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2203      	movs	r2, #3
 8002fd4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e0fa      	b.n	80031d0 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fe0:	4b7d      	ldr	r3, [pc, #500]	; (80031d8 <HAL_DAC_ConfigChannel+0x25c>)
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1e6      	bne.n	8002fb6 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8002fe8:	2001      	movs	r0, #1
 8002fea:	f7fe fe43 	bl	8001c74 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	6992      	ldr	r2, [r2, #24]
 8002ff6:	641a      	str	r2, [r3, #64]	; 0x40
 8002ff8:	e01e      	b.n	8003038 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002ffa:	f7fe fe2f 	bl	8001c5c <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b01      	cmp	r3, #1
 8003006:	d90a      	bls.n	800301e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	f043 0208 	orr.w	r2, r3, #8
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2203      	movs	r2, #3
 8003018:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e0d8      	b.n	80031d0 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003024:	2b00      	cmp	r3, #0
 8003026:	dbe8      	blt.n	8002ffa <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8003028:	2001      	movs	r0, #1
 800302a:	f7fe fe23 	bl	8001c74 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	6992      	ldr	r2, [r2, #24]
 8003036:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f003 0310 	and.w	r3, r3, #16
 8003044:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003048:	fa01 f303 	lsl.w	r3, r1, r3
 800304c:	43db      	mvns	r3, r3
 800304e:	ea02 0103 	and.w	r1, r2, r3
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	69da      	ldr	r2, [r3, #28]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f003 0310 	and.w	r3, r3, #16
 800305c:	409a      	lsls	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f003 0310 	and.w	r3, r3, #16
 8003072:	21ff      	movs	r1, #255	; 0xff
 8003074:	fa01 f303 	lsl.w	r3, r1, r3
 8003078:	43db      	mvns	r3, r3
 800307a:	ea02 0103 	and.w	r1, r2, r3
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	6a1a      	ldr	r2, [r3, #32]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f003 0310 	and.w	r3, r3, #16
 8003088:	409a      	lsls	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d11d      	bne.n	80030d6 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a0:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f003 0310 	and.w	r3, r3, #16
 80030a8:	221f      	movs	r2, #31
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	4013      	ands	r3, r2
 80030b4:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f003 0310 	and.w	r3, r3, #16
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030dc:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f003 0310 	and.w	r3, r3, #16
 80030e4:	2207      	movs	r2, #7
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	43db      	mvns	r3, r3
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	4013      	ands	r3, r2
 80030f0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d102      	bne.n	8003100 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61fb      	str	r3, [r7, #28]
 80030fe:	e00f      	b.n	8003120 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	2b02      	cmp	r3, #2
 8003106:	d102      	bne.n	800310e <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003108:	2301      	movs	r3, #1
 800310a:	61fb      	str	r3, [r7, #28]
 800310c:	e008      	b.n	8003120 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d102      	bne.n	800311c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003116:	2301      	movs	r3, #1
 8003118:	61fb      	str	r3, [r7, #28]
 800311a:	e001      	b.n	8003120 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800311c:	2300      	movs	r3, #0
 800311e:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	4313      	orrs	r3, r2
 800312a:	69fa      	ldr	r2, [r7, #28]
 800312c:	4313      	orrs	r3, r2
 800312e:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f003 0310 	and.w	r3, r3, #16
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	4313      	orrs	r3, r2
 8003140:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6819      	ldr	r1, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f003 0310 	and.w	r3, r3, #16
 8003156:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43da      	mvns	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	400a      	ands	r2, r1
 8003166:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f003 0310 	and.w	r3, r3, #16
 8003176:	f640 72fe 	movw	r2, #4094	; 0xffe
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	43db      	mvns	r3, r3
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	4013      	ands	r3, r2
 8003184:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f003 0310 	and.w	r3, r3, #16
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	4313      	orrs	r3, r2
 800319c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6819      	ldr	r1, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f003 0310 	and.w	r3, r3, #16
 80031b2:	22c0      	movs	r2, #192	; 0xc0
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	43da      	mvns	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	400a      	ands	r2, r1
 80031c0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2201      	movs	r2, #1
 80031c6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3720      	adds	r7, #32
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	20008000 	.word	0x20008000

080031dc <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f7fd ff8c 	bl	8001108 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2201      	movs	r2, #1
 80031f4:	711a      	strb	r2, [r3, #4]
}
 80031f6:	bf00      	nop
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b084      	sub	sp, #16
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f7ff fea1 	bl	8002f54 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003212:	bf00      	nop
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b084      	sub	sp, #16
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	f043 0204 	orr.w	r2, r3, #4
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f7ff fe97 	bl	8002f68 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2201      	movs	r2, #1
 800323e:	711a      	strb	r2, [r3, #4]
}
 8003240:	bf00      	nop
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003290:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f7ff ffd8 	bl	8003248 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2201      	movs	r2, #1
 800329c:	711a      	strb	r2, [r3, #4]
}
 800329e:	bf00      	nop
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b084      	sub	sp, #16
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f7ff ffd1 	bl	800325c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80032ba:	bf00      	nop
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b084      	sub	sp, #16
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ce:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	f043 0204 	orr.w	r2, r3, #4
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f7ff ffc7 	bl	8003270 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2201      	movs	r2, #1
 80032e6:	711a      	strb	r2, [r3, #4]
}
 80032e8:	bf00      	nop
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80032f8:	f7fe fcb0 	bl	8001c5c <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e37f      	b.n	8003a08 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a66      	ldr	r2, [pc, #408]	; (80034a8 <HAL_DMA_Init+0x1b8>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d04a      	beq.n	80033a8 <HAL_DMA_Init+0xb8>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a65      	ldr	r2, [pc, #404]	; (80034ac <HAL_DMA_Init+0x1bc>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d045      	beq.n	80033a8 <HAL_DMA_Init+0xb8>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a63      	ldr	r2, [pc, #396]	; (80034b0 <HAL_DMA_Init+0x1c0>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d040      	beq.n	80033a8 <HAL_DMA_Init+0xb8>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a62      	ldr	r2, [pc, #392]	; (80034b4 <HAL_DMA_Init+0x1c4>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d03b      	beq.n	80033a8 <HAL_DMA_Init+0xb8>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a60      	ldr	r2, [pc, #384]	; (80034b8 <HAL_DMA_Init+0x1c8>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d036      	beq.n	80033a8 <HAL_DMA_Init+0xb8>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a5f      	ldr	r2, [pc, #380]	; (80034bc <HAL_DMA_Init+0x1cc>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d031      	beq.n	80033a8 <HAL_DMA_Init+0xb8>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a5d      	ldr	r2, [pc, #372]	; (80034c0 <HAL_DMA_Init+0x1d0>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d02c      	beq.n	80033a8 <HAL_DMA_Init+0xb8>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a5c      	ldr	r2, [pc, #368]	; (80034c4 <HAL_DMA_Init+0x1d4>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d027      	beq.n	80033a8 <HAL_DMA_Init+0xb8>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a5a      	ldr	r2, [pc, #360]	; (80034c8 <HAL_DMA_Init+0x1d8>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d022      	beq.n	80033a8 <HAL_DMA_Init+0xb8>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a59      	ldr	r2, [pc, #356]	; (80034cc <HAL_DMA_Init+0x1dc>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d01d      	beq.n	80033a8 <HAL_DMA_Init+0xb8>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a57      	ldr	r2, [pc, #348]	; (80034d0 <HAL_DMA_Init+0x1e0>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d018      	beq.n	80033a8 <HAL_DMA_Init+0xb8>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a56      	ldr	r2, [pc, #344]	; (80034d4 <HAL_DMA_Init+0x1e4>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d013      	beq.n	80033a8 <HAL_DMA_Init+0xb8>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a54      	ldr	r2, [pc, #336]	; (80034d8 <HAL_DMA_Init+0x1e8>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d00e      	beq.n	80033a8 <HAL_DMA_Init+0xb8>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a53      	ldr	r2, [pc, #332]	; (80034dc <HAL_DMA_Init+0x1ec>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d009      	beq.n	80033a8 <HAL_DMA_Init+0xb8>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a51      	ldr	r2, [pc, #324]	; (80034e0 <HAL_DMA_Init+0x1f0>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d004      	beq.n	80033a8 <HAL_DMA_Init+0xb8>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a50      	ldr	r2, [pc, #320]	; (80034e4 <HAL_DMA_Init+0x1f4>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d101      	bne.n	80033ac <HAL_DMA_Init+0xbc>
 80033a8:	2301      	movs	r3, #1
 80033aa:	e000      	b.n	80033ae <HAL_DMA_Init+0xbe>
 80033ac:	2300      	movs	r3, #0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 813c 	beq.w	800362c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2202      	movs	r2, #2
 80033c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a37      	ldr	r2, [pc, #220]	; (80034a8 <HAL_DMA_Init+0x1b8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d04a      	beq.n	8003464 <HAL_DMA_Init+0x174>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a36      	ldr	r2, [pc, #216]	; (80034ac <HAL_DMA_Init+0x1bc>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d045      	beq.n	8003464 <HAL_DMA_Init+0x174>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a34      	ldr	r2, [pc, #208]	; (80034b0 <HAL_DMA_Init+0x1c0>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d040      	beq.n	8003464 <HAL_DMA_Init+0x174>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a33      	ldr	r2, [pc, #204]	; (80034b4 <HAL_DMA_Init+0x1c4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d03b      	beq.n	8003464 <HAL_DMA_Init+0x174>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a31      	ldr	r2, [pc, #196]	; (80034b8 <HAL_DMA_Init+0x1c8>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d036      	beq.n	8003464 <HAL_DMA_Init+0x174>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a30      	ldr	r2, [pc, #192]	; (80034bc <HAL_DMA_Init+0x1cc>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d031      	beq.n	8003464 <HAL_DMA_Init+0x174>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a2e      	ldr	r2, [pc, #184]	; (80034c0 <HAL_DMA_Init+0x1d0>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d02c      	beq.n	8003464 <HAL_DMA_Init+0x174>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a2d      	ldr	r2, [pc, #180]	; (80034c4 <HAL_DMA_Init+0x1d4>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d027      	beq.n	8003464 <HAL_DMA_Init+0x174>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a2b      	ldr	r2, [pc, #172]	; (80034c8 <HAL_DMA_Init+0x1d8>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d022      	beq.n	8003464 <HAL_DMA_Init+0x174>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a2a      	ldr	r2, [pc, #168]	; (80034cc <HAL_DMA_Init+0x1dc>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d01d      	beq.n	8003464 <HAL_DMA_Init+0x174>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a28      	ldr	r2, [pc, #160]	; (80034d0 <HAL_DMA_Init+0x1e0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d018      	beq.n	8003464 <HAL_DMA_Init+0x174>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a27      	ldr	r2, [pc, #156]	; (80034d4 <HAL_DMA_Init+0x1e4>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d013      	beq.n	8003464 <HAL_DMA_Init+0x174>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a25      	ldr	r2, [pc, #148]	; (80034d8 <HAL_DMA_Init+0x1e8>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d00e      	beq.n	8003464 <HAL_DMA_Init+0x174>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a24      	ldr	r2, [pc, #144]	; (80034dc <HAL_DMA_Init+0x1ec>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d009      	beq.n	8003464 <HAL_DMA_Init+0x174>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a22      	ldr	r2, [pc, #136]	; (80034e0 <HAL_DMA_Init+0x1f0>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d004      	beq.n	8003464 <HAL_DMA_Init+0x174>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a21      	ldr	r2, [pc, #132]	; (80034e4 <HAL_DMA_Init+0x1f4>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d108      	bne.n	8003476 <HAL_DMA_Init+0x186>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 0201 	bic.w	r2, r2, #1
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	e007      	b.n	8003486 <HAL_DMA_Init+0x196>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0201 	bic.w	r2, r2, #1
 8003484:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003486:	e02f      	b.n	80034e8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003488:	f7fe fbe8 	bl	8001c5c <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b05      	cmp	r3, #5
 8003494:	d928      	bls.n	80034e8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2220      	movs	r2, #32
 800349a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2203      	movs	r2, #3
 80034a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e2af      	b.n	8003a08 <HAL_DMA_Init+0x718>
 80034a8:	40020010 	.word	0x40020010
 80034ac:	40020028 	.word	0x40020028
 80034b0:	40020040 	.word	0x40020040
 80034b4:	40020058 	.word	0x40020058
 80034b8:	40020070 	.word	0x40020070
 80034bc:	40020088 	.word	0x40020088
 80034c0:	400200a0 	.word	0x400200a0
 80034c4:	400200b8 	.word	0x400200b8
 80034c8:	40020410 	.word	0x40020410
 80034cc:	40020428 	.word	0x40020428
 80034d0:	40020440 	.word	0x40020440
 80034d4:	40020458 	.word	0x40020458
 80034d8:	40020470 	.word	0x40020470
 80034dc:	40020488 	.word	0x40020488
 80034e0:	400204a0 	.word	0x400204a0
 80034e4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1c8      	bne.n	8003488 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	4b73      	ldr	r3, [pc, #460]	; (80036d0 <HAL_DMA_Init+0x3e0>)
 8003502:	4013      	ands	r3, r2
 8003504:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800350e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800351a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003526:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	4313      	orrs	r3, r2
 8003532:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	2b04      	cmp	r3, #4
 800353a:	d107      	bne.n	800354c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003544:	4313      	orrs	r3, r2
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	4313      	orrs	r3, r2
 800354a:	617b      	str	r3, [r7, #20]
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b28      	cmp	r3, #40	; 0x28
 8003552:	d903      	bls.n	800355c <HAL_DMA_Init+0x26c>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b2e      	cmp	r3, #46	; 0x2e
 800355a:	d91f      	bls.n	800359c <HAL_DMA_Init+0x2ac>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2b3e      	cmp	r3, #62	; 0x3e
 8003562:	d903      	bls.n	800356c <HAL_DMA_Init+0x27c>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b42      	cmp	r3, #66	; 0x42
 800356a:	d917      	bls.n	800359c <HAL_DMA_Init+0x2ac>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2b46      	cmp	r3, #70	; 0x46
 8003572:	d903      	bls.n	800357c <HAL_DMA_Init+0x28c>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	2b48      	cmp	r3, #72	; 0x48
 800357a:	d90f      	bls.n	800359c <HAL_DMA_Init+0x2ac>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b4e      	cmp	r3, #78	; 0x4e
 8003582:	d903      	bls.n	800358c <HAL_DMA_Init+0x29c>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2b52      	cmp	r3, #82	; 0x52
 800358a:	d907      	bls.n	800359c <HAL_DMA_Init+0x2ac>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	2b73      	cmp	r3, #115	; 0x73
 8003592:	d905      	bls.n	80035a0 <HAL_DMA_Init+0x2b0>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b77      	cmp	r3, #119	; 0x77
 800359a:	d801      	bhi.n	80035a0 <HAL_DMA_Init+0x2b0>
 800359c:	2301      	movs	r3, #1
 800359e:	e000      	b.n	80035a2 <HAL_DMA_Init+0x2b2>
 80035a0:	2300      	movs	r3, #0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035ac:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f023 0307 	bic.w	r3, r3, #7
 80035c4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d117      	bne.n	8003608 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	4313      	orrs	r3, r2
 80035e0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00e      	beq.n	8003608 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f001 fe72 	bl	80052d4 <DMA_CheckFifoParam>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d008      	beq.n	8003608 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2240      	movs	r2, #64	; 0x40
 80035fa:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e1ff      	b.n	8003a08 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f001 fdad 	bl	8005170 <DMA_CalcBaseAndBitshift>
 8003616:	4603      	mov	r3, r0
 8003618:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361e:	f003 031f 	and.w	r3, r3, #31
 8003622:	223f      	movs	r2, #63	; 0x3f
 8003624:	409a      	lsls	r2, r3
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	609a      	str	r2, [r3, #8]
 800362a:	e0fe      	b.n	800382a <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a28      	ldr	r2, [pc, #160]	; (80036d4 <HAL_DMA_Init+0x3e4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d04a      	beq.n	80036cc <HAL_DMA_Init+0x3dc>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a27      	ldr	r2, [pc, #156]	; (80036d8 <HAL_DMA_Init+0x3e8>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d045      	beq.n	80036cc <HAL_DMA_Init+0x3dc>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a25      	ldr	r2, [pc, #148]	; (80036dc <HAL_DMA_Init+0x3ec>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d040      	beq.n	80036cc <HAL_DMA_Init+0x3dc>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a24      	ldr	r2, [pc, #144]	; (80036e0 <HAL_DMA_Init+0x3f0>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d03b      	beq.n	80036cc <HAL_DMA_Init+0x3dc>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a22      	ldr	r2, [pc, #136]	; (80036e4 <HAL_DMA_Init+0x3f4>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d036      	beq.n	80036cc <HAL_DMA_Init+0x3dc>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a21      	ldr	r2, [pc, #132]	; (80036e8 <HAL_DMA_Init+0x3f8>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d031      	beq.n	80036cc <HAL_DMA_Init+0x3dc>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a1f      	ldr	r2, [pc, #124]	; (80036ec <HAL_DMA_Init+0x3fc>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d02c      	beq.n	80036cc <HAL_DMA_Init+0x3dc>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a1e      	ldr	r2, [pc, #120]	; (80036f0 <HAL_DMA_Init+0x400>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d027      	beq.n	80036cc <HAL_DMA_Init+0x3dc>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a1c      	ldr	r2, [pc, #112]	; (80036f4 <HAL_DMA_Init+0x404>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d022      	beq.n	80036cc <HAL_DMA_Init+0x3dc>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a1b      	ldr	r2, [pc, #108]	; (80036f8 <HAL_DMA_Init+0x408>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d01d      	beq.n	80036cc <HAL_DMA_Init+0x3dc>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a19      	ldr	r2, [pc, #100]	; (80036fc <HAL_DMA_Init+0x40c>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d018      	beq.n	80036cc <HAL_DMA_Init+0x3dc>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a18      	ldr	r2, [pc, #96]	; (8003700 <HAL_DMA_Init+0x410>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d013      	beq.n	80036cc <HAL_DMA_Init+0x3dc>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a16      	ldr	r2, [pc, #88]	; (8003704 <HAL_DMA_Init+0x414>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d00e      	beq.n	80036cc <HAL_DMA_Init+0x3dc>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a15      	ldr	r2, [pc, #84]	; (8003708 <HAL_DMA_Init+0x418>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d009      	beq.n	80036cc <HAL_DMA_Init+0x3dc>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a13      	ldr	r2, [pc, #76]	; (800370c <HAL_DMA_Init+0x41c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d004      	beq.n	80036cc <HAL_DMA_Init+0x3dc>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a12      	ldr	r2, [pc, #72]	; (8003710 <HAL_DMA_Init+0x420>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d123      	bne.n	8003714 <HAL_DMA_Init+0x424>
 80036cc:	2301      	movs	r3, #1
 80036ce:	e022      	b.n	8003716 <HAL_DMA_Init+0x426>
 80036d0:	fe10803f 	.word	0xfe10803f
 80036d4:	48022c08 	.word	0x48022c08
 80036d8:	48022c1c 	.word	0x48022c1c
 80036dc:	48022c30 	.word	0x48022c30
 80036e0:	48022c44 	.word	0x48022c44
 80036e4:	48022c58 	.word	0x48022c58
 80036e8:	48022c6c 	.word	0x48022c6c
 80036ec:	48022c80 	.word	0x48022c80
 80036f0:	48022c94 	.word	0x48022c94
 80036f4:	58025408 	.word	0x58025408
 80036f8:	5802541c 	.word	0x5802541c
 80036fc:	58025430 	.word	0x58025430
 8003700:	58025444 	.word	0x58025444
 8003704:	58025458 	.word	0x58025458
 8003708:	5802546c 	.word	0x5802546c
 800370c:	58025480 	.word	0x58025480
 8003710:	58025494 	.word	0x58025494
 8003714:	2300      	movs	r3, #0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d07e      	beq.n	8003818 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a80      	ldr	r2, [pc, #512]	; (8003920 <HAL_DMA_Init+0x630>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d021      	beq.n	8003768 <HAL_DMA_Init+0x478>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a7e      	ldr	r2, [pc, #504]	; (8003924 <HAL_DMA_Init+0x634>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d01c      	beq.n	8003768 <HAL_DMA_Init+0x478>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a7d      	ldr	r2, [pc, #500]	; (8003928 <HAL_DMA_Init+0x638>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d017      	beq.n	8003768 <HAL_DMA_Init+0x478>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a7b      	ldr	r2, [pc, #492]	; (800392c <HAL_DMA_Init+0x63c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d012      	beq.n	8003768 <HAL_DMA_Init+0x478>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a7a      	ldr	r2, [pc, #488]	; (8003930 <HAL_DMA_Init+0x640>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d00d      	beq.n	8003768 <HAL_DMA_Init+0x478>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a78      	ldr	r2, [pc, #480]	; (8003934 <HAL_DMA_Init+0x644>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d008      	beq.n	8003768 <HAL_DMA_Init+0x478>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a77      	ldr	r2, [pc, #476]	; (8003938 <HAL_DMA_Init+0x648>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d003      	beq.n	8003768 <HAL_DMA_Init+0x478>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a75      	ldr	r2, [pc, #468]	; (800393c <HAL_DMA_Init+0x64c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2202      	movs	r2, #2
 8003776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	4b6e      	ldr	r3, [pc, #440]	; (8003940 <HAL_DMA_Init+0x650>)
 8003786:	4013      	ands	r3, r2
 8003788:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	2b40      	cmp	r3, #64	; 0x40
 8003790:	d008      	beq.n	80037a4 <HAL_DMA_Init+0x4b4>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	2b80      	cmp	r3, #128	; 0x80
 8003798:	d102      	bne.n	80037a0 <HAL_DMA_Init+0x4b0>
 800379a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800379e:	e002      	b.n	80037a6 <HAL_DMA_Init+0x4b6>
 80037a0:	2300      	movs	r3, #0
 80037a2:	e000      	b.n	80037a6 <HAL_DMA_Init+0x4b6>
 80037a4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	68d2      	ldr	r2, [r2, #12]
 80037aa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80037ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80037b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80037bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80037c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80037cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80037d4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	4313      	orrs	r3, r2
 80037da:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	461a      	mov	r2, r3
 80037ea:	4b56      	ldr	r3, [pc, #344]	; (8003944 <HAL_DMA_Init+0x654>)
 80037ec:	4413      	add	r3, r2
 80037ee:	4a56      	ldr	r2, [pc, #344]	; (8003948 <HAL_DMA_Init+0x658>)
 80037f0:	fba2 2303 	umull	r2, r3, r2, r3
 80037f4:	091b      	lsrs	r3, r3, #4
 80037f6:	009a      	lsls	r2, r3, #2
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f001 fcb7 	bl	8005170 <DMA_CalcBaseAndBitshift>
 8003802:	4603      	mov	r3, r0
 8003804:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380a:	f003 031f 	and.w	r3, r3, #31
 800380e:	2201      	movs	r2, #1
 8003810:	409a      	lsls	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	605a      	str	r2, [r3, #4]
 8003816:	e008      	b.n	800382a <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2240      	movs	r2, #64	; 0x40
 800381c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2203      	movs	r2, #3
 8003822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e0ee      	b.n	8003a08 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a47      	ldr	r2, [pc, #284]	; (800394c <HAL_DMA_Init+0x65c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d072      	beq.n	800391a <HAL_DMA_Init+0x62a>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a45      	ldr	r2, [pc, #276]	; (8003950 <HAL_DMA_Init+0x660>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d06d      	beq.n	800391a <HAL_DMA_Init+0x62a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a44      	ldr	r2, [pc, #272]	; (8003954 <HAL_DMA_Init+0x664>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d068      	beq.n	800391a <HAL_DMA_Init+0x62a>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a42      	ldr	r2, [pc, #264]	; (8003958 <HAL_DMA_Init+0x668>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d063      	beq.n	800391a <HAL_DMA_Init+0x62a>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a41      	ldr	r2, [pc, #260]	; (800395c <HAL_DMA_Init+0x66c>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d05e      	beq.n	800391a <HAL_DMA_Init+0x62a>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a3f      	ldr	r2, [pc, #252]	; (8003960 <HAL_DMA_Init+0x670>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d059      	beq.n	800391a <HAL_DMA_Init+0x62a>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a3e      	ldr	r2, [pc, #248]	; (8003964 <HAL_DMA_Init+0x674>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d054      	beq.n	800391a <HAL_DMA_Init+0x62a>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a3c      	ldr	r2, [pc, #240]	; (8003968 <HAL_DMA_Init+0x678>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d04f      	beq.n	800391a <HAL_DMA_Init+0x62a>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a3b      	ldr	r2, [pc, #236]	; (800396c <HAL_DMA_Init+0x67c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d04a      	beq.n	800391a <HAL_DMA_Init+0x62a>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a39      	ldr	r2, [pc, #228]	; (8003970 <HAL_DMA_Init+0x680>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d045      	beq.n	800391a <HAL_DMA_Init+0x62a>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a38      	ldr	r2, [pc, #224]	; (8003974 <HAL_DMA_Init+0x684>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d040      	beq.n	800391a <HAL_DMA_Init+0x62a>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a36      	ldr	r2, [pc, #216]	; (8003978 <HAL_DMA_Init+0x688>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d03b      	beq.n	800391a <HAL_DMA_Init+0x62a>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a35      	ldr	r2, [pc, #212]	; (800397c <HAL_DMA_Init+0x68c>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d036      	beq.n	800391a <HAL_DMA_Init+0x62a>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a33      	ldr	r2, [pc, #204]	; (8003980 <HAL_DMA_Init+0x690>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d031      	beq.n	800391a <HAL_DMA_Init+0x62a>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a32      	ldr	r2, [pc, #200]	; (8003984 <HAL_DMA_Init+0x694>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d02c      	beq.n	800391a <HAL_DMA_Init+0x62a>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a30      	ldr	r2, [pc, #192]	; (8003988 <HAL_DMA_Init+0x698>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d027      	beq.n	800391a <HAL_DMA_Init+0x62a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a14      	ldr	r2, [pc, #80]	; (8003920 <HAL_DMA_Init+0x630>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d022      	beq.n	800391a <HAL_DMA_Init+0x62a>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a12      	ldr	r2, [pc, #72]	; (8003924 <HAL_DMA_Init+0x634>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d01d      	beq.n	800391a <HAL_DMA_Init+0x62a>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a11      	ldr	r2, [pc, #68]	; (8003928 <HAL_DMA_Init+0x638>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d018      	beq.n	800391a <HAL_DMA_Init+0x62a>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a0f      	ldr	r2, [pc, #60]	; (800392c <HAL_DMA_Init+0x63c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d013      	beq.n	800391a <HAL_DMA_Init+0x62a>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a0e      	ldr	r2, [pc, #56]	; (8003930 <HAL_DMA_Init+0x640>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d00e      	beq.n	800391a <HAL_DMA_Init+0x62a>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a0c      	ldr	r2, [pc, #48]	; (8003934 <HAL_DMA_Init+0x644>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d009      	beq.n	800391a <HAL_DMA_Init+0x62a>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a0b      	ldr	r2, [pc, #44]	; (8003938 <HAL_DMA_Init+0x648>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d004      	beq.n	800391a <HAL_DMA_Init+0x62a>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a09      	ldr	r2, [pc, #36]	; (800393c <HAL_DMA_Init+0x64c>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d138      	bne.n	800398c <HAL_DMA_Init+0x69c>
 800391a:	2301      	movs	r3, #1
 800391c:	e037      	b.n	800398e <HAL_DMA_Init+0x69e>
 800391e:	bf00      	nop
 8003920:	58025408 	.word	0x58025408
 8003924:	5802541c 	.word	0x5802541c
 8003928:	58025430 	.word	0x58025430
 800392c:	58025444 	.word	0x58025444
 8003930:	58025458 	.word	0x58025458
 8003934:	5802546c 	.word	0x5802546c
 8003938:	58025480 	.word	0x58025480
 800393c:	58025494 	.word	0x58025494
 8003940:	fffe000f 	.word	0xfffe000f
 8003944:	a7fdabf8 	.word	0xa7fdabf8
 8003948:	cccccccd 	.word	0xcccccccd
 800394c:	40020010 	.word	0x40020010
 8003950:	40020028 	.word	0x40020028
 8003954:	40020040 	.word	0x40020040
 8003958:	40020058 	.word	0x40020058
 800395c:	40020070 	.word	0x40020070
 8003960:	40020088 	.word	0x40020088
 8003964:	400200a0 	.word	0x400200a0
 8003968:	400200b8 	.word	0x400200b8
 800396c:	40020410 	.word	0x40020410
 8003970:	40020428 	.word	0x40020428
 8003974:	40020440 	.word	0x40020440
 8003978:	40020458 	.word	0x40020458
 800397c:	40020470 	.word	0x40020470
 8003980:	40020488 	.word	0x40020488
 8003984:	400204a0 	.word	0x400204a0
 8003988:	400204b8 	.word	0x400204b8
 800398c:	2300      	movs	r3, #0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d032      	beq.n	80039f8 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f001 fd1a 	bl	80053cc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	2b80      	cmp	r3, #128	; 0x80
 800399e:	d102      	bne.n	80039a6 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80039ba:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d010      	beq.n	80039e6 <HAL_DMA_Init+0x6f6>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2b08      	cmp	r3, #8
 80039ca:	d80c      	bhi.n	80039e6 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f001 fd97 	bl	8005500 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039d6:	2200      	movs	r2, #0
 80039d8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80039e2:	605a      	str	r2, [r3, #4]
 80039e4:	e008      	b.n	80039f8 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
 8003a1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d101      	bne.n	8003a2c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e226      	b.n	8003e7a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d101      	bne.n	8003a3a <HAL_DMA_Start_IT+0x2a>
 8003a36:	2302      	movs	r3, #2
 8003a38:	e21f      	b.n	8003e7a <HAL_DMA_Start_IT+0x46a>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	f040 820a 	bne.w	8003e64 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a68      	ldr	r2, [pc, #416]	; (8003c04 <HAL_DMA_Start_IT+0x1f4>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d04a      	beq.n	8003afe <HAL_DMA_Start_IT+0xee>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a66      	ldr	r2, [pc, #408]	; (8003c08 <HAL_DMA_Start_IT+0x1f8>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d045      	beq.n	8003afe <HAL_DMA_Start_IT+0xee>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a65      	ldr	r2, [pc, #404]	; (8003c0c <HAL_DMA_Start_IT+0x1fc>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d040      	beq.n	8003afe <HAL_DMA_Start_IT+0xee>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a63      	ldr	r2, [pc, #396]	; (8003c10 <HAL_DMA_Start_IT+0x200>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d03b      	beq.n	8003afe <HAL_DMA_Start_IT+0xee>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a62      	ldr	r2, [pc, #392]	; (8003c14 <HAL_DMA_Start_IT+0x204>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d036      	beq.n	8003afe <HAL_DMA_Start_IT+0xee>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a60      	ldr	r2, [pc, #384]	; (8003c18 <HAL_DMA_Start_IT+0x208>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d031      	beq.n	8003afe <HAL_DMA_Start_IT+0xee>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a5f      	ldr	r2, [pc, #380]	; (8003c1c <HAL_DMA_Start_IT+0x20c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d02c      	beq.n	8003afe <HAL_DMA_Start_IT+0xee>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a5d      	ldr	r2, [pc, #372]	; (8003c20 <HAL_DMA_Start_IT+0x210>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d027      	beq.n	8003afe <HAL_DMA_Start_IT+0xee>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a5c      	ldr	r2, [pc, #368]	; (8003c24 <HAL_DMA_Start_IT+0x214>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d022      	beq.n	8003afe <HAL_DMA_Start_IT+0xee>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a5a      	ldr	r2, [pc, #360]	; (8003c28 <HAL_DMA_Start_IT+0x218>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d01d      	beq.n	8003afe <HAL_DMA_Start_IT+0xee>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a59      	ldr	r2, [pc, #356]	; (8003c2c <HAL_DMA_Start_IT+0x21c>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d018      	beq.n	8003afe <HAL_DMA_Start_IT+0xee>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a57      	ldr	r2, [pc, #348]	; (8003c30 <HAL_DMA_Start_IT+0x220>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d013      	beq.n	8003afe <HAL_DMA_Start_IT+0xee>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a56      	ldr	r2, [pc, #344]	; (8003c34 <HAL_DMA_Start_IT+0x224>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d00e      	beq.n	8003afe <HAL_DMA_Start_IT+0xee>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a54      	ldr	r2, [pc, #336]	; (8003c38 <HAL_DMA_Start_IT+0x228>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d009      	beq.n	8003afe <HAL_DMA_Start_IT+0xee>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a53      	ldr	r2, [pc, #332]	; (8003c3c <HAL_DMA_Start_IT+0x22c>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d004      	beq.n	8003afe <HAL_DMA_Start_IT+0xee>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a51      	ldr	r2, [pc, #324]	; (8003c40 <HAL_DMA_Start_IT+0x230>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d108      	bne.n	8003b10 <HAL_DMA_Start_IT+0x100>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0201 	bic.w	r2, r2, #1
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	e007      	b.n	8003b20 <HAL_DMA_Start_IT+0x110>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0201 	bic.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	68b9      	ldr	r1, [r7, #8]
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f001 f93e 	bl	8004da8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a34      	ldr	r2, [pc, #208]	; (8003c04 <HAL_DMA_Start_IT+0x1f4>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d04a      	beq.n	8003bcc <HAL_DMA_Start_IT+0x1bc>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a33      	ldr	r2, [pc, #204]	; (8003c08 <HAL_DMA_Start_IT+0x1f8>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d045      	beq.n	8003bcc <HAL_DMA_Start_IT+0x1bc>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a31      	ldr	r2, [pc, #196]	; (8003c0c <HAL_DMA_Start_IT+0x1fc>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d040      	beq.n	8003bcc <HAL_DMA_Start_IT+0x1bc>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a30      	ldr	r2, [pc, #192]	; (8003c10 <HAL_DMA_Start_IT+0x200>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d03b      	beq.n	8003bcc <HAL_DMA_Start_IT+0x1bc>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a2e      	ldr	r2, [pc, #184]	; (8003c14 <HAL_DMA_Start_IT+0x204>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d036      	beq.n	8003bcc <HAL_DMA_Start_IT+0x1bc>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a2d      	ldr	r2, [pc, #180]	; (8003c18 <HAL_DMA_Start_IT+0x208>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d031      	beq.n	8003bcc <HAL_DMA_Start_IT+0x1bc>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a2b      	ldr	r2, [pc, #172]	; (8003c1c <HAL_DMA_Start_IT+0x20c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d02c      	beq.n	8003bcc <HAL_DMA_Start_IT+0x1bc>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a2a      	ldr	r2, [pc, #168]	; (8003c20 <HAL_DMA_Start_IT+0x210>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d027      	beq.n	8003bcc <HAL_DMA_Start_IT+0x1bc>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a28      	ldr	r2, [pc, #160]	; (8003c24 <HAL_DMA_Start_IT+0x214>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d022      	beq.n	8003bcc <HAL_DMA_Start_IT+0x1bc>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a27      	ldr	r2, [pc, #156]	; (8003c28 <HAL_DMA_Start_IT+0x218>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d01d      	beq.n	8003bcc <HAL_DMA_Start_IT+0x1bc>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a25      	ldr	r2, [pc, #148]	; (8003c2c <HAL_DMA_Start_IT+0x21c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d018      	beq.n	8003bcc <HAL_DMA_Start_IT+0x1bc>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a24      	ldr	r2, [pc, #144]	; (8003c30 <HAL_DMA_Start_IT+0x220>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d013      	beq.n	8003bcc <HAL_DMA_Start_IT+0x1bc>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a22      	ldr	r2, [pc, #136]	; (8003c34 <HAL_DMA_Start_IT+0x224>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d00e      	beq.n	8003bcc <HAL_DMA_Start_IT+0x1bc>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a21      	ldr	r2, [pc, #132]	; (8003c38 <HAL_DMA_Start_IT+0x228>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d009      	beq.n	8003bcc <HAL_DMA_Start_IT+0x1bc>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a1f      	ldr	r2, [pc, #124]	; (8003c3c <HAL_DMA_Start_IT+0x22c>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d004      	beq.n	8003bcc <HAL_DMA_Start_IT+0x1bc>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a1e      	ldr	r2, [pc, #120]	; (8003c40 <HAL_DMA_Start_IT+0x230>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d101      	bne.n	8003bd0 <HAL_DMA_Start_IT+0x1c0>
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e000      	b.n	8003bd2 <HAL_DMA_Start_IT+0x1c2>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d036      	beq.n	8003c44 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f023 021e 	bic.w	r2, r3, #30
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f042 0216 	orr.w	r2, r2, #22
 8003be8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d03e      	beq.n	8003c70 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f042 0208 	orr.w	r2, r2, #8
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	e035      	b.n	8003c70 <HAL_DMA_Start_IT+0x260>
 8003c04:	40020010 	.word	0x40020010
 8003c08:	40020028 	.word	0x40020028
 8003c0c:	40020040 	.word	0x40020040
 8003c10:	40020058 	.word	0x40020058
 8003c14:	40020070 	.word	0x40020070
 8003c18:	40020088 	.word	0x40020088
 8003c1c:	400200a0 	.word	0x400200a0
 8003c20:	400200b8 	.word	0x400200b8
 8003c24:	40020410 	.word	0x40020410
 8003c28:	40020428 	.word	0x40020428
 8003c2c:	40020440 	.word	0x40020440
 8003c30:	40020458 	.word	0x40020458
 8003c34:	40020470 	.word	0x40020470
 8003c38:	40020488 	.word	0x40020488
 8003c3c:	400204a0 	.word	0x400204a0
 8003c40:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f023 020e 	bic.w	r2, r3, #14
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 020a 	orr.w	r2, r2, #10
 8003c56:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d007      	beq.n	8003c70 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0204 	orr.w	r2, r2, #4
 8003c6e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a83      	ldr	r2, [pc, #524]	; (8003e84 <HAL_DMA_Start_IT+0x474>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d072      	beq.n	8003d60 <HAL_DMA_Start_IT+0x350>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a82      	ldr	r2, [pc, #520]	; (8003e88 <HAL_DMA_Start_IT+0x478>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d06d      	beq.n	8003d60 <HAL_DMA_Start_IT+0x350>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a80      	ldr	r2, [pc, #512]	; (8003e8c <HAL_DMA_Start_IT+0x47c>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d068      	beq.n	8003d60 <HAL_DMA_Start_IT+0x350>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a7f      	ldr	r2, [pc, #508]	; (8003e90 <HAL_DMA_Start_IT+0x480>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d063      	beq.n	8003d60 <HAL_DMA_Start_IT+0x350>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a7d      	ldr	r2, [pc, #500]	; (8003e94 <HAL_DMA_Start_IT+0x484>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d05e      	beq.n	8003d60 <HAL_DMA_Start_IT+0x350>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a7c      	ldr	r2, [pc, #496]	; (8003e98 <HAL_DMA_Start_IT+0x488>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d059      	beq.n	8003d60 <HAL_DMA_Start_IT+0x350>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a7a      	ldr	r2, [pc, #488]	; (8003e9c <HAL_DMA_Start_IT+0x48c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d054      	beq.n	8003d60 <HAL_DMA_Start_IT+0x350>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a79      	ldr	r2, [pc, #484]	; (8003ea0 <HAL_DMA_Start_IT+0x490>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d04f      	beq.n	8003d60 <HAL_DMA_Start_IT+0x350>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a77      	ldr	r2, [pc, #476]	; (8003ea4 <HAL_DMA_Start_IT+0x494>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d04a      	beq.n	8003d60 <HAL_DMA_Start_IT+0x350>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a76      	ldr	r2, [pc, #472]	; (8003ea8 <HAL_DMA_Start_IT+0x498>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d045      	beq.n	8003d60 <HAL_DMA_Start_IT+0x350>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a74      	ldr	r2, [pc, #464]	; (8003eac <HAL_DMA_Start_IT+0x49c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d040      	beq.n	8003d60 <HAL_DMA_Start_IT+0x350>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a73      	ldr	r2, [pc, #460]	; (8003eb0 <HAL_DMA_Start_IT+0x4a0>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d03b      	beq.n	8003d60 <HAL_DMA_Start_IT+0x350>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a71      	ldr	r2, [pc, #452]	; (8003eb4 <HAL_DMA_Start_IT+0x4a4>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d036      	beq.n	8003d60 <HAL_DMA_Start_IT+0x350>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a70      	ldr	r2, [pc, #448]	; (8003eb8 <HAL_DMA_Start_IT+0x4a8>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d031      	beq.n	8003d60 <HAL_DMA_Start_IT+0x350>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a6e      	ldr	r2, [pc, #440]	; (8003ebc <HAL_DMA_Start_IT+0x4ac>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d02c      	beq.n	8003d60 <HAL_DMA_Start_IT+0x350>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a6d      	ldr	r2, [pc, #436]	; (8003ec0 <HAL_DMA_Start_IT+0x4b0>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d027      	beq.n	8003d60 <HAL_DMA_Start_IT+0x350>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a6b      	ldr	r2, [pc, #428]	; (8003ec4 <HAL_DMA_Start_IT+0x4b4>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d022      	beq.n	8003d60 <HAL_DMA_Start_IT+0x350>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a6a      	ldr	r2, [pc, #424]	; (8003ec8 <HAL_DMA_Start_IT+0x4b8>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d01d      	beq.n	8003d60 <HAL_DMA_Start_IT+0x350>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a68      	ldr	r2, [pc, #416]	; (8003ecc <HAL_DMA_Start_IT+0x4bc>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d018      	beq.n	8003d60 <HAL_DMA_Start_IT+0x350>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a67      	ldr	r2, [pc, #412]	; (8003ed0 <HAL_DMA_Start_IT+0x4c0>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d013      	beq.n	8003d60 <HAL_DMA_Start_IT+0x350>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a65      	ldr	r2, [pc, #404]	; (8003ed4 <HAL_DMA_Start_IT+0x4c4>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d00e      	beq.n	8003d60 <HAL_DMA_Start_IT+0x350>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a64      	ldr	r2, [pc, #400]	; (8003ed8 <HAL_DMA_Start_IT+0x4c8>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d009      	beq.n	8003d60 <HAL_DMA_Start_IT+0x350>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a62      	ldr	r2, [pc, #392]	; (8003edc <HAL_DMA_Start_IT+0x4cc>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d004      	beq.n	8003d60 <HAL_DMA_Start_IT+0x350>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a61      	ldr	r2, [pc, #388]	; (8003ee0 <HAL_DMA_Start_IT+0x4d0>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d101      	bne.n	8003d64 <HAL_DMA_Start_IT+0x354>
 8003d60:	2301      	movs	r3, #1
 8003d62:	e000      	b.n	8003d66 <HAL_DMA_Start_IT+0x356>
 8003d64:	2300      	movs	r3, #0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d01a      	beq.n	8003da0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d007      	beq.n	8003d88 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d86:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d007      	beq.n	8003da0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d9e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a37      	ldr	r2, [pc, #220]	; (8003e84 <HAL_DMA_Start_IT+0x474>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d04a      	beq.n	8003e40 <HAL_DMA_Start_IT+0x430>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a36      	ldr	r2, [pc, #216]	; (8003e88 <HAL_DMA_Start_IT+0x478>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d045      	beq.n	8003e40 <HAL_DMA_Start_IT+0x430>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a34      	ldr	r2, [pc, #208]	; (8003e8c <HAL_DMA_Start_IT+0x47c>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d040      	beq.n	8003e40 <HAL_DMA_Start_IT+0x430>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a33      	ldr	r2, [pc, #204]	; (8003e90 <HAL_DMA_Start_IT+0x480>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d03b      	beq.n	8003e40 <HAL_DMA_Start_IT+0x430>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a31      	ldr	r2, [pc, #196]	; (8003e94 <HAL_DMA_Start_IT+0x484>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d036      	beq.n	8003e40 <HAL_DMA_Start_IT+0x430>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a30      	ldr	r2, [pc, #192]	; (8003e98 <HAL_DMA_Start_IT+0x488>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d031      	beq.n	8003e40 <HAL_DMA_Start_IT+0x430>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a2e      	ldr	r2, [pc, #184]	; (8003e9c <HAL_DMA_Start_IT+0x48c>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d02c      	beq.n	8003e40 <HAL_DMA_Start_IT+0x430>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a2d      	ldr	r2, [pc, #180]	; (8003ea0 <HAL_DMA_Start_IT+0x490>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d027      	beq.n	8003e40 <HAL_DMA_Start_IT+0x430>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a2b      	ldr	r2, [pc, #172]	; (8003ea4 <HAL_DMA_Start_IT+0x494>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d022      	beq.n	8003e40 <HAL_DMA_Start_IT+0x430>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a2a      	ldr	r2, [pc, #168]	; (8003ea8 <HAL_DMA_Start_IT+0x498>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d01d      	beq.n	8003e40 <HAL_DMA_Start_IT+0x430>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a28      	ldr	r2, [pc, #160]	; (8003eac <HAL_DMA_Start_IT+0x49c>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d018      	beq.n	8003e40 <HAL_DMA_Start_IT+0x430>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a27      	ldr	r2, [pc, #156]	; (8003eb0 <HAL_DMA_Start_IT+0x4a0>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d013      	beq.n	8003e40 <HAL_DMA_Start_IT+0x430>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a25      	ldr	r2, [pc, #148]	; (8003eb4 <HAL_DMA_Start_IT+0x4a4>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d00e      	beq.n	8003e40 <HAL_DMA_Start_IT+0x430>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a24      	ldr	r2, [pc, #144]	; (8003eb8 <HAL_DMA_Start_IT+0x4a8>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d009      	beq.n	8003e40 <HAL_DMA_Start_IT+0x430>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a22      	ldr	r2, [pc, #136]	; (8003ebc <HAL_DMA_Start_IT+0x4ac>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d004      	beq.n	8003e40 <HAL_DMA_Start_IT+0x430>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a21      	ldr	r2, [pc, #132]	; (8003ec0 <HAL_DMA_Start_IT+0x4b0>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d108      	bne.n	8003e52 <HAL_DMA_Start_IT+0x442>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0201 	orr.w	r2, r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	e012      	b.n	8003e78 <HAL_DMA_Start_IT+0x468>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f042 0201 	orr.w	r2, r2, #1
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	e009      	b.n	8003e78 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e72:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	40020010 	.word	0x40020010
 8003e88:	40020028 	.word	0x40020028
 8003e8c:	40020040 	.word	0x40020040
 8003e90:	40020058 	.word	0x40020058
 8003e94:	40020070 	.word	0x40020070
 8003e98:	40020088 	.word	0x40020088
 8003e9c:	400200a0 	.word	0x400200a0
 8003ea0:	400200b8 	.word	0x400200b8
 8003ea4:	40020410 	.word	0x40020410
 8003ea8:	40020428 	.word	0x40020428
 8003eac:	40020440 	.word	0x40020440
 8003eb0:	40020458 	.word	0x40020458
 8003eb4:	40020470 	.word	0x40020470
 8003eb8:	40020488 	.word	0x40020488
 8003ebc:	400204a0 	.word	0x400204a0
 8003ec0:	400204b8 	.word	0x400204b8
 8003ec4:	58025408 	.word	0x58025408
 8003ec8:	5802541c 	.word	0x5802541c
 8003ecc:	58025430 	.word	0x58025430
 8003ed0:	58025444 	.word	0x58025444
 8003ed4:	58025458 	.word	0x58025458
 8003ed8:	5802546c 	.word	0x5802546c
 8003edc:	58025480 	.word	0x58025480
 8003ee0:	58025494 	.word	0x58025494

08003ee4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b08a      	sub	sp, #40	; 0x28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003eec:	2300      	movs	r3, #0
 8003eee:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ef0:	4b67      	ldr	r3, [pc, #412]	; (8004090 <HAL_DMA_IRQHandler+0x1ac>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a67      	ldr	r2, [pc, #412]	; (8004094 <HAL_DMA_IRQHandler+0x1b0>)
 8003ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8003efa:	0a9b      	lsrs	r3, r3, #10
 8003efc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f02:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f08:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003f0a:	6a3b      	ldr	r3, [r7, #32]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a5f      	ldr	r2, [pc, #380]	; (8004098 <HAL_DMA_IRQHandler+0x1b4>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d04a      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xd2>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a5d      	ldr	r2, [pc, #372]	; (800409c <HAL_DMA_IRQHandler+0x1b8>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d045      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xd2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a5c      	ldr	r2, [pc, #368]	; (80040a0 <HAL_DMA_IRQHandler+0x1bc>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d040      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xd2>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a5a      	ldr	r2, [pc, #360]	; (80040a4 <HAL_DMA_IRQHandler+0x1c0>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d03b      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xd2>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a59      	ldr	r2, [pc, #356]	; (80040a8 <HAL_DMA_IRQHandler+0x1c4>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d036      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xd2>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a57      	ldr	r2, [pc, #348]	; (80040ac <HAL_DMA_IRQHandler+0x1c8>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d031      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xd2>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a56      	ldr	r2, [pc, #344]	; (80040b0 <HAL_DMA_IRQHandler+0x1cc>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d02c      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xd2>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a54      	ldr	r2, [pc, #336]	; (80040b4 <HAL_DMA_IRQHandler+0x1d0>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d027      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xd2>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a53      	ldr	r2, [pc, #332]	; (80040b8 <HAL_DMA_IRQHandler+0x1d4>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d022      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xd2>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a51      	ldr	r2, [pc, #324]	; (80040bc <HAL_DMA_IRQHandler+0x1d8>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d01d      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xd2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a50      	ldr	r2, [pc, #320]	; (80040c0 <HAL_DMA_IRQHandler+0x1dc>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d018      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xd2>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a4e      	ldr	r2, [pc, #312]	; (80040c4 <HAL_DMA_IRQHandler+0x1e0>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d013      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xd2>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a4d      	ldr	r2, [pc, #308]	; (80040c8 <HAL_DMA_IRQHandler+0x1e4>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d00e      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xd2>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a4b      	ldr	r2, [pc, #300]	; (80040cc <HAL_DMA_IRQHandler+0x1e8>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d009      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xd2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a4a      	ldr	r2, [pc, #296]	; (80040d0 <HAL_DMA_IRQHandler+0x1ec>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d004      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xd2>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a48      	ldr	r2, [pc, #288]	; (80040d4 <HAL_DMA_IRQHandler+0x1f0>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d101      	bne.n	8003fba <HAL_DMA_IRQHandler+0xd6>
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e000      	b.n	8003fbc <HAL_DMA_IRQHandler+0xd8>
 8003fba:	2300      	movs	r3, #0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 842b 	beq.w	8004818 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc6:	f003 031f 	and.w	r3, r3, #31
 8003fca:	2208      	movs	r2, #8
 8003fcc:	409a      	lsls	r2, r3
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 80a2 	beq.w	800411c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a2e      	ldr	r2, [pc, #184]	; (8004098 <HAL_DMA_IRQHandler+0x1b4>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d04a      	beq.n	8004078 <HAL_DMA_IRQHandler+0x194>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a2d      	ldr	r2, [pc, #180]	; (800409c <HAL_DMA_IRQHandler+0x1b8>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d045      	beq.n	8004078 <HAL_DMA_IRQHandler+0x194>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a2b      	ldr	r2, [pc, #172]	; (80040a0 <HAL_DMA_IRQHandler+0x1bc>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d040      	beq.n	8004078 <HAL_DMA_IRQHandler+0x194>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a2a      	ldr	r2, [pc, #168]	; (80040a4 <HAL_DMA_IRQHandler+0x1c0>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d03b      	beq.n	8004078 <HAL_DMA_IRQHandler+0x194>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a28      	ldr	r2, [pc, #160]	; (80040a8 <HAL_DMA_IRQHandler+0x1c4>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d036      	beq.n	8004078 <HAL_DMA_IRQHandler+0x194>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a27      	ldr	r2, [pc, #156]	; (80040ac <HAL_DMA_IRQHandler+0x1c8>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d031      	beq.n	8004078 <HAL_DMA_IRQHandler+0x194>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a25      	ldr	r2, [pc, #148]	; (80040b0 <HAL_DMA_IRQHandler+0x1cc>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d02c      	beq.n	8004078 <HAL_DMA_IRQHandler+0x194>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a24      	ldr	r2, [pc, #144]	; (80040b4 <HAL_DMA_IRQHandler+0x1d0>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d027      	beq.n	8004078 <HAL_DMA_IRQHandler+0x194>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a22      	ldr	r2, [pc, #136]	; (80040b8 <HAL_DMA_IRQHandler+0x1d4>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d022      	beq.n	8004078 <HAL_DMA_IRQHandler+0x194>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a21      	ldr	r2, [pc, #132]	; (80040bc <HAL_DMA_IRQHandler+0x1d8>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d01d      	beq.n	8004078 <HAL_DMA_IRQHandler+0x194>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a1f      	ldr	r2, [pc, #124]	; (80040c0 <HAL_DMA_IRQHandler+0x1dc>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d018      	beq.n	8004078 <HAL_DMA_IRQHandler+0x194>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a1e      	ldr	r2, [pc, #120]	; (80040c4 <HAL_DMA_IRQHandler+0x1e0>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d013      	beq.n	8004078 <HAL_DMA_IRQHandler+0x194>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a1c      	ldr	r2, [pc, #112]	; (80040c8 <HAL_DMA_IRQHandler+0x1e4>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d00e      	beq.n	8004078 <HAL_DMA_IRQHandler+0x194>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a1b      	ldr	r2, [pc, #108]	; (80040cc <HAL_DMA_IRQHandler+0x1e8>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d009      	beq.n	8004078 <HAL_DMA_IRQHandler+0x194>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a19      	ldr	r2, [pc, #100]	; (80040d0 <HAL_DMA_IRQHandler+0x1ec>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d004      	beq.n	8004078 <HAL_DMA_IRQHandler+0x194>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a18      	ldr	r2, [pc, #96]	; (80040d4 <HAL_DMA_IRQHandler+0x1f0>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d12f      	bne.n	80040d8 <HAL_DMA_IRQHandler+0x1f4>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0304 	and.w	r3, r3, #4
 8004082:	2b00      	cmp	r3, #0
 8004084:	bf14      	ite	ne
 8004086:	2301      	movne	r3, #1
 8004088:	2300      	moveq	r3, #0
 800408a:	b2db      	uxtb	r3, r3
 800408c:	e02e      	b.n	80040ec <HAL_DMA_IRQHandler+0x208>
 800408e:	bf00      	nop
 8004090:	24000008 	.word	0x24000008
 8004094:	1b4e81b5 	.word	0x1b4e81b5
 8004098:	40020010 	.word	0x40020010
 800409c:	40020028 	.word	0x40020028
 80040a0:	40020040 	.word	0x40020040
 80040a4:	40020058 	.word	0x40020058
 80040a8:	40020070 	.word	0x40020070
 80040ac:	40020088 	.word	0x40020088
 80040b0:	400200a0 	.word	0x400200a0
 80040b4:	400200b8 	.word	0x400200b8
 80040b8:	40020410 	.word	0x40020410
 80040bc:	40020428 	.word	0x40020428
 80040c0:	40020440 	.word	0x40020440
 80040c4:	40020458 	.word	0x40020458
 80040c8:	40020470 	.word	0x40020470
 80040cc:	40020488 	.word	0x40020488
 80040d0:	400204a0 	.word	0x400204a0
 80040d4:	400204b8 	.word	0x400204b8
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	bf14      	ite	ne
 80040e6:	2301      	movne	r3, #1
 80040e8:	2300      	moveq	r3, #0
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d015      	beq.n	800411c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0204 	bic.w	r2, r2, #4
 80040fe:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004104:	f003 031f 	and.w	r3, r3, #31
 8004108:	2208      	movs	r2, #8
 800410a:	409a      	lsls	r2, r3
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004114:	f043 0201 	orr.w	r2, r3, #1
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004120:	f003 031f 	and.w	r3, r3, #31
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	fa22 f303 	lsr.w	r3, r2, r3
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d06e      	beq.n	8004210 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a69      	ldr	r2, [pc, #420]	; (80042dc <HAL_DMA_IRQHandler+0x3f8>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d04a      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x2ee>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a67      	ldr	r2, [pc, #412]	; (80042e0 <HAL_DMA_IRQHandler+0x3fc>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d045      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x2ee>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a66      	ldr	r2, [pc, #408]	; (80042e4 <HAL_DMA_IRQHandler+0x400>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d040      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x2ee>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a64      	ldr	r2, [pc, #400]	; (80042e8 <HAL_DMA_IRQHandler+0x404>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d03b      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x2ee>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a63      	ldr	r2, [pc, #396]	; (80042ec <HAL_DMA_IRQHandler+0x408>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d036      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x2ee>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a61      	ldr	r2, [pc, #388]	; (80042f0 <HAL_DMA_IRQHandler+0x40c>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d031      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x2ee>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a60      	ldr	r2, [pc, #384]	; (80042f4 <HAL_DMA_IRQHandler+0x410>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d02c      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x2ee>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a5e      	ldr	r2, [pc, #376]	; (80042f8 <HAL_DMA_IRQHandler+0x414>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d027      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x2ee>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a5d      	ldr	r2, [pc, #372]	; (80042fc <HAL_DMA_IRQHandler+0x418>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d022      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x2ee>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a5b      	ldr	r2, [pc, #364]	; (8004300 <HAL_DMA_IRQHandler+0x41c>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d01d      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x2ee>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a5a      	ldr	r2, [pc, #360]	; (8004304 <HAL_DMA_IRQHandler+0x420>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d018      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x2ee>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a58      	ldr	r2, [pc, #352]	; (8004308 <HAL_DMA_IRQHandler+0x424>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d013      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x2ee>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a57      	ldr	r2, [pc, #348]	; (800430c <HAL_DMA_IRQHandler+0x428>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d00e      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x2ee>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a55      	ldr	r2, [pc, #340]	; (8004310 <HAL_DMA_IRQHandler+0x42c>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d009      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x2ee>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a54      	ldr	r2, [pc, #336]	; (8004314 <HAL_DMA_IRQHandler+0x430>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d004      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x2ee>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a52      	ldr	r2, [pc, #328]	; (8004318 <HAL_DMA_IRQHandler+0x434>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d10a      	bne.n	80041e8 <HAL_DMA_IRQHandler+0x304>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041dc:	2b00      	cmp	r3, #0
 80041de:	bf14      	ite	ne
 80041e0:	2301      	movne	r3, #1
 80041e2:	2300      	moveq	r3, #0
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	e003      	b.n	80041f0 <HAL_DMA_IRQHandler+0x30c>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2300      	movs	r3, #0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00d      	beq.n	8004210 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f8:	f003 031f 	and.w	r3, r3, #31
 80041fc:	2201      	movs	r2, #1
 80041fe:	409a      	lsls	r2, r3
 8004200:	6a3b      	ldr	r3, [r7, #32]
 8004202:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004208:	f043 0202 	orr.w	r2, r3, #2
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004214:	f003 031f 	and.w	r3, r3, #31
 8004218:	2204      	movs	r2, #4
 800421a:	409a      	lsls	r2, r3
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	4013      	ands	r3, r2
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 808f 	beq.w	8004344 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a2c      	ldr	r2, [pc, #176]	; (80042dc <HAL_DMA_IRQHandler+0x3f8>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d04a      	beq.n	80042c6 <HAL_DMA_IRQHandler+0x3e2>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a2a      	ldr	r2, [pc, #168]	; (80042e0 <HAL_DMA_IRQHandler+0x3fc>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d045      	beq.n	80042c6 <HAL_DMA_IRQHandler+0x3e2>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a29      	ldr	r2, [pc, #164]	; (80042e4 <HAL_DMA_IRQHandler+0x400>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d040      	beq.n	80042c6 <HAL_DMA_IRQHandler+0x3e2>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a27      	ldr	r2, [pc, #156]	; (80042e8 <HAL_DMA_IRQHandler+0x404>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d03b      	beq.n	80042c6 <HAL_DMA_IRQHandler+0x3e2>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a26      	ldr	r2, [pc, #152]	; (80042ec <HAL_DMA_IRQHandler+0x408>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d036      	beq.n	80042c6 <HAL_DMA_IRQHandler+0x3e2>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a24      	ldr	r2, [pc, #144]	; (80042f0 <HAL_DMA_IRQHandler+0x40c>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d031      	beq.n	80042c6 <HAL_DMA_IRQHandler+0x3e2>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a23      	ldr	r2, [pc, #140]	; (80042f4 <HAL_DMA_IRQHandler+0x410>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d02c      	beq.n	80042c6 <HAL_DMA_IRQHandler+0x3e2>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a21      	ldr	r2, [pc, #132]	; (80042f8 <HAL_DMA_IRQHandler+0x414>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d027      	beq.n	80042c6 <HAL_DMA_IRQHandler+0x3e2>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a20      	ldr	r2, [pc, #128]	; (80042fc <HAL_DMA_IRQHandler+0x418>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d022      	beq.n	80042c6 <HAL_DMA_IRQHandler+0x3e2>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a1e      	ldr	r2, [pc, #120]	; (8004300 <HAL_DMA_IRQHandler+0x41c>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d01d      	beq.n	80042c6 <HAL_DMA_IRQHandler+0x3e2>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a1d      	ldr	r2, [pc, #116]	; (8004304 <HAL_DMA_IRQHandler+0x420>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d018      	beq.n	80042c6 <HAL_DMA_IRQHandler+0x3e2>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a1b      	ldr	r2, [pc, #108]	; (8004308 <HAL_DMA_IRQHandler+0x424>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d013      	beq.n	80042c6 <HAL_DMA_IRQHandler+0x3e2>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a1a      	ldr	r2, [pc, #104]	; (800430c <HAL_DMA_IRQHandler+0x428>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d00e      	beq.n	80042c6 <HAL_DMA_IRQHandler+0x3e2>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a18      	ldr	r2, [pc, #96]	; (8004310 <HAL_DMA_IRQHandler+0x42c>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d009      	beq.n	80042c6 <HAL_DMA_IRQHandler+0x3e2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a17      	ldr	r2, [pc, #92]	; (8004314 <HAL_DMA_IRQHandler+0x430>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d004      	beq.n	80042c6 <HAL_DMA_IRQHandler+0x3e2>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a15      	ldr	r2, [pc, #84]	; (8004318 <HAL_DMA_IRQHandler+0x434>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d12a      	bne.n	800431c <HAL_DMA_IRQHandler+0x438>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	bf14      	ite	ne
 80042d4:	2301      	movne	r3, #1
 80042d6:	2300      	moveq	r3, #0
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	e023      	b.n	8004324 <HAL_DMA_IRQHandler+0x440>
 80042dc:	40020010 	.word	0x40020010
 80042e0:	40020028 	.word	0x40020028
 80042e4:	40020040 	.word	0x40020040
 80042e8:	40020058 	.word	0x40020058
 80042ec:	40020070 	.word	0x40020070
 80042f0:	40020088 	.word	0x40020088
 80042f4:	400200a0 	.word	0x400200a0
 80042f8:	400200b8 	.word	0x400200b8
 80042fc:	40020410 	.word	0x40020410
 8004300:	40020428 	.word	0x40020428
 8004304:	40020440 	.word	0x40020440
 8004308:	40020458 	.word	0x40020458
 800430c:	40020470 	.word	0x40020470
 8004310:	40020488 	.word	0x40020488
 8004314:	400204a0 	.word	0x400204a0
 8004318:	400204b8 	.word	0x400204b8
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2300      	movs	r3, #0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00d      	beq.n	8004344 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800432c:	f003 031f 	and.w	r3, r3, #31
 8004330:	2204      	movs	r2, #4
 8004332:	409a      	lsls	r2, r3
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433c:	f043 0204 	orr.w	r2, r3, #4
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004348:	f003 031f 	and.w	r3, r3, #31
 800434c:	2210      	movs	r2, #16
 800434e:	409a      	lsls	r2, r3
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	4013      	ands	r3, r2
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 80a6 	beq.w	80044a6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a85      	ldr	r2, [pc, #532]	; (8004574 <HAL_DMA_IRQHandler+0x690>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d04a      	beq.n	80043fa <HAL_DMA_IRQHandler+0x516>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a83      	ldr	r2, [pc, #524]	; (8004578 <HAL_DMA_IRQHandler+0x694>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d045      	beq.n	80043fa <HAL_DMA_IRQHandler+0x516>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a82      	ldr	r2, [pc, #520]	; (800457c <HAL_DMA_IRQHandler+0x698>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d040      	beq.n	80043fa <HAL_DMA_IRQHandler+0x516>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a80      	ldr	r2, [pc, #512]	; (8004580 <HAL_DMA_IRQHandler+0x69c>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d03b      	beq.n	80043fa <HAL_DMA_IRQHandler+0x516>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a7f      	ldr	r2, [pc, #508]	; (8004584 <HAL_DMA_IRQHandler+0x6a0>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d036      	beq.n	80043fa <HAL_DMA_IRQHandler+0x516>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a7d      	ldr	r2, [pc, #500]	; (8004588 <HAL_DMA_IRQHandler+0x6a4>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d031      	beq.n	80043fa <HAL_DMA_IRQHandler+0x516>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a7c      	ldr	r2, [pc, #496]	; (800458c <HAL_DMA_IRQHandler+0x6a8>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d02c      	beq.n	80043fa <HAL_DMA_IRQHandler+0x516>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a7a      	ldr	r2, [pc, #488]	; (8004590 <HAL_DMA_IRQHandler+0x6ac>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d027      	beq.n	80043fa <HAL_DMA_IRQHandler+0x516>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a79      	ldr	r2, [pc, #484]	; (8004594 <HAL_DMA_IRQHandler+0x6b0>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d022      	beq.n	80043fa <HAL_DMA_IRQHandler+0x516>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a77      	ldr	r2, [pc, #476]	; (8004598 <HAL_DMA_IRQHandler+0x6b4>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d01d      	beq.n	80043fa <HAL_DMA_IRQHandler+0x516>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a76      	ldr	r2, [pc, #472]	; (800459c <HAL_DMA_IRQHandler+0x6b8>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d018      	beq.n	80043fa <HAL_DMA_IRQHandler+0x516>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a74      	ldr	r2, [pc, #464]	; (80045a0 <HAL_DMA_IRQHandler+0x6bc>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d013      	beq.n	80043fa <HAL_DMA_IRQHandler+0x516>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a73      	ldr	r2, [pc, #460]	; (80045a4 <HAL_DMA_IRQHandler+0x6c0>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d00e      	beq.n	80043fa <HAL_DMA_IRQHandler+0x516>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a71      	ldr	r2, [pc, #452]	; (80045a8 <HAL_DMA_IRQHandler+0x6c4>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d009      	beq.n	80043fa <HAL_DMA_IRQHandler+0x516>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a70      	ldr	r2, [pc, #448]	; (80045ac <HAL_DMA_IRQHandler+0x6c8>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d004      	beq.n	80043fa <HAL_DMA_IRQHandler+0x516>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a6e      	ldr	r2, [pc, #440]	; (80045b0 <HAL_DMA_IRQHandler+0x6cc>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d10a      	bne.n	8004410 <HAL_DMA_IRQHandler+0x52c>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0308 	and.w	r3, r3, #8
 8004404:	2b00      	cmp	r3, #0
 8004406:	bf14      	ite	ne
 8004408:	2301      	movne	r3, #1
 800440a:	2300      	moveq	r3, #0
 800440c:	b2db      	uxtb	r3, r3
 800440e:	e009      	b.n	8004424 <HAL_DMA_IRQHandler+0x540>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0304 	and.w	r3, r3, #4
 800441a:	2b00      	cmp	r3, #0
 800441c:	bf14      	ite	ne
 800441e:	2301      	movne	r3, #1
 8004420:	2300      	moveq	r3, #0
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	d03e      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800442c:	f003 031f 	and.w	r3, r3, #31
 8004430:	2210      	movs	r2, #16
 8004432:	409a      	lsls	r2, r3
 8004434:	6a3b      	ldr	r3, [r7, #32]
 8004436:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d018      	beq.n	8004478 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d108      	bne.n	8004466 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004458:	2b00      	cmp	r3, #0
 800445a:	d024      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	4798      	blx	r3
 8004464:	e01f      	b.n	80044a6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800446a:	2b00      	cmp	r3, #0
 800446c:	d01b      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	4798      	blx	r3
 8004476:	e016      	b.n	80044a6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004482:	2b00      	cmp	r3, #0
 8004484:	d107      	bne.n	8004496 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 0208 	bic.w	r2, r2, #8
 8004494:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044aa:	f003 031f 	and.w	r3, r3, #31
 80044ae:	2220      	movs	r2, #32
 80044b0:	409a      	lsls	r2, r3
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	4013      	ands	r3, r2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 8110 	beq.w	80046dc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a2c      	ldr	r2, [pc, #176]	; (8004574 <HAL_DMA_IRQHandler+0x690>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d04a      	beq.n	800455c <HAL_DMA_IRQHandler+0x678>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a2b      	ldr	r2, [pc, #172]	; (8004578 <HAL_DMA_IRQHandler+0x694>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d045      	beq.n	800455c <HAL_DMA_IRQHandler+0x678>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a29      	ldr	r2, [pc, #164]	; (800457c <HAL_DMA_IRQHandler+0x698>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d040      	beq.n	800455c <HAL_DMA_IRQHandler+0x678>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a28      	ldr	r2, [pc, #160]	; (8004580 <HAL_DMA_IRQHandler+0x69c>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d03b      	beq.n	800455c <HAL_DMA_IRQHandler+0x678>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a26      	ldr	r2, [pc, #152]	; (8004584 <HAL_DMA_IRQHandler+0x6a0>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d036      	beq.n	800455c <HAL_DMA_IRQHandler+0x678>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a25      	ldr	r2, [pc, #148]	; (8004588 <HAL_DMA_IRQHandler+0x6a4>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d031      	beq.n	800455c <HAL_DMA_IRQHandler+0x678>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a23      	ldr	r2, [pc, #140]	; (800458c <HAL_DMA_IRQHandler+0x6a8>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d02c      	beq.n	800455c <HAL_DMA_IRQHandler+0x678>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a22      	ldr	r2, [pc, #136]	; (8004590 <HAL_DMA_IRQHandler+0x6ac>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d027      	beq.n	800455c <HAL_DMA_IRQHandler+0x678>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a20      	ldr	r2, [pc, #128]	; (8004594 <HAL_DMA_IRQHandler+0x6b0>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d022      	beq.n	800455c <HAL_DMA_IRQHandler+0x678>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a1f      	ldr	r2, [pc, #124]	; (8004598 <HAL_DMA_IRQHandler+0x6b4>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d01d      	beq.n	800455c <HAL_DMA_IRQHandler+0x678>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a1d      	ldr	r2, [pc, #116]	; (800459c <HAL_DMA_IRQHandler+0x6b8>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d018      	beq.n	800455c <HAL_DMA_IRQHandler+0x678>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a1c      	ldr	r2, [pc, #112]	; (80045a0 <HAL_DMA_IRQHandler+0x6bc>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d013      	beq.n	800455c <HAL_DMA_IRQHandler+0x678>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a1a      	ldr	r2, [pc, #104]	; (80045a4 <HAL_DMA_IRQHandler+0x6c0>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d00e      	beq.n	800455c <HAL_DMA_IRQHandler+0x678>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a19      	ldr	r2, [pc, #100]	; (80045a8 <HAL_DMA_IRQHandler+0x6c4>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d009      	beq.n	800455c <HAL_DMA_IRQHandler+0x678>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a17      	ldr	r2, [pc, #92]	; (80045ac <HAL_DMA_IRQHandler+0x6c8>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d004      	beq.n	800455c <HAL_DMA_IRQHandler+0x678>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a16      	ldr	r2, [pc, #88]	; (80045b0 <HAL_DMA_IRQHandler+0x6cc>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d12b      	bne.n	80045b4 <HAL_DMA_IRQHandler+0x6d0>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0310 	and.w	r3, r3, #16
 8004566:	2b00      	cmp	r3, #0
 8004568:	bf14      	ite	ne
 800456a:	2301      	movne	r3, #1
 800456c:	2300      	moveq	r3, #0
 800456e:	b2db      	uxtb	r3, r3
 8004570:	e02a      	b.n	80045c8 <HAL_DMA_IRQHandler+0x6e4>
 8004572:	bf00      	nop
 8004574:	40020010 	.word	0x40020010
 8004578:	40020028 	.word	0x40020028
 800457c:	40020040 	.word	0x40020040
 8004580:	40020058 	.word	0x40020058
 8004584:	40020070 	.word	0x40020070
 8004588:	40020088 	.word	0x40020088
 800458c:	400200a0 	.word	0x400200a0
 8004590:	400200b8 	.word	0x400200b8
 8004594:	40020410 	.word	0x40020410
 8004598:	40020428 	.word	0x40020428
 800459c:	40020440 	.word	0x40020440
 80045a0:	40020458 	.word	0x40020458
 80045a4:	40020470 	.word	0x40020470
 80045a8:	40020488 	.word	0x40020488
 80045ac:	400204a0 	.word	0x400204a0
 80045b0:	400204b8 	.word	0x400204b8
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	bf14      	ite	ne
 80045c2:	2301      	movne	r3, #1
 80045c4:	2300      	moveq	r3, #0
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 8087 	beq.w	80046dc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d2:	f003 031f 	and.w	r3, r3, #31
 80045d6:	2220      	movs	r2, #32
 80045d8:	409a      	lsls	r2, r3
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b04      	cmp	r3, #4
 80045e8:	d139      	bne.n	800465e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0216 	bic.w	r2, r2, #22
 80045f8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	695a      	ldr	r2, [r3, #20]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004608:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	2b00      	cmp	r3, #0
 8004610:	d103      	bne.n	800461a <HAL_DMA_IRQHandler+0x736>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004616:	2b00      	cmp	r3, #0
 8004618:	d007      	beq.n	800462a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 0208 	bic.w	r2, r2, #8
 8004628:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800462e:	f003 031f 	and.w	r3, r3, #31
 8004632:	223f      	movs	r2, #63	; 0x3f
 8004634:	409a      	lsls	r2, r3
 8004636:	6a3b      	ldr	r3, [r7, #32]
 8004638:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 8382 	beq.w	8004d58 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	4798      	blx	r3
          }
          return;
 800465c:	e37c      	b.n	8004d58 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d018      	beq.n	800469e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d108      	bne.n	800468c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467e:	2b00      	cmp	r3, #0
 8004680:	d02c      	beq.n	80046dc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	4798      	blx	r3
 800468a:	e027      	b.n	80046dc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004690:	2b00      	cmp	r3, #0
 8004692:	d023      	beq.n	80046dc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	4798      	blx	r3
 800469c:	e01e      	b.n	80046dc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10f      	bne.n	80046cc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 0210 	bic.w	r2, r2, #16
 80046ba:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d003      	beq.n	80046dc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 833e 	beq.w	8004d62 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 8088 	beq.w	8004804 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2204      	movs	r2, #4
 80046f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a8e      	ldr	r2, [pc, #568]	; (800493c <HAL_DMA_IRQHandler+0xa58>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d04a      	beq.n	800479c <HAL_DMA_IRQHandler+0x8b8>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a8d      	ldr	r2, [pc, #564]	; (8004940 <HAL_DMA_IRQHandler+0xa5c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d045      	beq.n	800479c <HAL_DMA_IRQHandler+0x8b8>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a8b      	ldr	r2, [pc, #556]	; (8004944 <HAL_DMA_IRQHandler+0xa60>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d040      	beq.n	800479c <HAL_DMA_IRQHandler+0x8b8>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a8a      	ldr	r2, [pc, #552]	; (8004948 <HAL_DMA_IRQHandler+0xa64>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d03b      	beq.n	800479c <HAL_DMA_IRQHandler+0x8b8>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a88      	ldr	r2, [pc, #544]	; (800494c <HAL_DMA_IRQHandler+0xa68>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d036      	beq.n	800479c <HAL_DMA_IRQHandler+0x8b8>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a87      	ldr	r2, [pc, #540]	; (8004950 <HAL_DMA_IRQHandler+0xa6c>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d031      	beq.n	800479c <HAL_DMA_IRQHandler+0x8b8>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a85      	ldr	r2, [pc, #532]	; (8004954 <HAL_DMA_IRQHandler+0xa70>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d02c      	beq.n	800479c <HAL_DMA_IRQHandler+0x8b8>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a84      	ldr	r2, [pc, #528]	; (8004958 <HAL_DMA_IRQHandler+0xa74>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d027      	beq.n	800479c <HAL_DMA_IRQHandler+0x8b8>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a82      	ldr	r2, [pc, #520]	; (800495c <HAL_DMA_IRQHandler+0xa78>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d022      	beq.n	800479c <HAL_DMA_IRQHandler+0x8b8>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a81      	ldr	r2, [pc, #516]	; (8004960 <HAL_DMA_IRQHandler+0xa7c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d01d      	beq.n	800479c <HAL_DMA_IRQHandler+0x8b8>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a7f      	ldr	r2, [pc, #508]	; (8004964 <HAL_DMA_IRQHandler+0xa80>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d018      	beq.n	800479c <HAL_DMA_IRQHandler+0x8b8>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a7e      	ldr	r2, [pc, #504]	; (8004968 <HAL_DMA_IRQHandler+0xa84>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d013      	beq.n	800479c <HAL_DMA_IRQHandler+0x8b8>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a7c      	ldr	r2, [pc, #496]	; (800496c <HAL_DMA_IRQHandler+0xa88>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d00e      	beq.n	800479c <HAL_DMA_IRQHandler+0x8b8>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a7b      	ldr	r2, [pc, #492]	; (8004970 <HAL_DMA_IRQHandler+0xa8c>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d009      	beq.n	800479c <HAL_DMA_IRQHandler+0x8b8>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a79      	ldr	r2, [pc, #484]	; (8004974 <HAL_DMA_IRQHandler+0xa90>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d004      	beq.n	800479c <HAL_DMA_IRQHandler+0x8b8>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a78      	ldr	r2, [pc, #480]	; (8004978 <HAL_DMA_IRQHandler+0xa94>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d108      	bne.n	80047ae <HAL_DMA_IRQHandler+0x8ca>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 0201 	bic.w	r2, r2, #1
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	e007      	b.n	80047be <HAL_DMA_IRQHandler+0x8da>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 0201 	bic.w	r2, r2, #1
 80047bc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	3301      	adds	r3, #1
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d307      	bcc.n	80047da <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1f2      	bne.n	80047be <HAL_DMA_IRQHandler+0x8da>
 80047d8:	e000      	b.n	80047dc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80047da:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d004      	beq.n	80047fc <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2203      	movs	r2, #3
 80047f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80047fa:	e003      	b.n	8004804 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 82aa 	beq.w	8004d62 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	4798      	blx	r3
 8004816:	e2a4      	b.n	8004d62 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a57      	ldr	r2, [pc, #348]	; (800497c <HAL_DMA_IRQHandler+0xa98>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d04a      	beq.n	80048b8 <HAL_DMA_IRQHandler+0x9d4>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a56      	ldr	r2, [pc, #344]	; (8004980 <HAL_DMA_IRQHandler+0xa9c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d045      	beq.n	80048b8 <HAL_DMA_IRQHandler+0x9d4>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a54      	ldr	r2, [pc, #336]	; (8004984 <HAL_DMA_IRQHandler+0xaa0>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d040      	beq.n	80048b8 <HAL_DMA_IRQHandler+0x9d4>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a53      	ldr	r2, [pc, #332]	; (8004988 <HAL_DMA_IRQHandler+0xaa4>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d03b      	beq.n	80048b8 <HAL_DMA_IRQHandler+0x9d4>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a51      	ldr	r2, [pc, #324]	; (800498c <HAL_DMA_IRQHandler+0xaa8>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d036      	beq.n	80048b8 <HAL_DMA_IRQHandler+0x9d4>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a50      	ldr	r2, [pc, #320]	; (8004990 <HAL_DMA_IRQHandler+0xaac>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d031      	beq.n	80048b8 <HAL_DMA_IRQHandler+0x9d4>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a4e      	ldr	r2, [pc, #312]	; (8004994 <HAL_DMA_IRQHandler+0xab0>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d02c      	beq.n	80048b8 <HAL_DMA_IRQHandler+0x9d4>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a4d      	ldr	r2, [pc, #308]	; (8004998 <HAL_DMA_IRQHandler+0xab4>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d027      	beq.n	80048b8 <HAL_DMA_IRQHandler+0x9d4>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a4b      	ldr	r2, [pc, #300]	; (800499c <HAL_DMA_IRQHandler+0xab8>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d022      	beq.n	80048b8 <HAL_DMA_IRQHandler+0x9d4>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a4a      	ldr	r2, [pc, #296]	; (80049a0 <HAL_DMA_IRQHandler+0xabc>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d01d      	beq.n	80048b8 <HAL_DMA_IRQHandler+0x9d4>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a48      	ldr	r2, [pc, #288]	; (80049a4 <HAL_DMA_IRQHandler+0xac0>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d018      	beq.n	80048b8 <HAL_DMA_IRQHandler+0x9d4>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a47      	ldr	r2, [pc, #284]	; (80049a8 <HAL_DMA_IRQHandler+0xac4>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d013      	beq.n	80048b8 <HAL_DMA_IRQHandler+0x9d4>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a45      	ldr	r2, [pc, #276]	; (80049ac <HAL_DMA_IRQHandler+0xac8>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d00e      	beq.n	80048b8 <HAL_DMA_IRQHandler+0x9d4>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a44      	ldr	r2, [pc, #272]	; (80049b0 <HAL_DMA_IRQHandler+0xacc>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d009      	beq.n	80048b8 <HAL_DMA_IRQHandler+0x9d4>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a42      	ldr	r2, [pc, #264]	; (80049b4 <HAL_DMA_IRQHandler+0xad0>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d004      	beq.n	80048b8 <HAL_DMA_IRQHandler+0x9d4>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a41      	ldr	r2, [pc, #260]	; (80049b8 <HAL_DMA_IRQHandler+0xad4>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d101      	bne.n	80048bc <HAL_DMA_IRQHandler+0x9d8>
 80048b8:	2301      	movs	r3, #1
 80048ba:	e000      	b.n	80048be <HAL_DMA_IRQHandler+0x9da>
 80048bc:	2300      	movs	r3, #0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 824f 	beq.w	8004d62 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d0:	f003 031f 	and.w	r3, r3, #31
 80048d4:	2204      	movs	r2, #4
 80048d6:	409a      	lsls	r2, r3
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	4013      	ands	r3, r2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 80dd 	beq.w	8004a9c <HAL_DMA_IRQHandler+0xbb8>
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 80d7 	beq.w	8004a9c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f2:	f003 031f 	and.w	r3, r3, #31
 80048f6:	2204      	movs	r2, #4
 80048f8:	409a      	lsls	r2, r3
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d059      	beq.n	80049bc <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d109      	bne.n	8004926 <HAL_DMA_IRQHandler+0xa42>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 8220 	beq.w	8004d5c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004924:	e21a      	b.n	8004d5c <HAL_DMA_IRQHandler+0xe78>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492a:	2b00      	cmp	r3, #0
 800492c:	f000 8216 	beq.w	8004d5c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004938:	e210      	b.n	8004d5c <HAL_DMA_IRQHandler+0xe78>
 800493a:	bf00      	nop
 800493c:	40020010 	.word	0x40020010
 8004940:	40020028 	.word	0x40020028
 8004944:	40020040 	.word	0x40020040
 8004948:	40020058 	.word	0x40020058
 800494c:	40020070 	.word	0x40020070
 8004950:	40020088 	.word	0x40020088
 8004954:	400200a0 	.word	0x400200a0
 8004958:	400200b8 	.word	0x400200b8
 800495c:	40020410 	.word	0x40020410
 8004960:	40020428 	.word	0x40020428
 8004964:	40020440 	.word	0x40020440
 8004968:	40020458 	.word	0x40020458
 800496c:	40020470 	.word	0x40020470
 8004970:	40020488 	.word	0x40020488
 8004974:	400204a0 	.word	0x400204a0
 8004978:	400204b8 	.word	0x400204b8
 800497c:	48022c08 	.word	0x48022c08
 8004980:	48022c1c 	.word	0x48022c1c
 8004984:	48022c30 	.word	0x48022c30
 8004988:	48022c44 	.word	0x48022c44
 800498c:	48022c58 	.word	0x48022c58
 8004990:	48022c6c 	.word	0x48022c6c
 8004994:	48022c80 	.word	0x48022c80
 8004998:	48022c94 	.word	0x48022c94
 800499c:	58025408 	.word	0x58025408
 80049a0:	5802541c 	.word	0x5802541c
 80049a4:	58025430 	.word	0x58025430
 80049a8:	58025444 	.word	0x58025444
 80049ac:	58025458 	.word	0x58025458
 80049b0:	5802546c 	.word	0x5802546c
 80049b4:	58025480 	.word	0x58025480
 80049b8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	f003 0320 	and.w	r3, r3, #32
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d160      	bne.n	8004a88 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a8c      	ldr	r2, [pc, #560]	; (8004bfc <HAL_DMA_IRQHandler+0xd18>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d04a      	beq.n	8004a66 <HAL_DMA_IRQHandler+0xb82>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a8a      	ldr	r2, [pc, #552]	; (8004c00 <HAL_DMA_IRQHandler+0xd1c>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d045      	beq.n	8004a66 <HAL_DMA_IRQHandler+0xb82>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a89      	ldr	r2, [pc, #548]	; (8004c04 <HAL_DMA_IRQHandler+0xd20>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d040      	beq.n	8004a66 <HAL_DMA_IRQHandler+0xb82>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a87      	ldr	r2, [pc, #540]	; (8004c08 <HAL_DMA_IRQHandler+0xd24>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d03b      	beq.n	8004a66 <HAL_DMA_IRQHandler+0xb82>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a86      	ldr	r2, [pc, #536]	; (8004c0c <HAL_DMA_IRQHandler+0xd28>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d036      	beq.n	8004a66 <HAL_DMA_IRQHandler+0xb82>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a84      	ldr	r2, [pc, #528]	; (8004c10 <HAL_DMA_IRQHandler+0xd2c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d031      	beq.n	8004a66 <HAL_DMA_IRQHandler+0xb82>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a83      	ldr	r2, [pc, #524]	; (8004c14 <HAL_DMA_IRQHandler+0xd30>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d02c      	beq.n	8004a66 <HAL_DMA_IRQHandler+0xb82>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a81      	ldr	r2, [pc, #516]	; (8004c18 <HAL_DMA_IRQHandler+0xd34>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d027      	beq.n	8004a66 <HAL_DMA_IRQHandler+0xb82>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a80      	ldr	r2, [pc, #512]	; (8004c1c <HAL_DMA_IRQHandler+0xd38>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d022      	beq.n	8004a66 <HAL_DMA_IRQHandler+0xb82>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a7e      	ldr	r2, [pc, #504]	; (8004c20 <HAL_DMA_IRQHandler+0xd3c>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d01d      	beq.n	8004a66 <HAL_DMA_IRQHandler+0xb82>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a7d      	ldr	r2, [pc, #500]	; (8004c24 <HAL_DMA_IRQHandler+0xd40>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d018      	beq.n	8004a66 <HAL_DMA_IRQHandler+0xb82>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a7b      	ldr	r2, [pc, #492]	; (8004c28 <HAL_DMA_IRQHandler+0xd44>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d013      	beq.n	8004a66 <HAL_DMA_IRQHandler+0xb82>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a7a      	ldr	r2, [pc, #488]	; (8004c2c <HAL_DMA_IRQHandler+0xd48>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d00e      	beq.n	8004a66 <HAL_DMA_IRQHandler+0xb82>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a78      	ldr	r2, [pc, #480]	; (8004c30 <HAL_DMA_IRQHandler+0xd4c>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d009      	beq.n	8004a66 <HAL_DMA_IRQHandler+0xb82>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a77      	ldr	r2, [pc, #476]	; (8004c34 <HAL_DMA_IRQHandler+0xd50>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d004      	beq.n	8004a66 <HAL_DMA_IRQHandler+0xb82>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a75      	ldr	r2, [pc, #468]	; (8004c38 <HAL_DMA_IRQHandler+0xd54>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d108      	bne.n	8004a78 <HAL_DMA_IRQHandler+0xb94>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 0208 	bic.w	r2, r2, #8
 8004a74:	601a      	str	r2, [r3, #0]
 8004a76:	e007      	b.n	8004a88 <HAL_DMA_IRQHandler+0xba4>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 0204 	bic.w	r2, r2, #4
 8004a86:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 8165 	beq.w	8004d5c <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a9a:	e15f      	b.n	8004d5c <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa0:	f003 031f 	and.w	r3, r3, #31
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	409a      	lsls	r2, r3
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 80c5 	beq.w	8004c3c <HAL_DMA_IRQHandler+0xd58>
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	f003 0302 	and.w	r3, r3, #2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f000 80bf 	beq.w	8004c3c <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac2:	f003 031f 	and.w	r3, r3, #31
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	409a      	lsls	r2, r3
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d018      	beq.n	8004b0a <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d109      	bne.n	8004af6 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f000 813a 	beq.w	8004d60 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004af4:	e134      	b.n	8004d60 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f000 8130 	beq.w	8004d60 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b08:	e12a      	b.n	8004d60 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	f003 0320 	and.w	r3, r3, #32
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d168      	bne.n	8004be6 <HAL_DMA_IRQHandler+0xd02>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a38      	ldr	r2, [pc, #224]	; (8004bfc <HAL_DMA_IRQHandler+0xd18>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d04a      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0xcd0>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a37      	ldr	r2, [pc, #220]	; (8004c00 <HAL_DMA_IRQHandler+0xd1c>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d045      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0xcd0>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a35      	ldr	r2, [pc, #212]	; (8004c04 <HAL_DMA_IRQHandler+0xd20>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d040      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0xcd0>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a34      	ldr	r2, [pc, #208]	; (8004c08 <HAL_DMA_IRQHandler+0xd24>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d03b      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0xcd0>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a32      	ldr	r2, [pc, #200]	; (8004c0c <HAL_DMA_IRQHandler+0xd28>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d036      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0xcd0>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a31      	ldr	r2, [pc, #196]	; (8004c10 <HAL_DMA_IRQHandler+0xd2c>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d031      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0xcd0>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a2f      	ldr	r2, [pc, #188]	; (8004c14 <HAL_DMA_IRQHandler+0xd30>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d02c      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0xcd0>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a2e      	ldr	r2, [pc, #184]	; (8004c18 <HAL_DMA_IRQHandler+0xd34>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d027      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0xcd0>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a2c      	ldr	r2, [pc, #176]	; (8004c1c <HAL_DMA_IRQHandler+0xd38>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d022      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0xcd0>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a2b      	ldr	r2, [pc, #172]	; (8004c20 <HAL_DMA_IRQHandler+0xd3c>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d01d      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0xcd0>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a29      	ldr	r2, [pc, #164]	; (8004c24 <HAL_DMA_IRQHandler+0xd40>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d018      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0xcd0>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a28      	ldr	r2, [pc, #160]	; (8004c28 <HAL_DMA_IRQHandler+0xd44>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d013      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0xcd0>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a26      	ldr	r2, [pc, #152]	; (8004c2c <HAL_DMA_IRQHandler+0xd48>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d00e      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0xcd0>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a25      	ldr	r2, [pc, #148]	; (8004c30 <HAL_DMA_IRQHandler+0xd4c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d009      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0xcd0>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a23      	ldr	r2, [pc, #140]	; (8004c34 <HAL_DMA_IRQHandler+0xd50>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d004      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0xcd0>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a22      	ldr	r2, [pc, #136]	; (8004c38 <HAL_DMA_IRQHandler+0xd54>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d108      	bne.n	8004bc6 <HAL_DMA_IRQHandler+0xce2>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0214 	bic.w	r2, r2, #20
 8004bc2:	601a      	str	r2, [r3, #0]
 8004bc4:	e007      	b.n	8004bd6 <HAL_DMA_IRQHandler+0xcf2>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 020a 	bic.w	r2, r2, #10
 8004bd4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f000 80b8 	beq.w	8004d60 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bf8:	e0b2      	b.n	8004d60 <HAL_DMA_IRQHandler+0xe7c>
 8004bfa:	bf00      	nop
 8004bfc:	40020010 	.word	0x40020010
 8004c00:	40020028 	.word	0x40020028
 8004c04:	40020040 	.word	0x40020040
 8004c08:	40020058 	.word	0x40020058
 8004c0c:	40020070 	.word	0x40020070
 8004c10:	40020088 	.word	0x40020088
 8004c14:	400200a0 	.word	0x400200a0
 8004c18:	400200b8 	.word	0x400200b8
 8004c1c:	40020410 	.word	0x40020410
 8004c20:	40020428 	.word	0x40020428
 8004c24:	40020440 	.word	0x40020440
 8004c28:	40020458 	.word	0x40020458
 8004c2c:	40020470 	.word	0x40020470
 8004c30:	40020488 	.word	0x40020488
 8004c34:	400204a0 	.word	0x400204a0
 8004c38:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c40:	f003 031f 	and.w	r3, r3, #31
 8004c44:	2208      	movs	r2, #8
 8004c46:	409a      	lsls	r2, r3
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 8088 	beq.w	8004d62 <HAL_DMA_IRQHandler+0xe7e>
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	f003 0308 	and.w	r3, r3, #8
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 8082 	beq.w	8004d62 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a41      	ldr	r2, [pc, #260]	; (8004d68 <HAL_DMA_IRQHandler+0xe84>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d04a      	beq.n	8004cfe <HAL_DMA_IRQHandler+0xe1a>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a3f      	ldr	r2, [pc, #252]	; (8004d6c <HAL_DMA_IRQHandler+0xe88>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d045      	beq.n	8004cfe <HAL_DMA_IRQHandler+0xe1a>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a3e      	ldr	r2, [pc, #248]	; (8004d70 <HAL_DMA_IRQHandler+0xe8c>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d040      	beq.n	8004cfe <HAL_DMA_IRQHandler+0xe1a>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a3c      	ldr	r2, [pc, #240]	; (8004d74 <HAL_DMA_IRQHandler+0xe90>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d03b      	beq.n	8004cfe <HAL_DMA_IRQHandler+0xe1a>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a3b      	ldr	r2, [pc, #236]	; (8004d78 <HAL_DMA_IRQHandler+0xe94>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d036      	beq.n	8004cfe <HAL_DMA_IRQHandler+0xe1a>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a39      	ldr	r2, [pc, #228]	; (8004d7c <HAL_DMA_IRQHandler+0xe98>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d031      	beq.n	8004cfe <HAL_DMA_IRQHandler+0xe1a>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a38      	ldr	r2, [pc, #224]	; (8004d80 <HAL_DMA_IRQHandler+0xe9c>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d02c      	beq.n	8004cfe <HAL_DMA_IRQHandler+0xe1a>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a36      	ldr	r2, [pc, #216]	; (8004d84 <HAL_DMA_IRQHandler+0xea0>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d027      	beq.n	8004cfe <HAL_DMA_IRQHandler+0xe1a>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a35      	ldr	r2, [pc, #212]	; (8004d88 <HAL_DMA_IRQHandler+0xea4>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d022      	beq.n	8004cfe <HAL_DMA_IRQHandler+0xe1a>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a33      	ldr	r2, [pc, #204]	; (8004d8c <HAL_DMA_IRQHandler+0xea8>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d01d      	beq.n	8004cfe <HAL_DMA_IRQHandler+0xe1a>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a32      	ldr	r2, [pc, #200]	; (8004d90 <HAL_DMA_IRQHandler+0xeac>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d018      	beq.n	8004cfe <HAL_DMA_IRQHandler+0xe1a>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a30      	ldr	r2, [pc, #192]	; (8004d94 <HAL_DMA_IRQHandler+0xeb0>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d013      	beq.n	8004cfe <HAL_DMA_IRQHandler+0xe1a>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a2f      	ldr	r2, [pc, #188]	; (8004d98 <HAL_DMA_IRQHandler+0xeb4>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d00e      	beq.n	8004cfe <HAL_DMA_IRQHandler+0xe1a>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a2d      	ldr	r2, [pc, #180]	; (8004d9c <HAL_DMA_IRQHandler+0xeb8>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d009      	beq.n	8004cfe <HAL_DMA_IRQHandler+0xe1a>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a2c      	ldr	r2, [pc, #176]	; (8004da0 <HAL_DMA_IRQHandler+0xebc>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d004      	beq.n	8004cfe <HAL_DMA_IRQHandler+0xe1a>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a2a      	ldr	r2, [pc, #168]	; (8004da4 <HAL_DMA_IRQHandler+0xec0>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d108      	bne.n	8004d10 <HAL_DMA_IRQHandler+0xe2c>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 021c 	bic.w	r2, r2, #28
 8004d0c:	601a      	str	r2, [r3, #0]
 8004d0e:	e007      	b.n	8004d20 <HAL_DMA_IRQHandler+0xe3c>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 020e 	bic.w	r2, r2, #14
 8004d1e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d24:	f003 031f 	and.w	r3, r3, #31
 8004d28:	2201      	movs	r2, #1
 8004d2a:	409a      	lsls	r2, r3
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d009      	beq.n	8004d62 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	4798      	blx	r3
 8004d56:	e004      	b.n	8004d62 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004d58:	bf00      	nop
 8004d5a:	e002      	b.n	8004d62 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d5c:	bf00      	nop
 8004d5e:	e000      	b.n	8004d62 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d60:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004d62:	3728      	adds	r7, #40	; 0x28
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	40020010 	.word	0x40020010
 8004d6c:	40020028 	.word	0x40020028
 8004d70:	40020040 	.word	0x40020040
 8004d74:	40020058 	.word	0x40020058
 8004d78:	40020070 	.word	0x40020070
 8004d7c:	40020088 	.word	0x40020088
 8004d80:	400200a0 	.word	0x400200a0
 8004d84:	400200b8 	.word	0x400200b8
 8004d88:	40020410 	.word	0x40020410
 8004d8c:	40020428 	.word	0x40020428
 8004d90:	40020440 	.word	0x40020440
 8004d94:	40020458 	.word	0x40020458
 8004d98:	40020470 	.word	0x40020470
 8004d9c:	40020488 	.word	0x40020488
 8004da0:	400204a0 	.word	0x400204a0
 8004da4:	400204b8 	.word	0x400204b8

08004da8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
 8004db4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dba:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a84      	ldr	r2, [pc, #528]	; (8004fd8 <DMA_SetConfig+0x230>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d072      	beq.n	8004eb2 <DMA_SetConfig+0x10a>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a82      	ldr	r2, [pc, #520]	; (8004fdc <DMA_SetConfig+0x234>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d06d      	beq.n	8004eb2 <DMA_SetConfig+0x10a>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a81      	ldr	r2, [pc, #516]	; (8004fe0 <DMA_SetConfig+0x238>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d068      	beq.n	8004eb2 <DMA_SetConfig+0x10a>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a7f      	ldr	r2, [pc, #508]	; (8004fe4 <DMA_SetConfig+0x23c>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d063      	beq.n	8004eb2 <DMA_SetConfig+0x10a>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a7e      	ldr	r2, [pc, #504]	; (8004fe8 <DMA_SetConfig+0x240>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d05e      	beq.n	8004eb2 <DMA_SetConfig+0x10a>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a7c      	ldr	r2, [pc, #496]	; (8004fec <DMA_SetConfig+0x244>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d059      	beq.n	8004eb2 <DMA_SetConfig+0x10a>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a7b      	ldr	r2, [pc, #492]	; (8004ff0 <DMA_SetConfig+0x248>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d054      	beq.n	8004eb2 <DMA_SetConfig+0x10a>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a79      	ldr	r2, [pc, #484]	; (8004ff4 <DMA_SetConfig+0x24c>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d04f      	beq.n	8004eb2 <DMA_SetConfig+0x10a>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a78      	ldr	r2, [pc, #480]	; (8004ff8 <DMA_SetConfig+0x250>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d04a      	beq.n	8004eb2 <DMA_SetConfig+0x10a>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a76      	ldr	r2, [pc, #472]	; (8004ffc <DMA_SetConfig+0x254>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d045      	beq.n	8004eb2 <DMA_SetConfig+0x10a>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a75      	ldr	r2, [pc, #468]	; (8005000 <DMA_SetConfig+0x258>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d040      	beq.n	8004eb2 <DMA_SetConfig+0x10a>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a73      	ldr	r2, [pc, #460]	; (8005004 <DMA_SetConfig+0x25c>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d03b      	beq.n	8004eb2 <DMA_SetConfig+0x10a>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a72      	ldr	r2, [pc, #456]	; (8005008 <DMA_SetConfig+0x260>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d036      	beq.n	8004eb2 <DMA_SetConfig+0x10a>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a70      	ldr	r2, [pc, #448]	; (800500c <DMA_SetConfig+0x264>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d031      	beq.n	8004eb2 <DMA_SetConfig+0x10a>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a6f      	ldr	r2, [pc, #444]	; (8005010 <DMA_SetConfig+0x268>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d02c      	beq.n	8004eb2 <DMA_SetConfig+0x10a>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a6d      	ldr	r2, [pc, #436]	; (8005014 <DMA_SetConfig+0x26c>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d027      	beq.n	8004eb2 <DMA_SetConfig+0x10a>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a6c      	ldr	r2, [pc, #432]	; (8005018 <DMA_SetConfig+0x270>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d022      	beq.n	8004eb2 <DMA_SetConfig+0x10a>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a6a      	ldr	r2, [pc, #424]	; (800501c <DMA_SetConfig+0x274>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d01d      	beq.n	8004eb2 <DMA_SetConfig+0x10a>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a69      	ldr	r2, [pc, #420]	; (8005020 <DMA_SetConfig+0x278>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d018      	beq.n	8004eb2 <DMA_SetConfig+0x10a>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a67      	ldr	r2, [pc, #412]	; (8005024 <DMA_SetConfig+0x27c>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d013      	beq.n	8004eb2 <DMA_SetConfig+0x10a>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a66      	ldr	r2, [pc, #408]	; (8005028 <DMA_SetConfig+0x280>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d00e      	beq.n	8004eb2 <DMA_SetConfig+0x10a>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a64      	ldr	r2, [pc, #400]	; (800502c <DMA_SetConfig+0x284>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d009      	beq.n	8004eb2 <DMA_SetConfig+0x10a>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a63      	ldr	r2, [pc, #396]	; (8005030 <DMA_SetConfig+0x288>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d004      	beq.n	8004eb2 <DMA_SetConfig+0x10a>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a61      	ldr	r2, [pc, #388]	; (8005034 <DMA_SetConfig+0x28c>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d101      	bne.n	8004eb6 <DMA_SetConfig+0x10e>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e000      	b.n	8004eb8 <DMA_SetConfig+0x110>
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00d      	beq.n	8004ed8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004ec4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d004      	beq.n	8004ed8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004ed6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a3e      	ldr	r2, [pc, #248]	; (8004fd8 <DMA_SetConfig+0x230>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d04a      	beq.n	8004f78 <DMA_SetConfig+0x1d0>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a3d      	ldr	r2, [pc, #244]	; (8004fdc <DMA_SetConfig+0x234>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d045      	beq.n	8004f78 <DMA_SetConfig+0x1d0>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a3b      	ldr	r2, [pc, #236]	; (8004fe0 <DMA_SetConfig+0x238>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d040      	beq.n	8004f78 <DMA_SetConfig+0x1d0>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a3a      	ldr	r2, [pc, #232]	; (8004fe4 <DMA_SetConfig+0x23c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d03b      	beq.n	8004f78 <DMA_SetConfig+0x1d0>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a38      	ldr	r2, [pc, #224]	; (8004fe8 <DMA_SetConfig+0x240>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d036      	beq.n	8004f78 <DMA_SetConfig+0x1d0>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a37      	ldr	r2, [pc, #220]	; (8004fec <DMA_SetConfig+0x244>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d031      	beq.n	8004f78 <DMA_SetConfig+0x1d0>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a35      	ldr	r2, [pc, #212]	; (8004ff0 <DMA_SetConfig+0x248>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d02c      	beq.n	8004f78 <DMA_SetConfig+0x1d0>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a34      	ldr	r2, [pc, #208]	; (8004ff4 <DMA_SetConfig+0x24c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d027      	beq.n	8004f78 <DMA_SetConfig+0x1d0>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a32      	ldr	r2, [pc, #200]	; (8004ff8 <DMA_SetConfig+0x250>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d022      	beq.n	8004f78 <DMA_SetConfig+0x1d0>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a31      	ldr	r2, [pc, #196]	; (8004ffc <DMA_SetConfig+0x254>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d01d      	beq.n	8004f78 <DMA_SetConfig+0x1d0>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a2f      	ldr	r2, [pc, #188]	; (8005000 <DMA_SetConfig+0x258>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d018      	beq.n	8004f78 <DMA_SetConfig+0x1d0>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a2e      	ldr	r2, [pc, #184]	; (8005004 <DMA_SetConfig+0x25c>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d013      	beq.n	8004f78 <DMA_SetConfig+0x1d0>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a2c      	ldr	r2, [pc, #176]	; (8005008 <DMA_SetConfig+0x260>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d00e      	beq.n	8004f78 <DMA_SetConfig+0x1d0>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a2b      	ldr	r2, [pc, #172]	; (800500c <DMA_SetConfig+0x264>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d009      	beq.n	8004f78 <DMA_SetConfig+0x1d0>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a29      	ldr	r2, [pc, #164]	; (8005010 <DMA_SetConfig+0x268>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d004      	beq.n	8004f78 <DMA_SetConfig+0x1d0>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a28      	ldr	r2, [pc, #160]	; (8005014 <DMA_SetConfig+0x26c>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d101      	bne.n	8004f7c <DMA_SetConfig+0x1d4>
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e000      	b.n	8004f7e <DMA_SetConfig+0x1d6>
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d05a      	beq.n	8005038 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f86:	f003 031f 	and.w	r3, r3, #31
 8004f8a:	223f      	movs	r2, #63	; 0x3f
 8004f8c:	409a      	lsls	r2, r3
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004fa0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	683a      	ldr	r2, [r7, #0]
 8004fa8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	2b40      	cmp	r3, #64	; 0x40
 8004fb0:	d108      	bne.n	8004fc4 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004fc2:	e0af      	b.n	8005124 <DMA_SetConfig+0x37c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	60da      	str	r2, [r3, #12]
}
 8004fd4:	e0a6      	b.n	8005124 <DMA_SetConfig+0x37c>
 8004fd6:	bf00      	nop
 8004fd8:	40020010 	.word	0x40020010
 8004fdc:	40020028 	.word	0x40020028
 8004fe0:	40020040 	.word	0x40020040
 8004fe4:	40020058 	.word	0x40020058
 8004fe8:	40020070 	.word	0x40020070
 8004fec:	40020088 	.word	0x40020088
 8004ff0:	400200a0 	.word	0x400200a0
 8004ff4:	400200b8 	.word	0x400200b8
 8004ff8:	40020410 	.word	0x40020410
 8004ffc:	40020428 	.word	0x40020428
 8005000:	40020440 	.word	0x40020440
 8005004:	40020458 	.word	0x40020458
 8005008:	40020470 	.word	0x40020470
 800500c:	40020488 	.word	0x40020488
 8005010:	400204a0 	.word	0x400204a0
 8005014:	400204b8 	.word	0x400204b8
 8005018:	58025408 	.word	0x58025408
 800501c:	5802541c 	.word	0x5802541c
 8005020:	58025430 	.word	0x58025430
 8005024:	58025444 	.word	0x58025444
 8005028:	58025458 	.word	0x58025458
 800502c:	5802546c 	.word	0x5802546c
 8005030:	58025480 	.word	0x58025480
 8005034:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a3c      	ldr	r2, [pc, #240]	; (8005130 <DMA_SetConfig+0x388>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d04a      	beq.n	80050d8 <DMA_SetConfig+0x330>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a3b      	ldr	r2, [pc, #236]	; (8005134 <DMA_SetConfig+0x38c>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d045      	beq.n	80050d8 <DMA_SetConfig+0x330>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a39      	ldr	r2, [pc, #228]	; (8005138 <DMA_SetConfig+0x390>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d040      	beq.n	80050d8 <DMA_SetConfig+0x330>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a38      	ldr	r2, [pc, #224]	; (800513c <DMA_SetConfig+0x394>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d03b      	beq.n	80050d8 <DMA_SetConfig+0x330>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a36      	ldr	r2, [pc, #216]	; (8005140 <DMA_SetConfig+0x398>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d036      	beq.n	80050d8 <DMA_SetConfig+0x330>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a35      	ldr	r2, [pc, #212]	; (8005144 <DMA_SetConfig+0x39c>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d031      	beq.n	80050d8 <DMA_SetConfig+0x330>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a33      	ldr	r2, [pc, #204]	; (8005148 <DMA_SetConfig+0x3a0>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d02c      	beq.n	80050d8 <DMA_SetConfig+0x330>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a32      	ldr	r2, [pc, #200]	; (800514c <DMA_SetConfig+0x3a4>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d027      	beq.n	80050d8 <DMA_SetConfig+0x330>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a30      	ldr	r2, [pc, #192]	; (8005150 <DMA_SetConfig+0x3a8>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d022      	beq.n	80050d8 <DMA_SetConfig+0x330>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a2f      	ldr	r2, [pc, #188]	; (8005154 <DMA_SetConfig+0x3ac>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d01d      	beq.n	80050d8 <DMA_SetConfig+0x330>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a2d      	ldr	r2, [pc, #180]	; (8005158 <DMA_SetConfig+0x3b0>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d018      	beq.n	80050d8 <DMA_SetConfig+0x330>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a2c      	ldr	r2, [pc, #176]	; (800515c <DMA_SetConfig+0x3b4>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d013      	beq.n	80050d8 <DMA_SetConfig+0x330>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a2a      	ldr	r2, [pc, #168]	; (8005160 <DMA_SetConfig+0x3b8>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d00e      	beq.n	80050d8 <DMA_SetConfig+0x330>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a29      	ldr	r2, [pc, #164]	; (8005164 <DMA_SetConfig+0x3bc>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d009      	beq.n	80050d8 <DMA_SetConfig+0x330>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a27      	ldr	r2, [pc, #156]	; (8005168 <DMA_SetConfig+0x3c0>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d004      	beq.n	80050d8 <DMA_SetConfig+0x330>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a26      	ldr	r2, [pc, #152]	; (800516c <DMA_SetConfig+0x3c4>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d101      	bne.n	80050dc <DMA_SetConfig+0x334>
 80050d8:	2301      	movs	r3, #1
 80050da:	e000      	b.n	80050de <DMA_SetConfig+0x336>
 80050dc:	2300      	movs	r3, #0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d020      	beq.n	8005124 <DMA_SetConfig+0x37c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050e6:	f003 031f 	and.w	r3, r3, #31
 80050ea:	2201      	movs	r2, #1
 80050ec:	409a      	lsls	r2, r3
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	2b40      	cmp	r3, #64	; 0x40
 8005100:	d108      	bne.n	8005114 <DMA_SetConfig+0x36c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	60da      	str	r2, [r3, #12]
}
 8005112:	e007      	b.n	8005124 <DMA_SetConfig+0x37c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	60da      	str	r2, [r3, #12]
}
 8005124:	bf00      	nop
 8005126:	371c      	adds	r7, #28
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	48022c08 	.word	0x48022c08
 8005134:	48022c1c 	.word	0x48022c1c
 8005138:	48022c30 	.word	0x48022c30
 800513c:	48022c44 	.word	0x48022c44
 8005140:	48022c58 	.word	0x48022c58
 8005144:	48022c6c 	.word	0x48022c6c
 8005148:	48022c80 	.word	0x48022c80
 800514c:	48022c94 	.word	0x48022c94
 8005150:	58025408 	.word	0x58025408
 8005154:	5802541c 	.word	0x5802541c
 8005158:	58025430 	.word	0x58025430
 800515c:	58025444 	.word	0x58025444
 8005160:	58025458 	.word	0x58025458
 8005164:	5802546c 	.word	0x5802546c
 8005168:	58025480 	.word	0x58025480
 800516c:	58025494 	.word	0x58025494

08005170 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a42      	ldr	r2, [pc, #264]	; (8005288 <DMA_CalcBaseAndBitshift+0x118>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d04a      	beq.n	8005218 <DMA_CalcBaseAndBitshift+0xa8>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a41      	ldr	r2, [pc, #260]	; (800528c <DMA_CalcBaseAndBitshift+0x11c>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d045      	beq.n	8005218 <DMA_CalcBaseAndBitshift+0xa8>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a3f      	ldr	r2, [pc, #252]	; (8005290 <DMA_CalcBaseAndBitshift+0x120>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d040      	beq.n	8005218 <DMA_CalcBaseAndBitshift+0xa8>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a3e      	ldr	r2, [pc, #248]	; (8005294 <DMA_CalcBaseAndBitshift+0x124>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d03b      	beq.n	8005218 <DMA_CalcBaseAndBitshift+0xa8>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a3c      	ldr	r2, [pc, #240]	; (8005298 <DMA_CalcBaseAndBitshift+0x128>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d036      	beq.n	8005218 <DMA_CalcBaseAndBitshift+0xa8>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a3b      	ldr	r2, [pc, #236]	; (800529c <DMA_CalcBaseAndBitshift+0x12c>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d031      	beq.n	8005218 <DMA_CalcBaseAndBitshift+0xa8>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a39      	ldr	r2, [pc, #228]	; (80052a0 <DMA_CalcBaseAndBitshift+0x130>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d02c      	beq.n	8005218 <DMA_CalcBaseAndBitshift+0xa8>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a38      	ldr	r2, [pc, #224]	; (80052a4 <DMA_CalcBaseAndBitshift+0x134>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d027      	beq.n	8005218 <DMA_CalcBaseAndBitshift+0xa8>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a36      	ldr	r2, [pc, #216]	; (80052a8 <DMA_CalcBaseAndBitshift+0x138>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d022      	beq.n	8005218 <DMA_CalcBaseAndBitshift+0xa8>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a35      	ldr	r2, [pc, #212]	; (80052ac <DMA_CalcBaseAndBitshift+0x13c>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d01d      	beq.n	8005218 <DMA_CalcBaseAndBitshift+0xa8>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a33      	ldr	r2, [pc, #204]	; (80052b0 <DMA_CalcBaseAndBitshift+0x140>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d018      	beq.n	8005218 <DMA_CalcBaseAndBitshift+0xa8>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a32      	ldr	r2, [pc, #200]	; (80052b4 <DMA_CalcBaseAndBitshift+0x144>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d013      	beq.n	8005218 <DMA_CalcBaseAndBitshift+0xa8>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a30      	ldr	r2, [pc, #192]	; (80052b8 <DMA_CalcBaseAndBitshift+0x148>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d00e      	beq.n	8005218 <DMA_CalcBaseAndBitshift+0xa8>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a2f      	ldr	r2, [pc, #188]	; (80052bc <DMA_CalcBaseAndBitshift+0x14c>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d009      	beq.n	8005218 <DMA_CalcBaseAndBitshift+0xa8>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a2d      	ldr	r2, [pc, #180]	; (80052c0 <DMA_CalcBaseAndBitshift+0x150>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d004      	beq.n	8005218 <DMA_CalcBaseAndBitshift+0xa8>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a2c      	ldr	r2, [pc, #176]	; (80052c4 <DMA_CalcBaseAndBitshift+0x154>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d101      	bne.n	800521c <DMA_CalcBaseAndBitshift+0xac>
 8005218:	2301      	movs	r3, #1
 800521a:	e000      	b.n	800521e <DMA_CalcBaseAndBitshift+0xae>
 800521c:	2300      	movs	r3, #0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d024      	beq.n	800526c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	b2db      	uxtb	r3, r3
 8005228:	3b10      	subs	r3, #16
 800522a:	4a27      	ldr	r2, [pc, #156]	; (80052c8 <DMA_CalcBaseAndBitshift+0x158>)
 800522c:	fba2 2303 	umull	r2, r3, r2, r3
 8005230:	091b      	lsrs	r3, r3, #4
 8005232:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f003 0307 	and.w	r3, r3, #7
 800523a:	4a24      	ldr	r2, [pc, #144]	; (80052cc <DMA_CalcBaseAndBitshift+0x15c>)
 800523c:	5cd3      	ldrb	r3, [r2, r3]
 800523e:	461a      	mov	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2b03      	cmp	r3, #3
 8005248:	d908      	bls.n	800525c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	461a      	mov	r2, r3
 8005250:	4b1f      	ldr	r3, [pc, #124]	; (80052d0 <DMA_CalcBaseAndBitshift+0x160>)
 8005252:	4013      	ands	r3, r2
 8005254:	1d1a      	adds	r2, r3, #4
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	659a      	str	r2, [r3, #88]	; 0x58
 800525a:	e00d      	b.n	8005278 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	461a      	mov	r2, r3
 8005262:	4b1b      	ldr	r3, [pc, #108]	; (80052d0 <DMA_CalcBaseAndBitshift+0x160>)
 8005264:	4013      	ands	r3, r2
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	6593      	str	r3, [r2, #88]	; 0x58
 800526a:	e005      	b.n	8005278 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800527c:	4618      	mov	r0, r3
 800527e:	3714      	adds	r7, #20
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr
 8005288:	40020010 	.word	0x40020010
 800528c:	40020028 	.word	0x40020028
 8005290:	40020040 	.word	0x40020040
 8005294:	40020058 	.word	0x40020058
 8005298:	40020070 	.word	0x40020070
 800529c:	40020088 	.word	0x40020088
 80052a0:	400200a0 	.word	0x400200a0
 80052a4:	400200b8 	.word	0x400200b8
 80052a8:	40020410 	.word	0x40020410
 80052ac:	40020428 	.word	0x40020428
 80052b0:	40020440 	.word	0x40020440
 80052b4:	40020458 	.word	0x40020458
 80052b8:	40020470 	.word	0x40020470
 80052bc:	40020488 	.word	0x40020488
 80052c0:	400204a0 	.word	0x400204a0
 80052c4:	400204b8 	.word	0x400204b8
 80052c8:	aaaaaaab 	.word	0xaaaaaaab
 80052cc:	0800b46c 	.word	0x0800b46c
 80052d0:	fffffc00 	.word	0xfffffc00

080052d4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052dc:	2300      	movs	r3, #0
 80052de:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d120      	bne.n	800532a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ec:	2b03      	cmp	r3, #3
 80052ee:	d858      	bhi.n	80053a2 <DMA_CheckFifoParam+0xce>
 80052f0:	a201      	add	r2, pc, #4	; (adr r2, 80052f8 <DMA_CheckFifoParam+0x24>)
 80052f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f6:	bf00      	nop
 80052f8:	08005309 	.word	0x08005309
 80052fc:	0800531b 	.word	0x0800531b
 8005300:	08005309 	.word	0x08005309
 8005304:	080053a3 	.word	0x080053a3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d048      	beq.n	80053a6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005318:	e045      	b.n	80053a6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005322:	d142      	bne.n	80053aa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005328:	e03f      	b.n	80053aa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005332:	d123      	bne.n	800537c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005338:	2b03      	cmp	r3, #3
 800533a:	d838      	bhi.n	80053ae <DMA_CheckFifoParam+0xda>
 800533c:	a201      	add	r2, pc, #4	; (adr r2, 8005344 <DMA_CheckFifoParam+0x70>)
 800533e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005342:	bf00      	nop
 8005344:	08005355 	.word	0x08005355
 8005348:	0800535b 	.word	0x0800535b
 800534c:	08005355 	.word	0x08005355
 8005350:	0800536d 	.word	0x0800536d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	73fb      	strb	r3, [r7, #15]
        break;
 8005358:	e030      	b.n	80053bc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d025      	beq.n	80053b2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800536a:	e022      	b.n	80053b2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005370:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005374:	d11f      	bne.n	80053b6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800537a:	e01c      	b.n	80053b6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005380:	2b02      	cmp	r3, #2
 8005382:	d902      	bls.n	800538a <DMA_CheckFifoParam+0xb6>
 8005384:	2b03      	cmp	r3, #3
 8005386:	d003      	beq.n	8005390 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005388:	e018      	b.n	80053bc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	73fb      	strb	r3, [r7, #15]
        break;
 800538e:	e015      	b.n	80053bc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005394:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00e      	beq.n	80053ba <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	73fb      	strb	r3, [r7, #15]
    break;
 80053a0:	e00b      	b.n	80053ba <DMA_CheckFifoParam+0xe6>
        break;
 80053a2:	bf00      	nop
 80053a4:	e00a      	b.n	80053bc <DMA_CheckFifoParam+0xe8>
        break;
 80053a6:	bf00      	nop
 80053a8:	e008      	b.n	80053bc <DMA_CheckFifoParam+0xe8>
        break;
 80053aa:	bf00      	nop
 80053ac:	e006      	b.n	80053bc <DMA_CheckFifoParam+0xe8>
        break;
 80053ae:	bf00      	nop
 80053b0:	e004      	b.n	80053bc <DMA_CheckFifoParam+0xe8>
        break;
 80053b2:	bf00      	nop
 80053b4:	e002      	b.n	80053bc <DMA_CheckFifoParam+0xe8>
        break;
 80053b6:	bf00      	nop
 80053b8:	e000      	b.n	80053bc <DMA_CheckFifoParam+0xe8>
    break;
 80053ba:	bf00      	nop
    }
  }

  return status;
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop

080053cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a38      	ldr	r2, [pc, #224]	; (80054c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d022      	beq.n	800542a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a36      	ldr	r2, [pc, #216]	; (80054c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d01d      	beq.n	800542a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a35      	ldr	r2, [pc, #212]	; (80054c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d018      	beq.n	800542a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a33      	ldr	r2, [pc, #204]	; (80054cc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d013      	beq.n	800542a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a32      	ldr	r2, [pc, #200]	; (80054d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d00e      	beq.n	800542a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a30      	ldr	r2, [pc, #192]	; (80054d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d009      	beq.n	800542a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a2f      	ldr	r2, [pc, #188]	; (80054d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d004      	beq.n	800542a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a2d      	ldr	r2, [pc, #180]	; (80054dc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d101      	bne.n	800542e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800542a:	2301      	movs	r3, #1
 800542c:	e000      	b.n	8005430 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800542e:	2300      	movs	r3, #0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d01a      	beq.n	800546a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	b2db      	uxtb	r3, r3
 800543a:	3b08      	subs	r3, #8
 800543c:	4a28      	ldr	r2, [pc, #160]	; (80054e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800543e:	fba2 2303 	umull	r2, r3, r2, r3
 8005442:	091b      	lsrs	r3, r3, #4
 8005444:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	4b26      	ldr	r3, [pc, #152]	; (80054e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800544a:	4413      	add	r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	461a      	mov	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a24      	ldr	r2, [pc, #144]	; (80054e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005458:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f003 031f 	and.w	r3, r3, #31
 8005460:	2201      	movs	r2, #1
 8005462:	409a      	lsls	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005468:	e024      	b.n	80054b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	b2db      	uxtb	r3, r3
 8005470:	3b10      	subs	r3, #16
 8005472:	4a1e      	ldr	r2, [pc, #120]	; (80054ec <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005474:	fba2 2303 	umull	r2, r3, r2, r3
 8005478:	091b      	lsrs	r3, r3, #4
 800547a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	4a1c      	ldr	r2, [pc, #112]	; (80054f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d806      	bhi.n	8005492 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	4a1b      	ldr	r2, [pc, #108]	; (80054f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d902      	bls.n	8005492 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	3308      	adds	r3, #8
 8005490:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	4b18      	ldr	r3, [pc, #96]	; (80054f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005496:	4413      	add	r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	461a      	mov	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a16      	ldr	r2, [pc, #88]	; (80054fc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80054a4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f003 031f 	and.w	r3, r3, #31
 80054ac:	2201      	movs	r2, #1
 80054ae:	409a      	lsls	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80054b4:	bf00      	nop
 80054b6:	3714      	adds	r7, #20
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr
 80054c0:	58025408 	.word	0x58025408
 80054c4:	5802541c 	.word	0x5802541c
 80054c8:	58025430 	.word	0x58025430
 80054cc:	58025444 	.word	0x58025444
 80054d0:	58025458 	.word	0x58025458
 80054d4:	5802546c 	.word	0x5802546c
 80054d8:	58025480 	.word	0x58025480
 80054dc:	58025494 	.word	0x58025494
 80054e0:	cccccccd 	.word	0xcccccccd
 80054e4:	16009600 	.word	0x16009600
 80054e8:	58025880 	.word	0x58025880
 80054ec:	aaaaaaab 	.word	0xaaaaaaab
 80054f0:	400204b8 	.word	0x400204b8
 80054f4:	4002040f 	.word	0x4002040f
 80054f8:	10008200 	.word	0x10008200
 80054fc:	40020880 	.word	0x40020880

08005500 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	b2db      	uxtb	r3, r3
 800550e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d04a      	beq.n	80055ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2b08      	cmp	r3, #8
 800551a:	d847      	bhi.n	80055ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a25      	ldr	r2, [pc, #148]	; (80055b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d022      	beq.n	800556c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a24      	ldr	r2, [pc, #144]	; (80055bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d01d      	beq.n	800556c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a22      	ldr	r2, [pc, #136]	; (80055c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d018      	beq.n	800556c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a21      	ldr	r2, [pc, #132]	; (80055c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d013      	beq.n	800556c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a1f      	ldr	r2, [pc, #124]	; (80055c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d00e      	beq.n	800556c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a1e      	ldr	r2, [pc, #120]	; (80055cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d009      	beq.n	800556c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a1c      	ldr	r2, [pc, #112]	; (80055d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d004      	beq.n	800556c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a1b      	ldr	r2, [pc, #108]	; (80055d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d101      	bne.n	8005570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800556c:	2301      	movs	r3, #1
 800556e:	e000      	b.n	8005572 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005570:	2300      	movs	r3, #0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00a      	beq.n	800558c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	4b17      	ldr	r3, [pc, #92]	; (80055d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800557a:	4413      	add	r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	461a      	mov	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a15      	ldr	r2, [pc, #84]	; (80055dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005588:	671a      	str	r2, [r3, #112]	; 0x70
 800558a:	e009      	b.n	80055a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	4b14      	ldr	r3, [pc, #80]	; (80055e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005590:	4413      	add	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	461a      	mov	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a11      	ldr	r2, [pc, #68]	; (80055e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800559e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	3b01      	subs	r3, #1
 80055a4:	2201      	movs	r2, #1
 80055a6:	409a      	lsls	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80055ac:	bf00      	nop
 80055ae:	3714      	adds	r7, #20
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	58025408 	.word	0x58025408
 80055bc:	5802541c 	.word	0x5802541c
 80055c0:	58025430 	.word	0x58025430
 80055c4:	58025444 	.word	0x58025444
 80055c8:	58025458 	.word	0x58025458
 80055cc:	5802546c 	.word	0x5802546c
 80055d0:	58025480 	.word	0x58025480
 80055d4:	58025494 	.word	0x58025494
 80055d8:	1600963f 	.word	0x1600963f
 80055dc:	58025940 	.word	0x58025940
 80055e0:	1000823f 	.word	0x1000823f
 80055e4:	40020940 	.word	0x40020940

080055e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b089      	sub	sp, #36	; 0x24
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80055f2:	2300      	movs	r3, #0
 80055f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80055f6:	4b89      	ldr	r3, [pc, #548]	; (800581c <HAL_GPIO_Init+0x234>)
 80055f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80055fa:	e194      	b.n	8005926 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	2101      	movs	r1, #1
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	fa01 f303 	lsl.w	r3, r1, r3
 8005608:	4013      	ands	r3, r2
 800560a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	2b00      	cmp	r3, #0
 8005610:	f000 8186 	beq.w	8005920 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d00b      	beq.n	8005634 <HAL_GPIO_Init+0x4c>
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	2b02      	cmp	r3, #2
 8005622:	d007      	beq.n	8005634 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005628:	2b11      	cmp	r3, #17
 800562a:	d003      	beq.n	8005634 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	2b12      	cmp	r3, #18
 8005632:	d130      	bne.n	8005696 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	2203      	movs	r2, #3
 8005640:	fa02 f303 	lsl.w	r3, r2, r3
 8005644:	43db      	mvns	r3, r3
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	4013      	ands	r3, r2
 800564a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	68da      	ldr	r2, [r3, #12]
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	005b      	lsls	r3, r3, #1
 8005654:	fa02 f303 	lsl.w	r3, r2, r3
 8005658:	69ba      	ldr	r2, [r7, #24]
 800565a:	4313      	orrs	r3, r2
 800565c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800566a:	2201      	movs	r2, #1
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	fa02 f303 	lsl.w	r3, r2, r3
 8005672:	43db      	mvns	r3, r3
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	4013      	ands	r3, r2
 8005678:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	091b      	lsrs	r3, r3, #4
 8005680:	f003 0201 	and.w	r2, r3, #1
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	fa02 f303 	lsl.w	r3, r2, r3
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	4313      	orrs	r3, r2
 800568e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	005b      	lsls	r3, r3, #1
 80056a0:	2203      	movs	r2, #3
 80056a2:	fa02 f303 	lsl.w	r3, r2, r3
 80056a6:	43db      	mvns	r3, r3
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	4013      	ands	r3, r2
 80056ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	689a      	ldr	r2, [r3, #8]
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	005b      	lsls	r3, r3, #1
 80056b6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ba:	69ba      	ldr	r2, [r7, #24]
 80056bc:	4313      	orrs	r3, r2
 80056be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d003      	beq.n	80056d6 <HAL_GPIO_Init+0xee>
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	2b12      	cmp	r3, #18
 80056d4:	d123      	bne.n	800571e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	08da      	lsrs	r2, r3, #3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	3208      	adds	r2, #8
 80056de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	f003 0307 	and.w	r3, r3, #7
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	220f      	movs	r2, #15
 80056ee:	fa02 f303 	lsl.w	r3, r2, r3
 80056f2:	43db      	mvns	r3, r3
 80056f4:	69ba      	ldr	r2, [r7, #24]
 80056f6:	4013      	ands	r3, r2
 80056f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	691a      	ldr	r2, [r3, #16]
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	f003 0307 	and.w	r3, r3, #7
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	fa02 f303 	lsl.w	r3, r2, r3
 800570a:	69ba      	ldr	r2, [r7, #24]
 800570c:	4313      	orrs	r3, r2
 800570e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	08da      	lsrs	r2, r3, #3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	3208      	adds	r2, #8
 8005718:	69b9      	ldr	r1, [r7, #24]
 800571a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	005b      	lsls	r3, r3, #1
 8005728:	2203      	movs	r2, #3
 800572a:	fa02 f303 	lsl.w	r3, r2, r3
 800572e:	43db      	mvns	r3, r3
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	4013      	ands	r3, r2
 8005734:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f003 0203 	and.w	r2, r3, #3
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	005b      	lsls	r3, r3, #1
 8005742:	fa02 f303 	lsl.w	r3, r2, r3
 8005746:	69ba      	ldr	r2, [r7, #24]
 8005748:	4313      	orrs	r3, r2
 800574a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800575a:	2b00      	cmp	r3, #0
 800575c:	f000 80e0 	beq.w	8005920 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005760:	4b2f      	ldr	r3, [pc, #188]	; (8005820 <HAL_GPIO_Init+0x238>)
 8005762:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005766:	4a2e      	ldr	r2, [pc, #184]	; (8005820 <HAL_GPIO_Init+0x238>)
 8005768:	f043 0302 	orr.w	r3, r3, #2
 800576c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8005770:	4b2b      	ldr	r3, [pc, #172]	; (8005820 <HAL_GPIO_Init+0x238>)
 8005772:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	60fb      	str	r3, [r7, #12]
 800577c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800577e:	4a29      	ldr	r2, [pc, #164]	; (8005824 <HAL_GPIO_Init+0x23c>)
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	089b      	lsrs	r3, r3, #2
 8005784:	3302      	adds	r3, #2
 8005786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800578a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	f003 0303 	and.w	r3, r3, #3
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	220f      	movs	r2, #15
 8005796:	fa02 f303 	lsl.w	r3, r2, r3
 800579a:	43db      	mvns	r3, r3
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	4013      	ands	r3, r2
 80057a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a20      	ldr	r2, [pc, #128]	; (8005828 <HAL_GPIO_Init+0x240>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d052      	beq.n	8005850 <HAL_GPIO_Init+0x268>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a1f      	ldr	r2, [pc, #124]	; (800582c <HAL_GPIO_Init+0x244>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d031      	beq.n	8005816 <HAL_GPIO_Init+0x22e>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a1e      	ldr	r2, [pc, #120]	; (8005830 <HAL_GPIO_Init+0x248>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d02b      	beq.n	8005812 <HAL_GPIO_Init+0x22a>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a1d      	ldr	r2, [pc, #116]	; (8005834 <HAL_GPIO_Init+0x24c>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d025      	beq.n	800580e <HAL_GPIO_Init+0x226>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a1c      	ldr	r2, [pc, #112]	; (8005838 <HAL_GPIO_Init+0x250>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d01f      	beq.n	800580a <HAL_GPIO_Init+0x222>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a1b      	ldr	r2, [pc, #108]	; (800583c <HAL_GPIO_Init+0x254>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d019      	beq.n	8005806 <HAL_GPIO_Init+0x21e>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a1a      	ldr	r2, [pc, #104]	; (8005840 <HAL_GPIO_Init+0x258>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d013      	beq.n	8005802 <HAL_GPIO_Init+0x21a>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a19      	ldr	r2, [pc, #100]	; (8005844 <HAL_GPIO_Init+0x25c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d00d      	beq.n	80057fe <HAL_GPIO_Init+0x216>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a18      	ldr	r2, [pc, #96]	; (8005848 <HAL_GPIO_Init+0x260>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d007      	beq.n	80057fa <HAL_GPIO_Init+0x212>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a17      	ldr	r2, [pc, #92]	; (800584c <HAL_GPIO_Init+0x264>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d101      	bne.n	80057f6 <HAL_GPIO_Init+0x20e>
 80057f2:	2309      	movs	r3, #9
 80057f4:	e02d      	b.n	8005852 <HAL_GPIO_Init+0x26a>
 80057f6:	230a      	movs	r3, #10
 80057f8:	e02b      	b.n	8005852 <HAL_GPIO_Init+0x26a>
 80057fa:	2308      	movs	r3, #8
 80057fc:	e029      	b.n	8005852 <HAL_GPIO_Init+0x26a>
 80057fe:	2307      	movs	r3, #7
 8005800:	e027      	b.n	8005852 <HAL_GPIO_Init+0x26a>
 8005802:	2306      	movs	r3, #6
 8005804:	e025      	b.n	8005852 <HAL_GPIO_Init+0x26a>
 8005806:	2305      	movs	r3, #5
 8005808:	e023      	b.n	8005852 <HAL_GPIO_Init+0x26a>
 800580a:	2304      	movs	r3, #4
 800580c:	e021      	b.n	8005852 <HAL_GPIO_Init+0x26a>
 800580e:	2303      	movs	r3, #3
 8005810:	e01f      	b.n	8005852 <HAL_GPIO_Init+0x26a>
 8005812:	2302      	movs	r3, #2
 8005814:	e01d      	b.n	8005852 <HAL_GPIO_Init+0x26a>
 8005816:	2301      	movs	r3, #1
 8005818:	e01b      	b.n	8005852 <HAL_GPIO_Init+0x26a>
 800581a:	bf00      	nop
 800581c:	58000080 	.word	0x58000080
 8005820:	58024400 	.word	0x58024400
 8005824:	58000400 	.word	0x58000400
 8005828:	58020000 	.word	0x58020000
 800582c:	58020400 	.word	0x58020400
 8005830:	58020800 	.word	0x58020800
 8005834:	58020c00 	.word	0x58020c00
 8005838:	58021000 	.word	0x58021000
 800583c:	58021400 	.word	0x58021400
 8005840:	58021800 	.word	0x58021800
 8005844:	58021c00 	.word	0x58021c00
 8005848:	58022000 	.word	0x58022000
 800584c:	58022400 	.word	0x58022400
 8005850:	2300      	movs	r3, #0
 8005852:	69fa      	ldr	r2, [r7, #28]
 8005854:	f002 0203 	and.w	r2, r2, #3
 8005858:	0092      	lsls	r2, r2, #2
 800585a:	4093      	lsls	r3, r2
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	4313      	orrs	r3, r2
 8005860:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005862:	4938      	ldr	r1, [pc, #224]	; (8005944 <HAL_GPIO_Init+0x35c>)
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	089b      	lsrs	r3, r3, #2
 8005868:	3302      	adds	r3, #2
 800586a:	69ba      	ldr	r2, [r7, #24]
 800586c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	43db      	mvns	r3, r3
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	4013      	ands	r3, r2
 800587e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d003      	beq.n	8005894 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800588c:	69ba      	ldr	r2, [r7, #24]
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	4313      	orrs	r3, r2
 8005892:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	69ba      	ldr	r2, [r7, #24]
 8005898:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	43db      	mvns	r3, r3
 80058a4:	69ba      	ldr	r2, [r7, #24]
 80058a6:	4013      	ands	r3, r2
 80058a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80058c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	43db      	mvns	r3, r3
 80058d0:	69ba      	ldr	r2, [r7, #24]
 80058d2:	4013      	ands	r3, r2
 80058d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d003      	beq.n	80058ea <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80058e2:	69ba      	ldr	r2, [r7, #24]
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80058ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80058f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	43db      	mvns	r3, r3
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	4013      	ands	r3, r2
 8005902:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d003      	beq.n	8005918 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	4313      	orrs	r3, r2
 8005916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005918:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	3301      	adds	r3, #1
 8005924:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	fa22 f303 	lsr.w	r3, r2, r3
 8005930:	2b00      	cmp	r3, #0
 8005932:	f47f ae63 	bne.w	80055fc <HAL_GPIO_Init+0x14>
  }
}
 8005936:	bf00      	nop
 8005938:	3724      	adds	r7, #36	; 0x24
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	58000400 	.word	0x58000400

08005948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	460b      	mov	r3, r1
 8005952:	807b      	strh	r3, [r7, #2]
 8005954:	4613      	mov	r3, r2
 8005956:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005958:	787b      	ldrb	r3, [r7, #1]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d003      	beq.n	8005966 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800595e:	887a      	ldrh	r2, [r7, #2]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005964:	e003      	b.n	800596e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005966:	887b      	ldrh	r3, [r7, #2]
 8005968:	041a      	lsls	r2, r3, #16
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	619a      	str	r2, [r3, #24]
}
 800596e:	bf00      	nop
 8005970:	370c      	adds	r7, #12
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr

0800597a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800597a:	b480      	push	{r7}
 800597c:	b083      	sub	sp, #12
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
 8005982:	460b      	mov	r3, r1
 8005984:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	695a      	ldr	r2, [r3, #20]
 800598a:	887b      	ldrh	r3, [r7, #2]
 800598c:	401a      	ands	r2, r3
 800598e:	887b      	ldrh	r3, [r7, #2]
 8005990:	429a      	cmp	r2, r3
 8005992:	d104      	bne.n	800599e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005994:	887b      	ldrh	r3, [r7, #2]
 8005996:	041a      	lsls	r2, r3, #16
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800599c:	e002      	b.n	80059a4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800599e:	887a      	ldrh	r2, [r7, #2]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	619a      	str	r2, [r3, #24]
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80059b8:	4b29      	ldr	r3, [pc, #164]	; (8005a60 <HAL_PWREx_ConfigSupply+0xb0>)
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	f003 0307 	and.w	r3, r3, #7
 80059c0:	2b06      	cmp	r3, #6
 80059c2:	d00a      	beq.n	80059da <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80059c4:	4b26      	ldr	r3, [pc, #152]	; (8005a60 <HAL_PWREx_ConfigSupply+0xb0>)
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d001      	beq.n	80059d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e040      	b.n	8005a58 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80059d6:	2300      	movs	r3, #0
 80059d8:	e03e      	b.n	8005a58 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80059da:	4b21      	ldr	r3, [pc, #132]	; (8005a60 <HAL_PWREx_ConfigSupply+0xb0>)
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80059e2:	491f      	ldr	r1, [pc, #124]	; (8005a60 <HAL_PWREx_ConfigSupply+0xb0>)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80059ea:	f7fc f937 	bl	8001c5c <HAL_GetTick>
 80059ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80059f0:	e009      	b.n	8005a06 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80059f2:	f7fc f933 	bl	8001c5c <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a00:	d901      	bls.n	8005a06 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e028      	b.n	8005a58 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005a06:	4b16      	ldr	r3, [pc, #88]	; (8005a60 <HAL_PWREx_ConfigSupply+0xb0>)
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a12:	d1ee      	bne.n	80059f2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2b1e      	cmp	r3, #30
 8005a18:	d008      	beq.n	8005a2c <HAL_PWREx_ConfigSupply+0x7c>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2b2e      	cmp	r3, #46	; 0x2e
 8005a1e:	d005      	beq.n	8005a2c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b1d      	cmp	r3, #29
 8005a24:	d002      	beq.n	8005a2c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b2d      	cmp	r3, #45	; 0x2d
 8005a2a:	d114      	bne.n	8005a56 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005a2c:	f7fc f916 	bl	8001c5c <HAL_GetTick>
 8005a30:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005a32:	e009      	b.n	8005a48 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005a34:	f7fc f912 	bl	8001c5c <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a42:	d901      	bls.n	8005a48 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e007      	b.n	8005a58 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005a48:	4b05      	ldr	r3, [pc, #20]	; (8005a60 <HAL_PWREx_ConfigSupply+0xb0>)
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a54:	d1ee      	bne.n	8005a34 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	58024800 	.word	0x58024800

08005a64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b08c      	sub	sp, #48	; 0x30
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d101      	bne.n	8005a76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e3d7      	b.n	8006226 <HAL_RCC_OscConfig+0x7c2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	f000 80b3 	beq.w	8005bea <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a84:	4b90      	ldr	r3, [pc, #576]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a8e:	4b8e      	ldr	r3, [pc, #568]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a92:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a96:	2b10      	cmp	r3, #16
 8005a98:	d007      	beq.n	8005aaa <HAL_RCC_OscConfig+0x46>
 8005a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9c:	2b18      	cmp	r3, #24
 8005a9e:	d112      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x62>
 8005aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa2:	f003 0303 	and.w	r3, r3, #3
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d10d      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aaa:	4b87      	ldr	r3, [pc, #540]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f000 8098 	beq.w	8005be8 <HAL_RCC_OscConfig+0x184>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f040 8093 	bne.w	8005be8 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e3af      	b.n	8006226 <HAL_RCC_OscConfig+0x7c2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ace:	d106      	bne.n	8005ade <HAL_RCC_OscConfig+0x7a>
 8005ad0:	4b7d      	ldr	r3, [pc, #500]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a7c      	ldr	r2, [pc, #496]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ada:	6013      	str	r3, [r2, #0]
 8005adc:	e058      	b.n	8005b90 <HAL_RCC_OscConfig+0x12c>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d112      	bne.n	8005b0c <HAL_RCC_OscConfig+0xa8>
 8005ae6:	4b78      	ldr	r3, [pc, #480]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a77      	ldr	r2, [pc, #476]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005aec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005af0:	6013      	str	r3, [r2, #0]
 8005af2:	4b75      	ldr	r3, [pc, #468]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a74      	ldr	r2, [pc, #464]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005af8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005afc:	6013      	str	r3, [r2, #0]
 8005afe:	4b72      	ldr	r3, [pc, #456]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a71      	ldr	r2, [pc, #452]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005b04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b08:	6013      	str	r3, [r2, #0]
 8005b0a:	e041      	b.n	8005b90 <HAL_RCC_OscConfig+0x12c>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b14:	d112      	bne.n	8005b3c <HAL_RCC_OscConfig+0xd8>
 8005b16:	4b6c      	ldr	r3, [pc, #432]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a6b      	ldr	r2, [pc, #428]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b20:	6013      	str	r3, [r2, #0]
 8005b22:	4b69      	ldr	r3, [pc, #420]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a68      	ldr	r2, [pc, #416]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005b28:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005b2c:	6013      	str	r3, [r2, #0]
 8005b2e:	4b66      	ldr	r3, [pc, #408]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a65      	ldr	r2, [pc, #404]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b38:	6013      	str	r3, [r2, #0]
 8005b3a:	e029      	b.n	8005b90 <HAL_RCC_OscConfig+0x12c>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8005b44:	d112      	bne.n	8005b6c <HAL_RCC_OscConfig+0x108>
 8005b46:	4b60      	ldr	r3, [pc, #384]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a5f      	ldr	r2, [pc, #380]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b50:	6013      	str	r3, [r2, #0]
 8005b52:	4b5d      	ldr	r3, [pc, #372]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a5c      	ldr	r2, [pc, #368]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005b58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b5c:	6013      	str	r3, [r2, #0]
 8005b5e:	4b5a      	ldr	r3, [pc, #360]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a59      	ldr	r2, [pc, #356]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b68:	6013      	str	r3, [r2, #0]
 8005b6a:	e011      	b.n	8005b90 <HAL_RCC_OscConfig+0x12c>
 8005b6c:	4b56      	ldr	r3, [pc, #344]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a55      	ldr	r2, [pc, #340]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b76:	6013      	str	r3, [r2, #0]
 8005b78:	4b53      	ldr	r3, [pc, #332]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a52      	ldr	r2, [pc, #328]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b82:	6013      	str	r3, [r2, #0]
 8005b84:	4b50      	ldr	r3, [pc, #320]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a4f      	ldr	r2, [pc, #316]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005b8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d013      	beq.n	8005bc0 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b98:	f7fc f860 	bl	8001c5c <HAL_GetTick>
 8005b9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b9e:	e008      	b.n	8005bb2 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ba0:	f7fc f85c 	bl	8001c5c <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	2b64      	cmp	r3, #100	; 0x64
 8005bac:	d901      	bls.n	8005bb2 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e339      	b.n	8006226 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005bb2:	4b45      	ldr	r3, [pc, #276]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d0f0      	beq.n	8005ba0 <HAL_RCC_OscConfig+0x13c>
 8005bbe:	e014      	b.n	8005bea <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bc0:	f7fc f84c 	bl	8001c5c <HAL_GetTick>
 8005bc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005bc6:	e008      	b.n	8005bda <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bc8:	f7fc f848 	bl	8001c5c <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	2b64      	cmp	r3, #100	; 0x64
 8005bd4:	d901      	bls.n	8005bda <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e325      	b.n	8006226 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005bda:	4b3b      	ldr	r3, [pc, #236]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1f0      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x164>
 8005be6:	e000      	b.n	8005bea <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d070      	beq.n	8005cd8 <HAL_RCC_OscConfig+0x274>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bf6:	4b34      	ldr	r3, [pc, #208]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bfe:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c00:	4b31      	ldr	r3, [pc, #196]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c04:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005c06:	6a3b      	ldr	r3, [r7, #32]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d007      	beq.n	8005c1c <HAL_RCC_OscConfig+0x1b8>
 8005c0c:	6a3b      	ldr	r3, [r7, #32]
 8005c0e:	2b18      	cmp	r3, #24
 8005c10:	d11b      	bne.n	8005c4a <HAL_RCC_OscConfig+0x1e6>
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	f003 0303 	and.w	r3, r3, #3
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d116      	bne.n	8005c4a <HAL_RCC_OscConfig+0x1e6>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c1c:	4b2a      	ldr	r3, [pc, #168]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0304 	and.w	r3, r3, #4
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d005      	beq.n	8005c34 <HAL_RCC_OscConfig+0x1d0>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d101      	bne.n	8005c34 <HAL_RCC_OscConfig+0x1d0>
      {
        return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e2f8      	b.n	8006226 <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c34:	4b24      	ldr	r3, [pc, #144]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	061b      	lsls	r3, r3, #24
 8005c42:	4921      	ldr	r1, [pc, #132]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005c44:	4313      	orrs	r3, r2
 8005c46:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c48:	e046      	b.n	8005cd8 <HAL_RCC_OscConfig+0x274>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d026      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x23c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005c52:	4b1d      	ldr	r3, [pc, #116]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f023 0219 	bic.w	r2, r3, #25
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	491a      	ldr	r1, [pc, #104]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c64:	f7fb fffa 	bl	8001c5c <HAL_GetTick>
 8005c68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c6a:	e008      	b.n	8005c7e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c6c:	f7fb fff6 	bl	8001c5c <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d901      	bls.n	8005c7e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e2d3      	b.n	8006226 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c7e:	4b12      	ldr	r3, [pc, #72]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0304 	and.w	r3, r3, #4
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d0f0      	beq.n	8005c6c <HAL_RCC_OscConfig+0x208>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c8a:	4b0f      	ldr	r3, [pc, #60]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	061b      	lsls	r3, r3, #24
 8005c98:	490b      	ldr	r1, [pc, #44]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	604b      	str	r3, [r1, #4]
 8005c9e:	e01b      	b.n	8005cd8 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ca0:	4b09      	ldr	r3, [pc, #36]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a08      	ldr	r2, [pc, #32]	; (8005cc8 <HAL_RCC_OscConfig+0x264>)
 8005ca6:	f023 0301 	bic.w	r3, r3, #1
 8005caa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cac:	f7fb ffd6 	bl	8001c5c <HAL_GetTick>
 8005cb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005cb2:	e00b      	b.n	8005ccc <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cb4:	f7fb ffd2 	bl	8001c5c <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d904      	bls.n	8005ccc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e2af      	b.n	8006226 <HAL_RCC_OscConfig+0x7c2>
 8005cc6:	bf00      	nop
 8005cc8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005ccc:	4b99      	ldr	r3, [pc, #612]	; (8005f34 <HAL_RCC_OscConfig+0x4d0>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0304 	and.w	r3, r3, #4
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1ed      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x250>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0310 	and.w	r3, r3, #16
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d06a      	beq.n	8005dba <HAL_RCC_OscConfig+0x356>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ce4:	4b93      	ldr	r3, [pc, #588]	; (8005f34 <HAL_RCC_OscConfig+0x4d0>)
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cec:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005cee:	4b91      	ldr	r3, [pc, #580]	; (8005f34 <HAL_RCC_OscConfig+0x4d0>)
 8005cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	2b08      	cmp	r3, #8
 8005cf8:	d007      	beq.n	8005d0a <HAL_RCC_OscConfig+0x2a6>
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	2b18      	cmp	r3, #24
 8005cfe:	d11b      	bne.n	8005d38 <HAL_RCC_OscConfig+0x2d4>
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	f003 0303 	and.w	r3, r3, #3
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d116      	bne.n	8005d38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d0a:	4b8a      	ldr	r3, [pc, #552]	; (8005f34 <HAL_RCC_OscConfig+0x4d0>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d005      	beq.n	8005d22 <HAL_RCC_OscConfig+0x2be>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	2b80      	cmp	r3, #128	; 0x80
 8005d1c:	d001      	beq.n	8005d22 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e281      	b.n	8006226 <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d22:	4b84      	ldr	r3, [pc, #528]	; (8005f34 <HAL_RCC_OscConfig+0x4d0>)
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	061b      	lsls	r3, r3, #24
 8005d30:	4980      	ldr	r1, [pc, #512]	; (8005f34 <HAL_RCC_OscConfig+0x4d0>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d36:	e040      	b.n	8005dba <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	69db      	ldr	r3, [r3, #28]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d023      	beq.n	8005d88 <HAL_RCC_OscConfig+0x324>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005d40:	4b7c      	ldr	r3, [pc, #496]	; (8005f34 <HAL_RCC_OscConfig+0x4d0>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a7b      	ldr	r2, [pc, #492]	; (8005f34 <HAL_RCC_OscConfig+0x4d0>)
 8005d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d4c:	f7fb ff86 	bl	8001c5c <HAL_GetTick>
 8005d50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d52:	e008      	b.n	8005d66 <HAL_RCC_OscConfig+0x302>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005d54:	f7fb ff82 	bl	8001c5c <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d901      	bls.n	8005d66 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e25f      	b.n	8006226 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d66:	4b73      	ldr	r3, [pc, #460]	; (8005f34 <HAL_RCC_OscConfig+0x4d0>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d0f0      	beq.n	8005d54 <HAL_RCC_OscConfig+0x2f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d72:	4b70      	ldr	r3, [pc, #448]	; (8005f34 <HAL_RCC_OscConfig+0x4d0>)
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	061b      	lsls	r3, r3, #24
 8005d80:	496c      	ldr	r1, [pc, #432]	; (8005f34 <HAL_RCC_OscConfig+0x4d0>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	60cb      	str	r3, [r1, #12]
 8005d86:	e018      	b.n	8005dba <HAL_RCC_OscConfig+0x356>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005d88:	4b6a      	ldr	r3, [pc, #424]	; (8005f34 <HAL_RCC_OscConfig+0x4d0>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a69      	ldr	r2, [pc, #420]	; (8005f34 <HAL_RCC_OscConfig+0x4d0>)
 8005d8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d94:	f7fb ff62 	bl	8001c5c <HAL_GetTick>
 8005d98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005d9a:	e008      	b.n	8005dae <HAL_RCC_OscConfig+0x34a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005d9c:	f7fb ff5e 	bl	8001c5c <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x34a>
          {
            return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e23b      	b.n	8006226 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005dae:	4b61      	ldr	r3, [pc, #388]	; (8005f34 <HAL_RCC_OscConfig+0x4d0>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1f0      	bne.n	8005d9c <HAL_RCC_OscConfig+0x338>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0308 	and.w	r3, r3, #8
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d036      	beq.n	8005e34 <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d019      	beq.n	8005e02 <HAL_RCC_OscConfig+0x39e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dce:	4b59      	ldr	r3, [pc, #356]	; (8005f34 <HAL_RCC_OscConfig+0x4d0>)
 8005dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dd2:	4a58      	ldr	r2, [pc, #352]	; (8005f34 <HAL_RCC_OscConfig+0x4d0>)
 8005dd4:	f043 0301 	orr.w	r3, r3, #1
 8005dd8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dda:	f7fb ff3f 	bl	8001c5c <HAL_GetTick>
 8005dde:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005de0:	e008      	b.n	8005df4 <HAL_RCC_OscConfig+0x390>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005de2:	f7fb ff3b 	bl	8001c5c <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d901      	bls.n	8005df4 <HAL_RCC_OscConfig+0x390>
        {
          return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e218      	b.n	8006226 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005df4:	4b4f      	ldr	r3, [pc, #316]	; (8005f34 <HAL_RCC_OscConfig+0x4d0>)
 8005df6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005df8:	f003 0302 	and.w	r3, r3, #2
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d0f0      	beq.n	8005de2 <HAL_RCC_OscConfig+0x37e>
 8005e00:	e018      	b.n	8005e34 <HAL_RCC_OscConfig+0x3d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e02:	4b4c      	ldr	r3, [pc, #304]	; (8005f34 <HAL_RCC_OscConfig+0x4d0>)
 8005e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e06:	4a4b      	ldr	r2, [pc, #300]	; (8005f34 <HAL_RCC_OscConfig+0x4d0>)
 8005e08:	f023 0301 	bic.w	r3, r3, #1
 8005e0c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e0e:	f7fb ff25 	bl	8001c5c <HAL_GetTick>
 8005e12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e14:	e008      	b.n	8005e28 <HAL_RCC_OscConfig+0x3c4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e16:	f7fb ff21 	bl	8001c5c <HAL_GetTick>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d901      	bls.n	8005e28 <HAL_RCC_OscConfig+0x3c4>
        {
          return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e1fe      	b.n	8006226 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e28:	4b42      	ldr	r3, [pc, #264]	; (8005f34 <HAL_RCC_OscConfig+0x4d0>)
 8005e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e2c:	f003 0302 	and.w	r3, r3, #2
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1f0      	bne.n	8005e16 <HAL_RCC_OscConfig+0x3b2>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0320 	and.w	r3, r3, #32
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d036      	beq.n	8005eae <HAL_RCC_OscConfig+0x44a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d019      	beq.n	8005e7c <HAL_RCC_OscConfig+0x418>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005e48:	4b3a      	ldr	r3, [pc, #232]	; (8005f34 <HAL_RCC_OscConfig+0x4d0>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a39      	ldr	r2, [pc, #228]	; (8005f34 <HAL_RCC_OscConfig+0x4d0>)
 8005e4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e52:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005e54:	f7fb ff02 	bl	8001c5c <HAL_GetTick>
 8005e58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005e5a:	e008      	b.n	8005e6e <HAL_RCC_OscConfig+0x40a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005e5c:	f7fb fefe 	bl	8001c5c <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d901      	bls.n	8005e6e <HAL_RCC_OscConfig+0x40a>
        {
          return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e1db      	b.n	8006226 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005e6e:	4b31      	ldr	r3, [pc, #196]	; (8005f34 <HAL_RCC_OscConfig+0x4d0>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d0f0      	beq.n	8005e5c <HAL_RCC_OscConfig+0x3f8>
 8005e7a:	e018      	b.n	8005eae <HAL_RCC_OscConfig+0x44a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005e7c:	4b2d      	ldr	r3, [pc, #180]	; (8005f34 <HAL_RCC_OscConfig+0x4d0>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a2c      	ldr	r2, [pc, #176]	; (8005f34 <HAL_RCC_OscConfig+0x4d0>)
 8005e82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e86:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005e88:	f7fb fee8 	bl	8001c5c <HAL_GetTick>
 8005e8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e8e:	e008      	b.n	8005ea2 <HAL_RCC_OscConfig+0x43e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005e90:	f7fb fee4 	bl	8001c5c <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e1c1      	b.n	8006226 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005ea2:	4b24      	ldr	r3, [pc, #144]	; (8005f34 <HAL_RCC_OscConfig+0x4d0>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1f0      	bne.n	8005e90 <HAL_RCC_OscConfig+0x42c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0304 	and.w	r3, r3, #4
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f000 80af 	beq.w	800601a <HAL_RCC_OscConfig+0x5b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005ebc:	4b1e      	ldr	r3, [pc, #120]	; (8005f38 <HAL_RCC_OscConfig+0x4d4>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a1d      	ldr	r2, [pc, #116]	; (8005f38 <HAL_RCC_OscConfig+0x4d4>)
 8005ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ec6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ec8:	f7fb fec8 	bl	8001c5c <HAL_GetTick>
 8005ecc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ece:	e008      	b.n	8005ee2 <HAL_RCC_OscConfig+0x47e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005ed0:	f7fb fec4 	bl	8001c5c <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b64      	cmp	r3, #100	; 0x64
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e1a1      	b.n	8006226 <HAL_RCC_OscConfig+0x7c2>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ee2:	4b15      	ldr	r3, [pc, #84]	; (8005f38 <HAL_RCC_OscConfig+0x4d4>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d0f0      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x46c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d106      	bne.n	8005f04 <HAL_RCC_OscConfig+0x4a0>
 8005ef6:	4b0f      	ldr	r3, [pc, #60]	; (8005f34 <HAL_RCC_OscConfig+0x4d0>)
 8005ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005efa:	4a0e      	ldr	r2, [pc, #56]	; (8005f34 <HAL_RCC_OscConfig+0x4d0>)
 8005efc:	f043 0301 	orr.w	r3, r3, #1
 8005f00:	6713      	str	r3, [r2, #112]	; 0x70
 8005f02:	e05b      	b.n	8005fbc <HAL_RCC_OscConfig+0x558>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d117      	bne.n	8005f3c <HAL_RCC_OscConfig+0x4d8>
 8005f0c:	4b09      	ldr	r3, [pc, #36]	; (8005f34 <HAL_RCC_OscConfig+0x4d0>)
 8005f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f10:	4a08      	ldr	r2, [pc, #32]	; (8005f34 <HAL_RCC_OscConfig+0x4d0>)
 8005f12:	f023 0301 	bic.w	r3, r3, #1
 8005f16:	6713      	str	r3, [r2, #112]	; 0x70
 8005f18:	4b06      	ldr	r3, [pc, #24]	; (8005f34 <HAL_RCC_OscConfig+0x4d0>)
 8005f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1c:	4a05      	ldr	r2, [pc, #20]	; (8005f34 <HAL_RCC_OscConfig+0x4d0>)
 8005f1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f22:	6713      	str	r3, [r2, #112]	; 0x70
 8005f24:	4b03      	ldr	r3, [pc, #12]	; (8005f34 <HAL_RCC_OscConfig+0x4d0>)
 8005f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f28:	4a02      	ldr	r2, [pc, #8]	; (8005f34 <HAL_RCC_OscConfig+0x4d0>)
 8005f2a:	f023 0304 	bic.w	r3, r3, #4
 8005f2e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f30:	e044      	b.n	8005fbc <HAL_RCC_OscConfig+0x558>
 8005f32:	bf00      	nop
 8005f34:	58024400 	.word	0x58024400
 8005f38:	58024800 	.word	0x58024800
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	2b05      	cmp	r3, #5
 8005f42:	d112      	bne.n	8005f6a <HAL_RCC_OscConfig+0x506>
 8005f44:	4b95      	ldr	r3, [pc, #596]	; (800619c <HAL_RCC_OscConfig+0x738>)
 8005f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f48:	4a94      	ldr	r2, [pc, #592]	; (800619c <HAL_RCC_OscConfig+0x738>)
 8005f4a:	f043 0304 	orr.w	r3, r3, #4
 8005f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f50:	4b92      	ldr	r3, [pc, #584]	; (800619c <HAL_RCC_OscConfig+0x738>)
 8005f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f54:	4a91      	ldr	r2, [pc, #580]	; (800619c <HAL_RCC_OscConfig+0x738>)
 8005f56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f5c:	4b8f      	ldr	r3, [pc, #572]	; (800619c <HAL_RCC_OscConfig+0x738>)
 8005f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f60:	4a8e      	ldr	r2, [pc, #568]	; (800619c <HAL_RCC_OscConfig+0x738>)
 8005f62:	f043 0301 	orr.w	r3, r3, #1
 8005f66:	6713      	str	r3, [r2, #112]	; 0x70
 8005f68:	e028      	b.n	8005fbc <HAL_RCC_OscConfig+0x558>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	2b85      	cmp	r3, #133	; 0x85
 8005f70:	d112      	bne.n	8005f98 <HAL_RCC_OscConfig+0x534>
 8005f72:	4b8a      	ldr	r3, [pc, #552]	; (800619c <HAL_RCC_OscConfig+0x738>)
 8005f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f76:	4a89      	ldr	r2, [pc, #548]	; (800619c <HAL_RCC_OscConfig+0x738>)
 8005f78:	f043 0304 	orr.w	r3, r3, #4
 8005f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f7e:	4b87      	ldr	r3, [pc, #540]	; (800619c <HAL_RCC_OscConfig+0x738>)
 8005f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f82:	4a86      	ldr	r2, [pc, #536]	; (800619c <HAL_RCC_OscConfig+0x738>)
 8005f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f88:	6713      	str	r3, [r2, #112]	; 0x70
 8005f8a:	4b84      	ldr	r3, [pc, #528]	; (800619c <HAL_RCC_OscConfig+0x738>)
 8005f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f8e:	4a83      	ldr	r2, [pc, #524]	; (800619c <HAL_RCC_OscConfig+0x738>)
 8005f90:	f043 0301 	orr.w	r3, r3, #1
 8005f94:	6713      	str	r3, [r2, #112]	; 0x70
 8005f96:	e011      	b.n	8005fbc <HAL_RCC_OscConfig+0x558>
 8005f98:	4b80      	ldr	r3, [pc, #512]	; (800619c <HAL_RCC_OscConfig+0x738>)
 8005f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f9c:	4a7f      	ldr	r2, [pc, #508]	; (800619c <HAL_RCC_OscConfig+0x738>)
 8005f9e:	f023 0301 	bic.w	r3, r3, #1
 8005fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8005fa4:	4b7d      	ldr	r3, [pc, #500]	; (800619c <HAL_RCC_OscConfig+0x738>)
 8005fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa8:	4a7c      	ldr	r2, [pc, #496]	; (800619c <HAL_RCC_OscConfig+0x738>)
 8005faa:	f023 0304 	bic.w	r3, r3, #4
 8005fae:	6713      	str	r3, [r2, #112]	; 0x70
 8005fb0:	4b7a      	ldr	r3, [pc, #488]	; (800619c <HAL_RCC_OscConfig+0x738>)
 8005fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb4:	4a79      	ldr	r2, [pc, #484]	; (800619c <HAL_RCC_OscConfig+0x738>)
 8005fb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d015      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x58c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fc4:	f7fb fe4a 	bl	8001c5c <HAL_GetTick>
 8005fc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005fca:	e00a      	b.n	8005fe2 <HAL_RCC_OscConfig+0x57e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fcc:	f7fb fe46 	bl	8001c5c <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d901      	bls.n	8005fe2 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e121      	b.n	8006226 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005fe2:	4b6e      	ldr	r3, [pc, #440]	; (800619c <HAL_RCC_OscConfig+0x738>)
 8005fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe6:	f003 0302 	and.w	r3, r3, #2
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d0ee      	beq.n	8005fcc <HAL_RCC_OscConfig+0x568>
 8005fee:	e014      	b.n	800601a <HAL_RCC_OscConfig+0x5b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ff0:	f7fb fe34 	bl	8001c5c <HAL_GetTick>
 8005ff4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005ff6:	e00a      	b.n	800600e <HAL_RCC_OscConfig+0x5aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ff8:	f7fb fe30 	bl	8001c5c <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	f241 3288 	movw	r2, #5000	; 0x1388
 8006006:	4293      	cmp	r3, r2
 8006008:	d901      	bls.n	800600e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e10b      	b.n	8006226 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800600e:	4b63      	ldr	r3, [pc, #396]	; (800619c <HAL_RCC_OscConfig+0x738>)
 8006010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1ee      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x594>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 8100 	beq.w	8006224 <HAL_RCC_OscConfig+0x7c0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006024:	4b5d      	ldr	r3, [pc, #372]	; (800619c <HAL_RCC_OscConfig+0x738>)
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800602c:	2b18      	cmp	r3, #24
 800602e:	f000 80bb 	beq.w	80061a8 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006036:	2b02      	cmp	r3, #2
 8006038:	f040 8095 	bne.w	8006166 <HAL_RCC_OscConfig+0x702>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800603c:	4b57      	ldr	r3, [pc, #348]	; (800619c <HAL_RCC_OscConfig+0x738>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a56      	ldr	r2, [pc, #344]	; (800619c <HAL_RCC_OscConfig+0x738>)
 8006042:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006046:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006048:	f7fb fe08 	bl	8001c5c <HAL_GetTick>
 800604c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800604e:	e008      	b.n	8006062 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006050:	f7fb fe04 	bl	8001c5c <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	2b02      	cmp	r3, #2
 800605c:	d901      	bls.n	8006062 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e0e1      	b.n	8006226 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006062:	4b4e      	ldr	r3, [pc, #312]	; (800619c <HAL_RCC_OscConfig+0x738>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1f0      	bne.n	8006050 <HAL_RCC_OscConfig+0x5ec>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800606e:	4b4b      	ldr	r3, [pc, #300]	; (800619c <HAL_RCC_OscConfig+0x738>)
 8006070:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006072:	4b4b      	ldr	r3, [pc, #300]	; (80061a0 <HAL_RCC_OscConfig+0x73c>)
 8006074:	4013      	ands	r3, r2
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800607e:	0112      	lsls	r2, r2, #4
 8006080:	430a      	orrs	r2, r1
 8006082:	4946      	ldr	r1, [pc, #280]	; (800619c <HAL_RCC_OscConfig+0x738>)
 8006084:	4313      	orrs	r3, r2
 8006086:	628b      	str	r3, [r1, #40]	; 0x28
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800608c:	3b01      	subs	r3, #1
 800608e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006096:	3b01      	subs	r3, #1
 8006098:	025b      	lsls	r3, r3, #9
 800609a:	b29b      	uxth	r3, r3
 800609c:	431a      	orrs	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a2:	3b01      	subs	r3, #1
 80060a4:	041b      	lsls	r3, r3, #16
 80060a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80060aa:	431a      	orrs	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b0:	3b01      	subs	r3, #1
 80060b2:	061b      	lsls	r3, r3, #24
 80060b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80060b8:	4938      	ldr	r1, [pc, #224]	; (800619c <HAL_RCC_OscConfig+0x738>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80060be:	4b37      	ldr	r3, [pc, #220]	; (800619c <HAL_RCC_OscConfig+0x738>)
 80060c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c2:	4a36      	ldr	r2, [pc, #216]	; (800619c <HAL_RCC_OscConfig+0x738>)
 80060c4:	f023 0301 	bic.w	r3, r3, #1
 80060c8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80060ca:	4b34      	ldr	r3, [pc, #208]	; (800619c <HAL_RCC_OscConfig+0x738>)
 80060cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060ce:	4b35      	ldr	r3, [pc, #212]	; (80061a4 <HAL_RCC_OscConfig+0x740>)
 80060d0:	4013      	ands	r3, r2
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80060d6:	00d2      	lsls	r2, r2, #3
 80060d8:	4930      	ldr	r1, [pc, #192]	; (800619c <HAL_RCC_OscConfig+0x738>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80060de:	4b2f      	ldr	r3, [pc, #188]	; (800619c <HAL_RCC_OscConfig+0x738>)
 80060e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e2:	f023 020c 	bic.w	r2, r3, #12
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ea:	492c      	ldr	r1, [pc, #176]	; (800619c <HAL_RCC_OscConfig+0x738>)
 80060ec:	4313      	orrs	r3, r2
 80060ee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80060f0:	4b2a      	ldr	r3, [pc, #168]	; (800619c <HAL_RCC_OscConfig+0x738>)
 80060f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f4:	f023 0202 	bic.w	r2, r3, #2
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060fc:	4927      	ldr	r1, [pc, #156]	; (800619c <HAL_RCC_OscConfig+0x738>)
 80060fe:	4313      	orrs	r3, r2
 8006100:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006102:	4b26      	ldr	r3, [pc, #152]	; (800619c <HAL_RCC_OscConfig+0x738>)
 8006104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006106:	4a25      	ldr	r2, [pc, #148]	; (800619c <HAL_RCC_OscConfig+0x738>)
 8006108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800610c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800610e:	4b23      	ldr	r3, [pc, #140]	; (800619c <HAL_RCC_OscConfig+0x738>)
 8006110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006112:	4a22      	ldr	r2, [pc, #136]	; (800619c <HAL_RCC_OscConfig+0x738>)
 8006114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006118:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800611a:	4b20      	ldr	r3, [pc, #128]	; (800619c <HAL_RCC_OscConfig+0x738>)
 800611c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611e:	4a1f      	ldr	r2, [pc, #124]	; (800619c <HAL_RCC_OscConfig+0x738>)
 8006120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006124:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006126:	4b1d      	ldr	r3, [pc, #116]	; (800619c <HAL_RCC_OscConfig+0x738>)
 8006128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612a:	4a1c      	ldr	r2, [pc, #112]	; (800619c <HAL_RCC_OscConfig+0x738>)
 800612c:	f043 0301 	orr.w	r3, r3, #1
 8006130:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006132:	4b1a      	ldr	r3, [pc, #104]	; (800619c <HAL_RCC_OscConfig+0x738>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a19      	ldr	r2, [pc, #100]	; (800619c <HAL_RCC_OscConfig+0x738>)
 8006138:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800613c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800613e:	f7fb fd8d 	bl	8001c5c <HAL_GetTick>
 8006142:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006144:	e008      	b.n	8006158 <HAL_RCC_OscConfig+0x6f4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006146:	f7fb fd89 	bl	8001c5c <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	2b02      	cmp	r3, #2
 8006152:	d901      	bls.n	8006158 <HAL_RCC_OscConfig+0x6f4>
          {
            return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e066      	b.n	8006226 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006158:	4b10      	ldr	r3, [pc, #64]	; (800619c <HAL_RCC_OscConfig+0x738>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d0f0      	beq.n	8006146 <HAL_RCC_OscConfig+0x6e2>
 8006164:	e05e      	b.n	8006224 <HAL_RCC_OscConfig+0x7c0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006166:	4b0d      	ldr	r3, [pc, #52]	; (800619c <HAL_RCC_OscConfig+0x738>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a0c      	ldr	r2, [pc, #48]	; (800619c <HAL_RCC_OscConfig+0x738>)
 800616c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006170:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006172:	f7fb fd73 	bl	8001c5c <HAL_GetTick>
 8006176:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006178:	e008      	b.n	800618c <HAL_RCC_OscConfig+0x728>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800617a:	f7fb fd6f 	bl	8001c5c <HAL_GetTick>
 800617e:	4602      	mov	r2, r0
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	2b02      	cmp	r3, #2
 8006186:	d901      	bls.n	800618c <HAL_RCC_OscConfig+0x728>
          {
            return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e04c      	b.n	8006226 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800618c:	4b03      	ldr	r3, [pc, #12]	; (800619c <HAL_RCC_OscConfig+0x738>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1f0      	bne.n	800617a <HAL_RCC_OscConfig+0x716>
 8006198:	e044      	b.n	8006224 <HAL_RCC_OscConfig+0x7c0>
 800619a:	bf00      	nop
 800619c:	58024400 	.word	0x58024400
 80061a0:	fffffc0c 	.word	0xfffffc0c
 80061a4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80061a8:	4b21      	ldr	r3, [pc, #132]	; (8006230 <HAL_RCC_OscConfig+0x7cc>)
 80061aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80061ae:	4b20      	ldr	r3, [pc, #128]	; (8006230 <HAL_RCC_OscConfig+0x7cc>)
 80061b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d031      	beq.n	8006220 <HAL_RCC_OscConfig+0x7bc>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	f003 0203 	and.w	r2, r3, #3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d12a      	bne.n	8006220 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	091b      	lsrs	r3, r3, #4
 80061ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d122      	bne.n	8006220 <HAL_RCC_OscConfig+0x7bc>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d11a      	bne.n	8006220 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	0a5b      	lsrs	r3, r3, #9
 80061ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d111      	bne.n	8006220 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	0c1b      	lsrs	r3, r3, #16
 8006200:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006208:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800620a:	429a      	cmp	r2, r3
 800620c:	d108      	bne.n	8006220 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	0e1b      	lsrs	r3, r3, #24
 8006212:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800621a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800621c:	429a      	cmp	r2, r3
 800621e:	d001      	beq.n	8006224 <HAL_RCC_OscConfig+0x7c0>
      {
        return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e000      	b.n	8006226 <HAL_RCC_OscConfig+0x7c2>
      }
    }
  }
  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3730      	adds	r7, #48	; 0x30
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	58024400 	.word	0x58024400

08006234 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b086      	sub	sp, #24
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d101      	bne.n	8006248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e19c      	b.n	8006582 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006248:	4b8a      	ldr	r3, [pc, #552]	; (8006474 <HAL_RCC_ClockConfig+0x240>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 030f 	and.w	r3, r3, #15
 8006250:	683a      	ldr	r2, [r7, #0]
 8006252:	429a      	cmp	r2, r3
 8006254:	d910      	bls.n	8006278 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006256:	4b87      	ldr	r3, [pc, #540]	; (8006474 <HAL_RCC_ClockConfig+0x240>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f023 020f 	bic.w	r2, r3, #15
 800625e:	4985      	ldr	r1, [pc, #532]	; (8006474 <HAL_RCC_ClockConfig+0x240>)
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	4313      	orrs	r3, r2
 8006264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006266:	4b83      	ldr	r3, [pc, #524]	; (8006474 <HAL_RCC_ClockConfig+0x240>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 030f 	and.w	r3, r3, #15
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	429a      	cmp	r2, r3
 8006272:	d001      	beq.n	8006278 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e184      	b.n	8006582 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0304 	and.w	r3, r3, #4
 8006280:	2b00      	cmp	r3, #0
 8006282:	d010      	beq.n	80062a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	691a      	ldr	r2, [r3, #16]
 8006288:	4b7b      	ldr	r3, [pc, #492]	; (8006478 <HAL_RCC_ClockConfig+0x244>)
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006290:	429a      	cmp	r2, r3
 8006292:	d908      	bls.n	80062a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006294:	4b78      	ldr	r3, [pc, #480]	; (8006478 <HAL_RCC_ClockConfig+0x244>)
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	4975      	ldr	r1, [pc, #468]	; (8006478 <HAL_RCC_ClockConfig+0x244>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0308 	and.w	r3, r3, #8
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d010      	beq.n	80062d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	695a      	ldr	r2, [r3, #20]
 80062b6:	4b70      	ldr	r3, [pc, #448]	; (8006478 <HAL_RCC_ClockConfig+0x244>)
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062be:	429a      	cmp	r2, r3
 80062c0:	d908      	bls.n	80062d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80062c2:	4b6d      	ldr	r3, [pc, #436]	; (8006478 <HAL_RCC_ClockConfig+0x244>)
 80062c4:	69db      	ldr	r3, [r3, #28]
 80062c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	496a      	ldr	r1, [pc, #424]	; (8006478 <HAL_RCC_ClockConfig+0x244>)
 80062d0:	4313      	orrs	r3, r2
 80062d2:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0310 	and.w	r3, r3, #16
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d010      	beq.n	8006302 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	699a      	ldr	r2, [r3, #24]
 80062e4:	4b64      	ldr	r3, [pc, #400]	; (8006478 <HAL_RCC_ClockConfig+0x244>)
 80062e6:	69db      	ldr	r3, [r3, #28]
 80062e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d908      	bls.n	8006302 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80062f0:	4b61      	ldr	r3, [pc, #388]	; (8006478 <HAL_RCC_ClockConfig+0x244>)
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	495e      	ldr	r1, [pc, #376]	; (8006478 <HAL_RCC_ClockConfig+0x244>)
 80062fe:	4313      	orrs	r3, r2
 8006300:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0320 	and.w	r3, r3, #32
 800630a:	2b00      	cmp	r3, #0
 800630c:	d010      	beq.n	8006330 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	69da      	ldr	r2, [r3, #28]
 8006312:	4b59      	ldr	r3, [pc, #356]	; (8006478 <HAL_RCC_ClockConfig+0x244>)
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800631a:	429a      	cmp	r2, r3
 800631c:	d908      	bls.n	8006330 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800631e:	4b56      	ldr	r3, [pc, #344]	; (8006478 <HAL_RCC_ClockConfig+0x244>)
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	4953      	ldr	r1, [pc, #332]	; (8006478 <HAL_RCC_ClockConfig+0x244>)
 800632c:	4313      	orrs	r3, r2
 800632e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0302 	and.w	r3, r3, #2
 8006338:	2b00      	cmp	r3, #0
 800633a:	d010      	beq.n	800635e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	68da      	ldr	r2, [r3, #12]
 8006340:	4b4d      	ldr	r3, [pc, #308]	; (8006478 <HAL_RCC_ClockConfig+0x244>)
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	f003 030f 	and.w	r3, r3, #15
 8006348:	429a      	cmp	r2, r3
 800634a:	d908      	bls.n	800635e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800634c:	4b4a      	ldr	r3, [pc, #296]	; (8006478 <HAL_RCC_ClockConfig+0x244>)
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	f023 020f 	bic.w	r2, r3, #15
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	4947      	ldr	r1, [pc, #284]	; (8006478 <HAL_RCC_ClockConfig+0x244>)
 800635a:	4313      	orrs	r3, r2
 800635c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0301 	and.w	r3, r3, #1
 8006366:	2b00      	cmp	r3, #0
 8006368:	d055      	beq.n	8006416 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800636a:	4b43      	ldr	r3, [pc, #268]	; (8006478 <HAL_RCC_ClockConfig+0x244>)
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	4940      	ldr	r1, [pc, #256]	; (8006478 <HAL_RCC_ClockConfig+0x244>)
 8006378:	4313      	orrs	r3, r2
 800637a:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	2b02      	cmp	r3, #2
 8006382:	d107      	bne.n	8006394 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006384:	4b3c      	ldr	r3, [pc, #240]	; (8006478 <HAL_RCC_ClockConfig+0x244>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d121      	bne.n	80063d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e0f6      	b.n	8006582 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	2b03      	cmp	r3, #3
 800639a:	d107      	bne.n	80063ac <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800639c:	4b36      	ldr	r3, [pc, #216]	; (8006478 <HAL_RCC_ClockConfig+0x244>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d115      	bne.n	80063d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e0ea      	b.n	8006582 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d107      	bne.n	80063c4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80063b4:	4b30      	ldr	r3, [pc, #192]	; (8006478 <HAL_RCC_ClockConfig+0x244>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d109      	bne.n	80063d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e0de      	b.n	8006582 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063c4:	4b2c      	ldr	r3, [pc, #176]	; (8006478 <HAL_RCC_ClockConfig+0x244>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0304 	and.w	r3, r3, #4
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d101      	bne.n	80063d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e0d6      	b.n	8006582 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80063d4:	4b28      	ldr	r3, [pc, #160]	; (8006478 <HAL_RCC_ClockConfig+0x244>)
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	f023 0207 	bic.w	r2, r3, #7
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	4925      	ldr	r1, [pc, #148]	; (8006478 <HAL_RCC_ClockConfig+0x244>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063e6:	f7fb fc39 	bl	8001c5c <HAL_GetTick>
 80063ea:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063ec:	e00a      	b.n	8006404 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063ee:	f7fb fc35 	bl	8001c5c <HAL_GetTick>
 80063f2:	4602      	mov	r2, r0
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d901      	bls.n	8006404 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	e0be      	b.n	8006582 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006404:	4b1c      	ldr	r3, [pc, #112]	; (8006478 <HAL_RCC_ClockConfig+0x244>)
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	00db      	lsls	r3, r3, #3
 8006412:	429a      	cmp	r2, r3
 8006414:	d1eb      	bne.n	80063ee <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	2b00      	cmp	r3, #0
 8006420:	d010      	beq.n	8006444 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68da      	ldr	r2, [r3, #12]
 8006426:	4b14      	ldr	r3, [pc, #80]	; (8006478 <HAL_RCC_ClockConfig+0x244>)
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	f003 030f 	and.w	r3, r3, #15
 800642e:	429a      	cmp	r2, r3
 8006430:	d208      	bcs.n	8006444 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006432:	4b11      	ldr	r3, [pc, #68]	; (8006478 <HAL_RCC_ClockConfig+0x244>)
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	f023 020f 	bic.w	r2, r3, #15
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	490e      	ldr	r1, [pc, #56]	; (8006478 <HAL_RCC_ClockConfig+0x244>)
 8006440:	4313      	orrs	r3, r2
 8006442:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006444:	4b0b      	ldr	r3, [pc, #44]	; (8006474 <HAL_RCC_ClockConfig+0x240>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 030f 	and.w	r3, r3, #15
 800644c:	683a      	ldr	r2, [r7, #0]
 800644e:	429a      	cmp	r2, r3
 8006450:	d214      	bcs.n	800647c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006452:	4b08      	ldr	r3, [pc, #32]	; (8006474 <HAL_RCC_ClockConfig+0x240>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f023 020f 	bic.w	r2, r3, #15
 800645a:	4906      	ldr	r1, [pc, #24]	; (8006474 <HAL_RCC_ClockConfig+0x240>)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	4313      	orrs	r3, r2
 8006460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006462:	4b04      	ldr	r3, [pc, #16]	; (8006474 <HAL_RCC_ClockConfig+0x240>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 030f 	and.w	r3, r3, #15
 800646a:	683a      	ldr	r2, [r7, #0]
 800646c:	429a      	cmp	r2, r3
 800646e:	d005      	beq.n	800647c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e086      	b.n	8006582 <HAL_RCC_ClockConfig+0x34e>
 8006474:	52002000 	.word	0x52002000
 8006478:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0304 	and.w	r3, r3, #4
 8006484:	2b00      	cmp	r3, #0
 8006486:	d010      	beq.n	80064aa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	691a      	ldr	r2, [r3, #16]
 800648c:	4b3f      	ldr	r3, [pc, #252]	; (800658c <HAL_RCC_ClockConfig+0x358>)
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006494:	429a      	cmp	r2, r3
 8006496:	d208      	bcs.n	80064aa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006498:	4b3c      	ldr	r3, [pc, #240]	; (800658c <HAL_RCC_ClockConfig+0x358>)
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	4939      	ldr	r1, [pc, #228]	; (800658c <HAL_RCC_ClockConfig+0x358>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0308 	and.w	r3, r3, #8
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d010      	beq.n	80064d8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	695a      	ldr	r2, [r3, #20]
 80064ba:	4b34      	ldr	r3, [pc, #208]	; (800658c <HAL_RCC_ClockConfig+0x358>)
 80064bc:	69db      	ldr	r3, [r3, #28]
 80064be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d208      	bcs.n	80064d8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80064c6:	4b31      	ldr	r3, [pc, #196]	; (800658c <HAL_RCC_ClockConfig+0x358>)
 80064c8:	69db      	ldr	r3, [r3, #28]
 80064ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	492e      	ldr	r1, [pc, #184]	; (800658c <HAL_RCC_ClockConfig+0x358>)
 80064d4:	4313      	orrs	r3, r2
 80064d6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0310 	and.w	r3, r3, #16
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d010      	beq.n	8006506 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	699a      	ldr	r2, [r3, #24]
 80064e8:	4b28      	ldr	r3, [pc, #160]	; (800658c <HAL_RCC_ClockConfig+0x358>)
 80064ea:	69db      	ldr	r3, [r3, #28]
 80064ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d208      	bcs.n	8006506 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80064f4:	4b25      	ldr	r3, [pc, #148]	; (800658c <HAL_RCC_ClockConfig+0x358>)
 80064f6:	69db      	ldr	r3, [r3, #28]
 80064f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	4922      	ldr	r1, [pc, #136]	; (800658c <HAL_RCC_ClockConfig+0x358>)
 8006502:	4313      	orrs	r3, r2
 8006504:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0320 	and.w	r3, r3, #32
 800650e:	2b00      	cmp	r3, #0
 8006510:	d010      	beq.n	8006534 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	69da      	ldr	r2, [r3, #28]
 8006516:	4b1d      	ldr	r3, [pc, #116]	; (800658c <HAL_RCC_ClockConfig+0x358>)
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800651e:	429a      	cmp	r2, r3
 8006520:	d208      	bcs.n	8006534 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006522:	4b1a      	ldr	r3, [pc, #104]	; (800658c <HAL_RCC_ClockConfig+0x358>)
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	69db      	ldr	r3, [r3, #28]
 800652e:	4917      	ldr	r1, [pc, #92]	; (800658c <HAL_RCC_ClockConfig+0x358>)
 8006530:	4313      	orrs	r3, r2
 8006532:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006534:	f000 f834 	bl	80065a0 <HAL_RCC_GetSysClockFreq>
 8006538:	4601      	mov	r1, r0
 800653a:	4b14      	ldr	r3, [pc, #80]	; (800658c <HAL_RCC_ClockConfig+0x358>)
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	0a1b      	lsrs	r3, r3, #8
 8006540:	f003 030f 	and.w	r3, r3, #15
 8006544:	4a12      	ldr	r2, [pc, #72]	; (8006590 <HAL_RCC_ClockConfig+0x35c>)
 8006546:	5cd3      	ldrb	r3, [r2, r3]
 8006548:	f003 031f 	and.w	r3, r3, #31
 800654c:	fa21 f303 	lsr.w	r3, r1, r3
 8006550:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006552:	4b0e      	ldr	r3, [pc, #56]	; (800658c <HAL_RCC_ClockConfig+0x358>)
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	f003 030f 	and.w	r3, r3, #15
 800655a:	4a0d      	ldr	r2, [pc, #52]	; (8006590 <HAL_RCC_ClockConfig+0x35c>)
 800655c:	5cd3      	ldrb	r3, [r2, r3]
 800655e:	f003 031f 	and.w	r3, r3, #31
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	fa22 f303 	lsr.w	r3, r2, r3
 8006568:	4a0a      	ldr	r2, [pc, #40]	; (8006594 <HAL_RCC_ClockConfig+0x360>)
 800656a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800656c:	4a0a      	ldr	r2, [pc, #40]	; (8006598 <HAL_RCC_ClockConfig+0x364>)
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006572:	4b0a      	ldr	r3, [pc, #40]	; (800659c <HAL_RCC_ClockConfig+0x368>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4618      	mov	r0, r3
 8006578:	f7fb fb26 	bl	8001bc8 <HAL_InitTick>
 800657c:	4603      	mov	r3, r0
 800657e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006580:	7bfb      	ldrb	r3, [r7, #15]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3718      	adds	r7, #24
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	58024400 	.word	0x58024400
 8006590:	0800b45c 	.word	0x0800b45c
 8006594:	2400000c 	.word	0x2400000c
 8006598:	24000008 	.word	0x24000008
 800659c:	24000010 	.word	0x24000010

080065a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b089      	sub	sp, #36	; 0x24
 80065a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065a6:	4baf      	ldr	r3, [pc, #700]	; (8006864 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065ae:	2b18      	cmp	r3, #24
 80065b0:	f200 814e 	bhi.w	8006850 <HAL_RCC_GetSysClockFreq+0x2b0>
 80065b4:	a201      	add	r2, pc, #4	; (adr r2, 80065bc <HAL_RCC_GetSysClockFreq+0x1c>)
 80065b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ba:	bf00      	nop
 80065bc:	08006621 	.word	0x08006621
 80065c0:	08006851 	.word	0x08006851
 80065c4:	08006851 	.word	0x08006851
 80065c8:	08006851 	.word	0x08006851
 80065cc:	08006851 	.word	0x08006851
 80065d0:	08006851 	.word	0x08006851
 80065d4:	08006851 	.word	0x08006851
 80065d8:	08006851 	.word	0x08006851
 80065dc:	08006647 	.word	0x08006647
 80065e0:	08006851 	.word	0x08006851
 80065e4:	08006851 	.word	0x08006851
 80065e8:	08006851 	.word	0x08006851
 80065ec:	08006851 	.word	0x08006851
 80065f0:	08006851 	.word	0x08006851
 80065f4:	08006851 	.word	0x08006851
 80065f8:	08006851 	.word	0x08006851
 80065fc:	0800664d 	.word	0x0800664d
 8006600:	08006851 	.word	0x08006851
 8006604:	08006851 	.word	0x08006851
 8006608:	08006851 	.word	0x08006851
 800660c:	08006851 	.word	0x08006851
 8006610:	08006851 	.word	0x08006851
 8006614:	08006851 	.word	0x08006851
 8006618:	08006851 	.word	0x08006851
 800661c:	08006653 	.word	0x08006653
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006620:	4b90      	ldr	r3, [pc, #576]	; (8006864 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0320 	and.w	r3, r3, #32
 8006628:	2b00      	cmp	r3, #0
 800662a:	d009      	beq.n	8006640 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800662c:	4b8d      	ldr	r3, [pc, #564]	; (8006864 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	08db      	lsrs	r3, r3, #3
 8006632:	f003 0303 	and.w	r3, r3, #3
 8006636:	4a8c      	ldr	r2, [pc, #560]	; (8006868 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006638:	fa22 f303 	lsr.w	r3, r2, r3
 800663c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800663e:	e10a      	b.n	8006856 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006640:	4b89      	ldr	r3, [pc, #548]	; (8006868 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006642:	61bb      	str	r3, [r7, #24]
    break;
 8006644:	e107      	b.n	8006856 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006646:	4b89      	ldr	r3, [pc, #548]	; (800686c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006648:	61bb      	str	r3, [r7, #24]
    break;
 800664a:	e104      	b.n	8006856 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800664c:	4b88      	ldr	r3, [pc, #544]	; (8006870 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800664e:	61bb      	str	r3, [r7, #24]
    break;
 8006650:	e101      	b.n	8006856 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006652:	4b84      	ldr	r3, [pc, #528]	; (8006864 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006656:	f003 0303 	and.w	r3, r3, #3
 800665a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800665c:	4b81      	ldr	r3, [pc, #516]	; (8006864 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800665e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006660:	091b      	lsrs	r3, r3, #4
 8006662:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006666:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006668:	4b7e      	ldr	r3, [pc, #504]	; (8006864 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800666a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006672:	4b7c      	ldr	r3, [pc, #496]	; (8006864 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006676:	08db      	lsrs	r3, r3, #3
 8006678:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	fb02 f303 	mul.w	r3, r2, r3
 8006682:	ee07 3a90 	vmov	s15, r3
 8006686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800668a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	2b00      	cmp	r3, #0
 8006692:	f000 80da 	beq.w	800684a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d05a      	beq.n	8006752 <HAL_RCC_GetSysClockFreq+0x1b2>
 800669c:	2b01      	cmp	r3, #1
 800669e:	d302      	bcc.n	80066a6 <HAL_RCC_GetSysClockFreq+0x106>
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d078      	beq.n	8006796 <HAL_RCC_GetSysClockFreq+0x1f6>
 80066a4:	e099      	b.n	80067da <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066a6:	4b6f      	ldr	r3, [pc, #444]	; (8006864 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0320 	and.w	r3, r3, #32
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d02d      	beq.n	800670e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80066b2:	4b6c      	ldr	r3, [pc, #432]	; (8006864 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	08db      	lsrs	r3, r3, #3
 80066b8:	f003 0303 	and.w	r3, r3, #3
 80066bc:	4a6a      	ldr	r2, [pc, #424]	; (8006868 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80066be:	fa22 f303 	lsr.w	r3, r2, r3
 80066c2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	ee07 3a90 	vmov	s15, r3
 80066ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	ee07 3a90 	vmov	s15, r3
 80066d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066dc:	4b61      	ldr	r3, [pc, #388]	; (8006864 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80066de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066e4:	ee07 3a90 	vmov	s15, r3
 80066e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80066f0:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006874 <HAL_RCC_GetSysClockFreq+0x2d4>
 80066f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006700:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006708:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800670c:	e087      	b.n	800681e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	ee07 3a90 	vmov	s15, r3
 8006714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006718:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006878 <HAL_RCC_GetSysClockFreq+0x2d8>
 800671c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006720:	4b50      	ldr	r3, [pc, #320]	; (8006864 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006728:	ee07 3a90 	vmov	s15, r3
 800672c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006730:	ed97 6a02 	vldr	s12, [r7, #8]
 8006734:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006874 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006738:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800673c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006740:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006744:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800674c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006750:	e065      	b.n	800681e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	ee07 3a90 	vmov	s15, r3
 8006758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800675c:	eddf 6a47 	vldr	s13, [pc, #284]	; 800687c <HAL_RCC_GetSysClockFreq+0x2dc>
 8006760:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006764:	4b3f      	ldr	r3, [pc, #252]	; (8006864 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800676c:	ee07 3a90 	vmov	s15, r3
 8006770:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006774:	ed97 6a02 	vldr	s12, [r7, #8]
 8006778:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006874 <HAL_RCC_GetSysClockFreq+0x2d4>
 800677c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006780:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006784:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006788:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800678c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006790:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006794:	e043      	b.n	800681e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	ee07 3a90 	vmov	s15, r3
 800679c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067a0:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006880 <HAL_RCC_GetSysClockFreq+0x2e0>
 80067a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067a8:	4b2e      	ldr	r3, [pc, #184]	; (8006864 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80067aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067b0:	ee07 3a90 	vmov	s15, r3
 80067b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80067bc:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006874 <HAL_RCC_GetSysClockFreq+0x2d4>
 80067c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067d8:	e021      	b.n	800681e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	ee07 3a90 	vmov	s15, r3
 80067e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067e4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800687c <HAL_RCC_GetSysClockFreq+0x2dc>
 80067e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ec:	4b1d      	ldr	r3, [pc, #116]	; (8006864 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80067ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067f4:	ee07 3a90 	vmov	s15, r3
 80067f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8006800:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006874 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006804:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006808:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800680c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006810:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006814:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006818:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800681c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800681e:	4b11      	ldr	r3, [pc, #68]	; (8006864 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006822:	0a5b      	lsrs	r3, r3, #9
 8006824:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006828:	3301      	adds	r3, #1
 800682a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	ee07 3a90 	vmov	s15, r3
 8006832:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006836:	edd7 6a07 	vldr	s13, [r7, #28]
 800683a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800683e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006842:	ee17 3a90 	vmov	r3, s15
 8006846:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006848:	e005      	b.n	8006856 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800684a:	2300      	movs	r3, #0
 800684c:	61bb      	str	r3, [r7, #24]
    break;
 800684e:	e002      	b.n	8006856 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006850:	4b06      	ldr	r3, [pc, #24]	; (800686c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006852:	61bb      	str	r3, [r7, #24]
    break;
 8006854:	bf00      	nop
  }

  return sysclockfreq;
 8006856:	69bb      	ldr	r3, [r7, #24]
}
 8006858:	4618      	mov	r0, r3
 800685a:	3724      	adds	r7, #36	; 0x24
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr
 8006864:	58024400 	.word	0x58024400
 8006868:	03d09000 	.word	0x03d09000
 800686c:	003d0900 	.word	0x003d0900
 8006870:	007a1200 	.word	0x007a1200
 8006874:	46000000 	.word	0x46000000
 8006878:	4c742400 	.word	0x4c742400
 800687c:	4a742400 	.word	0x4a742400
 8006880:	4af42400 	.word	0x4af42400

08006884 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800688a:	f7ff fe89 	bl	80065a0 <HAL_RCC_GetSysClockFreq>
 800688e:	4601      	mov	r1, r0
 8006890:	4b10      	ldr	r3, [pc, #64]	; (80068d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	0a1b      	lsrs	r3, r3, #8
 8006896:	f003 030f 	and.w	r3, r3, #15
 800689a:	4a0f      	ldr	r2, [pc, #60]	; (80068d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800689c:	5cd3      	ldrb	r3, [r2, r3]
 800689e:	f003 031f 	and.w	r3, r3, #31
 80068a2:	fa21 f303 	lsr.w	r3, r1, r3
 80068a6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80068a8:	4b0a      	ldr	r3, [pc, #40]	; (80068d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	f003 030f 	and.w	r3, r3, #15
 80068b0:	4a09      	ldr	r2, [pc, #36]	; (80068d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80068b2:	5cd3      	ldrb	r3, [r2, r3]
 80068b4:	f003 031f 	and.w	r3, r3, #31
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	fa22 f303 	lsr.w	r3, r2, r3
 80068be:	4a07      	ldr	r2, [pc, #28]	; (80068dc <HAL_RCC_GetHCLKFreq+0x58>)
 80068c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80068c2:	4a07      	ldr	r2, [pc, #28]	; (80068e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80068c8:	4b04      	ldr	r3, [pc, #16]	; (80068dc <HAL_RCC_GetHCLKFreq+0x58>)
 80068ca:	681b      	ldr	r3, [r3, #0]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3708      	adds	r7, #8
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	58024400 	.word	0x58024400
 80068d8:	0800b45c 	.word	0x0800b45c
 80068dc:	2400000c 	.word	0x2400000c
 80068e0:	24000008 	.word	0x24000008

080068e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80068e8:	f7ff ffcc 	bl	8006884 <HAL_RCC_GetHCLKFreq>
 80068ec:	4601      	mov	r1, r0
 80068ee:	4b06      	ldr	r3, [pc, #24]	; (8006908 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068f0:	69db      	ldr	r3, [r3, #28]
 80068f2:	091b      	lsrs	r3, r3, #4
 80068f4:	f003 0307 	and.w	r3, r3, #7
 80068f8:	4a04      	ldr	r2, [pc, #16]	; (800690c <HAL_RCC_GetPCLK1Freq+0x28>)
 80068fa:	5cd3      	ldrb	r3, [r2, r3]
 80068fc:	f003 031f 	and.w	r3, r3, #31
 8006900:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 8006904:	4618      	mov	r0, r3
 8006906:	bd80      	pop	{r7, pc}
 8006908:	58024400 	.word	0x58024400
 800690c:	0800b45c 	.word	0x0800b45c

08006910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8006914:	f7ff ffb6 	bl	8006884 <HAL_RCC_GetHCLKFreq>
 8006918:	4601      	mov	r1, r0
 800691a:	4b06      	ldr	r3, [pc, #24]	; (8006934 <HAL_RCC_GetPCLK2Freq+0x24>)
 800691c:	69db      	ldr	r3, [r3, #28]
 800691e:	0a1b      	lsrs	r3, r3, #8
 8006920:	f003 0307 	and.w	r3, r3, #7
 8006924:	4a04      	ldr	r2, [pc, #16]	; (8006938 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006926:	5cd3      	ldrb	r3, [r2, r3]
 8006928:	f003 031f 	and.w	r3, r3, #31
 800692c:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 8006930:	4618      	mov	r0, r3
 8006932:	bd80      	pop	{r7, pc}
 8006934:	58024400 	.word	0x58024400
 8006938:	0800b45c 	.word	0x0800b45c

0800693c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006944:	2300      	movs	r3, #0
 8006946:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006948:	2300      	movs	r3, #0
 800694a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006954:	2b00      	cmp	r3, #0
 8006956:	d03d      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800695c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006960:	d013      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006962:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006966:	d802      	bhi.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006968:	2b00      	cmp	r3, #0
 800696a:	d007      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800696c:	e01f      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x72>
 800696e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006972:	d013      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006974:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006978:	d01c      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800697a:	e018      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800697c:	4bad      	ldr	r3, [pc, #692]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800697e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006980:	4aac      	ldr	r2, [pc, #688]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006982:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006986:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006988:	e015      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	3304      	adds	r3, #4
 800698e:	2102      	movs	r1, #2
 8006990:	4618      	mov	r0, r3
 8006992:	f001 fca7 	bl	80082e4 <RCCEx_PLL2_Config>
 8006996:	4603      	mov	r3, r0
 8006998:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800699a:	e00c      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	3324      	adds	r3, #36	; 0x24
 80069a0:	2102      	movs	r1, #2
 80069a2:	4618      	mov	r0, r3
 80069a4:	f001 fd50 	bl	8008448 <RCCEx_PLL3_Config>
 80069a8:	4603      	mov	r3, r0
 80069aa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80069ac:	e003      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	75fb      	strb	r3, [r7, #23]
      break;
 80069b2:	e000      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80069b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069b6:	7dfb      	ldrb	r3, [r7, #23]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d109      	bne.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80069bc:	4b9d      	ldr	r3, [pc, #628]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80069be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069c8:	499a      	ldr	r1, [pc, #616]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80069ca:	4313      	orrs	r3, r2
 80069cc:	650b      	str	r3, [r1, #80]	; 0x50
 80069ce:	e001      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069d0:	7dfb      	ldrb	r3, [r7, #23]
 80069d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d03d      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e4:	2b04      	cmp	r3, #4
 80069e6:	d826      	bhi.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80069e8:	a201      	add	r2, pc, #4	; (adr r2, 80069f0 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80069ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ee:	bf00      	nop
 80069f0:	08006a05 	.word	0x08006a05
 80069f4:	08006a13 	.word	0x08006a13
 80069f8:	08006a25 	.word	0x08006a25
 80069fc:	08006a3d 	.word	0x08006a3d
 8006a00:	08006a3d 	.word	0x08006a3d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a04:	4b8b      	ldr	r3, [pc, #556]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a08:	4a8a      	ldr	r2, [pc, #552]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006a0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a10:	e015      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	3304      	adds	r3, #4
 8006a16:	2100      	movs	r1, #0
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f001 fc63 	bl	80082e4 <RCCEx_PLL2_Config>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a22:	e00c      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	3324      	adds	r3, #36	; 0x24
 8006a28:	2100      	movs	r1, #0
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f001 fd0c 	bl	8008448 <RCCEx_PLL3_Config>
 8006a30:	4603      	mov	r3, r0
 8006a32:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a34:	e003      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	75fb      	strb	r3, [r7, #23]
      break;
 8006a3a:	e000      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006a3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a3e:	7dfb      	ldrb	r3, [r7, #23]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d109      	bne.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a44:	4b7b      	ldr	r3, [pc, #492]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a48:	f023 0207 	bic.w	r2, r3, #7
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a50:	4978      	ldr	r1, [pc, #480]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	650b      	str	r3, [r1, #80]	; 0x50
 8006a56:	e001      	b.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a58:	7dfb      	ldrb	r3, [r7, #23]
 8006a5a:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d043      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a6c:	2b80      	cmp	r3, #128	; 0x80
 8006a6e:	d01f      	beq.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8006a70:	2b80      	cmp	r3, #128	; 0x80
 8006a72:	d804      	bhi.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00b      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006a78:	2b40      	cmp	r3, #64	; 0x40
 8006a7a:	d010      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x162>
 8006a7c:	e021      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a82:	d021      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006a84:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006a88:	d020      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006a8a:	2bc0      	cmp	r3, #192	; 0xc0
 8006a8c:	d020      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8006a8e:	e018      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a90:	4b68      	ldr	r3, [pc, #416]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a94:	4a67      	ldr	r2, [pc, #412]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8006a9c:	e019      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x196>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	3304      	adds	r3, #4
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f001 fc1d 	bl	80082e4 <RCCEx_PLL2_Config>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8006aae:	e010      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x196>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	3324      	adds	r3, #36	; 0x24
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f001 fcc6 	bl	8008448 <RCCEx_PLL3_Config>
 8006abc:	4603      	mov	r3, r0
 8006abe:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8006ac0:	e007      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ac6:	e004      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 8006ac8:	bf00      	nop
 8006aca:	e002      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 8006acc:	bf00      	nop
 8006ace:	e000      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 8006ad0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ad2:	7dfb      	ldrb	r3, [r7, #23]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d109      	bne.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8006ad8:	4b56      	ldr	r3, [pc, #344]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006adc:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ae4:	4953      	ldr	r1, [pc, #332]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	650b      	str	r3, [r1, #80]	; 0x50
 8006aea:	e001      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aec:	7dfb      	ldrb	r3, [r7, #23]
 8006aee:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d047      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b04:	d022      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8006b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b0a:	d805      	bhi.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00d      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8006b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b14:	d011      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8006b16:	e022      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006b18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b1c:	d022      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8006b1e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006b22:	d021      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8006b24:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006b28:	d020      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006b2a:	e018      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x222>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b2c:	4b41      	ldr	r3, [pc, #260]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b30:	4a40      	ldr	r2, [pc, #256]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006b38:	e019      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x232>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	3304      	adds	r3, #4
 8006b3e:	2100      	movs	r1, #0
 8006b40:	4618      	mov	r0, r3
 8006b42:	f001 fbcf 	bl	80082e4 <RCCEx_PLL2_Config>
 8006b46:	4603      	mov	r3, r0
 8006b48:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006b4a:	e010      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x232>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	3324      	adds	r3, #36	; 0x24
 8006b50:	2100      	movs	r1, #0
 8006b52:	4618      	mov	r0, r3
 8006b54:	f001 fc78 	bl	8008448 <RCCEx_PLL3_Config>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006b5c:	e007      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x232>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	75fb      	strb	r3, [r7, #23]
      break;
 8006b62:	e004      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 8006b64:	bf00      	nop
 8006b66:	e002      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 8006b68:	bf00      	nop
 8006b6a:	e000      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 8006b6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b6e:	7dfb      	ldrb	r3, [r7, #23]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d109      	bne.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8006b74:	4b2f      	ldr	r3, [pc, #188]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b78:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b80:	492c      	ldr	r1, [pc, #176]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006b82:	4313      	orrs	r3, r2
 8006b84:	650b      	str	r3, [r1, #80]	; 0x50
 8006b86:	e001      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x250>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b88:	7dfb      	ldrb	r3, [r7, #23]
 8006b8a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d032      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b9c:	2b10      	cmp	r3, #16
 8006b9e:	d009      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8006ba0:	2b10      	cmp	r3, #16
 8006ba2:	d802      	bhi.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d018      	beq.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x29e>
 8006ba8:	e014      	b.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006baa:	2b20      	cmp	r3, #32
 8006bac:	d009      	beq.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006bae:	2b30      	cmp	r3, #48	; 0x30
 8006bb0:	d015      	beq.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 8006bb2:	e00f      	b.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x298>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bb4:	4b1f      	ldr	r3, [pc, #124]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb8:	4a1e      	ldr	r2, [pc, #120]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006bc0:	e00e      	b.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	3304      	adds	r3, #4
 8006bc6:	2102      	movs	r1, #2
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f001 fb8b 	bl	80082e4 <RCCEx_PLL2_Config>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006bd2:	e005      	b.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8006bd8:	e002      	b.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      break;
 8006bda:	bf00      	nop
 8006bdc:	e000      	b.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      break;
 8006bde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006be0:	7dfb      	ldrb	r3, [r7, #23]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d109      	bne.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006be6:	4b13      	ldr	r3, [pc, #76]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bf2:	4910      	ldr	r1, [pc, #64]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006bf8:	e001      	b.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bfa:	7dfb      	ldrb	r3, [r7, #23]
 8006bfc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d044      	beq.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c12:	d021      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8006c14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c18:	d805      	bhi.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00c      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c22:	d010      	beq.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8006c24:	e021      	b.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006c26:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c2a:	d021      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x334>
 8006c2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c30:	d020      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8006c32:	e01a      	b.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006c34:	58024400 	.word	0x58024400
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c38:	4ba6      	ldr	r3, [pc, #664]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c3c:	4aa5      	ldr	r2, [pc, #660]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006c3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006c44:	e017      	b.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x33a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	3304      	adds	r3, #4
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f001 fb49 	bl	80082e4 <RCCEx_PLL2_Config>
 8006c52:	4603      	mov	r3, r0
 8006c54:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006c56:	e00e      	b.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x33a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	3324      	adds	r3, #36	; 0x24
 8006c5c:	2100      	movs	r1, #0
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f001 fbf2 	bl	8008448 <RCCEx_PLL3_Config>
 8006c64:	4603      	mov	r3, r0
 8006c66:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006c68:	e005      	b.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x33a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	75fb      	strb	r3, [r7, #23]
      break;
 8006c6e:	e002      	b.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x33a>
      break;
 8006c70:	bf00      	nop
 8006c72:	e000      	b.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x33a>
      break;
 8006c74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c76:	7dfb      	ldrb	r3, [r7, #23]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d109      	bne.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x354>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006c7c:	4b95      	ldr	r3, [pc, #596]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c80:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c88:	4992      	ldr	r1, [pc, #584]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	650b      	str	r3, [r1, #80]	; 0x50
 8006c8e:	e001      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x358>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c90:	7dfb      	ldrb	r3, [r7, #23]
 8006c92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d042      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ca4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ca8:	d01b      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 8006caa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cae:	d805      	bhi.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x380>
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d022      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x3be>
 8006cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cb8:	d00a      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x394>
 8006cba:	e01b      	b.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8006cbc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006cc0:	d01d      	beq.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8006cc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006cc6:	d01c      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8006cc8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ccc:	d01b      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8006cce:	e011      	b.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	3304      	adds	r3, #4
 8006cd4:	2101      	movs	r1, #1
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f001 fb04 	bl	80082e4 <RCCEx_PLL2_Config>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006ce0:	e012      	b.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	3324      	adds	r3, #36	; 0x24
 8006ce6:	2101      	movs	r1, #1
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f001 fbad 	bl	8008448 <RCCEx_PLL3_Config>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006cf2:	e009      	b.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	75fb      	strb	r3, [r7, #23]
      break;
 8006cf8:	e006      	b.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006cfa:	bf00      	nop
 8006cfc:	e004      	b.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006cfe:	bf00      	nop
 8006d00:	e002      	b.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006d02:	bf00      	nop
 8006d04:	e000      	b.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006d06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d08:	7dfb      	ldrb	r3, [r7, #23]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d109      	bne.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006d0e:	4b71      	ldr	r3, [pc, #452]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d12:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d1a:	496e      	ldr	r1, [pc, #440]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	650b      	str	r3, [r1, #80]	; 0x50
 8006d20:	e001      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d22:	7dfb      	ldrb	r3, [r7, #23]
 8006d24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d049      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006d38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d3c:	d02a      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8006d3e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d42:	d808      	bhi.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006d44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d48:	d00f      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006d4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d4e:	d015      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d021      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8006d54:	e01b      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8006d56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d5a:	d01f      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x460>
 8006d5c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006d60:	d01e      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8006d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d66:	d01d      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8006d68:	e011      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x452>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	3304      	adds	r3, #4
 8006d6e:	2101      	movs	r1, #1
 8006d70:	4618      	mov	r0, r3
 8006d72:	f001 fab7 	bl	80082e4 <RCCEx_PLL2_Config>
 8006d76:	4603      	mov	r3, r0
 8006d78:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006d7a:	e014      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	3324      	adds	r3, #36	; 0x24
 8006d80:	2101      	movs	r1, #1
 8006d82:	4618      	mov	r0, r3
 8006d84:	f001 fb60 	bl	8008448 <RCCEx_PLL3_Config>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006d8c:	e00b      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	75fb      	strb	r3, [r7, #23]
      break;
 8006d92:	e008      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006d94:	bf00      	nop
 8006d96:	e006      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006d98:	bf00      	nop
 8006d9a:	e004      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006d9c:	bf00      	nop
 8006d9e:	e002      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006da0:	bf00      	nop
 8006da2:	e000      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006da4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006da6:	7dfb      	ldrb	r3, [r7, #23]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d10a      	bne.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x486>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006dac:	4b49      	ldr	r3, [pc, #292]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006db0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006dba:	4946      	ldr	r1, [pc, #280]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	658b      	str	r3, [r1, #88]	; 0x58
 8006dc0:	e001      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc2:	7dfb      	ldrb	r3, [r7, #23]
 8006dc4:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d02d      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006dda:	d005      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8006ddc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006de0:	d009      	beq.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d013      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006de6:	e00f      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006de8:	4b3a      	ldr	r3, [pc, #232]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dec:	4a39      	ldr	r2, [pc, #228]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006dee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006df2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006df4:	e00c      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	3304      	adds	r3, #4
 8006dfa:	2101      	movs	r1, #1
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f001 fa71 	bl	80082e4 <RCCEx_PLL2_Config>
 8006e02:	4603      	mov	r3, r0
 8006e04:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006e06:	e003      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e0c:	e000      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      break;
 8006e0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e10:	7dfb      	ldrb	r3, [r7, #23]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d109      	bne.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006e16:	4b2f      	ldr	r3, [pc, #188]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e1a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e22:	492c      	ldr	r1, [pc, #176]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006e24:	4313      	orrs	r3, r2
 8006e26:	650b      	str	r3, [r1, #80]	; 0x50
 8006e28:	e001      	b.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e2a:	7dfb      	ldrb	r3, [r7, #23]
 8006e2c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d031      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x562>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e3e:	2b03      	cmp	r3, #3
 8006e40:	d81a      	bhi.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x53c>
 8006e42:	a201      	add	r2, pc, #4	; (adr r2, 8006e48 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e48:	08006e7f 	.word	0x08006e7f
 8006e4c:	08006e59 	.word	0x08006e59
 8006e50:	08006e67 	.word	0x08006e67
 8006e54:	08006e7f 	.word	0x08006e7f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e58:	4b1e      	ldr	r3, [pc, #120]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5c:	4a1d      	ldr	r2, [pc, #116]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006e5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006e64:	e00c      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x544>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	3304      	adds	r3, #4
 8006e6a:	2102      	movs	r1, #2
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f001 fa39 	bl	80082e4 <RCCEx_PLL2_Config>
 8006e72:	4603      	mov	r3, r0
 8006e74:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006e76:	e003      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x544>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e7c:	e000      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x544>
      break;
 8006e7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e80:	7dfb      	ldrb	r3, [r7, #23]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d109      	bne.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006e86:	4b13      	ldr	r3, [pc, #76]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e8a:	f023 0203 	bic.w	r2, r3, #3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e92:	4910      	ldr	r1, [pc, #64]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006e94:	4313      	orrs	r3, r2
 8006e96:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006e98:	e001      	b.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x562>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e9a:	7dfb      	ldrb	r3, [r7, #23]
 8006e9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	f000 808a 	beq.w	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x684>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006eac:	4b0a      	ldr	r3, [pc, #40]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a09      	ldr	r2, [pc, #36]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8006eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006eb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006eb8:	f7fa fed0 	bl	8001c5c <HAL_GetTick>
 8006ebc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ebe:	e00d      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ec0:	f7fa fecc 	bl	8001c5c <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	2b64      	cmp	r3, #100	; 0x64
 8006ecc:	d906      	bls.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        ret = HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	75fb      	strb	r3, [r7, #23]
        break;
 8006ed2:	e009      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8006ed4:	58024400 	.word	0x58024400
 8006ed8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006edc:	4bba      	ldr	r3, [pc, #744]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x88c>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d0eb      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      }
    }

    if(ret == HAL_OK)
 8006ee8:	7dfb      	ldrb	r3, [r7, #23]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d166      	bne.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006eee:	4bb7      	ldr	r3, [pc, #732]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006ef0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ef8:	4053      	eors	r3, r2
 8006efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d013      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f02:	4bb2      	ldr	r3, [pc, #712]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f0a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f0c:	4baf      	ldr	r3, [pc, #700]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f10:	4aae      	ldr	r2, [pc, #696]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f16:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f18:	4bac      	ldr	r3, [pc, #688]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f1c:	4aab      	ldr	r2, [pc, #684]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f22:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006f24:	4aa9      	ldr	r2, [pc, #676]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f34:	d115      	bne.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x626>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f36:	f7fa fe91 	bl	8001c5c <HAL_GetTick>
 8006f3a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f3c:	e00b      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f3e:	f7fa fe8d 	bl	8001c5c <HAL_GetTick>
 8006f42:	4602      	mov	r2, r0
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d902      	bls.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x61a>
          {
            ret = HAL_TIMEOUT;
 8006f50:	2303      	movs	r3, #3
 8006f52:	75fb      	strb	r3, [r7, #23]
            break;
 8006f54:	e005      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x626>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f56:	4b9d      	ldr	r3, [pc, #628]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f5a:	f003 0302 	and.w	r3, r3, #2
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d0ed      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x602>
          }
        }
      }

      if(ret == HAL_OK)
 8006f62:	7dfb      	ldrb	r3, [r7, #23]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d126      	bne.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f76:	d10d      	bne.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x658>
 8006f78:	4b94      	ldr	r3, [pc, #592]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f86:	0919      	lsrs	r1, r3, #4
 8006f88:	4b91      	ldr	r3, [pc, #580]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8006f8a:	400b      	ands	r3, r1
 8006f8c:	498f      	ldr	r1, [pc, #572]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	610b      	str	r3, [r1, #16]
 8006f92:	e005      	b.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006f94:	4b8d      	ldr	r3, [pc, #564]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f96:	691b      	ldr	r3, [r3, #16]
 8006f98:	4a8c      	ldr	r2, [pc, #560]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f9a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006f9e:	6113      	str	r3, [r2, #16]
 8006fa0:	4b8a      	ldr	r3, [pc, #552]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006fa2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006faa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fae:	4987      	ldr	r1, [pc, #540]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	670b      	str	r3, [r1, #112]	; 0x70
 8006fb4:	e004      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x684>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006fb6:	7dfb      	ldrb	r3, [r7, #23]
 8006fb8:	75bb      	strb	r3, [r7, #22]
 8006fba:	e001      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x684>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fbc:	7dfb      	ldrb	r3, [r7, #23]
 8006fbe:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0301 	and.w	r3, r3, #1
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d07f      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x790>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fd2:	2b28      	cmp	r3, #40	; 0x28
 8006fd4:	d866      	bhi.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x768>
 8006fd6:	a201      	add	r2, pc, #4	; (adr r2, 8006fdc <HAL_RCCEx_PeriphCLKConfig+0x6a0>)
 8006fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fdc:	080070ab 	.word	0x080070ab
 8006fe0:	080070a5 	.word	0x080070a5
 8006fe4:	080070a5 	.word	0x080070a5
 8006fe8:	080070a5 	.word	0x080070a5
 8006fec:	080070a5 	.word	0x080070a5
 8006ff0:	080070a5 	.word	0x080070a5
 8006ff4:	080070a5 	.word	0x080070a5
 8006ff8:	080070a5 	.word	0x080070a5
 8006ffc:	08007081 	.word	0x08007081
 8007000:	080070a5 	.word	0x080070a5
 8007004:	080070a5 	.word	0x080070a5
 8007008:	080070a5 	.word	0x080070a5
 800700c:	080070a5 	.word	0x080070a5
 8007010:	080070a5 	.word	0x080070a5
 8007014:	080070a5 	.word	0x080070a5
 8007018:	080070a5 	.word	0x080070a5
 800701c:	08007093 	.word	0x08007093
 8007020:	080070a5 	.word	0x080070a5
 8007024:	080070a5 	.word	0x080070a5
 8007028:	080070a5 	.word	0x080070a5
 800702c:	080070a5 	.word	0x080070a5
 8007030:	080070a5 	.word	0x080070a5
 8007034:	080070a5 	.word	0x080070a5
 8007038:	080070a5 	.word	0x080070a5
 800703c:	080070ab 	.word	0x080070ab
 8007040:	080070a5 	.word	0x080070a5
 8007044:	080070a5 	.word	0x080070a5
 8007048:	080070a5 	.word	0x080070a5
 800704c:	080070a5 	.word	0x080070a5
 8007050:	080070a5 	.word	0x080070a5
 8007054:	080070a5 	.word	0x080070a5
 8007058:	080070a5 	.word	0x080070a5
 800705c:	080070ab 	.word	0x080070ab
 8007060:	080070a5 	.word	0x080070a5
 8007064:	080070a5 	.word	0x080070a5
 8007068:	080070a5 	.word	0x080070a5
 800706c:	080070a5 	.word	0x080070a5
 8007070:	080070a5 	.word	0x080070a5
 8007074:	080070a5 	.word	0x080070a5
 8007078:	080070a5 	.word	0x080070a5
 800707c:	080070ab 	.word	0x080070ab
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	3304      	adds	r3, #4
 8007084:	2101      	movs	r1, #1
 8007086:	4618      	mov	r0, r3
 8007088:	f001 f92c 	bl	80082e4 <RCCEx_PLL2_Config>
 800708c:	4603      	mov	r3, r0
 800708e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007090:	e00c      	b.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x770>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	3324      	adds	r3, #36	; 0x24
 8007096:	2101      	movs	r1, #1
 8007098:	4618      	mov	r0, r3
 800709a:	f001 f9d5 	bl	8008448 <RCCEx_PLL3_Config>
 800709e:	4603      	mov	r3, r0
 80070a0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80070a2:	e003      	b.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x770>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	75fb      	strb	r3, [r7, #23]
      break;
 80070a8:	e000      	b.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x770>
      break;
 80070aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070ac:	7dfb      	ldrb	r3, [r7, #23]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10a      	bne.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x78c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80070b2:	4b46      	ldr	r3, [pc, #280]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80070b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070c0:	4942      	ldr	r1, [pc, #264]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80070c2:	4313      	orrs	r3, r2
 80070c4:	654b      	str	r3, [r1, #84]	; 0x54
 80070c6:	e001      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x790>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c8:	7dfb      	ldrb	r3, [r7, #23]
 80070ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0302 	and.w	r3, r3, #2
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d038      	beq.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x80e>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070dc:	2b05      	cmp	r3, #5
 80070de:	d821      	bhi.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
 80070e0:	a201      	add	r2, pc, #4	; (adr r2, 80070e8 <HAL_RCCEx_PeriphCLKConfig+0x7ac>)
 80070e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e6:	bf00      	nop
 80070e8:	0800712b 	.word	0x0800712b
 80070ec:	08007101 	.word	0x08007101
 80070f0:	08007113 	.word	0x08007113
 80070f4:	0800712b 	.word	0x0800712b
 80070f8:	0800712b 	.word	0x0800712b
 80070fc:	0800712b 	.word	0x0800712b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	3304      	adds	r3, #4
 8007104:	2101      	movs	r1, #1
 8007106:	4618      	mov	r0, r3
 8007108:	f001 f8ec 	bl	80082e4 <RCCEx_PLL2_Config>
 800710c:	4603      	mov	r3, r0
 800710e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007110:	e00c      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x7f0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	3324      	adds	r3, #36	; 0x24
 8007116:	2101      	movs	r1, #1
 8007118:	4618      	mov	r0, r3
 800711a:	f001 f995 	bl	8008448 <RCCEx_PLL3_Config>
 800711e:	4603      	mov	r3, r0
 8007120:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007122:	e003      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	75fb      	strb	r3, [r7, #23]
      break;
 8007128:	e000      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      break;
 800712a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800712c:	7dfb      	ldrb	r3, [r7, #23]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d109      	bne.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007132:	4b26      	ldr	r3, [pc, #152]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8007134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007136:	f023 0207 	bic.w	r2, r3, #7
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800713e:	4923      	ldr	r1, [pc, #140]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8007140:	4313      	orrs	r3, r2
 8007142:	654b      	str	r3, [r1, #84]	; 0x54
 8007144:	e001      	b.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x80e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007146:	7dfb      	ldrb	r3, [r7, #23]
 8007148:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 0304 	and.w	r3, r3, #4
 8007152:	2b00      	cmp	r3, #0
 8007154:	d040      	beq.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x89c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800715c:	2b05      	cmp	r3, #5
 800715e:	d821      	bhi.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x868>
 8007160:	a201      	add	r2, pc, #4	; (adr r2, 8007168 <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 8007162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007166:	bf00      	nop
 8007168:	080071ab 	.word	0x080071ab
 800716c:	08007181 	.word	0x08007181
 8007170:	08007193 	.word	0x08007193
 8007174:	080071ab 	.word	0x080071ab
 8007178:	080071ab 	.word	0x080071ab
 800717c:	080071ab 	.word	0x080071ab
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	3304      	adds	r3, #4
 8007184:	2101      	movs	r1, #1
 8007186:	4618      	mov	r0, r3
 8007188:	f001 f8ac 	bl	80082e4 <RCCEx_PLL2_Config>
 800718c:	4603      	mov	r3, r0
 800718e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007190:	e00c      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x870>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	3324      	adds	r3, #36	; 0x24
 8007196:	2101      	movs	r1, #1
 8007198:	4618      	mov	r0, r3
 800719a:	f001 f955 	bl	8008448 <RCCEx_PLL3_Config>
 800719e:	4603      	mov	r3, r0
 80071a0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80071a2:	e003      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x870>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	75fb      	strb	r3, [r7, #23]
      break;
 80071a8:	e000      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x870>
      break;
 80071aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071ac:	7dfb      	ldrb	r3, [r7, #23]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d110      	bne.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x898>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80071b2:	4b06      	ldr	r3, [pc, #24]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80071b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071b6:	f023 0207 	bic.w	r2, r3, #7
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071c0:	4902      	ldr	r1, [pc, #8]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80071c2:	4313      	orrs	r3, r2
 80071c4:	658b      	str	r3, [r1, #88]	; 0x58
 80071c6:	e007      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 80071c8:	58024800 	.word	0x58024800
 80071cc:	58024400 	.word	0x58024400
 80071d0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071d4:	7dfb      	ldrb	r3, [r7, #23]
 80071d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0320 	and.w	r3, r3, #32
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d044      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071ee:	d01b      	beq.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80071f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071f4:	d805      	bhi.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d022      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x904>
 80071fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071fe:	d00a      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x8da>
 8007200:	e01b      	b.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8007202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007206:	d01d      	beq.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x908>
 8007208:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800720c:	d01c      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x90c>
 800720e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007212:	d01b      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x910>
 8007214:	e011      	b.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	3304      	adds	r3, #4
 800721a:	2100      	movs	r1, #0
 800721c:	4618      	mov	r0, r3
 800721e:	f001 f861 	bl	80082e4 <RCCEx_PLL2_Config>
 8007222:	4603      	mov	r3, r0
 8007224:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007226:	e012      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x912>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	3324      	adds	r3, #36	; 0x24
 800722c:	2102      	movs	r1, #2
 800722e:	4618      	mov	r0, r3
 8007230:	f001 f90a 	bl	8008448 <RCCEx_PLL3_Config>
 8007234:	4603      	mov	r3, r0
 8007236:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007238:	e009      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	75fb      	strb	r3, [r7, #23]
      break;
 800723e:	e006      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8007240:	bf00      	nop
 8007242:	e004      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8007244:	bf00      	nop
 8007246:	e002      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8007248:	bf00      	nop
 800724a:	e000      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 800724c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800724e:	7dfb      	ldrb	r3, [r7, #23]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d10a      	bne.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007254:	4bb3      	ldr	r3, [pc, #716]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007258:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007262:	49b0      	ldr	r1, [pc, #704]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007264:	4313      	orrs	r3, r2
 8007266:	654b      	str	r3, [r1, #84]	; 0x54
 8007268:	e001      	b.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x932>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800726a:	7dfb      	ldrb	r3, [r7, #23]
 800726c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007276:	2b00      	cmp	r3, #0
 8007278:	d044      	beq.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007280:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007284:	d01b      	beq.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x982>
 8007286:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800728a:	d805      	bhi.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800728c:	2b00      	cmp	r3, #0
 800728e:	d022      	beq.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x99a>
 8007290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007294:	d00a      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x970>
 8007296:	e01b      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x994>
 8007298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800729c:	d01d      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x99e>
 800729e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80072a2:	d01c      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80072a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072a8:	d01b      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 80072aa:	e011      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x994>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	3304      	adds	r3, #4
 80072b0:	2100      	movs	r1, #0
 80072b2:	4618      	mov	r0, r3
 80072b4:	f001 f816 	bl	80082e4 <RCCEx_PLL2_Config>
 80072b8:	4603      	mov	r3, r0
 80072ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80072bc:	e012      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	3324      	adds	r3, #36	; 0x24
 80072c2:	2102      	movs	r1, #2
 80072c4:	4618      	mov	r0, r3
 80072c6:	f001 f8bf 	bl	8008448 <RCCEx_PLL3_Config>
 80072ca:	4603      	mov	r3, r0
 80072cc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80072ce:	e009      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	75fb      	strb	r3, [r7, #23]
      break;
 80072d4:	e006      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 80072d6:	bf00      	nop
 80072d8:	e004      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 80072da:	bf00      	nop
 80072dc:	e002      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 80072de:	bf00      	nop
 80072e0:	e000      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 80072e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072e4:	7dfb      	ldrb	r3, [r7, #23]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d10a      	bne.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x9c4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80072ea:	4b8e      	ldr	r3, [pc, #568]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80072ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ee:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80072f8:	498a      	ldr	r1, [pc, #552]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80072fa:	4313      	orrs	r3, r2
 80072fc:	658b      	str	r3, [r1, #88]	; 0x58
 80072fe:	e001      	b.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007300:	7dfb      	ldrb	r3, [r7, #23]
 8007302:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800730c:	2b00      	cmp	r3, #0
 800730e:	d044      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007316:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800731a:	d01b      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0xa18>
 800731c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007320:	d805      	bhi.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8007322:	2b00      	cmp	r3, #0
 8007324:	d022      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800732a:	d00a      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800732c:	e01b      	b.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 800732e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007332:	d01d      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8007334:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007338:	d01c      	beq.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0xa38>
 800733a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800733e:	d01b      	beq.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 8007340:	e011      	b.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	3304      	adds	r3, #4
 8007346:	2100      	movs	r1, #0
 8007348:	4618      	mov	r0, r3
 800734a:	f000 ffcb 	bl	80082e4 <RCCEx_PLL2_Config>
 800734e:	4603      	mov	r3, r0
 8007350:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007352:	e012      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	3324      	adds	r3, #36	; 0x24
 8007358:	2102      	movs	r1, #2
 800735a:	4618      	mov	r0, r3
 800735c:	f001 f874 	bl	8008448 <RCCEx_PLL3_Config>
 8007360:	4603      	mov	r3, r0
 8007362:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007364:	e009      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	75fb      	strb	r3, [r7, #23]
      break;
 800736a:	e006      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 800736c:	bf00      	nop
 800736e:	e004      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 8007370:	bf00      	nop
 8007372:	e002      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 8007374:	bf00      	nop
 8007376:	e000      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 8007378:	bf00      	nop
    }

    if(ret == HAL_OK)
 800737a:	7dfb      	ldrb	r3, [r7, #23]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d10a      	bne.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007380:	4b68      	ldr	r3, [pc, #416]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007384:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800738e:	4965      	ldr	r1, [pc, #404]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007390:	4313      	orrs	r3, r2
 8007392:	658b      	str	r3, [r1, #88]	; 0x58
 8007394:	e001      	b.n	800739a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007396:	7dfb      	ldrb	r3, [r7, #23]
 8007398:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 0308 	and.w	r3, r3, #8
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d01a      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0xaa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073b0:	d10a      	bne.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	3324      	adds	r3, #36	; 0x24
 80073b6:	2102      	movs	r1, #2
 80073b8:	4618      	mov	r0, r3
 80073ba:	f001 f845 	bl	8008448 <RCCEx_PLL3_Config>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d001      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
        {
          status = HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80073c8:	4b56      	ldr	r3, [pc, #344]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80073ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073d6:	4953      	ldr	r1, [pc, #332]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80073d8:	4313      	orrs	r3, r2
 80073da:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0310 	and.w	r3, r3, #16
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d01a      	beq.n	800741e <HAL_RCCEx_PeriphCLKConfig+0xae2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80073ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073f2:	d10a      	bne.n	800740a <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	3324      	adds	r3, #36	; 0x24
 80073f8:	2102      	movs	r1, #2
 80073fa:	4618      	mov	r0, r3
 80073fc:	f001 f824 	bl	8008448 <RCCEx_PLL3_Config>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d001      	beq.n	800740a <HAL_RCCEx_PeriphCLKConfig+0xace>
      {
        status = HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800740a:	4b46      	ldr	r3, [pc, #280]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800740c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800740e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007418:	4942      	ldr	r1, [pc, #264]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800741a:	4313      	orrs	r3, r2
 800741c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007426:	2b00      	cmp	r3, #0
 8007428:	d030      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007434:	d00d      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0xb16>
 8007436:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800743a:	d016      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800743c:	2b00      	cmp	r3, #0
 800743e:	d111      	bne.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0xb28>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	3304      	adds	r3, #4
 8007444:	2100      	movs	r1, #0
 8007446:	4618      	mov	r0, r3
 8007448:	f000 ff4c 	bl	80082e4 <RCCEx_PLL2_Config>
 800744c:	4603      	mov	r3, r0
 800744e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007450:	e00c      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	3324      	adds	r3, #36	; 0x24
 8007456:	2102      	movs	r1, #2
 8007458:	4618      	mov	r0, r3
 800745a:	f000 fff5 	bl	8008448 <RCCEx_PLL3_Config>
 800745e:	4603      	mov	r3, r0
 8007460:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007462:	e003      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	75fb      	strb	r3, [r7, #23]
      break;
 8007468:	e000      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800746a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800746c:	7dfb      	ldrb	r3, [r7, #23]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10a      	bne.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007472:	4b2c      	ldr	r3, [pc, #176]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007476:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007480:	4928      	ldr	r1, [pc, #160]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007482:	4313      	orrs	r3, r2
 8007484:	658b      	str	r3, [r1, #88]	; 0x58
 8007486:	e001      	b.n	800748c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007488:	7dfb      	ldrb	r3, [r7, #23]
 800748a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007494:	2b00      	cmp	r3, #0
 8007496:	d02f      	beq.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800749e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074a2:	d00c      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80074a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80074a8:	d015      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0xb9a>
 80074aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074ae:	d10f      	bne.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0xb94>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074b0:	4b1c      	ldr	r3, [pc, #112]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80074b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b4:	4a1b      	ldr	r2, [pc, #108]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80074b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80074bc:	e00c      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	3324      	adds	r3, #36	; 0x24
 80074c2:	2101      	movs	r1, #1
 80074c4:	4618      	mov	r0, r3
 80074c6:	f000 ffbf 	bl	8008448 <RCCEx_PLL3_Config>
 80074ca:	4603      	mov	r3, r0
 80074cc:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80074ce:	e003      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	75fb      	strb	r3, [r7, #23]
      break;
 80074d4:	e000      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      break;
 80074d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074d8:	7dfb      	ldrb	r3, [r7, #23]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d10a      	bne.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80074de:	4b11      	ldr	r3, [pc, #68]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80074e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074ec:	490d      	ldr	r1, [pc, #52]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80074ee:	4313      	orrs	r3, r2
 80074f0:	654b      	str	r3, [r1, #84]	; 0x54
 80074f2:	e001      	b.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074f4:	7dfb      	ldrb	r3, [r7, #23]
 80074f6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d02c      	beq.n	800755e <HAL_RCCEx_PeriphCLKConfig+0xc22>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007508:	2b00      	cmp	r3, #0
 800750a:	d003      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 800750c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007510:	d00a      	beq.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8007512:	e012      	b.n	800753a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007514:	4b03      	ldr	r3, [pc, #12]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007518:	4a02      	ldr	r2, [pc, #8]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800751a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800751e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007520:	e00e      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0xc04>
 8007522:	bf00      	nop
 8007524:	58024400 	.word	0x58024400

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	3304      	adds	r3, #4
 800752c:	2102      	movs	r1, #2
 800752e:	4618      	mov	r0, r3
 8007530:	f000 fed8 	bl	80082e4 <RCCEx_PLL2_Config>
 8007534:	4603      	mov	r3, r0
 8007536:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007538:	e002      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0xc04>

    default:
      ret = HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	75fb      	strb	r3, [r7, #23]
      break;
 800753e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007540:	7dfb      	ldrb	r3, [r7, #23]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d109      	bne.n	800755a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007546:	4b56      	ldr	r3, [pc, #344]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800754a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007552:	4953      	ldr	r1, [pc, #332]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007554:	4313      	orrs	r3, r2
 8007556:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007558:	e001      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800755a:	7dfb      	ldrb	r3, [r7, #23]
 800755c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00a      	beq.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0xc44>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	3324      	adds	r3, #36	; 0x24
 800756e:	2102      	movs	r1, #2
 8007570:	4618      	mov	r0, r3
 8007572:	f000 ff69 	bl	8008448 <RCCEx_PLL3_Config>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d001      	beq.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0xc44>
    {
      status=HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007588:	2b00      	cmp	r3, #0
 800758a:	d031      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007596:	d00c      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8007598:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800759c:	d802      	bhi.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d011      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0xc8a>
 80075a2:	e00d      	b.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80075a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075a8:	d00f      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0xc8e>
 80075aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075ae:	d00e      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80075b0:	e006      	b.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075b2:	4b3b      	ldr	r3, [pc, #236]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80075b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b6:	4a3a      	ldr	r2, [pc, #232]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80075b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80075be:	e007      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	75fb      	strb	r3, [r7, #23]
      break;
 80075c4:	e004      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 80075c6:	bf00      	nop
 80075c8:	e002      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 80075ca:	bf00      	nop
 80075cc:	e000      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 80075ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075d0:	7dfb      	ldrb	r3, [r7, #23]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d10a      	bne.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80075d6:	4b32      	ldr	r3, [pc, #200]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80075d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075e4:	492e      	ldr	r1, [pc, #184]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80075e6:	4313      	orrs	r3, r2
 80075e8:	654b      	str	r3, [r1, #84]	; 0x54
 80075ea:	e001      	b.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ec:	7dfb      	ldrb	r3, [r7, #23]
 80075ee:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d008      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80075fc:	4b28      	ldr	r3, [pc, #160]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80075fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007600:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007608:	4925      	ldr	r1, [pc, #148]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800760a:	4313      	orrs	r3, r2
 800760c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d008      	beq.n	800762c <HAL_RCCEx_PeriphCLKConfig+0xcf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800761a:	4b21      	ldr	r3, [pc, #132]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800761c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800761e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007626:	491e      	ldr	r1, [pc, #120]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007628:	4313      	orrs	r3, r2
 800762a:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007634:	2b00      	cmp	r3, #0
 8007636:	d008      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007638:	4b19      	ldr	r3, [pc, #100]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800763a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800763c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007644:	4916      	ldr	r1, [pc, #88]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007646:	4313      	orrs	r3, r2
 8007648:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00d      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0xd36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007656:	4b12      	ldr	r3, [pc, #72]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	4a11      	ldr	r2, [pc, #68]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800765c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007660:	6113      	str	r3, [r2, #16]
 8007662:	4b0f      	ldr	r3, [pc, #60]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007664:	691a      	ldr	r2, [r3, #16]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800766c:	490c      	ldr	r1, [pc, #48]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800766e:	4313      	orrs	r3, r2
 8007670:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	da08      	bge.n	800768c <HAL_RCCEx_PeriphCLKConfig+0xd50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800767a:	4b09      	ldr	r3, [pc, #36]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800767c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800767e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007686:	4906      	ldr	r1, [pc, #24]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007688:	4313      	orrs	r3, r2
 800768a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800768c:	7dbb      	ldrb	r3, [r7, #22]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d101      	bne.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    return HAL_OK;
 8007692:	2300      	movs	r3, #0
 8007694:	e000      	b.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
  }
  return HAL_ERROR;
 8007696:	2301      	movs	r3, #1
}
 8007698:	4618      	mov	r0, r3
 800769a:	3718      	adds	r7, #24
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	58024400 	.word	0x58024400

080076a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b090      	sub	sp, #64	; 0x40
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076b2:	d150      	bne.n	8007756 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80076b4:	4ba1      	ldr	r3, [pc, #644]	; (800793c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80076b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076b8:	f003 0307 	and.w	r3, r3, #7
 80076bc:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80076be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c0:	2b04      	cmp	r3, #4
 80076c2:	d844      	bhi.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 80076c4:	a201      	add	r2, pc, #4	; (adr r2, 80076cc <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80076c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ca:	bf00      	nop
 80076cc:	080076e1 	.word	0x080076e1
 80076d0:	080076f1 	.word	0x080076f1
 80076d4:	08007701 	.word	0x08007701
 80076d8:	08007749 	.word	0x08007749
 80076dc:	08007711 	.word	0x08007711
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076e4:	4618      	mov	r0, r3
 80076e6:	f000 fcb1 	bl	800804c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076ee:	e1ef      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076f0:	f107 0318 	add.w	r3, r7, #24
 80076f4:	4618      	mov	r0, r3
 80076f6:	f000 fa11 	bl	8007b1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076fe:	e1e7      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007700:	f107 030c 	add.w	r3, r7, #12
 8007704:	4618      	mov	r0, r3
 8007706:	f000 fb55 	bl	8007db4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800770e:	e1df      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007710:	4b8a      	ldr	r3, [pc, #552]	; (800793c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007714:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007718:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800771a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800771c:	2b00      	cmp	r3, #0
 800771e:	d102      	bne.n	8007726 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007720:	4b87      	ldr	r3, [pc, #540]	; (8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007722:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007724:	e1d4      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007728:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800772c:	d102      	bne.n	8007734 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800772e:	4b85      	ldr	r3, [pc, #532]	; (8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007730:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007732:	e1cd      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007736:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800773a:	d102      	bne.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 800773c:	4b82      	ldr	r3, [pc, #520]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800773e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007740:	e1c6      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 8007742:	2300      	movs	r3, #0
 8007744:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007746:	e1c3      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007748:	4b80      	ldr	r3, [pc, #512]	; (800794c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800774a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800774c:	e1c0      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      default :
        {
          frequency = 0;
 800774e:	2300      	movs	r3, #0
 8007750:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007752:	bf00      	nop
 8007754:	e1bc      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800775c:	d14f      	bne.n	80077fe <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 800775e:	4b77      	ldr	r3, [pc, #476]	; (800793c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007762:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007766:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776a:	2b80      	cmp	r3, #128	; 0x80
 800776c:	d01c      	beq.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800776e:	2b80      	cmp	r3, #128	; 0x80
 8007770:	d804      	bhi.n	800777c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007772:	2b00      	cmp	r3, #0
 8007774:	d008      	beq.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8007776:	2b40      	cmp	r3, #64	; 0x40
 8007778:	d00e      	beq.n	8007798 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800777a:	e03c      	b.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800777c:	2bc0      	cmp	r3, #192	; 0xc0
 800777e:	d037      	beq.n	80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007784:	d018      	beq.n	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8007786:	e036      	b.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800778c:	4618      	mov	r0, r3
 800778e:	f000 fc5d 	bl	800804c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007794:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007796:	e19b      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007798:	f107 0318 	add.w	r3, r7, #24
 800779c:	4618      	mov	r0, r3
 800779e:	f000 f9bd 	bl	8007b1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077a6:	e193      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077a8:	f107 030c 	add.w	r3, r7, #12
 80077ac:	4618      	mov	r0, r3
 80077ae:	f000 fb01 	bl	8007db4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077b6:	e18b      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80077b8:	4b60      	ldr	r3, [pc, #384]	; (800793c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80077ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80077c0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80077c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d102      	bne.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80077c8:	4b5d      	ldr	r3, [pc, #372]	; (8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80077ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80077cc:	e180      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80077ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077d4:	d102      	bne.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 80077d6:	4b5b      	ldr	r3, [pc, #364]	; (8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80077d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077da:	e179      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80077dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077e2:	d102      	bne.n	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 80077e4:	4b58      	ldr	r3, [pc, #352]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80077e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077e8:	e172      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 80077ea:	2300      	movs	r3, #0
 80077ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077ee:	e16f      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80077f0:	4b56      	ldr	r3, [pc, #344]	; (800794c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80077f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077f4:	e16c      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 80077f6:	2300      	movs	r3, #0
 80077f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077fa:	bf00      	nop
 80077fc:	e168      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007804:	d153      	bne.n	80078ae <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8007806:	4b4d      	ldr	r3, [pc, #308]	; (800793c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800780a:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800780e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007816:	d01f      	beq.n	8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8007818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800781c:	d805      	bhi.n	800782a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00a      	beq.n	8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8007822:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007826:	d00f      	beq.n	8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8007828:	e03d      	b.n	80078a6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800782a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800782e:	d037      	beq.n	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8007830:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007834:	d018      	beq.n	8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8007836:	e036      	b.n	80078a6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800783c:	4618      	mov	r0, r3
 800783e:	f000 fc05 	bl	800804c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007844:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007846:	e143      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007848:	f107 0318 	add.w	r3, r7, #24
 800784c:	4618      	mov	r0, r3
 800784e:	f000 f965 	bl	8007b1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007856:	e13b      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007858:	f107 030c 	add.w	r3, r7, #12
 800785c:	4618      	mov	r0, r3
 800785e:	f000 faa9 	bl	8007db4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007866:	e133      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007868:	4b34      	ldr	r3, [pc, #208]	; (800793c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800786a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800786c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007870:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007874:	2b00      	cmp	r3, #0
 8007876:	d102      	bne.n	800787e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007878:	4b31      	ldr	r3, [pc, #196]	; (8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800787a:	63fb      	str	r3, [r7, #60]	; 0x3c
          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }
          break;
 800787c:	e128      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800787e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007880:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007884:	d102      	bne.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8007886:	4b2f      	ldr	r3, [pc, #188]	; (8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007888:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800788a:	e121      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800788c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800788e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007892:	d102      	bne.n	800789a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8007894:	4b2c      	ldr	r3, [pc, #176]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007896:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007898:	e11a      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 800789a:	2300      	movs	r3, #0
 800789c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800789e:	e117      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80078a0:	4b2a      	ldr	r3, [pc, #168]	; (800794c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80078a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078a4:	e114      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 80078a6:	2300      	movs	r3, #0
 80078a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078aa:	bf00      	nop
 80078ac:	e110      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078b4:	d15d      	bne.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80078b6:	4b21      	ldr	r3, [pc, #132]	; (800793c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80078b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078ba:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80078be:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80078c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078c6:	d01f      	beq.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80078c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078cc:	d805      	bhi.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00a      	beq.n	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80078d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078d6:	d00f      	beq.n	80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80078d8:	e047      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 80078da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80078de:	d041      	beq.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 80078e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078e4:	d018      	beq.n	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80078e6:	e040      	b.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078ec:	4618      	mov	r0, r3
 80078ee:	f000 fbad 	bl	800804c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80078f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078f6:	e0eb      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078f8:	f107 0318 	add.w	r3, r7, #24
 80078fc:	4618      	mov	r0, r3
 80078fe:	f000 f90d 	bl	8007b1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007906:	e0e3      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007908:	f107 030c 	add.w	r3, r7, #12
 800790c:	4618      	mov	r0, r3
 800790e:	f000 fa51 	bl	8007db4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007916:	e0db      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007918:	4b08      	ldr	r3, [pc, #32]	; (800793c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800791a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800791c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007920:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007924:	2b00      	cmp	r3, #0
 8007926:	d102      	bne.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007928:	4b05      	ldr	r3, [pc, #20]	; (8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800792a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800792c:	e0d0      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800792e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007930:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007934:	d10c      	bne.n	8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8007936:	4b03      	ldr	r3, [pc, #12]	; (8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007938:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800793a:	e0c9      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
 800793c:	58024400 	.word	0x58024400
 8007940:	03d09000 	.word	0x03d09000
 8007944:	003d0900 	.word	0x003d0900
 8007948:	007a1200 	.word	0x007a1200
 800794c:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007952:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007956:	d102      	bne.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8007958:	4b60      	ldr	r3, [pc, #384]	; (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 800795a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800795c:	e0b8      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 800795e:	2300      	movs	r3, #0
 8007960:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007962:	e0b5      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007964:	4b5e      	ldr	r3, [pc, #376]	; (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 8007966:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007968:	e0b2      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      default :
        {
          frequency = 0;
 800796a:	2300      	movs	r3, #0
 800796c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800796e:	bf00      	nop
 8007970:	e0ae      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007978:	d13d      	bne.n	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800797a:	4b5a      	ldr	r3, [pc, #360]	; (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 800797c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800797e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007982:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007986:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800798a:	d00c      	beq.n	80079a6 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800798c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007990:	d011      	beq.n	80079b6 <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 8007992:	2b00      	cmp	r3, #0
 8007994:	d12b      	bne.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007996:	f107 0318 	add.w	r3, r7, #24
 800799a:	4618      	mov	r0, r3
 800799c:	f000 f8be 	bl	8007b1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80079a0:	69bb      	ldr	r3, [r7, #24]
 80079a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079a4:	e094      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079a6:	f107 030c 	add.w	r3, r7, #12
 80079aa:	4618      	mov	r0, r3
 80079ac:	f000 fa02 	bl	8007db4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079b4:	e08c      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80079b6:	4b4b      	ldr	r3, [pc, #300]	; (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 80079b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80079be:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80079c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d102      	bne.n	80079cc <HAL_RCCEx_GetPeriphCLKFreq+0x328>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80079c6:	4b48      	ldr	r3, [pc, #288]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x444>)
 80079c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80079ca:	e081      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80079cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079d2:	d102      	bne.n	80079da <HAL_RCCEx_GetPeriphCLKFreq+0x336>
            frequency = CSI_VALUE;
 80079d4:	4b45      	ldr	r3, [pc, #276]	; (8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x448>)
 80079d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079d8:	e07a      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80079da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079e0:	d102      	bne.n	80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
            frequency = HSE_VALUE;
 80079e2:	4b3e      	ldr	r3, [pc, #248]	; (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80079e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079e6:	e073      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 80079e8:	2300      	movs	r3, #0
 80079ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079ec:	e070      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 80079ee:	2300      	movs	r3, #0
 80079f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079f2:	bf00      	nop
 80079f4:	e06c      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079fc:	d11f      	bne.n	8007a3e <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80079fe:	4b39      	ldr	r3, [pc, #228]	; (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8007a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a06:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d003      	beq.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a12:	d008      	beq.n	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
 8007a14:	e00f      	b.n	8007a36 <HAL_RCCEx_GetPeriphCLKFreq+0x392>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f000 fb16 	bl	800804c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a24:	e054      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a26:	f107 0318 	add.w	r3, r7, #24
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f000 f876 	bl	8007b1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007a30:	6a3b      	ldr	r3, [r7, #32]
 8007a32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a34:	e04c      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 8007a36:	2300      	movs	r3, #0
 8007a38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a3a:	bf00      	nop
 8007a3c:	e048      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a44:	d142      	bne.n	8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x428>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007a46:	4b27      	ldr	r3, [pc, #156]	; (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8007a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a4a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007a4e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007a56:	d029      	beq.n	8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x408>
 8007a58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007a5c:	d808      	bhi.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8007a5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a62:	d013      	beq.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007a64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a68:	d018      	beq.n	8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00a      	beq.n	8007a84 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 8007a6e:	e029      	b.n	8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 8007a70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a74:	d020      	beq.n	8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8007a76:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007a7a:	d020      	beq.n	8007abe <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 8007a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a80:	d017      	beq.n	8007ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8007a82:	e01f      	b.n	8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007a84:	f000 f834 	bl	8007af0 <HAL_RCCEx_GetD3PCLK1Freq>
 8007a88:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007a8a:	e021      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a8c:	f107 0318 	add.w	r3, r7, #24
 8007a90:	4618      	mov	r0, r3
 8007a92:	f000 f843 	bl	8007b1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a9a:	e019      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a9c:	f107 030c 	add.w	r3, r7, #12
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f000 f987 	bl	8007db4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007aaa:	e011      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8007aac:	4b0e      	ldr	r3, [pc, #56]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x444>)
 8007aae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ab0:	e00e      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8007ab2:	4b0e      	ldr	r3, [pc, #56]	; (8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x448>)
 8007ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ab6:	e00b      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8007ab8:	4b08      	ldr	r3, [pc, #32]	; (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8007aba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007abc:	e008      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007abe:	4b08      	ldr	r3, [pc, #32]	; (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 8007ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ac2:	e005      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ac8:	bf00      	nop
 8007aca:	e001      	b.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else
    {
      frequency = 0;
 8007acc:	2300      	movs	r3, #0
 8007ace:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3740      	adds	r7, #64	; 0x40
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	007a1200 	.word	0x007a1200
 8007ae0:	00bb8000 	.word	0x00bb8000
 8007ae4:	58024400 	.word	0x58024400
 8007ae8:	03d09000 	.word	0x03d09000
 8007aec:	003d0900 	.word	0x003d0900

08007af0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8007af4:	f7fe fec6 	bl	8006884 <HAL_RCC_GetHCLKFreq>
 8007af8:	4601      	mov	r1, r0
 8007afa:	4b06      	ldr	r3, [pc, #24]	; (8007b14 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007afc:	6a1b      	ldr	r3, [r3, #32]
 8007afe:	091b      	lsrs	r3, r3, #4
 8007b00:	f003 0307 	and.w	r3, r3, #7
 8007b04:	4a04      	ldr	r2, [pc, #16]	; (8007b18 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007b06:	5cd3      	ldrb	r3, [r2, r3]
 8007b08:	f003 031f 	and.w	r3, r3, #31
 8007b0c:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	58024400 	.word	0x58024400
 8007b18:	0800b45c 	.word	0x0800b45c

08007b1c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b089      	sub	sp, #36	; 0x24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b24:	4b9d      	ldr	r3, [pc, #628]	; (8007d9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b28:	f003 0303 	and.w	r3, r3, #3
 8007b2c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007b2e:	4b9b      	ldr	r3, [pc, #620]	; (8007d9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b32:	0b1b      	lsrs	r3, r3, #12
 8007b34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b38:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007b3a:	4b98      	ldr	r3, [pc, #608]	; (8007d9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3e:	091b      	lsrs	r3, r3, #4
 8007b40:	f003 0301 	and.w	r3, r3, #1
 8007b44:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007b46:	4b95      	ldr	r3, [pc, #596]	; (8007d9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b4a:	08db      	lsrs	r3, r3, #3
 8007b4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b50:	693a      	ldr	r2, [r7, #16]
 8007b52:	fb02 f303 	mul.w	r3, r2, r3
 8007b56:	ee07 3a90 	vmov	s15, r3
 8007b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f000 810a 	beq.w	8007d7e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d05a      	beq.n	8007c26 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d302      	bcc.n	8007b7a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d078      	beq.n	8007c6a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8007b78:	e099      	b.n	8007cae <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b7a:	4b88      	ldr	r3, [pc, #544]	; (8007d9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 0320 	and.w	r3, r3, #32
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d02d      	beq.n	8007be2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b86:	4b85      	ldr	r3, [pc, #532]	; (8007d9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	08db      	lsrs	r3, r3, #3
 8007b8c:	f003 0303 	and.w	r3, r3, #3
 8007b90:	4a83      	ldr	r2, [pc, #524]	; (8007da0 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007b92:	fa22 f303 	lsr.w	r3, r2, r3
 8007b96:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	ee07 3a90 	vmov	s15, r3
 8007b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	ee07 3a90 	vmov	s15, r3
 8007ba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bb0:	4b7a      	ldr	r3, [pc, #488]	; (8007d9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bb8:	ee07 3a90 	vmov	s15, r3
 8007bbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bc0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bc4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007da4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007bc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bdc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007be0:	e087      	b.n	8007cf2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	ee07 3a90 	vmov	s15, r3
 8007be8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bec:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007da8 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007bf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bf4:	4b69      	ldr	r3, [pc, #420]	; (8007d9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bfc:	ee07 3a90 	vmov	s15, r3
 8007c00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c04:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c08:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007da4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007c0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c20:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c24:	e065      	b.n	8007cf2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	ee07 3a90 	vmov	s15, r3
 8007c2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c30:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007c34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c38:	4b58      	ldr	r3, [pc, #352]	; (8007d9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c40:	ee07 3a90 	vmov	s15, r3
 8007c44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c48:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c4c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007da4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007c50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c64:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c68:	e043      	b.n	8007cf2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	ee07 3a90 	vmov	s15, r3
 8007c70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c74:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8007c78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c7c:	4b47      	ldr	r3, [pc, #284]	; (8007d9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c84:	ee07 3a90 	vmov	s15, r3
 8007c88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c90:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007da4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007c94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ca0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ca4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ca8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007cac:	e021      	b.n	8007cf2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	ee07 3a90 	vmov	s15, r3
 8007cb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cb8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007cbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cc0:	4b36      	ldr	r3, [pc, #216]	; (8007d9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cc8:	ee07 3a90 	vmov	s15, r3
 8007ccc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cd0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cd4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007da4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007cd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ce0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ce4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ce8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007cf0:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007cf2:	4b2a      	ldr	r3, [pc, #168]	; (8007d9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf6:	0a5b      	lsrs	r3, r3, #9
 8007cf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cfc:	ee07 3a90 	vmov	s15, r3
 8007d00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d18:	ee17 2a90 	vmov	r2, s15
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007d20:	4b1e      	ldr	r3, [pc, #120]	; (8007d9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d24:	0c1b      	lsrs	r3, r3, #16
 8007d26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d2a:	ee07 3a90 	vmov	s15, r3
 8007d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d46:	ee17 2a90 	vmov	r2, s15
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007d4e:	4b13      	ldr	r3, [pc, #76]	; (8007d9c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d52:	0e1b      	lsrs	r3, r3, #24
 8007d54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d58:	ee07 3a90 	vmov	s15, r3
 8007d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d68:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d74:	ee17 2a90 	vmov	r2, s15
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007d7c:	e008      	b.n	8007d90 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	609a      	str	r2, [r3, #8]
}
 8007d90:	bf00      	nop
 8007d92:	3724      	adds	r7, #36	; 0x24
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr
 8007d9c:	58024400 	.word	0x58024400
 8007da0:	03d09000 	.word	0x03d09000
 8007da4:	46000000 	.word	0x46000000
 8007da8:	4c742400 	.word	0x4c742400
 8007dac:	4a742400 	.word	0x4a742400
 8007db0:	4af42400 	.word	0x4af42400

08007db4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b089      	sub	sp, #36	; 0x24
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007dbc:	4b9d      	ldr	r3, [pc, #628]	; (8008034 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc0:	f003 0303 	and.w	r3, r3, #3
 8007dc4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007dc6:	4b9b      	ldr	r3, [pc, #620]	; (8008034 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dca:	0d1b      	lsrs	r3, r3, #20
 8007dcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007dd0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007dd2:	4b98      	ldr	r3, [pc, #608]	; (8008034 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd6:	0a1b      	lsrs	r3, r3, #8
 8007dd8:	f003 0301 	and.w	r3, r3, #1
 8007ddc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007dde:	4b95      	ldr	r3, [pc, #596]	; (8008034 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007de2:	08db      	lsrs	r3, r3, #3
 8007de4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007de8:	693a      	ldr	r2, [r7, #16]
 8007dea:	fb02 f303 	mul.w	r3, r2, r3
 8007dee:	ee07 3a90 	vmov	s15, r3
 8007df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007df6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f000 810a 	beq.w	8008016 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d05a      	beq.n	8007ebe <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d302      	bcc.n	8007e12 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8007e0c:	2b02      	cmp	r3, #2
 8007e0e:	d078      	beq.n	8007f02 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8007e10:	e099      	b.n	8007f46 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e12:	4b88      	ldr	r3, [pc, #544]	; (8008034 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 0320 	and.w	r3, r3, #32
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d02d      	beq.n	8007e7a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e1e:	4b85      	ldr	r3, [pc, #532]	; (8008034 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	08db      	lsrs	r3, r3, #3
 8007e24:	f003 0303 	and.w	r3, r3, #3
 8007e28:	4a83      	ldr	r2, [pc, #524]	; (8008038 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e2e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	ee07 3a90 	vmov	s15, r3
 8007e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	ee07 3a90 	vmov	s15, r3
 8007e40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e48:	4b7a      	ldr	r3, [pc, #488]	; (8008034 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e50:	ee07 3a90 	vmov	s15, r3
 8007e54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e58:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e5c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800803c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007e60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e74:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007e78:	e087      	b.n	8007f8a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	ee07 3a90 	vmov	s15, r3
 8007e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e84:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008040 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8007e88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e8c:	4b69      	ldr	r3, [pc, #420]	; (8008034 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e94:	ee07 3a90 	vmov	s15, r3
 8007e98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ea0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800803c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007ea4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ea8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007eb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eb8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ebc:	e065      	b.n	8007f8a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	ee07 3a90 	vmov	s15, r3
 8007ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ec8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007ecc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ed0:	4b58      	ldr	r3, [pc, #352]	; (8008034 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ed8:	ee07 3a90 	vmov	s15, r3
 8007edc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ee0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ee4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800803c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007ee8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ef0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ef4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007efc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f00:	e043      	b.n	8007f8a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	ee07 3a90 	vmov	s15, r3
 8007f08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f0c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008048 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8007f10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f14:	4b47      	ldr	r3, [pc, #284]	; (8008034 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f1c:	ee07 3a90 	vmov	s15, r3
 8007f20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f24:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f28:	eddf 5a44 	vldr	s11, [pc, #272]	; 800803c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007f2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f40:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f44:	e021      	b.n	8007f8a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	ee07 3a90 	vmov	s15, r3
 8007f4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f50:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008044 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007f54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f58:	4b36      	ldr	r3, [pc, #216]	; (8008034 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f60:	ee07 3a90 	vmov	s15, r3
 8007f64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f68:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f6c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800803c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007f70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f84:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f88:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007f8a:	4b2a      	ldr	r3, [pc, #168]	; (8008034 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8e:	0a5b      	lsrs	r3, r3, #9
 8007f90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f94:	ee07 3a90 	vmov	s15, r3
 8007f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fa0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fa4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fb0:	ee17 2a90 	vmov	r2, s15
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007fb8:	4b1e      	ldr	r3, [pc, #120]	; (8008034 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fbc:	0c1b      	lsrs	r3, r3, #16
 8007fbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fc2:	ee07 3a90 	vmov	s15, r3
 8007fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fde:	ee17 2a90 	vmov	r2, s15
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007fe6:	4b13      	ldr	r3, [pc, #76]	; (8008034 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fea:	0e1b      	lsrs	r3, r3, #24
 8007fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ff0:	ee07 3a90 	vmov	s15, r3
 8007ff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ff8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ffc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008000:	edd7 6a07 	vldr	s13, [r7, #28]
 8008004:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008008:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800800c:	ee17 2a90 	vmov	r2, s15
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008014:	e008      	b.n	8008028 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	609a      	str	r2, [r3, #8]
}
 8008028:	bf00      	nop
 800802a:	3724      	adds	r7, #36	; 0x24
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr
 8008034:	58024400 	.word	0x58024400
 8008038:	03d09000 	.word	0x03d09000
 800803c:	46000000 	.word	0x46000000
 8008040:	4c742400 	.word	0x4c742400
 8008044:	4a742400 	.word	0x4a742400
 8008048:	4af42400 	.word	0x4af42400

0800804c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800804c:	b480      	push	{r7}
 800804e:	b089      	sub	sp, #36	; 0x24
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008054:	4b9d      	ldr	r3, [pc, #628]	; (80082cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008058:	f003 0303 	and.w	r3, r3, #3
 800805c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800805e:	4b9b      	ldr	r3, [pc, #620]	; (80082cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008062:	091b      	lsrs	r3, r3, #4
 8008064:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008068:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800806a:	4b98      	ldr	r3, [pc, #608]	; (80082cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800806c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800806e:	f003 0301 	and.w	r3, r3, #1
 8008072:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008074:	4b95      	ldr	r3, [pc, #596]	; (80082cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008078:	08db      	lsrs	r3, r3, #3
 800807a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800807e:	693a      	ldr	r2, [r7, #16]
 8008080:	fb02 f303 	mul.w	r3, r2, r3
 8008084:	ee07 3a90 	vmov	s15, r3
 8008088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800808c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	2b00      	cmp	r3, #0
 8008094:	f000 810a 	beq.w	80082ac <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	2b01      	cmp	r3, #1
 800809c:	d05a      	beq.n	8008154 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d302      	bcc.n	80080a8 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 80080a2:	2b02      	cmp	r3, #2
 80080a4:	d078      	beq.n	8008198 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80080a6:	e099      	b.n	80081dc <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080a8:	4b88      	ldr	r3, [pc, #544]	; (80082cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f003 0320 	and.w	r3, r3, #32
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d02d      	beq.n	8008110 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80080b4:	4b85      	ldr	r3, [pc, #532]	; (80082cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	08db      	lsrs	r3, r3, #3
 80080ba:	f003 0303 	and.w	r3, r3, #3
 80080be:	4a84      	ldr	r2, [pc, #528]	; (80082d0 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 80080c0:	fa22 f303 	lsr.w	r3, r2, r3
 80080c4:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	ee07 3a90 	vmov	s15, r3
 80080cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	ee07 3a90 	vmov	s15, r3
 80080d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080de:	4b7b      	ldr	r3, [pc, #492]	; (80082cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80080e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080e6:	ee07 3a90 	vmov	s15, r3
 80080ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80080f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80082d4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80080f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800810a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800810e:	e087      	b.n	8008220 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	ee07 3a90 	vmov	s15, r3
 8008116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800811a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80082d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800811e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008122:	4b6a      	ldr	r3, [pc, #424]	; (80082cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800812a:	ee07 3a90 	vmov	s15, r3
 800812e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008132:	ed97 6a03 	vldr	s12, [r7, #12]
 8008136:	eddf 5a67 	vldr	s11, [pc, #412]	; 80082d4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800813a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800813e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800814a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800814e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008152:	e065      	b.n	8008220 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	ee07 3a90 	vmov	s15, r3
 800815a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800815e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80082dc <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008166:	4b59      	ldr	r3, [pc, #356]	; (80082cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800816a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800816e:	ee07 3a90 	vmov	s15, r3
 8008172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008176:	ed97 6a03 	vldr	s12, [r7, #12]
 800817a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80082d4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800817e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800818a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800818e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008192:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008196:	e043      	b.n	8008220 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	ee07 3a90 	vmov	s15, r3
 800819e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80082e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80081a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081aa:	4b48      	ldr	r3, [pc, #288]	; (80082cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80081ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081b2:	ee07 3a90 	vmov	s15, r3
 80081b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80081be:	eddf 5a45 	vldr	s11, [pc, #276]	; 80082d4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80081c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081da:	e021      	b.n	8008220 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	ee07 3a90 	vmov	s15, r3
 80081e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80082dc <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80081ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081ee:	4b37      	ldr	r3, [pc, #220]	; (80082cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80081f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081f6:	ee07 3a90 	vmov	s15, r3
 80081fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008202:	eddf 5a34 	vldr	s11, [pc, #208]	; 80082d4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800820a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800820e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800821a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800821e:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008220:	4b2a      	ldr	r3, [pc, #168]	; (80082cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008224:	0a5b      	lsrs	r3, r3, #9
 8008226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800822a:	ee07 3a90 	vmov	s15, r3
 800822e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008232:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008236:	ee37 7a87 	vadd.f32	s14, s15, s14
 800823a:	edd7 6a07 	vldr	s13, [r7, #28]
 800823e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008246:	ee17 2a90 	vmov	r2, s15
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800824e:	4b1f      	ldr	r3, [pc, #124]	; (80082cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008252:	0c1b      	lsrs	r3, r3, #16
 8008254:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008258:	ee07 3a90 	vmov	s15, r3
 800825c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008260:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008264:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008268:	edd7 6a07 	vldr	s13, [r7, #28]
 800826c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008270:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008274:	ee17 2a90 	vmov	r2, s15
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800827c:	4b13      	ldr	r3, [pc, #76]	; (80082cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800827e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008280:	0e1b      	lsrs	r3, r3, #24
 8008282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008286:	ee07 3a90 	vmov	s15, r3
 800828a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800828e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008292:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008296:	edd7 6a07 	vldr	s13, [r7, #28]
 800829a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800829e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082a2:	ee17 2a90 	vmov	r2, s15
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80082aa:	e008      	b.n	80082be <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	609a      	str	r2, [r3, #8]
}
 80082be:	bf00      	nop
 80082c0:	3724      	adds	r7, #36	; 0x24
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr
 80082ca:	bf00      	nop
 80082cc:	58024400 	.word	0x58024400
 80082d0:	03d09000 	.word	0x03d09000
 80082d4:	46000000 	.word	0x46000000
 80082d8:	4c742400 	.word	0x4c742400
 80082dc:	4a742400 	.word	0x4a742400
 80082e0:	4af42400 	.word	0x4af42400

080082e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80082ee:	2300      	movs	r3, #0
 80082f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80082f2:	4b53      	ldr	r3, [pc, #332]	; (8008440 <RCCEx_PLL2_Config+0x15c>)
 80082f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f6:	f003 0303 	and.w	r3, r3, #3
 80082fa:	2b03      	cmp	r3, #3
 80082fc:	d101      	bne.n	8008302 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	e099      	b.n	8008436 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008302:	4b4f      	ldr	r3, [pc, #316]	; (8008440 <RCCEx_PLL2_Config+0x15c>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a4e      	ldr	r2, [pc, #312]	; (8008440 <RCCEx_PLL2_Config+0x15c>)
 8008308:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800830c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800830e:	f7f9 fca5 	bl	8001c5c <HAL_GetTick>
 8008312:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008314:	e008      	b.n	8008328 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008316:	f7f9 fca1 	bl	8001c5c <HAL_GetTick>
 800831a:	4602      	mov	r2, r0
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	1ad3      	subs	r3, r2, r3
 8008320:	2b02      	cmp	r3, #2
 8008322:	d901      	bls.n	8008328 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008324:	2303      	movs	r3, #3
 8008326:	e086      	b.n	8008436 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008328:	4b45      	ldr	r3, [pc, #276]	; (8008440 <RCCEx_PLL2_Config+0x15c>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008330:	2b00      	cmp	r3, #0
 8008332:	d1f0      	bne.n	8008316 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008334:	4b42      	ldr	r3, [pc, #264]	; (8008440 <RCCEx_PLL2_Config+0x15c>)
 8008336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008338:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	031b      	lsls	r3, r3, #12
 8008342:	493f      	ldr	r1, [pc, #252]	; (8008440 <RCCEx_PLL2_Config+0x15c>)
 8008344:	4313      	orrs	r3, r2
 8008346:	628b      	str	r3, [r1, #40]	; 0x28
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	3b01      	subs	r3, #1
 800834e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	3b01      	subs	r3, #1
 8008358:	025b      	lsls	r3, r3, #9
 800835a:	b29b      	uxth	r3, r3
 800835c:	431a      	orrs	r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	3b01      	subs	r3, #1
 8008364:	041b      	lsls	r3, r3, #16
 8008366:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800836a:	431a      	orrs	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	3b01      	subs	r3, #1
 8008372:	061b      	lsls	r3, r3, #24
 8008374:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008378:	4931      	ldr	r1, [pc, #196]	; (8008440 <RCCEx_PLL2_Config+0x15c>)
 800837a:	4313      	orrs	r3, r2
 800837c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800837e:	4b30      	ldr	r3, [pc, #192]	; (8008440 <RCCEx_PLL2_Config+0x15c>)
 8008380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008382:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	695b      	ldr	r3, [r3, #20]
 800838a:	492d      	ldr	r1, [pc, #180]	; (8008440 <RCCEx_PLL2_Config+0x15c>)
 800838c:	4313      	orrs	r3, r2
 800838e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008390:	4b2b      	ldr	r3, [pc, #172]	; (8008440 <RCCEx_PLL2_Config+0x15c>)
 8008392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008394:	f023 0220 	bic.w	r2, r3, #32
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	699b      	ldr	r3, [r3, #24]
 800839c:	4928      	ldr	r1, [pc, #160]	; (8008440 <RCCEx_PLL2_Config+0x15c>)
 800839e:	4313      	orrs	r3, r2
 80083a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80083a2:	4b27      	ldr	r3, [pc, #156]	; (8008440 <RCCEx_PLL2_Config+0x15c>)
 80083a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a6:	4a26      	ldr	r2, [pc, #152]	; (8008440 <RCCEx_PLL2_Config+0x15c>)
 80083a8:	f023 0310 	bic.w	r3, r3, #16
 80083ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80083ae:	4b24      	ldr	r3, [pc, #144]	; (8008440 <RCCEx_PLL2_Config+0x15c>)
 80083b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083b2:	4b24      	ldr	r3, [pc, #144]	; (8008444 <RCCEx_PLL2_Config+0x160>)
 80083b4:	4013      	ands	r3, r2
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	69d2      	ldr	r2, [r2, #28]
 80083ba:	00d2      	lsls	r2, r2, #3
 80083bc:	4920      	ldr	r1, [pc, #128]	; (8008440 <RCCEx_PLL2_Config+0x15c>)
 80083be:	4313      	orrs	r3, r2
 80083c0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80083c2:	4b1f      	ldr	r3, [pc, #124]	; (8008440 <RCCEx_PLL2_Config+0x15c>)
 80083c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c6:	4a1e      	ldr	r2, [pc, #120]	; (8008440 <RCCEx_PLL2_Config+0x15c>)
 80083c8:	f043 0310 	orr.w	r3, r3, #16
 80083cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d106      	bne.n	80083e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80083d4:	4b1a      	ldr	r3, [pc, #104]	; (8008440 <RCCEx_PLL2_Config+0x15c>)
 80083d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d8:	4a19      	ldr	r2, [pc, #100]	; (8008440 <RCCEx_PLL2_Config+0x15c>)
 80083da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083e0:	e00f      	b.n	8008402 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d106      	bne.n	80083f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80083e8:	4b15      	ldr	r3, [pc, #84]	; (8008440 <RCCEx_PLL2_Config+0x15c>)
 80083ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ec:	4a14      	ldr	r2, [pc, #80]	; (8008440 <RCCEx_PLL2_Config+0x15c>)
 80083ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083f4:	e005      	b.n	8008402 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80083f6:	4b12      	ldr	r3, [pc, #72]	; (8008440 <RCCEx_PLL2_Config+0x15c>)
 80083f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fa:	4a11      	ldr	r2, [pc, #68]	; (8008440 <RCCEx_PLL2_Config+0x15c>)
 80083fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008400:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008402:	4b0f      	ldr	r3, [pc, #60]	; (8008440 <RCCEx_PLL2_Config+0x15c>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a0e      	ldr	r2, [pc, #56]	; (8008440 <RCCEx_PLL2_Config+0x15c>)
 8008408:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800840c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800840e:	f7f9 fc25 	bl	8001c5c <HAL_GetTick>
 8008412:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008414:	e008      	b.n	8008428 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008416:	f7f9 fc21 	bl	8001c5c <HAL_GetTick>
 800841a:	4602      	mov	r2, r0
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	1ad3      	subs	r3, r2, r3
 8008420:	2b02      	cmp	r3, #2
 8008422:	d901      	bls.n	8008428 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008424:	2303      	movs	r3, #3
 8008426:	e006      	b.n	8008436 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008428:	4b05      	ldr	r3, [pc, #20]	; (8008440 <RCCEx_PLL2_Config+0x15c>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008430:	2b00      	cmp	r3, #0
 8008432:	d0f0      	beq.n	8008416 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008434:	7bfb      	ldrb	r3, [r7, #15]
}
 8008436:	4618      	mov	r0, r3
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	58024400 	.word	0x58024400
 8008444:	ffff0007 	.word	0xffff0007

08008448 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008452:	2300      	movs	r3, #0
 8008454:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008456:	4b53      	ldr	r3, [pc, #332]	; (80085a4 <RCCEx_PLL3_Config+0x15c>)
 8008458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800845a:	f003 0303 	and.w	r3, r3, #3
 800845e:	2b03      	cmp	r3, #3
 8008460:	d101      	bne.n	8008466 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	e099      	b.n	800859a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008466:	4b4f      	ldr	r3, [pc, #316]	; (80085a4 <RCCEx_PLL3_Config+0x15c>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a4e      	ldr	r2, [pc, #312]	; (80085a4 <RCCEx_PLL3_Config+0x15c>)
 800846c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008470:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008472:	f7f9 fbf3 	bl	8001c5c <HAL_GetTick>
 8008476:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008478:	e008      	b.n	800848c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800847a:	f7f9 fbef 	bl	8001c5c <HAL_GetTick>
 800847e:	4602      	mov	r2, r0
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	1ad3      	subs	r3, r2, r3
 8008484:	2b02      	cmp	r3, #2
 8008486:	d901      	bls.n	800848c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008488:	2303      	movs	r3, #3
 800848a:	e086      	b.n	800859a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800848c:	4b45      	ldr	r3, [pc, #276]	; (80085a4 <RCCEx_PLL3_Config+0x15c>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008494:	2b00      	cmp	r3, #0
 8008496:	d1f0      	bne.n	800847a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008498:	4b42      	ldr	r3, [pc, #264]	; (80085a4 <RCCEx_PLL3_Config+0x15c>)
 800849a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800849c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	051b      	lsls	r3, r3, #20
 80084a6:	493f      	ldr	r1, [pc, #252]	; (80085a4 <RCCEx_PLL3_Config+0x15c>)
 80084a8:	4313      	orrs	r3, r2
 80084aa:	628b      	str	r3, [r1, #40]	; 0x28
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	3b01      	subs	r3, #1
 80084b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	3b01      	subs	r3, #1
 80084bc:	025b      	lsls	r3, r3, #9
 80084be:	b29b      	uxth	r3, r3
 80084c0:	431a      	orrs	r2, r3
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	3b01      	subs	r3, #1
 80084c8:	041b      	lsls	r3, r3, #16
 80084ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80084ce:	431a      	orrs	r2, r3
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	691b      	ldr	r3, [r3, #16]
 80084d4:	3b01      	subs	r3, #1
 80084d6:	061b      	lsls	r3, r3, #24
 80084d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80084dc:	4931      	ldr	r1, [pc, #196]	; (80085a4 <RCCEx_PLL3_Config+0x15c>)
 80084de:	4313      	orrs	r3, r2
 80084e0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80084e2:	4b30      	ldr	r3, [pc, #192]	; (80085a4 <RCCEx_PLL3_Config+0x15c>)
 80084e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	695b      	ldr	r3, [r3, #20]
 80084ee:	492d      	ldr	r1, [pc, #180]	; (80085a4 <RCCEx_PLL3_Config+0x15c>)
 80084f0:	4313      	orrs	r3, r2
 80084f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80084f4:	4b2b      	ldr	r3, [pc, #172]	; (80085a4 <RCCEx_PLL3_Config+0x15c>)
 80084f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	699b      	ldr	r3, [r3, #24]
 8008500:	4928      	ldr	r1, [pc, #160]	; (80085a4 <RCCEx_PLL3_Config+0x15c>)
 8008502:	4313      	orrs	r3, r2
 8008504:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008506:	4b27      	ldr	r3, [pc, #156]	; (80085a4 <RCCEx_PLL3_Config+0x15c>)
 8008508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800850a:	4a26      	ldr	r2, [pc, #152]	; (80085a4 <RCCEx_PLL3_Config+0x15c>)
 800850c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008510:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008512:	4b24      	ldr	r3, [pc, #144]	; (80085a4 <RCCEx_PLL3_Config+0x15c>)
 8008514:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008516:	4b24      	ldr	r3, [pc, #144]	; (80085a8 <RCCEx_PLL3_Config+0x160>)
 8008518:	4013      	ands	r3, r2
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	69d2      	ldr	r2, [r2, #28]
 800851e:	00d2      	lsls	r2, r2, #3
 8008520:	4920      	ldr	r1, [pc, #128]	; (80085a4 <RCCEx_PLL3_Config+0x15c>)
 8008522:	4313      	orrs	r3, r2
 8008524:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008526:	4b1f      	ldr	r3, [pc, #124]	; (80085a4 <RCCEx_PLL3_Config+0x15c>)
 8008528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852a:	4a1e      	ldr	r2, [pc, #120]	; (80085a4 <RCCEx_PLL3_Config+0x15c>)
 800852c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008530:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d106      	bne.n	8008546 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008538:	4b1a      	ldr	r3, [pc, #104]	; (80085a4 <RCCEx_PLL3_Config+0x15c>)
 800853a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800853c:	4a19      	ldr	r2, [pc, #100]	; (80085a4 <RCCEx_PLL3_Config+0x15c>)
 800853e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008542:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008544:	e00f      	b.n	8008566 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	2b01      	cmp	r3, #1
 800854a:	d106      	bne.n	800855a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800854c:	4b15      	ldr	r3, [pc, #84]	; (80085a4 <RCCEx_PLL3_Config+0x15c>)
 800854e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008550:	4a14      	ldr	r2, [pc, #80]	; (80085a4 <RCCEx_PLL3_Config+0x15c>)
 8008552:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008556:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008558:	e005      	b.n	8008566 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800855a:	4b12      	ldr	r3, [pc, #72]	; (80085a4 <RCCEx_PLL3_Config+0x15c>)
 800855c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855e:	4a11      	ldr	r2, [pc, #68]	; (80085a4 <RCCEx_PLL3_Config+0x15c>)
 8008560:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008564:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008566:	4b0f      	ldr	r3, [pc, #60]	; (80085a4 <RCCEx_PLL3_Config+0x15c>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a0e      	ldr	r2, [pc, #56]	; (80085a4 <RCCEx_PLL3_Config+0x15c>)
 800856c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008570:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008572:	f7f9 fb73 	bl	8001c5c <HAL_GetTick>
 8008576:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008578:	e008      	b.n	800858c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800857a:	f7f9 fb6f 	bl	8001c5c <HAL_GetTick>
 800857e:	4602      	mov	r2, r0
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	1ad3      	subs	r3, r2, r3
 8008584:	2b02      	cmp	r3, #2
 8008586:	d901      	bls.n	800858c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008588:	2303      	movs	r3, #3
 800858a:	e006      	b.n	800859a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800858c:	4b05      	ldr	r3, [pc, #20]	; (80085a4 <RCCEx_PLL3_Config+0x15c>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008594:	2b00      	cmp	r3, #0
 8008596:	d0f0      	beq.n	800857a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008598:	7bfb      	ldrb	r3, [r7, #15]
}
 800859a:	4618      	mov	r0, r3
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	58024400 	.word	0x58024400
 80085a8:	ffff0007 	.word	0xffff0007

080085ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d101      	bne.n	80085be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	e049      	b.n	8008652 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d106      	bne.n	80085d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f7f9 f80e 	bl	80015f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2202      	movs	r2, #2
 80085dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	3304      	adds	r3, #4
 80085e8:	4619      	mov	r1, r3
 80085ea:	4610      	mov	r0, r2
 80085ec:	f000 fa24 	bl	8008a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3708      	adds	r7, #8
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
	...

0800865c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800865c:	b480      	push	{r7}
 800865e:	b085      	sub	sp, #20
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800866a:	b2db      	uxtb	r3, r3
 800866c:	2b01      	cmp	r3, #1
 800866e:	d001      	beq.n	8008674 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	e019      	b.n	80086a8 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2202      	movs	r2, #2
 8008678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	689a      	ldr	r2, [r3, #8]
 8008682:	4b0c      	ldr	r3, [pc, #48]	; (80086b4 <HAL_TIM_Base_Start+0x58>)
 8008684:	4013      	ands	r3, r2
 8008686:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2b06      	cmp	r3, #6
 800868c:	d00b      	beq.n	80086a6 <HAL_TIM_Base_Start+0x4a>
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008694:	d007      	beq.n	80086a6 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f042 0201 	orr.w	r2, r2, #1
 80086a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3714      	adds	r7, #20
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr
 80086b4:	00010007 	.word	0x00010007

080086b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b085      	sub	sp, #20
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d001      	beq.n	80086d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	e021      	b.n	8008714 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2202      	movs	r2, #2
 80086d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	68da      	ldr	r2, [r3, #12]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f042 0201 	orr.w	r2, r2, #1
 80086e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	689a      	ldr	r2, [r3, #8]
 80086ee:	4b0c      	ldr	r3, [pc, #48]	; (8008720 <HAL_TIM_Base_Start_IT+0x68>)
 80086f0:	4013      	ands	r3, r2
 80086f2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2b06      	cmp	r3, #6
 80086f8:	d00b      	beq.n	8008712 <HAL_TIM_Base_Start_IT+0x5a>
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008700:	d007      	beq.n	8008712 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f042 0201 	orr.w	r2, r2, #1
 8008710:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008712:	2300      	movs	r3, #0
}
 8008714:	4618      	mov	r0, r3
 8008716:	3714      	adds	r7, #20
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr
 8008720:	00010007 	.word	0x00010007

08008724 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	f003 0302 	and.w	r3, r3, #2
 8008736:	2b02      	cmp	r3, #2
 8008738:	d122      	bne.n	8008780 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	f003 0302 	and.w	r3, r3, #2
 8008744:	2b02      	cmp	r3, #2
 8008746:	d11b      	bne.n	8008780 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f06f 0202 	mvn.w	r2, #2
 8008750:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2201      	movs	r2, #1
 8008756:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	699b      	ldr	r3, [r3, #24]
 800875e:	f003 0303 	and.w	r3, r3, #3
 8008762:	2b00      	cmp	r3, #0
 8008764:	d003      	beq.n	800876e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f947 	bl	80089fa <HAL_TIM_IC_CaptureCallback>
 800876c:	e005      	b.n	800877a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 f939 	bl	80089e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 f94a 	bl	8008a0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	f003 0304 	and.w	r3, r3, #4
 800878a:	2b04      	cmp	r3, #4
 800878c:	d122      	bne.n	80087d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	f003 0304 	and.w	r3, r3, #4
 8008798:	2b04      	cmp	r3, #4
 800879a:	d11b      	bne.n	80087d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f06f 0204 	mvn.w	r2, #4
 80087a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2202      	movs	r2, #2
 80087aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	699b      	ldr	r3, [r3, #24]
 80087b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d003      	beq.n	80087c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f91d 	bl	80089fa <HAL_TIM_IC_CaptureCallback>
 80087c0:	e005      	b.n	80087ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 f90f 	bl	80089e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 f920 	bl	8008a0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	f003 0308 	and.w	r3, r3, #8
 80087de:	2b08      	cmp	r3, #8
 80087e0:	d122      	bne.n	8008828 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	f003 0308 	and.w	r3, r3, #8
 80087ec:	2b08      	cmp	r3, #8
 80087ee:	d11b      	bne.n	8008828 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f06f 0208 	mvn.w	r2, #8
 80087f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2204      	movs	r2, #4
 80087fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	69db      	ldr	r3, [r3, #28]
 8008806:	f003 0303 	and.w	r3, r3, #3
 800880a:	2b00      	cmp	r3, #0
 800880c:	d003      	beq.n	8008816 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 f8f3 	bl	80089fa <HAL_TIM_IC_CaptureCallback>
 8008814:	e005      	b.n	8008822 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f8e5 	bl	80089e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 f8f6 	bl	8008a0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	691b      	ldr	r3, [r3, #16]
 800882e:	f003 0310 	and.w	r3, r3, #16
 8008832:	2b10      	cmp	r3, #16
 8008834:	d122      	bne.n	800887c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	f003 0310 	and.w	r3, r3, #16
 8008840:	2b10      	cmp	r3, #16
 8008842:	d11b      	bne.n	800887c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f06f 0210 	mvn.w	r2, #16
 800884c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2208      	movs	r2, #8
 8008852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	69db      	ldr	r3, [r3, #28]
 800885a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800885e:	2b00      	cmp	r3, #0
 8008860:	d003      	beq.n	800886a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 f8c9 	bl	80089fa <HAL_TIM_IC_CaptureCallback>
 8008868:	e005      	b.n	8008876 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f8bb 	bl	80089e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 f8cc 	bl	8008a0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	f003 0301 	and.w	r3, r3, #1
 8008886:	2b01      	cmp	r3, #1
 8008888:	d10e      	bne.n	80088a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	f003 0301 	and.w	r3, r3, #1
 8008894:	2b01      	cmp	r3, #1
 8008896:	d107      	bne.n	80088a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f06f 0201 	mvn.w	r2, #1
 80088a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f7f8 fbc0 	bl	8001028 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088b2:	2b80      	cmp	r3, #128	; 0x80
 80088b4:	d10e      	bne.n	80088d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088c0:	2b80      	cmp	r3, #128	; 0x80
 80088c2:	d107      	bne.n	80088d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80088cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 fb28 	bl	8008f24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	691b      	ldr	r3, [r3, #16]
 80088da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088e2:	d10e      	bne.n	8008902 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ee:	2b80      	cmp	r3, #128	; 0x80
 80088f0:	d107      	bne.n	8008902 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80088fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 fb1b 	bl	8008f38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800890c:	2b40      	cmp	r3, #64	; 0x40
 800890e:	d10e      	bne.n	800892e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800891a:	2b40      	cmp	r3, #64	; 0x40
 800891c:	d107      	bne.n	800892e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 f87a 	bl	8008a22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	f003 0320 	and.w	r3, r3, #32
 8008938:	2b20      	cmp	r3, #32
 800893a:	d10e      	bne.n	800895a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	f003 0320 	and.w	r3, r3, #32
 8008946:	2b20      	cmp	r3, #32
 8008948:	d107      	bne.n	800895a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f06f 0220 	mvn.w	r2, #32
 8008952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 fadb 	bl	8008f10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800895a:	bf00      	nop
 800895c:	3708      	adds	r7, #8
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b082      	sub	sp, #8
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
 800896a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008972:	2b01      	cmp	r3, #1
 8008974:	d101      	bne.n	800897a <HAL_TIM_SlaveConfigSynchro+0x18>
 8008976:	2302      	movs	r3, #2
 8008978:	e031      	b.n	80089de <HAL_TIM_SlaveConfigSynchro+0x7c>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2201      	movs	r2, #1
 800897e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2202      	movs	r2, #2
 8008986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800898a:	6839      	ldr	r1, [r7, #0]
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 f8ed 	bl	8008b6c <TIM_SlaveTimer_SetConfig>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d009      	beq.n	80089ac <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2201      	movs	r2, #1
 800899c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80089a8:	2301      	movs	r3, #1
 80089aa:	e018      	b.n	80089de <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	68da      	ldr	r2, [r3, #12]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089ba:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	68da      	ldr	r2, [r3, #12]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80089ca:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2201      	movs	r2, #1
 80089d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3708      	adds	r7, #8
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80089e6:	b480      	push	{r7}
 80089e8:	b083      	sub	sp, #12
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80089ee:	bf00      	nop
 80089f0:	370c      	adds	r7, #12
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr

080089fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80089fa:	b480      	push	{r7}
 80089fc:	b083      	sub	sp, #12
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a02:	bf00      	nop
 8008a04:	370c      	adds	r7, #12
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr

08008a0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a0e:	b480      	push	{r7}
 8008a10:	b083      	sub	sp, #12
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008a16:	bf00      	nop
 8008a18:	370c      	adds	r7, #12
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr

08008a22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008a22:	b480      	push	{r7}
 8008a24:	b083      	sub	sp, #12
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a2a:	bf00      	nop
 8008a2c:	370c      	adds	r7, #12
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr
	...

08008a38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b085      	sub	sp, #20
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	4a40      	ldr	r2, [pc, #256]	; (8008b4c <TIM_Base_SetConfig+0x114>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d013      	beq.n	8008a78 <TIM_Base_SetConfig+0x40>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a56:	d00f      	beq.n	8008a78 <TIM_Base_SetConfig+0x40>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4a3d      	ldr	r2, [pc, #244]	; (8008b50 <TIM_Base_SetConfig+0x118>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d00b      	beq.n	8008a78 <TIM_Base_SetConfig+0x40>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	4a3c      	ldr	r2, [pc, #240]	; (8008b54 <TIM_Base_SetConfig+0x11c>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d007      	beq.n	8008a78 <TIM_Base_SetConfig+0x40>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4a3b      	ldr	r2, [pc, #236]	; (8008b58 <TIM_Base_SetConfig+0x120>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d003      	beq.n	8008a78 <TIM_Base_SetConfig+0x40>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4a3a      	ldr	r2, [pc, #232]	; (8008b5c <TIM_Base_SetConfig+0x124>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d108      	bne.n	8008a8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	68fa      	ldr	r2, [r7, #12]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	4a2f      	ldr	r2, [pc, #188]	; (8008b4c <TIM_Base_SetConfig+0x114>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d01f      	beq.n	8008ad2 <TIM_Base_SetConfig+0x9a>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a98:	d01b      	beq.n	8008ad2 <TIM_Base_SetConfig+0x9a>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4a2c      	ldr	r2, [pc, #176]	; (8008b50 <TIM_Base_SetConfig+0x118>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d017      	beq.n	8008ad2 <TIM_Base_SetConfig+0x9a>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	4a2b      	ldr	r2, [pc, #172]	; (8008b54 <TIM_Base_SetConfig+0x11c>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d013      	beq.n	8008ad2 <TIM_Base_SetConfig+0x9a>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4a2a      	ldr	r2, [pc, #168]	; (8008b58 <TIM_Base_SetConfig+0x120>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d00f      	beq.n	8008ad2 <TIM_Base_SetConfig+0x9a>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4a29      	ldr	r2, [pc, #164]	; (8008b5c <TIM_Base_SetConfig+0x124>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d00b      	beq.n	8008ad2 <TIM_Base_SetConfig+0x9a>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	4a28      	ldr	r2, [pc, #160]	; (8008b60 <TIM_Base_SetConfig+0x128>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d007      	beq.n	8008ad2 <TIM_Base_SetConfig+0x9a>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	4a27      	ldr	r2, [pc, #156]	; (8008b64 <TIM_Base_SetConfig+0x12c>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d003      	beq.n	8008ad2 <TIM_Base_SetConfig+0x9a>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4a26      	ldr	r2, [pc, #152]	; (8008b68 <TIM_Base_SetConfig+0x130>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d108      	bne.n	8008ae4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ad8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	695b      	ldr	r3, [r3, #20]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	689a      	ldr	r2, [r3, #8]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4a10      	ldr	r2, [pc, #64]	; (8008b4c <TIM_Base_SetConfig+0x114>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d00f      	beq.n	8008b30 <TIM_Base_SetConfig+0xf8>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4a12      	ldr	r2, [pc, #72]	; (8008b5c <TIM_Base_SetConfig+0x124>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d00b      	beq.n	8008b30 <TIM_Base_SetConfig+0xf8>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	4a11      	ldr	r2, [pc, #68]	; (8008b60 <TIM_Base_SetConfig+0x128>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d007      	beq.n	8008b30 <TIM_Base_SetConfig+0xf8>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4a10      	ldr	r2, [pc, #64]	; (8008b64 <TIM_Base_SetConfig+0x12c>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d003      	beq.n	8008b30 <TIM_Base_SetConfig+0xf8>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4a0f      	ldr	r2, [pc, #60]	; (8008b68 <TIM_Base_SetConfig+0x130>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d103      	bne.n	8008b38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	691a      	ldr	r2, [r3, #16]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	615a      	str	r2, [r3, #20]
}
 8008b3e:	bf00      	nop
 8008b40:	3714      	adds	r7, #20
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr
 8008b4a:	bf00      	nop
 8008b4c:	40010000 	.word	0x40010000
 8008b50:	40000400 	.word	0x40000400
 8008b54:	40000800 	.word	0x40000800
 8008b58:	40000c00 	.word	0x40000c00
 8008b5c:	40010400 	.word	0x40010400
 8008b60:	40014000 	.word	0x40014000
 8008b64:	40014400 	.word	0x40014400
 8008b68:	40014800 	.word	0x40014800

08008b6c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b086      	sub	sp, #24
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b7e:	697a      	ldr	r2, [r7, #20]
 8008b80:	4b56      	ldr	r3, [pc, #344]	; (8008cdc <TIM_SlaveTimer_SetConfig+0x170>)
 8008b82:	4013      	ands	r3, r2
 8008b84:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	697a      	ldr	r2, [r7, #20]
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008b90:	697a      	ldr	r2, [r7, #20]
 8008b92:	4b53      	ldr	r3, [pc, #332]	; (8008ce0 <TIM_SlaveTimer_SetConfig+0x174>)
 8008b94:	4013      	ands	r3, r2
 8008b96:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	697a      	ldr	r2, [r7, #20]
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	697a      	ldr	r2, [r7, #20]
 8008ba8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bb2:	f000 808c 	beq.w	8008cce <TIM_SlaveTimer_SetConfig+0x162>
 8008bb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bba:	d818      	bhi.n	8008bee <TIM_SlaveTimer_SetConfig+0x82>
 8008bbc:	2b30      	cmp	r3, #48	; 0x30
 8008bbe:	f000 8086 	beq.w	8008cce <TIM_SlaveTimer_SetConfig+0x162>
 8008bc2:	2b30      	cmp	r3, #48	; 0x30
 8008bc4:	d807      	bhi.n	8008bd6 <TIM_SlaveTimer_SetConfig+0x6a>
 8008bc6:	2b10      	cmp	r3, #16
 8008bc8:	f000 8081 	beq.w	8008cce <TIM_SlaveTimer_SetConfig+0x162>
 8008bcc:	2b20      	cmp	r3, #32
 8008bce:	d07e      	beq.n	8008cce <TIM_SlaveTimer_SetConfig+0x162>
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d07c      	beq.n	8008cce <TIM_SlaveTimer_SetConfig+0x162>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8008bd4:	e07c      	b.n	8008cd0 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8008bd6:	2b50      	cmp	r3, #80	; 0x50
 8008bd8:	d065      	beq.n	8008ca6 <TIM_SlaveTimer_SetConfig+0x13a>
 8008bda:	2b50      	cmp	r3, #80	; 0x50
 8008bdc:	d802      	bhi.n	8008be4 <TIM_SlaveTimer_SetConfig+0x78>
 8008bde:	2b40      	cmp	r3, #64	; 0x40
 8008be0:	d038      	beq.n	8008c54 <TIM_SlaveTimer_SetConfig+0xe8>
      break;
 8008be2:	e075      	b.n	8008cd0 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8008be4:	2b60      	cmp	r3, #96	; 0x60
 8008be6:	d068      	beq.n	8008cba <TIM_SlaveTimer_SetConfig+0x14e>
 8008be8:	2b70      	cmp	r3, #112	; 0x70
 8008bea:	d028      	beq.n	8008c3e <TIM_SlaveTimer_SetConfig+0xd2>
      break;
 8008bec:	e070      	b.n	8008cd0 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8008bee:	4a3d      	ldr	r2, [pc, #244]	; (8008ce4 <TIM_SlaveTimer_SetConfig+0x178>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d06c      	beq.n	8008cce <TIM_SlaveTimer_SetConfig+0x162>
 8008bf4:	4a3b      	ldr	r2, [pc, #236]	; (8008ce4 <TIM_SlaveTimer_SetConfig+0x178>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d810      	bhi.n	8008c1c <TIM_SlaveTimer_SetConfig+0xb0>
 8008bfa:	4a3b      	ldr	r2, [pc, #236]	; (8008ce8 <TIM_SlaveTimer_SetConfig+0x17c>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d066      	beq.n	8008cce <TIM_SlaveTimer_SetConfig+0x162>
 8008c00:	4a39      	ldr	r2, [pc, #228]	; (8008ce8 <TIM_SlaveTimer_SetConfig+0x17c>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d803      	bhi.n	8008c0e <TIM_SlaveTimer_SetConfig+0xa2>
 8008c06:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008c0a:	d060      	beq.n	8008cce <TIM_SlaveTimer_SetConfig+0x162>
      break;
 8008c0c:	e060      	b.n	8008cd0 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8008c0e:	4a37      	ldr	r2, [pc, #220]	; (8008cec <TIM_SlaveTimer_SetConfig+0x180>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d05c      	beq.n	8008cce <TIM_SlaveTimer_SetConfig+0x162>
 8008c14:	4a36      	ldr	r2, [pc, #216]	; (8008cf0 <TIM_SlaveTimer_SetConfig+0x184>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d059      	beq.n	8008cce <TIM_SlaveTimer_SetConfig+0x162>
      break;
 8008c1a:	e059      	b.n	8008cd0 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8008c1c:	4a35      	ldr	r2, [pc, #212]	; (8008cf4 <TIM_SlaveTimer_SetConfig+0x188>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d055      	beq.n	8008cce <TIM_SlaveTimer_SetConfig+0x162>
 8008c22:	4a34      	ldr	r2, [pc, #208]	; (8008cf4 <TIM_SlaveTimer_SetConfig+0x188>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d803      	bhi.n	8008c30 <TIM_SlaveTimer_SetConfig+0xc4>
 8008c28:	4a33      	ldr	r2, [pc, #204]	; (8008cf8 <TIM_SlaveTimer_SetConfig+0x18c>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d04f      	beq.n	8008cce <TIM_SlaveTimer_SetConfig+0x162>
      break;
 8008c2e:	e04f      	b.n	8008cd0 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8008c30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c34:	d04b      	beq.n	8008cce <TIM_SlaveTimer_SetConfig+0x162>
 8008c36:	4a31      	ldr	r2, [pc, #196]	; (8008cfc <TIM_SlaveTimer_SetConfig+0x190>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d048      	beq.n	8008cce <TIM_SlaveTimer_SetConfig+0x162>
      break;
 8008c3c:	e048      	b.n	8008cd0 <TIM_SlaveTimer_SetConfig+0x164>
      TIM_ETR_SetConfig(htim->Instance,
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6818      	ldr	r0, [r3, #0]
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	68d9      	ldr	r1, [r3, #12]
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	689a      	ldr	r2, [r3, #8]
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	691b      	ldr	r3, [r3, #16]
 8008c4e:	f000 f8b6 	bl	8008dbe <TIM_ETR_SetConfig>
      break;
 8008c52:	e03d      	b.n	8008cd0 <TIM_SlaveTimer_SetConfig+0x164>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2b05      	cmp	r3, #5
 8008c5a:	d101      	bne.n	8008c60 <TIM_SlaveTimer_SetConfig+0xf4>
        return HAL_ERROR;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e038      	b.n	8008cd2 <TIM_SlaveTimer_SetConfig+0x166>
      tmpccer = htim->Instance->CCER;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	6a1b      	ldr	r3, [r3, #32]
 8008c66:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	6a1a      	ldr	r2, [r3, #32]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f022 0201 	bic.w	r2, r2, #1
 8008c76:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	699b      	ldr	r3, [r3, #24]
 8008c7e:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c86:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	691b      	ldr	r3, [r3, #16]
 8008c8c:	011b      	lsls	r3, r3, #4
 8008c8e:	68fa      	ldr	r2, [r7, #12]
 8008c90:	4313      	orrs	r3, r2
 8008c92:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	693a      	ldr	r2, [r7, #16]
 8008ca2:	621a      	str	r2, [r3, #32]
      break;
 8008ca4:	e014      	b.n	8008cd0 <TIM_SlaveTimer_SetConfig+0x164>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6818      	ldr	r0, [r3, #0]
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	6899      	ldr	r1, [r3, #8]
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	691b      	ldr	r3, [r3, #16]
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	f000 f824 	bl	8008d00 <TIM_TI1_ConfigInputStage>
      break;
 8008cb8:	e00a      	b.n	8008cd0 <TIM_SlaveTimer_SetConfig+0x164>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6818      	ldr	r0, [r3, #0]
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	6899      	ldr	r1, [r3, #8]
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	f000 f849 	bl	8008d5e <TIM_TI2_ConfigInputStage>
      break;
 8008ccc:	e000      	b.n	8008cd0 <TIM_SlaveTimer_SetConfig+0x164>
      break;
 8008cce:	bf00      	nop
  }
  return HAL_OK;
 8008cd0:	2300      	movs	r3, #0
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3718      	adds	r7, #24
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	ffcfff8f 	.word	0xffcfff8f
 8008ce0:	fffefff8 	.word	0xfffefff8
 8008ce4:	00100050 	.word	0x00100050
 8008ce8:	00100020 	.word	0x00100020
 8008cec:	00100030 	.word	0x00100030
 8008cf0:	00100040 	.word	0x00100040
 8008cf4:	00100070 	.word	0x00100070
 8008cf8:	00100060 	.word	0x00100060
 8008cfc:	00200010 	.word	0x00200010

08008d00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b087      	sub	sp, #28
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	60f8      	str	r0, [r7, #12]
 8008d08:	60b9      	str	r1, [r7, #8]
 8008d0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	6a1b      	ldr	r3, [r3, #32]
 8008d10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	6a1b      	ldr	r3, [r3, #32]
 8008d16:	f023 0201 	bic.w	r2, r3, #1
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	699b      	ldr	r3, [r3, #24]
 8008d22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	011b      	lsls	r3, r3, #4
 8008d30:	693a      	ldr	r2, [r7, #16]
 8008d32:	4313      	orrs	r3, r2
 8008d34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	f023 030a 	bic.w	r3, r3, #10
 8008d3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d3e:	697a      	ldr	r2, [r7, #20]
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	4313      	orrs	r3, r2
 8008d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	693a      	ldr	r2, [r7, #16]
 8008d4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	697a      	ldr	r2, [r7, #20]
 8008d50:	621a      	str	r2, [r3, #32]
}
 8008d52:	bf00      	nop
 8008d54:	371c      	adds	r7, #28
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr

08008d5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d5e:	b480      	push	{r7}
 8008d60:	b087      	sub	sp, #28
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	60f8      	str	r0, [r7, #12]
 8008d66:	60b9      	str	r1, [r7, #8]
 8008d68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6a1b      	ldr	r3, [r3, #32]
 8008d6e:	f023 0210 	bic.w	r2, r3, #16
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	699b      	ldr	r3, [r3, #24]
 8008d7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6a1b      	ldr	r3, [r3, #32]
 8008d80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	031b      	lsls	r3, r3, #12
 8008d8e:	697a      	ldr	r2, [r7, #20]
 8008d90:	4313      	orrs	r3, r2
 8008d92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	011b      	lsls	r3, r3, #4
 8008da0:	693a      	ldr	r2, [r7, #16]
 8008da2:	4313      	orrs	r3, r2
 8008da4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	697a      	ldr	r2, [r7, #20]
 8008daa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	693a      	ldr	r2, [r7, #16]
 8008db0:	621a      	str	r2, [r3, #32]
}
 8008db2:	bf00      	nop
 8008db4:	371c      	adds	r7, #28
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr

08008dbe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008dbe:	b480      	push	{r7}
 8008dc0:	b087      	sub	sp, #28
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	60f8      	str	r0, [r7, #12]
 8008dc6:	60b9      	str	r1, [r7, #8]
 8008dc8:	607a      	str	r2, [r7, #4]
 8008dca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008dd8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	021a      	lsls	r2, r3, #8
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	431a      	orrs	r2, r3
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	4313      	orrs	r3, r2
 8008de6:	697a      	ldr	r2, [r7, #20]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	697a      	ldr	r2, [r7, #20]
 8008df0:	609a      	str	r2, [r3, #8]
}
 8008df2:	bf00      	nop
 8008df4:	371c      	adds	r7, #28
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr
	...

08008e00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b085      	sub	sp, #20
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d101      	bne.n	8008e18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e14:	2302      	movs	r3, #2
 8008e16:	e068      	b.n	8008eea <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2202      	movs	r2, #2
 8008e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a2e      	ldr	r2, [pc, #184]	; (8008ef8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d004      	beq.n	8008e4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a2d      	ldr	r2, [pc, #180]	; (8008efc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d108      	bne.n	8008e5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008e52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	68fa      	ldr	r2, [r7, #12]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	68fa      	ldr	r2, [r7, #12]
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	68fa      	ldr	r2, [r7, #12]
 8008e76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a1e      	ldr	r2, [pc, #120]	; (8008ef8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d01d      	beq.n	8008ebe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e8a:	d018      	beq.n	8008ebe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a1b      	ldr	r2, [pc, #108]	; (8008f00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d013      	beq.n	8008ebe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a1a      	ldr	r2, [pc, #104]	; (8008f04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d00e      	beq.n	8008ebe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a18      	ldr	r2, [pc, #96]	; (8008f08 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d009      	beq.n	8008ebe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a13      	ldr	r2, [pc, #76]	; (8008efc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d004      	beq.n	8008ebe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a14      	ldr	r2, [pc, #80]	; (8008f0c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d10c      	bne.n	8008ed8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ec4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	689b      	ldr	r3, [r3, #8]
 8008eca:	68ba      	ldr	r2, [r7, #8]
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	68ba      	ldr	r2, [r7, #8]
 8008ed6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2201      	movs	r2, #1
 8008edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ee8:	2300      	movs	r3, #0
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3714      	adds	r7, #20
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	40010000 	.word	0x40010000
 8008efc:	40010400 	.word	0x40010400
 8008f00:	40000400 	.word	0x40000400
 8008f04:	40000800 	.word	0x40000800
 8008f08:	40000c00 	.word	0x40000c00
 8008f0c:	40001800 	.word	0x40001800

08008f10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f18:	bf00      	nop
 8008f1a:	370c      	adds	r7, #12
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr

08008f24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f2c:	bf00      	nop
 8008f2e:	370c      	adds	r7, #12
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008f40:	bf00      	nop
 8008f42:	370c      	adds	r7, #12
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr

08008f4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d101      	bne.n	8008f5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e042      	b.n	8008fe4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d106      	bne.n	8008f76 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f7f8 fbf3 	bl	800175c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2224      	movs	r2, #36	; 0x24
 8008f7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f022 0201 	bic.w	r2, r2, #1
 8008f8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 f82c 	bl	8008fec <UART_SetConfig>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d101      	bne.n	8008f9e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e022      	b.n	8008fe4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d002      	beq.n	8008fac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 fecc 	bl	8009d44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	685a      	ldr	r2, [r3, #4]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008fba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	689a      	ldr	r2, [r3, #8]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008fca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f042 0201 	orr.w	r2, r2, #1
 8008fda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 ff53 	bl	8009e88 <UART_CheckIdleState>
 8008fe2:	4603      	mov	r3, r0
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3708      	adds	r7, #8
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008fec:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008ff0:	b08e      	sub	sp, #56	; 0x38
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	689a      	ldr	r2, [r3, #8]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	691b      	ldr	r3, [r3, #16]
 8009004:	431a      	orrs	r2, r3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	695b      	ldr	r3, [r3, #20]
 800900a:	431a      	orrs	r2, r3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	69db      	ldr	r3, [r3, #28]
 8009010:	4313      	orrs	r3, r2
 8009012:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009018:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800901a:	4313      	orrs	r3, r2
 800901c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	4bc1      	ldr	r3, [pc, #772]	; (800932c <UART_SetConfig+0x340>)
 8009026:	4013      	ands	r3, r2
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	6812      	ldr	r2, [r2, #0]
 800902c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800902e:	430b      	orrs	r3, r1
 8009030:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	68da      	ldr	r2, [r3, #12]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	430a      	orrs	r2, r1
 8009046:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	699b      	ldr	r3, [r3, #24]
 800904c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4ab7      	ldr	r2, [pc, #732]	; (8009330 <UART_SetConfig+0x344>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d004      	beq.n	8009062 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6a1b      	ldr	r3, [r3, #32]
 800905c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800905e:	4313      	orrs	r3, r2
 8009060:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	689a      	ldr	r2, [r3, #8]
 8009068:	4bb2      	ldr	r3, [pc, #712]	; (8009334 <UART_SetConfig+0x348>)
 800906a:	4013      	ands	r3, r2
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	6812      	ldr	r2, [r2, #0]
 8009070:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009072:	430b      	orrs	r3, r1
 8009074:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907c:	f023 010f 	bic.w	r1, r3, #15
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	430a      	orrs	r2, r1
 800908a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4aa9      	ldr	r2, [pc, #676]	; (8009338 <UART_SetConfig+0x34c>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d177      	bne.n	8009186 <UART_SetConfig+0x19a>
 8009096:	4ba9      	ldr	r3, [pc, #676]	; (800933c <UART_SetConfig+0x350>)
 8009098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800909a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800909e:	2b28      	cmp	r3, #40	; 0x28
 80090a0:	d86c      	bhi.n	800917c <UART_SetConfig+0x190>
 80090a2:	a201      	add	r2, pc, #4	; (adr r2, 80090a8 <UART_SetConfig+0xbc>)
 80090a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a8:	0800914d 	.word	0x0800914d
 80090ac:	0800917d 	.word	0x0800917d
 80090b0:	0800917d 	.word	0x0800917d
 80090b4:	0800917d 	.word	0x0800917d
 80090b8:	0800917d 	.word	0x0800917d
 80090bc:	0800917d 	.word	0x0800917d
 80090c0:	0800917d 	.word	0x0800917d
 80090c4:	0800917d 	.word	0x0800917d
 80090c8:	08009155 	.word	0x08009155
 80090cc:	0800917d 	.word	0x0800917d
 80090d0:	0800917d 	.word	0x0800917d
 80090d4:	0800917d 	.word	0x0800917d
 80090d8:	0800917d 	.word	0x0800917d
 80090dc:	0800917d 	.word	0x0800917d
 80090e0:	0800917d 	.word	0x0800917d
 80090e4:	0800917d 	.word	0x0800917d
 80090e8:	0800915d 	.word	0x0800915d
 80090ec:	0800917d 	.word	0x0800917d
 80090f0:	0800917d 	.word	0x0800917d
 80090f4:	0800917d 	.word	0x0800917d
 80090f8:	0800917d 	.word	0x0800917d
 80090fc:	0800917d 	.word	0x0800917d
 8009100:	0800917d 	.word	0x0800917d
 8009104:	0800917d 	.word	0x0800917d
 8009108:	08009165 	.word	0x08009165
 800910c:	0800917d 	.word	0x0800917d
 8009110:	0800917d 	.word	0x0800917d
 8009114:	0800917d 	.word	0x0800917d
 8009118:	0800917d 	.word	0x0800917d
 800911c:	0800917d 	.word	0x0800917d
 8009120:	0800917d 	.word	0x0800917d
 8009124:	0800917d 	.word	0x0800917d
 8009128:	0800916d 	.word	0x0800916d
 800912c:	0800917d 	.word	0x0800917d
 8009130:	0800917d 	.word	0x0800917d
 8009134:	0800917d 	.word	0x0800917d
 8009138:	0800917d 	.word	0x0800917d
 800913c:	0800917d 	.word	0x0800917d
 8009140:	0800917d 	.word	0x0800917d
 8009144:	0800917d 	.word	0x0800917d
 8009148:	08009175 	.word	0x08009175
 800914c:	2301      	movs	r3, #1
 800914e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009152:	e339      	b.n	80097c8 <UART_SetConfig+0x7dc>
 8009154:	2304      	movs	r3, #4
 8009156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800915a:	e335      	b.n	80097c8 <UART_SetConfig+0x7dc>
 800915c:	2308      	movs	r3, #8
 800915e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009162:	e331      	b.n	80097c8 <UART_SetConfig+0x7dc>
 8009164:	2310      	movs	r3, #16
 8009166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800916a:	e32d      	b.n	80097c8 <UART_SetConfig+0x7dc>
 800916c:	2320      	movs	r3, #32
 800916e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009172:	e329      	b.n	80097c8 <UART_SetConfig+0x7dc>
 8009174:	2340      	movs	r3, #64	; 0x40
 8009176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800917a:	e325      	b.n	80097c8 <UART_SetConfig+0x7dc>
 800917c:	2380      	movs	r3, #128	; 0x80
 800917e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009182:	bf00      	nop
 8009184:	e320      	b.n	80097c8 <UART_SetConfig+0x7dc>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a6d      	ldr	r2, [pc, #436]	; (8009340 <UART_SetConfig+0x354>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d132      	bne.n	80091f6 <UART_SetConfig+0x20a>
 8009190:	4b6a      	ldr	r3, [pc, #424]	; (800933c <UART_SetConfig+0x350>)
 8009192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009194:	f003 0307 	and.w	r3, r3, #7
 8009198:	2b05      	cmp	r3, #5
 800919a:	d827      	bhi.n	80091ec <UART_SetConfig+0x200>
 800919c:	a201      	add	r2, pc, #4	; (adr r2, 80091a4 <UART_SetConfig+0x1b8>)
 800919e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a2:	bf00      	nop
 80091a4:	080091bd 	.word	0x080091bd
 80091a8:	080091c5 	.word	0x080091c5
 80091ac:	080091cd 	.word	0x080091cd
 80091b0:	080091d5 	.word	0x080091d5
 80091b4:	080091dd 	.word	0x080091dd
 80091b8:	080091e5 	.word	0x080091e5
 80091bc:	2300      	movs	r3, #0
 80091be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091c2:	e301      	b.n	80097c8 <UART_SetConfig+0x7dc>
 80091c4:	2304      	movs	r3, #4
 80091c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091ca:	e2fd      	b.n	80097c8 <UART_SetConfig+0x7dc>
 80091cc:	2308      	movs	r3, #8
 80091ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091d2:	e2f9      	b.n	80097c8 <UART_SetConfig+0x7dc>
 80091d4:	2310      	movs	r3, #16
 80091d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091da:	e2f5      	b.n	80097c8 <UART_SetConfig+0x7dc>
 80091dc:	2320      	movs	r3, #32
 80091de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091e2:	e2f1      	b.n	80097c8 <UART_SetConfig+0x7dc>
 80091e4:	2340      	movs	r3, #64	; 0x40
 80091e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091ea:	e2ed      	b.n	80097c8 <UART_SetConfig+0x7dc>
 80091ec:	2380      	movs	r3, #128	; 0x80
 80091ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091f2:	bf00      	nop
 80091f4:	e2e8      	b.n	80097c8 <UART_SetConfig+0x7dc>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a52      	ldr	r2, [pc, #328]	; (8009344 <UART_SetConfig+0x358>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d132      	bne.n	8009266 <UART_SetConfig+0x27a>
 8009200:	4b4e      	ldr	r3, [pc, #312]	; (800933c <UART_SetConfig+0x350>)
 8009202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009204:	f003 0307 	and.w	r3, r3, #7
 8009208:	2b05      	cmp	r3, #5
 800920a:	d827      	bhi.n	800925c <UART_SetConfig+0x270>
 800920c:	a201      	add	r2, pc, #4	; (adr r2, 8009214 <UART_SetConfig+0x228>)
 800920e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009212:	bf00      	nop
 8009214:	0800922d 	.word	0x0800922d
 8009218:	08009235 	.word	0x08009235
 800921c:	0800923d 	.word	0x0800923d
 8009220:	08009245 	.word	0x08009245
 8009224:	0800924d 	.word	0x0800924d
 8009228:	08009255 	.word	0x08009255
 800922c:	2300      	movs	r3, #0
 800922e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009232:	e2c9      	b.n	80097c8 <UART_SetConfig+0x7dc>
 8009234:	2304      	movs	r3, #4
 8009236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800923a:	e2c5      	b.n	80097c8 <UART_SetConfig+0x7dc>
 800923c:	2308      	movs	r3, #8
 800923e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009242:	e2c1      	b.n	80097c8 <UART_SetConfig+0x7dc>
 8009244:	2310      	movs	r3, #16
 8009246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800924a:	e2bd      	b.n	80097c8 <UART_SetConfig+0x7dc>
 800924c:	2320      	movs	r3, #32
 800924e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009252:	e2b9      	b.n	80097c8 <UART_SetConfig+0x7dc>
 8009254:	2340      	movs	r3, #64	; 0x40
 8009256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800925a:	e2b5      	b.n	80097c8 <UART_SetConfig+0x7dc>
 800925c:	2380      	movs	r3, #128	; 0x80
 800925e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009262:	bf00      	nop
 8009264:	e2b0      	b.n	80097c8 <UART_SetConfig+0x7dc>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a37      	ldr	r2, [pc, #220]	; (8009348 <UART_SetConfig+0x35c>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d132      	bne.n	80092d6 <UART_SetConfig+0x2ea>
 8009270:	4b32      	ldr	r3, [pc, #200]	; (800933c <UART_SetConfig+0x350>)
 8009272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009274:	f003 0307 	and.w	r3, r3, #7
 8009278:	2b05      	cmp	r3, #5
 800927a:	d827      	bhi.n	80092cc <UART_SetConfig+0x2e0>
 800927c:	a201      	add	r2, pc, #4	; (adr r2, 8009284 <UART_SetConfig+0x298>)
 800927e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009282:	bf00      	nop
 8009284:	0800929d 	.word	0x0800929d
 8009288:	080092a5 	.word	0x080092a5
 800928c:	080092ad 	.word	0x080092ad
 8009290:	080092b5 	.word	0x080092b5
 8009294:	080092bd 	.word	0x080092bd
 8009298:	080092c5 	.word	0x080092c5
 800929c:	2300      	movs	r3, #0
 800929e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092a2:	e291      	b.n	80097c8 <UART_SetConfig+0x7dc>
 80092a4:	2304      	movs	r3, #4
 80092a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092aa:	e28d      	b.n	80097c8 <UART_SetConfig+0x7dc>
 80092ac:	2308      	movs	r3, #8
 80092ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092b2:	e289      	b.n	80097c8 <UART_SetConfig+0x7dc>
 80092b4:	2310      	movs	r3, #16
 80092b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092ba:	e285      	b.n	80097c8 <UART_SetConfig+0x7dc>
 80092bc:	2320      	movs	r3, #32
 80092be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092c2:	e281      	b.n	80097c8 <UART_SetConfig+0x7dc>
 80092c4:	2340      	movs	r3, #64	; 0x40
 80092c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092ca:	e27d      	b.n	80097c8 <UART_SetConfig+0x7dc>
 80092cc:	2380      	movs	r3, #128	; 0x80
 80092ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092d2:	bf00      	nop
 80092d4:	e278      	b.n	80097c8 <UART_SetConfig+0x7dc>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a1c      	ldr	r2, [pc, #112]	; (800934c <UART_SetConfig+0x360>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d144      	bne.n	800936a <UART_SetConfig+0x37e>
 80092e0:	4b16      	ldr	r3, [pc, #88]	; (800933c <UART_SetConfig+0x350>)
 80092e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092e4:	f003 0307 	and.w	r3, r3, #7
 80092e8:	2b05      	cmp	r3, #5
 80092ea:	d839      	bhi.n	8009360 <UART_SetConfig+0x374>
 80092ec:	a201      	add	r2, pc, #4	; (adr r2, 80092f4 <UART_SetConfig+0x308>)
 80092ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f2:	bf00      	nop
 80092f4:	0800930d 	.word	0x0800930d
 80092f8:	08009315 	.word	0x08009315
 80092fc:	0800931d 	.word	0x0800931d
 8009300:	08009325 	.word	0x08009325
 8009304:	08009351 	.word	0x08009351
 8009308:	08009359 	.word	0x08009359
 800930c:	2300      	movs	r3, #0
 800930e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009312:	e259      	b.n	80097c8 <UART_SetConfig+0x7dc>
 8009314:	2304      	movs	r3, #4
 8009316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800931a:	e255      	b.n	80097c8 <UART_SetConfig+0x7dc>
 800931c:	2308      	movs	r3, #8
 800931e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009322:	e251      	b.n	80097c8 <UART_SetConfig+0x7dc>
 8009324:	2310      	movs	r3, #16
 8009326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800932a:	e24d      	b.n	80097c8 <UART_SetConfig+0x7dc>
 800932c:	cfff69f3 	.word	0xcfff69f3
 8009330:	58000c00 	.word	0x58000c00
 8009334:	11fff4ff 	.word	0x11fff4ff
 8009338:	40011000 	.word	0x40011000
 800933c:	58024400 	.word	0x58024400
 8009340:	40004400 	.word	0x40004400
 8009344:	40004800 	.word	0x40004800
 8009348:	40004c00 	.word	0x40004c00
 800934c:	40005000 	.word	0x40005000
 8009350:	2320      	movs	r3, #32
 8009352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009356:	e237      	b.n	80097c8 <UART_SetConfig+0x7dc>
 8009358:	2340      	movs	r3, #64	; 0x40
 800935a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800935e:	e233      	b.n	80097c8 <UART_SetConfig+0x7dc>
 8009360:	2380      	movs	r3, #128	; 0x80
 8009362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009366:	bf00      	nop
 8009368:	e22e      	b.n	80097c8 <UART_SetConfig+0x7dc>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4ab5      	ldr	r2, [pc, #724]	; (8009644 <UART_SetConfig+0x658>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d178      	bne.n	8009466 <UART_SetConfig+0x47a>
 8009374:	4bb4      	ldr	r3, [pc, #720]	; (8009648 <UART_SetConfig+0x65c>)
 8009376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009378:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800937c:	2b28      	cmp	r3, #40	; 0x28
 800937e:	d86d      	bhi.n	800945c <UART_SetConfig+0x470>
 8009380:	a201      	add	r2, pc, #4	; (adr r2, 8009388 <UART_SetConfig+0x39c>)
 8009382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009386:	bf00      	nop
 8009388:	0800942d 	.word	0x0800942d
 800938c:	0800945d 	.word	0x0800945d
 8009390:	0800945d 	.word	0x0800945d
 8009394:	0800945d 	.word	0x0800945d
 8009398:	0800945d 	.word	0x0800945d
 800939c:	0800945d 	.word	0x0800945d
 80093a0:	0800945d 	.word	0x0800945d
 80093a4:	0800945d 	.word	0x0800945d
 80093a8:	08009435 	.word	0x08009435
 80093ac:	0800945d 	.word	0x0800945d
 80093b0:	0800945d 	.word	0x0800945d
 80093b4:	0800945d 	.word	0x0800945d
 80093b8:	0800945d 	.word	0x0800945d
 80093bc:	0800945d 	.word	0x0800945d
 80093c0:	0800945d 	.word	0x0800945d
 80093c4:	0800945d 	.word	0x0800945d
 80093c8:	0800943d 	.word	0x0800943d
 80093cc:	0800945d 	.word	0x0800945d
 80093d0:	0800945d 	.word	0x0800945d
 80093d4:	0800945d 	.word	0x0800945d
 80093d8:	0800945d 	.word	0x0800945d
 80093dc:	0800945d 	.word	0x0800945d
 80093e0:	0800945d 	.word	0x0800945d
 80093e4:	0800945d 	.word	0x0800945d
 80093e8:	08009445 	.word	0x08009445
 80093ec:	0800945d 	.word	0x0800945d
 80093f0:	0800945d 	.word	0x0800945d
 80093f4:	0800945d 	.word	0x0800945d
 80093f8:	0800945d 	.word	0x0800945d
 80093fc:	0800945d 	.word	0x0800945d
 8009400:	0800945d 	.word	0x0800945d
 8009404:	0800945d 	.word	0x0800945d
 8009408:	0800944d 	.word	0x0800944d
 800940c:	0800945d 	.word	0x0800945d
 8009410:	0800945d 	.word	0x0800945d
 8009414:	0800945d 	.word	0x0800945d
 8009418:	0800945d 	.word	0x0800945d
 800941c:	0800945d 	.word	0x0800945d
 8009420:	0800945d 	.word	0x0800945d
 8009424:	0800945d 	.word	0x0800945d
 8009428:	08009455 	.word	0x08009455
 800942c:	2301      	movs	r3, #1
 800942e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009432:	e1c9      	b.n	80097c8 <UART_SetConfig+0x7dc>
 8009434:	2304      	movs	r3, #4
 8009436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800943a:	e1c5      	b.n	80097c8 <UART_SetConfig+0x7dc>
 800943c:	2308      	movs	r3, #8
 800943e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009442:	e1c1      	b.n	80097c8 <UART_SetConfig+0x7dc>
 8009444:	2310      	movs	r3, #16
 8009446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800944a:	e1bd      	b.n	80097c8 <UART_SetConfig+0x7dc>
 800944c:	2320      	movs	r3, #32
 800944e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009452:	e1b9      	b.n	80097c8 <UART_SetConfig+0x7dc>
 8009454:	2340      	movs	r3, #64	; 0x40
 8009456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800945a:	e1b5      	b.n	80097c8 <UART_SetConfig+0x7dc>
 800945c:	2380      	movs	r3, #128	; 0x80
 800945e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009462:	bf00      	nop
 8009464:	e1b0      	b.n	80097c8 <UART_SetConfig+0x7dc>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a78      	ldr	r2, [pc, #480]	; (800964c <UART_SetConfig+0x660>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d132      	bne.n	80094d6 <UART_SetConfig+0x4ea>
 8009470:	4b75      	ldr	r3, [pc, #468]	; (8009648 <UART_SetConfig+0x65c>)
 8009472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009474:	f003 0307 	and.w	r3, r3, #7
 8009478:	2b05      	cmp	r3, #5
 800947a:	d827      	bhi.n	80094cc <UART_SetConfig+0x4e0>
 800947c:	a201      	add	r2, pc, #4	; (adr r2, 8009484 <UART_SetConfig+0x498>)
 800947e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009482:	bf00      	nop
 8009484:	0800949d 	.word	0x0800949d
 8009488:	080094a5 	.word	0x080094a5
 800948c:	080094ad 	.word	0x080094ad
 8009490:	080094b5 	.word	0x080094b5
 8009494:	080094bd 	.word	0x080094bd
 8009498:	080094c5 	.word	0x080094c5
 800949c:	2300      	movs	r3, #0
 800949e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094a2:	e191      	b.n	80097c8 <UART_SetConfig+0x7dc>
 80094a4:	2304      	movs	r3, #4
 80094a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094aa:	e18d      	b.n	80097c8 <UART_SetConfig+0x7dc>
 80094ac:	2308      	movs	r3, #8
 80094ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094b2:	e189      	b.n	80097c8 <UART_SetConfig+0x7dc>
 80094b4:	2310      	movs	r3, #16
 80094b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094ba:	e185      	b.n	80097c8 <UART_SetConfig+0x7dc>
 80094bc:	2320      	movs	r3, #32
 80094be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094c2:	e181      	b.n	80097c8 <UART_SetConfig+0x7dc>
 80094c4:	2340      	movs	r3, #64	; 0x40
 80094c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094ca:	e17d      	b.n	80097c8 <UART_SetConfig+0x7dc>
 80094cc:	2380      	movs	r3, #128	; 0x80
 80094ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094d2:	bf00      	nop
 80094d4:	e178      	b.n	80097c8 <UART_SetConfig+0x7dc>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a5d      	ldr	r2, [pc, #372]	; (8009650 <UART_SetConfig+0x664>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d132      	bne.n	8009546 <UART_SetConfig+0x55a>
 80094e0:	4b59      	ldr	r3, [pc, #356]	; (8009648 <UART_SetConfig+0x65c>)
 80094e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094e4:	f003 0307 	and.w	r3, r3, #7
 80094e8:	2b05      	cmp	r3, #5
 80094ea:	d827      	bhi.n	800953c <UART_SetConfig+0x550>
 80094ec:	a201      	add	r2, pc, #4	; (adr r2, 80094f4 <UART_SetConfig+0x508>)
 80094ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f2:	bf00      	nop
 80094f4:	0800950d 	.word	0x0800950d
 80094f8:	08009515 	.word	0x08009515
 80094fc:	0800951d 	.word	0x0800951d
 8009500:	08009525 	.word	0x08009525
 8009504:	0800952d 	.word	0x0800952d
 8009508:	08009535 	.word	0x08009535
 800950c:	2300      	movs	r3, #0
 800950e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009512:	e159      	b.n	80097c8 <UART_SetConfig+0x7dc>
 8009514:	2304      	movs	r3, #4
 8009516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800951a:	e155      	b.n	80097c8 <UART_SetConfig+0x7dc>
 800951c:	2308      	movs	r3, #8
 800951e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009522:	e151      	b.n	80097c8 <UART_SetConfig+0x7dc>
 8009524:	2310      	movs	r3, #16
 8009526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800952a:	e14d      	b.n	80097c8 <UART_SetConfig+0x7dc>
 800952c:	2320      	movs	r3, #32
 800952e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009532:	e149      	b.n	80097c8 <UART_SetConfig+0x7dc>
 8009534:	2340      	movs	r3, #64	; 0x40
 8009536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800953a:	e145      	b.n	80097c8 <UART_SetConfig+0x7dc>
 800953c:	2380      	movs	r3, #128	; 0x80
 800953e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009542:	bf00      	nop
 8009544:	e140      	b.n	80097c8 <UART_SetConfig+0x7dc>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a42      	ldr	r2, [pc, #264]	; (8009654 <UART_SetConfig+0x668>)
 800954c:	4293      	cmp	r3, r2
 800954e:	f040 8083 	bne.w	8009658 <UART_SetConfig+0x66c>
 8009552:	4b3d      	ldr	r3, [pc, #244]	; (8009648 <UART_SetConfig+0x65c>)
 8009554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009556:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800955a:	2b28      	cmp	r3, #40	; 0x28
 800955c:	d86c      	bhi.n	8009638 <UART_SetConfig+0x64c>
 800955e:	a201      	add	r2, pc, #4	; (adr r2, 8009564 <UART_SetConfig+0x578>)
 8009560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009564:	08009609 	.word	0x08009609
 8009568:	08009639 	.word	0x08009639
 800956c:	08009639 	.word	0x08009639
 8009570:	08009639 	.word	0x08009639
 8009574:	08009639 	.word	0x08009639
 8009578:	08009639 	.word	0x08009639
 800957c:	08009639 	.word	0x08009639
 8009580:	08009639 	.word	0x08009639
 8009584:	08009611 	.word	0x08009611
 8009588:	08009639 	.word	0x08009639
 800958c:	08009639 	.word	0x08009639
 8009590:	08009639 	.word	0x08009639
 8009594:	08009639 	.word	0x08009639
 8009598:	08009639 	.word	0x08009639
 800959c:	08009639 	.word	0x08009639
 80095a0:	08009639 	.word	0x08009639
 80095a4:	08009619 	.word	0x08009619
 80095a8:	08009639 	.word	0x08009639
 80095ac:	08009639 	.word	0x08009639
 80095b0:	08009639 	.word	0x08009639
 80095b4:	08009639 	.word	0x08009639
 80095b8:	08009639 	.word	0x08009639
 80095bc:	08009639 	.word	0x08009639
 80095c0:	08009639 	.word	0x08009639
 80095c4:	08009621 	.word	0x08009621
 80095c8:	08009639 	.word	0x08009639
 80095cc:	08009639 	.word	0x08009639
 80095d0:	08009639 	.word	0x08009639
 80095d4:	08009639 	.word	0x08009639
 80095d8:	08009639 	.word	0x08009639
 80095dc:	08009639 	.word	0x08009639
 80095e0:	08009639 	.word	0x08009639
 80095e4:	08009629 	.word	0x08009629
 80095e8:	08009639 	.word	0x08009639
 80095ec:	08009639 	.word	0x08009639
 80095f0:	08009639 	.word	0x08009639
 80095f4:	08009639 	.word	0x08009639
 80095f8:	08009639 	.word	0x08009639
 80095fc:	08009639 	.word	0x08009639
 8009600:	08009639 	.word	0x08009639
 8009604:	08009631 	.word	0x08009631
 8009608:	2301      	movs	r3, #1
 800960a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800960e:	e0db      	b.n	80097c8 <UART_SetConfig+0x7dc>
 8009610:	2304      	movs	r3, #4
 8009612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009616:	e0d7      	b.n	80097c8 <UART_SetConfig+0x7dc>
 8009618:	2308      	movs	r3, #8
 800961a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800961e:	e0d3      	b.n	80097c8 <UART_SetConfig+0x7dc>
 8009620:	2310      	movs	r3, #16
 8009622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009626:	e0cf      	b.n	80097c8 <UART_SetConfig+0x7dc>
 8009628:	2320      	movs	r3, #32
 800962a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800962e:	e0cb      	b.n	80097c8 <UART_SetConfig+0x7dc>
 8009630:	2340      	movs	r3, #64	; 0x40
 8009632:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009636:	e0c7      	b.n	80097c8 <UART_SetConfig+0x7dc>
 8009638:	2380      	movs	r3, #128	; 0x80
 800963a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800963e:	bf00      	nop
 8009640:	e0c2      	b.n	80097c8 <UART_SetConfig+0x7dc>
 8009642:	bf00      	nop
 8009644:	40011400 	.word	0x40011400
 8009648:	58024400 	.word	0x58024400
 800964c:	40007800 	.word	0x40007800
 8009650:	40007c00 	.word	0x40007c00
 8009654:	40011800 	.word	0x40011800
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4ab2      	ldr	r2, [pc, #712]	; (8009928 <UART_SetConfig+0x93c>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d177      	bne.n	8009752 <UART_SetConfig+0x766>
 8009662:	4bb2      	ldr	r3, [pc, #712]	; (800992c <UART_SetConfig+0x940>)
 8009664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009666:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800966a:	2b28      	cmp	r3, #40	; 0x28
 800966c:	d86c      	bhi.n	8009748 <UART_SetConfig+0x75c>
 800966e:	a201      	add	r2, pc, #4	; (adr r2, 8009674 <UART_SetConfig+0x688>)
 8009670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009674:	08009719 	.word	0x08009719
 8009678:	08009749 	.word	0x08009749
 800967c:	08009749 	.word	0x08009749
 8009680:	08009749 	.word	0x08009749
 8009684:	08009749 	.word	0x08009749
 8009688:	08009749 	.word	0x08009749
 800968c:	08009749 	.word	0x08009749
 8009690:	08009749 	.word	0x08009749
 8009694:	08009721 	.word	0x08009721
 8009698:	08009749 	.word	0x08009749
 800969c:	08009749 	.word	0x08009749
 80096a0:	08009749 	.word	0x08009749
 80096a4:	08009749 	.word	0x08009749
 80096a8:	08009749 	.word	0x08009749
 80096ac:	08009749 	.word	0x08009749
 80096b0:	08009749 	.word	0x08009749
 80096b4:	08009729 	.word	0x08009729
 80096b8:	08009749 	.word	0x08009749
 80096bc:	08009749 	.word	0x08009749
 80096c0:	08009749 	.word	0x08009749
 80096c4:	08009749 	.word	0x08009749
 80096c8:	08009749 	.word	0x08009749
 80096cc:	08009749 	.word	0x08009749
 80096d0:	08009749 	.word	0x08009749
 80096d4:	08009731 	.word	0x08009731
 80096d8:	08009749 	.word	0x08009749
 80096dc:	08009749 	.word	0x08009749
 80096e0:	08009749 	.word	0x08009749
 80096e4:	08009749 	.word	0x08009749
 80096e8:	08009749 	.word	0x08009749
 80096ec:	08009749 	.word	0x08009749
 80096f0:	08009749 	.word	0x08009749
 80096f4:	08009739 	.word	0x08009739
 80096f8:	08009749 	.word	0x08009749
 80096fc:	08009749 	.word	0x08009749
 8009700:	08009749 	.word	0x08009749
 8009704:	08009749 	.word	0x08009749
 8009708:	08009749 	.word	0x08009749
 800970c:	08009749 	.word	0x08009749
 8009710:	08009749 	.word	0x08009749
 8009714:	08009741 	.word	0x08009741
 8009718:	2301      	movs	r3, #1
 800971a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800971e:	e053      	b.n	80097c8 <UART_SetConfig+0x7dc>
 8009720:	2304      	movs	r3, #4
 8009722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009726:	e04f      	b.n	80097c8 <UART_SetConfig+0x7dc>
 8009728:	2308      	movs	r3, #8
 800972a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800972e:	e04b      	b.n	80097c8 <UART_SetConfig+0x7dc>
 8009730:	2310      	movs	r3, #16
 8009732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009736:	e047      	b.n	80097c8 <UART_SetConfig+0x7dc>
 8009738:	2320      	movs	r3, #32
 800973a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800973e:	e043      	b.n	80097c8 <UART_SetConfig+0x7dc>
 8009740:	2340      	movs	r3, #64	; 0x40
 8009742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009746:	e03f      	b.n	80097c8 <UART_SetConfig+0x7dc>
 8009748:	2380      	movs	r3, #128	; 0x80
 800974a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800974e:	bf00      	nop
 8009750:	e03a      	b.n	80097c8 <UART_SetConfig+0x7dc>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4a76      	ldr	r2, [pc, #472]	; (8009930 <UART_SetConfig+0x944>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d132      	bne.n	80097c2 <UART_SetConfig+0x7d6>
 800975c:	4b73      	ldr	r3, [pc, #460]	; (800992c <UART_SetConfig+0x940>)
 800975e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009760:	f003 0307 	and.w	r3, r3, #7
 8009764:	2b05      	cmp	r3, #5
 8009766:	d827      	bhi.n	80097b8 <UART_SetConfig+0x7cc>
 8009768:	a201      	add	r2, pc, #4	; (adr r2, 8009770 <UART_SetConfig+0x784>)
 800976a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800976e:	bf00      	nop
 8009770:	08009789 	.word	0x08009789
 8009774:	08009791 	.word	0x08009791
 8009778:	08009799 	.word	0x08009799
 800977c:	080097a1 	.word	0x080097a1
 8009780:	080097a9 	.word	0x080097a9
 8009784:	080097b1 	.word	0x080097b1
 8009788:	2302      	movs	r3, #2
 800978a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800978e:	e01b      	b.n	80097c8 <UART_SetConfig+0x7dc>
 8009790:	2304      	movs	r3, #4
 8009792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009796:	e017      	b.n	80097c8 <UART_SetConfig+0x7dc>
 8009798:	2308      	movs	r3, #8
 800979a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800979e:	e013      	b.n	80097c8 <UART_SetConfig+0x7dc>
 80097a0:	2310      	movs	r3, #16
 80097a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097a6:	e00f      	b.n	80097c8 <UART_SetConfig+0x7dc>
 80097a8:	2320      	movs	r3, #32
 80097aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097ae:	e00b      	b.n	80097c8 <UART_SetConfig+0x7dc>
 80097b0:	2340      	movs	r3, #64	; 0x40
 80097b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097b6:	e007      	b.n	80097c8 <UART_SetConfig+0x7dc>
 80097b8:	2380      	movs	r3, #128	; 0x80
 80097ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097be:	bf00      	nop
 80097c0:	e002      	b.n	80097c8 <UART_SetConfig+0x7dc>
 80097c2:	2380      	movs	r3, #128	; 0x80
 80097c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4a58      	ldr	r2, [pc, #352]	; (8009930 <UART_SetConfig+0x944>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	f040 80b6 	bne.w	8009940 <UART_SetConfig+0x954>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80097d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80097d8:	2b08      	cmp	r3, #8
 80097da:	d019      	beq.n	8009810 <UART_SetConfig+0x824>
 80097dc:	2b08      	cmp	r3, #8
 80097de:	dc04      	bgt.n	80097ea <UART_SetConfig+0x7fe>
 80097e0:	2b02      	cmp	r3, #2
 80097e2:	d009      	beq.n	80097f8 <UART_SetConfig+0x80c>
 80097e4:	2b04      	cmp	r3, #4
 80097e6:	d00b      	beq.n	8009800 <UART_SetConfig+0x814>
 80097e8:	e034      	b.n	8009854 <UART_SetConfig+0x868>
 80097ea:	2b20      	cmp	r3, #32
 80097ec:	d02b      	beq.n	8009846 <UART_SetConfig+0x85a>
 80097ee:	2b40      	cmp	r3, #64	; 0x40
 80097f0:	d02c      	beq.n	800984c <UART_SetConfig+0x860>
 80097f2:	2b10      	cmp	r3, #16
 80097f4:	d014      	beq.n	8009820 <UART_SetConfig+0x834>
 80097f6:	e02d      	b.n	8009854 <UART_SetConfig+0x868>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80097f8:	f7fe f97a 	bl	8007af0 <HAL_RCCEx_GetD3PCLK1Freq>
 80097fc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80097fe:	e02f      	b.n	8009860 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009800:	f107 0314 	add.w	r3, r7, #20
 8009804:	4618      	mov	r0, r3
 8009806:	f7fe f989 	bl	8007b1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800980a:	69bb      	ldr	r3, [r7, #24]
 800980c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800980e:	e027      	b.n	8009860 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009810:	f107 0308 	add.w	r3, r7, #8
 8009814:	4618      	mov	r0, r3
 8009816:	f7fe facd 	bl	8007db4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800981e:	e01f      	b.n	8009860 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009820:	4b42      	ldr	r3, [pc, #264]	; (800992c <UART_SetConfig+0x940>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f003 0320 	and.w	r3, r3, #32
 8009828:	2b00      	cmp	r3, #0
 800982a:	d009      	beq.n	8009840 <UART_SetConfig+0x854>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800982c:	4b3f      	ldr	r3, [pc, #252]	; (800992c <UART_SetConfig+0x940>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	08db      	lsrs	r3, r3, #3
 8009832:	f003 0303 	and.w	r3, r3, #3
 8009836:	4a3f      	ldr	r2, [pc, #252]	; (8009934 <UART_SetConfig+0x948>)
 8009838:	fa22 f303 	lsr.w	r3, r2, r3
 800983c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800983e:	e00f      	b.n	8009860 <UART_SetConfig+0x874>
          pclk = (uint32_t) HSI_VALUE;
 8009840:	4b3c      	ldr	r3, [pc, #240]	; (8009934 <UART_SetConfig+0x948>)
 8009842:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009844:	e00c      	b.n	8009860 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009846:	4b3c      	ldr	r3, [pc, #240]	; (8009938 <UART_SetConfig+0x94c>)
 8009848:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800984a:	e009      	b.n	8009860 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800984c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009850:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009852:	e005      	b.n	8009860 <UART_SetConfig+0x874>
      default:
        pclk = 0U;
 8009854:	2300      	movs	r3, #0
 8009856:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009858:	2301      	movs	r3, #1
 800985a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800985e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009862:	2b00      	cmp	r3, #0
 8009864:	f000 8251 	beq.w	8009d0a <UART_SetConfig+0xd1e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986c:	4a33      	ldr	r2, [pc, #204]	; (800993c <UART_SetConfig+0x950>)
 800986e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009872:	461a      	mov	r2, r3
 8009874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009876:	fbb3 f3f2 	udiv	r3, r3, r2
 800987a:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	685a      	ldr	r2, [r3, #4]
 8009880:	4613      	mov	r3, r2
 8009882:	005b      	lsls	r3, r3, #1
 8009884:	4413      	add	r3, r2
 8009886:	6a3a      	ldr	r2, [r7, #32]
 8009888:	429a      	cmp	r2, r3
 800988a:	d305      	bcc.n	8009898 <UART_SetConfig+0x8ac>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009892:	6a3a      	ldr	r2, [r7, #32]
 8009894:	429a      	cmp	r2, r3
 8009896:	d903      	bls.n	80098a0 <UART_SetConfig+0x8b4>
      {
        ret = HAL_ERROR;
 8009898:	2301      	movs	r3, #1
 800989a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800989e:	e234      	b.n	8009d0a <UART_SetConfig+0xd1e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80098a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a2:	4618      	mov	r0, r3
 80098a4:	f04f 0100 	mov.w	r1, #0
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ac:	4a23      	ldr	r2, [pc, #140]	; (800993c <UART_SetConfig+0x950>)
 80098ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	f04f 0400 	mov.w	r4, #0
 80098b8:	461a      	mov	r2, r3
 80098ba:	4623      	mov	r3, r4
 80098bc:	f7f6 fd18 	bl	80002f0 <__aeabi_uldivmod>
 80098c0:	4603      	mov	r3, r0
 80098c2:	460c      	mov	r4, r1
 80098c4:	4619      	mov	r1, r3
 80098c6:	4622      	mov	r2, r4
 80098c8:	f04f 0300 	mov.w	r3, #0
 80098cc:	f04f 0400 	mov.w	r4, #0
 80098d0:	0214      	lsls	r4, r2, #8
 80098d2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80098d6:	020b      	lsls	r3, r1, #8
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	6852      	ldr	r2, [r2, #4]
 80098dc:	0852      	lsrs	r2, r2, #1
 80098de:	4611      	mov	r1, r2
 80098e0:	f04f 0200 	mov.w	r2, #0
 80098e4:	eb13 0b01 	adds.w	fp, r3, r1
 80098e8:	eb44 0c02 	adc.w	ip, r4, r2
 80098ec:	4658      	mov	r0, fp
 80098ee:	4661      	mov	r1, ip
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	f04f 0400 	mov.w	r4, #0
 80098f8:	461a      	mov	r2, r3
 80098fa:	4623      	mov	r3, r4
 80098fc:	f7f6 fcf8 	bl	80002f0 <__aeabi_uldivmod>
 8009900:	4603      	mov	r3, r0
 8009902:	460c      	mov	r4, r1
 8009904:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009908:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800990c:	d308      	bcc.n	8009920 <UART_SetConfig+0x934>
 800990e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009910:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009914:	d204      	bcs.n	8009920 <UART_SetConfig+0x934>
        {
          huart->Instance->BRR = usartdiv;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800991c:	60da      	str	r2, [r3, #12]
 800991e:	e1f4      	b.n	8009d0a <UART_SetConfig+0xd1e>
        }
        else
        {
          ret = HAL_ERROR;
 8009920:	2301      	movs	r3, #1
 8009922:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009926:	e1f0      	b.n	8009d0a <UART_SetConfig+0xd1e>
 8009928:	40011c00 	.word	0x40011c00
 800992c:	58024400 	.word	0x58024400
 8009930:	58000c00 	.word	0x58000c00
 8009934:	03d09000 	.word	0x03d09000
 8009938:	003d0900 	.word	0x003d0900
 800993c:	0800b474 	.word	0x0800b474
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	69db      	ldr	r3, [r3, #28]
 8009944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009948:	f040 80f8 	bne.w	8009b3c <UART_SetConfig+0xb50>
  {
    switch (clocksource)
 800994c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009950:	2b40      	cmp	r3, #64	; 0x40
 8009952:	f200 80b7 	bhi.w	8009ac4 <UART_SetConfig+0xad8>
 8009956:	a201      	add	r2, pc, #4	; (adr r2, 800995c <UART_SetConfig+0x970>)
 8009958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800995c:	08009a61 	.word	0x08009a61
 8009960:	08009a69 	.word	0x08009a69
 8009964:	08009ac5 	.word	0x08009ac5
 8009968:	08009ac5 	.word	0x08009ac5
 800996c:	08009a71 	.word	0x08009a71
 8009970:	08009ac5 	.word	0x08009ac5
 8009974:	08009ac5 	.word	0x08009ac5
 8009978:	08009ac5 	.word	0x08009ac5
 800997c:	08009a81 	.word	0x08009a81
 8009980:	08009ac5 	.word	0x08009ac5
 8009984:	08009ac5 	.word	0x08009ac5
 8009988:	08009ac5 	.word	0x08009ac5
 800998c:	08009ac5 	.word	0x08009ac5
 8009990:	08009ac5 	.word	0x08009ac5
 8009994:	08009ac5 	.word	0x08009ac5
 8009998:	08009ac5 	.word	0x08009ac5
 800999c:	08009a91 	.word	0x08009a91
 80099a0:	08009ac5 	.word	0x08009ac5
 80099a4:	08009ac5 	.word	0x08009ac5
 80099a8:	08009ac5 	.word	0x08009ac5
 80099ac:	08009ac5 	.word	0x08009ac5
 80099b0:	08009ac5 	.word	0x08009ac5
 80099b4:	08009ac5 	.word	0x08009ac5
 80099b8:	08009ac5 	.word	0x08009ac5
 80099bc:	08009ac5 	.word	0x08009ac5
 80099c0:	08009ac5 	.word	0x08009ac5
 80099c4:	08009ac5 	.word	0x08009ac5
 80099c8:	08009ac5 	.word	0x08009ac5
 80099cc:	08009ac5 	.word	0x08009ac5
 80099d0:	08009ac5 	.word	0x08009ac5
 80099d4:	08009ac5 	.word	0x08009ac5
 80099d8:	08009ac5 	.word	0x08009ac5
 80099dc:	08009ab7 	.word	0x08009ab7
 80099e0:	08009ac5 	.word	0x08009ac5
 80099e4:	08009ac5 	.word	0x08009ac5
 80099e8:	08009ac5 	.word	0x08009ac5
 80099ec:	08009ac5 	.word	0x08009ac5
 80099f0:	08009ac5 	.word	0x08009ac5
 80099f4:	08009ac5 	.word	0x08009ac5
 80099f8:	08009ac5 	.word	0x08009ac5
 80099fc:	08009ac5 	.word	0x08009ac5
 8009a00:	08009ac5 	.word	0x08009ac5
 8009a04:	08009ac5 	.word	0x08009ac5
 8009a08:	08009ac5 	.word	0x08009ac5
 8009a0c:	08009ac5 	.word	0x08009ac5
 8009a10:	08009ac5 	.word	0x08009ac5
 8009a14:	08009ac5 	.word	0x08009ac5
 8009a18:	08009ac5 	.word	0x08009ac5
 8009a1c:	08009ac5 	.word	0x08009ac5
 8009a20:	08009ac5 	.word	0x08009ac5
 8009a24:	08009ac5 	.word	0x08009ac5
 8009a28:	08009ac5 	.word	0x08009ac5
 8009a2c:	08009ac5 	.word	0x08009ac5
 8009a30:	08009ac5 	.word	0x08009ac5
 8009a34:	08009ac5 	.word	0x08009ac5
 8009a38:	08009ac5 	.word	0x08009ac5
 8009a3c:	08009ac5 	.word	0x08009ac5
 8009a40:	08009ac5 	.word	0x08009ac5
 8009a44:	08009ac5 	.word	0x08009ac5
 8009a48:	08009ac5 	.word	0x08009ac5
 8009a4c:	08009ac5 	.word	0x08009ac5
 8009a50:	08009ac5 	.word	0x08009ac5
 8009a54:	08009ac5 	.word	0x08009ac5
 8009a58:	08009ac5 	.word	0x08009ac5
 8009a5c:	08009abd 	.word	0x08009abd
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a60:	f7fc ff40 	bl	80068e4 <HAL_RCC_GetPCLK1Freq>
 8009a64:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009a66:	e033      	b.n	8009ad0 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a68:	f7fc ff52 	bl	8006910 <HAL_RCC_GetPCLK2Freq>
 8009a6c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009a6e:	e02f      	b.n	8009ad0 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a70:	f107 0314 	add.w	r3, r7, #20
 8009a74:	4618      	mov	r0, r3
 8009a76:	f7fe f851 	bl	8007b1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009a7a:	69bb      	ldr	r3, [r7, #24]
 8009a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a7e:	e027      	b.n	8009ad0 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a80:	f107 0308 	add.w	r3, r7, #8
 8009a84:	4618      	mov	r0, r3
 8009a86:	f7fe f995 	bl	8007db4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a8e:	e01f      	b.n	8009ad0 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a90:	4ba8      	ldr	r3, [pc, #672]	; (8009d34 <UART_SetConfig+0xd48>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f003 0320 	and.w	r3, r3, #32
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d009      	beq.n	8009ab0 <UART_SetConfig+0xac4>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009a9c:	4ba5      	ldr	r3, [pc, #660]	; (8009d34 <UART_SetConfig+0xd48>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	08db      	lsrs	r3, r3, #3
 8009aa2:	f003 0303 	and.w	r3, r3, #3
 8009aa6:	4aa4      	ldr	r2, [pc, #656]	; (8009d38 <UART_SetConfig+0xd4c>)
 8009aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8009aac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009aae:	e00f      	b.n	8009ad0 <UART_SetConfig+0xae4>
          pclk = (uint32_t) HSI_VALUE;
 8009ab0:	4ba1      	ldr	r3, [pc, #644]	; (8009d38 <UART_SetConfig+0xd4c>)
 8009ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ab4:	e00c      	b.n	8009ad0 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009ab6:	4ba1      	ldr	r3, [pc, #644]	; (8009d3c <UART_SetConfig+0xd50>)
 8009ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009aba:	e009      	b.n	8009ad0 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009abc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ac2:	e005      	b.n	8009ad0 <UART_SetConfig+0xae4>
      default:
        pclk = 0U;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009ace:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	f000 8119 	beq.w	8009d0a <UART_SetConfig+0xd1e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009adc:	4a98      	ldr	r2, [pc, #608]	; (8009d40 <UART_SetConfig+0xd54>)
 8009ade:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae6:	fbb3 f3f2 	udiv	r3, r3, r2
 8009aea:	005a      	lsls	r2, r3, #1
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	085b      	lsrs	r3, r3, #1
 8009af2:	441a      	add	r2, r3
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b02:	2b0f      	cmp	r3, #15
 8009b04:	d916      	bls.n	8009b34 <UART_SetConfig+0xb48>
 8009b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b0c:	d212      	bcs.n	8009b34 <UART_SetConfig+0xb48>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	f023 030f 	bic.w	r3, r3, #15
 8009b16:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b1a:	085b      	lsrs	r3, r3, #1
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	f003 0307 	and.w	r3, r3, #7
 8009b22:	b29a      	uxth	r2, r3
 8009b24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009b26:	4313      	orrs	r3, r2
 8009b28:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009b30:	60da      	str	r2, [r3, #12]
 8009b32:	e0ea      	b.n	8009d0a <UART_SetConfig+0xd1e>
      }
      else
      {
        ret = HAL_ERROR;
 8009b34:	2301      	movs	r3, #1
 8009b36:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009b3a:	e0e6      	b.n	8009d0a <UART_SetConfig+0xd1e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009b3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009b40:	2b40      	cmp	r3, #64	; 0x40
 8009b42:	f200 80b7 	bhi.w	8009cb4 <UART_SetConfig+0xcc8>
 8009b46:	a201      	add	r2, pc, #4	; (adr r2, 8009b4c <UART_SetConfig+0xb60>)
 8009b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4c:	08009c51 	.word	0x08009c51
 8009b50:	08009c59 	.word	0x08009c59
 8009b54:	08009cb5 	.word	0x08009cb5
 8009b58:	08009cb5 	.word	0x08009cb5
 8009b5c:	08009c61 	.word	0x08009c61
 8009b60:	08009cb5 	.word	0x08009cb5
 8009b64:	08009cb5 	.word	0x08009cb5
 8009b68:	08009cb5 	.word	0x08009cb5
 8009b6c:	08009c71 	.word	0x08009c71
 8009b70:	08009cb5 	.word	0x08009cb5
 8009b74:	08009cb5 	.word	0x08009cb5
 8009b78:	08009cb5 	.word	0x08009cb5
 8009b7c:	08009cb5 	.word	0x08009cb5
 8009b80:	08009cb5 	.word	0x08009cb5
 8009b84:	08009cb5 	.word	0x08009cb5
 8009b88:	08009cb5 	.word	0x08009cb5
 8009b8c:	08009c81 	.word	0x08009c81
 8009b90:	08009cb5 	.word	0x08009cb5
 8009b94:	08009cb5 	.word	0x08009cb5
 8009b98:	08009cb5 	.word	0x08009cb5
 8009b9c:	08009cb5 	.word	0x08009cb5
 8009ba0:	08009cb5 	.word	0x08009cb5
 8009ba4:	08009cb5 	.word	0x08009cb5
 8009ba8:	08009cb5 	.word	0x08009cb5
 8009bac:	08009cb5 	.word	0x08009cb5
 8009bb0:	08009cb5 	.word	0x08009cb5
 8009bb4:	08009cb5 	.word	0x08009cb5
 8009bb8:	08009cb5 	.word	0x08009cb5
 8009bbc:	08009cb5 	.word	0x08009cb5
 8009bc0:	08009cb5 	.word	0x08009cb5
 8009bc4:	08009cb5 	.word	0x08009cb5
 8009bc8:	08009cb5 	.word	0x08009cb5
 8009bcc:	08009ca7 	.word	0x08009ca7
 8009bd0:	08009cb5 	.word	0x08009cb5
 8009bd4:	08009cb5 	.word	0x08009cb5
 8009bd8:	08009cb5 	.word	0x08009cb5
 8009bdc:	08009cb5 	.word	0x08009cb5
 8009be0:	08009cb5 	.word	0x08009cb5
 8009be4:	08009cb5 	.word	0x08009cb5
 8009be8:	08009cb5 	.word	0x08009cb5
 8009bec:	08009cb5 	.word	0x08009cb5
 8009bf0:	08009cb5 	.word	0x08009cb5
 8009bf4:	08009cb5 	.word	0x08009cb5
 8009bf8:	08009cb5 	.word	0x08009cb5
 8009bfc:	08009cb5 	.word	0x08009cb5
 8009c00:	08009cb5 	.word	0x08009cb5
 8009c04:	08009cb5 	.word	0x08009cb5
 8009c08:	08009cb5 	.word	0x08009cb5
 8009c0c:	08009cb5 	.word	0x08009cb5
 8009c10:	08009cb5 	.word	0x08009cb5
 8009c14:	08009cb5 	.word	0x08009cb5
 8009c18:	08009cb5 	.word	0x08009cb5
 8009c1c:	08009cb5 	.word	0x08009cb5
 8009c20:	08009cb5 	.word	0x08009cb5
 8009c24:	08009cb5 	.word	0x08009cb5
 8009c28:	08009cb5 	.word	0x08009cb5
 8009c2c:	08009cb5 	.word	0x08009cb5
 8009c30:	08009cb5 	.word	0x08009cb5
 8009c34:	08009cb5 	.word	0x08009cb5
 8009c38:	08009cb5 	.word	0x08009cb5
 8009c3c:	08009cb5 	.word	0x08009cb5
 8009c40:	08009cb5 	.word	0x08009cb5
 8009c44:	08009cb5 	.word	0x08009cb5
 8009c48:	08009cb5 	.word	0x08009cb5
 8009c4c:	08009cad 	.word	0x08009cad
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c50:	f7fc fe48 	bl	80068e4 <HAL_RCC_GetPCLK1Freq>
 8009c54:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009c56:	e033      	b.n	8009cc0 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c58:	f7fc fe5a 	bl	8006910 <HAL_RCC_GetPCLK2Freq>
 8009c5c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009c5e:	e02f      	b.n	8009cc0 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c60:	f107 0314 	add.w	r3, r7, #20
 8009c64:	4618      	mov	r0, r3
 8009c66:	f7fd ff59 	bl	8007b1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c6a:	69bb      	ldr	r3, [r7, #24]
 8009c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c6e:	e027      	b.n	8009cc0 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c70:	f107 0308 	add.w	r3, r7, #8
 8009c74:	4618      	mov	r0, r3
 8009c76:	f7fe f89d 	bl	8007db4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c7e:	e01f      	b.n	8009cc0 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c80:	4b2c      	ldr	r3, [pc, #176]	; (8009d34 <UART_SetConfig+0xd48>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f003 0320 	and.w	r3, r3, #32
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d009      	beq.n	8009ca0 <UART_SetConfig+0xcb4>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c8c:	4b29      	ldr	r3, [pc, #164]	; (8009d34 <UART_SetConfig+0xd48>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	08db      	lsrs	r3, r3, #3
 8009c92:	f003 0303 	and.w	r3, r3, #3
 8009c96:	4a28      	ldr	r2, [pc, #160]	; (8009d38 <UART_SetConfig+0xd4c>)
 8009c98:	fa22 f303 	lsr.w	r3, r2, r3
 8009c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c9e:	e00f      	b.n	8009cc0 <UART_SetConfig+0xcd4>
          pclk = (uint32_t) HSI_VALUE;
 8009ca0:	4b25      	ldr	r3, [pc, #148]	; (8009d38 <UART_SetConfig+0xd4c>)
 8009ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ca4:	e00c      	b.n	8009cc0 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009ca6:	4b25      	ldr	r3, [pc, #148]	; (8009d3c <UART_SetConfig+0xd50>)
 8009ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009caa:	e009      	b.n	8009cc0 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009cb2:	e005      	b.n	8009cc0 <UART_SetConfig+0xcd4>
      default:
        pclk = 0U;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009cbe:	bf00      	nop
    }

    if (pclk != 0U)
 8009cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d021      	beq.n	8009d0a <UART_SetConfig+0xd1e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cca:	4a1d      	ldr	r2, [pc, #116]	; (8009d40 <UART_SetConfig+0xd54>)
 8009ccc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd4:	fbb3 f2f2 	udiv	r2, r3, r2
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	085b      	lsrs	r3, r3, #1
 8009cde:	441a      	add	r2, r3
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cee:	2b0f      	cmp	r3, #15
 8009cf0:	d908      	bls.n	8009d04 <UART_SetConfig+0xd18>
 8009cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cf8:	d204      	bcs.n	8009d04 <UART_SetConfig+0xd18>
      {
        huart->Instance->BRR = usartdiv;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d00:	60da      	str	r2, [r3, #12]
 8009d02:	e002      	b.n	8009d0a <UART_SetConfig+0xd1e>
      }
      else
      {
        ret = HAL_ERROR;
 8009d04:	2301      	movs	r3, #1
 8009d06:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2201      	movs	r2, #1
 8009d16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2200      	movs	r2, #0
 8009d24:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009d26:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3738      	adds	r7, #56	; 0x38
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8009d34:	58024400 	.word	0x58024400
 8009d38:	03d09000 	.word	0x03d09000
 8009d3c:	003d0900 	.word	0x003d0900
 8009d40:	0800b474 	.word	0x0800b474

08009d44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d50:	f003 0301 	and.w	r3, r3, #1
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d00a      	beq.n	8009d6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	430a      	orrs	r2, r1
 8009d6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d72:	f003 0302 	and.w	r3, r3, #2
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d00a      	beq.n	8009d90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	430a      	orrs	r2, r1
 8009d8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d94:	f003 0304 	and.w	r3, r3, #4
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d00a      	beq.n	8009db2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	430a      	orrs	r2, r1
 8009db0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009db6:	f003 0308 	and.w	r3, r3, #8
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d00a      	beq.n	8009dd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	430a      	orrs	r2, r1
 8009dd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dd8:	f003 0310 	and.w	r3, r3, #16
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d00a      	beq.n	8009df6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	430a      	orrs	r2, r1
 8009df4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dfa:	f003 0320 	and.w	r3, r3, #32
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d00a      	beq.n	8009e18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	689b      	ldr	r3, [r3, #8]
 8009e08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	430a      	orrs	r2, r1
 8009e16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d01a      	beq.n	8009e5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	430a      	orrs	r2, r1
 8009e38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e42:	d10a      	bne.n	8009e5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	430a      	orrs	r2, r1
 8009e58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d00a      	beq.n	8009e7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	430a      	orrs	r2, r1
 8009e7a:	605a      	str	r2, [r3, #4]
  }
}
 8009e7c:	bf00      	nop
 8009e7e:	370c      	adds	r7, #12
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr

08009e88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b086      	sub	sp, #24
 8009e8c:	af02      	add	r7, sp, #8
 8009e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2200      	movs	r2, #0
 8009e94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009e98:	f7f7 fee0 	bl	8001c5c <HAL_GetTick>
 8009e9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f003 0308 	and.w	r3, r3, #8
 8009ea8:	2b08      	cmp	r3, #8
 8009eaa:	d10e      	bne.n	8009eca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009eac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009eb0:	9300      	str	r3, [sp, #0]
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 f82c 	bl	8009f18 <UART_WaitOnFlagUntilTimeout>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d001      	beq.n	8009eca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ec6:	2303      	movs	r3, #3
 8009ec8:	e022      	b.n	8009f10 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f003 0304 	and.w	r3, r3, #4
 8009ed4:	2b04      	cmp	r3, #4
 8009ed6:	d10e      	bne.n	8009ef6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ed8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009edc:	9300      	str	r3, [sp, #0]
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 f816 	bl	8009f18 <UART_WaitOnFlagUntilTimeout>
 8009eec:	4603      	mov	r3, r0
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d001      	beq.n	8009ef6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ef2:	2303      	movs	r3, #3
 8009ef4:	e00c      	b.n	8009f10 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2220      	movs	r2, #32
 8009efa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2220      	movs	r2, #32
 8009f02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009f0e:	2300      	movs	r3, #0
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3710      	adds	r7, #16
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	60b9      	str	r1, [r7, #8]
 8009f22:	603b      	str	r3, [r7, #0]
 8009f24:	4613      	mov	r3, r2
 8009f26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f28:	e062      	b.n	8009ff0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f2a:	69bb      	ldr	r3, [r7, #24]
 8009f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f30:	d05e      	beq.n	8009ff0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f32:	f7f7 fe93 	bl	8001c5c <HAL_GetTick>
 8009f36:	4602      	mov	r2, r0
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	1ad3      	subs	r3, r2, r3
 8009f3c:	69ba      	ldr	r2, [r7, #24]
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d302      	bcc.n	8009f48 <UART_WaitOnFlagUntilTimeout+0x30>
 8009f42:	69bb      	ldr	r3, [r7, #24]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d11d      	bne.n	8009f84 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	681a      	ldr	r2, [r3, #0]
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009f56:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	689a      	ldr	r2, [r3, #8]
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f022 0201 	bic.w	r2, r2, #1
 8009f66:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2220      	movs	r2, #32
 8009f6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2220      	movs	r2, #32
 8009f74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009f80:	2303      	movs	r3, #3
 8009f82:	e045      	b.n	800a010 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f003 0304 	and.w	r3, r3, #4
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d02e      	beq.n	8009ff0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	69db      	ldr	r3, [r3, #28]
 8009f98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fa0:	d126      	bne.n	8009ff0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009faa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009fba:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	689a      	ldr	r2, [r3, #8]
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f022 0201 	bic.w	r2, r2, #1
 8009fca:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2220      	movs	r2, #32
 8009fd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2220      	movs	r2, #32
 8009fd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2220      	movs	r2, #32
 8009fe0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8009fec:	2303      	movs	r3, #3
 8009fee:	e00f      	b.n	800a010 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	69da      	ldr	r2, [r3, #28]
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	4013      	ands	r3, r2
 8009ffa:	68ba      	ldr	r2, [r7, #8]
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	bf0c      	ite	eq
 800a000:	2301      	moveq	r3, #1
 800a002:	2300      	movne	r3, #0
 800a004:	b2db      	uxtb	r3, r3
 800a006:	461a      	mov	r2, r3
 800a008:	79fb      	ldrb	r3, [r7, #7]
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d08d      	beq.n	8009f2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a00e:	2300      	movs	r3, #0
}
 800a010:	4618      	mov	r0, r3
 800a012:	3710      	adds	r7, #16
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a018:	b480      	push	{r7}
 800a01a:	b085      	sub	sp, #20
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a026:	2b01      	cmp	r3, #1
 800a028:	d101      	bne.n	800a02e <HAL_UARTEx_DisableFifoMode+0x16>
 800a02a:	2302      	movs	r3, #2
 800a02c:	e027      	b.n	800a07e <HAL_UARTEx_DisableFifoMode+0x66>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2201      	movs	r2, #1
 800a032:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2224      	movs	r2, #36	; 0x24
 800a03a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f022 0201 	bic.w	r2, r2, #1
 800a054:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a05c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2200      	movs	r2, #0
 800a062:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	68fa      	ldr	r2, [r7, #12]
 800a06a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2220      	movs	r2, #32
 800a070:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2200      	movs	r2, #0
 800a078:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a07c:	2300      	movs	r3, #0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3714      	adds	r7, #20
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr

0800a08a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a08a:	b580      	push	{r7, lr}
 800a08c:	b084      	sub	sp, #16
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
 800a092:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d101      	bne.n	800a0a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a09e:	2302      	movs	r3, #2
 800a0a0:	e02d      	b.n	800a0fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2224      	movs	r2, #36	; 0x24
 800a0ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f022 0201 	bic.w	r2, r2, #1
 800a0c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	689b      	ldr	r3, [r3, #8]
 800a0d0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	683a      	ldr	r2, [r7, #0]
 800a0da:	430a      	orrs	r2, r1
 800a0dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 f850 	bl	800a184 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	68fa      	ldr	r2, [r7, #12]
 800a0ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2220      	movs	r2, #32
 800a0f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a0fc:	2300      	movs	r3, #0
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3710      	adds	r7, #16
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}

0800a106 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a106:	b580      	push	{r7, lr}
 800a108:	b084      	sub	sp, #16
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
 800a10e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a116:	2b01      	cmp	r3, #1
 800a118:	d101      	bne.n	800a11e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a11a:	2302      	movs	r3, #2
 800a11c:	e02d      	b.n	800a17a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2201      	movs	r2, #1
 800a122:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2224      	movs	r2, #36	; 0x24
 800a12a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f022 0201 	bic.w	r2, r2, #1
 800a144:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	689b      	ldr	r3, [r3, #8]
 800a14c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	683a      	ldr	r2, [r7, #0]
 800a156:	430a      	orrs	r2, r1
 800a158:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 f812 	bl	800a184 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	68fa      	ldr	r2, [r7, #12]
 800a166:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2220      	movs	r2, #32
 800a16c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2200      	movs	r2, #0
 800a174:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a178:	2300      	movs	r3, #0
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3710      	adds	r7, #16
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
	...

0800a184 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a184:	b480      	push	{r7}
 800a186:	b089      	sub	sp, #36	; 0x24
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a18c:	4a2f      	ldr	r2, [pc, #188]	; (800a24c <UARTEx_SetNbDataToProcess+0xc8>)
 800a18e:	f107 0314 	add.w	r3, r7, #20
 800a192:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a196:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a19a:	4a2d      	ldr	r2, [pc, #180]	; (800a250 <UARTEx_SetNbDataToProcess+0xcc>)
 800a19c:	f107 030c 	add.w	r3, r7, #12
 800a1a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a1a4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d108      	bne.n	800a1c2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a1c0:	e03d      	b.n	800a23e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a1c2:	2310      	movs	r3, #16
 800a1c4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a1c6:	2310      	movs	r3, #16
 800a1c8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	689b      	ldr	r3, [r3, #8]
 800a1d0:	0e5b      	lsrs	r3, r3, #25
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	f003 0307 	and.w	r3, r3, #7
 800a1d8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	0f5b      	lsrs	r3, r3, #29
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	f003 0307 	and.w	r3, r3, #7
 800a1e8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a1ea:	7fbb      	ldrb	r3, [r7, #30]
 800a1ec:	7f3a      	ldrb	r2, [r7, #28]
 800a1ee:	f107 0120 	add.w	r1, r7, #32
 800a1f2:	440a      	add	r2, r1
 800a1f4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a1f8:	fb02 f303 	mul.w	r3, r2, r3
 800a1fc:	7f3a      	ldrb	r2, [r7, #28]
 800a1fe:	f107 0120 	add.w	r1, r7, #32
 800a202:	440a      	add	r2, r1
 800a204:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a208:	fb93 f3f2 	sdiv	r3, r3, r2
 800a20c:	b29a      	uxth	r2, r3
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a214:	7ffb      	ldrb	r3, [r7, #31]
 800a216:	7f7a      	ldrb	r2, [r7, #29]
 800a218:	f107 0120 	add.w	r1, r7, #32
 800a21c:	440a      	add	r2, r1
 800a21e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a222:	fb02 f303 	mul.w	r3, r2, r3
 800a226:	7f7a      	ldrb	r2, [r7, #29]
 800a228:	f107 0120 	add.w	r1, r7, #32
 800a22c:	440a      	add	r2, r1
 800a22e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a232:	fb93 f3f2 	sdiv	r3, r3, r2
 800a236:	b29a      	uxth	r2, r3
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a23e:	bf00      	nop
 800a240:	3724      	adds	r7, #36	; 0x24
 800a242:	46bd      	mov	sp, r7
 800a244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a248:	4770      	bx	lr
 800a24a:	bf00      	nop
 800a24c:	0800ac4c 	.word	0x0800ac4c
 800a250:	0800ac54 	.word	0x0800ac54

0800a254 <calloc>:
 800a254:	4b02      	ldr	r3, [pc, #8]	; (800a260 <calloc+0xc>)
 800a256:	460a      	mov	r2, r1
 800a258:	4601      	mov	r1, r0
 800a25a:	6818      	ldr	r0, [r3, #0]
 800a25c:	f000 b850 	b.w	800a300 <_calloc_r>
 800a260:	24000018 	.word	0x24000018

0800a264 <__errno>:
 800a264:	4b01      	ldr	r3, [pc, #4]	; (800a26c <__errno+0x8>)
 800a266:	6818      	ldr	r0, [r3, #0]
 800a268:	4770      	bx	lr
 800a26a:	bf00      	nop
 800a26c:	24000018 	.word	0x24000018

0800a270 <exit>:
 800a270:	b508      	push	{r3, lr}
 800a272:	4b07      	ldr	r3, [pc, #28]	; (800a290 <exit+0x20>)
 800a274:	4604      	mov	r4, r0
 800a276:	b113      	cbz	r3, 800a27e <exit+0xe>
 800a278:	2100      	movs	r1, #0
 800a27a:	f3af 8000 	nop.w
 800a27e:	4b05      	ldr	r3, [pc, #20]	; (800a294 <exit+0x24>)
 800a280:	6818      	ldr	r0, [r3, #0]
 800a282:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a284:	b103      	cbz	r3, 800a288 <exit+0x18>
 800a286:	4798      	blx	r3
 800a288:	4620      	mov	r0, r4
 800a28a:	f7f7 fb0d 	bl	80018a8 <_exit>
 800a28e:	bf00      	nop
 800a290:	00000000 	.word	0x00000000
 800a294:	0800b48c 	.word	0x0800b48c

0800a298 <__libc_init_array>:
 800a298:	b570      	push	{r4, r5, r6, lr}
 800a29a:	4e0d      	ldr	r6, [pc, #52]	; (800a2d0 <__libc_init_array+0x38>)
 800a29c:	4c0d      	ldr	r4, [pc, #52]	; (800a2d4 <__libc_init_array+0x3c>)
 800a29e:	1ba4      	subs	r4, r4, r6
 800a2a0:	10a4      	asrs	r4, r4, #2
 800a2a2:	2500      	movs	r5, #0
 800a2a4:	42a5      	cmp	r5, r4
 800a2a6:	d109      	bne.n	800a2bc <__libc_init_array+0x24>
 800a2a8:	4e0b      	ldr	r6, [pc, #44]	; (800a2d8 <__libc_init_array+0x40>)
 800a2aa:	4c0c      	ldr	r4, [pc, #48]	; (800a2dc <__libc_init_array+0x44>)
 800a2ac:	f000 fc9e 	bl	800abec <_init>
 800a2b0:	1ba4      	subs	r4, r4, r6
 800a2b2:	10a4      	asrs	r4, r4, #2
 800a2b4:	2500      	movs	r5, #0
 800a2b6:	42a5      	cmp	r5, r4
 800a2b8:	d105      	bne.n	800a2c6 <__libc_init_array+0x2e>
 800a2ba:	bd70      	pop	{r4, r5, r6, pc}
 800a2bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a2c0:	4798      	blx	r3
 800a2c2:	3501      	adds	r5, #1
 800a2c4:	e7ee      	b.n	800a2a4 <__libc_init_array+0xc>
 800a2c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a2ca:	4798      	blx	r3
 800a2cc:	3501      	adds	r5, #1
 800a2ce:	e7f2      	b.n	800a2b6 <__libc_init_array+0x1e>
 800a2d0:	0800b4f8 	.word	0x0800b4f8
 800a2d4:	0800b4f8 	.word	0x0800b4f8
 800a2d8:	0800b4f8 	.word	0x0800b4f8
 800a2dc:	0800b4fc 	.word	0x0800b4fc

0800a2e0 <malloc>:
 800a2e0:	4b02      	ldr	r3, [pc, #8]	; (800a2ec <malloc+0xc>)
 800a2e2:	4601      	mov	r1, r0
 800a2e4:	6818      	ldr	r0, [r3, #0]
 800a2e6:	f000 b867 	b.w	800a3b8 <_malloc_r>
 800a2ea:	bf00      	nop
 800a2ec:	24000018 	.word	0x24000018

0800a2f0 <memset>:
 800a2f0:	4402      	add	r2, r0
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d100      	bne.n	800a2fa <memset+0xa>
 800a2f8:	4770      	bx	lr
 800a2fa:	f803 1b01 	strb.w	r1, [r3], #1
 800a2fe:	e7f9      	b.n	800a2f4 <memset+0x4>

0800a300 <_calloc_r>:
 800a300:	b538      	push	{r3, r4, r5, lr}
 800a302:	fb02 f401 	mul.w	r4, r2, r1
 800a306:	4621      	mov	r1, r4
 800a308:	f000 f856 	bl	800a3b8 <_malloc_r>
 800a30c:	4605      	mov	r5, r0
 800a30e:	b118      	cbz	r0, 800a318 <_calloc_r+0x18>
 800a310:	4622      	mov	r2, r4
 800a312:	2100      	movs	r1, #0
 800a314:	f7ff ffec 	bl	800a2f0 <memset>
 800a318:	4628      	mov	r0, r5
 800a31a:	bd38      	pop	{r3, r4, r5, pc}

0800a31c <_free_r>:
 800a31c:	b538      	push	{r3, r4, r5, lr}
 800a31e:	4605      	mov	r5, r0
 800a320:	2900      	cmp	r1, #0
 800a322:	d045      	beq.n	800a3b0 <_free_r+0x94>
 800a324:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a328:	1f0c      	subs	r4, r1, #4
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	bfb8      	it	lt
 800a32e:	18e4      	addlt	r4, r4, r3
 800a330:	f000 fbae 	bl	800aa90 <__malloc_lock>
 800a334:	4a1f      	ldr	r2, [pc, #124]	; (800a3b4 <_free_r+0x98>)
 800a336:	6813      	ldr	r3, [r2, #0]
 800a338:	4610      	mov	r0, r2
 800a33a:	b933      	cbnz	r3, 800a34a <_free_r+0x2e>
 800a33c:	6063      	str	r3, [r4, #4]
 800a33e:	6014      	str	r4, [r2, #0]
 800a340:	4628      	mov	r0, r5
 800a342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a346:	f000 bba4 	b.w	800aa92 <__malloc_unlock>
 800a34a:	42a3      	cmp	r3, r4
 800a34c:	d90c      	bls.n	800a368 <_free_r+0x4c>
 800a34e:	6821      	ldr	r1, [r4, #0]
 800a350:	1862      	adds	r2, r4, r1
 800a352:	4293      	cmp	r3, r2
 800a354:	bf04      	itt	eq
 800a356:	681a      	ldreq	r2, [r3, #0]
 800a358:	685b      	ldreq	r3, [r3, #4]
 800a35a:	6063      	str	r3, [r4, #4]
 800a35c:	bf04      	itt	eq
 800a35e:	1852      	addeq	r2, r2, r1
 800a360:	6022      	streq	r2, [r4, #0]
 800a362:	6004      	str	r4, [r0, #0]
 800a364:	e7ec      	b.n	800a340 <_free_r+0x24>
 800a366:	4613      	mov	r3, r2
 800a368:	685a      	ldr	r2, [r3, #4]
 800a36a:	b10a      	cbz	r2, 800a370 <_free_r+0x54>
 800a36c:	42a2      	cmp	r2, r4
 800a36e:	d9fa      	bls.n	800a366 <_free_r+0x4a>
 800a370:	6819      	ldr	r1, [r3, #0]
 800a372:	1858      	adds	r0, r3, r1
 800a374:	42a0      	cmp	r0, r4
 800a376:	d10b      	bne.n	800a390 <_free_r+0x74>
 800a378:	6820      	ldr	r0, [r4, #0]
 800a37a:	4401      	add	r1, r0
 800a37c:	1858      	adds	r0, r3, r1
 800a37e:	4282      	cmp	r2, r0
 800a380:	6019      	str	r1, [r3, #0]
 800a382:	d1dd      	bne.n	800a340 <_free_r+0x24>
 800a384:	6810      	ldr	r0, [r2, #0]
 800a386:	6852      	ldr	r2, [r2, #4]
 800a388:	605a      	str	r2, [r3, #4]
 800a38a:	4401      	add	r1, r0
 800a38c:	6019      	str	r1, [r3, #0]
 800a38e:	e7d7      	b.n	800a340 <_free_r+0x24>
 800a390:	d902      	bls.n	800a398 <_free_r+0x7c>
 800a392:	230c      	movs	r3, #12
 800a394:	602b      	str	r3, [r5, #0]
 800a396:	e7d3      	b.n	800a340 <_free_r+0x24>
 800a398:	6820      	ldr	r0, [r4, #0]
 800a39a:	1821      	adds	r1, r4, r0
 800a39c:	428a      	cmp	r2, r1
 800a39e:	bf04      	itt	eq
 800a3a0:	6811      	ldreq	r1, [r2, #0]
 800a3a2:	6852      	ldreq	r2, [r2, #4]
 800a3a4:	6062      	str	r2, [r4, #4]
 800a3a6:	bf04      	itt	eq
 800a3a8:	1809      	addeq	r1, r1, r0
 800a3aa:	6021      	streq	r1, [r4, #0]
 800a3ac:	605c      	str	r4, [r3, #4]
 800a3ae:	e7c7      	b.n	800a340 <_free_r+0x24>
 800a3b0:	bd38      	pop	{r3, r4, r5, pc}
 800a3b2:	bf00      	nop
 800a3b4:	240000b0 	.word	0x240000b0

0800a3b8 <_malloc_r>:
 800a3b8:	b570      	push	{r4, r5, r6, lr}
 800a3ba:	1ccd      	adds	r5, r1, #3
 800a3bc:	f025 0503 	bic.w	r5, r5, #3
 800a3c0:	3508      	adds	r5, #8
 800a3c2:	2d0c      	cmp	r5, #12
 800a3c4:	bf38      	it	cc
 800a3c6:	250c      	movcc	r5, #12
 800a3c8:	2d00      	cmp	r5, #0
 800a3ca:	4606      	mov	r6, r0
 800a3cc:	db01      	blt.n	800a3d2 <_malloc_r+0x1a>
 800a3ce:	42a9      	cmp	r1, r5
 800a3d0:	d903      	bls.n	800a3da <_malloc_r+0x22>
 800a3d2:	230c      	movs	r3, #12
 800a3d4:	6033      	str	r3, [r6, #0]
 800a3d6:	2000      	movs	r0, #0
 800a3d8:	bd70      	pop	{r4, r5, r6, pc}
 800a3da:	f000 fb59 	bl	800aa90 <__malloc_lock>
 800a3de:	4a21      	ldr	r2, [pc, #132]	; (800a464 <_malloc_r+0xac>)
 800a3e0:	6814      	ldr	r4, [r2, #0]
 800a3e2:	4621      	mov	r1, r4
 800a3e4:	b991      	cbnz	r1, 800a40c <_malloc_r+0x54>
 800a3e6:	4c20      	ldr	r4, [pc, #128]	; (800a468 <_malloc_r+0xb0>)
 800a3e8:	6823      	ldr	r3, [r4, #0]
 800a3ea:	b91b      	cbnz	r3, 800a3f4 <_malloc_r+0x3c>
 800a3ec:	4630      	mov	r0, r6
 800a3ee:	f000 f8a1 	bl	800a534 <_sbrk_r>
 800a3f2:	6020      	str	r0, [r4, #0]
 800a3f4:	4629      	mov	r1, r5
 800a3f6:	4630      	mov	r0, r6
 800a3f8:	f000 f89c 	bl	800a534 <_sbrk_r>
 800a3fc:	1c43      	adds	r3, r0, #1
 800a3fe:	d124      	bne.n	800a44a <_malloc_r+0x92>
 800a400:	230c      	movs	r3, #12
 800a402:	6033      	str	r3, [r6, #0]
 800a404:	4630      	mov	r0, r6
 800a406:	f000 fb44 	bl	800aa92 <__malloc_unlock>
 800a40a:	e7e4      	b.n	800a3d6 <_malloc_r+0x1e>
 800a40c:	680b      	ldr	r3, [r1, #0]
 800a40e:	1b5b      	subs	r3, r3, r5
 800a410:	d418      	bmi.n	800a444 <_malloc_r+0x8c>
 800a412:	2b0b      	cmp	r3, #11
 800a414:	d90f      	bls.n	800a436 <_malloc_r+0x7e>
 800a416:	600b      	str	r3, [r1, #0]
 800a418:	50cd      	str	r5, [r1, r3]
 800a41a:	18cc      	adds	r4, r1, r3
 800a41c:	4630      	mov	r0, r6
 800a41e:	f000 fb38 	bl	800aa92 <__malloc_unlock>
 800a422:	f104 000b 	add.w	r0, r4, #11
 800a426:	1d23      	adds	r3, r4, #4
 800a428:	f020 0007 	bic.w	r0, r0, #7
 800a42c:	1ac3      	subs	r3, r0, r3
 800a42e:	d0d3      	beq.n	800a3d8 <_malloc_r+0x20>
 800a430:	425a      	negs	r2, r3
 800a432:	50e2      	str	r2, [r4, r3]
 800a434:	e7d0      	b.n	800a3d8 <_malloc_r+0x20>
 800a436:	428c      	cmp	r4, r1
 800a438:	684b      	ldr	r3, [r1, #4]
 800a43a:	bf16      	itet	ne
 800a43c:	6063      	strne	r3, [r4, #4]
 800a43e:	6013      	streq	r3, [r2, #0]
 800a440:	460c      	movne	r4, r1
 800a442:	e7eb      	b.n	800a41c <_malloc_r+0x64>
 800a444:	460c      	mov	r4, r1
 800a446:	6849      	ldr	r1, [r1, #4]
 800a448:	e7cc      	b.n	800a3e4 <_malloc_r+0x2c>
 800a44a:	1cc4      	adds	r4, r0, #3
 800a44c:	f024 0403 	bic.w	r4, r4, #3
 800a450:	42a0      	cmp	r0, r4
 800a452:	d005      	beq.n	800a460 <_malloc_r+0xa8>
 800a454:	1a21      	subs	r1, r4, r0
 800a456:	4630      	mov	r0, r6
 800a458:	f000 f86c 	bl	800a534 <_sbrk_r>
 800a45c:	3001      	adds	r0, #1
 800a45e:	d0cf      	beq.n	800a400 <_malloc_r+0x48>
 800a460:	6025      	str	r5, [r4, #0]
 800a462:	e7db      	b.n	800a41c <_malloc_r+0x64>
 800a464:	240000b0 	.word	0x240000b0
 800a468:	240000b4 	.word	0x240000b4

0800a46c <_puts_r>:
 800a46c:	b570      	push	{r4, r5, r6, lr}
 800a46e:	460e      	mov	r6, r1
 800a470:	4605      	mov	r5, r0
 800a472:	b118      	cbz	r0, 800a47c <_puts_r+0x10>
 800a474:	6983      	ldr	r3, [r0, #24]
 800a476:	b90b      	cbnz	r3, 800a47c <_puts_r+0x10>
 800a478:	f000 fa1c 	bl	800a8b4 <__sinit>
 800a47c:	69ab      	ldr	r3, [r5, #24]
 800a47e:	68ac      	ldr	r4, [r5, #8]
 800a480:	b913      	cbnz	r3, 800a488 <_puts_r+0x1c>
 800a482:	4628      	mov	r0, r5
 800a484:	f000 fa16 	bl	800a8b4 <__sinit>
 800a488:	4b23      	ldr	r3, [pc, #140]	; (800a518 <_puts_r+0xac>)
 800a48a:	429c      	cmp	r4, r3
 800a48c:	d117      	bne.n	800a4be <_puts_r+0x52>
 800a48e:	686c      	ldr	r4, [r5, #4]
 800a490:	89a3      	ldrh	r3, [r4, #12]
 800a492:	071b      	lsls	r3, r3, #28
 800a494:	d51d      	bpl.n	800a4d2 <_puts_r+0x66>
 800a496:	6923      	ldr	r3, [r4, #16]
 800a498:	b1db      	cbz	r3, 800a4d2 <_puts_r+0x66>
 800a49a:	3e01      	subs	r6, #1
 800a49c:	68a3      	ldr	r3, [r4, #8]
 800a49e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a4a2:	3b01      	subs	r3, #1
 800a4a4:	60a3      	str	r3, [r4, #8]
 800a4a6:	b9e9      	cbnz	r1, 800a4e4 <_puts_r+0x78>
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	da2e      	bge.n	800a50a <_puts_r+0x9e>
 800a4ac:	4622      	mov	r2, r4
 800a4ae:	210a      	movs	r1, #10
 800a4b0:	4628      	mov	r0, r5
 800a4b2:	f000 f84f 	bl	800a554 <__swbuf_r>
 800a4b6:	3001      	adds	r0, #1
 800a4b8:	d011      	beq.n	800a4de <_puts_r+0x72>
 800a4ba:	200a      	movs	r0, #10
 800a4bc:	e011      	b.n	800a4e2 <_puts_r+0x76>
 800a4be:	4b17      	ldr	r3, [pc, #92]	; (800a51c <_puts_r+0xb0>)
 800a4c0:	429c      	cmp	r4, r3
 800a4c2:	d101      	bne.n	800a4c8 <_puts_r+0x5c>
 800a4c4:	68ac      	ldr	r4, [r5, #8]
 800a4c6:	e7e3      	b.n	800a490 <_puts_r+0x24>
 800a4c8:	4b15      	ldr	r3, [pc, #84]	; (800a520 <_puts_r+0xb4>)
 800a4ca:	429c      	cmp	r4, r3
 800a4cc:	bf08      	it	eq
 800a4ce:	68ec      	ldreq	r4, [r5, #12]
 800a4d0:	e7de      	b.n	800a490 <_puts_r+0x24>
 800a4d2:	4621      	mov	r1, r4
 800a4d4:	4628      	mov	r0, r5
 800a4d6:	f000 f88f 	bl	800a5f8 <__swsetup_r>
 800a4da:	2800      	cmp	r0, #0
 800a4dc:	d0dd      	beq.n	800a49a <_puts_r+0x2e>
 800a4de:	f04f 30ff 	mov.w	r0, #4294967295
 800a4e2:	bd70      	pop	{r4, r5, r6, pc}
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	da04      	bge.n	800a4f2 <_puts_r+0x86>
 800a4e8:	69a2      	ldr	r2, [r4, #24]
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	dc06      	bgt.n	800a4fc <_puts_r+0x90>
 800a4ee:	290a      	cmp	r1, #10
 800a4f0:	d004      	beq.n	800a4fc <_puts_r+0x90>
 800a4f2:	6823      	ldr	r3, [r4, #0]
 800a4f4:	1c5a      	adds	r2, r3, #1
 800a4f6:	6022      	str	r2, [r4, #0]
 800a4f8:	7019      	strb	r1, [r3, #0]
 800a4fa:	e7cf      	b.n	800a49c <_puts_r+0x30>
 800a4fc:	4622      	mov	r2, r4
 800a4fe:	4628      	mov	r0, r5
 800a500:	f000 f828 	bl	800a554 <__swbuf_r>
 800a504:	3001      	adds	r0, #1
 800a506:	d1c9      	bne.n	800a49c <_puts_r+0x30>
 800a508:	e7e9      	b.n	800a4de <_puts_r+0x72>
 800a50a:	6823      	ldr	r3, [r4, #0]
 800a50c:	200a      	movs	r0, #10
 800a50e:	1c5a      	adds	r2, r3, #1
 800a510:	6022      	str	r2, [r4, #0]
 800a512:	7018      	strb	r0, [r3, #0]
 800a514:	e7e5      	b.n	800a4e2 <_puts_r+0x76>
 800a516:	bf00      	nop
 800a518:	0800b4b0 	.word	0x0800b4b0
 800a51c:	0800b4d0 	.word	0x0800b4d0
 800a520:	0800b490 	.word	0x0800b490

0800a524 <puts>:
 800a524:	4b02      	ldr	r3, [pc, #8]	; (800a530 <puts+0xc>)
 800a526:	4601      	mov	r1, r0
 800a528:	6818      	ldr	r0, [r3, #0]
 800a52a:	f7ff bf9f 	b.w	800a46c <_puts_r>
 800a52e:	bf00      	nop
 800a530:	24000018 	.word	0x24000018

0800a534 <_sbrk_r>:
 800a534:	b538      	push	{r3, r4, r5, lr}
 800a536:	4c06      	ldr	r4, [pc, #24]	; (800a550 <_sbrk_r+0x1c>)
 800a538:	2300      	movs	r3, #0
 800a53a:	4605      	mov	r5, r0
 800a53c:	4608      	mov	r0, r1
 800a53e:	6023      	str	r3, [r4, #0]
 800a540:	f7f7 fa2a 	bl	8001998 <_sbrk>
 800a544:	1c43      	adds	r3, r0, #1
 800a546:	d102      	bne.n	800a54e <_sbrk_r+0x1a>
 800a548:	6823      	ldr	r3, [r4, #0]
 800a54a:	b103      	cbz	r3, 800a54e <_sbrk_r+0x1a>
 800a54c:	602b      	str	r3, [r5, #0]
 800a54e:	bd38      	pop	{r3, r4, r5, pc}
 800a550:	240003e4 	.word	0x240003e4

0800a554 <__swbuf_r>:
 800a554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a556:	460e      	mov	r6, r1
 800a558:	4614      	mov	r4, r2
 800a55a:	4605      	mov	r5, r0
 800a55c:	b118      	cbz	r0, 800a566 <__swbuf_r+0x12>
 800a55e:	6983      	ldr	r3, [r0, #24]
 800a560:	b90b      	cbnz	r3, 800a566 <__swbuf_r+0x12>
 800a562:	f000 f9a7 	bl	800a8b4 <__sinit>
 800a566:	4b21      	ldr	r3, [pc, #132]	; (800a5ec <__swbuf_r+0x98>)
 800a568:	429c      	cmp	r4, r3
 800a56a:	d12a      	bne.n	800a5c2 <__swbuf_r+0x6e>
 800a56c:	686c      	ldr	r4, [r5, #4]
 800a56e:	69a3      	ldr	r3, [r4, #24]
 800a570:	60a3      	str	r3, [r4, #8]
 800a572:	89a3      	ldrh	r3, [r4, #12]
 800a574:	071a      	lsls	r2, r3, #28
 800a576:	d52e      	bpl.n	800a5d6 <__swbuf_r+0x82>
 800a578:	6923      	ldr	r3, [r4, #16]
 800a57a:	b363      	cbz	r3, 800a5d6 <__swbuf_r+0x82>
 800a57c:	6923      	ldr	r3, [r4, #16]
 800a57e:	6820      	ldr	r0, [r4, #0]
 800a580:	1ac0      	subs	r0, r0, r3
 800a582:	6963      	ldr	r3, [r4, #20]
 800a584:	b2f6      	uxtb	r6, r6
 800a586:	4283      	cmp	r3, r0
 800a588:	4637      	mov	r7, r6
 800a58a:	dc04      	bgt.n	800a596 <__swbuf_r+0x42>
 800a58c:	4621      	mov	r1, r4
 800a58e:	4628      	mov	r0, r5
 800a590:	f000 f926 	bl	800a7e0 <_fflush_r>
 800a594:	bb28      	cbnz	r0, 800a5e2 <__swbuf_r+0x8e>
 800a596:	68a3      	ldr	r3, [r4, #8]
 800a598:	3b01      	subs	r3, #1
 800a59a:	60a3      	str	r3, [r4, #8]
 800a59c:	6823      	ldr	r3, [r4, #0]
 800a59e:	1c5a      	adds	r2, r3, #1
 800a5a0:	6022      	str	r2, [r4, #0]
 800a5a2:	701e      	strb	r6, [r3, #0]
 800a5a4:	6963      	ldr	r3, [r4, #20]
 800a5a6:	3001      	adds	r0, #1
 800a5a8:	4283      	cmp	r3, r0
 800a5aa:	d004      	beq.n	800a5b6 <__swbuf_r+0x62>
 800a5ac:	89a3      	ldrh	r3, [r4, #12]
 800a5ae:	07db      	lsls	r3, r3, #31
 800a5b0:	d519      	bpl.n	800a5e6 <__swbuf_r+0x92>
 800a5b2:	2e0a      	cmp	r6, #10
 800a5b4:	d117      	bne.n	800a5e6 <__swbuf_r+0x92>
 800a5b6:	4621      	mov	r1, r4
 800a5b8:	4628      	mov	r0, r5
 800a5ba:	f000 f911 	bl	800a7e0 <_fflush_r>
 800a5be:	b190      	cbz	r0, 800a5e6 <__swbuf_r+0x92>
 800a5c0:	e00f      	b.n	800a5e2 <__swbuf_r+0x8e>
 800a5c2:	4b0b      	ldr	r3, [pc, #44]	; (800a5f0 <__swbuf_r+0x9c>)
 800a5c4:	429c      	cmp	r4, r3
 800a5c6:	d101      	bne.n	800a5cc <__swbuf_r+0x78>
 800a5c8:	68ac      	ldr	r4, [r5, #8]
 800a5ca:	e7d0      	b.n	800a56e <__swbuf_r+0x1a>
 800a5cc:	4b09      	ldr	r3, [pc, #36]	; (800a5f4 <__swbuf_r+0xa0>)
 800a5ce:	429c      	cmp	r4, r3
 800a5d0:	bf08      	it	eq
 800a5d2:	68ec      	ldreq	r4, [r5, #12]
 800a5d4:	e7cb      	b.n	800a56e <__swbuf_r+0x1a>
 800a5d6:	4621      	mov	r1, r4
 800a5d8:	4628      	mov	r0, r5
 800a5da:	f000 f80d 	bl	800a5f8 <__swsetup_r>
 800a5de:	2800      	cmp	r0, #0
 800a5e0:	d0cc      	beq.n	800a57c <__swbuf_r+0x28>
 800a5e2:	f04f 37ff 	mov.w	r7, #4294967295
 800a5e6:	4638      	mov	r0, r7
 800a5e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5ea:	bf00      	nop
 800a5ec:	0800b4b0 	.word	0x0800b4b0
 800a5f0:	0800b4d0 	.word	0x0800b4d0
 800a5f4:	0800b490 	.word	0x0800b490

0800a5f8 <__swsetup_r>:
 800a5f8:	4b32      	ldr	r3, [pc, #200]	; (800a6c4 <__swsetup_r+0xcc>)
 800a5fa:	b570      	push	{r4, r5, r6, lr}
 800a5fc:	681d      	ldr	r5, [r3, #0]
 800a5fe:	4606      	mov	r6, r0
 800a600:	460c      	mov	r4, r1
 800a602:	b125      	cbz	r5, 800a60e <__swsetup_r+0x16>
 800a604:	69ab      	ldr	r3, [r5, #24]
 800a606:	b913      	cbnz	r3, 800a60e <__swsetup_r+0x16>
 800a608:	4628      	mov	r0, r5
 800a60a:	f000 f953 	bl	800a8b4 <__sinit>
 800a60e:	4b2e      	ldr	r3, [pc, #184]	; (800a6c8 <__swsetup_r+0xd0>)
 800a610:	429c      	cmp	r4, r3
 800a612:	d10f      	bne.n	800a634 <__swsetup_r+0x3c>
 800a614:	686c      	ldr	r4, [r5, #4]
 800a616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a61a:	b29a      	uxth	r2, r3
 800a61c:	0715      	lsls	r5, r2, #28
 800a61e:	d42c      	bmi.n	800a67a <__swsetup_r+0x82>
 800a620:	06d0      	lsls	r0, r2, #27
 800a622:	d411      	bmi.n	800a648 <__swsetup_r+0x50>
 800a624:	2209      	movs	r2, #9
 800a626:	6032      	str	r2, [r6, #0]
 800a628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a62c:	81a3      	strh	r3, [r4, #12]
 800a62e:	f04f 30ff 	mov.w	r0, #4294967295
 800a632:	e03e      	b.n	800a6b2 <__swsetup_r+0xba>
 800a634:	4b25      	ldr	r3, [pc, #148]	; (800a6cc <__swsetup_r+0xd4>)
 800a636:	429c      	cmp	r4, r3
 800a638:	d101      	bne.n	800a63e <__swsetup_r+0x46>
 800a63a:	68ac      	ldr	r4, [r5, #8]
 800a63c:	e7eb      	b.n	800a616 <__swsetup_r+0x1e>
 800a63e:	4b24      	ldr	r3, [pc, #144]	; (800a6d0 <__swsetup_r+0xd8>)
 800a640:	429c      	cmp	r4, r3
 800a642:	bf08      	it	eq
 800a644:	68ec      	ldreq	r4, [r5, #12]
 800a646:	e7e6      	b.n	800a616 <__swsetup_r+0x1e>
 800a648:	0751      	lsls	r1, r2, #29
 800a64a:	d512      	bpl.n	800a672 <__swsetup_r+0x7a>
 800a64c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a64e:	b141      	cbz	r1, 800a662 <__swsetup_r+0x6a>
 800a650:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a654:	4299      	cmp	r1, r3
 800a656:	d002      	beq.n	800a65e <__swsetup_r+0x66>
 800a658:	4630      	mov	r0, r6
 800a65a:	f7ff fe5f 	bl	800a31c <_free_r>
 800a65e:	2300      	movs	r3, #0
 800a660:	6363      	str	r3, [r4, #52]	; 0x34
 800a662:	89a3      	ldrh	r3, [r4, #12]
 800a664:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a668:	81a3      	strh	r3, [r4, #12]
 800a66a:	2300      	movs	r3, #0
 800a66c:	6063      	str	r3, [r4, #4]
 800a66e:	6923      	ldr	r3, [r4, #16]
 800a670:	6023      	str	r3, [r4, #0]
 800a672:	89a3      	ldrh	r3, [r4, #12]
 800a674:	f043 0308 	orr.w	r3, r3, #8
 800a678:	81a3      	strh	r3, [r4, #12]
 800a67a:	6923      	ldr	r3, [r4, #16]
 800a67c:	b94b      	cbnz	r3, 800a692 <__swsetup_r+0x9a>
 800a67e:	89a3      	ldrh	r3, [r4, #12]
 800a680:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a688:	d003      	beq.n	800a692 <__swsetup_r+0x9a>
 800a68a:	4621      	mov	r1, r4
 800a68c:	4630      	mov	r0, r6
 800a68e:	f000 f9bf 	bl	800aa10 <__smakebuf_r>
 800a692:	89a2      	ldrh	r2, [r4, #12]
 800a694:	f012 0301 	ands.w	r3, r2, #1
 800a698:	d00c      	beq.n	800a6b4 <__swsetup_r+0xbc>
 800a69a:	2300      	movs	r3, #0
 800a69c:	60a3      	str	r3, [r4, #8]
 800a69e:	6963      	ldr	r3, [r4, #20]
 800a6a0:	425b      	negs	r3, r3
 800a6a2:	61a3      	str	r3, [r4, #24]
 800a6a4:	6923      	ldr	r3, [r4, #16]
 800a6a6:	b953      	cbnz	r3, 800a6be <__swsetup_r+0xc6>
 800a6a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6ac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a6b0:	d1ba      	bne.n	800a628 <__swsetup_r+0x30>
 800a6b2:	bd70      	pop	{r4, r5, r6, pc}
 800a6b4:	0792      	lsls	r2, r2, #30
 800a6b6:	bf58      	it	pl
 800a6b8:	6963      	ldrpl	r3, [r4, #20]
 800a6ba:	60a3      	str	r3, [r4, #8]
 800a6bc:	e7f2      	b.n	800a6a4 <__swsetup_r+0xac>
 800a6be:	2000      	movs	r0, #0
 800a6c0:	e7f7      	b.n	800a6b2 <__swsetup_r+0xba>
 800a6c2:	bf00      	nop
 800a6c4:	24000018 	.word	0x24000018
 800a6c8:	0800b4b0 	.word	0x0800b4b0
 800a6cc:	0800b4d0 	.word	0x0800b4d0
 800a6d0:	0800b490 	.word	0x0800b490

0800a6d4 <__sflush_r>:
 800a6d4:	898a      	ldrh	r2, [r1, #12]
 800a6d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6da:	4605      	mov	r5, r0
 800a6dc:	0710      	lsls	r0, r2, #28
 800a6de:	460c      	mov	r4, r1
 800a6e0:	d458      	bmi.n	800a794 <__sflush_r+0xc0>
 800a6e2:	684b      	ldr	r3, [r1, #4]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	dc05      	bgt.n	800a6f4 <__sflush_r+0x20>
 800a6e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	dc02      	bgt.n	800a6f4 <__sflush_r+0x20>
 800a6ee:	2000      	movs	r0, #0
 800a6f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a6f6:	2e00      	cmp	r6, #0
 800a6f8:	d0f9      	beq.n	800a6ee <__sflush_r+0x1a>
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a700:	682f      	ldr	r7, [r5, #0]
 800a702:	6a21      	ldr	r1, [r4, #32]
 800a704:	602b      	str	r3, [r5, #0]
 800a706:	d032      	beq.n	800a76e <__sflush_r+0x9a>
 800a708:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a70a:	89a3      	ldrh	r3, [r4, #12]
 800a70c:	075a      	lsls	r2, r3, #29
 800a70e:	d505      	bpl.n	800a71c <__sflush_r+0x48>
 800a710:	6863      	ldr	r3, [r4, #4]
 800a712:	1ac0      	subs	r0, r0, r3
 800a714:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a716:	b10b      	cbz	r3, 800a71c <__sflush_r+0x48>
 800a718:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a71a:	1ac0      	subs	r0, r0, r3
 800a71c:	2300      	movs	r3, #0
 800a71e:	4602      	mov	r2, r0
 800a720:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a722:	6a21      	ldr	r1, [r4, #32]
 800a724:	4628      	mov	r0, r5
 800a726:	47b0      	blx	r6
 800a728:	1c43      	adds	r3, r0, #1
 800a72a:	89a3      	ldrh	r3, [r4, #12]
 800a72c:	d106      	bne.n	800a73c <__sflush_r+0x68>
 800a72e:	6829      	ldr	r1, [r5, #0]
 800a730:	291d      	cmp	r1, #29
 800a732:	d848      	bhi.n	800a7c6 <__sflush_r+0xf2>
 800a734:	4a29      	ldr	r2, [pc, #164]	; (800a7dc <__sflush_r+0x108>)
 800a736:	40ca      	lsrs	r2, r1
 800a738:	07d6      	lsls	r6, r2, #31
 800a73a:	d544      	bpl.n	800a7c6 <__sflush_r+0xf2>
 800a73c:	2200      	movs	r2, #0
 800a73e:	6062      	str	r2, [r4, #4]
 800a740:	04d9      	lsls	r1, r3, #19
 800a742:	6922      	ldr	r2, [r4, #16]
 800a744:	6022      	str	r2, [r4, #0]
 800a746:	d504      	bpl.n	800a752 <__sflush_r+0x7e>
 800a748:	1c42      	adds	r2, r0, #1
 800a74a:	d101      	bne.n	800a750 <__sflush_r+0x7c>
 800a74c:	682b      	ldr	r3, [r5, #0]
 800a74e:	b903      	cbnz	r3, 800a752 <__sflush_r+0x7e>
 800a750:	6560      	str	r0, [r4, #84]	; 0x54
 800a752:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a754:	602f      	str	r7, [r5, #0]
 800a756:	2900      	cmp	r1, #0
 800a758:	d0c9      	beq.n	800a6ee <__sflush_r+0x1a>
 800a75a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a75e:	4299      	cmp	r1, r3
 800a760:	d002      	beq.n	800a768 <__sflush_r+0x94>
 800a762:	4628      	mov	r0, r5
 800a764:	f7ff fdda 	bl	800a31c <_free_r>
 800a768:	2000      	movs	r0, #0
 800a76a:	6360      	str	r0, [r4, #52]	; 0x34
 800a76c:	e7c0      	b.n	800a6f0 <__sflush_r+0x1c>
 800a76e:	2301      	movs	r3, #1
 800a770:	4628      	mov	r0, r5
 800a772:	47b0      	blx	r6
 800a774:	1c41      	adds	r1, r0, #1
 800a776:	d1c8      	bne.n	800a70a <__sflush_r+0x36>
 800a778:	682b      	ldr	r3, [r5, #0]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d0c5      	beq.n	800a70a <__sflush_r+0x36>
 800a77e:	2b1d      	cmp	r3, #29
 800a780:	d001      	beq.n	800a786 <__sflush_r+0xb2>
 800a782:	2b16      	cmp	r3, #22
 800a784:	d101      	bne.n	800a78a <__sflush_r+0xb6>
 800a786:	602f      	str	r7, [r5, #0]
 800a788:	e7b1      	b.n	800a6ee <__sflush_r+0x1a>
 800a78a:	89a3      	ldrh	r3, [r4, #12]
 800a78c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a790:	81a3      	strh	r3, [r4, #12]
 800a792:	e7ad      	b.n	800a6f0 <__sflush_r+0x1c>
 800a794:	690f      	ldr	r7, [r1, #16]
 800a796:	2f00      	cmp	r7, #0
 800a798:	d0a9      	beq.n	800a6ee <__sflush_r+0x1a>
 800a79a:	0793      	lsls	r3, r2, #30
 800a79c:	680e      	ldr	r6, [r1, #0]
 800a79e:	bf08      	it	eq
 800a7a0:	694b      	ldreq	r3, [r1, #20]
 800a7a2:	600f      	str	r7, [r1, #0]
 800a7a4:	bf18      	it	ne
 800a7a6:	2300      	movne	r3, #0
 800a7a8:	eba6 0807 	sub.w	r8, r6, r7
 800a7ac:	608b      	str	r3, [r1, #8]
 800a7ae:	f1b8 0f00 	cmp.w	r8, #0
 800a7b2:	dd9c      	ble.n	800a6ee <__sflush_r+0x1a>
 800a7b4:	4643      	mov	r3, r8
 800a7b6:	463a      	mov	r2, r7
 800a7b8:	6a21      	ldr	r1, [r4, #32]
 800a7ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a7bc:	4628      	mov	r0, r5
 800a7be:	47b0      	blx	r6
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	dc06      	bgt.n	800a7d2 <__sflush_r+0xfe>
 800a7c4:	89a3      	ldrh	r3, [r4, #12]
 800a7c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7ca:	81a3      	strh	r3, [r4, #12]
 800a7cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a7d0:	e78e      	b.n	800a6f0 <__sflush_r+0x1c>
 800a7d2:	4407      	add	r7, r0
 800a7d4:	eba8 0800 	sub.w	r8, r8, r0
 800a7d8:	e7e9      	b.n	800a7ae <__sflush_r+0xda>
 800a7da:	bf00      	nop
 800a7dc:	20400001 	.word	0x20400001

0800a7e0 <_fflush_r>:
 800a7e0:	b538      	push	{r3, r4, r5, lr}
 800a7e2:	690b      	ldr	r3, [r1, #16]
 800a7e4:	4605      	mov	r5, r0
 800a7e6:	460c      	mov	r4, r1
 800a7e8:	b1db      	cbz	r3, 800a822 <_fflush_r+0x42>
 800a7ea:	b118      	cbz	r0, 800a7f4 <_fflush_r+0x14>
 800a7ec:	6983      	ldr	r3, [r0, #24]
 800a7ee:	b90b      	cbnz	r3, 800a7f4 <_fflush_r+0x14>
 800a7f0:	f000 f860 	bl	800a8b4 <__sinit>
 800a7f4:	4b0c      	ldr	r3, [pc, #48]	; (800a828 <_fflush_r+0x48>)
 800a7f6:	429c      	cmp	r4, r3
 800a7f8:	d109      	bne.n	800a80e <_fflush_r+0x2e>
 800a7fa:	686c      	ldr	r4, [r5, #4]
 800a7fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a800:	b17b      	cbz	r3, 800a822 <_fflush_r+0x42>
 800a802:	4621      	mov	r1, r4
 800a804:	4628      	mov	r0, r5
 800a806:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a80a:	f7ff bf63 	b.w	800a6d4 <__sflush_r>
 800a80e:	4b07      	ldr	r3, [pc, #28]	; (800a82c <_fflush_r+0x4c>)
 800a810:	429c      	cmp	r4, r3
 800a812:	d101      	bne.n	800a818 <_fflush_r+0x38>
 800a814:	68ac      	ldr	r4, [r5, #8]
 800a816:	e7f1      	b.n	800a7fc <_fflush_r+0x1c>
 800a818:	4b05      	ldr	r3, [pc, #20]	; (800a830 <_fflush_r+0x50>)
 800a81a:	429c      	cmp	r4, r3
 800a81c:	bf08      	it	eq
 800a81e:	68ec      	ldreq	r4, [r5, #12]
 800a820:	e7ec      	b.n	800a7fc <_fflush_r+0x1c>
 800a822:	2000      	movs	r0, #0
 800a824:	bd38      	pop	{r3, r4, r5, pc}
 800a826:	bf00      	nop
 800a828:	0800b4b0 	.word	0x0800b4b0
 800a82c:	0800b4d0 	.word	0x0800b4d0
 800a830:	0800b490 	.word	0x0800b490

0800a834 <std>:
 800a834:	2300      	movs	r3, #0
 800a836:	b510      	push	{r4, lr}
 800a838:	4604      	mov	r4, r0
 800a83a:	e9c0 3300 	strd	r3, r3, [r0]
 800a83e:	6083      	str	r3, [r0, #8]
 800a840:	8181      	strh	r1, [r0, #12]
 800a842:	6643      	str	r3, [r0, #100]	; 0x64
 800a844:	81c2      	strh	r2, [r0, #14]
 800a846:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a84a:	6183      	str	r3, [r0, #24]
 800a84c:	4619      	mov	r1, r3
 800a84e:	2208      	movs	r2, #8
 800a850:	305c      	adds	r0, #92	; 0x5c
 800a852:	f7ff fd4d 	bl	800a2f0 <memset>
 800a856:	4b05      	ldr	r3, [pc, #20]	; (800a86c <std+0x38>)
 800a858:	6263      	str	r3, [r4, #36]	; 0x24
 800a85a:	4b05      	ldr	r3, [pc, #20]	; (800a870 <std+0x3c>)
 800a85c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a85e:	4b05      	ldr	r3, [pc, #20]	; (800a874 <std+0x40>)
 800a860:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a862:	4b05      	ldr	r3, [pc, #20]	; (800a878 <std+0x44>)
 800a864:	6224      	str	r4, [r4, #32]
 800a866:	6323      	str	r3, [r4, #48]	; 0x30
 800a868:	bd10      	pop	{r4, pc}
 800a86a:	bf00      	nop
 800a86c:	0800aa95 	.word	0x0800aa95
 800a870:	0800aab7 	.word	0x0800aab7
 800a874:	0800aaef 	.word	0x0800aaef
 800a878:	0800ab13 	.word	0x0800ab13

0800a87c <_cleanup_r>:
 800a87c:	4901      	ldr	r1, [pc, #4]	; (800a884 <_cleanup_r+0x8>)
 800a87e:	f000 b885 	b.w	800a98c <_fwalk_reent>
 800a882:	bf00      	nop
 800a884:	0800a7e1 	.word	0x0800a7e1

0800a888 <__sfmoreglue>:
 800a888:	b570      	push	{r4, r5, r6, lr}
 800a88a:	1e4a      	subs	r2, r1, #1
 800a88c:	2568      	movs	r5, #104	; 0x68
 800a88e:	4355      	muls	r5, r2
 800a890:	460e      	mov	r6, r1
 800a892:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a896:	f7ff fd8f 	bl	800a3b8 <_malloc_r>
 800a89a:	4604      	mov	r4, r0
 800a89c:	b140      	cbz	r0, 800a8b0 <__sfmoreglue+0x28>
 800a89e:	2100      	movs	r1, #0
 800a8a0:	e9c0 1600 	strd	r1, r6, [r0]
 800a8a4:	300c      	adds	r0, #12
 800a8a6:	60a0      	str	r0, [r4, #8]
 800a8a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a8ac:	f7ff fd20 	bl	800a2f0 <memset>
 800a8b0:	4620      	mov	r0, r4
 800a8b2:	bd70      	pop	{r4, r5, r6, pc}

0800a8b4 <__sinit>:
 800a8b4:	6983      	ldr	r3, [r0, #24]
 800a8b6:	b510      	push	{r4, lr}
 800a8b8:	4604      	mov	r4, r0
 800a8ba:	bb33      	cbnz	r3, 800a90a <__sinit+0x56>
 800a8bc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a8c0:	6503      	str	r3, [r0, #80]	; 0x50
 800a8c2:	4b12      	ldr	r3, [pc, #72]	; (800a90c <__sinit+0x58>)
 800a8c4:	4a12      	ldr	r2, [pc, #72]	; (800a910 <__sinit+0x5c>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	6282      	str	r2, [r0, #40]	; 0x28
 800a8ca:	4298      	cmp	r0, r3
 800a8cc:	bf04      	itt	eq
 800a8ce:	2301      	moveq	r3, #1
 800a8d0:	6183      	streq	r3, [r0, #24]
 800a8d2:	f000 f81f 	bl	800a914 <__sfp>
 800a8d6:	6060      	str	r0, [r4, #4]
 800a8d8:	4620      	mov	r0, r4
 800a8da:	f000 f81b 	bl	800a914 <__sfp>
 800a8de:	60a0      	str	r0, [r4, #8]
 800a8e0:	4620      	mov	r0, r4
 800a8e2:	f000 f817 	bl	800a914 <__sfp>
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	60e0      	str	r0, [r4, #12]
 800a8ea:	2104      	movs	r1, #4
 800a8ec:	6860      	ldr	r0, [r4, #4]
 800a8ee:	f7ff ffa1 	bl	800a834 <std>
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	2109      	movs	r1, #9
 800a8f6:	68a0      	ldr	r0, [r4, #8]
 800a8f8:	f7ff ff9c 	bl	800a834 <std>
 800a8fc:	2202      	movs	r2, #2
 800a8fe:	2112      	movs	r1, #18
 800a900:	68e0      	ldr	r0, [r4, #12]
 800a902:	f7ff ff97 	bl	800a834 <std>
 800a906:	2301      	movs	r3, #1
 800a908:	61a3      	str	r3, [r4, #24]
 800a90a:	bd10      	pop	{r4, pc}
 800a90c:	0800b48c 	.word	0x0800b48c
 800a910:	0800a87d 	.word	0x0800a87d

0800a914 <__sfp>:
 800a914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a916:	4b1b      	ldr	r3, [pc, #108]	; (800a984 <__sfp+0x70>)
 800a918:	681e      	ldr	r6, [r3, #0]
 800a91a:	69b3      	ldr	r3, [r6, #24]
 800a91c:	4607      	mov	r7, r0
 800a91e:	b913      	cbnz	r3, 800a926 <__sfp+0x12>
 800a920:	4630      	mov	r0, r6
 800a922:	f7ff ffc7 	bl	800a8b4 <__sinit>
 800a926:	3648      	adds	r6, #72	; 0x48
 800a928:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a92c:	3b01      	subs	r3, #1
 800a92e:	d503      	bpl.n	800a938 <__sfp+0x24>
 800a930:	6833      	ldr	r3, [r6, #0]
 800a932:	b133      	cbz	r3, 800a942 <__sfp+0x2e>
 800a934:	6836      	ldr	r6, [r6, #0]
 800a936:	e7f7      	b.n	800a928 <__sfp+0x14>
 800a938:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a93c:	b16d      	cbz	r5, 800a95a <__sfp+0x46>
 800a93e:	3468      	adds	r4, #104	; 0x68
 800a940:	e7f4      	b.n	800a92c <__sfp+0x18>
 800a942:	2104      	movs	r1, #4
 800a944:	4638      	mov	r0, r7
 800a946:	f7ff ff9f 	bl	800a888 <__sfmoreglue>
 800a94a:	6030      	str	r0, [r6, #0]
 800a94c:	2800      	cmp	r0, #0
 800a94e:	d1f1      	bne.n	800a934 <__sfp+0x20>
 800a950:	230c      	movs	r3, #12
 800a952:	603b      	str	r3, [r7, #0]
 800a954:	4604      	mov	r4, r0
 800a956:	4620      	mov	r0, r4
 800a958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a95a:	4b0b      	ldr	r3, [pc, #44]	; (800a988 <__sfp+0x74>)
 800a95c:	6665      	str	r5, [r4, #100]	; 0x64
 800a95e:	e9c4 5500 	strd	r5, r5, [r4]
 800a962:	60a5      	str	r5, [r4, #8]
 800a964:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a968:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a96c:	2208      	movs	r2, #8
 800a96e:	4629      	mov	r1, r5
 800a970:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a974:	f7ff fcbc 	bl	800a2f0 <memset>
 800a978:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a97c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a980:	e7e9      	b.n	800a956 <__sfp+0x42>
 800a982:	bf00      	nop
 800a984:	0800b48c 	.word	0x0800b48c
 800a988:	ffff0001 	.word	0xffff0001

0800a98c <_fwalk_reent>:
 800a98c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a990:	4680      	mov	r8, r0
 800a992:	4689      	mov	r9, r1
 800a994:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a998:	2600      	movs	r6, #0
 800a99a:	b914      	cbnz	r4, 800a9a2 <_fwalk_reent+0x16>
 800a99c:	4630      	mov	r0, r6
 800a99e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9a2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a9a6:	3f01      	subs	r7, #1
 800a9a8:	d501      	bpl.n	800a9ae <_fwalk_reent+0x22>
 800a9aa:	6824      	ldr	r4, [r4, #0]
 800a9ac:	e7f5      	b.n	800a99a <_fwalk_reent+0xe>
 800a9ae:	89ab      	ldrh	r3, [r5, #12]
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	d907      	bls.n	800a9c4 <_fwalk_reent+0x38>
 800a9b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	d003      	beq.n	800a9c4 <_fwalk_reent+0x38>
 800a9bc:	4629      	mov	r1, r5
 800a9be:	4640      	mov	r0, r8
 800a9c0:	47c8      	blx	r9
 800a9c2:	4306      	orrs	r6, r0
 800a9c4:	3568      	adds	r5, #104	; 0x68
 800a9c6:	e7ee      	b.n	800a9a6 <_fwalk_reent+0x1a>

0800a9c8 <__swhatbuf_r>:
 800a9c8:	b570      	push	{r4, r5, r6, lr}
 800a9ca:	460e      	mov	r6, r1
 800a9cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9d0:	2900      	cmp	r1, #0
 800a9d2:	b096      	sub	sp, #88	; 0x58
 800a9d4:	4614      	mov	r4, r2
 800a9d6:	461d      	mov	r5, r3
 800a9d8:	da07      	bge.n	800a9ea <__swhatbuf_r+0x22>
 800a9da:	2300      	movs	r3, #0
 800a9dc:	602b      	str	r3, [r5, #0]
 800a9de:	89b3      	ldrh	r3, [r6, #12]
 800a9e0:	061a      	lsls	r2, r3, #24
 800a9e2:	d410      	bmi.n	800aa06 <__swhatbuf_r+0x3e>
 800a9e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9e8:	e00e      	b.n	800aa08 <__swhatbuf_r+0x40>
 800a9ea:	466a      	mov	r2, sp
 800a9ec:	f000 f8b8 	bl	800ab60 <_fstat_r>
 800a9f0:	2800      	cmp	r0, #0
 800a9f2:	dbf2      	blt.n	800a9da <__swhatbuf_r+0x12>
 800a9f4:	9a01      	ldr	r2, [sp, #4]
 800a9f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a9fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a9fe:	425a      	negs	r2, r3
 800aa00:	415a      	adcs	r2, r3
 800aa02:	602a      	str	r2, [r5, #0]
 800aa04:	e7ee      	b.n	800a9e4 <__swhatbuf_r+0x1c>
 800aa06:	2340      	movs	r3, #64	; 0x40
 800aa08:	2000      	movs	r0, #0
 800aa0a:	6023      	str	r3, [r4, #0]
 800aa0c:	b016      	add	sp, #88	; 0x58
 800aa0e:	bd70      	pop	{r4, r5, r6, pc}

0800aa10 <__smakebuf_r>:
 800aa10:	898b      	ldrh	r3, [r1, #12]
 800aa12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa14:	079d      	lsls	r5, r3, #30
 800aa16:	4606      	mov	r6, r0
 800aa18:	460c      	mov	r4, r1
 800aa1a:	d507      	bpl.n	800aa2c <__smakebuf_r+0x1c>
 800aa1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aa20:	6023      	str	r3, [r4, #0]
 800aa22:	6123      	str	r3, [r4, #16]
 800aa24:	2301      	movs	r3, #1
 800aa26:	6163      	str	r3, [r4, #20]
 800aa28:	b002      	add	sp, #8
 800aa2a:	bd70      	pop	{r4, r5, r6, pc}
 800aa2c:	ab01      	add	r3, sp, #4
 800aa2e:	466a      	mov	r2, sp
 800aa30:	f7ff ffca 	bl	800a9c8 <__swhatbuf_r>
 800aa34:	9900      	ldr	r1, [sp, #0]
 800aa36:	4605      	mov	r5, r0
 800aa38:	4630      	mov	r0, r6
 800aa3a:	f7ff fcbd 	bl	800a3b8 <_malloc_r>
 800aa3e:	b948      	cbnz	r0, 800aa54 <__smakebuf_r+0x44>
 800aa40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa44:	059a      	lsls	r2, r3, #22
 800aa46:	d4ef      	bmi.n	800aa28 <__smakebuf_r+0x18>
 800aa48:	f023 0303 	bic.w	r3, r3, #3
 800aa4c:	f043 0302 	orr.w	r3, r3, #2
 800aa50:	81a3      	strh	r3, [r4, #12]
 800aa52:	e7e3      	b.n	800aa1c <__smakebuf_r+0xc>
 800aa54:	4b0d      	ldr	r3, [pc, #52]	; (800aa8c <__smakebuf_r+0x7c>)
 800aa56:	62b3      	str	r3, [r6, #40]	; 0x28
 800aa58:	89a3      	ldrh	r3, [r4, #12]
 800aa5a:	6020      	str	r0, [r4, #0]
 800aa5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa60:	81a3      	strh	r3, [r4, #12]
 800aa62:	9b00      	ldr	r3, [sp, #0]
 800aa64:	6163      	str	r3, [r4, #20]
 800aa66:	9b01      	ldr	r3, [sp, #4]
 800aa68:	6120      	str	r0, [r4, #16]
 800aa6a:	b15b      	cbz	r3, 800aa84 <__smakebuf_r+0x74>
 800aa6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa70:	4630      	mov	r0, r6
 800aa72:	f000 f887 	bl	800ab84 <_isatty_r>
 800aa76:	b128      	cbz	r0, 800aa84 <__smakebuf_r+0x74>
 800aa78:	89a3      	ldrh	r3, [r4, #12]
 800aa7a:	f023 0303 	bic.w	r3, r3, #3
 800aa7e:	f043 0301 	orr.w	r3, r3, #1
 800aa82:	81a3      	strh	r3, [r4, #12]
 800aa84:	89a3      	ldrh	r3, [r4, #12]
 800aa86:	431d      	orrs	r5, r3
 800aa88:	81a5      	strh	r5, [r4, #12]
 800aa8a:	e7cd      	b.n	800aa28 <__smakebuf_r+0x18>
 800aa8c:	0800a87d 	.word	0x0800a87d

0800aa90 <__malloc_lock>:
 800aa90:	4770      	bx	lr

0800aa92 <__malloc_unlock>:
 800aa92:	4770      	bx	lr

0800aa94 <__sread>:
 800aa94:	b510      	push	{r4, lr}
 800aa96:	460c      	mov	r4, r1
 800aa98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa9c:	f000 f894 	bl	800abc8 <_read_r>
 800aaa0:	2800      	cmp	r0, #0
 800aaa2:	bfab      	itete	ge
 800aaa4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aaa6:	89a3      	ldrhlt	r3, [r4, #12]
 800aaa8:	181b      	addge	r3, r3, r0
 800aaaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aaae:	bfac      	ite	ge
 800aab0:	6563      	strge	r3, [r4, #84]	; 0x54
 800aab2:	81a3      	strhlt	r3, [r4, #12]
 800aab4:	bd10      	pop	{r4, pc}

0800aab6 <__swrite>:
 800aab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaba:	461f      	mov	r7, r3
 800aabc:	898b      	ldrh	r3, [r1, #12]
 800aabe:	05db      	lsls	r3, r3, #23
 800aac0:	4605      	mov	r5, r0
 800aac2:	460c      	mov	r4, r1
 800aac4:	4616      	mov	r6, r2
 800aac6:	d505      	bpl.n	800aad4 <__swrite+0x1e>
 800aac8:	2302      	movs	r3, #2
 800aaca:	2200      	movs	r2, #0
 800aacc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aad0:	f000 f868 	bl	800aba4 <_lseek_r>
 800aad4:	89a3      	ldrh	r3, [r4, #12]
 800aad6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aada:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aade:	81a3      	strh	r3, [r4, #12]
 800aae0:	4632      	mov	r2, r6
 800aae2:	463b      	mov	r3, r7
 800aae4:	4628      	mov	r0, r5
 800aae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aaea:	f000 b817 	b.w	800ab1c <_write_r>

0800aaee <__sseek>:
 800aaee:	b510      	push	{r4, lr}
 800aaf0:	460c      	mov	r4, r1
 800aaf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaf6:	f000 f855 	bl	800aba4 <_lseek_r>
 800aafa:	1c43      	adds	r3, r0, #1
 800aafc:	89a3      	ldrh	r3, [r4, #12]
 800aafe:	bf15      	itete	ne
 800ab00:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab0a:	81a3      	strheq	r3, [r4, #12]
 800ab0c:	bf18      	it	ne
 800ab0e:	81a3      	strhne	r3, [r4, #12]
 800ab10:	bd10      	pop	{r4, pc}

0800ab12 <__sclose>:
 800ab12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab16:	f000 b813 	b.w	800ab40 <_close_r>
	...

0800ab1c <_write_r>:
 800ab1c:	b538      	push	{r3, r4, r5, lr}
 800ab1e:	4c07      	ldr	r4, [pc, #28]	; (800ab3c <_write_r+0x20>)
 800ab20:	4605      	mov	r5, r0
 800ab22:	4608      	mov	r0, r1
 800ab24:	4611      	mov	r1, r2
 800ab26:	2200      	movs	r2, #0
 800ab28:	6022      	str	r2, [r4, #0]
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	f7f6 fee3 	bl	80018f6 <_write>
 800ab30:	1c43      	adds	r3, r0, #1
 800ab32:	d102      	bne.n	800ab3a <_write_r+0x1e>
 800ab34:	6823      	ldr	r3, [r4, #0]
 800ab36:	b103      	cbz	r3, 800ab3a <_write_r+0x1e>
 800ab38:	602b      	str	r3, [r5, #0]
 800ab3a:	bd38      	pop	{r3, r4, r5, pc}
 800ab3c:	240003e4 	.word	0x240003e4

0800ab40 <_close_r>:
 800ab40:	b538      	push	{r3, r4, r5, lr}
 800ab42:	4c06      	ldr	r4, [pc, #24]	; (800ab5c <_close_r+0x1c>)
 800ab44:	2300      	movs	r3, #0
 800ab46:	4605      	mov	r5, r0
 800ab48:	4608      	mov	r0, r1
 800ab4a:	6023      	str	r3, [r4, #0]
 800ab4c:	f7f6 feef 	bl	800192e <_close>
 800ab50:	1c43      	adds	r3, r0, #1
 800ab52:	d102      	bne.n	800ab5a <_close_r+0x1a>
 800ab54:	6823      	ldr	r3, [r4, #0]
 800ab56:	b103      	cbz	r3, 800ab5a <_close_r+0x1a>
 800ab58:	602b      	str	r3, [r5, #0]
 800ab5a:	bd38      	pop	{r3, r4, r5, pc}
 800ab5c:	240003e4 	.word	0x240003e4

0800ab60 <_fstat_r>:
 800ab60:	b538      	push	{r3, r4, r5, lr}
 800ab62:	4c07      	ldr	r4, [pc, #28]	; (800ab80 <_fstat_r+0x20>)
 800ab64:	2300      	movs	r3, #0
 800ab66:	4605      	mov	r5, r0
 800ab68:	4608      	mov	r0, r1
 800ab6a:	4611      	mov	r1, r2
 800ab6c:	6023      	str	r3, [r4, #0]
 800ab6e:	f7f6 feea 	bl	8001946 <_fstat>
 800ab72:	1c43      	adds	r3, r0, #1
 800ab74:	d102      	bne.n	800ab7c <_fstat_r+0x1c>
 800ab76:	6823      	ldr	r3, [r4, #0]
 800ab78:	b103      	cbz	r3, 800ab7c <_fstat_r+0x1c>
 800ab7a:	602b      	str	r3, [r5, #0]
 800ab7c:	bd38      	pop	{r3, r4, r5, pc}
 800ab7e:	bf00      	nop
 800ab80:	240003e4 	.word	0x240003e4

0800ab84 <_isatty_r>:
 800ab84:	b538      	push	{r3, r4, r5, lr}
 800ab86:	4c06      	ldr	r4, [pc, #24]	; (800aba0 <_isatty_r+0x1c>)
 800ab88:	2300      	movs	r3, #0
 800ab8a:	4605      	mov	r5, r0
 800ab8c:	4608      	mov	r0, r1
 800ab8e:	6023      	str	r3, [r4, #0]
 800ab90:	f7f6 fee9 	bl	8001966 <_isatty>
 800ab94:	1c43      	adds	r3, r0, #1
 800ab96:	d102      	bne.n	800ab9e <_isatty_r+0x1a>
 800ab98:	6823      	ldr	r3, [r4, #0]
 800ab9a:	b103      	cbz	r3, 800ab9e <_isatty_r+0x1a>
 800ab9c:	602b      	str	r3, [r5, #0]
 800ab9e:	bd38      	pop	{r3, r4, r5, pc}
 800aba0:	240003e4 	.word	0x240003e4

0800aba4 <_lseek_r>:
 800aba4:	b538      	push	{r3, r4, r5, lr}
 800aba6:	4c07      	ldr	r4, [pc, #28]	; (800abc4 <_lseek_r+0x20>)
 800aba8:	4605      	mov	r5, r0
 800abaa:	4608      	mov	r0, r1
 800abac:	4611      	mov	r1, r2
 800abae:	2200      	movs	r2, #0
 800abb0:	6022      	str	r2, [r4, #0]
 800abb2:	461a      	mov	r2, r3
 800abb4:	f7f6 fee2 	bl	800197c <_lseek>
 800abb8:	1c43      	adds	r3, r0, #1
 800abba:	d102      	bne.n	800abc2 <_lseek_r+0x1e>
 800abbc:	6823      	ldr	r3, [r4, #0]
 800abbe:	b103      	cbz	r3, 800abc2 <_lseek_r+0x1e>
 800abc0:	602b      	str	r3, [r5, #0]
 800abc2:	bd38      	pop	{r3, r4, r5, pc}
 800abc4:	240003e4 	.word	0x240003e4

0800abc8 <_read_r>:
 800abc8:	b538      	push	{r3, r4, r5, lr}
 800abca:	4c07      	ldr	r4, [pc, #28]	; (800abe8 <_read_r+0x20>)
 800abcc:	4605      	mov	r5, r0
 800abce:	4608      	mov	r0, r1
 800abd0:	4611      	mov	r1, r2
 800abd2:	2200      	movs	r2, #0
 800abd4:	6022      	str	r2, [r4, #0]
 800abd6:	461a      	mov	r2, r3
 800abd8:	f7f6 fe70 	bl	80018bc <_read>
 800abdc:	1c43      	adds	r3, r0, #1
 800abde:	d102      	bne.n	800abe6 <_read_r+0x1e>
 800abe0:	6823      	ldr	r3, [r4, #0]
 800abe2:	b103      	cbz	r3, 800abe6 <_read_r+0x1e>
 800abe4:	602b      	str	r3, [r5, #0]
 800abe6:	bd38      	pop	{r3, r4, r5, pc}
 800abe8:	240003e4 	.word	0x240003e4

0800abec <_init>:
 800abec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abee:	bf00      	nop
 800abf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abf2:	bc08      	pop	{r3}
 800abf4:	469e      	mov	lr, r3
 800abf6:	4770      	bx	lr

0800abf8 <_fini>:
 800abf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abfa:	bf00      	nop
 800abfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abfe:	bc08      	pop	{r3}
 800ac00:	469e      	mov	lr, r3
 800ac02:	4770      	bx	lr
