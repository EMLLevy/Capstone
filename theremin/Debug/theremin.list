
theremin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a834  080002b0  080002b0  000102b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c4  0800aae4  0800aae4  0001aae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3a8  0800b3a8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800b3a8  0800b3a8  0001b3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3b0  0800b3b0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3b0  0800b3b0  0001b3b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b3b4  0800b3b4  0001b3b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  0800b3b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  24000074  0800b42c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240003d8  0800b42c  000203d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024d11  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039ce  00000000  00000000  00044db3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001700  00000000  00000000  00048788  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001598  00000000  00000000  00049e88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000336d3  00000000  00000000  0004b420  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001464a  00000000  00000000  0007eaf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0015622a  00000000  00000000  0009313d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e9367  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006940  00000000  00000000  001e93e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000074 	.word	0x24000074
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800aacc 	.word	0x0800aacc

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000078 	.word	0x24000078
 80002ec:	0800aacc 	.word	0x0800aacc

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	; 0x50
 80005f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f001 fa11 	bl	8001a1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f8a7 	bl	800074c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 fbc1 	bl	8000d84 <MX_GPIO_Init>
  MX_DMA_Init();
 8000602:	f000 fb87 	bl	8000d14 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000606:	f000 fb31 	bl	8000c6c <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800060a:	f000 fb7b 	bl	8000d04 <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 800060e:	f000 f96d 	bl	80008ec <MX_ADC1_Init>
  MX_DAC1_Init();
 8000612:	f000 f9e5 	bl	80009e0 <MX_DAC1_Init>
  MX_TIM6_Init();
 8000616:	f000 fabd 	bl	8000b94 <MX_TIM6_Init>
  MX_TIM2_Init();
 800061a:	f000 fa13 	bl	8000a44 <MX_TIM2_Init>
  MX_TIM7_Init();
 800061e:	f000 faef 	bl	8000c00 <MX_TIM7_Init>
  MX_TIM5_Init();
 8000622:	f000 fa63 	bl	8000aec <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
//  s_ref = init_nco(1. / 4000., 0);
  s_ref = init_nco(1. / 100., 0);
 8000626:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8000718 <main+0x128>
 800062a:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 800071c <main+0x12c>
 800062e:	f000 fd4f 	bl	80010d0 <init_nco>
 8000632:	63b8      	str	r0, [r7, #56]	; 0x38
  sin_buffer = calloc(BLOCKSIZE, sizeof(uint16_t));
 8000634:	2102      	movs	r1, #2
 8000636:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800063a:	f009 fd7b 	bl	800a134 <calloc>
 800063e:	4603      	mov	r3, r0
 8000640:	637b      	str	r3, [r7, #52]	; 0x34
//	  printf("Failed to allocate memory for arrays\n");
//	  exit(EXIT_FAILURE);
//  }

  /* Start TIM6 and DAC with DMA */
  HAL_TIM_Base_Start(&htim6);
 8000642:	4837      	ldr	r0, [pc, #220]	; (8000720 <main+0x130>)
 8000644:	f007 ff7a 	bl	800853c <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000648:	2100      	movs	r1, #0
 800064a:	4836      	ldr	r0, [pc, #216]	; (8000724 <main+0x134>)
 800064c:	f002 fad7 	bl	8002bfe <HAL_DAC_Start>


  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)sin_buffer, BLOCKSIZE, DAC_ALIGN_12B_R);
 8000650:	2300      	movs	r3, #0
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000658:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800065a:	2100      	movs	r1, #0
 800065c:	4831      	ldr	r0, [pc, #196]	; (8000724 <main+0x134>)
 800065e:	f002 fb21 	bl	8002ca4 <HAL_DAC_Start_DMA>
  /* USER CODE BEGIN WHILE */

//  uart_buf_len = sprintf(uart_buf, "\nTesting\r\n");
//  HAL_UART_Transmit(&huart3, uart_buf, uart_buf_len, 100);
  /* Timer to update and change frequencies with */
  HAL_TIM_Base_Start_IT(&htim7);
 8000662:	4831      	ldr	r0, [pc, #196]	; (8000728 <main+0x138>)
 8000664:	f007 ff98 	bl	8008598 <HAL_TIM_Base_Start_IT>

  /* Timers to count up input pulses */
  HAL_TIM_Base_Start(&htim2);
 8000668:	4830      	ldr	r0, [pc, #192]	; (800072c <main+0x13c>)
 800066a:	f007 ff67 	bl	800853c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim5);
 800066e:	4830      	ldr	r0, [pc, #192]	; (8000730 <main+0x140>)
 8000670:	f007 ff64 	bl	800853c <HAL_TIM_Base_Start>
  i = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	647b      	str	r3, [r7, #68]	; 0x44

  while (1)
  {

	  if (update_freq_flag) {
 8000678:	4b2e      	ldr	r3, [pc, #184]	; (8000734 <main+0x144>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2b00      	cmp	r3, #0
 8000680:	d043      	beq.n	800070a <main+0x11a>
	//	  HAL_UART_Transmit(&huart3, uart_buf, uart_buf_len, 100);

	//	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);

		  /* Calculate the frequency to oscillate at */
		  freq = (int)((freq_timer_count * 1000 - REF_OSC_FREQ));
 8000682:	4b2d      	ldr	r3, [pc, #180]	; (8000738 <main+0x148>)
 8000684:	edd3 7a00 	vldr	s15, [r3]
 8000688:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800073c <main+0x14c>
 800068c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000690:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8000740 <main+0x150>
 8000694:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000698:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800069c:	ee17 3a90 	vmov	r3, s15
 80006a0:	643b      	str	r3, [r7, #64]	; 0x40

		  /* Calculate the volume level */
		  vol = (int)((vol_timer_count * 1000 - REF_OSC_FREQ)) ;
 80006a2:	4b28      	ldr	r3, [pc, #160]	; (8000744 <main+0x154>)
 80006a4:	edd3 7a00 	vldr	s15, [r3]
 80006a8:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800073c <main+0x14c>
 80006ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006b0:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8000740 <main+0x150>
 80006b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80006b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006bc:	ee17 3a90 	vmov	r3, s15
 80006c0:	63fb      	str	r3, [r7, #60]	; 0x3c

		  /* Take the absolute value of the difference */
		  if (freq < 0)
 80006c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	da02      	bge.n	80006ce <main+0xde>
			  freq = -freq;
 80006c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006ca:	425b      	negs	r3, r3
 80006cc:	643b      	str	r3, [r7, #64]	; 0x40
		  if (vol < 0)
 80006ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	da02      	bge.n	80006da <main+0xea>
			  vol = -vol;
 80006d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006d6:	425b      	negs	r3, r3
 80006d8:	63fb      	str	r3, [r7, #60]	; 0x3c

//		  uart_buf_len = sprintf(uart_buf, "%d counts\r\n", (int)(vol));
//		  HAL_UART_Transmit(&huart3, uart_buf, uart_buf_len, 100);

		  /* Generate sine wave at desired frequency */
		  nco_set_frequency(s_ref, (float)freq / 100000.);
 80006da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006dc:	ee07 3a90 	vmov	s15, r3
 80006e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006e4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000748 <main+0x158>
 80006e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80006ec:	eeb0 0a66 	vmov.f32	s0, s13
 80006f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80006f2:	f000 fd93 	bl	800121c <nco_set_frequency>
		  nco_set_amplitude(s_ref, vol);
 80006f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80006f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80006fa:	f000 fdab 	bl	8001254 <nco_set_amplitude>
		  update_freq_flag = 0;
 80006fe:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <main+0x144>)
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]
		  i++;
 8000704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000706:	3301      	adds	r3, #1
 8000708:	647b      	str	r3, [r7, #68]	; 0x44
	  }
	  nco_get_samples(s_ref, sin_buffer, BLOCKSIZE);
 800070a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800070e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000710:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000712:	f000 fd29 	bl	8001168 <nco_get_samples>
	  if (update_freq_flag) {
 8000716:	e7af      	b.n	8000678 <main+0x88>
 8000718:	00000000 	.word	0x00000000
 800071c:	3c23d70a 	.word	0x3c23d70a
 8000720:	240002e8 	.word	0x240002e8
 8000724:	240000a8 	.word	0x240000a8
 8000728:	24000380 	.word	0x24000380
 800072c:	24000334 	.word	0x24000334
 8000730:	240001c0 	.word	0x240001c0
 8000734:	240003cc 	.word	0x240003cc
 8000738:	24000090 	.word	0x24000090
 800073c:	447a0000 	.word	0x447a0000
 8000740:	48742400 	.word	0x48742400
 8000744:	24000094 	.word	0x24000094
 8000748:	47c35000 	.word	0x47c35000

0800074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b0ca      	sub	sp, #296	; 0x128
 8000750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000752:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000756:	224c      	movs	r2, #76	; 0x4c
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f009 fd38 	bl	800a1d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000760:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000764:	2220      	movs	r2, #32
 8000766:	2100      	movs	r1, #0
 8000768:	4618      	mov	r0, r3
 800076a:	f009 fd31 	bl	800a1d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	4618      	mov	r0, r3
 8000772:	23b8      	movs	r3, #184	; 0xb8
 8000774:	461a      	mov	r2, r3
 8000776:	2100      	movs	r1, #0
 8000778:	f009 fd2a 	bl	800a1d0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800077c:	2004      	movs	r0, #4
 800077e:	f005 f887 	bl	8005890 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000782:	463b      	mov	r3, r7
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	4b55      	ldr	r3, [pc, #340]	; (80008e0 <SystemClock_Config+0x194>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	4a54      	ldr	r2, [pc, #336]	; (80008e0 <SystemClock_Config+0x194>)
 800078e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000792:	6193      	str	r3, [r2, #24]
 8000794:	4b52      	ldr	r3, [pc, #328]	; (80008e0 <SystemClock_Config+0x194>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800079c:	463b      	mov	r3, r7
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	463b      	mov	r3, r7
 80007a2:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007a4:	bf00      	nop
 80007a6:	4b4e      	ldr	r3, [pc, #312]	; (80008e0 <SystemClock_Config+0x194>)
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007b2:	d1f8      	bne.n	80007a6 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80007b4:	4b4b      	ldr	r3, [pc, #300]	; (80008e4 <SystemClock_Config+0x198>)
 80007b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007b8:	f023 0303 	bic.w	r3, r3, #3
 80007bc:	4a49      	ldr	r2, [pc, #292]	; (80008e4 <SystemClock_Config+0x198>)
 80007be:	f043 0302 	orr.w	r3, r3, #2
 80007c2:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 80007c4:	2329      	movs	r3, #41	; 0x29
 80007c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007ca:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007d2:	2301      	movs	r3, #1
 80007d4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007d8:	2301      	movs	r3, #1
 80007da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007de:	2302      	movs	r3, #2
 80007e0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e4:	2302      	movs	r3, #2
 80007e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007ea:	2301      	movs	r3, #1
 80007ec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLN = 24;
 80007f0:	2318      	movs	r3, #24
 80007f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007f6:	2302      	movs	r3, #2
 80007f8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007fc:	2304      	movs	r3, #4
 80007fe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000802:	2302      	movs	r3, #2
 8000804:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000808:	230c      	movs	r3, #12
 800080a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800080e:	2300      	movs	r3, #0
 8000810:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800081e:	4618      	mov	r0, r3
 8000820:	f005 f890 	bl	8005944 <HAL_RCC_OscConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800082a:	f000 fc49 	bl	80010c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082e:	233f      	movs	r3, #63	; 0x3f
 8000830:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000834:	2303      	movs	r3, #3
 8000836:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800085e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000862:	2102      	movs	r1, #2
 8000864:	4618      	mov	r0, r3
 8000866:	f005 fc55 	bl	8006114 <HAL_RCC_ClockConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0x128>
  {
    Error_Handler();
 8000870:	f000 fc26 	bl	80010c0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_ADC
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	4a1c      	ldr	r2, [pc, #112]	; (80008e8 <SystemClock_Config+0x19c>)
 8000878:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2201      	movs	r2, #1
 800087e:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	2210      	movs	r2, #16
 8000884:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	2202      	movs	r2, #2
 800088a:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2202      	movs	r2, #2
 8000890:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	2202      	movs	r2, #2
 8000896:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	22c0      	movs	r2, #192	; 0xc0
 800089c:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	2200      	movs	r2, #0
 80008a2:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	2200      	movs	r2, #0
 80008a8:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2200      	movs	r2, #0
 80008ae:	67da      	str	r2, [r3, #124]	; 0x7c
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80008b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	2200      	movs	r2, #0
 80008be:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	4618      	mov	r0, r3
 80008c6:	f005 ffa9 	bl	800681c <HAL_RCCEx_PeriphCLKConfig>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <SystemClock_Config+0x188>
  {
    Error_Handler();
 80008d0:	f000 fbf6 	bl	80010c0 <Error_Handler>
  }
}
 80008d4:	bf00      	nop
 80008d6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	58024800 	.word	0x58024800
 80008e4:	58024400 	.word	0x58024400
 80008e8:	000c0002 	.word	0x000c0002

080008ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008fe:	463b      	mov	r3, r7
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
 800090c:	615a      	str	r2, [r3, #20]
 800090e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000910:	4b30      	ldr	r3, [pc, #192]	; (80009d4 <MX_ADC1_Init+0xe8>)
 8000912:	4a31      	ldr	r2, [pc, #196]	; (80009d8 <MX_ADC1_Init+0xec>)
 8000914:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000916:	4b2f      	ldr	r3, [pc, #188]	; (80009d4 <MX_ADC1_Init+0xe8>)
 8000918:	2200      	movs	r2, #0
 800091a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800091c:	4b2d      	ldr	r3, [pc, #180]	; (80009d4 <MX_ADC1_Init+0xe8>)
 800091e:	2208      	movs	r2, #8
 8000920:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000922:	4b2c      	ldr	r3, [pc, #176]	; (80009d4 <MX_ADC1_Init+0xe8>)
 8000924:	2200      	movs	r2, #0
 8000926:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000928:	4b2a      	ldr	r3, [pc, #168]	; (80009d4 <MX_ADC1_Init+0xe8>)
 800092a:	2204      	movs	r2, #4
 800092c:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800092e:	4b29      	ldr	r3, [pc, #164]	; (80009d4 <MX_ADC1_Init+0xe8>)
 8000930:	2200      	movs	r2, #0
 8000932:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000934:	4b27      	ldr	r3, [pc, #156]	; (80009d4 <MX_ADC1_Init+0xe8>)
 8000936:	2201      	movs	r2, #1
 8000938:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800093a:	4b26      	ldr	r3, [pc, #152]	; (80009d4 <MX_ADC1_Init+0xe8>)
 800093c:	2201      	movs	r2, #1
 800093e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000940:	4b24      	ldr	r3, [pc, #144]	; (80009d4 <MX_ADC1_Init+0xe8>)
 8000942:	2200      	movs	r2, #0
 8000944:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000946:	4b23      	ldr	r3, [pc, #140]	; (80009d4 <MX_ADC1_Init+0xe8>)
 8000948:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 800094c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800094e:	4b21      	ldr	r3, [pc, #132]	; (80009d4 <MX_ADC1_Init+0xe8>)
 8000950:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000954:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000956:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <MX_ADC1_Init+0xe8>)
 8000958:	2203      	movs	r2, #3
 800095a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800095c:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <MX_ADC1_Init+0xe8>)
 800095e:	2200      	movs	r2, #0
 8000960:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000962:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <MX_ADC1_Init+0xe8>)
 8000964:	2200      	movs	r2, #0
 8000966:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000968:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <MX_ADC1_Init+0xe8>)
 800096a:	2200      	movs	r2, #0
 800096c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000970:	4818      	ldr	r0, [pc, #96]	; (80009d4 <MX_ADC1_Init+0xe8>)
 8000972:	f001 fa93 	bl	8001e9c <HAL_ADC_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800097c:	f000 fba0 	bl	80010c0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000980:	2300      	movs	r3, #0
 8000982:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	4812      	ldr	r0, [pc, #72]	; (80009d4 <MX_ADC1_Init+0xe8>)
 800098c:	f001 ff6e 	bl	800286c <HAL_ADCEx_MultiModeConfigChannel>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000996:	f000 fb93 	bl	80010c0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <MX_ADC1_Init+0xf0>)
 800099c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800099e:	2306      	movs	r3, #6
 80009a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009a2:	2300      	movs	r3, #0
 80009a4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009a6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80009aa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009ac:	2304      	movs	r3, #4
 80009ae:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009b8:	463b      	mov	r3, r7
 80009ba:	4619      	mov	r1, r3
 80009bc:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_ADC1_Init+0xe8>)
 80009be:	f001 fbc7 	bl	8002150 <HAL_ADC_ConfigChannel>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80009c8:	f000 fb7a 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	3728      	adds	r7, #40	; 0x28
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	2400020c 	.word	0x2400020c
 80009d8:	40022000 	.word	0x40022000
 80009dc:	14f00020 	.word	0x14f00020

080009e0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	2224      	movs	r2, #36	; 0x24
 80009ea:	2100      	movs	r1, #0
 80009ec:	4618      	mov	r0, r3
 80009ee:	f009 fbef 	bl	800a1d0 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80009f2:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <MX_DAC1_Init+0x5c>)
 80009f4:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <MX_DAC1_Init+0x60>)
 80009f6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80009f8:	4810      	ldr	r0, [pc, #64]	; (8000a3c <MX_DAC1_Init+0x5c>)
 80009fa:	f002 f8de 	bl	8002bba <HAL_DAC_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000a04:	f000 fb5c 	bl	80010c0 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000a0c:	2316      	movs	r3, #22
 8000a0e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000a14:	2302      	movs	r3, #2
 8000a16:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	2200      	movs	r2, #0
 8000a20:	4619      	mov	r1, r3
 8000a22:	4806      	ldr	r0, [pc, #24]	; (8000a3c <MX_DAC1_Init+0x5c>)
 8000a24:	f002 fa1a 	bl	8002e5c <HAL_DAC_ConfigChannel>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000a2e:	f000 fb47 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	3728      	adds	r7, #40	; 0x28
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	240000a8 	.word	0x240000a8
 8000a40:	40007400 	.word	0x40007400

08000a44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a4a:	f107 030c 	add.w	r3, r7, #12
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a64:	4b20      	ldr	r3, [pc, #128]	; (8000ae8 <MX_TIM2_Init+0xa4>)
 8000a66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ae8 <MX_TIM2_Init+0xa4>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a72:	4b1d      	ldr	r3, [pc, #116]	; (8000ae8 <MX_TIM2_Init+0xa4>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a78:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <MX_TIM2_Init+0xa4>)
 8000a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a80:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <MX_TIM2_Init+0xa4>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a86:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <MX_TIM2_Init+0xa4>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a8c:	4816      	ldr	r0, [pc, #88]	; (8000ae8 <MX_TIM2_Init+0xa4>)
 8000a8e:	f007 fcfd 	bl	800848c <HAL_TIM_Base_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000a98:	f000 fb12 	bl	80010c0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000a9c:	2307      	movs	r3, #7
 8000a9e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000aa0:	2350      	movs	r3, #80	; 0x50
 8000aa2:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 1;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000aac:	f107 030c 	add.w	r3, r7, #12
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <MX_TIM2_Init+0xa4>)
 8000ab4:	f007 fec5 	bl	8008842 <HAL_TIM_SlaveConfigSynchro>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000abe:	f000 faff 	bl	80010c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aca:	463b      	mov	r3, r7
 8000acc:	4619      	mov	r1, r3
 8000ace:	4806      	ldr	r0, [pc, #24]	; (8000ae8 <MX_TIM2_Init+0xa4>)
 8000ad0:	f008 f906 	bl	8008ce0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000ada:	f000 faf1 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	3720      	adds	r7, #32
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	24000334 	.word	0x24000334

08000aec <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b088      	sub	sp, #32
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000af2:	f107 030c 	add.w	r3, r7, #12
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b02:	463b      	mov	r3, r7
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b0c:	4b1f      	ldr	r3, [pc, #124]	; (8000b8c <MX_TIM5_Init+0xa0>)
 8000b0e:	4a20      	ldr	r2, [pc, #128]	; (8000b90 <MX_TIM5_Init+0xa4>)
 8000b10:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000b12:	4b1e      	ldr	r3, [pc, #120]	; (8000b8c <MX_TIM5_Init+0xa0>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b18:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <MX_TIM5_Init+0xa0>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000b1e:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <MX_TIM5_Init+0xa0>)
 8000b20:	f04f 32ff 	mov.w	r2, #4294967295
 8000b24:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b26:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <MX_TIM5_Init+0xa0>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b2c:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <MX_TIM5_Init+0xa0>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000b32:	4816      	ldr	r0, [pc, #88]	; (8000b8c <MX_TIM5_Init+0xa0>)
 8000b34:	f007 fcaa 	bl	800848c <HAL_TIM_Base_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8000b3e:	f000 fabf 	bl	80010c0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000b42:	2307      	movs	r3, #7
 8000b44:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8000b46:	2360      	movs	r3, #96	; 0x60
 8000b48:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 1;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000b52:	f107 030c 	add.w	r3, r7, #12
 8000b56:	4619      	mov	r1, r3
 8000b58:	480c      	ldr	r0, [pc, #48]	; (8000b8c <MX_TIM5_Init+0xa0>)
 8000b5a:	f007 fe72 	bl	8008842 <HAL_TIM_SlaveConfigSynchro>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000b64:	f000 faac 	bl	80010c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000b70:	463b      	mov	r3, r7
 8000b72:	4619      	mov	r1, r3
 8000b74:	4805      	ldr	r0, [pc, #20]	; (8000b8c <MX_TIM5_Init+0xa0>)
 8000b76:	f008 f8b3 	bl	8008ce0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000b80:	f000 fa9e 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000b84:	bf00      	nop
 8000b86:	3720      	adds	r7, #32
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	240001c0 	.word	0x240001c0
 8000b90:	40000c00 	.word	0x40000c00

08000b94 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ba4:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <MX_TIM6_Init+0x64>)
 8000ba6:	4a15      	ldr	r2, [pc, #84]	; (8000bfc <MX_TIM6_Init+0x68>)
 8000ba8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000baa:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <MX_TIM6_Init+0x64>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_TIM6_Init+0x64>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 960 - 1;
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <MX_TIM6_Init+0x64>)
 8000bb8:	f240 32bf 	movw	r2, #959	; 0x3bf
 8000bbc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <MX_TIM6_Init+0x64>)
 8000bc0:	2280      	movs	r2, #128	; 0x80
 8000bc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000bc4:	480c      	ldr	r0, [pc, #48]	; (8000bf8 <MX_TIM6_Init+0x64>)
 8000bc6:	f007 fc61 	bl	800848c <HAL_TIM_Base_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000bd0:	f000 fa76 	bl	80010c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000bd4:	2320      	movs	r3, #32
 8000bd6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	4619      	mov	r1, r3
 8000be0:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_TIM6_Init+0x64>)
 8000be2:	f008 f87d 	bl	8008ce0 <HAL_TIMEx_MasterConfigSynchronization>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000bec:	f000 fa68 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	240002e8 	.word	0x240002e8
 8000bfc:	40001000 	.word	0x40001000

08000c00 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000c10:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <MX_TIM7_Init+0x64>)
 8000c12:	4a15      	ldr	r2, [pc, #84]	; (8000c68 <MX_TIM7_Init+0x68>)
 8000c14:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 96-1;
 8000c16:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <MX_TIM7_Init+0x64>)
 8000c18:	225f      	movs	r2, #95	; 0x5f
 8000c1a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <MX_TIM7_Init+0x64>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <MX_TIM7_Init+0x64>)
 8000c24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c28:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <MX_TIM7_Init+0x64>)
 8000c2c:	2280      	movs	r2, #128	; 0x80
 8000c2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000c30:	480c      	ldr	r0, [pc, #48]	; (8000c64 <MX_TIM7_Init+0x64>)
 8000c32:	f007 fc2b 	bl	800848c <HAL_TIM_Base_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000c3c:	f000 fa40 	bl	80010c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c40:	2300      	movs	r3, #0
 8000c42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4805      	ldr	r0, [pc, #20]	; (8000c64 <MX_TIM7_Init+0x64>)
 8000c4e:	f008 f847 	bl	8008ce0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000c58:	f000 fa32 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000c5c:	bf00      	nop
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	24000380 	.word	0x24000380
 8000c68:	40001400 	.word	0x40001400

08000c6c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c70:	4b22      	ldr	r3, [pc, #136]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000c72:	4a23      	ldr	r2, [pc, #140]	; (8000d00 <MX_USART3_UART_Init+0x94>)
 8000c74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c76:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000c78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7e:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c84:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c90:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000c92:	220c      	movs	r2, #12
 8000c94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c9c:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ca2:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ca8:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cae:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cb4:	4811      	ldr	r0, [pc, #68]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000cb6:	f008 f8b9 	bl	8008e2c <HAL_UART_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000cc0:	f000 f9fe 	bl	80010c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	480d      	ldr	r0, [pc, #52]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000cc8:	f009 f94f 	bl	8009f6a <HAL_UARTEx_SetTxFifoThreshold>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cd2:	f000 f9f5 	bl	80010c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4808      	ldr	r0, [pc, #32]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000cda:	f009 f984 	bl	8009fe6 <HAL_UARTEx_SetRxFifoThreshold>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ce4:	f000 f9ec 	bl	80010c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ce8:	4804      	ldr	r0, [pc, #16]	; (8000cfc <MX_USART3_UART_Init+0x90>)
 8000cea:	f009 f905 	bl	8009ef8 <HAL_UARTEx_DisableFifoMode>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000cf4:	f000 f9e4 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	240000bc 	.word	0x240000bc
 8000d00:	40004800 	.word	0x40004800

08000d04 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
	...

08000d14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d1a:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <MX_DMA_Init+0x6c>)
 8000d1c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000d20:	4a17      	ldr	r2, [pc, #92]	; (8000d80 <MX_DMA_Init+0x6c>)
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <MX_DMA_Init+0x6c>)
 8000d2c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <MX_DMA_Init+0x6c>)
 8000d3a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000d3e:	4a10      	ldr	r2, [pc, #64]	; (8000d80 <MX_DMA_Init+0x6c>)
 8000d40:	f043 0302 	orr.w	r3, r3, #2
 8000d44:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000d48:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <MX_DMA_Init+0x6c>)
 8000d4a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2100      	movs	r1, #0
 8000d5a:	200b      	movs	r0, #11
 8000d5c:	f001 fef9 	bl	8002b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d60:	200b      	movs	r0, #11
 8000d62:	f001 ff10 	bl	8002b86 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2100      	movs	r1, #0
 8000d6a:	2038      	movs	r0, #56	; 0x38
 8000d6c:	f001 fef1 	bl	8002b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d70:	2038      	movs	r0, #56	; 0x38
 8000d72:	f001 ff08 	bl	8002b86 <HAL_NVIC_EnableIRQ>

}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	58024400 	.word	0x58024400

08000d84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08e      	sub	sp, #56	; 0x38
 8000d88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
 8000d98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9a:	4b87      	ldr	r3, [pc, #540]	; (8000fb8 <MX_GPIO_Init+0x234>)
 8000d9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000da0:	4a85      	ldr	r2, [pc, #532]	; (8000fb8 <MX_GPIO_Init+0x234>)
 8000da2:	f043 0304 	orr.w	r3, r3, #4
 8000da6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000daa:	4b83      	ldr	r3, [pc, #524]	; (8000fb8 <MX_GPIO_Init+0x234>)
 8000dac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000db0:	f003 0304 	and.w	r3, r3, #4
 8000db4:	623b      	str	r3, [r7, #32]
 8000db6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000db8:	4b7f      	ldr	r3, [pc, #508]	; (8000fb8 <MX_GPIO_Init+0x234>)
 8000dba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dbe:	4a7e      	ldr	r2, [pc, #504]	; (8000fb8 <MX_GPIO_Init+0x234>)
 8000dc0:	f043 0320 	orr.w	r3, r3, #32
 8000dc4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000dc8:	4b7b      	ldr	r3, [pc, #492]	; (8000fb8 <MX_GPIO_Init+0x234>)
 8000dca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dce:	f003 0320 	and.w	r3, r3, #32
 8000dd2:	61fb      	str	r3, [r7, #28]
 8000dd4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dd6:	4b78      	ldr	r3, [pc, #480]	; (8000fb8 <MX_GPIO_Init+0x234>)
 8000dd8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ddc:	4a76      	ldr	r2, [pc, #472]	; (8000fb8 <MX_GPIO_Init+0x234>)
 8000dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000de2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000de6:	4b74      	ldr	r3, [pc, #464]	; (8000fb8 <MX_GPIO_Init+0x234>)
 8000de8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000df0:	61bb      	str	r3, [r7, #24]
 8000df2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df4:	4b70      	ldr	r3, [pc, #448]	; (8000fb8 <MX_GPIO_Init+0x234>)
 8000df6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dfa:	4a6f      	ldr	r2, [pc, #444]	; (8000fb8 <MX_GPIO_Init+0x234>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e04:	4b6c      	ldr	r3, [pc, #432]	; (8000fb8 <MX_GPIO_Init+0x234>)
 8000e06:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e12:	4b69      	ldr	r3, [pc, #420]	; (8000fb8 <MX_GPIO_Init+0x234>)
 8000e14:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e18:	4a67      	ldr	r2, [pc, #412]	; (8000fb8 <MX_GPIO_Init+0x234>)
 8000e1a:	f043 0302 	orr.w	r3, r3, #2
 8000e1e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e22:	4b65      	ldr	r3, [pc, #404]	; (8000fb8 <MX_GPIO_Init+0x234>)
 8000e24:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e28:	f003 0302 	and.w	r3, r3, #2
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e30:	4b61      	ldr	r3, [pc, #388]	; (8000fb8 <MX_GPIO_Init+0x234>)
 8000e32:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e36:	4a60      	ldr	r2, [pc, #384]	; (8000fb8 <MX_GPIO_Init+0x234>)
 8000e38:	f043 0308 	orr.w	r3, r3, #8
 8000e3c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e40:	4b5d      	ldr	r3, [pc, #372]	; (8000fb8 <MX_GPIO_Init+0x234>)
 8000e42:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e46:	f003 0308 	and.w	r3, r3, #8
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e4e:	4b5a      	ldr	r3, [pc, #360]	; (8000fb8 <MX_GPIO_Init+0x234>)
 8000e50:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e54:	4a58      	ldr	r2, [pc, #352]	; (8000fb8 <MX_GPIO_Init+0x234>)
 8000e56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e5a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e5e:	4b56      	ldr	r3, [pc, #344]	; (8000fb8 <MX_GPIO_Init+0x234>)
 8000e60:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e6c:	4b52      	ldr	r3, [pc, #328]	; (8000fb8 <MX_GPIO_Init+0x234>)
 8000e6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e72:	4a51      	ldr	r2, [pc, #324]	; (8000fb8 <MX_GPIO_Init+0x234>)
 8000e74:	f043 0310 	orr.w	r3, r3, #16
 8000e78:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e7c:	4b4e      	ldr	r3, [pc, #312]	; (8000fb8 <MX_GPIO_Init+0x234>)
 8000e7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e82:	f003 0310 	and.w	r3, r3, #16
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e90:	484a      	ldr	r0, [pc, #296]	; (8000fbc <MX_GPIO_Init+0x238>)
 8000e92:	f004 fcc9 	bl	8005828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	f244 0101 	movw	r1, #16385	; 0x4001
 8000e9c:	4848      	ldr	r0, [pc, #288]	; (8000fc0 <MX_GPIO_Init+0x23c>)
 8000e9e:	f004 fcc3 	bl	8005828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2102      	movs	r1, #2
 8000ea6:	4847      	ldr	r0, [pc, #284]	; (8000fc4 <MX_GPIO_Init+0x240>)
 8000ea8:	f004 fcbe 	bl	8005828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000eac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4841      	ldr	r0, [pc, #260]	; (8000fc8 <MX_GPIO_Init+0x244>)
 8000ec2:	f004 fb01 	bl	80054c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000ec6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000edc:	4619      	mov	r1, r3
 8000ede:	4837      	ldr	r0, [pc, #220]	; (8000fbc <MX_GPIO_Init+0x238>)
 8000ee0:	f004 faf2 	bl	80054c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000ee4:	f244 0301 	movw	r3, #16385	; 0x4001
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eea:	2301      	movs	r3, #1
 8000eec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efa:	4619      	mov	r1, r3
 8000efc:	4830      	ldr	r0, [pc, #192]	; (8000fc0 <MX_GPIO_Init+0x23c>)
 8000efe:	f004 fae3 	bl	80054c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000f02:	2380      	movs	r3, #128	; 0x80
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f06:	4b31      	ldr	r3, [pc, #196]	; (8000fcc <MX_GPIO_Init+0x248>)
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f12:	4619      	mov	r1, r3
 8000f14:	482e      	ldr	r0, [pc, #184]	; (8000fd0 <MX_GPIO_Init+0x24c>)
 8000f16:	f004 fad7 	bl	80054c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000f1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f20:	2300      	movs	r3, #0
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4829      	ldr	r0, [pc, #164]	; (8000fd4 <MX_GPIO_Init+0x250>)
 8000f30:	f004 faca 	bl	80054c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000f34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2300      	movs	r3, #0
 8000f44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000f46:	230a      	movs	r3, #10
 8000f48:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4820      	ldr	r0, [pc, #128]	; (8000fd4 <MX_GPIO_Init+0x250>)
 8000f52:	f004 fab9 	bl	80054c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000f56:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4819      	ldr	r0, [pc, #100]	; (8000fd4 <MX_GPIO_Init+0x250>)
 8000f70:	f004 faaa 	bl	80054c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f74:	23c0      	movs	r3, #192	; 0xc0
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f84:	2307      	movs	r3, #7
 8000f86:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <MX_GPIO_Init+0x23c>)
 8000f90:	f004 fa9a 	bl	80054c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f94:	2302      	movs	r3, #2
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4806      	ldr	r0, [pc, #24]	; (8000fc4 <MX_GPIO_Init+0x240>)
 8000fac:	f004 fa8c 	bl	80054c8 <HAL_GPIO_Init>

}
 8000fb0:	bf00      	nop
 8000fb2:	3738      	adds	r7, #56	; 0x38
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	58024400 	.word	0x58024400
 8000fbc:	58021400 	.word	0x58021400
 8000fc0:	58020400 	.word	0x58020400
 8000fc4:	58021000 	.word	0x58021000
 8000fc8:	58020800 	.word	0x58020800
 8000fcc:	11110000 	.word	0x11110000
 8000fd0:	58021800 	.word	0x58021800
 8000fd4:	58020000 	.word	0x58020000

08000fd8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	4830      	ldr	r0, [pc, #192]	; (80010a4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000fe4:	f004 fc39 	bl	800585a <HAL_GPIO_TogglePin>

	if (ms == 0){
 8000fe8:	4b2f      	ldr	r3, [pc, #188]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d107      	bne.n	8001002 <HAL_TIM_PeriodElapsedCallback+0x2a>
		freq_timer_count = 0;
 8000ff2:	4b2e      	ldr	r3, [pc, #184]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000ff4:	f04f 0200 	mov.w	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
		vol_timer_count = 0;
 8000ffa:	4b2d      	ldr	r3, [pc, #180]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000ffc:	f04f 0200 	mov.w	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
	}
	freq_timer_count += __HAL_TIM_GET_COUNTER(&htim2);
 8001002:	4b2c      	ldr	r3, [pc, #176]	; (80010b4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001008:	ee07 3a90 	vmov	s15, r3
 800100c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001010:	4b26      	ldr	r3, [pc, #152]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001012:	edd3 7a00 	vldr	s15, [r3]
 8001016:	ee77 7a27 	vadd.f32	s15, s14, s15
 800101a:	4b24      	ldr	r3, [pc, #144]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800101c:	edc3 7a00 	vstr	s15, [r3]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001020:	4b24      	ldr	r3, [pc, #144]	; (80010b4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2200      	movs	r2, #0
 8001026:	625a      	str	r2, [r3, #36]	; 0x24
	vol_timer_count += __HAL_TIM_GET_COUNTER(&htim5);
 8001028:	4b23      	ldr	r3, [pc, #140]	; (80010b8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102e:	ee07 3a90 	vmov	s15, r3
 8001032:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001036:	4b1e      	ldr	r3, [pc, #120]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001038:	edd3 7a00 	vldr	s15, [r3]
 800103c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001040:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001042:	edc3 7a00 	vstr	s15, [r3]
	__HAL_TIM_SET_COUNTER(&htim5, 0);
 8001046:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2200      	movs	r2, #0
 800104c:	625a      	str	r2, [r3, #36]	; 0x24
	ms++;
 800104e:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	b2db      	uxtb	r3, r3
 8001054:	3301      	adds	r3, #1
 8001056:	b2da      	uxtb	r2, r3
 8001058:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800105a:	701a      	strb	r2, [r3, #0]
	if (ms == MILLISECONDS) {
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2b0a      	cmp	r3, #10
 8001064:	d119      	bne.n	800109a <HAL_TIM_PeriodElapsedCallback+0xc2>
		update_freq_flag = 1;
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001068:	2201      	movs	r2, #1
 800106a:	701a      	strb	r2, [r3, #0]
		freq_timer_count /= MILLISECONDS;
 800106c:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800106e:	ed93 7a00 	vldr	s14, [r3]
 8001072:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001076:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800107c:	edc3 7a00 	vstr	s15, [r3]
		vol_timer_count /= MILLISECONDS;
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001082:	ed93 7a00 	vldr	s14, [r3]
 8001086:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800108a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800108e:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001090:	edc3 7a00 	vstr	s15, [r3]
		ms = 0;
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
	}
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	58020400 	.word	0x58020400
 80010a8:	24000098 	.word	0x24000098
 80010ac:	24000090 	.word	0x24000090
 80010b0:	24000094 	.word	0x24000094
 80010b4:	24000334 	.word	0x24000334
 80010b8:	240001c0 	.word	0x240001c0
 80010bc:	240003cc 	.word	0x240003cc

080010c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <init_nco>:
 * @returns pointer to an initialized structure of type #NCO_T which may
 * be used to get NCO samples.
 */

NCO_T *init_nco(  float f0,            //!< [in] Frequency in cycles per sample
                  float theta){        //!< [in] Offset angle in radians
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80010da:	edc7 0a00 	vstr	s1, [r7]

    //Allocate memory for s
    NCO_T *s = malloc(sizeof(NCO_T));
 80010de:	2010      	movs	r0, #16
 80010e0:	f009 f86e 	bl	800a1c0 <malloc>
 80010e4:	4603      	mov	r3, r0
 80010e6:	60fb      	str	r3, [r7, #12]
    if (s == NULL) {
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d105      	bne.n	80010fa <init_nco+0x2a>
        printf("Failed to allocate memory for s\n");
 80010ee:	481c      	ldr	r0, [pc, #112]	; (8001160 <init_nco+0x90>)
 80010f0:	f009 f988 	bl	800a404 <puts>
        exit(EXIT_FAILURE);
 80010f4:	2001      	movs	r0, #1
 80010f6:	f009 f82b 	bl	800a150 <exit>
    }

    //Initialize struct variables
    s->f0 = (int)(f0 * 2 * (1u << 31));
 80010fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80010fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001102:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001164 <init_nco+0x94>
 8001106:	ee67 7a87 	vmul.f32	s15, s15, s14
 800110a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800110e:	ee17 2a90 	vmov	r2, s15
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	601a      	str	r2, [r3, #0]
    s->theta = (int)((theta * 2 * (1u << 31))/(2.*PI));
 8001116:	edd7 7a00 	vldr	s15, [r7]
 800111a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800111e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001164 <init_nco+0x94>
 8001122:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001126:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800112a:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8001158 <init_nco+0x88>
 800112e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001132:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001136:	ee17 2a90 	vmov	r2, s15
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	605a      	str	r2, [r3, #4]
    s->acc = 0;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2200      	movs	r2, #0
 8001142:	60da      	str	r2, [r3, #12]
    s->amp = 0;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	609a      	str	r2, [r3, #8]

    //Return pointer to struct NCO_T
    return s;
 800114c:	68fb      	ldr	r3, [r7, #12]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	53c8d4f1 	.word	0x53c8d4f1
 800115c:	401921fb 	.word	0x401921fb
 8001160:	0800aae4 	.word	0x0800aae4
 8001164:	4f000000 	.word	0x4f000000

08001168 <nco_get_samples>:
 * phase discontinuities from one call to the next.
 */

void nco_get_samples(NCO_T *s,         //!< [in,out] Pointer to NCO_T struct.
                     uint16_t *y,         //!< [out] Pointer to an array for storage of output samples.
                     int n_samples){   //!< [in] Number of NCO output samples to generate.
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	; 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
	unsigned int i;
	unsigned int kprime;
	unsigned int index;

	for (i = 0; i < n_samples; i++) {
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]
 8001178:	e041      	b.n	80011fe <nco_get_samples+0x96>

        if ((i == 0) && (s->acc == 0)) {
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d107      	bne.n	8001190 <nco_get_samples+0x28>
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d103      	bne.n	8001190 <nco_get_samples+0x28>
            s->acc = 0;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	e008      	b.n	80011a2 <nco_get_samples+0x3a>
        } else {
            // k1prime[n]
            s->acc += s->f0;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	461a      	mov	r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4413      	add	r3, r2
 800119c:	461a      	mov	r2, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	60da      	str	r2, [r3, #12]
        }

        //kprime[n]
        kprime = s->acc + s->theta;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	461a      	mov	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]

        index = kprime >> 23;
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	0ddb      	lsrs	r3, r3, #23
 80011b4:	617b      	str	r3, [r7, #20]
//		y[i] = index;
//        y[i] = (int)((cosine[i / 2] * 2048)/2 + 2047);
        y[i] = (unsigned int)((cosine[index] + 1) * 2047) * s->amp;
 80011b6:	4a17      	ldr	r2, [pc, #92]	; (8001214 <nco_get_samples+0xac>)
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	edd3 7a00 	vldr	s15, [r3]
 80011c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011ca:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001218 <nco_get_samples+0xb0>
 80011ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80011e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	68ba      	ldr	r2, [r7, #8]
 80011ea:	4413      	add	r3, r2
 80011ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011f0:	ee17 2a90 	vmov	r2, s15
 80011f4:	b292      	uxth	r2, r2
 80011f6:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < n_samples; i++) {
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	3301      	adds	r3, #1
 80011fc:	61fb      	str	r3, [r7, #28]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	69fa      	ldr	r2, [r7, #28]
 8001202:	429a      	cmp	r2, r3
 8001204:	d3b9      	bcc.n	800117a <nco_get_samples+0x12>
//        y[i] = (unsigned int)((cosine[index] * 4095) / 2 + 2047);
//        y[i] = cosine[i];
	}
}
 8001206:	bf00      	nop
 8001208:	3724      	adds	r7, #36	; 0x24
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	0800ab14 	.word	0x0800ab14
 8001218:	44ffe000 	.word	0x44ffe000

0800121c <nco_set_frequency>:
 * @returns On return, The NCO_T structure s is modified so that subsequent calls to nco_get_samples()
 * will operate at frequency f_new (without loss of phase continuity).
 */

void nco_set_frequency( NCO_T *s,      //!< [in,out] Pointer to NCO_T struct.
                        float f_new){  //!< [in] New NCO frequency (in cycles/sample).
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	ed87 0a00 	vstr	s0, [r7]
    s->f0 = (int)(f_new * 2 * (1u << 31));
 8001228:	edd7 7a00 	vldr	s15, [r7]
 800122c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001230:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001250 <nco_set_frequency+0x34>
 8001234:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001238:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800123c:	ee17 2a90 	vmov	r2, s15
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	601a      	str	r2, [r3, #0]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	4f000000 	.word	0x4f000000

08001254 <nco_set_amplitude>:
 * @returns On return, The NCO_T structure s is modified so that subsequent calls to nco_get_samples()
 * will operate with the amplitude given by amp
 */

void nco_set_amplitude(	NCO_T *s,
						int amp){
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
	s->amp = (float)amp / 10000.;
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	ee07 3a90 	vmov	s15, r3
 8001264:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001268:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80012a0 <nco_set_amplitude+0x4c>
 800126c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	edc3 7a02 	vstr	s15, [r3, #8]
	/* Don't want to saturate the output */
	if (s->amp > 1) {
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	edd3 7a02 	vldr	s15, [r3, #8]
 800127c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001280:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001288:	dc00      	bgt.n	800128c <nco_set_amplitude+0x38>
		s->amp = 0;
	}
}
 800128a:	e003      	b.n	8001294 <nco_set_amplitude+0x40>
		s->amp = 0;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	461c4000 	.word	0x461c4000

080012a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <HAL_MspInit+0x30>)
 80012ac:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80012b0:	4a08      	ldr	r2, [pc, #32]	; (80012d4 <HAL_MspInit+0x30>)
 80012b2:	f043 0302 	orr.w	r3, r3, #2
 80012b6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HAL_MspInit+0x30>)
 80012bc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	58024400 	.word	0x58024400

080012d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a30      	ldr	r2, [pc, #192]	; (80013b8 <HAL_ADC_MspInit+0xe0>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d159      	bne.n	80013ae <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80012fa:	4b30      	ldr	r3, [pc, #192]	; (80013bc <HAL_ADC_MspInit+0xe4>)
 80012fc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001300:	4a2e      	ldr	r2, [pc, #184]	; (80013bc <HAL_ADC_MspInit+0xe4>)
 8001302:	f043 0320 	orr.w	r3, r3, #32
 8001306:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800130a:	4b2c      	ldr	r3, [pc, #176]	; (80013bc <HAL_ADC_MspInit+0xe4>)
 800130c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001310:	f003 0320 	and.w	r3, r3, #32
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001318:	4b28      	ldr	r3, [pc, #160]	; (80013bc <HAL_ADC_MspInit+0xe4>)
 800131a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800131e:	4a27      	ldr	r2, [pc, #156]	; (80013bc <HAL_ADC_MspInit+0xe4>)
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001328:	4b24      	ldr	r3, [pc, #144]	; (80013bc <HAL_ADC_MspInit+0xe4>)
 800132a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001336:	2302      	movs	r3, #2
 8001338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800133a:	2303      	movs	r3, #3
 800133c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001342:	f107 0314 	add.w	r3, r7, #20
 8001346:	4619      	mov	r1, r3
 8001348:	481d      	ldr	r0, [pc, #116]	; (80013c0 <HAL_ADC_MspInit+0xe8>)
 800134a:	f004 f8bd 	bl	80054c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800134e:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <HAL_ADC_MspInit+0xec>)
 8001350:	4a1d      	ldr	r2, [pc, #116]	; (80013c8 <HAL_ADC_MspInit+0xf0>)
 8001352:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001354:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <HAL_ADC_MspInit+0xec>)
 8001356:	2209      	movs	r2, #9
 8001358:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800135a:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <HAL_ADC_MspInit+0xec>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001360:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <HAL_ADC_MspInit+0xec>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001366:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <HAL_ADC_MspInit+0xec>)
 8001368:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800136c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <HAL_ADC_MspInit+0xec>)
 8001370:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001374:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001376:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <HAL_ADC_MspInit+0xec>)
 8001378:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800137c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <HAL_ADC_MspInit+0xec>)
 8001380:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001384:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <HAL_ADC_MspInit+0xec>)
 8001388:	2200      	movs	r2, #0
 800138a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800138c:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <HAL_ADC_MspInit+0xec>)
 800138e:	2200      	movs	r2, #0
 8001390:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001392:	480c      	ldr	r0, [pc, #48]	; (80013c4 <HAL_ADC_MspInit+0xec>)
 8001394:	f001 ff1c 	bl	80031d0 <HAL_DMA_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <HAL_ADC_MspInit+0xca>
    {
      Error_Handler();
 800139e:	f7ff fe8f 	bl	80010c0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <HAL_ADC_MspInit+0xec>)
 80013a6:	64da      	str	r2, [r3, #76]	; 0x4c
 80013a8:	4a06      	ldr	r2, [pc, #24]	; (80013c4 <HAL_ADC_MspInit+0xec>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013ae:	bf00      	nop
 80013b0:	3728      	adds	r7, #40	; 0x28
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40022000 	.word	0x40022000
 80013bc:	58024400 	.word	0x58024400
 80013c0:	58020400 	.word	0x58020400
 80013c4:	24000270 	.word	0x24000270
 80013c8:	40020010 	.word	0x40020010

080013cc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08a      	sub	sp, #40	; 0x28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a30      	ldr	r2, [pc, #192]	; (80014ac <HAL_DAC_MspInit+0xe0>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d159      	bne.n	80014a2 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80013ee:	4b30      	ldr	r3, [pc, #192]	; (80014b0 <HAL_DAC_MspInit+0xe4>)
 80013f0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80013f4:	4a2e      	ldr	r2, [pc, #184]	; (80014b0 <HAL_DAC_MspInit+0xe4>)
 80013f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80013fa:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80013fe:	4b2c      	ldr	r3, [pc, #176]	; (80014b0 <HAL_DAC_MspInit+0xe4>)
 8001400:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001404:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140c:	4b28      	ldr	r3, [pc, #160]	; (80014b0 <HAL_DAC_MspInit+0xe4>)
 800140e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001412:	4a27      	ldr	r2, [pc, #156]	; (80014b0 <HAL_DAC_MspInit+0xe4>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800141c:	4b24      	ldr	r3, [pc, #144]	; (80014b0 <HAL_DAC_MspInit+0xe4>)
 800141e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800142a:	2310      	movs	r3, #16
 800142c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800142e:	2303      	movs	r3, #3
 8001430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	4619      	mov	r1, r3
 800143c:	481d      	ldr	r0, [pc, #116]	; (80014b4 <HAL_DAC_MspInit+0xe8>)
 800143e:	f004 f843 	bl	80054c8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA2_Stream0;
 8001442:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <HAL_DAC_MspInit+0xec>)
 8001444:	4a1d      	ldr	r2, [pc, #116]	; (80014bc <HAL_DAC_MspInit+0xf0>)
 8001446:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001448:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <HAL_DAC_MspInit+0xec>)
 800144a:	2243      	movs	r2, #67	; 0x43
 800144c:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800144e:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <HAL_DAC_MspInit+0xec>)
 8001450:	2240      	movs	r2, #64	; 0x40
 8001452:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001454:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <HAL_DAC_MspInit+0xec>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800145a:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <HAL_DAC_MspInit+0xec>)
 800145c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001460:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <HAL_DAC_MspInit+0xec>)
 8001464:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001468:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800146a:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <HAL_DAC_MspInit+0xec>)
 800146c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001470:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001472:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <HAL_DAC_MspInit+0xec>)
 8001474:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001478:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800147a:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <HAL_DAC_MspInit+0xec>)
 800147c:	2200      	movs	r2, #0
 800147e:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001480:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <HAL_DAC_MspInit+0xec>)
 8001482:	2200      	movs	r2, #0
 8001484:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001486:	480c      	ldr	r0, [pc, #48]	; (80014b8 <HAL_DAC_MspInit+0xec>)
 8001488:	f001 fea2 	bl	80031d0 <HAL_DMA_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001492:	f7ff fe15 	bl	80010c0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a07      	ldr	r2, [pc, #28]	; (80014b8 <HAL_DAC_MspInit+0xec>)
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	4a06      	ldr	r2, [pc, #24]	; (80014b8 <HAL_DAC_MspInit+0xec>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80014a2:	bf00      	nop
 80014a4:	3728      	adds	r7, #40	; 0x28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40007400 	.word	0x40007400
 80014b0:	58024400 	.word	0x58024400
 80014b4:	58020000 	.word	0x58020000
 80014b8:	24000148 	.word	0x24000148
 80014bc:	40020410 	.word	0x40020410

080014c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08e      	sub	sp, #56	; 0x38
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014e0:	d12e      	bne.n	8001540 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014e2:	4b4c      	ldr	r3, [pc, #304]	; (8001614 <HAL_TIM_Base_MspInit+0x154>)
 80014e4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80014e8:	4a4a      	ldr	r2, [pc, #296]	; (8001614 <HAL_TIM_Base_MspInit+0x154>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80014f2:	4b48      	ldr	r3, [pc, #288]	; (8001614 <HAL_TIM_Base_MspInit+0x154>)
 80014f4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	623b      	str	r3, [r7, #32]
 80014fe:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001500:	4b44      	ldr	r3, [pc, #272]	; (8001614 <HAL_TIM_Base_MspInit+0x154>)
 8001502:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001506:	4a43      	ldr	r2, [pc, #268]	; (8001614 <HAL_TIM_Base_MspInit+0x154>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001510:	4b40      	ldr	r3, [pc, #256]	; (8001614 <HAL_TIM_Base_MspInit+0x154>)
 8001512:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	61fb      	str	r3, [r7, #28]
 800151c:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800151e:	2301      	movs	r3, #1
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001522:	2302      	movs	r3, #2
 8001524:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152a:	2303      	movs	r3, #3
 800152c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800152e:	2301      	movs	r3, #1
 8001530:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001536:	4619      	mov	r1, r3
 8001538:	4837      	ldr	r0, [pc, #220]	; (8001618 <HAL_TIM_Base_MspInit+0x158>)
 800153a:	f003 ffc5 	bl	80054c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800153e:	e064      	b.n	800160a <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM5)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a35      	ldr	r2, [pc, #212]	; (800161c <HAL_TIM_Base_MspInit+0x15c>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d12e      	bne.n	80015a8 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800154a:	4b32      	ldr	r3, [pc, #200]	; (8001614 <HAL_TIM_Base_MspInit+0x154>)
 800154c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001550:	4a30      	ldr	r2, [pc, #192]	; (8001614 <HAL_TIM_Base_MspInit+0x154>)
 8001552:	f043 0308 	orr.w	r3, r3, #8
 8001556:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800155a:	4b2e      	ldr	r3, [pc, #184]	; (8001614 <HAL_TIM_Base_MspInit+0x154>)
 800155c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001560:	f003 0308 	and.w	r3, r3, #8
 8001564:	61bb      	str	r3, [r7, #24]
 8001566:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001568:	4b2a      	ldr	r3, [pc, #168]	; (8001614 <HAL_TIM_Base_MspInit+0x154>)
 800156a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800156e:	4a29      	ldr	r2, [pc, #164]	; (8001614 <HAL_TIM_Base_MspInit+0x154>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001578:	4b26      	ldr	r3, [pc, #152]	; (8001614 <HAL_TIM_Base_MspInit+0x154>)
 800157a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001586:	2302      	movs	r3, #2
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001592:	2303      	movs	r3, #3
 8001594:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001596:	2302      	movs	r3, #2
 8001598:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159e:	4619      	mov	r1, r3
 80015a0:	481d      	ldr	r0, [pc, #116]	; (8001618 <HAL_TIM_Base_MspInit+0x158>)
 80015a2:	f003 ff91 	bl	80054c8 <HAL_GPIO_Init>
}
 80015a6:	e030      	b.n	800160a <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM6)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a1c      	ldr	r2, [pc, #112]	; (8001620 <HAL_TIM_Base_MspInit+0x160>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d10f      	bne.n	80015d2 <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80015b2:	4b18      	ldr	r3, [pc, #96]	; (8001614 <HAL_TIM_Base_MspInit+0x154>)
 80015b4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80015b8:	4a16      	ldr	r2, [pc, #88]	; (8001614 <HAL_TIM_Base_MspInit+0x154>)
 80015ba:	f043 0310 	orr.w	r3, r3, #16
 80015be:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80015c2:	4b14      	ldr	r3, [pc, #80]	; (8001614 <HAL_TIM_Base_MspInit+0x154>)
 80015c4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80015c8:	f003 0310 	and.w	r3, r3, #16
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	693b      	ldr	r3, [r7, #16]
}
 80015d0:	e01b      	b.n	800160a <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM7)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a13      	ldr	r2, [pc, #76]	; (8001624 <HAL_TIM_Base_MspInit+0x164>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d116      	bne.n	800160a <HAL_TIM_Base_MspInit+0x14a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80015dc:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <HAL_TIM_Base_MspInit+0x154>)
 80015de:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80015e2:	4a0c      	ldr	r2, [pc, #48]	; (8001614 <HAL_TIM_Base_MspInit+0x154>)
 80015e4:	f043 0320 	orr.w	r3, r3, #32
 80015e8:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <HAL_TIM_Base_MspInit+0x154>)
 80015ee:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80015f2:	f003 0320 	and.w	r3, r3, #32
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2100      	movs	r1, #0
 80015fe:	2037      	movs	r0, #55	; 0x37
 8001600:	f001 faa7 	bl	8002b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001604:	2037      	movs	r0, #55	; 0x37
 8001606:	f001 fabe 	bl	8002b86 <HAL_NVIC_EnableIRQ>
}
 800160a:	bf00      	nop
 800160c:	3738      	adds	r7, #56	; 0x38
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	58024400 	.word	0x58024400
 8001618:	58020000 	.word	0x58020000
 800161c:	40000c00 	.word	0x40000c00
 8001620:	40001000 	.word	0x40001000
 8001624:	40001400 	.word	0x40001400

08001628 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a1a      	ldr	r2, [pc, #104]	; (80016b0 <HAL_UART_MspInit+0x88>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d12e      	bne.n	80016a8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800164a:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <HAL_UART_MspInit+0x8c>)
 800164c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001650:	4a18      	ldr	r2, [pc, #96]	; (80016b4 <HAL_UART_MspInit+0x8c>)
 8001652:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001656:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800165a:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <HAL_UART_MspInit+0x8c>)
 800165c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001660:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_UART_MspInit+0x8c>)
 800166a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800166e:	4a11      	ldr	r2, [pc, #68]	; (80016b4 <HAL_UART_MspInit+0x8c>)
 8001670:	f043 0308 	orr.w	r3, r3, #8
 8001674:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001678:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <HAL_UART_MspInit+0x8c>)
 800167a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800167e:	f003 0308 	and.w	r3, r3, #8
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001686:	f44f 7340 	mov.w	r3, #768	; 0x300
 800168a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168c:	2302      	movs	r3, #2
 800168e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001698:	2307      	movs	r3, #7
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4619      	mov	r1, r3
 80016a2:	4805      	ldr	r0, [pc, #20]	; (80016b8 <HAL_UART_MspInit+0x90>)
 80016a4:	f003 ff10 	bl	80054c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016a8:	bf00      	nop
 80016aa:	3728      	adds	r7, #40	; 0x28
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40004800 	.word	0x40004800
 80016b4:	58024400 	.word	0x58024400
 80016b8:	58020c00 	.word	0x58020c00

080016bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ce:	e7fe      	b.n	80016ce <HardFault_Handler+0x4>

080016d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <MemManage_Handler+0x4>

080016d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016da:	e7fe      	b.n	80016da <BusFault_Handler+0x4>

080016dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <UsageFault_Handler+0x4>

080016e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001710:	f000 f9f6 	bl	8001b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}

08001718 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800171c:	4802      	ldr	r0, [pc, #8]	; (8001728 <DMA1_Stream0_IRQHandler+0x10>)
 800171e:	f002 fb51 	bl	8003dc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	24000270 	.word	0x24000270

0800172c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001730:	4802      	ldr	r0, [pc, #8]	; (800173c <TIM7_IRQHandler+0x10>)
 8001732:	f006 ff67 	bl	8008604 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	24000380 	.word	0x24000380

08001740 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001744:	4802      	ldr	r0, [pc, #8]	; (8001750 <DMA2_Stream0_IRQHandler+0x10>)
 8001746:	f002 fb3d 	bl	8003dc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	24000148 	.word	0x24000148

08001754 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800175e:	f008 fcf1 	bl	800a144 <__errno>
 8001762:	4602      	mov	r2, r0
 8001764:	2316      	movs	r3, #22
 8001766:	6013      	str	r3, [r2, #0]
	return -1;
 8001768:	f04f 33ff 	mov.w	r3, #4294967295
}
 800176c:	4618      	mov	r0, r3
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <_exit>:

void _exit (int status)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800177c:	f04f 31ff 	mov.w	r1, #4294967295
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff ffe7 	bl	8001754 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001786:	e7fe      	b.n	8001786 <_exit+0x12>

08001788 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	e00a      	b.n	80017b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800179a:	f3af 8000 	nop.w
 800179e:	4601      	mov	r1, r0
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	1c5a      	adds	r2, r3, #1
 80017a4:	60ba      	str	r2, [r7, #8]
 80017a6:	b2ca      	uxtb	r2, r1
 80017a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	3301      	adds	r3, #1
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	dbf0      	blt.n	800179a <_read+0x12>
	}

return len;
 80017b8:	687b      	ldr	r3, [r7, #4]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b086      	sub	sp, #24
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	60f8      	str	r0, [r7, #12]
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
 80017d2:	e009      	b.n	80017e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	1c5a      	adds	r2, r3, #1
 80017d8:	60ba      	str	r2, [r7, #8]
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	3301      	adds	r3, #1
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	dbf1      	blt.n	80017d4 <_write+0x12>
	}
	return len;
 80017f0:	687b      	ldr	r3, [r7, #4]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <_close>:

int _close(int file)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
	return -1;
 8001802:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001806:	4618      	mov	r0, r3
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001822:	605a      	str	r2, [r3, #4]
	return 0;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <_isatty>:

int _isatty(int file)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
	return 1;
 800183a:	2301      	movs	r3, #1
}
 800183c:	4618      	mov	r0, r3
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
	return 0;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
	...

08001864 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800186c:	4a14      	ldr	r2, [pc, #80]	; (80018c0 <_sbrk+0x5c>)
 800186e:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <_sbrk+0x60>)
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001878:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <_sbrk+0x64>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d102      	bne.n	8001886 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001880:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <_sbrk+0x64>)
 8001882:	4a12      	ldr	r2, [pc, #72]	; (80018cc <_sbrk+0x68>)
 8001884:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001886:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <_sbrk+0x64>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	429a      	cmp	r2, r3
 8001892:	d207      	bcs.n	80018a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001894:	f008 fc56 	bl	800a144 <__errno>
 8001898:	4602      	mov	r2, r0
 800189a:	230c      	movs	r3, #12
 800189c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800189e:	f04f 33ff 	mov.w	r3, #4294967295
 80018a2:	e009      	b.n	80018b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <_sbrk+0x64>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018aa:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <_sbrk+0x64>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	4a05      	ldr	r2, [pc, #20]	; (80018c8 <_sbrk+0x64>)
 80018b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018b6:	68fb      	ldr	r3, [r7, #12]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	24100000 	.word	0x24100000
 80018c4:	00000400 	.word	0x00000400
 80018c8:	2400009c 	.word	0x2400009c
 80018cc:	240003d8 	.word	0x240003d8

080018d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018d4:	4b34      	ldr	r3, [pc, #208]	; (80019a8 <SystemInit+0xd8>)
 80018d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018da:	4a33      	ldr	r2, [pc, #204]	; (80019a8 <SystemInit+0xd8>)
 80018dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018e4:	4b31      	ldr	r3, [pc, #196]	; (80019ac <SystemInit+0xdc>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 030f 	and.w	r3, r3, #15
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d807      	bhi.n	8001900 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018f0:	4b2e      	ldr	r3, [pc, #184]	; (80019ac <SystemInit+0xdc>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f023 030f 	bic.w	r3, r3, #15
 80018f8:	4a2c      	ldr	r2, [pc, #176]	; (80019ac <SystemInit+0xdc>)
 80018fa:	f043 0303 	orr.w	r3, r3, #3
 80018fe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001900:	4b2b      	ldr	r3, [pc, #172]	; (80019b0 <SystemInit+0xe0>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a2a      	ldr	r2, [pc, #168]	; (80019b0 <SystemInit+0xe0>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800190c:	4b28      	ldr	r3, [pc, #160]	; (80019b0 <SystemInit+0xe0>)
 800190e:	2200      	movs	r2, #0
 8001910:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001912:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <SystemInit+0xe0>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	4926      	ldr	r1, [pc, #152]	; (80019b0 <SystemInit+0xe0>)
 8001918:	4b26      	ldr	r3, [pc, #152]	; (80019b4 <SystemInit+0xe4>)
 800191a:	4013      	ands	r3, r2
 800191c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800191e:	4b23      	ldr	r3, [pc, #140]	; (80019ac <SystemInit+0xdc>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	2b03      	cmp	r3, #3
 8001928:	d907      	bls.n	800193a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800192a:	4b20      	ldr	r3, [pc, #128]	; (80019ac <SystemInit+0xdc>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f023 030f 	bic.w	r3, r3, #15
 8001932:	4a1e      	ldr	r2, [pc, #120]	; (80019ac <SystemInit+0xdc>)
 8001934:	f043 0303 	orr.w	r3, r3, #3
 8001938:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800193a:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <SystemInit+0xe0>)
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001940:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <SystemInit+0xe0>)
 8001942:	2200      	movs	r2, #0
 8001944:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001946:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <SystemInit+0xe0>)
 8001948:	2200      	movs	r2, #0
 800194a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800194c:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <SystemInit+0xe0>)
 800194e:	4a1a      	ldr	r2, [pc, #104]	; (80019b8 <SystemInit+0xe8>)
 8001950:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001952:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <SystemInit+0xe0>)
 8001954:	4a19      	ldr	r2, [pc, #100]	; (80019bc <SystemInit+0xec>)
 8001956:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001958:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <SystemInit+0xe0>)
 800195a:	4a19      	ldr	r2, [pc, #100]	; (80019c0 <SystemInit+0xf0>)
 800195c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800195e:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <SystemInit+0xe0>)
 8001960:	2200      	movs	r2, #0
 8001962:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001964:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <SystemInit+0xe0>)
 8001966:	4a16      	ldr	r2, [pc, #88]	; (80019c0 <SystemInit+0xf0>)
 8001968:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800196a:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <SystemInit+0xe0>)
 800196c:	2200      	movs	r2, #0
 800196e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001970:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <SystemInit+0xe0>)
 8001972:	4a13      	ldr	r2, [pc, #76]	; (80019c0 <SystemInit+0xf0>)
 8001974:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <SystemInit+0xe0>)
 8001978:	2200      	movs	r2, #0
 800197a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800197c:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <SystemInit+0xe0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a0b      	ldr	r2, [pc, #44]	; (80019b0 <SystemInit+0xe0>)
 8001982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001986:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001988:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <SystemInit+0xe0>)
 800198a:	2200      	movs	r2, #0
 800198c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800198e:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <SystemInit+0xf4>)
 8001990:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001994:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001996:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <SystemInit+0xd8>)
 8001998:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800199c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000ed00 	.word	0xe000ed00
 80019ac:	52002000 	.word	0x52002000
 80019b0:	58024400 	.word	0x58024400
 80019b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80019b8:	02020200 	.word	0x02020200
 80019bc:	01ff0000 	.word	0x01ff0000
 80019c0:	01010280 	.word	0x01010280
 80019c4:	52004000 	.word	0x52004000

080019c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a00 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80019cc:	f7ff ff80 	bl	80018d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80019d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019d2:	e003      	b.n	80019dc <LoopCopyDataInit>

080019d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80019d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019da:	3104      	adds	r1, #4

080019dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019dc:	480a      	ldr	r0, [pc, #40]	; (8001a08 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80019de:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80019e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019e4:	d3f6      	bcc.n	80019d4 <CopyDataInit>
  ldr  r2, =_sbss
 80019e6:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80019e8:	e002      	b.n	80019f0 <LoopFillZerobss>

080019ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80019ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019ec:	f842 3b04 	str.w	r3, [r2], #4

080019f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80019f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019f4:	d3f9      	bcc.n	80019ea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80019f6:	f008 fbbf 	bl	800a178 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019fa:	f7fe fdf9 	bl	80005f0 <main>
  bx  lr
 80019fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a00:	24100000 	.word	0x24100000
  ldr  r3, =_sidata
 8001a04:	0800b3b8 	.word	0x0800b3b8
  ldr  r0, =_sdata
 8001a08:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001a0c:	24000074 	.word	0x24000074
  ldr  r2, =_sbss
 8001a10:	24000074 	.word	0x24000074
  ldr  r3, = _ebss
 8001a14:	240003d8 	.word	0x240003d8

08001a18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a18:	e7fe      	b.n	8001a18 <ADC_IRQHandler>
	...

08001a1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a22:	2003      	movs	r0, #3
 8001a24:	f001 f88a 	bl	8002b3c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001a28:	f004 fd2a 	bl	8006480 <HAL_RCC_GetSysClockFreq>
 8001a2c:	4601      	mov	r1, r0
 8001a2e:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <HAL_Init+0x68>)
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	0a1b      	lsrs	r3, r3, #8
 8001a34:	f003 030f 	and.w	r3, r3, #15
 8001a38:	4a13      	ldr	r2, [pc, #76]	; (8001a88 <HAL_Init+0x6c>)
 8001a3a:	5cd3      	ldrb	r3, [r2, r3]
 8001a3c:	f003 031f 	and.w	r3, r3, #31
 8001a40:	fa21 f303 	lsr.w	r3, r1, r3
 8001a44:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001a46:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <HAL_Init+0x68>)
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	4a0e      	ldr	r2, [pc, #56]	; (8001a88 <HAL_Init+0x6c>)
 8001a50:	5cd3      	ldrb	r3, [r2, r3]
 8001a52:	f003 031f 	and.w	r3, r3, #31
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5c:	4a0b      	ldr	r2, [pc, #44]	; (8001a8c <HAL_Init+0x70>)
 8001a5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a60:	4a0b      	ldr	r2, [pc, #44]	; (8001a90 <HAL_Init+0x74>)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a66:	2000      	movs	r0, #0
 8001a68:	f000 f814 	bl	8001a94 <HAL_InitTick>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e002      	b.n	8001a7c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a76:	f7ff fc15 	bl	80012a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	58024400 	.word	0x58024400
 8001a88:	0800b314 	.word	0x0800b314
 8001a8c:	24000004 	.word	0x24000004
 8001a90:	24000000 	.word	0x24000000

08001a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a9c:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <HAL_InitTick+0x60>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e021      	b.n	8001aec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001aa8:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <HAL_InitTick+0x64>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <HAL_InitTick+0x60>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ab6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f001 f86f 	bl	8002ba2 <HAL_SYSTICK_Config>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e00e      	b.n	8001aec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b0f      	cmp	r3, #15
 8001ad2:	d80a      	bhi.n	8001aea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8001adc:	f001 f839 	bl	8002b52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ae0:	4a06      	ldr	r2, [pc, #24]	; (8001afc <HAL_InitTick+0x68>)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	e000      	b.n	8001aec <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	2400000c 	.word	0x2400000c
 8001af8:	24000000 	.word	0x24000000
 8001afc:	24000008 	.word	0x24000008

08001b00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <HAL_IncTick+0x20>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_IncTick+0x24>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4413      	add	r3, r2
 8001b10:	4a04      	ldr	r2, [pc, #16]	; (8001b24 <HAL_IncTick+0x24>)
 8001b12:	6013      	str	r3, [r2, #0]
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	2400000c 	.word	0x2400000c
 8001b24:	240003d0 	.word	0x240003d0

08001b28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b2c:	4b03      	ldr	r3, [pc, #12]	; (8001b3c <HAL_GetTick+0x14>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	240003d0 	.word	0x240003d0

08001b40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b48:	f7ff ffee 	bl	8001b28 <HAL_GetTick>
 8001b4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b58:	d005      	beq.n	8001b66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <HAL_Delay+0x40>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	4413      	add	r3, r2
 8001b64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b66:	bf00      	nop
 8001b68:	f7ff ffde 	bl	8001b28 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d8f7      	bhi.n	8001b68 <HAL_Delay+0x28>
  {
  }
}
 8001b78:	bf00      	nop
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	2400000c 	.word	0x2400000c

08001b84 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	609a      	str	r2, [r3, #8]
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b087      	sub	sp, #28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
 8001bf8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	3360      	adds	r3, #96	; 0x60
 8001bfe:	461a      	mov	r2, r3
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	430b      	orrs	r3, r1
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001c20:	bf00      	nop
 8001c22:	371c      	adds	r7, #28
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	f003 031f 	and.w	r3, r3, #31
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	611a      	str	r2, [r3, #16]
}
 8001c52:	bf00      	nop
 8001c54:	3714      	adds	r7, #20
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b087      	sub	sp, #28
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	60f8      	str	r0, [r7, #12]
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	3360      	adds	r3, #96	; 0x60
 8001c6e:	461a      	mov	r2, r3
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	431a      	orrs	r2, r3
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	601a      	str	r2, [r3, #0]
  }
}
 8001c88:	bf00      	nop
 8001c8a:	371c      	adds	r7, #28
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b087      	sub	sp, #28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	3330      	adds	r3, #48	; 0x30
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	0a1b      	lsrs	r3, r3, #8
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	f003 030c 	and.w	r3, r3, #12
 8001cb0:	4413      	add	r3, r2
 8001cb2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	f003 031f 	and.w	r3, r3, #31
 8001cbe:	211f      	movs	r1, #31
 8001cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	0e9b      	lsrs	r3, r3, #26
 8001ccc:	f003 011f 	and.w	r1, r3, #31
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	f003 031f 	and.w	r3, r3, #31
 8001cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ce0:	bf00      	nop
 8001ce2:	371c      	adds	r7, #28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b087      	sub	sp, #28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	3314      	adds	r3, #20
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	0e5b      	lsrs	r3, r3, #25
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	4413      	add	r3, r2
 8001d0a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	0d1b      	lsrs	r3, r3, #20
 8001d14:	f003 031f 	and.w	r3, r3, #31
 8001d18:	2107      	movs	r1, #7
 8001d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	401a      	ands	r2, r3
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	0d1b      	lsrs	r3, r3, #20
 8001d26:	f003 031f 	and.w	r3, r3, #31
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d30:	431a      	orrs	r2, r3
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d36:	bf00      	nop
 8001d38:	371c      	adds	r7, #28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
	...

08001d44 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	401a      	ands	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f003 0318 	and.w	r3, r3, #24
 8001d66:	4908      	ldr	r1, [pc, #32]	; (8001d88 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d68:	40d9      	lsrs	r1, r3
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	400b      	ands	r3, r1
 8001d6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d72:	431a      	orrs	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001d7a:	bf00      	nop
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	000fffff 	.word	0x000fffff

08001d8c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	4b04      	ldr	r3, [pc, #16]	; (8001dac <LL_ADC_DisableDeepPowerDown+0x20>)
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	6093      	str	r3, [r2, #8]
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	5fffffc0 	.word	0x5fffffc0

08001db0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001dc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001dc4:	d101      	bne.n	8001dca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <LL_ADC_EnableInternalRegulator+0x24>)
 8001de6:	4013      	ands	r3, r2
 8001de8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	6fffffc0 	.word	0x6fffffc0

08001e00 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e14:	d101      	bne.n	8001e1a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d101      	bne.n	8001e40 <LL_ADC_IsEnabled+0x18>
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e000      	b.n	8001e42 <LL_ADC_IsEnabled+0x1a>
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	d101      	bne.n	8001e66 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 0308 	and.w	r3, r3, #8
 8001e84:	2b08      	cmp	r3, #8
 8001e86:	d101      	bne.n	8001e8c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e000      	b.n	8001e8e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e9c:	b590      	push	{r4, r7, lr}
 8001e9e:	b089      	sub	sp, #36	; 0x24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e137      	b.n	8002126 <HAL_ADC_Init+0x28a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d109      	bne.n	8001ed8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7ff fa07 	bl	80012d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff67 	bl	8001db0 <LL_ADC_IsDeepPowerDownEnabled>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d004      	beq.n	8001ef2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff ff4d 	bl	8001d8c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff ff82 	bl	8001e00 <LL_ADC_IsInternalRegulatorEnabled>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d113      	bne.n	8001f2a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff ff66 	bl	8001dd8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001f0c:	4b88      	ldr	r3, [pc, #544]	; (8002130 <HAL_ADC_Init+0x294>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	099b      	lsrs	r3, r3, #6
 8001f12:	4a88      	ldr	r2, [pc, #544]	; (8002134 <HAL_ADC_Init+0x298>)
 8001f14:	fba2 2303 	umull	r2, r3, r2, r3
 8001f18:	099b      	lsrs	r3, r3, #6
 8001f1a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f1c:	e002      	b.n	8001f24 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	3b01      	subs	r3, #1
 8001f22:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f9      	bne.n	8001f1e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff ff66 	bl	8001e00 <LL_ADC_IsInternalRegulatorEnabled>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10d      	bne.n	8001f56 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3e:	f043 0210 	orr.w	r2, r3, #16
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4a:	f043 0201 	orr.w	r2, r3, #1
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff ff77 	bl	8001e4e <LL_ADC_REG_IsConversionOngoing>
 8001f60:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f66:	f003 0310 	and.w	r3, r3, #16
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f040 80d2 	bne.w	8002114 <HAL_ADC_Init+0x278>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f040 80ce 	bne.w	8002114 <HAL_ADC_Init+0x278>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001f80:	f043 0202 	orr.w	r2, r3, #2
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff ff4b 	bl	8001e28 <LL_ADC_IsEnabled>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d110      	bne.n	8001fba <HAL_ADC_Init+0x11e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f98:	4867      	ldr	r0, [pc, #412]	; (8002138 <HAL_ADC_Init+0x29c>)
 8001f9a:	f7ff ff45 	bl	8001e28 <LL_ADC_IsEnabled>
 8001f9e:	4604      	mov	r4, r0
 8001fa0:	4866      	ldr	r0, [pc, #408]	; (800213c <HAL_ADC_Init+0x2a0>)
 8001fa2:	f7ff ff41 	bl	8001e28 <LL_ADC_IsEnabled>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	4323      	orrs	r3, r4
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d105      	bne.n	8001fba <HAL_ADC_Init+0x11e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4862      	ldr	r0, [pc, #392]	; (8002140 <HAL_ADC_Init+0x2a4>)
 8001fb6:	f7ff fde5 	bl	8001b84 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	7d5b      	ldrb	r3, [r3, #21]
 8001fbe:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fc4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001fca:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	7f1b      	ldrb	r3, [r3, #28]
 8001fd0:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	7f1b      	ldrb	r3, [r3, #28]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d106      	bne.n	8001fec <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	045b      	lsls	r3, r3, #17
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d009      	beq.n	8002008 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002000:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4313      	orrs	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	4b4d      	ldr	r3, [pc, #308]	; (8002144 <HAL_ADC_Init+0x2a8>)
 8002010:	4013      	ands	r3, r2
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6812      	ldr	r2, [r2, #0]
 8002016:	69b9      	ldr	r1, [r7, #24]
 8002018:	430b      	orrs	r3, r1
 800201a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ff14 	bl	8001e4e <LL_ADC_REG_IsConversionOngoing>
 8002026:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff ff21 	bl	8001e74 <LL_ADC_INJ_IsConversionOngoing>
 8002032:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d14a      	bne.n	80020d0 <HAL_ADC_Init+0x234>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d147      	bne.n	80020d0 <HAL_ADC_Init+0x234>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	7d1b      	ldrb	r3, [r3, #20]
 8002044:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68da      	ldr	r2, [r3, #12]
 8002054:	4b3c      	ldr	r3, [pc, #240]	; (8002148 <HAL_ADC_Init+0x2ac>)
 8002056:	4013      	ands	r3, r2
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6812      	ldr	r2, [r2, #0]
 800205c:	69b9      	ldr	r1, [r7, #24]
 800205e:	430b      	orrs	r3, r1
 8002060:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002068:	2b01      	cmp	r3, #1
 800206a:	d11b      	bne.n	80020a4 <HAL_ADC_Init+0x208>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	691a      	ldr	r2, [r3, #16]
 8002078:	4b34      	ldr	r3, [pc, #208]	; (800214c <HAL_ADC_Init+0x2b0>)
 800207a:	4013      	ands	r3, r2
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002080:	3a01      	subs	r2, #1
 8002082:	0411      	lsls	r1, r2, #16
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002088:	4311      	orrs	r1, r2
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800208e:	4311      	orrs	r1, r2
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002094:	430a      	orrs	r2, r1
 8002096:	431a      	orrs	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f042 0201 	orr.w	r2, r2, #1
 80020a0:	611a      	str	r2, [r3, #16]
 80020a2:	e007      	b.n	80020b4 <HAL_ADC_Init+0x218>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	691a      	ldr	r2, [r3, #16]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 0201 	bic.w	r2, r2, #1
 80020b2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	430a      	orrs	r2, r1
 80020c8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 faee 	bl	80026ac <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d10c      	bne.n	80020f2 <HAL_ADC_Init+0x256>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	f023 010f 	bic.w	r1, r3, #15
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	1e5a      	subs	r2, r3, #1
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	631a      	str	r2, [r3, #48]	; 0x30
 80020f0:	e007      	b.n	8002102 <HAL_ADC_Init+0x266>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 020f 	bic.w	r2, r2, #15
 8002100:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002106:	f023 0303 	bic.w	r3, r3, #3
 800210a:	f043 0201 	orr.w	r2, r3, #1
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	655a      	str	r2, [r3, #84]	; 0x54
 8002112:	e007      	b.n	8002124 <HAL_ADC_Init+0x288>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002118:	f043 0210 	orr.w	r2, r3, #16
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002124:	7ffb      	ldrb	r3, [r7, #31]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3724      	adds	r7, #36	; 0x24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd90      	pop	{r4, r7, pc}
 800212e:	bf00      	nop
 8002130:	24000000 	.word	0x24000000
 8002134:	053e2d63 	.word	0x053e2d63
 8002138:	40022000 	.word	0x40022000
 800213c:	40022100 	.word	0x40022100
 8002140:	40022300 	.word	0x40022300
 8002144:	fff0c003 	.word	0xfff0c003
 8002148:	ffffbffc 	.word	0xffffbffc
 800214c:	fc00f81e 	.word	0xfc00f81e

08002150 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002150:	b590      	push	{r4, r7, lr}
 8002152:	b099      	sub	sp, #100	; 0x64
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800215a:	2300      	movs	r3, #0
 800215c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	4aa1      	ldr	r2, [pc, #644]	; (80023f0 <HAL_ADC_ConfigChannel+0x2a0>)
 800216a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002172:	2b01      	cmp	r3, #1
 8002174:	d101      	bne.n	800217a <HAL_ADC_ConfigChannel+0x2a>
 8002176:	2302      	movs	r3, #2
 8002178:	e283      	b.n	8002682 <HAL_ADC_ConfigChannel+0x532>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff fe61 	bl	8001e4e <LL_ADC_REG_IsConversionOngoing>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	f040 8268 	bne.w	8002664 <HAL_ADC_ConfigChannel+0x514>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800219c:	2b00      	cmp	r3, #0
 800219e:	d108      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x62>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	0e9b      	lsrs	r3, r3, #26
 80021a6:	f003 031f 	and.w	r3, r3, #31
 80021aa:	2201      	movs	r2, #1
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	e00f      	b.n	80021d2 <HAL_ADC_ConfigChannel+0x82>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021ba:	fa93 f3a3 	rbit	r3, r3
 80021be:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021c2:	fab3 f383 	clz	r3, r3
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	f003 031f 	and.w	r3, r3, #31
 80021cc:	2201      	movs	r2, #1
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6812      	ldr	r2, [r2, #0]
 80021d6:	69d1      	ldr	r1, [r2, #28]
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6812      	ldr	r2, [r2, #0]
 80021dc:	430b      	orrs	r3, r1
 80021de:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6818      	ldr	r0, [r3, #0]
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	6859      	ldr	r1, [r3, #4]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	461a      	mov	r2, r3
 80021ee:	f7ff fd51 	bl	8001c94 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff fe29 	bl	8001e4e <LL_ADC_REG_IsConversionOngoing>
 80021fc:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fe36 	bl	8001e74 <LL_ADC_INJ_IsConversionOngoing>
 8002208:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800220a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800220c:	2b00      	cmp	r3, #0
 800220e:	f040 80a0 	bne.w	8002352 <HAL_ADC_ConfigChannel+0x202>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002212:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002214:	2b00      	cmp	r3, #0
 8002216:	f040 809c 	bne.w	8002352 <HAL_ADC_ConfigChannel+0x202>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6818      	ldr	r0, [r3, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	6819      	ldr	r1, [r3, #0]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	461a      	mov	r2, r3
 8002228:	f7ff fd60 	bl	8001cec <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	f003 0310 	and.w	r3, r3, #16
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10b      	bne.n	8002252 <HAL_ADC_ConfigChannel+0x102>
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	695a      	ldr	r2, [r3, #20]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	089b      	lsrs	r3, r3, #2
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	e00a      	b.n	8002268 <HAL_ADC_ConfigChannel+0x118>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	695a      	ldr	r2, [r3, #20]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	089b      	lsrs	r3, r3, #2
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	2b04      	cmp	r3, #4
 8002270:	d027      	beq.n	80022c2 <HAL_ADC_ConfigChannel+0x172>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6818      	ldr	r0, [r3, #0]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	6919      	ldr	r1, [r3, #16]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002280:	f7ff fcb4 	bl	8001bec <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6818      	ldr	r0, [r3, #0]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	6919      	ldr	r1, [r3, #16]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	7e5b      	ldrb	r3, [r3, #25]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d102      	bne.n	800229a <HAL_ADC_ConfigChannel+0x14a>
 8002294:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002298:	e000      	b.n	800229c <HAL_ADC_ConfigChannel+0x14c>
 800229a:	2300      	movs	r3, #0
 800229c:	461a      	mov	r2, r3
 800229e:	f7ff fcde 	bl	8001c5e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6818      	ldr	r0, [r3, #0]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	6919      	ldr	r1, [r3, #16]
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	7e1b      	ldrb	r3, [r3, #24]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d102      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x168>
 80022b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022b6:	e000      	b.n	80022ba <HAL_ADC_ConfigChannel+0x16a>
 80022b8:	2300      	movs	r3, #0
 80022ba:	461a      	mov	r2, r3
 80022bc:	f7ff fcb6 	bl	8001c2c <LL_ADC_SetDataRightShift>
 80022c0:	e047      	b.n	8002352 <HAL_ADC_ConfigChannel+0x202>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	069b      	lsls	r3, r3, #26
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d107      	bne.n	80022e6 <HAL_ADC_ConfigChannel+0x196>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022e4:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	069b      	lsls	r3, r3, #26
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d107      	bne.n	800230a <HAL_ADC_ConfigChannel+0x1ba>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002308:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002310:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	069b      	lsls	r3, r3, #26
 800231a:	429a      	cmp	r2, r3
 800231c:	d107      	bne.n	800232e <HAL_ADC_ConfigChannel+0x1de>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800232c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002334:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	069b      	lsls	r3, r3, #26
 800233e:	429a      	cmp	r2, r3
 8002340:	d107      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x202>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002350:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff fd66 	bl	8001e28 <LL_ADC_IsEnabled>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	f040 8189 	bne.w	8002676 <HAL_ADC_ConfigChannel+0x526>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6818      	ldr	r0, [r3, #0]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	6819      	ldr	r1, [r3, #0]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	461a      	mov	r2, r3
 8002372:	f7ff fce7 	bl	8001d44 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	4a1d      	ldr	r2, [pc, #116]	; (80023f0 <HAL_ADC_ConfigChannel+0x2a0>)
 800237c:	4293      	cmp	r3, r2
 800237e:	f040 80ff 	bne.w	8002580 <HAL_ADC_ConfigChannel+0x430>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10b      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x25a>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	0e9b      	lsrs	r3, r3, #26
 8002398:	3301      	adds	r3, #1
 800239a:	f003 031f 	and.w	r3, r3, #31
 800239e:	2b09      	cmp	r3, #9
 80023a0:	bf94      	ite	ls
 80023a2:	2301      	movls	r3, #1
 80023a4:	2300      	movhi	r3, #0
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	e012      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x280>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023b2:	fa93 f3a3 	rbit	r3, r3
 80023b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80023b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ba:	fab3 f383 	clz	r3, r3
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	3301      	adds	r3, #1
 80023c2:	f003 031f 	and.w	r3, r3, #31
 80023c6:	2b09      	cmp	r3, #9
 80023c8:	bf94      	ite	ls
 80023ca:	2301      	movls	r3, #1
 80023cc:	2300      	movhi	r3, #0
 80023ce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d066      	beq.n	80024a2 <HAL_ADC_ConfigChannel+0x352>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d109      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x2a4>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	0e9b      	lsrs	r3, r3, #26
 80023e6:	3301      	adds	r3, #1
 80023e8:	069b      	lsls	r3, r3, #26
 80023ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023ee:	e010      	b.n	8002412 <HAL_ADC_ConfigChannel+0x2c2>
 80023f0:	47ff0000 	.word	0x47ff0000
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023fc:	fa93 f3a3 	rbit	r3, r3
 8002400:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002404:	fab3 f383 	clz	r3, r3
 8002408:	b2db      	uxtb	r3, r3
 800240a:	3301      	adds	r3, #1
 800240c:	069b      	lsls	r3, r3, #26
 800240e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800241a:	2b00      	cmp	r3, #0
 800241c:	d109      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x2e2>
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	0e9b      	lsrs	r3, r3, #26
 8002424:	3301      	adds	r3, #1
 8002426:	f003 031f 	and.w	r3, r3, #31
 800242a:	2101      	movs	r1, #1
 800242c:	fa01 f303 	lsl.w	r3, r1, r3
 8002430:	e010      	b.n	8002454 <HAL_ADC_ConfigChannel+0x304>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800243a:	fa93 f3a3 	rbit	r3, r3
 800243e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002442:	fab3 f383 	clz	r3, r3
 8002446:	b2db      	uxtb	r3, r3
 8002448:	3301      	adds	r3, #1
 800244a:	f003 031f 	and.w	r3, r3, #31
 800244e:	2101      	movs	r1, #1
 8002450:	fa01 f303 	lsl.w	r3, r1, r3
 8002454:	ea42 0103 	orr.w	r1, r2, r3
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10a      	bne.n	800247a <HAL_ADC_ConfigChannel+0x32a>
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	0e9b      	lsrs	r3, r3, #26
 800246a:	3301      	adds	r3, #1
 800246c:	f003 021f 	and.w	r2, r3, #31
 8002470:	4613      	mov	r3, r2
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	4413      	add	r3, r2
 8002476:	051b      	lsls	r3, r3, #20
 8002478:	e011      	b.n	800249e <HAL_ADC_ConfigChannel+0x34e>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002482:	fa93 f3a3 	rbit	r3, r3
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	fab3 f383 	clz	r3, r3
 800248e:	b2db      	uxtb	r3, r3
 8002490:	3301      	adds	r3, #1
 8002492:	f003 021f 	and.w	r2, r3, #31
 8002496:	4613      	mov	r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	4413      	add	r3, r2
 800249c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800249e:	430b      	orrs	r3, r1
 80024a0:	e069      	b.n	8002576 <HAL_ADC_ConfigChannel+0x426>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d107      	bne.n	80024be <HAL_ADC_ConfigChannel+0x36e>
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	0e9b      	lsrs	r3, r3, #26
 80024b4:	3301      	adds	r3, #1
 80024b6:	069b      	lsls	r3, r3, #26
 80024b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024bc:	e00e      	b.n	80024dc <HAL_ADC_ConfigChannel+0x38c>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	fa93 f3a3 	rbit	r3, r3
 80024ca:	61fb      	str	r3, [r7, #28]
  return result;
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	fab3 f383 	clz	r3, r3
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	3301      	adds	r3, #1
 80024d6:	069b      	lsls	r3, r3, #26
 80024d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d109      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x3ac>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	0e9b      	lsrs	r3, r3, #26
 80024ee:	3301      	adds	r3, #1
 80024f0:	f003 031f 	and.w	r3, r3, #31
 80024f4:	2101      	movs	r1, #1
 80024f6:	fa01 f303 	lsl.w	r3, r1, r3
 80024fa:	e010      	b.n	800251e <HAL_ADC_ConfigChannel+0x3ce>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	fa93 f3a3 	rbit	r3, r3
 8002508:	617b      	str	r3, [r7, #20]
  return result;
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	fab3 f383 	clz	r3, r3
 8002510:	b2db      	uxtb	r3, r3
 8002512:	3301      	adds	r3, #1
 8002514:	f003 031f 	and.w	r3, r3, #31
 8002518:	2101      	movs	r1, #1
 800251a:	fa01 f303 	lsl.w	r3, r1, r3
 800251e:	ea42 0103 	orr.w	r1, r2, r3
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10d      	bne.n	800254a <HAL_ADC_ConfigChannel+0x3fa>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	0e9b      	lsrs	r3, r3, #26
 8002534:	3301      	adds	r3, #1
 8002536:	f003 021f 	and.w	r2, r3, #31
 800253a:	4613      	mov	r3, r2
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	4413      	add	r3, r2
 8002540:	3b1e      	subs	r3, #30
 8002542:	051b      	lsls	r3, r3, #20
 8002544:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002548:	e014      	b.n	8002574 <HAL_ADC_ConfigChannel+0x424>
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	fa93 f3a3 	rbit	r3, r3
 8002556:	60fb      	str	r3, [r7, #12]
  return result;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	fab3 f383 	clz	r3, r3
 800255e:	b2db      	uxtb	r3, r3
 8002560:	3301      	adds	r3, #1
 8002562:	f003 021f 	and.w	r2, r3, #31
 8002566:	4613      	mov	r3, r2
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	4413      	add	r3, r2
 800256c:	3b1e      	subs	r3, #30
 800256e:	051b      	lsls	r3, r3, #20
 8002570:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002574:	430b      	orrs	r3, r1
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	6892      	ldr	r2, [r2, #8]
 800257a:	4619      	mov	r1, r3
 800257c:	f7ff fbb6 	bl	8001cec <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	da76      	bge.n	8002676 <HAL_ADC_ConfigChannel+0x526>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002588:	4840      	ldr	r0, [pc, #256]	; (800268c <HAL_ADC_ConfigChannel+0x53c>)
 800258a:	f7ff fb21 	bl	8001bd0 <LL_ADC_GetCommonPathInternalCh>
 800258e:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002590:	483f      	ldr	r0, [pc, #252]	; (8002690 <HAL_ADC_ConfigChannel+0x540>)
 8002592:	f7ff fc49 	bl	8001e28 <LL_ADC_IsEnabled>
 8002596:	4604      	mov	r4, r0
 8002598:	483e      	ldr	r0, [pc, #248]	; (8002694 <HAL_ADC_ConfigChannel+0x544>)
 800259a:	f7ff fc45 	bl	8001e28 <LL_ADC_IsEnabled>
 800259e:	4603      	mov	r3, r0
 80025a0:	4323      	orrs	r3, r4
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d154      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x500>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a3b      	ldr	r2, [pc, #236]	; (8002698 <HAL_ADC_ConfigChannel+0x548>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d121      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x4a4>
 80025b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d11c      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x4a4>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a35      	ldr	r2, [pc, #212]	; (8002694 <HAL_ADC_ConfigChannel+0x544>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d158      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80025c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025ca:	4619      	mov	r1, r3
 80025cc:	482f      	ldr	r0, [pc, #188]	; (800268c <HAL_ADC_ConfigChannel+0x53c>)
 80025ce:	f7ff faec 	bl	8001baa <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80025d2:	4b32      	ldr	r3, [pc, #200]	; (800269c <HAL_ADC_ConfigChannel+0x54c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	099b      	lsrs	r3, r3, #6
 80025d8:	4a31      	ldr	r2, [pc, #196]	; (80026a0 <HAL_ADC_ConfigChannel+0x550>)
 80025da:	fba2 2303 	umull	r2, r3, r2, r3
 80025de:	099b      	lsrs	r3, r3, #6
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80025e4:	e002      	b.n	80025ec <HAL_ADC_ConfigChannel+0x49c>
              {
                wait_loop_index--;
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	3b01      	subs	r3, #1
 80025ea:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f9      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x496>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025f2:	e040      	b.n	8002676 <HAL_ADC_ConfigChannel+0x526>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a2a      	ldr	r2, [pc, #168]	; (80026a4 <HAL_ADC_ConfigChannel+0x554>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d111      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x4d2>
 80025fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002600:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10c      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x4d2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a21      	ldr	r2, [pc, #132]	; (8002694 <HAL_ADC_ConfigChannel+0x544>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d131      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002614:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002618:	4619      	mov	r1, r3
 800261a:	481c      	ldr	r0, [pc, #112]	; (800268c <HAL_ADC_ConfigChannel+0x53c>)
 800261c:	f7ff fac5 	bl	8001baa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002620:	e029      	b.n	8002676 <HAL_ADC_ConfigChannel+0x526>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a20      	ldr	r2, [pc, #128]	; (80026a8 <HAL_ADC_ConfigChannel+0x558>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d124      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x526>
 800262c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800262e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d11f      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x526>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a16      	ldr	r2, [pc, #88]	; (8002694 <HAL_ADC_ConfigChannel+0x544>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d11a      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002642:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002646:	4619      	mov	r1, r3
 8002648:	4810      	ldr	r0, [pc, #64]	; (800268c <HAL_ADC_ConfigChannel+0x53c>)
 800264a:	f7ff faae 	bl	8001baa <LL_ADC_SetCommonPathInternalCh>
 800264e:	e012      	b.n	8002676 <HAL_ADC_ConfigChannel+0x526>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002654:	f043 0220 	orr.w	r2, r3, #32
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002662:	e008      	b.n	8002676 <HAL_ADC_ConfigChannel+0x526>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002668:	f043 0220 	orr.w	r2, r3, #32
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800267e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8002682:	4618      	mov	r0, r3
 8002684:	3764      	adds	r7, #100	; 0x64
 8002686:	46bd      	mov	sp, r7
 8002688:	bd90      	pop	{r4, r7, pc}
 800268a:	bf00      	nop
 800268c:	40022300 	.word	0x40022300
 8002690:	40022000 	.word	0x40022000
 8002694:	40022100 	.word	0x40022100
 8002698:	cb840000 	.word	0xcb840000
 800269c:	24000000 	.word	0x24000000
 80026a0:	053e2d63 	.word	0x053e2d63
 80026a4:	bac04000 	.word	0xbac04000
 80026a8:	cfb80000 	.word	0xcfb80000

080026ac <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80026b4:	4b56      	ldr	r3, [pc, #344]	; (8002810 <ADC_ConfigureBoostMode+0x164>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d01a      	beq.n	80026f6 <ADC_ConfigureBoostMode+0x4a>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80026c0:	f004 f850 	bl	8006764 <HAL_RCC_GetHCLKFreq>
 80026c4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026ce:	d006      	beq.n	80026de <ADC_ConfigureBoostMode+0x32>
 80026d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80026d4:	d00b      	beq.n	80026ee <ADC_ConfigureBoostMode+0x42>
 80026d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026da:	d000      	beq.n	80026de <ADC_ConfigureBoostMode+0x32>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 80026dc:	e05d      	b.n	800279a <ADC_ConfigureBoostMode+0xee>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	0c1b      	lsrs	r3, r3, #16
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ea:	60fb      	str	r3, [r7, #12]
        break;
 80026ec:	e055      	b.n	800279a <ADC_ConfigureBoostMode+0xee>
        freq /= 4UL;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	089b      	lsrs	r3, r3, #2
 80026f2:	60fb      	str	r3, [r7, #12]
        break;
 80026f4:	e051      	b.n	800279a <ADC_ConfigureBoostMode+0xee>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80026f6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80026fa:	f004 ff43 	bl	8007584 <HAL_RCCEx_GetPeriphCLKFreq>
 80026fe:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002708:	d02a      	beq.n	8002760 <ADC_ConfigureBoostMode+0xb4>
 800270a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800270e:	d813      	bhi.n	8002738 <ADC_ConfigureBoostMode+0x8c>
 8002710:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002714:	d024      	beq.n	8002760 <ADC_ConfigureBoostMode+0xb4>
 8002716:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800271a:	d806      	bhi.n	800272a <ADC_ConfigureBoostMode+0x7e>
 800271c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002720:	d01e      	beq.n	8002760 <ADC_ConfigureBoostMode+0xb4>
 8002722:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002726:	d01b      	beq.n	8002760 <ADC_ConfigureBoostMode+0xb4>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8002728:	e037      	b.n	800279a <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 800272a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800272e:	d017      	beq.n	8002760 <ADC_ConfigureBoostMode+0xb4>
 8002730:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002734:	d014      	beq.n	8002760 <ADC_ConfigureBoostMode+0xb4>
        break;
 8002736:	e030      	b.n	800279a <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 8002738:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800273c:	d021      	beq.n	8002782 <ADC_ConfigureBoostMode+0xd6>
 800273e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002742:	d806      	bhi.n	8002752 <ADC_ConfigureBoostMode+0xa6>
 8002744:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002748:	d013      	beq.n	8002772 <ADC_ConfigureBoostMode+0xc6>
 800274a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800274e:	d014      	beq.n	800277a <ADC_ConfigureBoostMode+0xce>
        break;
 8002750:	e023      	b.n	800279a <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 8002752:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002756:	d018      	beq.n	800278a <ADC_ConfigureBoostMode+0xde>
 8002758:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800275c:	d019      	beq.n	8002792 <ADC_ConfigureBoostMode+0xe6>
        break;
 800275e:	e01c      	b.n	800279a <ADC_ConfigureBoostMode+0xee>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	0c9b      	lsrs	r3, r3, #18
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	fbb2 f3f3 	udiv	r3, r2, r3
 800276e:	60fb      	str	r3, [r7, #12]
        break;
 8002770:	e013      	b.n	800279a <ADC_ConfigureBoostMode+0xee>
        freq /= 16UL;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	091b      	lsrs	r3, r3, #4
 8002776:	60fb      	str	r3, [r7, #12]
        break;
 8002778:	e00f      	b.n	800279a <ADC_ConfigureBoostMode+0xee>
        freq /= 32UL;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	095b      	lsrs	r3, r3, #5
 800277e:	60fb      	str	r3, [r7, #12]
        break;
 8002780:	e00b      	b.n	800279a <ADC_ConfigureBoostMode+0xee>
        freq /= 64UL;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	099b      	lsrs	r3, r3, #6
 8002786:	60fb      	str	r3, [r7, #12]
        break;
 8002788:	e007      	b.n	800279a <ADC_ConfigureBoostMode+0xee>
        freq /= 128UL;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	09db      	lsrs	r3, r3, #7
 800278e:	60fb      	str	r3, [r7, #12]
        break;
 8002790:	e003      	b.n	800279a <ADC_ConfigureBoostMode+0xee>
        freq /= 256UL;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	0a1b      	lsrs	r3, r3, #8
 8002796:	60fb      	str	r3, [r7, #12]
        break;
 8002798:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	085b      	lsrs	r3, r3, #1
 800279e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4a1c      	ldr	r2, [pc, #112]	; (8002814 <ADC_ConfigureBoostMode+0x168>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d808      	bhi.n	80027ba <ADC_ConfigureBoostMode+0x10e>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689a      	ldr	r2, [r3, #8]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80027b6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80027b8:	e025      	b.n	8002806 <ADC_ConfigureBoostMode+0x15a>
  else if (freq <= 12500000UL)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4a16      	ldr	r2, [pc, #88]	; (8002818 <ADC_ConfigureBoostMode+0x16c>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d80a      	bhi.n	80027d8 <ADC_ConfigureBoostMode+0x12c>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027d4:	609a      	str	r2, [r3, #8]
}
 80027d6:	e016      	b.n	8002806 <ADC_ConfigureBoostMode+0x15a>
  else if (freq <= 25000000UL)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4a10      	ldr	r2, [pc, #64]	; (800281c <ADC_ConfigureBoostMode+0x170>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d80a      	bhi.n	80027f6 <ADC_ConfigureBoostMode+0x14a>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027f2:	609a      	str	r2, [r3, #8]
}
 80027f4:	e007      	b.n	8002806 <ADC_ConfigureBoostMode+0x15a>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002804:	609a      	str	r2, [r3, #8]
}
 8002806:	bf00      	nop
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40022300 	.word	0x40022300
 8002814:	005f5e10 	.word	0x005f5e10
 8002818:	00bebc20 	.word	0x00bebc20
 800281c:	017d7840 	.word	0x017d7840

08002820 <LL_ADC_IsEnabled>:
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b01      	cmp	r3, #1
 8002832:	d101      	bne.n	8002838 <LL_ADC_IsEnabled+0x18>
 8002834:	2301      	movs	r3, #1
 8002836:	e000      	b.n	800283a <LL_ADC_IsEnabled+0x1a>
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <LL_ADC_REG_IsConversionOngoing>:
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	2b04      	cmp	r3, #4
 8002858:	d101      	bne.n	800285e <LL_ADC_REG_IsConversionOngoing+0x18>
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800286c:	b590      	push	{r4, r7, lr}
 800286e:	b09f      	sub	sp, #124	; 0x7c
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002876:	2300      	movs	r3, #0
 8002878:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002882:	2b01      	cmp	r3, #1
 8002884:	d101      	bne.n	800288a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002886:	2302      	movs	r3, #2
 8002888:	e07c      	b.n	8002984 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a3d      	ldr	r2, [pc, #244]	; (800298c <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d102      	bne.n	80028a2 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800289c:	4b3c      	ldr	r3, [pc, #240]	; (8002990 <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 800289e:	60bb      	str	r3, [r7, #8]
 80028a0:	e001      	b.n	80028a6 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80028a2:	2300      	movs	r3, #0
 80028a4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10b      	bne.n	80028c4 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b0:	f043 0220 	orr.w	r2, r3, #32
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e05f      	b.n	8002984 <HAL_ADCEx_MultiModeConfigChannel+0x118>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff ffbd 	bl	8002846 <LL_ADC_REG_IsConversionOngoing>
 80028cc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff ffb7 	bl	8002846 <LL_ADC_REG_IsConversionOngoing>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d141      	bne.n	8002962 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80028de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d13e      	bne.n	8002962 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80028e4:	4b2b      	ldr	r3, [pc, #172]	; (8002994 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80028e6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d020      	beq.n	8002932 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80028f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	431a      	orrs	r2, r3
 80028fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002900:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002902:	4822      	ldr	r0, [pc, #136]	; (800298c <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8002904:	f7ff ff8c 	bl	8002820 <LL_ADC_IsEnabled>
 8002908:	4604      	mov	r4, r0
 800290a:	4821      	ldr	r0, [pc, #132]	; (8002990 <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 800290c:	f7ff ff88 	bl	8002820 <LL_ADC_IsEnabled>
 8002910:	4603      	mov	r3, r0
 8002912:	4323      	orrs	r3, r4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d12e      	bne.n	8002976 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	4b1e      	ldr	r3, [pc, #120]	; (8002998 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800291e:	4013      	ands	r3, r2
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	6811      	ldr	r1, [r2, #0]
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	6892      	ldr	r2, [r2, #8]
 8002928:	430a      	orrs	r2, r1
 800292a:	431a      	orrs	r2, r3
 800292c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800292e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002930:	e021      	b.n	8002976 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800293a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800293c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800293e:	4813      	ldr	r0, [pc, #76]	; (800298c <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8002940:	f7ff ff6e 	bl	8002820 <LL_ADC_IsEnabled>
 8002944:	4604      	mov	r4, r0
 8002946:	4812      	ldr	r0, [pc, #72]	; (8002990 <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 8002948:	f7ff ff6a 	bl	8002820 <LL_ADC_IsEnabled>
 800294c:	4603      	mov	r3, r0
 800294e:	4323      	orrs	r3, r4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d110      	bne.n	8002976 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	4b0f      	ldr	r3, [pc, #60]	; (8002998 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800295a:	4013      	ands	r3, r2
 800295c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800295e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002960:	e009      	b.n	8002976 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002966:	f043 0220 	orr.w	r2, r3, #32
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002974:	e000      	b.n	8002978 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002976:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002980:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002984:	4618      	mov	r0, r3
 8002986:	377c      	adds	r7, #124	; 0x7c
 8002988:	46bd      	mov	sp, r7
 800298a:	bd90      	pop	{r4, r7, pc}
 800298c:	40022000 	.word	0x40022000
 8002990:	40022100 	.word	0x40022100
 8002994:	40022300 	.word	0x40022300
 8002998:	fffff0e0 	.word	0xfffff0e0

0800299c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029ac:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <__NVIC_SetPriorityGrouping+0x40>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029b8:	4013      	ands	r3, r2
 80029ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029c4:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <__NVIC_SetPriorityGrouping+0x44>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ca:	4a04      	ldr	r2, [pc, #16]	; (80029dc <__NVIC_SetPriorityGrouping+0x40>)
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	60d3      	str	r3, [r2, #12]
}
 80029d0:	bf00      	nop
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	e000ed00 	.word	0xe000ed00
 80029e0:	05fa0000 	.word	0x05fa0000

080029e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029e8:	4b04      	ldr	r3, [pc, #16]	; (80029fc <__NVIC_GetPriorityGrouping+0x18>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	0a1b      	lsrs	r3, r3, #8
 80029ee:	f003 0307 	and.w	r3, r3, #7
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	db0b      	blt.n	8002a2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a12:	88fb      	ldrh	r3, [r7, #6]
 8002a14:	f003 021f 	and.w	r2, r3, #31
 8002a18:	4907      	ldr	r1, [pc, #28]	; (8002a38 <__NVIC_EnableIRQ+0x38>)
 8002a1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a1e:	095b      	lsrs	r3, r3, #5
 8002a20:	2001      	movs	r0, #1
 8002a22:	fa00 f202 	lsl.w	r2, r0, r2
 8002a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	e000e100 	.word	0xe000e100

08002a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	6039      	str	r1, [r7, #0]
 8002a46:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	db0a      	blt.n	8002a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	490c      	ldr	r1, [pc, #48]	; (8002a88 <__NVIC_SetPriority+0x4c>)
 8002a56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a5a:	0112      	lsls	r2, r2, #4
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	440b      	add	r3, r1
 8002a60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a64:	e00a      	b.n	8002a7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	4908      	ldr	r1, [pc, #32]	; (8002a8c <__NVIC_SetPriority+0x50>)
 8002a6c:	88fb      	ldrh	r3, [r7, #6]
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	3b04      	subs	r3, #4
 8002a74:	0112      	lsls	r2, r2, #4
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	440b      	add	r3, r1
 8002a7a:	761a      	strb	r2, [r3, #24]
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	e000e100 	.word	0xe000e100
 8002a8c:	e000ed00 	.word	0xe000ed00

08002a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b089      	sub	sp, #36	; 0x24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f1c3 0307 	rsb	r3, r3, #7
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	bf28      	it	cs
 8002aae:	2304      	movcs	r3, #4
 8002ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	2b06      	cmp	r3, #6
 8002ab8:	d902      	bls.n	8002ac0 <NVIC_EncodePriority+0x30>
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	3b03      	subs	r3, #3
 8002abe:	e000      	b.n	8002ac2 <NVIC_EncodePriority+0x32>
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	43da      	mvns	r2, r3
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	401a      	ands	r2, r3
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae2:	43d9      	mvns	r1, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae8:	4313      	orrs	r3, r2
         );
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3724      	adds	r7, #36	; 0x24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
	...

08002af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b08:	d301      	bcc.n	8002b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e00f      	b.n	8002b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b0e:	4a0a      	ldr	r2, [pc, #40]	; (8002b38 <SysTick_Config+0x40>)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3b01      	subs	r3, #1
 8002b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b16:	210f      	movs	r1, #15
 8002b18:	f04f 30ff 	mov.w	r0, #4294967295
 8002b1c:	f7ff ff8e 	bl	8002a3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b20:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <SysTick_Config+0x40>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b26:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <SysTick_Config+0x40>)
 8002b28:	2207      	movs	r2, #7
 8002b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	e000e010 	.word	0xe000e010

08002b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f7ff ff29 	bl	800299c <__NVIC_SetPriorityGrouping>
}
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b086      	sub	sp, #24
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	4603      	mov	r3, r0
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	607a      	str	r2, [r7, #4]
 8002b5e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b60:	f7ff ff40 	bl	80029e4 <__NVIC_GetPriorityGrouping>
 8002b64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	68b9      	ldr	r1, [r7, #8]
 8002b6a:	6978      	ldr	r0, [r7, #20]
 8002b6c:	f7ff ff90 	bl	8002a90 <NVIC_EncodePriority>
 8002b70:	4602      	mov	r2, r0
 8002b72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b76:	4611      	mov	r1, r2
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff ff5f 	bl	8002a3c <__NVIC_SetPriority>
}
 8002b7e:	bf00      	nop
 8002b80:	3718      	adds	r7, #24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b082      	sub	sp, #8
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff ff33 	bl	8002a00 <__NVIC_EnableIRQ>
}
 8002b9a:	bf00      	nop
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b082      	sub	sp, #8
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7ff ffa4 	bl	8002af8 <SysTick_Config>
 8002bb0:	4603      	mov	r3, r0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e014      	b.n	8002bf6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	791b      	ldrb	r3, [r3, #4]
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d105      	bne.n	8002be2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7fe fbf5 	bl	80013cc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2202      	movs	r2, #2
 8002be6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
 8002c06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	795b      	ldrb	r3, [r3, #5]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d101      	bne.n	8002c14 <HAL_DAC_Start+0x16>
 8002c10:	2302      	movs	r3, #2
 8002c12:	e040      	b.n	8002c96 <HAL_DAC_Start+0x98>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6819      	ldr	r1, [r3, #0]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	f003 0310 	and.w	r3, r3, #16
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	409a      	lsls	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10f      	bne.n	8002c5e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d11d      	bne.n	8002c88 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 0201 	orr.w	r2, r2, #1
 8002c5a:	605a      	str	r2, [r3, #4]
 8002c5c:	e014      	b.n	8002c88 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	f003 0310 	and.w	r3, r3, #16
 8002c6e:	2102      	movs	r1, #2
 8002c70:	fa01 f303 	lsl.w	r3, r1, r3
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d107      	bne.n	8002c88 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0202 	orr.w	r2, r2, #2
 8002c86:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
	...

08002ca4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
 8002cb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	795b      	ldrb	r3, [r3, #5]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d101      	bne.n	8002cc2 <HAL_DAC_Start_DMA+0x1e>
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	e09e      	b.n	8002e00 <HAL_DAC_Start_DMA+0x15c>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d12a      	bne.n	8002d2a <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	4a4b      	ldr	r2, [pc, #300]	; (8002e08 <HAL_DAC_Start_DMA+0x164>)
 8002cda:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	4a4a      	ldr	r2, [pc, #296]	; (8002e0c <HAL_DAC_Start_DMA+0x168>)
 8002ce2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	4a49      	ldr	r2, [pc, #292]	; (8002e10 <HAL_DAC_Start_DMA+0x16c>)
 8002cea:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cfa:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002cfc:	6a3b      	ldr	r3, [r7, #32]
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	d009      	beq.n	8002d16 <HAL_DAC_Start_DMA+0x72>
 8002d02:	2b08      	cmp	r3, #8
 8002d04:	d00c      	beq.n	8002d20 <HAL_DAC_Start_DMA+0x7c>
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d000      	beq.n	8002d0c <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002d0a:	e039      	b.n	8002d80 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	3308      	adds	r3, #8
 8002d12:	613b      	str	r3, [r7, #16]
        break;
 8002d14:	e034      	b.n	8002d80 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	330c      	adds	r3, #12
 8002d1c:	613b      	str	r3, [r7, #16]
        break;
 8002d1e:	e02f      	b.n	8002d80 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	3310      	adds	r3, #16
 8002d26:	613b      	str	r3, [r7, #16]
        break;
 8002d28:	e02a      	b.n	8002d80 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	4a39      	ldr	r2, [pc, #228]	; (8002e14 <HAL_DAC_Start_DMA+0x170>)
 8002d30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	4a38      	ldr	r2, [pc, #224]	; (8002e18 <HAL_DAC_Start_DMA+0x174>)
 8002d38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	4a37      	ldr	r2, [pc, #220]	; (8002e1c <HAL_DAC_Start_DMA+0x178>)
 8002d40:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d50:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002d52:	6a3b      	ldr	r3, [r7, #32]
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d009      	beq.n	8002d6c <HAL_DAC_Start_DMA+0xc8>
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d00c      	beq.n	8002d76 <HAL_DAC_Start_DMA+0xd2>
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d000      	beq.n	8002d62 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002d60:	e00e      	b.n	8002d80 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	3314      	adds	r3, #20
 8002d68:	613b      	str	r3, [r7, #16]
        break;
 8002d6a:	e009      	b.n	8002d80 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	3318      	adds	r3, #24
 8002d72:	613b      	str	r3, [r7, #16]
        break;
 8002d74:	e004      	b.n	8002d80 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	331c      	adds	r3, #28
 8002d7c:	613b      	str	r3, [r7, #16]
        break;
 8002d7e:	bf00      	nop
    }
  }

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d111      	bne.n	8002daa <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d94:	601a      	str	r2, [r3, #0]

   /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6898      	ldr	r0, [r3, #8]
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	f000 fda6 	bl	80038f0 <HAL_DMA_Start_IT>
 8002da4:	4603      	mov	r3, r0
 8002da6:	75fb      	strb	r3, [r7, #23]
 8002da8:	e010      	b.n	8002dcc <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002db8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	68d8      	ldr	r0, [r3, #12]
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	f000 fd94 	bl	80038f0 <HAL_DMA_Start_IT>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002dd2:	7dfb      	ldrb	r3, [r7, #23]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10c      	bne.n	8002df2 <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6819      	ldr	r1, [r3, #0]
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	f003 0310 	and.w	r3, r3, #16
 8002de4:	2201      	movs	r2, #1
 8002de6:	409a      	lsls	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	e005      	b.n	8002dfe <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	f043 0204 	orr.w	r2, r3, #4
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002dfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	080030bd 	.word	0x080030bd
 8002e0c:	080030df 	.word	0x080030df
 8002e10:	080030fb 	.word	0x080030fb
 8002e14:	08003165 	.word	0x08003165
 8002e18:	08003187 	.word	0x08003187
 8002e1c:	080031a3 	.word	0x080031a3

08002e20 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b088      	sub	sp, #32
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	795b      	ldrb	r3, [r3, #5]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d101      	bne.n	8002e74 <HAL_DAC_ConfigChannel+0x18>
 8002e70:	2302      	movs	r3, #2
 8002e72:	e11d      	b.n	80030b0 <HAL_DAC_ConfigChannel+0x254>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2201      	movs	r2, #1
 8002e78:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2b04      	cmp	r3, #4
 8002e86:	d174      	bne.n	8002f72 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002e88:	f7fe fe4e 	bl	8001b28 <HAL_GetTick>
 8002e8c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d134      	bne.n	8002efe <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002e94:	e011      	b.n	8002eba <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002e96:	f7fe fe47 	bl	8001b28 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d90a      	bls.n	8002eba <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	f043 0208 	orr.w	r2, r3, #8
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2203      	movs	r2, #3
 8002eb4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e0fa      	b.n	80030b0 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ec0:	4b7d      	ldr	r3, [pc, #500]	; (80030b8 <HAL_DAC_ConfigChannel+0x25c>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1e6      	bne.n	8002e96 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8002ec8:	2001      	movs	r0, #1
 8002eca:	f7fe fe39 	bl	8001b40 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	6992      	ldr	r2, [r2, #24]
 8002ed6:	641a      	str	r2, [r3, #64]	; 0x40
 8002ed8:	e01e      	b.n	8002f18 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002eda:	f7fe fe25 	bl	8001b28 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d90a      	bls.n	8002efe <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	f043 0208 	orr.w	r2, r3, #8
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2203      	movs	r2, #3
 8002ef8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e0d8      	b.n	80030b0 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	dbe8      	blt.n	8002eda <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8002f08:	2001      	movs	r0, #1
 8002f0a:	f7fe fe19 	bl	8001b40 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	6992      	ldr	r2, [r2, #24]
 8002f16:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f003 0310 	and.w	r3, r3, #16
 8002f24:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002f28:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	ea02 0103 	and.w	r1, r2, r3
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	69da      	ldr	r2, [r3, #28]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f003 0310 	and.w	r3, r3, #16
 8002f3c:	409a      	lsls	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f003 0310 	and.w	r3, r3, #16
 8002f52:	21ff      	movs	r1, #255	; 0xff
 8002f54:	fa01 f303 	lsl.w	r3, r1, r3
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	ea02 0103 	and.w	r1, r2, r3
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	6a1a      	ldr	r2, [r3, #32]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f003 0310 	and.w	r3, r3, #16
 8002f68:	409a      	lsls	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d11d      	bne.n	8002fb6 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f80:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f003 0310 	and.w	r3, r3, #16
 8002f88:	221f      	movs	r2, #31
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	4013      	ands	r3, r2
 8002f94:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f003 0310 	and.w	r3, r3, #16
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fbc:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f003 0310 	and.w	r3, r3, #16
 8002fc4:	2207      	movs	r2, #7
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d102      	bne.n	8002fe0 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61fb      	str	r3, [r7, #28]
 8002fde:	e00f      	b.n	8003000 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d102      	bne.n	8002fee <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	61fb      	str	r3, [r7, #28]
 8002fec:	e008      	b.n	8003000 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d102      	bne.n	8002ffc <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	61fb      	str	r3, [r7, #28]
 8002ffa:	e001      	b.n	8003000 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	4313      	orrs	r3, r2
 800300a:	69fa      	ldr	r2, [r7, #28]
 800300c:	4313      	orrs	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f003 0310 	and.w	r3, r3, #16
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	4313      	orrs	r3, r2
 8003020:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6819      	ldr	r1, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f003 0310 	and.w	r3, r3, #16
 8003036:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	43da      	mvns	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	400a      	ands	r2, r1
 8003046:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f003 0310 	and.w	r3, r3, #16
 8003056:	f640 72fe 	movw	r2, #4094	; 0xffe
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43db      	mvns	r3, r3
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	4013      	ands	r3, r2
 8003064:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f003 0310 	and.w	r3, r3, #16
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	4313      	orrs	r3, r2
 800307c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6819      	ldr	r1, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f003 0310 	and.w	r3, r3, #16
 8003092:	22c0      	movs	r2, #192	; 0xc0
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43da      	mvns	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	400a      	ands	r2, r1
 80030a0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2201      	movs	r2, #1
 80030a6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3720      	adds	r7, #32
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	20008000 	.word	0x20008000

080030bc <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f7ff fea8 	bl	8002e20 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2201      	movs	r2, #1
 80030d4:	711a      	strb	r2, [r3, #4]
}
 80030d6:	bf00      	nop
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b084      	sub	sp, #16
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ea:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f7ff fea1 	bl	8002e34 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80030f2:	bf00      	nop
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b084      	sub	sp, #16
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003106:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	f043 0204 	orr.w	r2, r3, #4
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f7ff fe97 	bl	8002e48 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2201      	movs	r2, #1
 800311e:	711a      	strb	r2, [r3, #4]
}
 8003120:	bf00      	nop
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003170:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f7ff ffd8 	bl	8003128 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2201      	movs	r2, #1
 800317c:	711a      	strb	r2, [r3, #4]
}
 800317e:	bf00      	nop
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b084      	sub	sp, #16
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003192:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f7ff ffd1 	bl	800313c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800319a:	bf00      	nop
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b084      	sub	sp, #16
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	f043 0204 	orr.w	r2, r3, #4
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f7ff ffc7 	bl	8003150 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2201      	movs	r2, #1
 80031c6:	711a      	strb	r2, [r3, #4]
}
 80031c8:	bf00      	nop
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80031d8:	f7fe fca6 	bl	8001b28 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e37f      	b.n	80038e8 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a66      	ldr	r2, [pc, #408]	; (8003388 <HAL_DMA_Init+0x1b8>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d04a      	beq.n	8003288 <HAL_DMA_Init+0xb8>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a65      	ldr	r2, [pc, #404]	; (800338c <HAL_DMA_Init+0x1bc>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d045      	beq.n	8003288 <HAL_DMA_Init+0xb8>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a63      	ldr	r2, [pc, #396]	; (8003390 <HAL_DMA_Init+0x1c0>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d040      	beq.n	8003288 <HAL_DMA_Init+0xb8>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a62      	ldr	r2, [pc, #392]	; (8003394 <HAL_DMA_Init+0x1c4>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d03b      	beq.n	8003288 <HAL_DMA_Init+0xb8>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a60      	ldr	r2, [pc, #384]	; (8003398 <HAL_DMA_Init+0x1c8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d036      	beq.n	8003288 <HAL_DMA_Init+0xb8>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a5f      	ldr	r2, [pc, #380]	; (800339c <HAL_DMA_Init+0x1cc>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d031      	beq.n	8003288 <HAL_DMA_Init+0xb8>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a5d      	ldr	r2, [pc, #372]	; (80033a0 <HAL_DMA_Init+0x1d0>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d02c      	beq.n	8003288 <HAL_DMA_Init+0xb8>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a5c      	ldr	r2, [pc, #368]	; (80033a4 <HAL_DMA_Init+0x1d4>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d027      	beq.n	8003288 <HAL_DMA_Init+0xb8>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a5a      	ldr	r2, [pc, #360]	; (80033a8 <HAL_DMA_Init+0x1d8>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d022      	beq.n	8003288 <HAL_DMA_Init+0xb8>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a59      	ldr	r2, [pc, #356]	; (80033ac <HAL_DMA_Init+0x1dc>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d01d      	beq.n	8003288 <HAL_DMA_Init+0xb8>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a57      	ldr	r2, [pc, #348]	; (80033b0 <HAL_DMA_Init+0x1e0>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d018      	beq.n	8003288 <HAL_DMA_Init+0xb8>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a56      	ldr	r2, [pc, #344]	; (80033b4 <HAL_DMA_Init+0x1e4>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d013      	beq.n	8003288 <HAL_DMA_Init+0xb8>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a54      	ldr	r2, [pc, #336]	; (80033b8 <HAL_DMA_Init+0x1e8>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d00e      	beq.n	8003288 <HAL_DMA_Init+0xb8>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a53      	ldr	r2, [pc, #332]	; (80033bc <HAL_DMA_Init+0x1ec>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d009      	beq.n	8003288 <HAL_DMA_Init+0xb8>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a51      	ldr	r2, [pc, #324]	; (80033c0 <HAL_DMA_Init+0x1f0>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d004      	beq.n	8003288 <HAL_DMA_Init+0xb8>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a50      	ldr	r2, [pc, #320]	; (80033c4 <HAL_DMA_Init+0x1f4>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d101      	bne.n	800328c <HAL_DMA_Init+0xbc>
 8003288:	2301      	movs	r3, #1
 800328a:	e000      	b.n	800328e <HAL_DMA_Init+0xbe>
 800328c:	2300      	movs	r3, #0
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 813c 	beq.w	800350c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a37      	ldr	r2, [pc, #220]	; (8003388 <HAL_DMA_Init+0x1b8>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d04a      	beq.n	8003344 <HAL_DMA_Init+0x174>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a36      	ldr	r2, [pc, #216]	; (800338c <HAL_DMA_Init+0x1bc>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d045      	beq.n	8003344 <HAL_DMA_Init+0x174>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a34      	ldr	r2, [pc, #208]	; (8003390 <HAL_DMA_Init+0x1c0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d040      	beq.n	8003344 <HAL_DMA_Init+0x174>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a33      	ldr	r2, [pc, #204]	; (8003394 <HAL_DMA_Init+0x1c4>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d03b      	beq.n	8003344 <HAL_DMA_Init+0x174>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a31      	ldr	r2, [pc, #196]	; (8003398 <HAL_DMA_Init+0x1c8>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d036      	beq.n	8003344 <HAL_DMA_Init+0x174>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a30      	ldr	r2, [pc, #192]	; (800339c <HAL_DMA_Init+0x1cc>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d031      	beq.n	8003344 <HAL_DMA_Init+0x174>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a2e      	ldr	r2, [pc, #184]	; (80033a0 <HAL_DMA_Init+0x1d0>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d02c      	beq.n	8003344 <HAL_DMA_Init+0x174>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a2d      	ldr	r2, [pc, #180]	; (80033a4 <HAL_DMA_Init+0x1d4>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d027      	beq.n	8003344 <HAL_DMA_Init+0x174>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a2b      	ldr	r2, [pc, #172]	; (80033a8 <HAL_DMA_Init+0x1d8>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d022      	beq.n	8003344 <HAL_DMA_Init+0x174>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a2a      	ldr	r2, [pc, #168]	; (80033ac <HAL_DMA_Init+0x1dc>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d01d      	beq.n	8003344 <HAL_DMA_Init+0x174>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a28      	ldr	r2, [pc, #160]	; (80033b0 <HAL_DMA_Init+0x1e0>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d018      	beq.n	8003344 <HAL_DMA_Init+0x174>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a27      	ldr	r2, [pc, #156]	; (80033b4 <HAL_DMA_Init+0x1e4>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d013      	beq.n	8003344 <HAL_DMA_Init+0x174>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a25      	ldr	r2, [pc, #148]	; (80033b8 <HAL_DMA_Init+0x1e8>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d00e      	beq.n	8003344 <HAL_DMA_Init+0x174>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a24      	ldr	r2, [pc, #144]	; (80033bc <HAL_DMA_Init+0x1ec>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d009      	beq.n	8003344 <HAL_DMA_Init+0x174>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a22      	ldr	r2, [pc, #136]	; (80033c0 <HAL_DMA_Init+0x1f0>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d004      	beq.n	8003344 <HAL_DMA_Init+0x174>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a21      	ldr	r2, [pc, #132]	; (80033c4 <HAL_DMA_Init+0x1f4>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d108      	bne.n	8003356 <HAL_DMA_Init+0x186>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0201 	bic.w	r2, r2, #1
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	e007      	b.n	8003366 <HAL_DMA_Init+0x196>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 0201 	bic.w	r2, r2, #1
 8003364:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003366:	e02f      	b.n	80033c8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003368:	f7fe fbde 	bl	8001b28 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b05      	cmp	r3, #5
 8003374:	d928      	bls.n	80033c8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2220      	movs	r2, #32
 800337a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2203      	movs	r2, #3
 8003380:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e2af      	b.n	80038e8 <HAL_DMA_Init+0x718>
 8003388:	40020010 	.word	0x40020010
 800338c:	40020028 	.word	0x40020028
 8003390:	40020040 	.word	0x40020040
 8003394:	40020058 	.word	0x40020058
 8003398:	40020070 	.word	0x40020070
 800339c:	40020088 	.word	0x40020088
 80033a0:	400200a0 	.word	0x400200a0
 80033a4:	400200b8 	.word	0x400200b8
 80033a8:	40020410 	.word	0x40020410
 80033ac:	40020428 	.word	0x40020428
 80033b0:	40020440 	.word	0x40020440
 80033b4:	40020458 	.word	0x40020458
 80033b8:	40020470 	.word	0x40020470
 80033bc:	40020488 	.word	0x40020488
 80033c0:	400204a0 	.word	0x400204a0
 80033c4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1c8      	bne.n	8003368 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	4b73      	ldr	r3, [pc, #460]	; (80035b0 <HAL_DMA_Init+0x3e0>)
 80033e2:	4013      	ands	r3, r2
 80033e4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80033ee:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033fa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003406:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	4313      	orrs	r3, r2
 8003412:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	2b04      	cmp	r3, #4
 800341a:	d107      	bne.n	800342c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003424:	4313      	orrs	r3, r2
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	4313      	orrs	r3, r2
 800342a:	617b      	str	r3, [r7, #20]
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b28      	cmp	r3, #40	; 0x28
 8003432:	d903      	bls.n	800343c <HAL_DMA_Init+0x26c>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2b2e      	cmp	r3, #46	; 0x2e
 800343a:	d91f      	bls.n	800347c <HAL_DMA_Init+0x2ac>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b3e      	cmp	r3, #62	; 0x3e
 8003442:	d903      	bls.n	800344c <HAL_DMA_Init+0x27c>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	2b42      	cmp	r3, #66	; 0x42
 800344a:	d917      	bls.n	800347c <HAL_DMA_Init+0x2ac>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2b46      	cmp	r3, #70	; 0x46
 8003452:	d903      	bls.n	800345c <HAL_DMA_Init+0x28c>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	2b48      	cmp	r3, #72	; 0x48
 800345a:	d90f      	bls.n	800347c <HAL_DMA_Init+0x2ac>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	2b4e      	cmp	r3, #78	; 0x4e
 8003462:	d903      	bls.n	800346c <HAL_DMA_Init+0x29c>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2b52      	cmp	r3, #82	; 0x52
 800346a:	d907      	bls.n	800347c <HAL_DMA_Init+0x2ac>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b73      	cmp	r3, #115	; 0x73
 8003472:	d905      	bls.n	8003480 <HAL_DMA_Init+0x2b0>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b77      	cmp	r3, #119	; 0x77
 800347a:	d801      	bhi.n	8003480 <HAL_DMA_Init+0x2b0>
 800347c:	2301      	movs	r3, #1
 800347e:	e000      	b.n	8003482 <HAL_DMA_Init+0x2b2>
 8003480:	2300      	movs	r3, #0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800348c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f023 0307 	bic.w	r3, r3, #7
 80034a4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d117      	bne.n	80034e8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	4313      	orrs	r3, r2
 80034c0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00e      	beq.n	80034e8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f001 fe72 	bl	80051b4 <DMA_CheckFifoParam>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d008      	beq.n	80034e8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2240      	movs	r2, #64	; 0x40
 80034da:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e1ff      	b.n	80038e8 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f001 fdad 	bl	8005050 <DMA_CalcBaseAndBitshift>
 80034f6:	4603      	mov	r3, r0
 80034f8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fe:	f003 031f 	and.w	r3, r3, #31
 8003502:	223f      	movs	r2, #63	; 0x3f
 8003504:	409a      	lsls	r2, r3
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	609a      	str	r2, [r3, #8]
 800350a:	e0fe      	b.n	800370a <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a28      	ldr	r2, [pc, #160]	; (80035b4 <HAL_DMA_Init+0x3e4>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d04a      	beq.n	80035ac <HAL_DMA_Init+0x3dc>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a27      	ldr	r2, [pc, #156]	; (80035b8 <HAL_DMA_Init+0x3e8>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d045      	beq.n	80035ac <HAL_DMA_Init+0x3dc>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a25      	ldr	r2, [pc, #148]	; (80035bc <HAL_DMA_Init+0x3ec>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d040      	beq.n	80035ac <HAL_DMA_Init+0x3dc>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a24      	ldr	r2, [pc, #144]	; (80035c0 <HAL_DMA_Init+0x3f0>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d03b      	beq.n	80035ac <HAL_DMA_Init+0x3dc>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a22      	ldr	r2, [pc, #136]	; (80035c4 <HAL_DMA_Init+0x3f4>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d036      	beq.n	80035ac <HAL_DMA_Init+0x3dc>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a21      	ldr	r2, [pc, #132]	; (80035c8 <HAL_DMA_Init+0x3f8>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d031      	beq.n	80035ac <HAL_DMA_Init+0x3dc>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a1f      	ldr	r2, [pc, #124]	; (80035cc <HAL_DMA_Init+0x3fc>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d02c      	beq.n	80035ac <HAL_DMA_Init+0x3dc>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a1e      	ldr	r2, [pc, #120]	; (80035d0 <HAL_DMA_Init+0x400>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d027      	beq.n	80035ac <HAL_DMA_Init+0x3dc>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a1c      	ldr	r2, [pc, #112]	; (80035d4 <HAL_DMA_Init+0x404>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d022      	beq.n	80035ac <HAL_DMA_Init+0x3dc>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a1b      	ldr	r2, [pc, #108]	; (80035d8 <HAL_DMA_Init+0x408>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d01d      	beq.n	80035ac <HAL_DMA_Init+0x3dc>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a19      	ldr	r2, [pc, #100]	; (80035dc <HAL_DMA_Init+0x40c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d018      	beq.n	80035ac <HAL_DMA_Init+0x3dc>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a18      	ldr	r2, [pc, #96]	; (80035e0 <HAL_DMA_Init+0x410>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d013      	beq.n	80035ac <HAL_DMA_Init+0x3dc>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a16      	ldr	r2, [pc, #88]	; (80035e4 <HAL_DMA_Init+0x414>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d00e      	beq.n	80035ac <HAL_DMA_Init+0x3dc>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a15      	ldr	r2, [pc, #84]	; (80035e8 <HAL_DMA_Init+0x418>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d009      	beq.n	80035ac <HAL_DMA_Init+0x3dc>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a13      	ldr	r2, [pc, #76]	; (80035ec <HAL_DMA_Init+0x41c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d004      	beq.n	80035ac <HAL_DMA_Init+0x3dc>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a12      	ldr	r2, [pc, #72]	; (80035f0 <HAL_DMA_Init+0x420>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d123      	bne.n	80035f4 <HAL_DMA_Init+0x424>
 80035ac:	2301      	movs	r3, #1
 80035ae:	e022      	b.n	80035f6 <HAL_DMA_Init+0x426>
 80035b0:	fe10803f 	.word	0xfe10803f
 80035b4:	48022c08 	.word	0x48022c08
 80035b8:	48022c1c 	.word	0x48022c1c
 80035bc:	48022c30 	.word	0x48022c30
 80035c0:	48022c44 	.word	0x48022c44
 80035c4:	48022c58 	.word	0x48022c58
 80035c8:	48022c6c 	.word	0x48022c6c
 80035cc:	48022c80 	.word	0x48022c80
 80035d0:	48022c94 	.word	0x48022c94
 80035d4:	58025408 	.word	0x58025408
 80035d8:	5802541c 	.word	0x5802541c
 80035dc:	58025430 	.word	0x58025430
 80035e0:	58025444 	.word	0x58025444
 80035e4:	58025458 	.word	0x58025458
 80035e8:	5802546c 	.word	0x5802546c
 80035ec:	58025480 	.word	0x58025480
 80035f0:	58025494 	.word	0x58025494
 80035f4:	2300      	movs	r3, #0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d07e      	beq.n	80036f8 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a80      	ldr	r2, [pc, #512]	; (8003800 <HAL_DMA_Init+0x630>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d021      	beq.n	8003648 <HAL_DMA_Init+0x478>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a7e      	ldr	r2, [pc, #504]	; (8003804 <HAL_DMA_Init+0x634>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d01c      	beq.n	8003648 <HAL_DMA_Init+0x478>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a7d      	ldr	r2, [pc, #500]	; (8003808 <HAL_DMA_Init+0x638>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d017      	beq.n	8003648 <HAL_DMA_Init+0x478>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a7b      	ldr	r2, [pc, #492]	; (800380c <HAL_DMA_Init+0x63c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d012      	beq.n	8003648 <HAL_DMA_Init+0x478>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a7a      	ldr	r2, [pc, #488]	; (8003810 <HAL_DMA_Init+0x640>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d00d      	beq.n	8003648 <HAL_DMA_Init+0x478>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a78      	ldr	r2, [pc, #480]	; (8003814 <HAL_DMA_Init+0x644>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d008      	beq.n	8003648 <HAL_DMA_Init+0x478>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a77      	ldr	r2, [pc, #476]	; (8003818 <HAL_DMA_Init+0x648>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d003      	beq.n	8003648 <HAL_DMA_Init+0x478>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a75      	ldr	r2, [pc, #468]	; (800381c <HAL_DMA_Init+0x64c>)
 8003646:	4293      	cmp	r3, r2
 8003648:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2202      	movs	r2, #2
 8003656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	4b6e      	ldr	r3, [pc, #440]	; (8003820 <HAL_DMA_Init+0x650>)
 8003666:	4013      	ands	r3, r2
 8003668:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	2b40      	cmp	r3, #64	; 0x40
 8003670:	d008      	beq.n	8003684 <HAL_DMA_Init+0x4b4>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	2b80      	cmp	r3, #128	; 0x80
 8003678:	d102      	bne.n	8003680 <HAL_DMA_Init+0x4b0>
 800367a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800367e:	e002      	b.n	8003686 <HAL_DMA_Init+0x4b6>
 8003680:	2300      	movs	r3, #0
 8003682:	e000      	b.n	8003686 <HAL_DMA_Init+0x4b6>
 8003684:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	68d2      	ldr	r2, [r2, #12]
 800368a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800368c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003694:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800369c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80036a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80036ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80036b4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	461a      	mov	r2, r3
 80036ca:	4b56      	ldr	r3, [pc, #344]	; (8003824 <HAL_DMA_Init+0x654>)
 80036cc:	4413      	add	r3, r2
 80036ce:	4a56      	ldr	r2, [pc, #344]	; (8003828 <HAL_DMA_Init+0x658>)
 80036d0:	fba2 2303 	umull	r2, r3, r2, r3
 80036d4:	091b      	lsrs	r3, r3, #4
 80036d6:	009a      	lsls	r2, r3, #2
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f001 fcb7 	bl	8005050 <DMA_CalcBaseAndBitshift>
 80036e2:	4603      	mov	r3, r0
 80036e4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ea:	f003 031f 	and.w	r3, r3, #31
 80036ee:	2201      	movs	r2, #1
 80036f0:	409a      	lsls	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	605a      	str	r2, [r3, #4]
 80036f6:	e008      	b.n	800370a <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2240      	movs	r2, #64	; 0x40
 80036fc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2203      	movs	r2, #3
 8003702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e0ee      	b.n	80038e8 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a47      	ldr	r2, [pc, #284]	; (800382c <HAL_DMA_Init+0x65c>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d072      	beq.n	80037fa <HAL_DMA_Init+0x62a>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a45      	ldr	r2, [pc, #276]	; (8003830 <HAL_DMA_Init+0x660>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d06d      	beq.n	80037fa <HAL_DMA_Init+0x62a>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a44      	ldr	r2, [pc, #272]	; (8003834 <HAL_DMA_Init+0x664>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d068      	beq.n	80037fa <HAL_DMA_Init+0x62a>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a42      	ldr	r2, [pc, #264]	; (8003838 <HAL_DMA_Init+0x668>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d063      	beq.n	80037fa <HAL_DMA_Init+0x62a>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a41      	ldr	r2, [pc, #260]	; (800383c <HAL_DMA_Init+0x66c>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d05e      	beq.n	80037fa <HAL_DMA_Init+0x62a>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a3f      	ldr	r2, [pc, #252]	; (8003840 <HAL_DMA_Init+0x670>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d059      	beq.n	80037fa <HAL_DMA_Init+0x62a>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a3e      	ldr	r2, [pc, #248]	; (8003844 <HAL_DMA_Init+0x674>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d054      	beq.n	80037fa <HAL_DMA_Init+0x62a>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a3c      	ldr	r2, [pc, #240]	; (8003848 <HAL_DMA_Init+0x678>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d04f      	beq.n	80037fa <HAL_DMA_Init+0x62a>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a3b      	ldr	r2, [pc, #236]	; (800384c <HAL_DMA_Init+0x67c>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d04a      	beq.n	80037fa <HAL_DMA_Init+0x62a>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a39      	ldr	r2, [pc, #228]	; (8003850 <HAL_DMA_Init+0x680>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d045      	beq.n	80037fa <HAL_DMA_Init+0x62a>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a38      	ldr	r2, [pc, #224]	; (8003854 <HAL_DMA_Init+0x684>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d040      	beq.n	80037fa <HAL_DMA_Init+0x62a>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a36      	ldr	r2, [pc, #216]	; (8003858 <HAL_DMA_Init+0x688>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d03b      	beq.n	80037fa <HAL_DMA_Init+0x62a>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a35      	ldr	r2, [pc, #212]	; (800385c <HAL_DMA_Init+0x68c>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d036      	beq.n	80037fa <HAL_DMA_Init+0x62a>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a33      	ldr	r2, [pc, #204]	; (8003860 <HAL_DMA_Init+0x690>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d031      	beq.n	80037fa <HAL_DMA_Init+0x62a>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a32      	ldr	r2, [pc, #200]	; (8003864 <HAL_DMA_Init+0x694>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d02c      	beq.n	80037fa <HAL_DMA_Init+0x62a>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a30      	ldr	r2, [pc, #192]	; (8003868 <HAL_DMA_Init+0x698>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d027      	beq.n	80037fa <HAL_DMA_Init+0x62a>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a14      	ldr	r2, [pc, #80]	; (8003800 <HAL_DMA_Init+0x630>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d022      	beq.n	80037fa <HAL_DMA_Init+0x62a>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a12      	ldr	r2, [pc, #72]	; (8003804 <HAL_DMA_Init+0x634>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d01d      	beq.n	80037fa <HAL_DMA_Init+0x62a>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a11      	ldr	r2, [pc, #68]	; (8003808 <HAL_DMA_Init+0x638>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d018      	beq.n	80037fa <HAL_DMA_Init+0x62a>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a0f      	ldr	r2, [pc, #60]	; (800380c <HAL_DMA_Init+0x63c>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d013      	beq.n	80037fa <HAL_DMA_Init+0x62a>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a0e      	ldr	r2, [pc, #56]	; (8003810 <HAL_DMA_Init+0x640>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d00e      	beq.n	80037fa <HAL_DMA_Init+0x62a>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a0c      	ldr	r2, [pc, #48]	; (8003814 <HAL_DMA_Init+0x644>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d009      	beq.n	80037fa <HAL_DMA_Init+0x62a>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a0b      	ldr	r2, [pc, #44]	; (8003818 <HAL_DMA_Init+0x648>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d004      	beq.n	80037fa <HAL_DMA_Init+0x62a>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a09      	ldr	r2, [pc, #36]	; (800381c <HAL_DMA_Init+0x64c>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d138      	bne.n	800386c <HAL_DMA_Init+0x69c>
 80037fa:	2301      	movs	r3, #1
 80037fc:	e037      	b.n	800386e <HAL_DMA_Init+0x69e>
 80037fe:	bf00      	nop
 8003800:	58025408 	.word	0x58025408
 8003804:	5802541c 	.word	0x5802541c
 8003808:	58025430 	.word	0x58025430
 800380c:	58025444 	.word	0x58025444
 8003810:	58025458 	.word	0x58025458
 8003814:	5802546c 	.word	0x5802546c
 8003818:	58025480 	.word	0x58025480
 800381c:	58025494 	.word	0x58025494
 8003820:	fffe000f 	.word	0xfffe000f
 8003824:	a7fdabf8 	.word	0xa7fdabf8
 8003828:	cccccccd 	.word	0xcccccccd
 800382c:	40020010 	.word	0x40020010
 8003830:	40020028 	.word	0x40020028
 8003834:	40020040 	.word	0x40020040
 8003838:	40020058 	.word	0x40020058
 800383c:	40020070 	.word	0x40020070
 8003840:	40020088 	.word	0x40020088
 8003844:	400200a0 	.word	0x400200a0
 8003848:	400200b8 	.word	0x400200b8
 800384c:	40020410 	.word	0x40020410
 8003850:	40020428 	.word	0x40020428
 8003854:	40020440 	.word	0x40020440
 8003858:	40020458 	.word	0x40020458
 800385c:	40020470 	.word	0x40020470
 8003860:	40020488 	.word	0x40020488
 8003864:	400204a0 	.word	0x400204a0
 8003868:	400204b8 	.word	0x400204b8
 800386c:	2300      	movs	r3, #0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d032      	beq.n	80038d8 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f001 fd1a 	bl	80052ac <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	2b80      	cmp	r3, #128	; 0x80
 800387e:	d102      	bne.n	8003886 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800389a:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d010      	beq.n	80038c6 <HAL_DMA_Init+0x6f6>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d80c      	bhi.n	80038c6 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f001 fd97 	bl	80053e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80038c2:	605a      	str	r2, [r3, #4]
 80038c4:	e008      	b.n	80038d8 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3718      	adds	r7, #24
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e226      	b.n	8003d5a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003912:	2b01      	cmp	r3, #1
 8003914:	d101      	bne.n	800391a <HAL_DMA_Start_IT+0x2a>
 8003916:	2302      	movs	r3, #2
 8003918:	e21f      	b.n	8003d5a <HAL_DMA_Start_IT+0x46a>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b01      	cmp	r3, #1
 800392c:	f040 820a 	bne.w	8003d44 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2202      	movs	r2, #2
 8003934:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a68      	ldr	r2, [pc, #416]	; (8003ae4 <HAL_DMA_Start_IT+0x1f4>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d04a      	beq.n	80039de <HAL_DMA_Start_IT+0xee>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a66      	ldr	r2, [pc, #408]	; (8003ae8 <HAL_DMA_Start_IT+0x1f8>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d045      	beq.n	80039de <HAL_DMA_Start_IT+0xee>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a65      	ldr	r2, [pc, #404]	; (8003aec <HAL_DMA_Start_IT+0x1fc>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d040      	beq.n	80039de <HAL_DMA_Start_IT+0xee>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a63      	ldr	r2, [pc, #396]	; (8003af0 <HAL_DMA_Start_IT+0x200>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d03b      	beq.n	80039de <HAL_DMA_Start_IT+0xee>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a62      	ldr	r2, [pc, #392]	; (8003af4 <HAL_DMA_Start_IT+0x204>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d036      	beq.n	80039de <HAL_DMA_Start_IT+0xee>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a60      	ldr	r2, [pc, #384]	; (8003af8 <HAL_DMA_Start_IT+0x208>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d031      	beq.n	80039de <HAL_DMA_Start_IT+0xee>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a5f      	ldr	r2, [pc, #380]	; (8003afc <HAL_DMA_Start_IT+0x20c>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d02c      	beq.n	80039de <HAL_DMA_Start_IT+0xee>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a5d      	ldr	r2, [pc, #372]	; (8003b00 <HAL_DMA_Start_IT+0x210>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d027      	beq.n	80039de <HAL_DMA_Start_IT+0xee>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a5c      	ldr	r2, [pc, #368]	; (8003b04 <HAL_DMA_Start_IT+0x214>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d022      	beq.n	80039de <HAL_DMA_Start_IT+0xee>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a5a      	ldr	r2, [pc, #360]	; (8003b08 <HAL_DMA_Start_IT+0x218>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d01d      	beq.n	80039de <HAL_DMA_Start_IT+0xee>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a59      	ldr	r2, [pc, #356]	; (8003b0c <HAL_DMA_Start_IT+0x21c>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d018      	beq.n	80039de <HAL_DMA_Start_IT+0xee>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a57      	ldr	r2, [pc, #348]	; (8003b10 <HAL_DMA_Start_IT+0x220>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d013      	beq.n	80039de <HAL_DMA_Start_IT+0xee>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a56      	ldr	r2, [pc, #344]	; (8003b14 <HAL_DMA_Start_IT+0x224>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d00e      	beq.n	80039de <HAL_DMA_Start_IT+0xee>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a54      	ldr	r2, [pc, #336]	; (8003b18 <HAL_DMA_Start_IT+0x228>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d009      	beq.n	80039de <HAL_DMA_Start_IT+0xee>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a53      	ldr	r2, [pc, #332]	; (8003b1c <HAL_DMA_Start_IT+0x22c>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d004      	beq.n	80039de <HAL_DMA_Start_IT+0xee>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a51      	ldr	r2, [pc, #324]	; (8003b20 <HAL_DMA_Start_IT+0x230>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d108      	bne.n	80039f0 <HAL_DMA_Start_IT+0x100>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0201 	bic.w	r2, r2, #1
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	e007      	b.n	8003a00 <HAL_DMA_Start_IT+0x110>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 0201 	bic.w	r2, r2, #1
 80039fe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	68b9      	ldr	r1, [r7, #8]
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f001 f93e 	bl	8004c88 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a34      	ldr	r2, [pc, #208]	; (8003ae4 <HAL_DMA_Start_IT+0x1f4>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d04a      	beq.n	8003aac <HAL_DMA_Start_IT+0x1bc>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a33      	ldr	r2, [pc, #204]	; (8003ae8 <HAL_DMA_Start_IT+0x1f8>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d045      	beq.n	8003aac <HAL_DMA_Start_IT+0x1bc>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a31      	ldr	r2, [pc, #196]	; (8003aec <HAL_DMA_Start_IT+0x1fc>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d040      	beq.n	8003aac <HAL_DMA_Start_IT+0x1bc>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a30      	ldr	r2, [pc, #192]	; (8003af0 <HAL_DMA_Start_IT+0x200>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d03b      	beq.n	8003aac <HAL_DMA_Start_IT+0x1bc>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a2e      	ldr	r2, [pc, #184]	; (8003af4 <HAL_DMA_Start_IT+0x204>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d036      	beq.n	8003aac <HAL_DMA_Start_IT+0x1bc>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a2d      	ldr	r2, [pc, #180]	; (8003af8 <HAL_DMA_Start_IT+0x208>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d031      	beq.n	8003aac <HAL_DMA_Start_IT+0x1bc>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a2b      	ldr	r2, [pc, #172]	; (8003afc <HAL_DMA_Start_IT+0x20c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d02c      	beq.n	8003aac <HAL_DMA_Start_IT+0x1bc>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a2a      	ldr	r2, [pc, #168]	; (8003b00 <HAL_DMA_Start_IT+0x210>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d027      	beq.n	8003aac <HAL_DMA_Start_IT+0x1bc>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a28      	ldr	r2, [pc, #160]	; (8003b04 <HAL_DMA_Start_IT+0x214>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d022      	beq.n	8003aac <HAL_DMA_Start_IT+0x1bc>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a27      	ldr	r2, [pc, #156]	; (8003b08 <HAL_DMA_Start_IT+0x218>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d01d      	beq.n	8003aac <HAL_DMA_Start_IT+0x1bc>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a25      	ldr	r2, [pc, #148]	; (8003b0c <HAL_DMA_Start_IT+0x21c>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d018      	beq.n	8003aac <HAL_DMA_Start_IT+0x1bc>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a24      	ldr	r2, [pc, #144]	; (8003b10 <HAL_DMA_Start_IT+0x220>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d013      	beq.n	8003aac <HAL_DMA_Start_IT+0x1bc>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a22      	ldr	r2, [pc, #136]	; (8003b14 <HAL_DMA_Start_IT+0x224>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d00e      	beq.n	8003aac <HAL_DMA_Start_IT+0x1bc>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a21      	ldr	r2, [pc, #132]	; (8003b18 <HAL_DMA_Start_IT+0x228>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d009      	beq.n	8003aac <HAL_DMA_Start_IT+0x1bc>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a1f      	ldr	r2, [pc, #124]	; (8003b1c <HAL_DMA_Start_IT+0x22c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d004      	beq.n	8003aac <HAL_DMA_Start_IT+0x1bc>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a1e      	ldr	r2, [pc, #120]	; (8003b20 <HAL_DMA_Start_IT+0x230>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d101      	bne.n	8003ab0 <HAL_DMA_Start_IT+0x1c0>
 8003aac:	2301      	movs	r3, #1
 8003aae:	e000      	b.n	8003ab2 <HAL_DMA_Start_IT+0x1c2>
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d036      	beq.n	8003b24 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f023 021e 	bic.w	r2, r3, #30
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f042 0216 	orr.w	r2, r2, #22
 8003ac8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d03e      	beq.n	8003b50 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f042 0208 	orr.w	r2, r2, #8
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	e035      	b.n	8003b50 <HAL_DMA_Start_IT+0x260>
 8003ae4:	40020010 	.word	0x40020010
 8003ae8:	40020028 	.word	0x40020028
 8003aec:	40020040 	.word	0x40020040
 8003af0:	40020058 	.word	0x40020058
 8003af4:	40020070 	.word	0x40020070
 8003af8:	40020088 	.word	0x40020088
 8003afc:	400200a0 	.word	0x400200a0
 8003b00:	400200b8 	.word	0x400200b8
 8003b04:	40020410 	.word	0x40020410
 8003b08:	40020428 	.word	0x40020428
 8003b0c:	40020440 	.word	0x40020440
 8003b10:	40020458 	.word	0x40020458
 8003b14:	40020470 	.word	0x40020470
 8003b18:	40020488 	.word	0x40020488
 8003b1c:	400204a0 	.word	0x400204a0
 8003b20:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f023 020e 	bic.w	r2, r3, #14
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 020a 	orr.w	r2, r2, #10
 8003b36:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d007      	beq.n	8003b50 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0204 	orr.w	r2, r2, #4
 8003b4e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a83      	ldr	r2, [pc, #524]	; (8003d64 <HAL_DMA_Start_IT+0x474>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d072      	beq.n	8003c40 <HAL_DMA_Start_IT+0x350>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a82      	ldr	r2, [pc, #520]	; (8003d68 <HAL_DMA_Start_IT+0x478>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d06d      	beq.n	8003c40 <HAL_DMA_Start_IT+0x350>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a80      	ldr	r2, [pc, #512]	; (8003d6c <HAL_DMA_Start_IT+0x47c>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d068      	beq.n	8003c40 <HAL_DMA_Start_IT+0x350>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a7f      	ldr	r2, [pc, #508]	; (8003d70 <HAL_DMA_Start_IT+0x480>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d063      	beq.n	8003c40 <HAL_DMA_Start_IT+0x350>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a7d      	ldr	r2, [pc, #500]	; (8003d74 <HAL_DMA_Start_IT+0x484>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d05e      	beq.n	8003c40 <HAL_DMA_Start_IT+0x350>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a7c      	ldr	r2, [pc, #496]	; (8003d78 <HAL_DMA_Start_IT+0x488>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d059      	beq.n	8003c40 <HAL_DMA_Start_IT+0x350>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a7a      	ldr	r2, [pc, #488]	; (8003d7c <HAL_DMA_Start_IT+0x48c>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d054      	beq.n	8003c40 <HAL_DMA_Start_IT+0x350>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a79      	ldr	r2, [pc, #484]	; (8003d80 <HAL_DMA_Start_IT+0x490>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d04f      	beq.n	8003c40 <HAL_DMA_Start_IT+0x350>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a77      	ldr	r2, [pc, #476]	; (8003d84 <HAL_DMA_Start_IT+0x494>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d04a      	beq.n	8003c40 <HAL_DMA_Start_IT+0x350>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a76      	ldr	r2, [pc, #472]	; (8003d88 <HAL_DMA_Start_IT+0x498>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d045      	beq.n	8003c40 <HAL_DMA_Start_IT+0x350>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a74      	ldr	r2, [pc, #464]	; (8003d8c <HAL_DMA_Start_IT+0x49c>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d040      	beq.n	8003c40 <HAL_DMA_Start_IT+0x350>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a73      	ldr	r2, [pc, #460]	; (8003d90 <HAL_DMA_Start_IT+0x4a0>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d03b      	beq.n	8003c40 <HAL_DMA_Start_IT+0x350>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a71      	ldr	r2, [pc, #452]	; (8003d94 <HAL_DMA_Start_IT+0x4a4>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d036      	beq.n	8003c40 <HAL_DMA_Start_IT+0x350>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a70      	ldr	r2, [pc, #448]	; (8003d98 <HAL_DMA_Start_IT+0x4a8>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d031      	beq.n	8003c40 <HAL_DMA_Start_IT+0x350>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a6e      	ldr	r2, [pc, #440]	; (8003d9c <HAL_DMA_Start_IT+0x4ac>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d02c      	beq.n	8003c40 <HAL_DMA_Start_IT+0x350>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a6d      	ldr	r2, [pc, #436]	; (8003da0 <HAL_DMA_Start_IT+0x4b0>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d027      	beq.n	8003c40 <HAL_DMA_Start_IT+0x350>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a6b      	ldr	r2, [pc, #428]	; (8003da4 <HAL_DMA_Start_IT+0x4b4>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d022      	beq.n	8003c40 <HAL_DMA_Start_IT+0x350>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a6a      	ldr	r2, [pc, #424]	; (8003da8 <HAL_DMA_Start_IT+0x4b8>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d01d      	beq.n	8003c40 <HAL_DMA_Start_IT+0x350>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a68      	ldr	r2, [pc, #416]	; (8003dac <HAL_DMA_Start_IT+0x4bc>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d018      	beq.n	8003c40 <HAL_DMA_Start_IT+0x350>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a67      	ldr	r2, [pc, #412]	; (8003db0 <HAL_DMA_Start_IT+0x4c0>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d013      	beq.n	8003c40 <HAL_DMA_Start_IT+0x350>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a65      	ldr	r2, [pc, #404]	; (8003db4 <HAL_DMA_Start_IT+0x4c4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d00e      	beq.n	8003c40 <HAL_DMA_Start_IT+0x350>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a64      	ldr	r2, [pc, #400]	; (8003db8 <HAL_DMA_Start_IT+0x4c8>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d009      	beq.n	8003c40 <HAL_DMA_Start_IT+0x350>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a62      	ldr	r2, [pc, #392]	; (8003dbc <HAL_DMA_Start_IT+0x4cc>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d004      	beq.n	8003c40 <HAL_DMA_Start_IT+0x350>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a61      	ldr	r2, [pc, #388]	; (8003dc0 <HAL_DMA_Start_IT+0x4d0>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d101      	bne.n	8003c44 <HAL_DMA_Start_IT+0x354>
 8003c40:	2301      	movs	r3, #1
 8003c42:	e000      	b.n	8003c46 <HAL_DMA_Start_IT+0x356>
 8003c44:	2300      	movs	r3, #0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d01a      	beq.n	8003c80 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d007      	beq.n	8003c68 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c66:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d007      	beq.n	8003c80 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c7e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a37      	ldr	r2, [pc, #220]	; (8003d64 <HAL_DMA_Start_IT+0x474>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d04a      	beq.n	8003d20 <HAL_DMA_Start_IT+0x430>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a36      	ldr	r2, [pc, #216]	; (8003d68 <HAL_DMA_Start_IT+0x478>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d045      	beq.n	8003d20 <HAL_DMA_Start_IT+0x430>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a34      	ldr	r2, [pc, #208]	; (8003d6c <HAL_DMA_Start_IT+0x47c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d040      	beq.n	8003d20 <HAL_DMA_Start_IT+0x430>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a33      	ldr	r2, [pc, #204]	; (8003d70 <HAL_DMA_Start_IT+0x480>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d03b      	beq.n	8003d20 <HAL_DMA_Start_IT+0x430>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a31      	ldr	r2, [pc, #196]	; (8003d74 <HAL_DMA_Start_IT+0x484>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d036      	beq.n	8003d20 <HAL_DMA_Start_IT+0x430>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a30      	ldr	r2, [pc, #192]	; (8003d78 <HAL_DMA_Start_IT+0x488>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d031      	beq.n	8003d20 <HAL_DMA_Start_IT+0x430>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a2e      	ldr	r2, [pc, #184]	; (8003d7c <HAL_DMA_Start_IT+0x48c>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d02c      	beq.n	8003d20 <HAL_DMA_Start_IT+0x430>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a2d      	ldr	r2, [pc, #180]	; (8003d80 <HAL_DMA_Start_IT+0x490>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d027      	beq.n	8003d20 <HAL_DMA_Start_IT+0x430>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a2b      	ldr	r2, [pc, #172]	; (8003d84 <HAL_DMA_Start_IT+0x494>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d022      	beq.n	8003d20 <HAL_DMA_Start_IT+0x430>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a2a      	ldr	r2, [pc, #168]	; (8003d88 <HAL_DMA_Start_IT+0x498>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d01d      	beq.n	8003d20 <HAL_DMA_Start_IT+0x430>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a28      	ldr	r2, [pc, #160]	; (8003d8c <HAL_DMA_Start_IT+0x49c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d018      	beq.n	8003d20 <HAL_DMA_Start_IT+0x430>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a27      	ldr	r2, [pc, #156]	; (8003d90 <HAL_DMA_Start_IT+0x4a0>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d013      	beq.n	8003d20 <HAL_DMA_Start_IT+0x430>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a25      	ldr	r2, [pc, #148]	; (8003d94 <HAL_DMA_Start_IT+0x4a4>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d00e      	beq.n	8003d20 <HAL_DMA_Start_IT+0x430>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a24      	ldr	r2, [pc, #144]	; (8003d98 <HAL_DMA_Start_IT+0x4a8>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d009      	beq.n	8003d20 <HAL_DMA_Start_IT+0x430>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a22      	ldr	r2, [pc, #136]	; (8003d9c <HAL_DMA_Start_IT+0x4ac>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d004      	beq.n	8003d20 <HAL_DMA_Start_IT+0x430>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a21      	ldr	r2, [pc, #132]	; (8003da0 <HAL_DMA_Start_IT+0x4b0>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d108      	bne.n	8003d32 <HAL_DMA_Start_IT+0x442>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0201 	orr.w	r2, r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	e012      	b.n	8003d58 <HAL_DMA_Start_IT+0x468>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f042 0201 	orr.w	r2, r2, #1
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	e009      	b.n	8003d58 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d52:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3718      	adds	r7, #24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	40020010 	.word	0x40020010
 8003d68:	40020028 	.word	0x40020028
 8003d6c:	40020040 	.word	0x40020040
 8003d70:	40020058 	.word	0x40020058
 8003d74:	40020070 	.word	0x40020070
 8003d78:	40020088 	.word	0x40020088
 8003d7c:	400200a0 	.word	0x400200a0
 8003d80:	400200b8 	.word	0x400200b8
 8003d84:	40020410 	.word	0x40020410
 8003d88:	40020428 	.word	0x40020428
 8003d8c:	40020440 	.word	0x40020440
 8003d90:	40020458 	.word	0x40020458
 8003d94:	40020470 	.word	0x40020470
 8003d98:	40020488 	.word	0x40020488
 8003d9c:	400204a0 	.word	0x400204a0
 8003da0:	400204b8 	.word	0x400204b8
 8003da4:	58025408 	.word	0x58025408
 8003da8:	5802541c 	.word	0x5802541c
 8003dac:	58025430 	.word	0x58025430
 8003db0:	58025444 	.word	0x58025444
 8003db4:	58025458 	.word	0x58025458
 8003db8:	5802546c 	.word	0x5802546c
 8003dbc:	58025480 	.word	0x58025480
 8003dc0:	58025494 	.word	0x58025494

08003dc4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b08a      	sub	sp, #40	; 0x28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003dd0:	4b67      	ldr	r3, [pc, #412]	; (8003f70 <HAL_DMA_IRQHandler+0x1ac>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a67      	ldr	r2, [pc, #412]	; (8003f74 <HAL_DMA_IRQHandler+0x1b0>)
 8003dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dda:	0a9b      	lsrs	r3, r3, #10
 8003ddc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a5f      	ldr	r2, [pc, #380]	; (8003f78 <HAL_DMA_IRQHandler+0x1b4>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d04a      	beq.n	8003e96 <HAL_DMA_IRQHandler+0xd2>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a5d      	ldr	r2, [pc, #372]	; (8003f7c <HAL_DMA_IRQHandler+0x1b8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d045      	beq.n	8003e96 <HAL_DMA_IRQHandler+0xd2>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a5c      	ldr	r2, [pc, #368]	; (8003f80 <HAL_DMA_IRQHandler+0x1bc>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d040      	beq.n	8003e96 <HAL_DMA_IRQHandler+0xd2>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a5a      	ldr	r2, [pc, #360]	; (8003f84 <HAL_DMA_IRQHandler+0x1c0>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d03b      	beq.n	8003e96 <HAL_DMA_IRQHandler+0xd2>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a59      	ldr	r2, [pc, #356]	; (8003f88 <HAL_DMA_IRQHandler+0x1c4>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d036      	beq.n	8003e96 <HAL_DMA_IRQHandler+0xd2>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a57      	ldr	r2, [pc, #348]	; (8003f8c <HAL_DMA_IRQHandler+0x1c8>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d031      	beq.n	8003e96 <HAL_DMA_IRQHandler+0xd2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a56      	ldr	r2, [pc, #344]	; (8003f90 <HAL_DMA_IRQHandler+0x1cc>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d02c      	beq.n	8003e96 <HAL_DMA_IRQHandler+0xd2>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a54      	ldr	r2, [pc, #336]	; (8003f94 <HAL_DMA_IRQHandler+0x1d0>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d027      	beq.n	8003e96 <HAL_DMA_IRQHandler+0xd2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a53      	ldr	r2, [pc, #332]	; (8003f98 <HAL_DMA_IRQHandler+0x1d4>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d022      	beq.n	8003e96 <HAL_DMA_IRQHandler+0xd2>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a51      	ldr	r2, [pc, #324]	; (8003f9c <HAL_DMA_IRQHandler+0x1d8>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d01d      	beq.n	8003e96 <HAL_DMA_IRQHandler+0xd2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a50      	ldr	r2, [pc, #320]	; (8003fa0 <HAL_DMA_IRQHandler+0x1dc>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d018      	beq.n	8003e96 <HAL_DMA_IRQHandler+0xd2>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a4e      	ldr	r2, [pc, #312]	; (8003fa4 <HAL_DMA_IRQHandler+0x1e0>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d013      	beq.n	8003e96 <HAL_DMA_IRQHandler+0xd2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a4d      	ldr	r2, [pc, #308]	; (8003fa8 <HAL_DMA_IRQHandler+0x1e4>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d00e      	beq.n	8003e96 <HAL_DMA_IRQHandler+0xd2>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a4b      	ldr	r2, [pc, #300]	; (8003fac <HAL_DMA_IRQHandler+0x1e8>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d009      	beq.n	8003e96 <HAL_DMA_IRQHandler+0xd2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a4a      	ldr	r2, [pc, #296]	; (8003fb0 <HAL_DMA_IRQHandler+0x1ec>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d004      	beq.n	8003e96 <HAL_DMA_IRQHandler+0xd2>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a48      	ldr	r2, [pc, #288]	; (8003fb4 <HAL_DMA_IRQHandler+0x1f0>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d101      	bne.n	8003e9a <HAL_DMA_IRQHandler+0xd6>
 8003e96:	2301      	movs	r3, #1
 8003e98:	e000      	b.n	8003e9c <HAL_DMA_IRQHandler+0xd8>
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 842b 	beq.w	80046f8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea6:	f003 031f 	and.w	r3, r3, #31
 8003eaa:	2208      	movs	r2, #8
 8003eac:	409a      	lsls	r2, r3
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 80a2 	beq.w	8003ffc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a2e      	ldr	r2, [pc, #184]	; (8003f78 <HAL_DMA_IRQHandler+0x1b4>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d04a      	beq.n	8003f58 <HAL_DMA_IRQHandler+0x194>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a2d      	ldr	r2, [pc, #180]	; (8003f7c <HAL_DMA_IRQHandler+0x1b8>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d045      	beq.n	8003f58 <HAL_DMA_IRQHandler+0x194>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a2b      	ldr	r2, [pc, #172]	; (8003f80 <HAL_DMA_IRQHandler+0x1bc>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d040      	beq.n	8003f58 <HAL_DMA_IRQHandler+0x194>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a2a      	ldr	r2, [pc, #168]	; (8003f84 <HAL_DMA_IRQHandler+0x1c0>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d03b      	beq.n	8003f58 <HAL_DMA_IRQHandler+0x194>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a28      	ldr	r2, [pc, #160]	; (8003f88 <HAL_DMA_IRQHandler+0x1c4>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d036      	beq.n	8003f58 <HAL_DMA_IRQHandler+0x194>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a27      	ldr	r2, [pc, #156]	; (8003f8c <HAL_DMA_IRQHandler+0x1c8>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d031      	beq.n	8003f58 <HAL_DMA_IRQHandler+0x194>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a25      	ldr	r2, [pc, #148]	; (8003f90 <HAL_DMA_IRQHandler+0x1cc>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d02c      	beq.n	8003f58 <HAL_DMA_IRQHandler+0x194>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a24      	ldr	r2, [pc, #144]	; (8003f94 <HAL_DMA_IRQHandler+0x1d0>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d027      	beq.n	8003f58 <HAL_DMA_IRQHandler+0x194>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a22      	ldr	r2, [pc, #136]	; (8003f98 <HAL_DMA_IRQHandler+0x1d4>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d022      	beq.n	8003f58 <HAL_DMA_IRQHandler+0x194>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a21      	ldr	r2, [pc, #132]	; (8003f9c <HAL_DMA_IRQHandler+0x1d8>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d01d      	beq.n	8003f58 <HAL_DMA_IRQHandler+0x194>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a1f      	ldr	r2, [pc, #124]	; (8003fa0 <HAL_DMA_IRQHandler+0x1dc>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d018      	beq.n	8003f58 <HAL_DMA_IRQHandler+0x194>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a1e      	ldr	r2, [pc, #120]	; (8003fa4 <HAL_DMA_IRQHandler+0x1e0>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d013      	beq.n	8003f58 <HAL_DMA_IRQHandler+0x194>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a1c      	ldr	r2, [pc, #112]	; (8003fa8 <HAL_DMA_IRQHandler+0x1e4>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d00e      	beq.n	8003f58 <HAL_DMA_IRQHandler+0x194>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a1b      	ldr	r2, [pc, #108]	; (8003fac <HAL_DMA_IRQHandler+0x1e8>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d009      	beq.n	8003f58 <HAL_DMA_IRQHandler+0x194>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a19      	ldr	r2, [pc, #100]	; (8003fb0 <HAL_DMA_IRQHandler+0x1ec>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d004      	beq.n	8003f58 <HAL_DMA_IRQHandler+0x194>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a18      	ldr	r2, [pc, #96]	; (8003fb4 <HAL_DMA_IRQHandler+0x1f0>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d12f      	bne.n	8003fb8 <HAL_DMA_IRQHandler+0x1f4>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0304 	and.w	r3, r3, #4
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	bf14      	ite	ne
 8003f66:	2301      	movne	r3, #1
 8003f68:	2300      	moveq	r3, #0
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	e02e      	b.n	8003fcc <HAL_DMA_IRQHandler+0x208>
 8003f6e:	bf00      	nop
 8003f70:	24000000 	.word	0x24000000
 8003f74:	1b4e81b5 	.word	0x1b4e81b5
 8003f78:	40020010 	.word	0x40020010
 8003f7c:	40020028 	.word	0x40020028
 8003f80:	40020040 	.word	0x40020040
 8003f84:	40020058 	.word	0x40020058
 8003f88:	40020070 	.word	0x40020070
 8003f8c:	40020088 	.word	0x40020088
 8003f90:	400200a0 	.word	0x400200a0
 8003f94:	400200b8 	.word	0x400200b8
 8003f98:	40020410 	.word	0x40020410
 8003f9c:	40020428 	.word	0x40020428
 8003fa0:	40020440 	.word	0x40020440
 8003fa4:	40020458 	.word	0x40020458
 8003fa8:	40020470 	.word	0x40020470
 8003fac:	40020488 	.word	0x40020488
 8003fb0:	400204a0 	.word	0x400204a0
 8003fb4:	400204b8 	.word	0x400204b8
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0308 	and.w	r3, r3, #8
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	bf14      	ite	ne
 8003fc6:	2301      	movne	r3, #1
 8003fc8:	2300      	moveq	r3, #0
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d015      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 0204 	bic.w	r2, r2, #4
 8003fde:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe4:	f003 031f 	and.w	r3, r3, #31
 8003fe8:	2208      	movs	r2, #8
 8003fea:	409a      	lsls	r2, r3
 8003fec:	6a3b      	ldr	r3, [r7, #32]
 8003fee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff4:	f043 0201 	orr.w	r2, r3, #1
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004000:	f003 031f 	and.w	r3, r3, #31
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	fa22 f303 	lsr.w	r3, r2, r3
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d06e      	beq.n	80040f0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a69      	ldr	r2, [pc, #420]	; (80041bc <HAL_DMA_IRQHandler+0x3f8>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d04a      	beq.n	80040b2 <HAL_DMA_IRQHandler+0x2ee>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a67      	ldr	r2, [pc, #412]	; (80041c0 <HAL_DMA_IRQHandler+0x3fc>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d045      	beq.n	80040b2 <HAL_DMA_IRQHandler+0x2ee>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a66      	ldr	r2, [pc, #408]	; (80041c4 <HAL_DMA_IRQHandler+0x400>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d040      	beq.n	80040b2 <HAL_DMA_IRQHandler+0x2ee>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a64      	ldr	r2, [pc, #400]	; (80041c8 <HAL_DMA_IRQHandler+0x404>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d03b      	beq.n	80040b2 <HAL_DMA_IRQHandler+0x2ee>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a63      	ldr	r2, [pc, #396]	; (80041cc <HAL_DMA_IRQHandler+0x408>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d036      	beq.n	80040b2 <HAL_DMA_IRQHandler+0x2ee>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a61      	ldr	r2, [pc, #388]	; (80041d0 <HAL_DMA_IRQHandler+0x40c>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d031      	beq.n	80040b2 <HAL_DMA_IRQHandler+0x2ee>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a60      	ldr	r2, [pc, #384]	; (80041d4 <HAL_DMA_IRQHandler+0x410>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d02c      	beq.n	80040b2 <HAL_DMA_IRQHandler+0x2ee>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a5e      	ldr	r2, [pc, #376]	; (80041d8 <HAL_DMA_IRQHandler+0x414>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d027      	beq.n	80040b2 <HAL_DMA_IRQHandler+0x2ee>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a5d      	ldr	r2, [pc, #372]	; (80041dc <HAL_DMA_IRQHandler+0x418>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d022      	beq.n	80040b2 <HAL_DMA_IRQHandler+0x2ee>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a5b      	ldr	r2, [pc, #364]	; (80041e0 <HAL_DMA_IRQHandler+0x41c>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d01d      	beq.n	80040b2 <HAL_DMA_IRQHandler+0x2ee>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a5a      	ldr	r2, [pc, #360]	; (80041e4 <HAL_DMA_IRQHandler+0x420>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d018      	beq.n	80040b2 <HAL_DMA_IRQHandler+0x2ee>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a58      	ldr	r2, [pc, #352]	; (80041e8 <HAL_DMA_IRQHandler+0x424>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d013      	beq.n	80040b2 <HAL_DMA_IRQHandler+0x2ee>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a57      	ldr	r2, [pc, #348]	; (80041ec <HAL_DMA_IRQHandler+0x428>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d00e      	beq.n	80040b2 <HAL_DMA_IRQHandler+0x2ee>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a55      	ldr	r2, [pc, #340]	; (80041f0 <HAL_DMA_IRQHandler+0x42c>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d009      	beq.n	80040b2 <HAL_DMA_IRQHandler+0x2ee>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a54      	ldr	r2, [pc, #336]	; (80041f4 <HAL_DMA_IRQHandler+0x430>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d004      	beq.n	80040b2 <HAL_DMA_IRQHandler+0x2ee>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a52      	ldr	r2, [pc, #328]	; (80041f8 <HAL_DMA_IRQHandler+0x434>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d10a      	bne.n	80040c8 <HAL_DMA_IRQHandler+0x304>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040bc:	2b00      	cmp	r3, #0
 80040be:	bf14      	ite	ne
 80040c0:	2301      	movne	r3, #1
 80040c2:	2300      	moveq	r3, #0
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	e003      	b.n	80040d0 <HAL_DMA_IRQHandler+0x30c>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2300      	movs	r3, #0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00d      	beq.n	80040f0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d8:	f003 031f 	and.w	r3, r3, #31
 80040dc:	2201      	movs	r2, #1
 80040de:	409a      	lsls	r2, r3
 80040e0:	6a3b      	ldr	r3, [r7, #32]
 80040e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e8:	f043 0202 	orr.w	r2, r3, #2
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f4:	f003 031f 	and.w	r3, r3, #31
 80040f8:	2204      	movs	r2, #4
 80040fa:	409a      	lsls	r2, r3
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	4013      	ands	r3, r2
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 808f 	beq.w	8004224 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a2c      	ldr	r2, [pc, #176]	; (80041bc <HAL_DMA_IRQHandler+0x3f8>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d04a      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x3e2>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a2a      	ldr	r2, [pc, #168]	; (80041c0 <HAL_DMA_IRQHandler+0x3fc>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d045      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x3e2>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a29      	ldr	r2, [pc, #164]	; (80041c4 <HAL_DMA_IRQHandler+0x400>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d040      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x3e2>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a27      	ldr	r2, [pc, #156]	; (80041c8 <HAL_DMA_IRQHandler+0x404>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d03b      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x3e2>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a26      	ldr	r2, [pc, #152]	; (80041cc <HAL_DMA_IRQHandler+0x408>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d036      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x3e2>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a24      	ldr	r2, [pc, #144]	; (80041d0 <HAL_DMA_IRQHandler+0x40c>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d031      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x3e2>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a23      	ldr	r2, [pc, #140]	; (80041d4 <HAL_DMA_IRQHandler+0x410>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d02c      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x3e2>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a21      	ldr	r2, [pc, #132]	; (80041d8 <HAL_DMA_IRQHandler+0x414>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d027      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x3e2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a20      	ldr	r2, [pc, #128]	; (80041dc <HAL_DMA_IRQHandler+0x418>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d022      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x3e2>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a1e      	ldr	r2, [pc, #120]	; (80041e0 <HAL_DMA_IRQHandler+0x41c>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d01d      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x3e2>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a1d      	ldr	r2, [pc, #116]	; (80041e4 <HAL_DMA_IRQHandler+0x420>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d018      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x3e2>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a1b      	ldr	r2, [pc, #108]	; (80041e8 <HAL_DMA_IRQHandler+0x424>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d013      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x3e2>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a1a      	ldr	r2, [pc, #104]	; (80041ec <HAL_DMA_IRQHandler+0x428>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d00e      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x3e2>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a18      	ldr	r2, [pc, #96]	; (80041f0 <HAL_DMA_IRQHandler+0x42c>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d009      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x3e2>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a17      	ldr	r2, [pc, #92]	; (80041f4 <HAL_DMA_IRQHandler+0x430>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d004      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x3e2>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a15      	ldr	r2, [pc, #84]	; (80041f8 <HAL_DMA_IRQHandler+0x434>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d12a      	bne.n	80041fc <HAL_DMA_IRQHandler+0x438>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	bf14      	ite	ne
 80041b4:	2301      	movne	r3, #1
 80041b6:	2300      	moveq	r3, #0
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	e023      	b.n	8004204 <HAL_DMA_IRQHandler+0x440>
 80041bc:	40020010 	.word	0x40020010
 80041c0:	40020028 	.word	0x40020028
 80041c4:	40020040 	.word	0x40020040
 80041c8:	40020058 	.word	0x40020058
 80041cc:	40020070 	.word	0x40020070
 80041d0:	40020088 	.word	0x40020088
 80041d4:	400200a0 	.word	0x400200a0
 80041d8:	400200b8 	.word	0x400200b8
 80041dc:	40020410 	.word	0x40020410
 80041e0:	40020428 	.word	0x40020428
 80041e4:	40020440 	.word	0x40020440
 80041e8:	40020458 	.word	0x40020458
 80041ec:	40020470 	.word	0x40020470
 80041f0:	40020488 	.word	0x40020488
 80041f4:	400204a0 	.word	0x400204a0
 80041f8:	400204b8 	.word	0x400204b8
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2300      	movs	r3, #0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00d      	beq.n	8004224 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800420c:	f003 031f 	and.w	r3, r3, #31
 8004210:	2204      	movs	r2, #4
 8004212:	409a      	lsls	r2, r3
 8004214:	6a3b      	ldr	r3, [r7, #32]
 8004216:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421c:	f043 0204 	orr.w	r2, r3, #4
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004228:	f003 031f 	and.w	r3, r3, #31
 800422c:	2210      	movs	r2, #16
 800422e:	409a      	lsls	r2, r3
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	4013      	ands	r3, r2
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 80a6 	beq.w	8004386 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a85      	ldr	r2, [pc, #532]	; (8004454 <HAL_DMA_IRQHandler+0x690>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d04a      	beq.n	80042da <HAL_DMA_IRQHandler+0x516>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a83      	ldr	r2, [pc, #524]	; (8004458 <HAL_DMA_IRQHandler+0x694>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d045      	beq.n	80042da <HAL_DMA_IRQHandler+0x516>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a82      	ldr	r2, [pc, #520]	; (800445c <HAL_DMA_IRQHandler+0x698>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d040      	beq.n	80042da <HAL_DMA_IRQHandler+0x516>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a80      	ldr	r2, [pc, #512]	; (8004460 <HAL_DMA_IRQHandler+0x69c>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d03b      	beq.n	80042da <HAL_DMA_IRQHandler+0x516>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a7f      	ldr	r2, [pc, #508]	; (8004464 <HAL_DMA_IRQHandler+0x6a0>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d036      	beq.n	80042da <HAL_DMA_IRQHandler+0x516>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a7d      	ldr	r2, [pc, #500]	; (8004468 <HAL_DMA_IRQHandler+0x6a4>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d031      	beq.n	80042da <HAL_DMA_IRQHandler+0x516>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a7c      	ldr	r2, [pc, #496]	; (800446c <HAL_DMA_IRQHandler+0x6a8>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d02c      	beq.n	80042da <HAL_DMA_IRQHandler+0x516>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a7a      	ldr	r2, [pc, #488]	; (8004470 <HAL_DMA_IRQHandler+0x6ac>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d027      	beq.n	80042da <HAL_DMA_IRQHandler+0x516>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a79      	ldr	r2, [pc, #484]	; (8004474 <HAL_DMA_IRQHandler+0x6b0>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d022      	beq.n	80042da <HAL_DMA_IRQHandler+0x516>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a77      	ldr	r2, [pc, #476]	; (8004478 <HAL_DMA_IRQHandler+0x6b4>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d01d      	beq.n	80042da <HAL_DMA_IRQHandler+0x516>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a76      	ldr	r2, [pc, #472]	; (800447c <HAL_DMA_IRQHandler+0x6b8>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d018      	beq.n	80042da <HAL_DMA_IRQHandler+0x516>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a74      	ldr	r2, [pc, #464]	; (8004480 <HAL_DMA_IRQHandler+0x6bc>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d013      	beq.n	80042da <HAL_DMA_IRQHandler+0x516>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a73      	ldr	r2, [pc, #460]	; (8004484 <HAL_DMA_IRQHandler+0x6c0>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d00e      	beq.n	80042da <HAL_DMA_IRQHandler+0x516>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a71      	ldr	r2, [pc, #452]	; (8004488 <HAL_DMA_IRQHandler+0x6c4>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d009      	beq.n	80042da <HAL_DMA_IRQHandler+0x516>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a70      	ldr	r2, [pc, #448]	; (800448c <HAL_DMA_IRQHandler+0x6c8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d004      	beq.n	80042da <HAL_DMA_IRQHandler+0x516>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a6e      	ldr	r2, [pc, #440]	; (8004490 <HAL_DMA_IRQHandler+0x6cc>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d10a      	bne.n	80042f0 <HAL_DMA_IRQHandler+0x52c>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0308 	and.w	r3, r3, #8
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	bf14      	ite	ne
 80042e8:	2301      	movne	r3, #1
 80042ea:	2300      	moveq	r3, #0
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	e009      	b.n	8004304 <HAL_DMA_IRQHandler+0x540>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0304 	and.w	r3, r3, #4
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	bf14      	ite	ne
 80042fe:	2301      	movne	r3, #1
 8004300:	2300      	moveq	r3, #0
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b00      	cmp	r3, #0
 8004306:	d03e      	beq.n	8004386 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800430c:	f003 031f 	and.w	r3, r3, #31
 8004310:	2210      	movs	r2, #16
 8004312:	409a      	lsls	r2, r3
 8004314:	6a3b      	ldr	r3, [r7, #32]
 8004316:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d018      	beq.n	8004358 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d108      	bne.n	8004346 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	2b00      	cmp	r3, #0
 800433a:	d024      	beq.n	8004386 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	4798      	blx	r3
 8004344:	e01f      	b.n	8004386 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800434a:	2b00      	cmp	r3, #0
 800434c:	d01b      	beq.n	8004386 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	4798      	blx	r3
 8004356:	e016      	b.n	8004386 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004362:	2b00      	cmp	r3, #0
 8004364:	d107      	bne.n	8004376 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0208 	bic.w	r2, r2, #8
 8004374:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800438a:	f003 031f 	and.w	r3, r3, #31
 800438e:	2220      	movs	r2, #32
 8004390:	409a      	lsls	r2, r3
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	4013      	ands	r3, r2
 8004396:	2b00      	cmp	r3, #0
 8004398:	f000 8110 	beq.w	80045bc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a2c      	ldr	r2, [pc, #176]	; (8004454 <HAL_DMA_IRQHandler+0x690>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d04a      	beq.n	800443c <HAL_DMA_IRQHandler+0x678>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a2b      	ldr	r2, [pc, #172]	; (8004458 <HAL_DMA_IRQHandler+0x694>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d045      	beq.n	800443c <HAL_DMA_IRQHandler+0x678>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a29      	ldr	r2, [pc, #164]	; (800445c <HAL_DMA_IRQHandler+0x698>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d040      	beq.n	800443c <HAL_DMA_IRQHandler+0x678>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a28      	ldr	r2, [pc, #160]	; (8004460 <HAL_DMA_IRQHandler+0x69c>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d03b      	beq.n	800443c <HAL_DMA_IRQHandler+0x678>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a26      	ldr	r2, [pc, #152]	; (8004464 <HAL_DMA_IRQHandler+0x6a0>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d036      	beq.n	800443c <HAL_DMA_IRQHandler+0x678>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a25      	ldr	r2, [pc, #148]	; (8004468 <HAL_DMA_IRQHandler+0x6a4>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d031      	beq.n	800443c <HAL_DMA_IRQHandler+0x678>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a23      	ldr	r2, [pc, #140]	; (800446c <HAL_DMA_IRQHandler+0x6a8>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d02c      	beq.n	800443c <HAL_DMA_IRQHandler+0x678>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a22      	ldr	r2, [pc, #136]	; (8004470 <HAL_DMA_IRQHandler+0x6ac>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d027      	beq.n	800443c <HAL_DMA_IRQHandler+0x678>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a20      	ldr	r2, [pc, #128]	; (8004474 <HAL_DMA_IRQHandler+0x6b0>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d022      	beq.n	800443c <HAL_DMA_IRQHandler+0x678>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a1f      	ldr	r2, [pc, #124]	; (8004478 <HAL_DMA_IRQHandler+0x6b4>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d01d      	beq.n	800443c <HAL_DMA_IRQHandler+0x678>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a1d      	ldr	r2, [pc, #116]	; (800447c <HAL_DMA_IRQHandler+0x6b8>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d018      	beq.n	800443c <HAL_DMA_IRQHandler+0x678>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a1c      	ldr	r2, [pc, #112]	; (8004480 <HAL_DMA_IRQHandler+0x6bc>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d013      	beq.n	800443c <HAL_DMA_IRQHandler+0x678>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a1a      	ldr	r2, [pc, #104]	; (8004484 <HAL_DMA_IRQHandler+0x6c0>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d00e      	beq.n	800443c <HAL_DMA_IRQHandler+0x678>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a19      	ldr	r2, [pc, #100]	; (8004488 <HAL_DMA_IRQHandler+0x6c4>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d009      	beq.n	800443c <HAL_DMA_IRQHandler+0x678>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a17      	ldr	r2, [pc, #92]	; (800448c <HAL_DMA_IRQHandler+0x6c8>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d004      	beq.n	800443c <HAL_DMA_IRQHandler+0x678>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a16      	ldr	r2, [pc, #88]	; (8004490 <HAL_DMA_IRQHandler+0x6cc>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d12b      	bne.n	8004494 <HAL_DMA_IRQHandler+0x6d0>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0310 	and.w	r3, r3, #16
 8004446:	2b00      	cmp	r3, #0
 8004448:	bf14      	ite	ne
 800444a:	2301      	movne	r3, #1
 800444c:	2300      	moveq	r3, #0
 800444e:	b2db      	uxtb	r3, r3
 8004450:	e02a      	b.n	80044a8 <HAL_DMA_IRQHandler+0x6e4>
 8004452:	bf00      	nop
 8004454:	40020010 	.word	0x40020010
 8004458:	40020028 	.word	0x40020028
 800445c:	40020040 	.word	0x40020040
 8004460:	40020058 	.word	0x40020058
 8004464:	40020070 	.word	0x40020070
 8004468:	40020088 	.word	0x40020088
 800446c:	400200a0 	.word	0x400200a0
 8004470:	400200b8 	.word	0x400200b8
 8004474:	40020410 	.word	0x40020410
 8004478:	40020428 	.word	0x40020428
 800447c:	40020440 	.word	0x40020440
 8004480:	40020458 	.word	0x40020458
 8004484:	40020470 	.word	0x40020470
 8004488:	40020488 	.word	0x40020488
 800448c:	400204a0 	.word	0x400204a0
 8004490:	400204b8 	.word	0x400204b8
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	bf14      	ite	ne
 80044a2:	2301      	movne	r3, #1
 80044a4:	2300      	moveq	r3, #0
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 8087 	beq.w	80045bc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b2:	f003 031f 	and.w	r3, r3, #31
 80044b6:	2220      	movs	r2, #32
 80044b8:	409a      	lsls	r2, r3
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d139      	bne.n	800453e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 0216 	bic.w	r2, r2, #22
 80044d8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	695a      	ldr	r2, [r3, #20]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044e8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d103      	bne.n	80044fa <HAL_DMA_IRQHandler+0x736>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d007      	beq.n	800450a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 0208 	bic.w	r2, r2, #8
 8004508:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800450e:	f003 031f 	and.w	r3, r3, #31
 8004512:	223f      	movs	r2, #63	; 0x3f
 8004514:	409a      	lsls	r2, r3
 8004516:	6a3b      	ldr	r3, [r7, #32]
 8004518:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 8382 	beq.w	8004c38 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	4798      	blx	r3
          }
          return;
 800453c:	e37c      	b.n	8004c38 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d018      	beq.n	800457e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d108      	bne.n	800456c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455e:	2b00      	cmp	r3, #0
 8004560:	d02c      	beq.n	80045bc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	4798      	blx	r3
 800456a:	e027      	b.n	80045bc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004570:	2b00      	cmp	r3, #0
 8004572:	d023      	beq.n	80045bc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	4798      	blx	r3
 800457c:	e01e      	b.n	80045bc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10f      	bne.n	80045ac <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 0210 	bic.w	r2, r2, #16
 800459a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 833e 	beq.w	8004c42 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 8088 	beq.w	80046e4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2204      	movs	r2, #4
 80045d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a8e      	ldr	r2, [pc, #568]	; (800481c <HAL_DMA_IRQHandler+0xa58>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d04a      	beq.n	800467c <HAL_DMA_IRQHandler+0x8b8>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a8d      	ldr	r2, [pc, #564]	; (8004820 <HAL_DMA_IRQHandler+0xa5c>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d045      	beq.n	800467c <HAL_DMA_IRQHandler+0x8b8>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a8b      	ldr	r2, [pc, #556]	; (8004824 <HAL_DMA_IRQHandler+0xa60>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d040      	beq.n	800467c <HAL_DMA_IRQHandler+0x8b8>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a8a      	ldr	r2, [pc, #552]	; (8004828 <HAL_DMA_IRQHandler+0xa64>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d03b      	beq.n	800467c <HAL_DMA_IRQHandler+0x8b8>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a88      	ldr	r2, [pc, #544]	; (800482c <HAL_DMA_IRQHandler+0xa68>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d036      	beq.n	800467c <HAL_DMA_IRQHandler+0x8b8>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a87      	ldr	r2, [pc, #540]	; (8004830 <HAL_DMA_IRQHandler+0xa6c>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d031      	beq.n	800467c <HAL_DMA_IRQHandler+0x8b8>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a85      	ldr	r2, [pc, #532]	; (8004834 <HAL_DMA_IRQHandler+0xa70>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d02c      	beq.n	800467c <HAL_DMA_IRQHandler+0x8b8>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a84      	ldr	r2, [pc, #528]	; (8004838 <HAL_DMA_IRQHandler+0xa74>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d027      	beq.n	800467c <HAL_DMA_IRQHandler+0x8b8>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a82      	ldr	r2, [pc, #520]	; (800483c <HAL_DMA_IRQHandler+0xa78>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d022      	beq.n	800467c <HAL_DMA_IRQHandler+0x8b8>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a81      	ldr	r2, [pc, #516]	; (8004840 <HAL_DMA_IRQHandler+0xa7c>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d01d      	beq.n	800467c <HAL_DMA_IRQHandler+0x8b8>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a7f      	ldr	r2, [pc, #508]	; (8004844 <HAL_DMA_IRQHandler+0xa80>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d018      	beq.n	800467c <HAL_DMA_IRQHandler+0x8b8>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a7e      	ldr	r2, [pc, #504]	; (8004848 <HAL_DMA_IRQHandler+0xa84>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d013      	beq.n	800467c <HAL_DMA_IRQHandler+0x8b8>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a7c      	ldr	r2, [pc, #496]	; (800484c <HAL_DMA_IRQHandler+0xa88>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d00e      	beq.n	800467c <HAL_DMA_IRQHandler+0x8b8>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a7b      	ldr	r2, [pc, #492]	; (8004850 <HAL_DMA_IRQHandler+0xa8c>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d009      	beq.n	800467c <HAL_DMA_IRQHandler+0x8b8>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a79      	ldr	r2, [pc, #484]	; (8004854 <HAL_DMA_IRQHandler+0xa90>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d004      	beq.n	800467c <HAL_DMA_IRQHandler+0x8b8>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a78      	ldr	r2, [pc, #480]	; (8004858 <HAL_DMA_IRQHandler+0xa94>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d108      	bne.n	800468e <HAL_DMA_IRQHandler+0x8ca>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f022 0201 	bic.w	r2, r2, #1
 800468a:	601a      	str	r2, [r3, #0]
 800468c:	e007      	b.n	800469e <HAL_DMA_IRQHandler+0x8da>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 0201 	bic.w	r2, r2, #1
 800469c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	3301      	adds	r3, #1
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d307      	bcc.n	80046ba <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1f2      	bne.n	800469e <HAL_DMA_IRQHandler+0x8da>
 80046b8:	e000      	b.n	80046bc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80046ba:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d004      	beq.n	80046dc <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2203      	movs	r2, #3
 80046d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80046da:	e003      	b.n	80046e4 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 82aa 	beq.w	8004c42 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	4798      	blx	r3
 80046f6:	e2a4      	b.n	8004c42 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a57      	ldr	r2, [pc, #348]	; (800485c <HAL_DMA_IRQHandler+0xa98>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d04a      	beq.n	8004798 <HAL_DMA_IRQHandler+0x9d4>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a56      	ldr	r2, [pc, #344]	; (8004860 <HAL_DMA_IRQHandler+0xa9c>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d045      	beq.n	8004798 <HAL_DMA_IRQHandler+0x9d4>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a54      	ldr	r2, [pc, #336]	; (8004864 <HAL_DMA_IRQHandler+0xaa0>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d040      	beq.n	8004798 <HAL_DMA_IRQHandler+0x9d4>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a53      	ldr	r2, [pc, #332]	; (8004868 <HAL_DMA_IRQHandler+0xaa4>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d03b      	beq.n	8004798 <HAL_DMA_IRQHandler+0x9d4>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a51      	ldr	r2, [pc, #324]	; (800486c <HAL_DMA_IRQHandler+0xaa8>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d036      	beq.n	8004798 <HAL_DMA_IRQHandler+0x9d4>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a50      	ldr	r2, [pc, #320]	; (8004870 <HAL_DMA_IRQHandler+0xaac>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d031      	beq.n	8004798 <HAL_DMA_IRQHandler+0x9d4>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a4e      	ldr	r2, [pc, #312]	; (8004874 <HAL_DMA_IRQHandler+0xab0>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d02c      	beq.n	8004798 <HAL_DMA_IRQHandler+0x9d4>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a4d      	ldr	r2, [pc, #308]	; (8004878 <HAL_DMA_IRQHandler+0xab4>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d027      	beq.n	8004798 <HAL_DMA_IRQHandler+0x9d4>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a4b      	ldr	r2, [pc, #300]	; (800487c <HAL_DMA_IRQHandler+0xab8>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d022      	beq.n	8004798 <HAL_DMA_IRQHandler+0x9d4>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a4a      	ldr	r2, [pc, #296]	; (8004880 <HAL_DMA_IRQHandler+0xabc>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d01d      	beq.n	8004798 <HAL_DMA_IRQHandler+0x9d4>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a48      	ldr	r2, [pc, #288]	; (8004884 <HAL_DMA_IRQHandler+0xac0>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d018      	beq.n	8004798 <HAL_DMA_IRQHandler+0x9d4>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a47      	ldr	r2, [pc, #284]	; (8004888 <HAL_DMA_IRQHandler+0xac4>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d013      	beq.n	8004798 <HAL_DMA_IRQHandler+0x9d4>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a45      	ldr	r2, [pc, #276]	; (800488c <HAL_DMA_IRQHandler+0xac8>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d00e      	beq.n	8004798 <HAL_DMA_IRQHandler+0x9d4>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a44      	ldr	r2, [pc, #272]	; (8004890 <HAL_DMA_IRQHandler+0xacc>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d009      	beq.n	8004798 <HAL_DMA_IRQHandler+0x9d4>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a42      	ldr	r2, [pc, #264]	; (8004894 <HAL_DMA_IRQHandler+0xad0>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d004      	beq.n	8004798 <HAL_DMA_IRQHandler+0x9d4>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a41      	ldr	r2, [pc, #260]	; (8004898 <HAL_DMA_IRQHandler+0xad4>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d101      	bne.n	800479c <HAL_DMA_IRQHandler+0x9d8>
 8004798:	2301      	movs	r3, #1
 800479a:	e000      	b.n	800479e <HAL_DMA_IRQHandler+0x9da>
 800479c:	2300      	movs	r3, #0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f000 824f 	beq.w	8004c42 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b0:	f003 031f 	and.w	r3, r3, #31
 80047b4:	2204      	movs	r2, #4
 80047b6:	409a      	lsls	r2, r3
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	4013      	ands	r3, r2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 80dd 	beq.w	800497c <HAL_DMA_IRQHandler+0xbb8>
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	f003 0304 	and.w	r3, r3, #4
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 80d7 	beq.w	800497c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d2:	f003 031f 	and.w	r3, r3, #31
 80047d6:	2204      	movs	r2, #4
 80047d8:	409a      	lsls	r2, r3
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d059      	beq.n	800489c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d109      	bne.n	8004806 <HAL_DMA_IRQHandler+0xa42>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f000 8220 	beq.w	8004c3c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004804:	e21a      	b.n	8004c3c <HAL_DMA_IRQHandler+0xe78>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 8216 	beq.w	8004c3c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004818:	e210      	b.n	8004c3c <HAL_DMA_IRQHandler+0xe78>
 800481a:	bf00      	nop
 800481c:	40020010 	.word	0x40020010
 8004820:	40020028 	.word	0x40020028
 8004824:	40020040 	.word	0x40020040
 8004828:	40020058 	.word	0x40020058
 800482c:	40020070 	.word	0x40020070
 8004830:	40020088 	.word	0x40020088
 8004834:	400200a0 	.word	0x400200a0
 8004838:	400200b8 	.word	0x400200b8
 800483c:	40020410 	.word	0x40020410
 8004840:	40020428 	.word	0x40020428
 8004844:	40020440 	.word	0x40020440
 8004848:	40020458 	.word	0x40020458
 800484c:	40020470 	.word	0x40020470
 8004850:	40020488 	.word	0x40020488
 8004854:	400204a0 	.word	0x400204a0
 8004858:	400204b8 	.word	0x400204b8
 800485c:	48022c08 	.word	0x48022c08
 8004860:	48022c1c 	.word	0x48022c1c
 8004864:	48022c30 	.word	0x48022c30
 8004868:	48022c44 	.word	0x48022c44
 800486c:	48022c58 	.word	0x48022c58
 8004870:	48022c6c 	.word	0x48022c6c
 8004874:	48022c80 	.word	0x48022c80
 8004878:	48022c94 	.word	0x48022c94
 800487c:	58025408 	.word	0x58025408
 8004880:	5802541c 	.word	0x5802541c
 8004884:	58025430 	.word	0x58025430
 8004888:	58025444 	.word	0x58025444
 800488c:	58025458 	.word	0x58025458
 8004890:	5802546c 	.word	0x5802546c
 8004894:	58025480 	.word	0x58025480
 8004898:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	f003 0320 	and.w	r3, r3, #32
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d160      	bne.n	8004968 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a8c      	ldr	r2, [pc, #560]	; (8004adc <HAL_DMA_IRQHandler+0xd18>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d04a      	beq.n	8004946 <HAL_DMA_IRQHandler+0xb82>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a8a      	ldr	r2, [pc, #552]	; (8004ae0 <HAL_DMA_IRQHandler+0xd1c>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d045      	beq.n	8004946 <HAL_DMA_IRQHandler+0xb82>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a89      	ldr	r2, [pc, #548]	; (8004ae4 <HAL_DMA_IRQHandler+0xd20>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d040      	beq.n	8004946 <HAL_DMA_IRQHandler+0xb82>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a87      	ldr	r2, [pc, #540]	; (8004ae8 <HAL_DMA_IRQHandler+0xd24>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d03b      	beq.n	8004946 <HAL_DMA_IRQHandler+0xb82>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a86      	ldr	r2, [pc, #536]	; (8004aec <HAL_DMA_IRQHandler+0xd28>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d036      	beq.n	8004946 <HAL_DMA_IRQHandler+0xb82>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a84      	ldr	r2, [pc, #528]	; (8004af0 <HAL_DMA_IRQHandler+0xd2c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d031      	beq.n	8004946 <HAL_DMA_IRQHandler+0xb82>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a83      	ldr	r2, [pc, #524]	; (8004af4 <HAL_DMA_IRQHandler+0xd30>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d02c      	beq.n	8004946 <HAL_DMA_IRQHandler+0xb82>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a81      	ldr	r2, [pc, #516]	; (8004af8 <HAL_DMA_IRQHandler+0xd34>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d027      	beq.n	8004946 <HAL_DMA_IRQHandler+0xb82>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a80      	ldr	r2, [pc, #512]	; (8004afc <HAL_DMA_IRQHandler+0xd38>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d022      	beq.n	8004946 <HAL_DMA_IRQHandler+0xb82>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a7e      	ldr	r2, [pc, #504]	; (8004b00 <HAL_DMA_IRQHandler+0xd3c>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d01d      	beq.n	8004946 <HAL_DMA_IRQHandler+0xb82>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a7d      	ldr	r2, [pc, #500]	; (8004b04 <HAL_DMA_IRQHandler+0xd40>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d018      	beq.n	8004946 <HAL_DMA_IRQHandler+0xb82>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a7b      	ldr	r2, [pc, #492]	; (8004b08 <HAL_DMA_IRQHandler+0xd44>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d013      	beq.n	8004946 <HAL_DMA_IRQHandler+0xb82>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a7a      	ldr	r2, [pc, #488]	; (8004b0c <HAL_DMA_IRQHandler+0xd48>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d00e      	beq.n	8004946 <HAL_DMA_IRQHandler+0xb82>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a78      	ldr	r2, [pc, #480]	; (8004b10 <HAL_DMA_IRQHandler+0xd4c>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d009      	beq.n	8004946 <HAL_DMA_IRQHandler+0xb82>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a77      	ldr	r2, [pc, #476]	; (8004b14 <HAL_DMA_IRQHandler+0xd50>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d004      	beq.n	8004946 <HAL_DMA_IRQHandler+0xb82>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a75      	ldr	r2, [pc, #468]	; (8004b18 <HAL_DMA_IRQHandler+0xd54>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d108      	bne.n	8004958 <HAL_DMA_IRQHandler+0xb94>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 0208 	bic.w	r2, r2, #8
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	e007      	b.n	8004968 <HAL_DMA_IRQHandler+0xba4>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 0204 	bic.w	r2, r2, #4
 8004966:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 8165 	beq.w	8004c3c <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800497a:	e15f      	b.n	8004c3c <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004980:	f003 031f 	and.w	r3, r3, #31
 8004984:	2202      	movs	r2, #2
 8004986:	409a      	lsls	r2, r3
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	4013      	ands	r3, r2
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 80c5 	beq.w	8004b1c <HAL_DMA_IRQHandler+0xd58>
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 80bf 	beq.w	8004b1c <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a2:	f003 031f 	and.w	r3, r3, #31
 80049a6:	2202      	movs	r2, #2
 80049a8:	409a      	lsls	r2, r3
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d018      	beq.n	80049ea <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d109      	bne.n	80049d6 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f000 813a 	beq.w	8004c40 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049d4:	e134      	b.n	8004c40 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f000 8130 	beq.w	8004c40 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049e8:	e12a      	b.n	8004c40 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	f003 0320 	and.w	r3, r3, #32
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d168      	bne.n	8004ac6 <HAL_DMA_IRQHandler+0xd02>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a38      	ldr	r2, [pc, #224]	; (8004adc <HAL_DMA_IRQHandler+0xd18>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d04a      	beq.n	8004a94 <HAL_DMA_IRQHandler+0xcd0>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a37      	ldr	r2, [pc, #220]	; (8004ae0 <HAL_DMA_IRQHandler+0xd1c>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d045      	beq.n	8004a94 <HAL_DMA_IRQHandler+0xcd0>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a35      	ldr	r2, [pc, #212]	; (8004ae4 <HAL_DMA_IRQHandler+0xd20>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d040      	beq.n	8004a94 <HAL_DMA_IRQHandler+0xcd0>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a34      	ldr	r2, [pc, #208]	; (8004ae8 <HAL_DMA_IRQHandler+0xd24>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d03b      	beq.n	8004a94 <HAL_DMA_IRQHandler+0xcd0>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a32      	ldr	r2, [pc, #200]	; (8004aec <HAL_DMA_IRQHandler+0xd28>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d036      	beq.n	8004a94 <HAL_DMA_IRQHandler+0xcd0>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a31      	ldr	r2, [pc, #196]	; (8004af0 <HAL_DMA_IRQHandler+0xd2c>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d031      	beq.n	8004a94 <HAL_DMA_IRQHandler+0xcd0>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a2f      	ldr	r2, [pc, #188]	; (8004af4 <HAL_DMA_IRQHandler+0xd30>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d02c      	beq.n	8004a94 <HAL_DMA_IRQHandler+0xcd0>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a2e      	ldr	r2, [pc, #184]	; (8004af8 <HAL_DMA_IRQHandler+0xd34>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d027      	beq.n	8004a94 <HAL_DMA_IRQHandler+0xcd0>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a2c      	ldr	r2, [pc, #176]	; (8004afc <HAL_DMA_IRQHandler+0xd38>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d022      	beq.n	8004a94 <HAL_DMA_IRQHandler+0xcd0>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a2b      	ldr	r2, [pc, #172]	; (8004b00 <HAL_DMA_IRQHandler+0xd3c>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d01d      	beq.n	8004a94 <HAL_DMA_IRQHandler+0xcd0>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a29      	ldr	r2, [pc, #164]	; (8004b04 <HAL_DMA_IRQHandler+0xd40>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d018      	beq.n	8004a94 <HAL_DMA_IRQHandler+0xcd0>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a28      	ldr	r2, [pc, #160]	; (8004b08 <HAL_DMA_IRQHandler+0xd44>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d013      	beq.n	8004a94 <HAL_DMA_IRQHandler+0xcd0>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a26      	ldr	r2, [pc, #152]	; (8004b0c <HAL_DMA_IRQHandler+0xd48>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d00e      	beq.n	8004a94 <HAL_DMA_IRQHandler+0xcd0>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a25      	ldr	r2, [pc, #148]	; (8004b10 <HAL_DMA_IRQHandler+0xd4c>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d009      	beq.n	8004a94 <HAL_DMA_IRQHandler+0xcd0>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a23      	ldr	r2, [pc, #140]	; (8004b14 <HAL_DMA_IRQHandler+0xd50>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d004      	beq.n	8004a94 <HAL_DMA_IRQHandler+0xcd0>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a22      	ldr	r2, [pc, #136]	; (8004b18 <HAL_DMA_IRQHandler+0xd54>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d108      	bne.n	8004aa6 <HAL_DMA_IRQHandler+0xce2>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 0214 	bic.w	r2, r2, #20
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	e007      	b.n	8004ab6 <HAL_DMA_IRQHandler+0xcf2>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 020a 	bic.w	r2, r2, #10
 8004ab4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f000 80b8 	beq.w	8004c40 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ad8:	e0b2      	b.n	8004c40 <HAL_DMA_IRQHandler+0xe7c>
 8004ada:	bf00      	nop
 8004adc:	40020010 	.word	0x40020010
 8004ae0:	40020028 	.word	0x40020028
 8004ae4:	40020040 	.word	0x40020040
 8004ae8:	40020058 	.word	0x40020058
 8004aec:	40020070 	.word	0x40020070
 8004af0:	40020088 	.word	0x40020088
 8004af4:	400200a0 	.word	0x400200a0
 8004af8:	400200b8 	.word	0x400200b8
 8004afc:	40020410 	.word	0x40020410
 8004b00:	40020428 	.word	0x40020428
 8004b04:	40020440 	.word	0x40020440
 8004b08:	40020458 	.word	0x40020458
 8004b0c:	40020470 	.word	0x40020470
 8004b10:	40020488 	.word	0x40020488
 8004b14:	400204a0 	.word	0x400204a0
 8004b18:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b20:	f003 031f 	and.w	r3, r3, #31
 8004b24:	2208      	movs	r2, #8
 8004b26:	409a      	lsls	r2, r3
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 8088 	beq.w	8004c42 <HAL_DMA_IRQHandler+0xe7e>
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	f003 0308 	and.w	r3, r3, #8
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 8082 	beq.w	8004c42 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a41      	ldr	r2, [pc, #260]	; (8004c48 <HAL_DMA_IRQHandler+0xe84>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d04a      	beq.n	8004bde <HAL_DMA_IRQHandler+0xe1a>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a3f      	ldr	r2, [pc, #252]	; (8004c4c <HAL_DMA_IRQHandler+0xe88>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d045      	beq.n	8004bde <HAL_DMA_IRQHandler+0xe1a>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a3e      	ldr	r2, [pc, #248]	; (8004c50 <HAL_DMA_IRQHandler+0xe8c>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d040      	beq.n	8004bde <HAL_DMA_IRQHandler+0xe1a>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a3c      	ldr	r2, [pc, #240]	; (8004c54 <HAL_DMA_IRQHandler+0xe90>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d03b      	beq.n	8004bde <HAL_DMA_IRQHandler+0xe1a>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a3b      	ldr	r2, [pc, #236]	; (8004c58 <HAL_DMA_IRQHandler+0xe94>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d036      	beq.n	8004bde <HAL_DMA_IRQHandler+0xe1a>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a39      	ldr	r2, [pc, #228]	; (8004c5c <HAL_DMA_IRQHandler+0xe98>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d031      	beq.n	8004bde <HAL_DMA_IRQHandler+0xe1a>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a38      	ldr	r2, [pc, #224]	; (8004c60 <HAL_DMA_IRQHandler+0xe9c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d02c      	beq.n	8004bde <HAL_DMA_IRQHandler+0xe1a>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a36      	ldr	r2, [pc, #216]	; (8004c64 <HAL_DMA_IRQHandler+0xea0>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d027      	beq.n	8004bde <HAL_DMA_IRQHandler+0xe1a>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a35      	ldr	r2, [pc, #212]	; (8004c68 <HAL_DMA_IRQHandler+0xea4>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d022      	beq.n	8004bde <HAL_DMA_IRQHandler+0xe1a>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a33      	ldr	r2, [pc, #204]	; (8004c6c <HAL_DMA_IRQHandler+0xea8>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d01d      	beq.n	8004bde <HAL_DMA_IRQHandler+0xe1a>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a32      	ldr	r2, [pc, #200]	; (8004c70 <HAL_DMA_IRQHandler+0xeac>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d018      	beq.n	8004bde <HAL_DMA_IRQHandler+0xe1a>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a30      	ldr	r2, [pc, #192]	; (8004c74 <HAL_DMA_IRQHandler+0xeb0>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d013      	beq.n	8004bde <HAL_DMA_IRQHandler+0xe1a>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a2f      	ldr	r2, [pc, #188]	; (8004c78 <HAL_DMA_IRQHandler+0xeb4>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d00e      	beq.n	8004bde <HAL_DMA_IRQHandler+0xe1a>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a2d      	ldr	r2, [pc, #180]	; (8004c7c <HAL_DMA_IRQHandler+0xeb8>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d009      	beq.n	8004bde <HAL_DMA_IRQHandler+0xe1a>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a2c      	ldr	r2, [pc, #176]	; (8004c80 <HAL_DMA_IRQHandler+0xebc>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d004      	beq.n	8004bde <HAL_DMA_IRQHandler+0xe1a>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a2a      	ldr	r2, [pc, #168]	; (8004c84 <HAL_DMA_IRQHandler+0xec0>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d108      	bne.n	8004bf0 <HAL_DMA_IRQHandler+0xe2c>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f022 021c 	bic.w	r2, r2, #28
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	e007      	b.n	8004c00 <HAL_DMA_IRQHandler+0xe3c>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f022 020e 	bic.w	r2, r2, #14
 8004bfe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c04:	f003 031f 	and.w	r3, r3, #31
 8004c08:	2201      	movs	r2, #1
 8004c0a:	409a      	lsls	r2, r3
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d009      	beq.n	8004c42 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	4798      	blx	r3
 8004c36:	e004      	b.n	8004c42 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004c38:	bf00      	nop
 8004c3a:	e002      	b.n	8004c42 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c3c:	bf00      	nop
 8004c3e:	e000      	b.n	8004c42 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c40:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004c42:	3728      	adds	r7, #40	; 0x28
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	40020010 	.word	0x40020010
 8004c4c:	40020028 	.word	0x40020028
 8004c50:	40020040 	.word	0x40020040
 8004c54:	40020058 	.word	0x40020058
 8004c58:	40020070 	.word	0x40020070
 8004c5c:	40020088 	.word	0x40020088
 8004c60:	400200a0 	.word	0x400200a0
 8004c64:	400200b8 	.word	0x400200b8
 8004c68:	40020410 	.word	0x40020410
 8004c6c:	40020428 	.word	0x40020428
 8004c70:	40020440 	.word	0x40020440
 8004c74:	40020458 	.word	0x40020458
 8004c78:	40020470 	.word	0x40020470
 8004c7c:	40020488 	.word	0x40020488
 8004c80:	400204a0 	.word	0x400204a0
 8004c84:	400204b8 	.word	0x400204b8

08004c88 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
 8004c94:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c9a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a84      	ldr	r2, [pc, #528]	; (8004eb8 <DMA_SetConfig+0x230>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d072      	beq.n	8004d92 <DMA_SetConfig+0x10a>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a82      	ldr	r2, [pc, #520]	; (8004ebc <DMA_SetConfig+0x234>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d06d      	beq.n	8004d92 <DMA_SetConfig+0x10a>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a81      	ldr	r2, [pc, #516]	; (8004ec0 <DMA_SetConfig+0x238>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d068      	beq.n	8004d92 <DMA_SetConfig+0x10a>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a7f      	ldr	r2, [pc, #508]	; (8004ec4 <DMA_SetConfig+0x23c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d063      	beq.n	8004d92 <DMA_SetConfig+0x10a>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a7e      	ldr	r2, [pc, #504]	; (8004ec8 <DMA_SetConfig+0x240>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d05e      	beq.n	8004d92 <DMA_SetConfig+0x10a>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a7c      	ldr	r2, [pc, #496]	; (8004ecc <DMA_SetConfig+0x244>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d059      	beq.n	8004d92 <DMA_SetConfig+0x10a>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a7b      	ldr	r2, [pc, #492]	; (8004ed0 <DMA_SetConfig+0x248>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d054      	beq.n	8004d92 <DMA_SetConfig+0x10a>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a79      	ldr	r2, [pc, #484]	; (8004ed4 <DMA_SetConfig+0x24c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d04f      	beq.n	8004d92 <DMA_SetConfig+0x10a>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a78      	ldr	r2, [pc, #480]	; (8004ed8 <DMA_SetConfig+0x250>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d04a      	beq.n	8004d92 <DMA_SetConfig+0x10a>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a76      	ldr	r2, [pc, #472]	; (8004edc <DMA_SetConfig+0x254>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d045      	beq.n	8004d92 <DMA_SetConfig+0x10a>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a75      	ldr	r2, [pc, #468]	; (8004ee0 <DMA_SetConfig+0x258>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d040      	beq.n	8004d92 <DMA_SetConfig+0x10a>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a73      	ldr	r2, [pc, #460]	; (8004ee4 <DMA_SetConfig+0x25c>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d03b      	beq.n	8004d92 <DMA_SetConfig+0x10a>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a72      	ldr	r2, [pc, #456]	; (8004ee8 <DMA_SetConfig+0x260>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d036      	beq.n	8004d92 <DMA_SetConfig+0x10a>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a70      	ldr	r2, [pc, #448]	; (8004eec <DMA_SetConfig+0x264>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d031      	beq.n	8004d92 <DMA_SetConfig+0x10a>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a6f      	ldr	r2, [pc, #444]	; (8004ef0 <DMA_SetConfig+0x268>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d02c      	beq.n	8004d92 <DMA_SetConfig+0x10a>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a6d      	ldr	r2, [pc, #436]	; (8004ef4 <DMA_SetConfig+0x26c>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d027      	beq.n	8004d92 <DMA_SetConfig+0x10a>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a6c      	ldr	r2, [pc, #432]	; (8004ef8 <DMA_SetConfig+0x270>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d022      	beq.n	8004d92 <DMA_SetConfig+0x10a>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a6a      	ldr	r2, [pc, #424]	; (8004efc <DMA_SetConfig+0x274>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d01d      	beq.n	8004d92 <DMA_SetConfig+0x10a>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a69      	ldr	r2, [pc, #420]	; (8004f00 <DMA_SetConfig+0x278>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d018      	beq.n	8004d92 <DMA_SetConfig+0x10a>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a67      	ldr	r2, [pc, #412]	; (8004f04 <DMA_SetConfig+0x27c>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d013      	beq.n	8004d92 <DMA_SetConfig+0x10a>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a66      	ldr	r2, [pc, #408]	; (8004f08 <DMA_SetConfig+0x280>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d00e      	beq.n	8004d92 <DMA_SetConfig+0x10a>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a64      	ldr	r2, [pc, #400]	; (8004f0c <DMA_SetConfig+0x284>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d009      	beq.n	8004d92 <DMA_SetConfig+0x10a>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a63      	ldr	r2, [pc, #396]	; (8004f10 <DMA_SetConfig+0x288>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d004      	beq.n	8004d92 <DMA_SetConfig+0x10a>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a61      	ldr	r2, [pc, #388]	; (8004f14 <DMA_SetConfig+0x28c>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d101      	bne.n	8004d96 <DMA_SetConfig+0x10e>
 8004d92:	2301      	movs	r3, #1
 8004d94:	e000      	b.n	8004d98 <DMA_SetConfig+0x110>
 8004d96:	2300      	movs	r3, #0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00d      	beq.n	8004db8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004da4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d004      	beq.n	8004db8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004db6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a3e      	ldr	r2, [pc, #248]	; (8004eb8 <DMA_SetConfig+0x230>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d04a      	beq.n	8004e58 <DMA_SetConfig+0x1d0>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a3d      	ldr	r2, [pc, #244]	; (8004ebc <DMA_SetConfig+0x234>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d045      	beq.n	8004e58 <DMA_SetConfig+0x1d0>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a3b      	ldr	r2, [pc, #236]	; (8004ec0 <DMA_SetConfig+0x238>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d040      	beq.n	8004e58 <DMA_SetConfig+0x1d0>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a3a      	ldr	r2, [pc, #232]	; (8004ec4 <DMA_SetConfig+0x23c>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d03b      	beq.n	8004e58 <DMA_SetConfig+0x1d0>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a38      	ldr	r2, [pc, #224]	; (8004ec8 <DMA_SetConfig+0x240>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d036      	beq.n	8004e58 <DMA_SetConfig+0x1d0>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a37      	ldr	r2, [pc, #220]	; (8004ecc <DMA_SetConfig+0x244>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d031      	beq.n	8004e58 <DMA_SetConfig+0x1d0>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a35      	ldr	r2, [pc, #212]	; (8004ed0 <DMA_SetConfig+0x248>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d02c      	beq.n	8004e58 <DMA_SetConfig+0x1d0>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a34      	ldr	r2, [pc, #208]	; (8004ed4 <DMA_SetConfig+0x24c>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d027      	beq.n	8004e58 <DMA_SetConfig+0x1d0>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a32      	ldr	r2, [pc, #200]	; (8004ed8 <DMA_SetConfig+0x250>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d022      	beq.n	8004e58 <DMA_SetConfig+0x1d0>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a31      	ldr	r2, [pc, #196]	; (8004edc <DMA_SetConfig+0x254>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d01d      	beq.n	8004e58 <DMA_SetConfig+0x1d0>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a2f      	ldr	r2, [pc, #188]	; (8004ee0 <DMA_SetConfig+0x258>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d018      	beq.n	8004e58 <DMA_SetConfig+0x1d0>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a2e      	ldr	r2, [pc, #184]	; (8004ee4 <DMA_SetConfig+0x25c>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d013      	beq.n	8004e58 <DMA_SetConfig+0x1d0>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a2c      	ldr	r2, [pc, #176]	; (8004ee8 <DMA_SetConfig+0x260>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d00e      	beq.n	8004e58 <DMA_SetConfig+0x1d0>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a2b      	ldr	r2, [pc, #172]	; (8004eec <DMA_SetConfig+0x264>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d009      	beq.n	8004e58 <DMA_SetConfig+0x1d0>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a29      	ldr	r2, [pc, #164]	; (8004ef0 <DMA_SetConfig+0x268>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d004      	beq.n	8004e58 <DMA_SetConfig+0x1d0>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a28      	ldr	r2, [pc, #160]	; (8004ef4 <DMA_SetConfig+0x26c>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d101      	bne.n	8004e5c <DMA_SetConfig+0x1d4>
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e000      	b.n	8004e5e <DMA_SetConfig+0x1d6>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d05a      	beq.n	8004f18 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e66:	f003 031f 	and.w	r3, r3, #31
 8004e6a:	223f      	movs	r2, #63	; 0x3f
 8004e6c:	409a      	lsls	r2, r3
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e80:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	2b40      	cmp	r3, #64	; 0x40
 8004e90:	d108      	bne.n	8004ea4 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004ea2:	e0af      	b.n	8005004 <DMA_SetConfig+0x37c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	60da      	str	r2, [r3, #12]
}
 8004eb4:	e0a6      	b.n	8005004 <DMA_SetConfig+0x37c>
 8004eb6:	bf00      	nop
 8004eb8:	40020010 	.word	0x40020010
 8004ebc:	40020028 	.word	0x40020028
 8004ec0:	40020040 	.word	0x40020040
 8004ec4:	40020058 	.word	0x40020058
 8004ec8:	40020070 	.word	0x40020070
 8004ecc:	40020088 	.word	0x40020088
 8004ed0:	400200a0 	.word	0x400200a0
 8004ed4:	400200b8 	.word	0x400200b8
 8004ed8:	40020410 	.word	0x40020410
 8004edc:	40020428 	.word	0x40020428
 8004ee0:	40020440 	.word	0x40020440
 8004ee4:	40020458 	.word	0x40020458
 8004ee8:	40020470 	.word	0x40020470
 8004eec:	40020488 	.word	0x40020488
 8004ef0:	400204a0 	.word	0x400204a0
 8004ef4:	400204b8 	.word	0x400204b8
 8004ef8:	58025408 	.word	0x58025408
 8004efc:	5802541c 	.word	0x5802541c
 8004f00:	58025430 	.word	0x58025430
 8004f04:	58025444 	.word	0x58025444
 8004f08:	58025458 	.word	0x58025458
 8004f0c:	5802546c 	.word	0x5802546c
 8004f10:	58025480 	.word	0x58025480
 8004f14:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a3c      	ldr	r2, [pc, #240]	; (8005010 <DMA_SetConfig+0x388>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d04a      	beq.n	8004fb8 <DMA_SetConfig+0x330>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a3b      	ldr	r2, [pc, #236]	; (8005014 <DMA_SetConfig+0x38c>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d045      	beq.n	8004fb8 <DMA_SetConfig+0x330>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a39      	ldr	r2, [pc, #228]	; (8005018 <DMA_SetConfig+0x390>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d040      	beq.n	8004fb8 <DMA_SetConfig+0x330>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a38      	ldr	r2, [pc, #224]	; (800501c <DMA_SetConfig+0x394>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d03b      	beq.n	8004fb8 <DMA_SetConfig+0x330>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a36      	ldr	r2, [pc, #216]	; (8005020 <DMA_SetConfig+0x398>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d036      	beq.n	8004fb8 <DMA_SetConfig+0x330>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a35      	ldr	r2, [pc, #212]	; (8005024 <DMA_SetConfig+0x39c>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d031      	beq.n	8004fb8 <DMA_SetConfig+0x330>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a33      	ldr	r2, [pc, #204]	; (8005028 <DMA_SetConfig+0x3a0>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d02c      	beq.n	8004fb8 <DMA_SetConfig+0x330>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a32      	ldr	r2, [pc, #200]	; (800502c <DMA_SetConfig+0x3a4>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d027      	beq.n	8004fb8 <DMA_SetConfig+0x330>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a30      	ldr	r2, [pc, #192]	; (8005030 <DMA_SetConfig+0x3a8>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d022      	beq.n	8004fb8 <DMA_SetConfig+0x330>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a2f      	ldr	r2, [pc, #188]	; (8005034 <DMA_SetConfig+0x3ac>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d01d      	beq.n	8004fb8 <DMA_SetConfig+0x330>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a2d      	ldr	r2, [pc, #180]	; (8005038 <DMA_SetConfig+0x3b0>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d018      	beq.n	8004fb8 <DMA_SetConfig+0x330>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a2c      	ldr	r2, [pc, #176]	; (800503c <DMA_SetConfig+0x3b4>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d013      	beq.n	8004fb8 <DMA_SetConfig+0x330>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a2a      	ldr	r2, [pc, #168]	; (8005040 <DMA_SetConfig+0x3b8>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d00e      	beq.n	8004fb8 <DMA_SetConfig+0x330>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a29      	ldr	r2, [pc, #164]	; (8005044 <DMA_SetConfig+0x3bc>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d009      	beq.n	8004fb8 <DMA_SetConfig+0x330>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a27      	ldr	r2, [pc, #156]	; (8005048 <DMA_SetConfig+0x3c0>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d004      	beq.n	8004fb8 <DMA_SetConfig+0x330>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a26      	ldr	r2, [pc, #152]	; (800504c <DMA_SetConfig+0x3c4>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d101      	bne.n	8004fbc <DMA_SetConfig+0x334>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e000      	b.n	8004fbe <DMA_SetConfig+0x336>
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d020      	beq.n	8005004 <DMA_SetConfig+0x37c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc6:	f003 031f 	and.w	r3, r3, #31
 8004fca:	2201      	movs	r2, #1
 8004fcc:	409a      	lsls	r2, r3
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	2b40      	cmp	r3, #64	; 0x40
 8004fe0:	d108      	bne.n	8004ff4 <DMA_SetConfig+0x36c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	60da      	str	r2, [r3, #12]
}
 8004ff2:	e007      	b.n	8005004 <DMA_SetConfig+0x37c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	60da      	str	r2, [r3, #12]
}
 8005004:	bf00      	nop
 8005006:	371c      	adds	r7, #28
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	48022c08 	.word	0x48022c08
 8005014:	48022c1c 	.word	0x48022c1c
 8005018:	48022c30 	.word	0x48022c30
 800501c:	48022c44 	.word	0x48022c44
 8005020:	48022c58 	.word	0x48022c58
 8005024:	48022c6c 	.word	0x48022c6c
 8005028:	48022c80 	.word	0x48022c80
 800502c:	48022c94 	.word	0x48022c94
 8005030:	58025408 	.word	0x58025408
 8005034:	5802541c 	.word	0x5802541c
 8005038:	58025430 	.word	0x58025430
 800503c:	58025444 	.word	0x58025444
 8005040:	58025458 	.word	0x58025458
 8005044:	5802546c 	.word	0x5802546c
 8005048:	58025480 	.word	0x58025480
 800504c:	58025494 	.word	0x58025494

08005050 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a42      	ldr	r2, [pc, #264]	; (8005168 <DMA_CalcBaseAndBitshift+0x118>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d04a      	beq.n	80050f8 <DMA_CalcBaseAndBitshift+0xa8>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a41      	ldr	r2, [pc, #260]	; (800516c <DMA_CalcBaseAndBitshift+0x11c>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d045      	beq.n	80050f8 <DMA_CalcBaseAndBitshift+0xa8>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a3f      	ldr	r2, [pc, #252]	; (8005170 <DMA_CalcBaseAndBitshift+0x120>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d040      	beq.n	80050f8 <DMA_CalcBaseAndBitshift+0xa8>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a3e      	ldr	r2, [pc, #248]	; (8005174 <DMA_CalcBaseAndBitshift+0x124>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d03b      	beq.n	80050f8 <DMA_CalcBaseAndBitshift+0xa8>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a3c      	ldr	r2, [pc, #240]	; (8005178 <DMA_CalcBaseAndBitshift+0x128>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d036      	beq.n	80050f8 <DMA_CalcBaseAndBitshift+0xa8>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a3b      	ldr	r2, [pc, #236]	; (800517c <DMA_CalcBaseAndBitshift+0x12c>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d031      	beq.n	80050f8 <DMA_CalcBaseAndBitshift+0xa8>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a39      	ldr	r2, [pc, #228]	; (8005180 <DMA_CalcBaseAndBitshift+0x130>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d02c      	beq.n	80050f8 <DMA_CalcBaseAndBitshift+0xa8>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a38      	ldr	r2, [pc, #224]	; (8005184 <DMA_CalcBaseAndBitshift+0x134>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d027      	beq.n	80050f8 <DMA_CalcBaseAndBitshift+0xa8>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a36      	ldr	r2, [pc, #216]	; (8005188 <DMA_CalcBaseAndBitshift+0x138>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d022      	beq.n	80050f8 <DMA_CalcBaseAndBitshift+0xa8>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a35      	ldr	r2, [pc, #212]	; (800518c <DMA_CalcBaseAndBitshift+0x13c>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d01d      	beq.n	80050f8 <DMA_CalcBaseAndBitshift+0xa8>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a33      	ldr	r2, [pc, #204]	; (8005190 <DMA_CalcBaseAndBitshift+0x140>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d018      	beq.n	80050f8 <DMA_CalcBaseAndBitshift+0xa8>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a32      	ldr	r2, [pc, #200]	; (8005194 <DMA_CalcBaseAndBitshift+0x144>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d013      	beq.n	80050f8 <DMA_CalcBaseAndBitshift+0xa8>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a30      	ldr	r2, [pc, #192]	; (8005198 <DMA_CalcBaseAndBitshift+0x148>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d00e      	beq.n	80050f8 <DMA_CalcBaseAndBitshift+0xa8>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a2f      	ldr	r2, [pc, #188]	; (800519c <DMA_CalcBaseAndBitshift+0x14c>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d009      	beq.n	80050f8 <DMA_CalcBaseAndBitshift+0xa8>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a2d      	ldr	r2, [pc, #180]	; (80051a0 <DMA_CalcBaseAndBitshift+0x150>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d004      	beq.n	80050f8 <DMA_CalcBaseAndBitshift+0xa8>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a2c      	ldr	r2, [pc, #176]	; (80051a4 <DMA_CalcBaseAndBitshift+0x154>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d101      	bne.n	80050fc <DMA_CalcBaseAndBitshift+0xac>
 80050f8:	2301      	movs	r3, #1
 80050fa:	e000      	b.n	80050fe <DMA_CalcBaseAndBitshift+0xae>
 80050fc:	2300      	movs	r3, #0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d024      	beq.n	800514c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	b2db      	uxtb	r3, r3
 8005108:	3b10      	subs	r3, #16
 800510a:	4a27      	ldr	r2, [pc, #156]	; (80051a8 <DMA_CalcBaseAndBitshift+0x158>)
 800510c:	fba2 2303 	umull	r2, r3, r2, r3
 8005110:	091b      	lsrs	r3, r3, #4
 8005112:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f003 0307 	and.w	r3, r3, #7
 800511a:	4a24      	ldr	r2, [pc, #144]	; (80051ac <DMA_CalcBaseAndBitshift+0x15c>)
 800511c:	5cd3      	ldrb	r3, [r2, r3]
 800511e:	461a      	mov	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2b03      	cmp	r3, #3
 8005128:	d908      	bls.n	800513c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	461a      	mov	r2, r3
 8005130:	4b1f      	ldr	r3, [pc, #124]	; (80051b0 <DMA_CalcBaseAndBitshift+0x160>)
 8005132:	4013      	ands	r3, r2
 8005134:	1d1a      	adds	r2, r3, #4
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	659a      	str	r2, [r3, #88]	; 0x58
 800513a:	e00d      	b.n	8005158 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	461a      	mov	r2, r3
 8005142:	4b1b      	ldr	r3, [pc, #108]	; (80051b0 <DMA_CalcBaseAndBitshift+0x160>)
 8005144:	4013      	ands	r3, r2
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	6593      	str	r3, [r2, #88]	; 0x58
 800514a:	e005      	b.n	8005158 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800515c:	4618      	mov	r0, r3
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr
 8005168:	40020010 	.word	0x40020010
 800516c:	40020028 	.word	0x40020028
 8005170:	40020040 	.word	0x40020040
 8005174:	40020058 	.word	0x40020058
 8005178:	40020070 	.word	0x40020070
 800517c:	40020088 	.word	0x40020088
 8005180:	400200a0 	.word	0x400200a0
 8005184:	400200b8 	.word	0x400200b8
 8005188:	40020410 	.word	0x40020410
 800518c:	40020428 	.word	0x40020428
 8005190:	40020440 	.word	0x40020440
 8005194:	40020458 	.word	0x40020458
 8005198:	40020470 	.word	0x40020470
 800519c:	40020488 	.word	0x40020488
 80051a0:	400204a0 	.word	0x400204a0
 80051a4:	400204b8 	.word	0x400204b8
 80051a8:	aaaaaaab 	.word	0xaaaaaaab
 80051ac:	0800b324 	.word	0x0800b324
 80051b0:	fffffc00 	.word	0xfffffc00

080051b4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051bc:	2300      	movs	r3, #0
 80051be:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d120      	bne.n	800520a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051cc:	2b03      	cmp	r3, #3
 80051ce:	d858      	bhi.n	8005282 <DMA_CheckFifoParam+0xce>
 80051d0:	a201      	add	r2, pc, #4	; (adr r2, 80051d8 <DMA_CheckFifoParam+0x24>)
 80051d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d6:	bf00      	nop
 80051d8:	080051e9 	.word	0x080051e9
 80051dc:	080051fb 	.word	0x080051fb
 80051e0:	080051e9 	.word	0x080051e9
 80051e4:	08005283 	.word	0x08005283
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d048      	beq.n	8005286 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80051f8:	e045      	b.n	8005286 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005202:	d142      	bne.n	800528a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005208:	e03f      	b.n	800528a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005212:	d123      	bne.n	800525c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005218:	2b03      	cmp	r3, #3
 800521a:	d838      	bhi.n	800528e <DMA_CheckFifoParam+0xda>
 800521c:	a201      	add	r2, pc, #4	; (adr r2, 8005224 <DMA_CheckFifoParam+0x70>)
 800521e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005222:	bf00      	nop
 8005224:	08005235 	.word	0x08005235
 8005228:	0800523b 	.word	0x0800523b
 800522c:	08005235 	.word	0x08005235
 8005230:	0800524d 	.word	0x0800524d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	73fb      	strb	r3, [r7, #15]
        break;
 8005238:	e030      	b.n	800529c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d025      	beq.n	8005292 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800524a:	e022      	b.n	8005292 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005250:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005254:	d11f      	bne.n	8005296 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800525a:	e01c      	b.n	8005296 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005260:	2b02      	cmp	r3, #2
 8005262:	d902      	bls.n	800526a <DMA_CheckFifoParam+0xb6>
 8005264:	2b03      	cmp	r3, #3
 8005266:	d003      	beq.n	8005270 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005268:	e018      	b.n	800529c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	73fb      	strb	r3, [r7, #15]
        break;
 800526e:	e015      	b.n	800529c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005274:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00e      	beq.n	800529a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	73fb      	strb	r3, [r7, #15]
    break;
 8005280:	e00b      	b.n	800529a <DMA_CheckFifoParam+0xe6>
        break;
 8005282:	bf00      	nop
 8005284:	e00a      	b.n	800529c <DMA_CheckFifoParam+0xe8>
        break;
 8005286:	bf00      	nop
 8005288:	e008      	b.n	800529c <DMA_CheckFifoParam+0xe8>
        break;
 800528a:	bf00      	nop
 800528c:	e006      	b.n	800529c <DMA_CheckFifoParam+0xe8>
        break;
 800528e:	bf00      	nop
 8005290:	e004      	b.n	800529c <DMA_CheckFifoParam+0xe8>
        break;
 8005292:	bf00      	nop
 8005294:	e002      	b.n	800529c <DMA_CheckFifoParam+0xe8>
        break;
 8005296:	bf00      	nop
 8005298:	e000      	b.n	800529c <DMA_CheckFifoParam+0xe8>
    break;
 800529a:	bf00      	nop
    }
  }

  return status;
 800529c:	7bfb      	ldrb	r3, [r7, #15]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop

080052ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a38      	ldr	r2, [pc, #224]	; (80053a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d022      	beq.n	800530a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a36      	ldr	r2, [pc, #216]	; (80053a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d01d      	beq.n	800530a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a35      	ldr	r2, [pc, #212]	; (80053a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d018      	beq.n	800530a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a33      	ldr	r2, [pc, #204]	; (80053ac <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d013      	beq.n	800530a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a32      	ldr	r2, [pc, #200]	; (80053b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d00e      	beq.n	800530a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a30      	ldr	r2, [pc, #192]	; (80053b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d009      	beq.n	800530a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a2f      	ldr	r2, [pc, #188]	; (80053b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d004      	beq.n	800530a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a2d      	ldr	r2, [pc, #180]	; (80053bc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d101      	bne.n	800530e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800530a:	2301      	movs	r3, #1
 800530c:	e000      	b.n	8005310 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800530e:	2300      	movs	r3, #0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d01a      	beq.n	800534a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	b2db      	uxtb	r3, r3
 800531a:	3b08      	subs	r3, #8
 800531c:	4a28      	ldr	r2, [pc, #160]	; (80053c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800531e:	fba2 2303 	umull	r2, r3, r2, r3
 8005322:	091b      	lsrs	r3, r3, #4
 8005324:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	4b26      	ldr	r3, [pc, #152]	; (80053c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800532a:	4413      	add	r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	461a      	mov	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a24      	ldr	r2, [pc, #144]	; (80053c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005338:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f003 031f 	and.w	r3, r3, #31
 8005340:	2201      	movs	r2, #1
 8005342:	409a      	lsls	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005348:	e024      	b.n	8005394 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	b2db      	uxtb	r3, r3
 8005350:	3b10      	subs	r3, #16
 8005352:	4a1e      	ldr	r2, [pc, #120]	; (80053cc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005354:	fba2 2303 	umull	r2, r3, r2, r3
 8005358:	091b      	lsrs	r3, r3, #4
 800535a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	4a1c      	ldr	r2, [pc, #112]	; (80053d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d806      	bhi.n	8005372 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	4a1b      	ldr	r2, [pc, #108]	; (80053d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d902      	bls.n	8005372 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	3308      	adds	r3, #8
 8005370:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	4b18      	ldr	r3, [pc, #96]	; (80053d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005376:	4413      	add	r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	461a      	mov	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a16      	ldr	r2, [pc, #88]	; (80053dc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005384:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f003 031f 	and.w	r3, r3, #31
 800538c:	2201      	movs	r2, #1
 800538e:	409a      	lsls	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005394:	bf00      	nop
 8005396:	3714      	adds	r7, #20
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr
 80053a0:	58025408 	.word	0x58025408
 80053a4:	5802541c 	.word	0x5802541c
 80053a8:	58025430 	.word	0x58025430
 80053ac:	58025444 	.word	0x58025444
 80053b0:	58025458 	.word	0x58025458
 80053b4:	5802546c 	.word	0x5802546c
 80053b8:	58025480 	.word	0x58025480
 80053bc:	58025494 	.word	0x58025494
 80053c0:	cccccccd 	.word	0xcccccccd
 80053c4:	16009600 	.word	0x16009600
 80053c8:	58025880 	.word	0x58025880
 80053cc:	aaaaaaab 	.word	0xaaaaaaab
 80053d0:	400204b8 	.word	0x400204b8
 80053d4:	4002040f 	.word	0x4002040f
 80053d8:	10008200 	.word	0x10008200
 80053dc:	40020880 	.word	0x40020880

080053e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d04a      	beq.n	800548c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2b08      	cmp	r3, #8
 80053fa:	d847      	bhi.n	800548c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a25      	ldr	r2, [pc, #148]	; (8005498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d022      	beq.n	800544c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a24      	ldr	r2, [pc, #144]	; (800549c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d01d      	beq.n	800544c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a22      	ldr	r2, [pc, #136]	; (80054a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d018      	beq.n	800544c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a21      	ldr	r2, [pc, #132]	; (80054a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d013      	beq.n	800544c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a1f      	ldr	r2, [pc, #124]	; (80054a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d00e      	beq.n	800544c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a1e      	ldr	r2, [pc, #120]	; (80054ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d009      	beq.n	800544c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a1c      	ldr	r2, [pc, #112]	; (80054b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d004      	beq.n	800544c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a1b      	ldr	r2, [pc, #108]	; (80054b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d101      	bne.n	8005450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800544c:	2301      	movs	r3, #1
 800544e:	e000      	b.n	8005452 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005450:	2300      	movs	r3, #0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00a      	beq.n	800546c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	4b17      	ldr	r3, [pc, #92]	; (80054b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800545a:	4413      	add	r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	461a      	mov	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a15      	ldr	r2, [pc, #84]	; (80054bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005468:	671a      	str	r2, [r3, #112]	; 0x70
 800546a:	e009      	b.n	8005480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	4b14      	ldr	r3, [pc, #80]	; (80054c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005470:	4413      	add	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	461a      	mov	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a11      	ldr	r2, [pc, #68]	; (80054c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800547e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	3b01      	subs	r3, #1
 8005484:	2201      	movs	r2, #1
 8005486:	409a      	lsls	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800548c:	bf00      	nop
 800548e:	3714      	adds	r7, #20
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr
 8005498:	58025408 	.word	0x58025408
 800549c:	5802541c 	.word	0x5802541c
 80054a0:	58025430 	.word	0x58025430
 80054a4:	58025444 	.word	0x58025444
 80054a8:	58025458 	.word	0x58025458
 80054ac:	5802546c 	.word	0x5802546c
 80054b0:	58025480 	.word	0x58025480
 80054b4:	58025494 	.word	0x58025494
 80054b8:	1600963f 	.word	0x1600963f
 80054bc:	58025940 	.word	0x58025940
 80054c0:	1000823f 	.word	0x1000823f
 80054c4:	40020940 	.word	0x40020940

080054c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b089      	sub	sp, #36	; 0x24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80054d2:	2300      	movs	r3, #0
 80054d4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80054d6:	4b89      	ldr	r3, [pc, #548]	; (80056fc <HAL_GPIO_Init+0x234>)
 80054d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80054da:	e194      	b.n	8005806 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	2101      	movs	r1, #1
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	fa01 f303 	lsl.w	r3, r1, r3
 80054e8:	4013      	ands	r3, r2
 80054ea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f000 8186 	beq.w	8005800 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d00b      	beq.n	8005514 <HAL_GPIO_Init+0x4c>
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	2b02      	cmp	r3, #2
 8005502:	d007      	beq.n	8005514 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005508:	2b11      	cmp	r3, #17
 800550a:	d003      	beq.n	8005514 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	2b12      	cmp	r3, #18
 8005512:	d130      	bne.n	8005576 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	005b      	lsls	r3, r3, #1
 800551e:	2203      	movs	r2, #3
 8005520:	fa02 f303 	lsl.w	r3, r2, r3
 8005524:	43db      	mvns	r3, r3
 8005526:	69ba      	ldr	r2, [r7, #24]
 8005528:	4013      	ands	r3, r2
 800552a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	68da      	ldr	r2, [r3, #12]
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	fa02 f303 	lsl.w	r3, r2, r3
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	4313      	orrs	r3, r2
 800553c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800554a:	2201      	movs	r2, #1
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	fa02 f303 	lsl.w	r3, r2, r3
 8005552:	43db      	mvns	r3, r3
 8005554:	69ba      	ldr	r2, [r7, #24]
 8005556:	4013      	ands	r3, r2
 8005558:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	091b      	lsrs	r3, r3, #4
 8005560:	f003 0201 	and.w	r2, r3, #1
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	fa02 f303 	lsl.w	r3, r2, r3
 800556a:	69ba      	ldr	r2, [r7, #24]
 800556c:	4313      	orrs	r3, r2
 800556e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	69ba      	ldr	r2, [r7, #24]
 8005574:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	2203      	movs	r2, #3
 8005582:	fa02 f303 	lsl.w	r3, r2, r3
 8005586:	43db      	mvns	r3, r3
 8005588:	69ba      	ldr	r2, [r7, #24]
 800558a:	4013      	ands	r3, r2
 800558c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	689a      	ldr	r2, [r3, #8]
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	005b      	lsls	r3, r3, #1
 8005596:	fa02 f303 	lsl.w	r3, r2, r3
 800559a:	69ba      	ldr	r2, [r7, #24]
 800559c:	4313      	orrs	r3, r2
 800559e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d003      	beq.n	80055b6 <HAL_GPIO_Init+0xee>
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	2b12      	cmp	r3, #18
 80055b4:	d123      	bne.n	80055fe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	08da      	lsrs	r2, r3, #3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	3208      	adds	r2, #8
 80055be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	f003 0307 	and.w	r3, r3, #7
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	220f      	movs	r2, #15
 80055ce:	fa02 f303 	lsl.w	r3, r2, r3
 80055d2:	43db      	mvns	r3, r3
 80055d4:	69ba      	ldr	r2, [r7, #24]
 80055d6:	4013      	ands	r3, r2
 80055d8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	691a      	ldr	r2, [r3, #16]
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	f003 0307 	and.w	r3, r3, #7
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	08da      	lsrs	r2, r3, #3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	3208      	adds	r2, #8
 80055f8:	69b9      	ldr	r1, [r7, #24]
 80055fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	005b      	lsls	r3, r3, #1
 8005608:	2203      	movs	r2, #3
 800560a:	fa02 f303 	lsl.w	r3, r2, r3
 800560e:	43db      	mvns	r3, r3
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	4013      	ands	r3, r2
 8005614:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f003 0203 	and.w	r2, r3, #3
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	005b      	lsls	r3, r3, #1
 8005622:	fa02 f303 	lsl.w	r3, r2, r3
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	4313      	orrs	r3, r2
 800562a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800563a:	2b00      	cmp	r3, #0
 800563c:	f000 80e0 	beq.w	8005800 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005640:	4b2f      	ldr	r3, [pc, #188]	; (8005700 <HAL_GPIO_Init+0x238>)
 8005642:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005646:	4a2e      	ldr	r2, [pc, #184]	; (8005700 <HAL_GPIO_Init+0x238>)
 8005648:	f043 0302 	orr.w	r3, r3, #2
 800564c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8005650:	4b2b      	ldr	r3, [pc, #172]	; (8005700 <HAL_GPIO_Init+0x238>)
 8005652:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005656:	f003 0302 	and.w	r3, r3, #2
 800565a:	60fb      	str	r3, [r7, #12]
 800565c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800565e:	4a29      	ldr	r2, [pc, #164]	; (8005704 <HAL_GPIO_Init+0x23c>)
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	089b      	lsrs	r3, r3, #2
 8005664:	3302      	adds	r3, #2
 8005666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800566a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	f003 0303 	and.w	r3, r3, #3
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	220f      	movs	r2, #15
 8005676:	fa02 f303 	lsl.w	r3, r2, r3
 800567a:	43db      	mvns	r3, r3
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	4013      	ands	r3, r2
 8005680:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a20      	ldr	r2, [pc, #128]	; (8005708 <HAL_GPIO_Init+0x240>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d052      	beq.n	8005730 <HAL_GPIO_Init+0x268>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a1f      	ldr	r2, [pc, #124]	; (800570c <HAL_GPIO_Init+0x244>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d031      	beq.n	80056f6 <HAL_GPIO_Init+0x22e>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a1e      	ldr	r2, [pc, #120]	; (8005710 <HAL_GPIO_Init+0x248>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d02b      	beq.n	80056f2 <HAL_GPIO_Init+0x22a>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a1d      	ldr	r2, [pc, #116]	; (8005714 <HAL_GPIO_Init+0x24c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d025      	beq.n	80056ee <HAL_GPIO_Init+0x226>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a1c      	ldr	r2, [pc, #112]	; (8005718 <HAL_GPIO_Init+0x250>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d01f      	beq.n	80056ea <HAL_GPIO_Init+0x222>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a1b      	ldr	r2, [pc, #108]	; (800571c <HAL_GPIO_Init+0x254>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d019      	beq.n	80056e6 <HAL_GPIO_Init+0x21e>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a1a      	ldr	r2, [pc, #104]	; (8005720 <HAL_GPIO_Init+0x258>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d013      	beq.n	80056e2 <HAL_GPIO_Init+0x21a>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a19      	ldr	r2, [pc, #100]	; (8005724 <HAL_GPIO_Init+0x25c>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d00d      	beq.n	80056de <HAL_GPIO_Init+0x216>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a18      	ldr	r2, [pc, #96]	; (8005728 <HAL_GPIO_Init+0x260>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d007      	beq.n	80056da <HAL_GPIO_Init+0x212>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a17      	ldr	r2, [pc, #92]	; (800572c <HAL_GPIO_Init+0x264>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d101      	bne.n	80056d6 <HAL_GPIO_Init+0x20e>
 80056d2:	2309      	movs	r3, #9
 80056d4:	e02d      	b.n	8005732 <HAL_GPIO_Init+0x26a>
 80056d6:	230a      	movs	r3, #10
 80056d8:	e02b      	b.n	8005732 <HAL_GPIO_Init+0x26a>
 80056da:	2308      	movs	r3, #8
 80056dc:	e029      	b.n	8005732 <HAL_GPIO_Init+0x26a>
 80056de:	2307      	movs	r3, #7
 80056e0:	e027      	b.n	8005732 <HAL_GPIO_Init+0x26a>
 80056e2:	2306      	movs	r3, #6
 80056e4:	e025      	b.n	8005732 <HAL_GPIO_Init+0x26a>
 80056e6:	2305      	movs	r3, #5
 80056e8:	e023      	b.n	8005732 <HAL_GPIO_Init+0x26a>
 80056ea:	2304      	movs	r3, #4
 80056ec:	e021      	b.n	8005732 <HAL_GPIO_Init+0x26a>
 80056ee:	2303      	movs	r3, #3
 80056f0:	e01f      	b.n	8005732 <HAL_GPIO_Init+0x26a>
 80056f2:	2302      	movs	r3, #2
 80056f4:	e01d      	b.n	8005732 <HAL_GPIO_Init+0x26a>
 80056f6:	2301      	movs	r3, #1
 80056f8:	e01b      	b.n	8005732 <HAL_GPIO_Init+0x26a>
 80056fa:	bf00      	nop
 80056fc:	58000080 	.word	0x58000080
 8005700:	58024400 	.word	0x58024400
 8005704:	58000400 	.word	0x58000400
 8005708:	58020000 	.word	0x58020000
 800570c:	58020400 	.word	0x58020400
 8005710:	58020800 	.word	0x58020800
 8005714:	58020c00 	.word	0x58020c00
 8005718:	58021000 	.word	0x58021000
 800571c:	58021400 	.word	0x58021400
 8005720:	58021800 	.word	0x58021800
 8005724:	58021c00 	.word	0x58021c00
 8005728:	58022000 	.word	0x58022000
 800572c:	58022400 	.word	0x58022400
 8005730:	2300      	movs	r3, #0
 8005732:	69fa      	ldr	r2, [r7, #28]
 8005734:	f002 0203 	and.w	r2, r2, #3
 8005738:	0092      	lsls	r2, r2, #2
 800573a:	4093      	lsls	r3, r2
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	4313      	orrs	r3, r2
 8005740:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005742:	4938      	ldr	r1, [pc, #224]	; (8005824 <HAL_GPIO_Init+0x35c>)
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	089b      	lsrs	r3, r3, #2
 8005748:	3302      	adds	r3, #2
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	43db      	mvns	r3, r3
 800575a:	69ba      	ldr	r2, [r7, #24]
 800575c:	4013      	ands	r3, r2
 800575e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d003      	beq.n	8005774 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	4313      	orrs	r3, r2
 8005772:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	43db      	mvns	r3, r3
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	4013      	ands	r3, r2
 8005788:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d003      	beq.n	800579e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	4313      	orrs	r3, r2
 800579c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80057a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	43db      	mvns	r3, r3
 80057b0:	69ba      	ldr	r2, [r7, #24]
 80057b2:	4013      	ands	r3, r2
 80057b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d003      	beq.n	80057ca <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80057c2:	69ba      	ldr	r2, [r7, #24]
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80057ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80057d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	43db      	mvns	r3, r3
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	4013      	ands	r3, r2
 80057e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d003      	beq.n	80057f8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80057f0:	69ba      	ldr	r2, [r7, #24]
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80057f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	3301      	adds	r3, #1
 8005804:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	fa22 f303 	lsr.w	r3, r2, r3
 8005810:	2b00      	cmp	r3, #0
 8005812:	f47f ae63 	bne.w	80054dc <HAL_GPIO_Init+0x14>
  }
}
 8005816:	bf00      	nop
 8005818:	3724      	adds	r7, #36	; 0x24
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	58000400 	.word	0x58000400

08005828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	460b      	mov	r3, r1
 8005832:	807b      	strh	r3, [r7, #2]
 8005834:	4613      	mov	r3, r2
 8005836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005838:	787b      	ldrb	r3, [r7, #1]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800583e:	887a      	ldrh	r2, [r7, #2]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005844:	e003      	b.n	800584e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005846:	887b      	ldrh	r3, [r7, #2]
 8005848:	041a      	lsls	r2, r3, #16
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	619a      	str	r2, [r3, #24]
}
 800584e:	bf00      	nop
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800585a:	b480      	push	{r7}
 800585c:	b083      	sub	sp, #12
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
 8005862:	460b      	mov	r3, r1
 8005864:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	695a      	ldr	r2, [r3, #20]
 800586a:	887b      	ldrh	r3, [r7, #2]
 800586c:	401a      	ands	r2, r3
 800586e:	887b      	ldrh	r3, [r7, #2]
 8005870:	429a      	cmp	r2, r3
 8005872:	d104      	bne.n	800587e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005874:	887b      	ldrh	r3, [r7, #2]
 8005876:	041a      	lsls	r2, r3, #16
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800587c:	e002      	b.n	8005884 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800587e:	887a      	ldrh	r2, [r7, #2]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	619a      	str	r2, [r3, #24]
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005898:	4b29      	ldr	r3, [pc, #164]	; (8005940 <HAL_PWREx_ConfigSupply+0xb0>)
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f003 0307 	and.w	r3, r3, #7
 80058a0:	2b06      	cmp	r3, #6
 80058a2:	d00a      	beq.n	80058ba <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80058a4:	4b26      	ldr	r3, [pc, #152]	; (8005940 <HAL_PWREx_ConfigSupply+0xb0>)
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d001      	beq.n	80058b6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e040      	b.n	8005938 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	e03e      	b.n	8005938 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80058ba:	4b21      	ldr	r3, [pc, #132]	; (8005940 <HAL_PWREx_ConfigSupply+0xb0>)
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80058c2:	491f      	ldr	r1, [pc, #124]	; (8005940 <HAL_PWREx_ConfigSupply+0xb0>)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80058ca:	f7fc f92d 	bl	8001b28 <HAL_GetTick>
 80058ce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80058d0:	e009      	b.n	80058e6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80058d2:	f7fc f929 	bl	8001b28 <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058e0:	d901      	bls.n	80058e6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e028      	b.n	8005938 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80058e6:	4b16      	ldr	r3, [pc, #88]	; (8005940 <HAL_PWREx_ConfigSupply+0xb0>)
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058f2:	d1ee      	bne.n	80058d2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b1e      	cmp	r3, #30
 80058f8:	d008      	beq.n	800590c <HAL_PWREx_ConfigSupply+0x7c>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2b2e      	cmp	r3, #46	; 0x2e
 80058fe:	d005      	beq.n	800590c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2b1d      	cmp	r3, #29
 8005904:	d002      	beq.n	800590c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b2d      	cmp	r3, #45	; 0x2d
 800590a:	d114      	bne.n	8005936 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800590c:	f7fc f90c 	bl	8001b28 <HAL_GetTick>
 8005910:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005912:	e009      	b.n	8005928 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005914:	f7fc f908 	bl	8001b28 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005922:	d901      	bls.n	8005928 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e007      	b.n	8005938 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005928:	4b05      	ldr	r3, [pc, #20]	; (8005940 <HAL_PWREx_ConfigSupply+0xb0>)
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005934:	d1ee      	bne.n	8005914 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	58024800 	.word	0x58024800

08005944 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b08c      	sub	sp, #48	; 0x30
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d101      	bne.n	8005956 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e3d7      	b.n	8006106 <HAL_RCC_OscConfig+0x7c2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	2b00      	cmp	r3, #0
 8005960:	f000 80b3 	beq.w	8005aca <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005964:	4b90      	ldr	r3, [pc, #576]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800596c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800596e:	4b8e      	ldr	r3, [pc, #568]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 8005970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005972:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005976:	2b10      	cmp	r3, #16
 8005978:	d007      	beq.n	800598a <HAL_RCC_OscConfig+0x46>
 800597a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800597c:	2b18      	cmp	r3, #24
 800597e:	d112      	bne.n	80059a6 <HAL_RCC_OscConfig+0x62>
 8005980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005982:	f003 0303 	and.w	r3, r3, #3
 8005986:	2b02      	cmp	r3, #2
 8005988:	d10d      	bne.n	80059a6 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800598a:	4b87      	ldr	r3, [pc, #540]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005992:	2b00      	cmp	r3, #0
 8005994:	f000 8098 	beq.w	8005ac8 <HAL_RCC_OscConfig+0x184>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	2b00      	cmp	r3, #0
 800599e:	f040 8093 	bne.w	8005ac8 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e3af      	b.n	8006106 <HAL_RCC_OscConfig+0x7c2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059ae:	d106      	bne.n	80059be <HAL_RCC_OscConfig+0x7a>
 80059b0:	4b7d      	ldr	r3, [pc, #500]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a7c      	ldr	r2, [pc, #496]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 80059b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059ba:	6013      	str	r3, [r2, #0]
 80059bc:	e058      	b.n	8005a70 <HAL_RCC_OscConfig+0x12c>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d112      	bne.n	80059ec <HAL_RCC_OscConfig+0xa8>
 80059c6:	4b78      	ldr	r3, [pc, #480]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a77      	ldr	r2, [pc, #476]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 80059cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059d0:	6013      	str	r3, [r2, #0]
 80059d2:	4b75      	ldr	r3, [pc, #468]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a74      	ldr	r2, [pc, #464]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 80059d8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80059dc:	6013      	str	r3, [r2, #0]
 80059de:	4b72      	ldr	r3, [pc, #456]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a71      	ldr	r2, [pc, #452]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 80059e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059e8:	6013      	str	r3, [r2, #0]
 80059ea:	e041      	b.n	8005a70 <HAL_RCC_OscConfig+0x12c>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059f4:	d112      	bne.n	8005a1c <HAL_RCC_OscConfig+0xd8>
 80059f6:	4b6c      	ldr	r3, [pc, #432]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a6b      	ldr	r2, [pc, #428]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 80059fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a00:	6013      	str	r3, [r2, #0]
 8005a02:	4b69      	ldr	r3, [pc, #420]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a68      	ldr	r2, [pc, #416]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 8005a08:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005a0c:	6013      	str	r3, [r2, #0]
 8005a0e:	4b66      	ldr	r3, [pc, #408]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a65      	ldr	r2, [pc, #404]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 8005a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a18:	6013      	str	r3, [r2, #0]
 8005a1a:	e029      	b.n	8005a70 <HAL_RCC_OscConfig+0x12c>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8005a24:	d112      	bne.n	8005a4c <HAL_RCC_OscConfig+0x108>
 8005a26:	4b60      	ldr	r3, [pc, #384]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a5f      	ldr	r2, [pc, #380]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 8005a2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a30:	6013      	str	r3, [r2, #0]
 8005a32:	4b5d      	ldr	r3, [pc, #372]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a5c      	ldr	r2, [pc, #368]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 8005a38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a3c:	6013      	str	r3, [r2, #0]
 8005a3e:	4b5a      	ldr	r3, [pc, #360]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a59      	ldr	r2, [pc, #356]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 8005a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a48:	6013      	str	r3, [r2, #0]
 8005a4a:	e011      	b.n	8005a70 <HAL_RCC_OscConfig+0x12c>
 8005a4c:	4b56      	ldr	r3, [pc, #344]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a55      	ldr	r2, [pc, #340]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 8005a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a56:	6013      	str	r3, [r2, #0]
 8005a58:	4b53      	ldr	r3, [pc, #332]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a52      	ldr	r2, [pc, #328]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 8005a5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a62:	6013      	str	r3, [r2, #0]
 8005a64:	4b50      	ldr	r3, [pc, #320]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a4f      	ldr	r2, [pc, #316]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 8005a6a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005a6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d013      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a78:	f7fc f856 	bl	8001b28 <HAL_GetTick>
 8005a7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a7e:	e008      	b.n	8005a92 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a80:	f7fc f852 	bl	8001b28 <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	2b64      	cmp	r3, #100	; 0x64
 8005a8c:	d901      	bls.n	8005a92 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e339      	b.n	8006106 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a92:	4b45      	ldr	r3, [pc, #276]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d0f0      	beq.n	8005a80 <HAL_RCC_OscConfig+0x13c>
 8005a9e:	e014      	b.n	8005aca <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa0:	f7fc f842 	bl	8001b28 <HAL_GetTick>
 8005aa4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005aa6:	e008      	b.n	8005aba <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005aa8:	f7fc f83e 	bl	8001b28 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b64      	cmp	r3, #100	; 0x64
 8005ab4:	d901      	bls.n	8005aba <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e325      	b.n	8006106 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005aba:	4b3b      	ldr	r3, [pc, #236]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1f0      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x164>
 8005ac6:	e000      	b.n	8005aca <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d070      	beq.n	8005bb8 <HAL_RCC_OscConfig+0x274>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ad6:	4b34      	ldr	r3, [pc, #208]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ade:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ae0:	4b31      	ldr	r3, [pc, #196]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 8005ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005ae6:	6a3b      	ldr	r3, [r7, #32]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d007      	beq.n	8005afc <HAL_RCC_OscConfig+0x1b8>
 8005aec:	6a3b      	ldr	r3, [r7, #32]
 8005aee:	2b18      	cmp	r3, #24
 8005af0:	d11b      	bne.n	8005b2a <HAL_RCC_OscConfig+0x1e6>
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	f003 0303 	and.w	r3, r3, #3
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d116      	bne.n	8005b2a <HAL_RCC_OscConfig+0x1e6>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005afc:	4b2a      	ldr	r3, [pc, #168]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0304 	and.w	r3, r3, #4
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d005      	beq.n	8005b14 <HAL_RCC_OscConfig+0x1d0>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d101      	bne.n	8005b14 <HAL_RCC_OscConfig+0x1d0>
      {
        return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e2f8      	b.n	8006106 <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b14:	4b24      	ldr	r3, [pc, #144]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	061b      	lsls	r3, r3, #24
 8005b22:	4921      	ldr	r1, [pc, #132]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b28:	e046      	b.n	8005bb8 <HAL_RCC_OscConfig+0x274>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d026      	beq.n	8005b80 <HAL_RCC_OscConfig+0x23c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005b32:	4b1d      	ldr	r3, [pc, #116]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f023 0219 	bic.w	r2, r3, #25
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	491a      	ldr	r1, [pc, #104]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b44:	f7fb fff0 	bl	8001b28 <HAL_GetTick>
 8005b48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b4a:	e008      	b.n	8005b5e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b4c:	f7fb ffec 	bl	8001b28 <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d901      	bls.n	8005b5e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e2d3      	b.n	8006106 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b5e:	4b12      	ldr	r3, [pc, #72]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0304 	and.w	r3, r3, #4
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d0f0      	beq.n	8005b4c <HAL_RCC_OscConfig+0x208>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b6a:	4b0f      	ldr	r3, [pc, #60]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	061b      	lsls	r3, r3, #24
 8005b78:	490b      	ldr	r1, [pc, #44]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	604b      	str	r3, [r1, #4]
 8005b7e:	e01b      	b.n	8005bb8 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b80:	4b09      	ldr	r3, [pc, #36]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a08      	ldr	r2, [pc, #32]	; (8005ba8 <HAL_RCC_OscConfig+0x264>)
 8005b86:	f023 0301 	bic.w	r3, r3, #1
 8005b8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b8c:	f7fb ffcc 	bl	8001b28 <HAL_GetTick>
 8005b90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005b92:	e00b      	b.n	8005bac <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b94:	f7fb ffc8 	bl	8001b28 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d904      	bls.n	8005bac <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e2af      	b.n	8006106 <HAL_RCC_OscConfig+0x7c2>
 8005ba6:	bf00      	nop
 8005ba8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005bac:	4b99      	ldr	r3, [pc, #612]	; (8005e14 <HAL_RCC_OscConfig+0x4d0>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0304 	and.w	r3, r3, #4
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1ed      	bne.n	8005b94 <HAL_RCC_OscConfig+0x250>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0310 	and.w	r3, r3, #16
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d06a      	beq.n	8005c9a <HAL_RCC_OscConfig+0x356>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bc4:	4b93      	ldr	r3, [pc, #588]	; (8005e14 <HAL_RCC_OscConfig+0x4d0>)
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bcc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005bce:	4b91      	ldr	r3, [pc, #580]	; (8005e14 <HAL_RCC_OscConfig+0x4d0>)
 8005bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	2b08      	cmp	r3, #8
 8005bd8:	d007      	beq.n	8005bea <HAL_RCC_OscConfig+0x2a6>
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	2b18      	cmp	r3, #24
 8005bde:	d11b      	bne.n	8005c18 <HAL_RCC_OscConfig+0x2d4>
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f003 0303 	and.w	r3, r3, #3
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d116      	bne.n	8005c18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005bea:	4b8a      	ldr	r3, [pc, #552]	; (8005e14 <HAL_RCC_OscConfig+0x4d0>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d005      	beq.n	8005c02 <HAL_RCC_OscConfig+0x2be>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	69db      	ldr	r3, [r3, #28]
 8005bfa:	2b80      	cmp	r3, #128	; 0x80
 8005bfc:	d001      	beq.n	8005c02 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e281      	b.n	8006106 <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c02:	4b84      	ldr	r3, [pc, #528]	; (8005e14 <HAL_RCC_OscConfig+0x4d0>)
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	061b      	lsls	r3, r3, #24
 8005c10:	4980      	ldr	r1, [pc, #512]	; (8005e14 <HAL_RCC_OscConfig+0x4d0>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c16:	e040      	b.n	8005c9a <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	69db      	ldr	r3, [r3, #28]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d023      	beq.n	8005c68 <HAL_RCC_OscConfig+0x324>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005c20:	4b7c      	ldr	r3, [pc, #496]	; (8005e14 <HAL_RCC_OscConfig+0x4d0>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a7b      	ldr	r2, [pc, #492]	; (8005e14 <HAL_RCC_OscConfig+0x4d0>)
 8005c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c2c:	f7fb ff7c 	bl	8001b28 <HAL_GetTick>
 8005c30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c32:	e008      	b.n	8005c46 <HAL_RCC_OscConfig+0x302>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005c34:	f7fb ff78 	bl	8001b28 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d901      	bls.n	8005c46 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e25f      	b.n	8006106 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c46:	4b73      	ldr	r3, [pc, #460]	; (8005e14 <HAL_RCC_OscConfig+0x4d0>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d0f0      	beq.n	8005c34 <HAL_RCC_OscConfig+0x2f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c52:	4b70      	ldr	r3, [pc, #448]	; (8005e14 <HAL_RCC_OscConfig+0x4d0>)
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	061b      	lsls	r3, r3, #24
 8005c60:	496c      	ldr	r1, [pc, #432]	; (8005e14 <HAL_RCC_OscConfig+0x4d0>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	60cb      	str	r3, [r1, #12]
 8005c66:	e018      	b.n	8005c9a <HAL_RCC_OscConfig+0x356>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005c68:	4b6a      	ldr	r3, [pc, #424]	; (8005e14 <HAL_RCC_OscConfig+0x4d0>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a69      	ldr	r2, [pc, #420]	; (8005e14 <HAL_RCC_OscConfig+0x4d0>)
 8005c6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c74:	f7fb ff58 	bl	8001b28 <HAL_GetTick>
 8005c78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005c7a:	e008      	b.n	8005c8e <HAL_RCC_OscConfig+0x34a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005c7c:	f7fb ff54 	bl	8001b28 <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_OscConfig+0x34a>
          {
            return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e23b      	b.n	8006106 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005c8e:	4b61      	ldr	r3, [pc, #388]	; (8005e14 <HAL_RCC_OscConfig+0x4d0>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1f0      	bne.n	8005c7c <HAL_RCC_OscConfig+0x338>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0308 	and.w	r3, r3, #8
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d036      	beq.n	8005d14 <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d019      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x39e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cae:	4b59      	ldr	r3, [pc, #356]	; (8005e14 <HAL_RCC_OscConfig+0x4d0>)
 8005cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cb2:	4a58      	ldr	r2, [pc, #352]	; (8005e14 <HAL_RCC_OscConfig+0x4d0>)
 8005cb4:	f043 0301 	orr.w	r3, r3, #1
 8005cb8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cba:	f7fb ff35 	bl	8001b28 <HAL_GetTick>
 8005cbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005cc0:	e008      	b.n	8005cd4 <HAL_RCC_OscConfig+0x390>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cc2:	f7fb ff31 	bl	8001b28 <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d901      	bls.n	8005cd4 <HAL_RCC_OscConfig+0x390>
        {
          return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e218      	b.n	8006106 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005cd4:	4b4f      	ldr	r3, [pc, #316]	; (8005e14 <HAL_RCC_OscConfig+0x4d0>)
 8005cd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cd8:	f003 0302 	and.w	r3, r3, #2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d0f0      	beq.n	8005cc2 <HAL_RCC_OscConfig+0x37e>
 8005ce0:	e018      	b.n	8005d14 <HAL_RCC_OscConfig+0x3d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ce2:	4b4c      	ldr	r3, [pc, #304]	; (8005e14 <HAL_RCC_OscConfig+0x4d0>)
 8005ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ce6:	4a4b      	ldr	r2, [pc, #300]	; (8005e14 <HAL_RCC_OscConfig+0x4d0>)
 8005ce8:	f023 0301 	bic.w	r3, r3, #1
 8005cec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cee:	f7fb ff1b 	bl	8001b28 <HAL_GetTick>
 8005cf2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005cf4:	e008      	b.n	8005d08 <HAL_RCC_OscConfig+0x3c4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cf6:	f7fb ff17 	bl	8001b28 <HAL_GetTick>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d901      	bls.n	8005d08 <HAL_RCC_OscConfig+0x3c4>
        {
          return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e1fe      	b.n	8006106 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005d08:	4b42      	ldr	r3, [pc, #264]	; (8005e14 <HAL_RCC_OscConfig+0x4d0>)
 8005d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d0c:	f003 0302 	and.w	r3, r3, #2
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1f0      	bne.n	8005cf6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0320 	and.w	r3, r3, #32
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d036      	beq.n	8005d8e <HAL_RCC_OscConfig+0x44a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d019      	beq.n	8005d5c <HAL_RCC_OscConfig+0x418>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d28:	4b3a      	ldr	r3, [pc, #232]	; (8005e14 <HAL_RCC_OscConfig+0x4d0>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a39      	ldr	r2, [pc, #228]	; (8005e14 <HAL_RCC_OscConfig+0x4d0>)
 8005d2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d32:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005d34:	f7fb fef8 	bl	8001b28 <HAL_GetTick>
 8005d38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005d3a:	e008      	b.n	8005d4e <HAL_RCC_OscConfig+0x40a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005d3c:	f7fb fef4 	bl	8001b28 <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d901      	bls.n	8005d4e <HAL_RCC_OscConfig+0x40a>
        {
          return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e1db      	b.n	8006106 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005d4e:	4b31      	ldr	r3, [pc, #196]	; (8005e14 <HAL_RCC_OscConfig+0x4d0>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d0f0      	beq.n	8005d3c <HAL_RCC_OscConfig+0x3f8>
 8005d5a:	e018      	b.n	8005d8e <HAL_RCC_OscConfig+0x44a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d5c:	4b2d      	ldr	r3, [pc, #180]	; (8005e14 <HAL_RCC_OscConfig+0x4d0>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a2c      	ldr	r2, [pc, #176]	; (8005e14 <HAL_RCC_OscConfig+0x4d0>)
 8005d62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d66:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005d68:	f7fb fede 	bl	8001b28 <HAL_GetTick>
 8005d6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005d6e:	e008      	b.n	8005d82 <HAL_RCC_OscConfig+0x43e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005d70:	f7fb feda 	bl	8001b28 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e1c1      	b.n	8006106 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005d82:	4b24      	ldr	r3, [pc, #144]	; (8005e14 <HAL_RCC_OscConfig+0x4d0>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1f0      	bne.n	8005d70 <HAL_RCC_OscConfig+0x42c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0304 	and.w	r3, r3, #4
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f000 80af 	beq.w	8005efa <HAL_RCC_OscConfig+0x5b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005d9c:	4b1e      	ldr	r3, [pc, #120]	; (8005e18 <HAL_RCC_OscConfig+0x4d4>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a1d      	ldr	r2, [pc, #116]	; (8005e18 <HAL_RCC_OscConfig+0x4d4>)
 8005da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005da6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005da8:	f7fb febe 	bl	8001b28 <HAL_GetTick>
 8005dac:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005dae:	e008      	b.n	8005dc2 <HAL_RCC_OscConfig+0x47e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005db0:	f7fb feba 	bl	8001b28 <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	2b64      	cmp	r3, #100	; 0x64
 8005dbc:	d901      	bls.n	8005dc2 <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e1a1      	b.n	8006106 <HAL_RCC_OscConfig+0x7c2>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005dc2:	4b15      	ldr	r3, [pc, #84]	; (8005e18 <HAL_RCC_OscConfig+0x4d4>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d0f0      	beq.n	8005db0 <HAL_RCC_OscConfig+0x46c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d106      	bne.n	8005de4 <HAL_RCC_OscConfig+0x4a0>
 8005dd6:	4b0f      	ldr	r3, [pc, #60]	; (8005e14 <HAL_RCC_OscConfig+0x4d0>)
 8005dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dda:	4a0e      	ldr	r2, [pc, #56]	; (8005e14 <HAL_RCC_OscConfig+0x4d0>)
 8005ddc:	f043 0301 	orr.w	r3, r3, #1
 8005de0:	6713      	str	r3, [r2, #112]	; 0x70
 8005de2:	e05b      	b.n	8005e9c <HAL_RCC_OscConfig+0x558>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d117      	bne.n	8005e1c <HAL_RCC_OscConfig+0x4d8>
 8005dec:	4b09      	ldr	r3, [pc, #36]	; (8005e14 <HAL_RCC_OscConfig+0x4d0>)
 8005dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df0:	4a08      	ldr	r2, [pc, #32]	; (8005e14 <HAL_RCC_OscConfig+0x4d0>)
 8005df2:	f023 0301 	bic.w	r3, r3, #1
 8005df6:	6713      	str	r3, [r2, #112]	; 0x70
 8005df8:	4b06      	ldr	r3, [pc, #24]	; (8005e14 <HAL_RCC_OscConfig+0x4d0>)
 8005dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dfc:	4a05      	ldr	r2, [pc, #20]	; (8005e14 <HAL_RCC_OscConfig+0x4d0>)
 8005dfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e02:	6713      	str	r3, [r2, #112]	; 0x70
 8005e04:	4b03      	ldr	r3, [pc, #12]	; (8005e14 <HAL_RCC_OscConfig+0x4d0>)
 8005e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e08:	4a02      	ldr	r2, [pc, #8]	; (8005e14 <HAL_RCC_OscConfig+0x4d0>)
 8005e0a:	f023 0304 	bic.w	r3, r3, #4
 8005e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8005e10:	e044      	b.n	8005e9c <HAL_RCC_OscConfig+0x558>
 8005e12:	bf00      	nop
 8005e14:	58024400 	.word	0x58024400
 8005e18:	58024800 	.word	0x58024800
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	2b05      	cmp	r3, #5
 8005e22:	d112      	bne.n	8005e4a <HAL_RCC_OscConfig+0x506>
 8005e24:	4b95      	ldr	r3, [pc, #596]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e28:	4a94      	ldr	r2, [pc, #592]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005e2a:	f043 0304 	orr.w	r3, r3, #4
 8005e2e:	6713      	str	r3, [r2, #112]	; 0x70
 8005e30:	4b92      	ldr	r3, [pc, #584]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e34:	4a91      	ldr	r2, [pc, #580]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005e36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8005e3c:	4b8f      	ldr	r3, [pc, #572]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e40:	4a8e      	ldr	r2, [pc, #568]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005e42:	f043 0301 	orr.w	r3, r3, #1
 8005e46:	6713      	str	r3, [r2, #112]	; 0x70
 8005e48:	e028      	b.n	8005e9c <HAL_RCC_OscConfig+0x558>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	2b85      	cmp	r3, #133	; 0x85
 8005e50:	d112      	bne.n	8005e78 <HAL_RCC_OscConfig+0x534>
 8005e52:	4b8a      	ldr	r3, [pc, #552]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e56:	4a89      	ldr	r2, [pc, #548]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005e58:	f043 0304 	orr.w	r3, r3, #4
 8005e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8005e5e:	4b87      	ldr	r3, [pc, #540]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e62:	4a86      	ldr	r2, [pc, #536]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e68:	6713      	str	r3, [r2, #112]	; 0x70
 8005e6a:	4b84      	ldr	r3, [pc, #528]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e6e:	4a83      	ldr	r2, [pc, #524]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005e70:	f043 0301 	orr.w	r3, r3, #1
 8005e74:	6713      	str	r3, [r2, #112]	; 0x70
 8005e76:	e011      	b.n	8005e9c <HAL_RCC_OscConfig+0x558>
 8005e78:	4b80      	ldr	r3, [pc, #512]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e7c:	4a7f      	ldr	r2, [pc, #508]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005e7e:	f023 0301 	bic.w	r3, r3, #1
 8005e82:	6713      	str	r3, [r2, #112]	; 0x70
 8005e84:	4b7d      	ldr	r3, [pc, #500]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e88:	4a7c      	ldr	r2, [pc, #496]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005e8a:	f023 0304 	bic.w	r3, r3, #4
 8005e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8005e90:	4b7a      	ldr	r3, [pc, #488]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e94:	4a79      	ldr	r2, [pc, #484]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005e96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d015      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x58c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ea4:	f7fb fe40 	bl	8001b28 <HAL_GetTick>
 8005ea8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005eaa:	e00a      	b.n	8005ec2 <HAL_RCC_OscConfig+0x57e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005eac:	f7fb fe3c 	bl	8001b28 <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d901      	bls.n	8005ec2 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e121      	b.n	8006106 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ec2:	4b6e      	ldr	r3, [pc, #440]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d0ee      	beq.n	8005eac <HAL_RCC_OscConfig+0x568>
 8005ece:	e014      	b.n	8005efa <HAL_RCC_OscConfig+0x5b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ed0:	f7fb fe2a 	bl	8001b28 <HAL_GetTick>
 8005ed4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005ed6:	e00a      	b.n	8005eee <HAL_RCC_OscConfig+0x5aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ed8:	f7fb fe26 	bl	8001b28 <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d901      	bls.n	8005eee <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e10b      	b.n	8006106 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005eee:	4b63      	ldr	r3, [pc, #396]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef2:	f003 0302 	and.w	r3, r3, #2
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1ee      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x594>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f000 8100 	beq.w	8006104 <HAL_RCC_OscConfig+0x7c0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005f04:	4b5d      	ldr	r3, [pc, #372]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f0c:	2b18      	cmp	r3, #24
 8005f0e:	f000 80bb 	beq.w	8006088 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	f040 8095 	bne.w	8006046 <HAL_RCC_OscConfig+0x702>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f1c:	4b57      	ldr	r3, [pc, #348]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a56      	ldr	r2, [pc, #344]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005f22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f28:	f7fb fdfe 	bl	8001b28 <HAL_GetTick>
 8005f2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f2e:	e008      	b.n	8005f42 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f30:	f7fb fdfa 	bl	8001b28 <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d901      	bls.n	8005f42 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e0e1      	b.n	8006106 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f42:	4b4e      	ldr	r3, [pc, #312]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1f0      	bne.n	8005f30 <HAL_RCC_OscConfig+0x5ec>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f4e:	4b4b      	ldr	r3, [pc, #300]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005f50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f52:	4b4b      	ldr	r3, [pc, #300]	; (8006080 <HAL_RCC_OscConfig+0x73c>)
 8005f54:	4013      	ands	r3, r2
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005f5e:	0112      	lsls	r2, r2, #4
 8005f60:	430a      	orrs	r2, r1
 8005f62:	4946      	ldr	r1, [pc, #280]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005f64:	4313      	orrs	r3, r2
 8005f66:	628b      	str	r3, [r1, #40]	; 0x28
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f76:	3b01      	subs	r3, #1
 8005f78:	025b      	lsls	r3, r3, #9
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	431a      	orrs	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f82:	3b01      	subs	r3, #1
 8005f84:	041b      	lsls	r3, r3, #16
 8005f86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005f8a:	431a      	orrs	r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f90:	3b01      	subs	r3, #1
 8005f92:	061b      	lsls	r3, r3, #24
 8005f94:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005f98:	4938      	ldr	r1, [pc, #224]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005f9e:	4b37      	ldr	r3, [pc, #220]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa2:	4a36      	ldr	r2, [pc, #216]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005fa4:	f023 0301 	bic.w	r3, r3, #1
 8005fa8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005faa:	4b34      	ldr	r3, [pc, #208]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005fac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fae:	4b35      	ldr	r3, [pc, #212]	; (8006084 <HAL_RCC_OscConfig+0x740>)
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005fb6:	00d2      	lsls	r2, r2, #3
 8005fb8:	4930      	ldr	r1, [pc, #192]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005fbe:	4b2f      	ldr	r3, [pc, #188]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc2:	f023 020c 	bic.w	r2, r3, #12
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fca:	492c      	ldr	r1, [pc, #176]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005fd0:	4b2a      	ldr	r3, [pc, #168]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd4:	f023 0202 	bic.w	r2, r3, #2
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fdc:	4927      	ldr	r1, [pc, #156]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005fe2:	4b26      	ldr	r3, [pc, #152]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe6:	4a25      	ldr	r2, [pc, #148]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fee:	4b23      	ldr	r3, [pc, #140]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff2:	4a22      	ldr	r2, [pc, #136]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ff8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005ffa:	4b20      	ldr	r3, [pc, #128]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8005ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffe:	4a1f      	ldr	r2, [pc, #124]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8006000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006004:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006006:	4b1d      	ldr	r3, [pc, #116]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8006008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600a:	4a1c      	ldr	r2, [pc, #112]	; (800607c <HAL_RCC_OscConfig+0x738>)
 800600c:	f043 0301 	orr.w	r3, r3, #1
 8006010:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006012:	4b1a      	ldr	r3, [pc, #104]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a19      	ldr	r2, [pc, #100]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8006018:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800601c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800601e:	f7fb fd83 	bl	8001b28 <HAL_GetTick>
 8006022:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006024:	e008      	b.n	8006038 <HAL_RCC_OscConfig+0x6f4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006026:	f7fb fd7f 	bl	8001b28 <HAL_GetTick>
 800602a:	4602      	mov	r2, r0
 800602c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	2b02      	cmp	r3, #2
 8006032:	d901      	bls.n	8006038 <HAL_RCC_OscConfig+0x6f4>
          {
            return HAL_TIMEOUT;
 8006034:	2303      	movs	r3, #3
 8006036:	e066      	b.n	8006106 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006038:	4b10      	ldr	r3, [pc, #64]	; (800607c <HAL_RCC_OscConfig+0x738>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d0f0      	beq.n	8006026 <HAL_RCC_OscConfig+0x6e2>
 8006044:	e05e      	b.n	8006104 <HAL_RCC_OscConfig+0x7c0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006046:	4b0d      	ldr	r3, [pc, #52]	; (800607c <HAL_RCC_OscConfig+0x738>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a0c      	ldr	r2, [pc, #48]	; (800607c <HAL_RCC_OscConfig+0x738>)
 800604c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006052:	f7fb fd69 	bl	8001b28 <HAL_GetTick>
 8006056:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006058:	e008      	b.n	800606c <HAL_RCC_OscConfig+0x728>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800605a:	f7fb fd65 	bl	8001b28 <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	2b02      	cmp	r3, #2
 8006066:	d901      	bls.n	800606c <HAL_RCC_OscConfig+0x728>
          {
            return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e04c      	b.n	8006106 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800606c:	4b03      	ldr	r3, [pc, #12]	; (800607c <HAL_RCC_OscConfig+0x738>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1f0      	bne.n	800605a <HAL_RCC_OscConfig+0x716>
 8006078:	e044      	b.n	8006104 <HAL_RCC_OscConfig+0x7c0>
 800607a:	bf00      	nop
 800607c:	58024400 	.word	0x58024400
 8006080:	fffffc0c 	.word	0xfffffc0c
 8006084:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006088:	4b21      	ldr	r3, [pc, #132]	; (8006110 <HAL_RCC_OscConfig+0x7cc>)
 800608a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800608c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800608e:	4b20      	ldr	r3, [pc, #128]	; (8006110 <HAL_RCC_OscConfig+0x7cc>)
 8006090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006092:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006098:	2b01      	cmp	r3, #1
 800609a:	d031      	beq.n	8006100 <HAL_RCC_OscConfig+0x7bc>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	f003 0203 	and.w	r2, r3, #3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d12a      	bne.n	8006100 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	091b      	lsrs	r3, r3, #4
 80060ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d122      	bne.n	8006100 <HAL_RCC_OscConfig+0x7bc>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d11a      	bne.n	8006100 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	0a5b      	lsrs	r3, r3, #9
 80060ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060d6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80060d8:	429a      	cmp	r2, r3
 80060da:	d111      	bne.n	8006100 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	0c1b      	lsrs	r3, r3, #16
 80060e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d108      	bne.n	8006100 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	0e1b      	lsrs	r3, r3, #24
 80060f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060fa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d001      	beq.n	8006104 <HAL_RCC_OscConfig+0x7c0>
      {
        return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e000      	b.n	8006106 <HAL_RCC_OscConfig+0x7c2>
      }
    }
  }
  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3730      	adds	r7, #48	; 0x30
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	58024400 	.word	0x58024400

08006114 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d101      	bne.n	8006128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e19c      	b.n	8006462 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006128:	4b8a      	ldr	r3, [pc, #552]	; (8006354 <HAL_RCC_ClockConfig+0x240>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 030f 	and.w	r3, r3, #15
 8006130:	683a      	ldr	r2, [r7, #0]
 8006132:	429a      	cmp	r2, r3
 8006134:	d910      	bls.n	8006158 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006136:	4b87      	ldr	r3, [pc, #540]	; (8006354 <HAL_RCC_ClockConfig+0x240>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f023 020f 	bic.w	r2, r3, #15
 800613e:	4985      	ldr	r1, [pc, #532]	; (8006354 <HAL_RCC_ClockConfig+0x240>)
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	4313      	orrs	r3, r2
 8006144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006146:	4b83      	ldr	r3, [pc, #524]	; (8006354 <HAL_RCC_ClockConfig+0x240>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 030f 	and.w	r3, r3, #15
 800614e:	683a      	ldr	r2, [r7, #0]
 8006150:	429a      	cmp	r2, r3
 8006152:	d001      	beq.n	8006158 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e184      	b.n	8006462 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0304 	and.w	r3, r3, #4
 8006160:	2b00      	cmp	r3, #0
 8006162:	d010      	beq.n	8006186 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	691a      	ldr	r2, [r3, #16]
 8006168:	4b7b      	ldr	r3, [pc, #492]	; (8006358 <HAL_RCC_ClockConfig+0x244>)
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006170:	429a      	cmp	r2, r3
 8006172:	d908      	bls.n	8006186 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006174:	4b78      	ldr	r3, [pc, #480]	; (8006358 <HAL_RCC_ClockConfig+0x244>)
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	4975      	ldr	r1, [pc, #468]	; (8006358 <HAL_RCC_ClockConfig+0x244>)
 8006182:	4313      	orrs	r3, r2
 8006184:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0308 	and.w	r3, r3, #8
 800618e:	2b00      	cmp	r3, #0
 8006190:	d010      	beq.n	80061b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	695a      	ldr	r2, [r3, #20]
 8006196:	4b70      	ldr	r3, [pc, #448]	; (8006358 <HAL_RCC_ClockConfig+0x244>)
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800619e:	429a      	cmp	r2, r3
 80061a0:	d908      	bls.n	80061b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80061a2:	4b6d      	ldr	r3, [pc, #436]	; (8006358 <HAL_RCC_ClockConfig+0x244>)
 80061a4:	69db      	ldr	r3, [r3, #28]
 80061a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	496a      	ldr	r1, [pc, #424]	; (8006358 <HAL_RCC_ClockConfig+0x244>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0310 	and.w	r3, r3, #16
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d010      	beq.n	80061e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	699a      	ldr	r2, [r3, #24]
 80061c4:	4b64      	ldr	r3, [pc, #400]	; (8006358 <HAL_RCC_ClockConfig+0x244>)
 80061c6:	69db      	ldr	r3, [r3, #28]
 80061c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d908      	bls.n	80061e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80061d0:	4b61      	ldr	r3, [pc, #388]	; (8006358 <HAL_RCC_ClockConfig+0x244>)
 80061d2:	69db      	ldr	r3, [r3, #28]
 80061d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	495e      	ldr	r1, [pc, #376]	; (8006358 <HAL_RCC_ClockConfig+0x244>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0320 	and.w	r3, r3, #32
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d010      	beq.n	8006210 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	69da      	ldr	r2, [r3, #28]
 80061f2:	4b59      	ldr	r3, [pc, #356]	; (8006358 <HAL_RCC_ClockConfig+0x244>)
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d908      	bls.n	8006210 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80061fe:	4b56      	ldr	r3, [pc, #344]	; (8006358 <HAL_RCC_ClockConfig+0x244>)
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	69db      	ldr	r3, [r3, #28]
 800620a:	4953      	ldr	r1, [pc, #332]	; (8006358 <HAL_RCC_ClockConfig+0x244>)
 800620c:	4313      	orrs	r3, r2
 800620e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 0302 	and.w	r3, r3, #2
 8006218:	2b00      	cmp	r3, #0
 800621a:	d010      	beq.n	800623e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	68da      	ldr	r2, [r3, #12]
 8006220:	4b4d      	ldr	r3, [pc, #308]	; (8006358 <HAL_RCC_ClockConfig+0x244>)
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	f003 030f 	and.w	r3, r3, #15
 8006228:	429a      	cmp	r2, r3
 800622a:	d908      	bls.n	800623e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800622c:	4b4a      	ldr	r3, [pc, #296]	; (8006358 <HAL_RCC_ClockConfig+0x244>)
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	f023 020f 	bic.w	r2, r3, #15
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	4947      	ldr	r1, [pc, #284]	; (8006358 <HAL_RCC_ClockConfig+0x244>)
 800623a:	4313      	orrs	r3, r2
 800623c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	2b00      	cmp	r3, #0
 8006248:	d055      	beq.n	80062f6 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800624a:	4b43      	ldr	r3, [pc, #268]	; (8006358 <HAL_RCC_ClockConfig+0x244>)
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	4940      	ldr	r1, [pc, #256]	; (8006358 <HAL_RCC_ClockConfig+0x244>)
 8006258:	4313      	orrs	r3, r2
 800625a:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	2b02      	cmp	r3, #2
 8006262:	d107      	bne.n	8006274 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006264:	4b3c      	ldr	r3, [pc, #240]	; (8006358 <HAL_RCC_ClockConfig+0x244>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800626c:	2b00      	cmp	r3, #0
 800626e:	d121      	bne.n	80062b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e0f6      	b.n	8006462 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	2b03      	cmp	r3, #3
 800627a:	d107      	bne.n	800628c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800627c:	4b36      	ldr	r3, [pc, #216]	; (8006358 <HAL_RCC_ClockConfig+0x244>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d115      	bne.n	80062b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e0ea      	b.n	8006462 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	2b01      	cmp	r3, #1
 8006292:	d107      	bne.n	80062a4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006294:	4b30      	ldr	r3, [pc, #192]	; (8006358 <HAL_RCC_ClockConfig+0x244>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800629c:	2b00      	cmp	r3, #0
 800629e:	d109      	bne.n	80062b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e0de      	b.n	8006462 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062a4:	4b2c      	ldr	r3, [pc, #176]	; (8006358 <HAL_RCC_ClockConfig+0x244>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0304 	and.w	r3, r3, #4
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d101      	bne.n	80062b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e0d6      	b.n	8006462 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80062b4:	4b28      	ldr	r3, [pc, #160]	; (8006358 <HAL_RCC_ClockConfig+0x244>)
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	f023 0207 	bic.w	r2, r3, #7
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	4925      	ldr	r1, [pc, #148]	; (8006358 <HAL_RCC_ClockConfig+0x244>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062c6:	f7fb fc2f 	bl	8001b28 <HAL_GetTick>
 80062ca:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062cc:	e00a      	b.n	80062e4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062ce:	f7fb fc2b 	bl	8001b28 <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80062dc:	4293      	cmp	r3, r2
 80062de:	d901      	bls.n	80062e4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e0be      	b.n	8006462 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062e4:	4b1c      	ldr	r3, [pc, #112]	; (8006358 <HAL_RCC_ClockConfig+0x244>)
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	00db      	lsls	r3, r3, #3
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d1eb      	bne.n	80062ce <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0302 	and.w	r3, r3, #2
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d010      	beq.n	8006324 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	68da      	ldr	r2, [r3, #12]
 8006306:	4b14      	ldr	r3, [pc, #80]	; (8006358 <HAL_RCC_ClockConfig+0x244>)
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	f003 030f 	and.w	r3, r3, #15
 800630e:	429a      	cmp	r2, r3
 8006310:	d208      	bcs.n	8006324 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006312:	4b11      	ldr	r3, [pc, #68]	; (8006358 <HAL_RCC_ClockConfig+0x244>)
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	f023 020f 	bic.w	r2, r3, #15
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	490e      	ldr	r1, [pc, #56]	; (8006358 <HAL_RCC_ClockConfig+0x244>)
 8006320:	4313      	orrs	r3, r2
 8006322:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006324:	4b0b      	ldr	r3, [pc, #44]	; (8006354 <HAL_RCC_ClockConfig+0x240>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 030f 	and.w	r3, r3, #15
 800632c:	683a      	ldr	r2, [r7, #0]
 800632e:	429a      	cmp	r2, r3
 8006330:	d214      	bcs.n	800635c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006332:	4b08      	ldr	r3, [pc, #32]	; (8006354 <HAL_RCC_ClockConfig+0x240>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f023 020f 	bic.w	r2, r3, #15
 800633a:	4906      	ldr	r1, [pc, #24]	; (8006354 <HAL_RCC_ClockConfig+0x240>)
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	4313      	orrs	r3, r2
 8006340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006342:	4b04      	ldr	r3, [pc, #16]	; (8006354 <HAL_RCC_ClockConfig+0x240>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 030f 	and.w	r3, r3, #15
 800634a:	683a      	ldr	r2, [r7, #0]
 800634c:	429a      	cmp	r2, r3
 800634e:	d005      	beq.n	800635c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e086      	b.n	8006462 <HAL_RCC_ClockConfig+0x34e>
 8006354:	52002000 	.word	0x52002000
 8006358:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0304 	and.w	r3, r3, #4
 8006364:	2b00      	cmp	r3, #0
 8006366:	d010      	beq.n	800638a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	691a      	ldr	r2, [r3, #16]
 800636c:	4b3f      	ldr	r3, [pc, #252]	; (800646c <HAL_RCC_ClockConfig+0x358>)
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006374:	429a      	cmp	r2, r3
 8006376:	d208      	bcs.n	800638a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006378:	4b3c      	ldr	r3, [pc, #240]	; (800646c <HAL_RCC_ClockConfig+0x358>)
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	4939      	ldr	r1, [pc, #228]	; (800646c <HAL_RCC_ClockConfig+0x358>)
 8006386:	4313      	orrs	r3, r2
 8006388:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0308 	and.w	r3, r3, #8
 8006392:	2b00      	cmp	r3, #0
 8006394:	d010      	beq.n	80063b8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	695a      	ldr	r2, [r3, #20]
 800639a:	4b34      	ldr	r3, [pc, #208]	; (800646c <HAL_RCC_ClockConfig+0x358>)
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d208      	bcs.n	80063b8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80063a6:	4b31      	ldr	r3, [pc, #196]	; (800646c <HAL_RCC_ClockConfig+0x358>)
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	492e      	ldr	r1, [pc, #184]	; (800646c <HAL_RCC_ClockConfig+0x358>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0310 	and.w	r3, r3, #16
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d010      	beq.n	80063e6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	699a      	ldr	r2, [r3, #24]
 80063c8:	4b28      	ldr	r3, [pc, #160]	; (800646c <HAL_RCC_ClockConfig+0x358>)
 80063ca:	69db      	ldr	r3, [r3, #28]
 80063cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d208      	bcs.n	80063e6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80063d4:	4b25      	ldr	r3, [pc, #148]	; (800646c <HAL_RCC_ClockConfig+0x358>)
 80063d6:	69db      	ldr	r3, [r3, #28]
 80063d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	4922      	ldr	r1, [pc, #136]	; (800646c <HAL_RCC_ClockConfig+0x358>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0320 	and.w	r3, r3, #32
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d010      	beq.n	8006414 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	69da      	ldr	r2, [r3, #28]
 80063f6:	4b1d      	ldr	r3, [pc, #116]	; (800646c <HAL_RCC_ClockConfig+0x358>)
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063fe:	429a      	cmp	r2, r3
 8006400:	d208      	bcs.n	8006414 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006402:	4b1a      	ldr	r3, [pc, #104]	; (800646c <HAL_RCC_ClockConfig+0x358>)
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	69db      	ldr	r3, [r3, #28]
 800640e:	4917      	ldr	r1, [pc, #92]	; (800646c <HAL_RCC_ClockConfig+0x358>)
 8006410:	4313      	orrs	r3, r2
 8006412:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006414:	f000 f834 	bl	8006480 <HAL_RCC_GetSysClockFreq>
 8006418:	4601      	mov	r1, r0
 800641a:	4b14      	ldr	r3, [pc, #80]	; (800646c <HAL_RCC_ClockConfig+0x358>)
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	0a1b      	lsrs	r3, r3, #8
 8006420:	f003 030f 	and.w	r3, r3, #15
 8006424:	4a12      	ldr	r2, [pc, #72]	; (8006470 <HAL_RCC_ClockConfig+0x35c>)
 8006426:	5cd3      	ldrb	r3, [r2, r3]
 8006428:	f003 031f 	and.w	r3, r3, #31
 800642c:	fa21 f303 	lsr.w	r3, r1, r3
 8006430:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006432:	4b0e      	ldr	r3, [pc, #56]	; (800646c <HAL_RCC_ClockConfig+0x358>)
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	f003 030f 	and.w	r3, r3, #15
 800643a:	4a0d      	ldr	r2, [pc, #52]	; (8006470 <HAL_RCC_ClockConfig+0x35c>)
 800643c:	5cd3      	ldrb	r3, [r2, r3]
 800643e:	f003 031f 	and.w	r3, r3, #31
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	fa22 f303 	lsr.w	r3, r2, r3
 8006448:	4a0a      	ldr	r2, [pc, #40]	; (8006474 <HAL_RCC_ClockConfig+0x360>)
 800644a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800644c:	4a0a      	ldr	r2, [pc, #40]	; (8006478 <HAL_RCC_ClockConfig+0x364>)
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006452:	4b0a      	ldr	r3, [pc, #40]	; (800647c <HAL_RCC_ClockConfig+0x368>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4618      	mov	r0, r3
 8006458:	f7fb fb1c 	bl	8001a94 <HAL_InitTick>
 800645c:	4603      	mov	r3, r0
 800645e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006460:	7bfb      	ldrb	r3, [r7, #15]
}
 8006462:	4618      	mov	r0, r3
 8006464:	3718      	adds	r7, #24
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	58024400 	.word	0x58024400
 8006470:	0800b314 	.word	0x0800b314
 8006474:	24000004 	.word	0x24000004
 8006478:	24000000 	.word	0x24000000
 800647c:	24000008 	.word	0x24000008

08006480 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006480:	b480      	push	{r7}
 8006482:	b089      	sub	sp, #36	; 0x24
 8006484:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006486:	4baf      	ldr	r3, [pc, #700]	; (8006744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800648e:	2b18      	cmp	r3, #24
 8006490:	f200 814e 	bhi.w	8006730 <HAL_RCC_GetSysClockFreq+0x2b0>
 8006494:	a201      	add	r2, pc, #4	; (adr r2, 800649c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649a:	bf00      	nop
 800649c:	08006501 	.word	0x08006501
 80064a0:	08006731 	.word	0x08006731
 80064a4:	08006731 	.word	0x08006731
 80064a8:	08006731 	.word	0x08006731
 80064ac:	08006731 	.word	0x08006731
 80064b0:	08006731 	.word	0x08006731
 80064b4:	08006731 	.word	0x08006731
 80064b8:	08006731 	.word	0x08006731
 80064bc:	08006527 	.word	0x08006527
 80064c0:	08006731 	.word	0x08006731
 80064c4:	08006731 	.word	0x08006731
 80064c8:	08006731 	.word	0x08006731
 80064cc:	08006731 	.word	0x08006731
 80064d0:	08006731 	.word	0x08006731
 80064d4:	08006731 	.word	0x08006731
 80064d8:	08006731 	.word	0x08006731
 80064dc:	0800652d 	.word	0x0800652d
 80064e0:	08006731 	.word	0x08006731
 80064e4:	08006731 	.word	0x08006731
 80064e8:	08006731 	.word	0x08006731
 80064ec:	08006731 	.word	0x08006731
 80064f0:	08006731 	.word	0x08006731
 80064f4:	08006731 	.word	0x08006731
 80064f8:	08006731 	.word	0x08006731
 80064fc:	08006533 	.word	0x08006533
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006500:	4b90      	ldr	r3, [pc, #576]	; (8006744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0320 	and.w	r3, r3, #32
 8006508:	2b00      	cmp	r3, #0
 800650a:	d009      	beq.n	8006520 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800650c:	4b8d      	ldr	r3, [pc, #564]	; (8006744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	08db      	lsrs	r3, r3, #3
 8006512:	f003 0303 	and.w	r3, r3, #3
 8006516:	4a8c      	ldr	r2, [pc, #560]	; (8006748 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006518:	fa22 f303 	lsr.w	r3, r2, r3
 800651c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800651e:	e10a      	b.n	8006736 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006520:	4b89      	ldr	r3, [pc, #548]	; (8006748 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006522:	61bb      	str	r3, [r7, #24]
    break;
 8006524:	e107      	b.n	8006736 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006526:	4b89      	ldr	r3, [pc, #548]	; (800674c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006528:	61bb      	str	r3, [r7, #24]
    break;
 800652a:	e104      	b.n	8006736 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800652c:	4b88      	ldr	r3, [pc, #544]	; (8006750 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800652e:	61bb      	str	r3, [r7, #24]
    break;
 8006530:	e101      	b.n	8006736 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006532:	4b84      	ldr	r3, [pc, #528]	; (8006744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006536:	f003 0303 	and.w	r3, r3, #3
 800653a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800653c:	4b81      	ldr	r3, [pc, #516]	; (8006744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800653e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006540:	091b      	lsrs	r3, r3, #4
 8006542:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006546:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006548:	4b7e      	ldr	r3, [pc, #504]	; (8006744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800654a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654c:	f003 0301 	and.w	r3, r3, #1
 8006550:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006552:	4b7c      	ldr	r3, [pc, #496]	; (8006744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006556:	08db      	lsrs	r3, r3, #3
 8006558:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	fb02 f303 	mul.w	r3, r2, r3
 8006562:	ee07 3a90 	vmov	s15, r3
 8006566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800656a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	2b00      	cmp	r3, #0
 8006572:	f000 80da 	beq.w	800672a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d05a      	beq.n	8006632 <HAL_RCC_GetSysClockFreq+0x1b2>
 800657c:	2b01      	cmp	r3, #1
 800657e:	d302      	bcc.n	8006586 <HAL_RCC_GetSysClockFreq+0x106>
 8006580:	2b02      	cmp	r3, #2
 8006582:	d078      	beq.n	8006676 <HAL_RCC_GetSysClockFreq+0x1f6>
 8006584:	e099      	b.n	80066ba <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006586:	4b6f      	ldr	r3, [pc, #444]	; (8006744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0320 	and.w	r3, r3, #32
 800658e:	2b00      	cmp	r3, #0
 8006590:	d02d      	beq.n	80065ee <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006592:	4b6c      	ldr	r3, [pc, #432]	; (8006744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	08db      	lsrs	r3, r3, #3
 8006598:	f003 0303 	and.w	r3, r3, #3
 800659c:	4a6a      	ldr	r2, [pc, #424]	; (8006748 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800659e:	fa22 f303 	lsr.w	r3, r2, r3
 80065a2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	ee07 3a90 	vmov	s15, r3
 80065aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	ee07 3a90 	vmov	s15, r3
 80065b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065bc:	4b61      	ldr	r3, [pc, #388]	; (8006744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80065be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065c4:	ee07 3a90 	vmov	s15, r3
 80065c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065cc:	ed97 6a02 	vldr	s12, [r7, #8]
 80065d0:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006754 <HAL_RCC_GetSysClockFreq+0x2d4>
 80065d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065e8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80065ec:	e087      	b.n	80066fe <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	ee07 3a90 	vmov	s15, r3
 80065f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065f8:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006758 <HAL_RCC_GetSysClockFreq+0x2d8>
 80065fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006600:	4b50      	ldr	r3, [pc, #320]	; (8006744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006608:	ee07 3a90 	vmov	s15, r3
 800660c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006610:	ed97 6a02 	vldr	s12, [r7, #8]
 8006614:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006754 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006618:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800661c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006620:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006624:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800662c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006630:	e065      	b.n	80066fe <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	ee07 3a90 	vmov	s15, r3
 8006638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800663c:	eddf 6a47 	vldr	s13, [pc, #284]	; 800675c <HAL_RCC_GetSysClockFreq+0x2dc>
 8006640:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006644:	4b3f      	ldr	r3, [pc, #252]	; (8006744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800664c:	ee07 3a90 	vmov	s15, r3
 8006650:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006654:	ed97 6a02 	vldr	s12, [r7, #8]
 8006658:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006754 <HAL_RCC_GetSysClockFreq+0x2d4>
 800665c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006660:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006664:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006668:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800666c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006670:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006674:	e043      	b.n	80066fe <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	ee07 3a90 	vmov	s15, r3
 800667c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006680:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006760 <HAL_RCC_GetSysClockFreq+0x2e0>
 8006684:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006688:	4b2e      	ldr	r3, [pc, #184]	; (8006744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800668a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006690:	ee07 3a90 	vmov	s15, r3
 8006694:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006698:	ed97 6a02 	vldr	s12, [r7, #8]
 800669c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006754 <HAL_RCC_GetSysClockFreq+0x2d4>
 80066a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066b8:	e021      	b.n	80066fe <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	ee07 3a90 	vmov	s15, r3
 80066c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066c4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800675c <HAL_RCC_GetSysClockFreq+0x2dc>
 80066c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066cc:	4b1d      	ldr	r3, [pc, #116]	; (8006744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80066ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066d4:	ee07 3a90 	vmov	s15, r3
 80066d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80066e0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006754 <HAL_RCC_GetSysClockFreq+0x2d4>
 80066e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066fc:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80066fe:	4b11      	ldr	r3, [pc, #68]	; (8006744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006702:	0a5b      	lsrs	r3, r3, #9
 8006704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006708:	3301      	adds	r3, #1
 800670a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	ee07 3a90 	vmov	s15, r3
 8006712:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006716:	edd7 6a07 	vldr	s13, [r7, #28]
 800671a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800671e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006722:	ee17 3a90 	vmov	r3, s15
 8006726:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006728:	e005      	b.n	8006736 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800672a:	2300      	movs	r3, #0
 800672c:	61bb      	str	r3, [r7, #24]
    break;
 800672e:	e002      	b.n	8006736 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006730:	4b06      	ldr	r3, [pc, #24]	; (800674c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006732:	61bb      	str	r3, [r7, #24]
    break;
 8006734:	bf00      	nop
  }

  return sysclockfreq;
 8006736:	69bb      	ldr	r3, [r7, #24]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3724      	adds	r7, #36	; 0x24
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr
 8006744:	58024400 	.word	0x58024400
 8006748:	03d09000 	.word	0x03d09000
 800674c:	003d0900 	.word	0x003d0900
 8006750:	007a1200 	.word	0x007a1200
 8006754:	46000000 	.word	0x46000000
 8006758:	4c742400 	.word	0x4c742400
 800675c:	4a742400 	.word	0x4a742400
 8006760:	4af42400 	.word	0x4af42400

08006764 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800676a:	f7ff fe89 	bl	8006480 <HAL_RCC_GetSysClockFreq>
 800676e:	4601      	mov	r1, r0
 8006770:	4b10      	ldr	r3, [pc, #64]	; (80067b4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	0a1b      	lsrs	r3, r3, #8
 8006776:	f003 030f 	and.w	r3, r3, #15
 800677a:	4a0f      	ldr	r2, [pc, #60]	; (80067b8 <HAL_RCC_GetHCLKFreq+0x54>)
 800677c:	5cd3      	ldrb	r3, [r2, r3]
 800677e:	f003 031f 	and.w	r3, r3, #31
 8006782:	fa21 f303 	lsr.w	r3, r1, r3
 8006786:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006788:	4b0a      	ldr	r3, [pc, #40]	; (80067b4 <HAL_RCC_GetHCLKFreq+0x50>)
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	f003 030f 	and.w	r3, r3, #15
 8006790:	4a09      	ldr	r2, [pc, #36]	; (80067b8 <HAL_RCC_GetHCLKFreq+0x54>)
 8006792:	5cd3      	ldrb	r3, [r2, r3]
 8006794:	f003 031f 	and.w	r3, r3, #31
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	fa22 f303 	lsr.w	r3, r2, r3
 800679e:	4a07      	ldr	r2, [pc, #28]	; (80067bc <HAL_RCC_GetHCLKFreq+0x58>)
 80067a0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80067a2:	4a07      	ldr	r2, [pc, #28]	; (80067c0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80067a8:	4b04      	ldr	r3, [pc, #16]	; (80067bc <HAL_RCC_GetHCLKFreq+0x58>)
 80067aa:	681b      	ldr	r3, [r3, #0]
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3708      	adds	r7, #8
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	58024400 	.word	0x58024400
 80067b8:	0800b314 	.word	0x0800b314
 80067bc:	24000004 	.word	0x24000004
 80067c0:	24000000 	.word	0x24000000

080067c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80067c8:	f7ff ffcc 	bl	8006764 <HAL_RCC_GetHCLKFreq>
 80067cc:	4601      	mov	r1, r0
 80067ce:	4b06      	ldr	r3, [pc, #24]	; (80067e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	091b      	lsrs	r3, r3, #4
 80067d4:	f003 0307 	and.w	r3, r3, #7
 80067d8:	4a04      	ldr	r2, [pc, #16]	; (80067ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80067da:	5cd3      	ldrb	r3, [r2, r3]
 80067dc:	f003 031f 	and.w	r3, r3, #31
 80067e0:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	58024400 	.word	0x58024400
 80067ec:	0800b314 	.word	0x0800b314

080067f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80067f4:	f7ff ffb6 	bl	8006764 <HAL_RCC_GetHCLKFreq>
 80067f8:	4601      	mov	r1, r0
 80067fa:	4b06      	ldr	r3, [pc, #24]	; (8006814 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067fc:	69db      	ldr	r3, [r3, #28]
 80067fe:	0a1b      	lsrs	r3, r3, #8
 8006800:	f003 0307 	and.w	r3, r3, #7
 8006804:	4a04      	ldr	r2, [pc, #16]	; (8006818 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006806:	5cd3      	ldrb	r3, [r2, r3]
 8006808:	f003 031f 	and.w	r3, r3, #31
 800680c:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 8006810:	4618      	mov	r0, r3
 8006812:	bd80      	pop	{r7, pc}
 8006814:	58024400 	.word	0x58024400
 8006818:	0800b314 	.word	0x0800b314

0800681c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006824:	2300      	movs	r3, #0
 8006826:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006828:	2300      	movs	r3, #0
 800682a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006834:	2b00      	cmp	r3, #0
 8006836:	d03d      	beq.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800683c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006840:	d013      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006842:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006846:	d802      	bhi.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006848:	2b00      	cmp	r3, #0
 800684a:	d007      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800684c:	e01f      	b.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800684e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006852:	d013      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006854:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006858:	d01c      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800685a:	e018      	b.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800685c:	4bad      	ldr	r3, [pc, #692]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800685e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006860:	4aac      	ldr	r2, [pc, #688]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006862:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006866:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006868:	e015      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	3304      	adds	r3, #4
 800686e:	2102      	movs	r1, #2
 8006870:	4618      	mov	r0, r3
 8006872:	f001 fca7 	bl	80081c4 <RCCEx_PLL2_Config>
 8006876:	4603      	mov	r3, r0
 8006878:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800687a:	e00c      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	3324      	adds	r3, #36	; 0x24
 8006880:	2102      	movs	r1, #2
 8006882:	4618      	mov	r0, r3
 8006884:	f001 fd50 	bl	8008328 <RCCEx_PLL3_Config>
 8006888:	4603      	mov	r3, r0
 800688a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800688c:	e003      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	75fb      	strb	r3, [r7, #23]
      break;
 8006892:	e000      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006894:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006896:	7dfb      	ldrb	r3, [r7, #23]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d109      	bne.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800689c:	4b9d      	ldr	r3, [pc, #628]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800689e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068a8:	499a      	ldr	r1, [pc, #616]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	650b      	str	r3, [r1, #80]	; 0x50
 80068ae:	e001      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068b0:	7dfb      	ldrb	r3, [r7, #23]
 80068b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d03d      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068c4:	2b04      	cmp	r3, #4
 80068c6:	d826      	bhi.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80068c8:	a201      	add	r2, pc, #4	; (adr r2, 80068d0 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80068ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ce:	bf00      	nop
 80068d0:	080068e5 	.word	0x080068e5
 80068d4:	080068f3 	.word	0x080068f3
 80068d8:	08006905 	.word	0x08006905
 80068dc:	0800691d 	.word	0x0800691d
 80068e0:	0800691d 	.word	0x0800691d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068e4:	4b8b      	ldr	r3, [pc, #556]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80068e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e8:	4a8a      	ldr	r2, [pc, #552]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80068ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80068f0:	e015      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	3304      	adds	r3, #4
 80068f6:	2100      	movs	r1, #0
 80068f8:	4618      	mov	r0, r3
 80068fa:	f001 fc63 	bl	80081c4 <RCCEx_PLL2_Config>
 80068fe:	4603      	mov	r3, r0
 8006900:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006902:	e00c      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	3324      	adds	r3, #36	; 0x24
 8006908:	2100      	movs	r1, #0
 800690a:	4618      	mov	r0, r3
 800690c:	f001 fd0c 	bl	8008328 <RCCEx_PLL3_Config>
 8006910:	4603      	mov	r3, r0
 8006912:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006914:	e003      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	75fb      	strb	r3, [r7, #23]
      break;
 800691a:	e000      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800691c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800691e:	7dfb      	ldrb	r3, [r7, #23]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d109      	bne.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006924:	4b7b      	ldr	r3, [pc, #492]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006928:	f023 0207 	bic.w	r2, r3, #7
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006930:	4978      	ldr	r1, [pc, #480]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006932:	4313      	orrs	r3, r2
 8006934:	650b      	str	r3, [r1, #80]	; 0x50
 8006936:	e001      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006938:	7dfb      	ldrb	r3, [r7, #23]
 800693a:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006944:	2b00      	cmp	r3, #0
 8006946:	d043      	beq.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800694c:	2b80      	cmp	r3, #128	; 0x80
 800694e:	d01f      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8006950:	2b80      	cmp	r3, #128	; 0x80
 8006952:	d804      	bhi.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00b      	beq.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006958:	2b40      	cmp	r3, #64	; 0x40
 800695a:	d010      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x162>
 800695c:	e021      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800695e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006962:	d021      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006964:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006968:	d020      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x190>
 800696a:	2bc0      	cmp	r3, #192	; 0xc0
 800696c:	d020      	beq.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x194>
 800696e:	e018      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006970:	4b68      	ldr	r3, [pc, #416]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006974:	4a67      	ldr	r2, [pc, #412]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800697a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800697c:	e019      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x196>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	3304      	adds	r3, #4
 8006982:	2100      	movs	r1, #0
 8006984:	4618      	mov	r0, r3
 8006986:	f001 fc1d 	bl	80081c4 <RCCEx_PLL2_Config>
 800698a:	4603      	mov	r3, r0
 800698c:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800698e:	e010      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x196>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	3324      	adds	r3, #36	; 0x24
 8006994:	2100      	movs	r1, #0
 8006996:	4618      	mov	r0, r3
 8006998:	f001 fcc6 	bl	8008328 <RCCEx_PLL3_Config>
 800699c:	4603      	mov	r3, r0
 800699e:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80069a0:	e007      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	75fb      	strb	r3, [r7, #23]
      break;
 80069a6:	e004      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 80069a8:	bf00      	nop
 80069aa:	e002      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 80069ac:	bf00      	nop
 80069ae:	e000      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 80069b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069b2:	7dfb      	ldrb	r3, [r7, #23]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d109      	bne.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80069b8:	4b56      	ldr	r3, [pc, #344]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80069ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069bc:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069c4:	4953      	ldr	r1, [pc, #332]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80069c6:	4313      	orrs	r3, r2
 80069c8:	650b      	str	r3, [r1, #80]	; 0x50
 80069ca:	e001      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069cc:	7dfb      	ldrb	r3, [r7, #23]
 80069ce:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d047      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069e4:	d022      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x210>
 80069e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069ea:	d805      	bhi.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00d      	beq.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80069f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069f4:	d011      	beq.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80069f6:	e022      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x222>
 80069f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069fc:	d022      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x228>
 80069fe:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006a02:	d021      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8006a04:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006a08:	d020      	beq.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006a0a:	e018      	b.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x222>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a0c:	4b41      	ldr	r3, [pc, #260]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a10:	4a40      	ldr	r2, [pc, #256]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006a12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006a18:	e019      	b.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x232>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	3304      	adds	r3, #4
 8006a1e:	2100      	movs	r1, #0
 8006a20:	4618      	mov	r0, r3
 8006a22:	f001 fbcf 	bl	80081c4 <RCCEx_PLL2_Config>
 8006a26:	4603      	mov	r3, r0
 8006a28:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006a2a:	e010      	b.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x232>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	3324      	adds	r3, #36	; 0x24
 8006a30:	2100      	movs	r1, #0
 8006a32:	4618      	mov	r0, r3
 8006a34:	f001 fc78 	bl	8008328 <RCCEx_PLL3_Config>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006a3c:	e007      	b.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x232>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	75fb      	strb	r3, [r7, #23]
      break;
 8006a42:	e004      	b.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 8006a44:	bf00      	nop
 8006a46:	e002      	b.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 8006a48:	bf00      	nop
 8006a4a:	e000      	b.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 8006a4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a4e:	7dfb      	ldrb	r3, [r7, #23]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d109      	bne.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8006a54:	4b2f      	ldr	r3, [pc, #188]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a58:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a60:	492c      	ldr	r1, [pc, #176]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006a62:	4313      	orrs	r3, r2
 8006a64:	650b      	str	r3, [r1, #80]	; 0x50
 8006a66:	e001      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x250>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a68:	7dfb      	ldrb	r3, [r7, #23]
 8006a6a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d032      	beq.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a7c:	2b10      	cmp	r3, #16
 8006a7e:	d009      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8006a80:	2b10      	cmp	r3, #16
 8006a82:	d802      	bhi.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d018      	beq.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x29e>
 8006a88:	e014      	b.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006a8a:	2b20      	cmp	r3, #32
 8006a8c:	d009      	beq.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006a8e:	2b30      	cmp	r3, #48	; 0x30
 8006a90:	d015      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 8006a92:	e00f      	b.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x298>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a94:	4b1f      	ldr	r3, [pc, #124]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a98:	4a1e      	ldr	r2, [pc, #120]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006a9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006aa0:	e00e      	b.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	3304      	adds	r3, #4
 8006aa6:	2102      	movs	r1, #2
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f001 fb8b 	bl	80081c4 <RCCEx_PLL2_Config>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006ab2:	e005      	b.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ab8:	e002      	b.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      break;
 8006aba:	bf00      	nop
 8006abc:	e000      	b.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      break;
 8006abe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ac0:	7dfb      	ldrb	r3, [r7, #23]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d109      	bne.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006ac6:	4b13      	ldr	r3, [pc, #76]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ad2:	4910      	ldr	r1, [pc, #64]	; (8006b14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006ad8:	e001      	b.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ada:	7dfb      	ldrb	r3, [r7, #23]
 8006adc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d044      	beq.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006af2:	d021      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8006af4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006af8:	d805      	bhi.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00c      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b02:	d010      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8006b04:	e021      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006b06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b0a:	d021      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x334>
 8006b0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b10:	d020      	beq.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8006b12:	e01a      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006b14:	58024400 	.word	0x58024400
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b18:	4ba6      	ldr	r3, [pc, #664]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1c:	4aa5      	ldr	r2, [pc, #660]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006b1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006b24:	e017      	b.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x33a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	3304      	adds	r3, #4
 8006b2a:	2100      	movs	r1, #0
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f001 fb49 	bl	80081c4 <RCCEx_PLL2_Config>
 8006b32:	4603      	mov	r3, r0
 8006b34:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006b36:	e00e      	b.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x33a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	3324      	adds	r3, #36	; 0x24
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f001 fbf2 	bl	8008328 <RCCEx_PLL3_Config>
 8006b44:	4603      	mov	r3, r0
 8006b46:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006b48:	e005      	b.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x33a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	75fb      	strb	r3, [r7, #23]
      break;
 8006b4e:	e002      	b.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x33a>
      break;
 8006b50:	bf00      	nop
 8006b52:	e000      	b.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x33a>
      break;
 8006b54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b56:	7dfb      	ldrb	r3, [r7, #23]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d109      	bne.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x354>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006b5c:	4b95      	ldr	r3, [pc, #596]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b60:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b68:	4992      	ldr	r1, [pc, #584]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	650b      	str	r3, [r1, #80]	; 0x50
 8006b6e:	e001      	b.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x358>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b70:	7dfb      	ldrb	r3, [r7, #23]
 8006b72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d042      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b88:	d01b      	beq.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 8006b8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b8e:	d805      	bhi.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x380>
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d022      	beq.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x3be>
 8006b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b98:	d00a      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x394>
 8006b9a:	e01b      	b.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8006b9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ba0:	d01d      	beq.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8006ba2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ba6:	d01c      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8006ba8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006bac:	d01b      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8006bae:	e011      	b.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	3304      	adds	r3, #4
 8006bb4:	2101      	movs	r1, #1
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f001 fb04 	bl	80081c4 <RCCEx_PLL2_Config>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006bc0:	e012      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	3324      	adds	r3, #36	; 0x24
 8006bc6:	2101      	movs	r1, #1
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f001 fbad 	bl	8008328 <RCCEx_PLL3_Config>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006bd2:	e009      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8006bd8:	e006      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006bda:	bf00      	nop
 8006bdc:	e004      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006bde:	bf00      	nop
 8006be0:	e002      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006be2:	bf00      	nop
 8006be4:	e000      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006be6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006be8:	7dfb      	ldrb	r3, [r7, #23]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d109      	bne.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006bee:	4b71      	ldr	r3, [pc, #452]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bf2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bfa:	496e      	ldr	r1, [pc, #440]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	650b      	str	r3, [r1, #80]	; 0x50
 8006c00:	e001      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c02:	7dfb      	ldrb	r3, [r7, #23]
 8006c04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d049      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006c18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c1c:	d02a      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8006c1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c22:	d808      	bhi.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006c24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c28:	d00f      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006c2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c2e:	d015      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d021      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8006c34:	e01b      	b.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8006c36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c3a:	d01f      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x460>
 8006c3c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006c40:	d01e      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8006c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c46:	d01d      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8006c48:	e011      	b.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x452>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	3304      	adds	r3, #4
 8006c4e:	2101      	movs	r1, #1
 8006c50:	4618      	mov	r0, r3
 8006c52:	f001 fab7 	bl	80081c4 <RCCEx_PLL2_Config>
 8006c56:	4603      	mov	r3, r0
 8006c58:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006c5a:	e014      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	3324      	adds	r3, #36	; 0x24
 8006c60:	2101      	movs	r1, #1
 8006c62:	4618      	mov	r0, r3
 8006c64:	f001 fb60 	bl	8008328 <RCCEx_PLL3_Config>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006c6c:	e00b      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	75fb      	strb	r3, [r7, #23]
      break;
 8006c72:	e008      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006c74:	bf00      	nop
 8006c76:	e006      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006c78:	bf00      	nop
 8006c7a:	e004      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006c7c:	bf00      	nop
 8006c7e:	e002      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006c80:	bf00      	nop
 8006c82:	e000      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8006c84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c86:	7dfb      	ldrb	r3, [r7, #23]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10a      	bne.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x486>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006c8c:	4b49      	ldr	r3, [pc, #292]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c90:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006c9a:	4946      	ldr	r1, [pc, #280]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	658b      	str	r3, [r1, #88]	; 0x58
 8006ca0:	e001      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ca2:	7dfb      	ldrb	r3, [r7, #23]
 8006ca4:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d02d      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cba:	d005      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8006cbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cc0:	d009      	beq.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d013      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006cc6:	e00f      	b.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cc8:	4b3a      	ldr	r3, [pc, #232]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ccc:	4a39      	ldr	r2, [pc, #228]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006cd4:	e00c      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	3304      	adds	r3, #4
 8006cda:	2101      	movs	r1, #1
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f001 fa71 	bl	80081c4 <RCCEx_PLL2_Config>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006ce6:	e003      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	75fb      	strb	r3, [r7, #23]
      break;
 8006cec:	e000      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      break;
 8006cee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cf0:	7dfb      	ldrb	r3, [r7, #23]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d109      	bne.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006cf6:	4b2f      	ldr	r3, [pc, #188]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cfa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d02:	492c      	ldr	r1, [pc, #176]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006d04:	4313      	orrs	r3, r2
 8006d06:	650b      	str	r3, [r1, #80]	; 0x50
 8006d08:	e001      	b.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d0a:	7dfb      	ldrb	r3, [r7, #23]
 8006d0c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d031      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x562>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d1e:	2b03      	cmp	r3, #3
 8006d20:	d81a      	bhi.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x53c>
 8006d22:	a201      	add	r2, pc, #4	; (adr r2, 8006d28 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d28:	08006d5f 	.word	0x08006d5f
 8006d2c:	08006d39 	.word	0x08006d39
 8006d30:	08006d47 	.word	0x08006d47
 8006d34:	08006d5f 	.word	0x08006d5f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d38:	4b1e      	ldr	r3, [pc, #120]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3c:	4a1d      	ldr	r2, [pc, #116]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006d3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006d44:	e00c      	b.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x544>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	3304      	adds	r3, #4
 8006d4a:	2102      	movs	r1, #2
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f001 fa39 	bl	80081c4 <RCCEx_PLL2_Config>
 8006d52:	4603      	mov	r3, r0
 8006d54:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006d56:	e003      	b.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x544>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	75fb      	strb	r3, [r7, #23]
      break;
 8006d5c:	e000      	b.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x544>
      break;
 8006d5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d60:	7dfb      	ldrb	r3, [r7, #23]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d109      	bne.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006d66:	4b13      	ldr	r3, [pc, #76]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d6a:	f023 0203 	bic.w	r2, r3, #3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d72:	4910      	ldr	r1, [pc, #64]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006d74:	4313      	orrs	r3, r2
 8006d76:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006d78:	e001      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x562>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d7a:	7dfb      	ldrb	r3, [r7, #23]
 8006d7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f000 808a 	beq.w	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x684>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d8c:	4b0a      	ldr	r3, [pc, #40]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a09      	ldr	r2, [pc, #36]	; (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8006d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d98:	f7fa fec6 	bl	8001b28 <HAL_GetTick>
 8006d9c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d9e:	e00d      	b.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006da0:	f7fa fec2 	bl	8001b28 <HAL_GetTick>
 8006da4:	4602      	mov	r2, r0
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	2b64      	cmp	r3, #100	; 0x64
 8006dac:	d906      	bls.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        ret = HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	75fb      	strb	r3, [r7, #23]
        break;
 8006db2:	e009      	b.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8006db4:	58024400 	.word	0x58024400
 8006db8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006dbc:	4bba      	ldr	r3, [pc, #744]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x88c>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d0eb      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      }
    }

    if(ret == HAL_OK)
 8006dc8:	7dfb      	ldrb	r3, [r7, #23]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d166      	bne.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006dce:	4bb7      	ldr	r3, [pc, #732]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006dd0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006dd8:	4053      	eors	r3, r2
 8006dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d013      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006de2:	4bb2      	ldr	r3, [pc, #712]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dea:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006dec:	4baf      	ldr	r3, [pc, #700]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df0:	4aae      	ldr	r2, [pc, #696]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006df2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006df6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006df8:	4bac      	ldr	r3, [pc, #688]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dfc:	4aab      	ldr	r2, [pc, #684]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006dfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e02:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006e04:	4aa9      	ldr	r2, [pc, #676]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e14:	d115      	bne.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x626>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e16:	f7fa fe87 	bl	8001b28 <HAL_GetTick>
 8006e1a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e1c:	e00b      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e1e:	f7fa fe83 	bl	8001b28 <HAL_GetTick>
 8006e22:	4602      	mov	r2, r0
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d902      	bls.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x61a>
          {
            ret = HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	75fb      	strb	r3, [r7, #23]
            break;
 8006e34:	e005      	b.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x626>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e36:	4b9d      	ldr	r3, [pc, #628]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e3a:	f003 0302 	and.w	r3, r3, #2
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d0ed      	beq.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x602>
          }
        }
      }

      if(ret == HAL_OK)
 8006e42:	7dfb      	ldrb	r3, [r7, #23]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d126      	bne.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e56:	d10d      	bne.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x658>
 8006e58:	4b94      	ldr	r3, [pc, #592]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e66:	0919      	lsrs	r1, r3, #4
 8006e68:	4b91      	ldr	r3, [pc, #580]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8006e6a:	400b      	ands	r3, r1
 8006e6c:	498f      	ldr	r1, [pc, #572]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	610b      	str	r3, [r1, #16]
 8006e72:	e005      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006e74:	4b8d      	ldr	r3, [pc, #564]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	4a8c      	ldr	r2, [pc, #560]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006e7a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006e7e:	6113      	str	r3, [r2, #16]
 8006e80:	4b8a      	ldr	r3, [pc, #552]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006e82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e8e:	4987      	ldr	r1, [pc, #540]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006e90:	4313      	orrs	r3, r2
 8006e92:	670b      	str	r3, [r1, #112]	; 0x70
 8006e94:	e004      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x684>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006e96:	7dfb      	ldrb	r3, [r7, #23]
 8006e98:	75bb      	strb	r3, [r7, #22]
 8006e9a:	e001      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x684>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e9c:	7dfb      	ldrb	r3, [r7, #23]
 8006e9e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 0301 	and.w	r3, r3, #1
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d07f      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x790>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006eb2:	2b28      	cmp	r3, #40	; 0x28
 8006eb4:	d866      	bhi.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x768>
 8006eb6:	a201      	add	r2, pc, #4	; (adr r2, 8006ebc <HAL_RCCEx_PeriphCLKConfig+0x6a0>)
 8006eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ebc:	08006f8b 	.word	0x08006f8b
 8006ec0:	08006f85 	.word	0x08006f85
 8006ec4:	08006f85 	.word	0x08006f85
 8006ec8:	08006f85 	.word	0x08006f85
 8006ecc:	08006f85 	.word	0x08006f85
 8006ed0:	08006f85 	.word	0x08006f85
 8006ed4:	08006f85 	.word	0x08006f85
 8006ed8:	08006f85 	.word	0x08006f85
 8006edc:	08006f61 	.word	0x08006f61
 8006ee0:	08006f85 	.word	0x08006f85
 8006ee4:	08006f85 	.word	0x08006f85
 8006ee8:	08006f85 	.word	0x08006f85
 8006eec:	08006f85 	.word	0x08006f85
 8006ef0:	08006f85 	.word	0x08006f85
 8006ef4:	08006f85 	.word	0x08006f85
 8006ef8:	08006f85 	.word	0x08006f85
 8006efc:	08006f73 	.word	0x08006f73
 8006f00:	08006f85 	.word	0x08006f85
 8006f04:	08006f85 	.word	0x08006f85
 8006f08:	08006f85 	.word	0x08006f85
 8006f0c:	08006f85 	.word	0x08006f85
 8006f10:	08006f85 	.word	0x08006f85
 8006f14:	08006f85 	.word	0x08006f85
 8006f18:	08006f85 	.word	0x08006f85
 8006f1c:	08006f8b 	.word	0x08006f8b
 8006f20:	08006f85 	.word	0x08006f85
 8006f24:	08006f85 	.word	0x08006f85
 8006f28:	08006f85 	.word	0x08006f85
 8006f2c:	08006f85 	.word	0x08006f85
 8006f30:	08006f85 	.word	0x08006f85
 8006f34:	08006f85 	.word	0x08006f85
 8006f38:	08006f85 	.word	0x08006f85
 8006f3c:	08006f8b 	.word	0x08006f8b
 8006f40:	08006f85 	.word	0x08006f85
 8006f44:	08006f85 	.word	0x08006f85
 8006f48:	08006f85 	.word	0x08006f85
 8006f4c:	08006f85 	.word	0x08006f85
 8006f50:	08006f85 	.word	0x08006f85
 8006f54:	08006f85 	.word	0x08006f85
 8006f58:	08006f85 	.word	0x08006f85
 8006f5c:	08006f8b 	.word	0x08006f8b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	3304      	adds	r3, #4
 8006f64:	2101      	movs	r1, #1
 8006f66:	4618      	mov	r0, r3
 8006f68:	f001 f92c 	bl	80081c4 <RCCEx_PLL2_Config>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006f70:	e00c      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x770>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	3324      	adds	r3, #36	; 0x24
 8006f76:	2101      	movs	r1, #1
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f001 f9d5 	bl	8008328 <RCCEx_PLL3_Config>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006f82:	e003      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x770>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	75fb      	strb	r3, [r7, #23]
      break;
 8006f88:	e000      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x770>
      break;
 8006f8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f8c:	7dfb      	ldrb	r3, [r7, #23]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d10a      	bne.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x78c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006f92:	4b46      	ldr	r3, [pc, #280]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f96:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fa0:	4942      	ldr	r1, [pc, #264]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	654b      	str	r3, [r1, #84]	; 0x54
 8006fa6:	e001      	b.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x790>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fa8:	7dfb      	ldrb	r3, [r7, #23]
 8006faa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 0302 	and.w	r3, r3, #2
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d038      	beq.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x80e>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fbc:	2b05      	cmp	r3, #5
 8006fbe:	d821      	bhi.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
 8006fc0:	a201      	add	r2, pc, #4	; (adr r2, 8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x7ac>)
 8006fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc6:	bf00      	nop
 8006fc8:	0800700b 	.word	0x0800700b
 8006fcc:	08006fe1 	.word	0x08006fe1
 8006fd0:	08006ff3 	.word	0x08006ff3
 8006fd4:	0800700b 	.word	0x0800700b
 8006fd8:	0800700b 	.word	0x0800700b
 8006fdc:	0800700b 	.word	0x0800700b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	3304      	adds	r3, #4
 8006fe4:	2101      	movs	r1, #1
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f001 f8ec 	bl	80081c4 <RCCEx_PLL2_Config>
 8006fec:	4603      	mov	r3, r0
 8006fee:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006ff0:	e00c      	b.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x7f0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	3324      	adds	r3, #36	; 0x24
 8006ff6:	2101      	movs	r1, #1
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f001 f995 	bl	8008328 <RCCEx_PLL3_Config>
 8006ffe:	4603      	mov	r3, r0
 8007000:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007002:	e003      	b.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	75fb      	strb	r3, [r7, #23]
      break;
 8007008:	e000      	b.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      break;
 800700a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800700c:	7dfb      	ldrb	r3, [r7, #23]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d109      	bne.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007012:	4b26      	ldr	r3, [pc, #152]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8007014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007016:	f023 0207 	bic.w	r2, r3, #7
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800701e:	4923      	ldr	r1, [pc, #140]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8007020:	4313      	orrs	r3, r2
 8007022:	654b      	str	r3, [r1, #84]	; 0x54
 8007024:	e001      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x80e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007026:	7dfb      	ldrb	r3, [r7, #23]
 8007028:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 0304 	and.w	r3, r3, #4
 8007032:	2b00      	cmp	r3, #0
 8007034:	d040      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x89c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800703c:	2b05      	cmp	r3, #5
 800703e:	d821      	bhi.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x868>
 8007040:	a201      	add	r2, pc, #4	; (adr r2, 8007048 <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 8007042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007046:	bf00      	nop
 8007048:	0800708b 	.word	0x0800708b
 800704c:	08007061 	.word	0x08007061
 8007050:	08007073 	.word	0x08007073
 8007054:	0800708b 	.word	0x0800708b
 8007058:	0800708b 	.word	0x0800708b
 800705c:	0800708b 	.word	0x0800708b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	3304      	adds	r3, #4
 8007064:	2101      	movs	r1, #1
 8007066:	4618      	mov	r0, r3
 8007068:	f001 f8ac 	bl	80081c4 <RCCEx_PLL2_Config>
 800706c:	4603      	mov	r3, r0
 800706e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007070:	e00c      	b.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x870>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	3324      	adds	r3, #36	; 0x24
 8007076:	2101      	movs	r1, #1
 8007078:	4618      	mov	r0, r3
 800707a:	f001 f955 	bl	8008328 <RCCEx_PLL3_Config>
 800707e:	4603      	mov	r3, r0
 8007080:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007082:	e003      	b.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x870>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	75fb      	strb	r3, [r7, #23]
      break;
 8007088:	e000      	b.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x870>
      break;
 800708a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800708c:	7dfb      	ldrb	r3, [r7, #23]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d110      	bne.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x898>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007092:	4b06      	ldr	r3, [pc, #24]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8007094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007096:	f023 0207 	bic.w	r2, r3, #7
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80070a0:	4902      	ldr	r1, [pc, #8]	; (80070ac <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80070a2:	4313      	orrs	r3, r2
 80070a4:	658b      	str	r3, [r1, #88]	; 0x58
 80070a6:	e007      	b.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 80070a8:	58024800 	.word	0x58024800
 80070ac:	58024400 	.word	0x58024400
 80070b0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b4:	7dfb      	ldrb	r3, [r7, #23]
 80070b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0320 	and.w	r3, r3, #32
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d044      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070ce:	d01b      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80070d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070d4:	d805      	bhi.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d022      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x904>
 80070da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070de:	d00a      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
 80070e0:	e01b      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 80070e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070e6:	d01d      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x908>
 80070e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070ec:	d01c      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x90c>
 80070ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80070f2:	d01b      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x910>
 80070f4:	e011      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	3304      	adds	r3, #4
 80070fa:	2100      	movs	r1, #0
 80070fc:	4618      	mov	r0, r3
 80070fe:	f001 f861 	bl	80081c4 <RCCEx_PLL2_Config>
 8007102:	4603      	mov	r3, r0
 8007104:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007106:	e012      	b.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x912>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	3324      	adds	r3, #36	; 0x24
 800710c:	2102      	movs	r1, #2
 800710e:	4618      	mov	r0, r3
 8007110:	f001 f90a 	bl	8008328 <RCCEx_PLL3_Config>
 8007114:	4603      	mov	r3, r0
 8007116:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007118:	e009      	b.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	75fb      	strb	r3, [r7, #23]
      break;
 800711e:	e006      	b.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8007120:	bf00      	nop
 8007122:	e004      	b.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8007124:	bf00      	nop
 8007126:	e002      	b.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8007128:	bf00      	nop
 800712a:	e000      	b.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 800712c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800712e:	7dfb      	ldrb	r3, [r7, #23]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d10a      	bne.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007134:	4bb3      	ldr	r3, [pc, #716]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007138:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007142:	49b0      	ldr	r1, [pc, #704]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007144:	4313      	orrs	r3, r2
 8007146:	654b      	str	r3, [r1, #84]	; 0x54
 8007148:	e001      	b.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x932>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800714a:	7dfb      	ldrb	r3, [r7, #23]
 800714c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007156:	2b00      	cmp	r3, #0
 8007158:	d044      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007160:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007164:	d01b      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x982>
 8007166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800716a:	d805      	bhi.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800716c:	2b00      	cmp	r3, #0
 800716e:	d022      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x99a>
 8007170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007174:	d00a      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x970>
 8007176:	e01b      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x994>
 8007178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800717c:	d01d      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x99e>
 800717e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007182:	d01c      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8007184:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007188:	d01b      	beq.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 800718a:	e011      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x994>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	3304      	adds	r3, #4
 8007190:	2100      	movs	r1, #0
 8007192:	4618      	mov	r0, r3
 8007194:	f001 f816 	bl	80081c4 <RCCEx_PLL2_Config>
 8007198:	4603      	mov	r3, r0
 800719a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800719c:	e012      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	3324      	adds	r3, #36	; 0x24
 80071a2:	2102      	movs	r1, #2
 80071a4:	4618      	mov	r0, r3
 80071a6:	f001 f8bf 	bl	8008328 <RCCEx_PLL3_Config>
 80071aa:	4603      	mov	r3, r0
 80071ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80071ae:	e009      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	75fb      	strb	r3, [r7, #23]
      break;
 80071b4:	e006      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 80071b6:	bf00      	nop
 80071b8:	e004      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 80071ba:	bf00      	nop
 80071bc:	e002      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 80071be:	bf00      	nop
 80071c0:	e000      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 80071c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071c4:	7dfb      	ldrb	r3, [r7, #23]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10a      	bne.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x9c4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80071ca:	4b8e      	ldr	r3, [pc, #568]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80071cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071ce:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80071d8:	498a      	ldr	r1, [pc, #552]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80071da:	4313      	orrs	r3, r2
 80071dc:	658b      	str	r3, [r1, #88]	; 0x58
 80071de:	e001      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e0:	7dfb      	ldrb	r3, [r7, #23]
 80071e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d044      	beq.n	800727a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80071f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071fa:	d01b      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0xa18>
 80071fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007200:	d805      	bhi.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8007202:	2b00      	cmp	r3, #0
 8007204:	d022      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800720a:	d00a      	beq.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800720c:	e01b      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 800720e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007212:	d01d      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8007214:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007218:	d01c      	beq.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0xa38>
 800721a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800721e:	d01b      	beq.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 8007220:	e011      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	3304      	adds	r3, #4
 8007226:	2100      	movs	r1, #0
 8007228:	4618      	mov	r0, r3
 800722a:	f000 ffcb 	bl	80081c4 <RCCEx_PLL2_Config>
 800722e:	4603      	mov	r3, r0
 8007230:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007232:	e012      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	3324      	adds	r3, #36	; 0x24
 8007238:	2102      	movs	r1, #2
 800723a:	4618      	mov	r0, r3
 800723c:	f001 f874 	bl	8008328 <RCCEx_PLL3_Config>
 8007240:	4603      	mov	r3, r0
 8007242:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007244:	e009      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	75fb      	strb	r3, [r7, #23]
      break;
 800724a:	e006      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 800724c:	bf00      	nop
 800724e:	e004      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 8007250:	bf00      	nop
 8007252:	e002      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 8007254:	bf00      	nop
 8007256:	e000      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 8007258:	bf00      	nop
    }

    if(ret == HAL_OK)
 800725a:	7dfb      	ldrb	r3, [r7, #23]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10a      	bne.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007260:	4b68      	ldr	r3, [pc, #416]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007264:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800726e:	4965      	ldr	r1, [pc, #404]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007270:	4313      	orrs	r3, r2
 8007272:	658b      	str	r3, [r1, #88]	; 0x58
 8007274:	e001      	b.n	800727a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007276:	7dfb      	ldrb	r3, [r7, #23]
 8007278:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 0308 	and.w	r3, r3, #8
 8007282:	2b00      	cmp	r3, #0
 8007284:	d01a      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0xaa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800728c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007290:	d10a      	bne.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	3324      	adds	r3, #36	; 0x24
 8007296:	2102      	movs	r1, #2
 8007298:	4618      	mov	r0, r3
 800729a:	f001 f845 	bl	8008328 <RCCEx_PLL3_Config>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d001      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
        {
          status = HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80072a8:	4b56      	ldr	r3, [pc, #344]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80072aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072b6:	4953      	ldr	r1, [pc, #332]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80072b8:	4313      	orrs	r3, r2
 80072ba:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0310 	and.w	r3, r3, #16
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d01a      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0xae2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80072ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072d2:	d10a      	bne.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	3324      	adds	r3, #36	; 0x24
 80072d8:	2102      	movs	r1, #2
 80072da:	4618      	mov	r0, r3
 80072dc:	f001 f824 	bl	8008328 <RCCEx_PLL3_Config>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d001      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0xace>
      {
        status = HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80072ea:	4b46      	ldr	r3, [pc, #280]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80072ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80072f8:	4942      	ldr	r1, [pc, #264]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80072fa:	4313      	orrs	r3, r2
 80072fc:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d030      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007314:	d00d      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0xb16>
 8007316:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800731a:	d016      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800731c:	2b00      	cmp	r3, #0
 800731e:	d111      	bne.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0xb28>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	3304      	adds	r3, #4
 8007324:	2100      	movs	r1, #0
 8007326:	4618      	mov	r0, r3
 8007328:	f000 ff4c 	bl	80081c4 <RCCEx_PLL2_Config>
 800732c:	4603      	mov	r3, r0
 800732e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007330:	e00c      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	3324      	adds	r3, #36	; 0x24
 8007336:	2102      	movs	r1, #2
 8007338:	4618      	mov	r0, r3
 800733a:	f000 fff5 	bl	8008328 <RCCEx_PLL3_Config>
 800733e:	4603      	mov	r3, r0
 8007340:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007342:	e003      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	75fb      	strb	r3, [r7, #23]
      break;
 8007348:	e000      	b.n	800734c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800734a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800734c:	7dfb      	ldrb	r3, [r7, #23]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d10a      	bne.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007352:	4b2c      	ldr	r3, [pc, #176]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007356:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007360:	4928      	ldr	r1, [pc, #160]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007362:	4313      	orrs	r3, r2
 8007364:	658b      	str	r3, [r1, #88]	; 0x58
 8007366:	e001      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007368:	7dfb      	ldrb	r3, [r7, #23]
 800736a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007374:	2b00      	cmp	r3, #0
 8007376:	d02f      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800737e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007382:	d00c      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007384:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007388:	d015      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0xb9a>
 800738a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800738e:	d10f      	bne.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0xb94>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007390:	4b1c      	ldr	r3, [pc, #112]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007394:	4a1b      	ldr	r2, [pc, #108]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007396:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800739a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800739c:	e00c      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	3324      	adds	r3, #36	; 0x24
 80073a2:	2101      	movs	r1, #1
 80073a4:	4618      	mov	r0, r3
 80073a6:	f000 ffbf 	bl	8008328 <RCCEx_PLL3_Config>
 80073aa:	4603      	mov	r3, r0
 80073ac:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80073ae:	e003      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	75fb      	strb	r3, [r7, #23]
      break;
 80073b4:	e000      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      break;
 80073b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073b8:	7dfb      	ldrb	r3, [r7, #23]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d10a      	bne.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80073be:	4b11      	ldr	r3, [pc, #68]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80073c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073cc:	490d      	ldr	r1, [pc, #52]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80073ce:	4313      	orrs	r3, r2
 80073d0:	654b      	str	r3, [r1, #84]	; 0x54
 80073d2:	e001      	b.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073d4:	7dfb      	ldrb	r3, [r7, #23]
 80073d6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d02c      	beq.n	800743e <HAL_RCCEx_PeriphCLKConfig+0xc22>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d003      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 80073ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073f0:	d00a      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 80073f2:	e012      	b.n	800741a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073f4:	4b03      	ldr	r3, [pc, #12]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80073f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f8:	4a02      	ldr	r2, [pc, #8]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80073fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007400:	e00e      	b.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0xc04>
 8007402:	bf00      	nop
 8007404:	58024400 	.word	0x58024400

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	3304      	adds	r3, #4
 800740c:	2102      	movs	r1, #2
 800740e:	4618      	mov	r0, r3
 8007410:	f000 fed8 	bl	80081c4 <RCCEx_PLL2_Config>
 8007414:	4603      	mov	r3, r0
 8007416:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007418:	e002      	b.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0xc04>

    default:
      ret = HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	75fb      	strb	r3, [r7, #23]
      break;
 800741e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007420:	7dfb      	ldrb	r3, [r7, #23]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d109      	bne.n	800743a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007426:	4b56      	ldr	r3, [pc, #344]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800742a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007432:	4953      	ldr	r1, [pc, #332]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007434:	4313      	orrs	r3, r2
 8007436:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007438:	e001      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800743a:	7dfb      	ldrb	r3, [r7, #23]
 800743c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00a      	beq.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0xc44>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	3324      	adds	r3, #36	; 0x24
 800744e:	2102      	movs	r1, #2
 8007450:	4618      	mov	r0, r3
 8007452:	f000 ff69 	bl	8008328 <RCCEx_PLL3_Config>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d001      	beq.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0xc44>
    {
      status=HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007468:	2b00      	cmp	r3, #0
 800746a:	d031      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007476:	d00c      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8007478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800747c:	d802      	bhi.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800747e:	2b00      	cmp	r3, #0
 8007480:	d011      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0xc8a>
 8007482:	e00d      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8007484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007488:	d00f      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0xc8e>
 800748a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800748e:	d00e      	beq.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007490:	e006      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007492:	4b3b      	ldr	r3, [pc, #236]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007496:	4a3a      	ldr	r2, [pc, #232]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800749c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800749e:	e007      	b.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	75fb      	strb	r3, [r7, #23]
      break;
 80074a4:	e004      	b.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 80074a6:	bf00      	nop
 80074a8:	e002      	b.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 80074aa:	bf00      	nop
 80074ac:	e000      	b.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 80074ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074b0:	7dfb      	ldrb	r3, [r7, #23]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d10a      	bne.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80074b6:	4b32      	ldr	r3, [pc, #200]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80074b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074c4:	492e      	ldr	r1, [pc, #184]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80074c6:	4313      	orrs	r3, r2
 80074c8:	654b      	str	r3, [r1, #84]	; 0x54
 80074ca:	e001      	b.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074cc:	7dfb      	ldrb	r3, [r7, #23]
 80074ce:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d008      	beq.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80074dc:	4b28      	ldr	r3, [pc, #160]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80074de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074e8:	4925      	ldr	r1, [pc, #148]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80074ea:	4313      	orrs	r3, r2
 80074ec:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d008      	beq.n	800750c <HAL_RCCEx_PeriphCLKConfig+0xcf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80074fa:	4b21      	ldr	r3, [pc, #132]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80074fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074fe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007506:	491e      	ldr	r1, [pc, #120]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007508:	4313      	orrs	r3, r2
 800750a:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007514:	2b00      	cmp	r3, #0
 8007516:	d008      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007518:	4b19      	ldr	r3, [pc, #100]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800751a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800751c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007524:	4916      	ldr	r1, [pc, #88]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007526:	4313      	orrs	r3, r2
 8007528:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00d      	beq.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0xd36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007536:	4b12      	ldr	r3, [pc, #72]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	4a11      	ldr	r2, [pc, #68]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800753c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007540:	6113      	str	r3, [r2, #16]
 8007542:	4b0f      	ldr	r3, [pc, #60]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007544:	691a      	ldr	r2, [r3, #16]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800754c:	490c      	ldr	r1, [pc, #48]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800754e:	4313      	orrs	r3, r2
 8007550:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	da08      	bge.n	800756c <HAL_RCCEx_PeriphCLKConfig+0xd50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800755a:	4b09      	ldr	r3, [pc, #36]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800755c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800755e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007566:	4906      	ldr	r1, [pc, #24]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007568:	4313      	orrs	r3, r2
 800756a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800756c:	7dbb      	ldrb	r3, [r7, #22]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d101      	bne.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    return HAL_OK;
 8007572:	2300      	movs	r3, #0
 8007574:	e000      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
  }
  return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
}
 8007578:	4618      	mov	r0, r3
 800757a:	3718      	adds	r7, #24
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	58024400 	.word	0x58024400

08007584 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b090      	sub	sp, #64	; 0x40
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007592:	d150      	bne.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007594:	4ba1      	ldr	r3, [pc, #644]	; (800781c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007598:	f003 0307 	and.w	r3, r3, #7
 800759c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800759e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a0:	2b04      	cmp	r3, #4
 80075a2:	d844      	bhi.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 80075a4:	a201      	add	r2, pc, #4	; (adr r2, 80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80075a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075aa:	bf00      	nop
 80075ac:	080075c1 	.word	0x080075c1
 80075b0:	080075d1 	.word	0x080075d1
 80075b4:	080075e1 	.word	0x080075e1
 80075b8:	08007629 	.word	0x08007629
 80075bc:	080075f1 	.word	0x080075f1
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075c4:	4618      	mov	r0, r3
 80075c6:	f000 fcb1 	bl	8007f2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80075ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075ce:	e1ef      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075d0:	f107 0318 	add.w	r3, r7, #24
 80075d4:	4618      	mov	r0, r3
 80075d6:	f000 fa11 	bl	80079fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075de:	e1e7      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075e0:	f107 030c 	add.w	r3, r7, #12
 80075e4:	4618      	mov	r0, r3
 80075e6:	f000 fb55 	bl	8007c94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075ee:	e1df      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80075f0:	4b8a      	ldr	r3, [pc, #552]	; (800781c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80075f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80075f8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80075fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d102      	bne.n	8007606 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007600:	4b87      	ldr	r3, [pc, #540]	; (8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007602:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007604:	e1d4      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007608:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800760c:	d102      	bne.n	8007614 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800760e:	4b85      	ldr	r3, [pc, #532]	; (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007610:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007612:	e1cd      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007616:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800761a:	d102      	bne.n	8007622 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 800761c:	4b82      	ldr	r3, [pc, #520]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800761e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007620:	e1c6      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 8007622:	2300      	movs	r3, #0
 8007624:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007626:	e1c3      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007628:	4b80      	ldr	r3, [pc, #512]	; (800782c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800762a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800762c:	e1c0      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      default :
        {
          frequency = 0;
 800762e:	2300      	movs	r3, #0
 8007630:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007632:	bf00      	nop
 8007634:	e1bc      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800763c:	d14f      	bne.n	80076de <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 800763e:	4b77      	ldr	r3, [pc, #476]	; (800781c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007642:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007646:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764a:	2b80      	cmp	r3, #128	; 0x80
 800764c:	d01c      	beq.n	8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800764e:	2b80      	cmp	r3, #128	; 0x80
 8007650:	d804      	bhi.n	800765c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007652:	2b00      	cmp	r3, #0
 8007654:	d008      	beq.n	8007668 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8007656:	2b40      	cmp	r3, #64	; 0x40
 8007658:	d00e      	beq.n	8007678 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800765a:	e03c      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800765c:	2bc0      	cmp	r3, #192	; 0xc0
 800765e:	d037      	beq.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007664:	d018      	beq.n	8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8007666:	e036      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800766c:	4618      	mov	r0, r3
 800766e:	f000 fc5d 	bl	8007f2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007674:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007676:	e19b      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007678:	f107 0318 	add.w	r3, r7, #24
 800767c:	4618      	mov	r0, r3
 800767e:	f000 f9bd 	bl	80079fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007686:	e193      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007688:	f107 030c 	add.w	r3, r7, #12
 800768c:	4618      	mov	r0, r3
 800768e:	f000 fb01 	bl	8007c94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007696:	e18b      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007698:	4b60      	ldr	r3, [pc, #384]	; (800781c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800769a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800769c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80076a0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80076a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d102      	bne.n	80076ae <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80076a8:	4b5d      	ldr	r3, [pc, #372]	; (8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80076aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80076ac:	e180      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80076ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076b4:	d102      	bne.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 80076b6:	4b5b      	ldr	r3, [pc, #364]	; (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80076b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076ba:	e179      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80076bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076c2:	d102      	bne.n	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 80076c4:	4b58      	ldr	r3, [pc, #352]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80076c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076c8:	e172      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 80076ca:	2300      	movs	r3, #0
 80076cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076ce:	e16f      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80076d0:	4b56      	ldr	r3, [pc, #344]	; (800782c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80076d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076d4:	e16c      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 80076d6:	2300      	movs	r3, #0
 80076d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076da:	bf00      	nop
 80076dc:	e168      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076e4:	d153      	bne.n	800778e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 80076e6:	4b4d      	ldr	r3, [pc, #308]	; (800781c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80076e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076ea:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80076ee:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80076f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076f6:	d01f      	beq.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80076f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076fc:	d805      	bhi.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00a      	beq.n	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8007702:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007706:	d00f      	beq.n	8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8007708:	e03d      	b.n	8007786 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800770a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800770e:	d037      	beq.n	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8007710:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007714:	d018      	beq.n	8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8007716:	e036      	b.n	8007786 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800771c:	4618      	mov	r0, r3
 800771e:	f000 fc05 	bl	8007f2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007724:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007726:	e143      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007728:	f107 0318 	add.w	r3, r7, #24
 800772c:	4618      	mov	r0, r3
 800772e:	f000 f965 	bl	80079fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007736:	e13b      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007738:	f107 030c 	add.w	r3, r7, #12
 800773c:	4618      	mov	r0, r3
 800773e:	f000 faa9 	bl	8007c94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007746:	e133      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007748:	4b34      	ldr	r3, [pc, #208]	; (800781c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800774a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800774c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007750:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007754:	2b00      	cmp	r3, #0
 8007756:	d102      	bne.n	800775e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007758:	4b31      	ldr	r3, [pc, #196]	; (8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800775a:	63fb      	str	r3, [r7, #60]	; 0x3c
          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }
          break;
 800775c:	e128      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800775e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007760:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007764:	d102      	bne.n	800776c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8007766:	4b2f      	ldr	r3, [pc, #188]	; (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007768:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800776a:	e121      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800776c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800776e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007772:	d102      	bne.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8007774:	4b2c      	ldr	r3, [pc, #176]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007776:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007778:	e11a      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 800777a:	2300      	movs	r3, #0
 800777c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800777e:	e117      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007780:	4b2a      	ldr	r3, [pc, #168]	; (800782c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007782:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007784:	e114      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 8007786:	2300      	movs	r3, #0
 8007788:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800778a:	bf00      	nop
 800778c:	e110      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007794:	d15d      	bne.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007796:	4b21      	ldr	r3, [pc, #132]	; (800781c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800779a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800779e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80077a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077a6:	d01f      	beq.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80077a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077ac:	d805      	bhi.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00a      	beq.n	80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80077b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077b6:	d00f      	beq.n	80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80077b8:	e047      	b.n	800784a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 80077ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80077be:	d041      	beq.n	8007844 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 80077c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077c4:	d018      	beq.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80077c6:	e040      	b.n	800784a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80077c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077cc:	4618      	mov	r0, r3
 80077ce:	f000 fbad 	bl	8007f2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80077d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077d6:	e0eb      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077d8:	f107 0318 	add.w	r3, r7, #24
 80077dc:	4618      	mov	r0, r3
 80077de:	f000 f90d 	bl	80079fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077e6:	e0e3      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077e8:	f107 030c 	add.w	r3, r7, #12
 80077ec:	4618      	mov	r0, r3
 80077ee:	f000 fa51 	bl	8007c94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077f6:	e0db      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80077f8:	4b08      	ldr	r3, [pc, #32]	; (800781c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80077fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007800:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007804:	2b00      	cmp	r3, #0
 8007806:	d102      	bne.n	800780e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007808:	4b05      	ldr	r3, [pc, #20]	; (8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800780a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800780c:	e0d0      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800780e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007810:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007814:	d10c      	bne.n	8007830 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8007816:	4b03      	ldr	r3, [pc, #12]	; (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007818:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800781a:	e0c9      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
 800781c:	58024400 	.word	0x58024400
 8007820:	03d09000 	.word	0x03d09000
 8007824:	003d0900 	.word	0x003d0900
 8007828:	007a1200 	.word	0x007a1200
 800782c:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007832:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007836:	d102      	bne.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8007838:	4b60      	ldr	r3, [pc, #384]	; (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 800783a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800783c:	e0b8      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 800783e:	2300      	movs	r3, #0
 8007840:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007842:	e0b5      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007844:	4b5e      	ldr	r3, [pc, #376]	; (80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 8007846:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007848:	e0b2      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      default :
        {
          frequency = 0;
 800784a:	2300      	movs	r3, #0
 800784c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800784e:	bf00      	nop
 8007850:	e0ae      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007858:	d13d      	bne.n	80078d6 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800785a:	4b5a      	ldr	r3, [pc, #360]	; (80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 800785c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800785e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007862:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800786a:	d00c      	beq.n	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800786c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007870:	d011      	beq.n	8007896 <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 8007872:	2b00      	cmp	r3, #0
 8007874:	d12b      	bne.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007876:	f107 0318 	add.w	r3, r7, #24
 800787a:	4618      	mov	r0, r3
 800787c:	f000 f8be 	bl	80079fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007884:	e094      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007886:	f107 030c 	add.w	r3, r7, #12
 800788a:	4618      	mov	r0, r3
 800788c:	f000 fa02 	bl	8007c94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007894:	e08c      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007896:	4b4b      	ldr	r3, [pc, #300]	; (80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8007898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800789a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800789e:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80078a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d102      	bne.n	80078ac <HAL_RCCEx_GetPeriphCLKFreq+0x328>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80078a6:	4b48      	ldr	r3, [pc, #288]	; (80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x444>)
 80078a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80078aa:	e081      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80078ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078b2:	d102      	bne.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0x336>
            frequency = CSI_VALUE;
 80078b4:	4b45      	ldr	r3, [pc, #276]	; (80079cc <HAL_RCCEx_GetPeriphCLKFreq+0x448>)
 80078b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078b8:	e07a      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80078ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078c0:	d102      	bne.n	80078c8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
            frequency = HSE_VALUE;
 80078c2:	4b3e      	ldr	r3, [pc, #248]	; (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80078c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078c6:	e073      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 80078c8:	2300      	movs	r3, #0
 80078ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078cc:	e070      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 80078ce:	2300      	movs	r3, #0
 80078d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078d2:	bf00      	nop
 80078d4:	e06c      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078dc:	d11f      	bne.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80078de:	4b39      	ldr	r3, [pc, #228]	; (80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 80078e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078e6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80078e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d003      	beq.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80078ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078f2:	d008      	beq.n	8007906 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
 80078f4:	e00f      	b.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x392>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078fa:	4618      	mov	r0, r3
 80078fc:	f000 fb16 	bl	8007f2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007902:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007904:	e054      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007906:	f107 0318 	add.w	r3, r7, #24
 800790a:	4618      	mov	r0, r3
 800790c:	f000 f876 	bl	80079fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007910:	6a3b      	ldr	r3, [r7, #32]
 8007912:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007914:	e04c      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 8007916:	2300      	movs	r3, #0
 8007918:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800791a:	bf00      	nop
 800791c:	e048      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007924:	d142      	bne.n	80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x428>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007926:	4b27      	ldr	r3, [pc, #156]	; (80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8007928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800792a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800792e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007932:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007936:	d029      	beq.n	800798c <HAL_RCCEx_GetPeriphCLKFreq+0x408>
 8007938:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800793c:	d808      	bhi.n	8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800793e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007942:	d013      	beq.n	800796c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007944:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007948:	d018      	beq.n	800797c <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00a      	beq.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 800794e:	e029      	b.n	80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 8007950:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007954:	d020      	beq.n	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8007956:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800795a:	d020      	beq.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 800795c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007960:	d017      	beq.n	8007992 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8007962:	e01f      	b.n	80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007964:	f000 f834 	bl	80079d0 <HAL_RCCEx_GetD3PCLK1Freq>
 8007968:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800796a:	e021      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800796c:	f107 0318 	add.w	r3, r7, #24
 8007970:	4618      	mov	r0, r3
 8007972:	f000 f843 	bl	80079fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007976:	69fb      	ldr	r3, [r7, #28]
 8007978:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800797a:	e019      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800797c:	f107 030c 	add.w	r3, r7, #12
 8007980:	4618      	mov	r0, r3
 8007982:	f000 f987 	bl	8007c94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800798a:	e011      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800798c:	4b0e      	ldr	r3, [pc, #56]	; (80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x444>)
 800798e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007990:	e00e      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8007992:	4b0e      	ldr	r3, [pc, #56]	; (80079cc <HAL_RCCEx_GetPeriphCLKFreq+0x448>)
 8007994:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007996:	e00b      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8007998:	4b08      	ldr	r3, [pc, #32]	; (80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 800799a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800799c:	e008      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800799e:	4b08      	ldr	r3, [pc, #32]	; (80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 80079a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079a2:	e005      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80079a4:	2300      	movs	r3, #0
 80079a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079a8:	bf00      	nop
 80079aa:	e001      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else
    {
      frequency = 0;
 80079ac:	2300      	movs	r3, #0
 80079ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80079b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3740      	adds	r7, #64	; 0x40
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	007a1200 	.word	0x007a1200
 80079c0:	00bb8000 	.word	0x00bb8000
 80079c4:	58024400 	.word	0x58024400
 80079c8:	03d09000 	.word	0x03d09000
 80079cc:	003d0900 	.word	0x003d0900

080079d0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80079d4:	f7fe fec6 	bl	8006764 <HAL_RCC_GetHCLKFreq>
 80079d8:	4601      	mov	r1, r0
 80079da:	4b06      	ldr	r3, [pc, #24]	; (80079f4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80079dc:	6a1b      	ldr	r3, [r3, #32]
 80079de:	091b      	lsrs	r3, r3, #4
 80079e0:	f003 0307 	and.w	r3, r3, #7
 80079e4:	4a04      	ldr	r2, [pc, #16]	; (80079f8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80079e6:	5cd3      	ldrb	r3, [r2, r3]
 80079e8:	f003 031f 	and.w	r3, r3, #31
 80079ec:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	58024400 	.word	0x58024400
 80079f8:	0800b314 	.word	0x0800b314

080079fc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b089      	sub	sp, #36	; 0x24
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a04:	4b9d      	ldr	r3, [pc, #628]	; (8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a08:	f003 0303 	and.w	r3, r3, #3
 8007a0c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007a0e:	4b9b      	ldr	r3, [pc, #620]	; (8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a12:	0b1b      	lsrs	r3, r3, #12
 8007a14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a18:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007a1a:	4b98      	ldr	r3, [pc, #608]	; (8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a1e:	091b      	lsrs	r3, r3, #4
 8007a20:	f003 0301 	and.w	r3, r3, #1
 8007a24:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007a26:	4b95      	ldr	r3, [pc, #596]	; (8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a2a:	08db      	lsrs	r3, r3, #3
 8007a2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a30:	693a      	ldr	r2, [r7, #16]
 8007a32:	fb02 f303 	mul.w	r3, r2, r3
 8007a36:	ee07 3a90 	vmov	s15, r3
 8007a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a3e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	f000 810a 	beq.w	8007c5e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d05a      	beq.n	8007b06 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d302      	bcc.n	8007a5a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	d078      	beq.n	8007b4a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8007a58:	e099      	b.n	8007b8e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a5a:	4b88      	ldr	r3, [pc, #544]	; (8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 0320 	and.w	r3, r3, #32
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d02d      	beq.n	8007ac2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007a66:	4b85      	ldr	r3, [pc, #532]	; (8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	08db      	lsrs	r3, r3, #3
 8007a6c:	f003 0303 	and.w	r3, r3, #3
 8007a70:	4a83      	ldr	r2, [pc, #524]	; (8007c80 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007a72:	fa22 f303 	lsr.w	r3, r2, r3
 8007a76:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	ee07 3a90 	vmov	s15, r3
 8007a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	ee07 3a90 	vmov	s15, r3
 8007a88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a90:	4b7a      	ldr	r3, [pc, #488]	; (8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a98:	ee07 3a90 	vmov	s15, r3
 8007a9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aa0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007aa4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007c84 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007aa8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007aac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ab0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ab4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007abc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007ac0:	e087      	b.n	8007bd2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	ee07 3a90 	vmov	s15, r3
 8007ac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007acc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007c88 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007ad0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ad4:	4b69      	ldr	r3, [pc, #420]	; (8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007adc:	ee07 3a90 	vmov	s15, r3
 8007ae0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ae4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ae8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007c84 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007aec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007af0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007af4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007af8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007afc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b00:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b04:	e065      	b.n	8007bd2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	ee07 3a90 	vmov	s15, r3
 8007b0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b10:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007b14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b18:	4b58      	ldr	r3, [pc, #352]	; (8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b20:	ee07 3a90 	vmov	s15, r3
 8007b24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b28:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b2c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007c84 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007b30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b44:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b48:	e043      	b.n	8007bd2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	ee07 3a90 	vmov	s15, r3
 8007b50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b54:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007c90 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8007b58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b5c:	4b47      	ldr	r3, [pc, #284]	; (8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b64:	ee07 3a90 	vmov	s15, r3
 8007b68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b70:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007c84 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007b74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b88:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b8c:	e021      	b.n	8007bd2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	ee07 3a90 	vmov	s15, r3
 8007b94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b98:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007b9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ba0:	4b36      	ldr	r3, [pc, #216]	; (8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ba8:	ee07 3a90 	vmov	s15, r3
 8007bac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bb0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bb4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007c84 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007bb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bcc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007bd0:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007bd2:	4b2a      	ldr	r3, [pc, #168]	; (8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd6:	0a5b      	lsrs	r3, r3, #9
 8007bd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bdc:	ee07 3a90 	vmov	s15, r3
 8007be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007be4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007be8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bec:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bf8:	ee17 2a90 	vmov	r2, s15
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007c00:	4b1e      	ldr	r3, [pc, #120]	; (8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c04:	0c1b      	lsrs	r3, r3, #16
 8007c06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c0a:	ee07 3a90 	vmov	s15, r3
 8007c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c26:	ee17 2a90 	vmov	r2, s15
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007c2e:	4b13      	ldr	r3, [pc, #76]	; (8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c32:	0e1b      	lsrs	r3, r3, #24
 8007c34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c38:	ee07 3a90 	vmov	s15, r3
 8007c3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c48:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c54:	ee17 2a90 	vmov	r2, s15
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007c5c:	e008      	b.n	8007c70 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	609a      	str	r2, [r3, #8]
}
 8007c70:	bf00      	nop
 8007c72:	3724      	adds	r7, #36	; 0x24
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr
 8007c7c:	58024400 	.word	0x58024400
 8007c80:	03d09000 	.word	0x03d09000
 8007c84:	46000000 	.word	0x46000000
 8007c88:	4c742400 	.word	0x4c742400
 8007c8c:	4a742400 	.word	0x4a742400
 8007c90:	4af42400 	.word	0x4af42400

08007c94 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b089      	sub	sp, #36	; 0x24
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c9c:	4b9d      	ldr	r3, [pc, #628]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca0:	f003 0303 	and.w	r3, r3, #3
 8007ca4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007ca6:	4b9b      	ldr	r3, [pc, #620]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007caa:	0d1b      	lsrs	r3, r3, #20
 8007cac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cb0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007cb2:	4b98      	ldr	r3, [pc, #608]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb6:	0a1b      	lsrs	r3, r3, #8
 8007cb8:	f003 0301 	and.w	r3, r3, #1
 8007cbc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007cbe:	4b95      	ldr	r3, [pc, #596]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cc2:	08db      	lsrs	r3, r3, #3
 8007cc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007cc8:	693a      	ldr	r2, [r7, #16]
 8007cca:	fb02 f303 	mul.w	r3, r2, r3
 8007cce:	ee07 3a90 	vmov	s15, r3
 8007cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cd6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f000 810a 	beq.w	8007ef6 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d05a      	beq.n	8007d9e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d302      	bcc.n	8007cf2 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	d078      	beq.n	8007de2 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8007cf0:	e099      	b.n	8007e26 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cf2:	4b88      	ldr	r3, [pc, #544]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 0320 	and.w	r3, r3, #32
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d02d      	beq.n	8007d5a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007cfe:	4b85      	ldr	r3, [pc, #532]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	08db      	lsrs	r3, r3, #3
 8007d04:	f003 0303 	and.w	r3, r3, #3
 8007d08:	4a83      	ldr	r2, [pc, #524]	; (8007f18 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d0e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	ee07 3a90 	vmov	s15, r3
 8007d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	ee07 3a90 	vmov	s15, r3
 8007d20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d28:	4b7a      	ldr	r3, [pc, #488]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d30:	ee07 3a90 	vmov	s15, r3
 8007d34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d38:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d3c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007d40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d54:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007d58:	e087      	b.n	8007e6a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	ee07 3a90 	vmov	s15, r3
 8007d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d64:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007f20 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8007d68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d6c:	4b69      	ldr	r3, [pc, #420]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d74:	ee07 3a90 	vmov	s15, r3
 8007d78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d80:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007d84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d98:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d9c:	e065      	b.n	8007e6a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	ee07 3a90 	vmov	s15, r3
 8007da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007da8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007f24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007dac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007db0:	4b58      	ldr	r3, [pc, #352]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007db8:	ee07 3a90 	vmov	s15, r3
 8007dbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dc0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dc4:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007dc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ddc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007de0:	e043      	b.n	8007e6a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	ee07 3a90 	vmov	s15, r3
 8007de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dec:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007f28 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8007df0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007df4:	4b47      	ldr	r3, [pc, #284]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dfc:	ee07 3a90 	vmov	s15, r3
 8007e00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e04:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e08:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007e0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e20:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e24:	e021      	b.n	8007e6a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	ee07 3a90 	vmov	s15, r3
 8007e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e30:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007f24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007e34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e38:	4b36      	ldr	r3, [pc, #216]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e40:	ee07 3a90 	vmov	s15, r3
 8007e44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e48:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e4c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007e50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e64:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e68:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007e6a:	4b2a      	ldr	r3, [pc, #168]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e6e:	0a5b      	lsrs	r3, r3, #9
 8007e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e74:	ee07 3a90 	vmov	s15, r3
 8007e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e84:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e90:	ee17 2a90 	vmov	r2, s15
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007e98:	4b1e      	ldr	r3, [pc, #120]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e9c:	0c1b      	lsrs	r3, r3, #16
 8007e9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ea2:	ee07 3a90 	vmov	s15, r3
 8007ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007eae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007eb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007eb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007eba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ebe:	ee17 2a90 	vmov	r2, s15
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007ec6:	4b13      	ldr	r3, [pc, #76]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eca:	0e1b      	lsrs	r3, r3, #24
 8007ecc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ed0:	ee07 3a90 	vmov	s15, r3
 8007ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ed8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007edc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ee0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ee4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ee8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007eec:	ee17 2a90 	vmov	r2, s15
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007ef4:	e008      	b.n	8007f08 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	609a      	str	r2, [r3, #8]
}
 8007f08:	bf00      	nop
 8007f0a:	3724      	adds	r7, #36	; 0x24
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr
 8007f14:	58024400 	.word	0x58024400
 8007f18:	03d09000 	.word	0x03d09000
 8007f1c:	46000000 	.word	0x46000000
 8007f20:	4c742400 	.word	0x4c742400
 8007f24:	4a742400 	.word	0x4a742400
 8007f28:	4af42400 	.word	0x4af42400

08007f2c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b089      	sub	sp, #36	; 0x24
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f34:	4b9d      	ldr	r3, [pc, #628]	; (80081ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f38:	f003 0303 	and.w	r3, r3, #3
 8007f3c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007f3e:	4b9b      	ldr	r3, [pc, #620]	; (80081ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f42:	091b      	lsrs	r3, r3, #4
 8007f44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f48:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007f4a:	4b98      	ldr	r3, [pc, #608]	; (80081ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f4e:	f003 0301 	and.w	r3, r3, #1
 8007f52:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007f54:	4b95      	ldr	r3, [pc, #596]	; (80081ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f58:	08db      	lsrs	r3, r3, #3
 8007f5a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f5e:	693a      	ldr	r2, [r7, #16]
 8007f60:	fb02 f303 	mul.w	r3, r2, r3
 8007f64:	ee07 3a90 	vmov	s15, r3
 8007f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f6c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	f000 810a 	beq.w	800818c <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d05a      	beq.n	8008034 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d302      	bcc.n	8007f88 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d078      	beq.n	8008078 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8007f86:	e099      	b.n	80080bc <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f88:	4b88      	ldr	r3, [pc, #544]	; (80081ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f003 0320 	and.w	r3, r3, #32
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d02d      	beq.n	8007ff0 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007f94:	4b85      	ldr	r3, [pc, #532]	; (80081ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	08db      	lsrs	r3, r3, #3
 8007f9a:	f003 0303 	and.w	r3, r3, #3
 8007f9e:	4a84      	ldr	r2, [pc, #528]	; (80081b0 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8007fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8007fa4:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	ee07 3a90 	vmov	s15, r3
 8007fac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	ee07 3a90 	vmov	s15, r3
 8007fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fbe:	4b7b      	ldr	r3, [pc, #492]	; (80081ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fc6:	ee07 3a90 	vmov	s15, r3
 8007fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fce:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fd2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80081b4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007fee:	e087      	b.n	8008100 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	ee07 3a90 	vmov	s15, r3
 8007ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ffa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80081b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8007ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008002:	4b6a      	ldr	r3, [pc, #424]	; (80081ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800800a:	ee07 3a90 	vmov	s15, r3
 800800e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008012:	ed97 6a03 	vldr	s12, [r7, #12]
 8008016:	eddf 5a67 	vldr	s11, [pc, #412]	; 80081b4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800801a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800801e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008022:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800802a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800802e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008032:	e065      	b.n	8008100 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	ee07 3a90 	vmov	s15, r3
 800803a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800803e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80081bc <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008046:	4b59      	ldr	r3, [pc, #356]	; (80081ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800804a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800804e:	ee07 3a90 	vmov	s15, r3
 8008052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008056:	ed97 6a03 	vldr	s12, [r7, #12]
 800805a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80081b4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800805e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008066:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800806a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800806e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008072:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008076:	e043      	b.n	8008100 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	ee07 3a90 	vmov	s15, r3
 800807e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008082:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80081c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800808a:	4b48      	ldr	r3, [pc, #288]	; (80081ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800808c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800808e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008092:	ee07 3a90 	vmov	s15, r3
 8008096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800809a:	ed97 6a03 	vldr	s12, [r7, #12]
 800809e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80081b4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80080a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080ba:	e021      	b.n	8008100 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	ee07 3a90 	vmov	s15, r3
 80080c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80081bc <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80080ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080ce:	4b37      	ldr	r3, [pc, #220]	; (80081ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80080d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080d6:	ee07 3a90 	vmov	s15, r3
 80080da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080de:	ed97 6a03 	vldr	s12, [r7, #12]
 80080e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80081b4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80080e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080fe:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008100:	4b2a      	ldr	r3, [pc, #168]	; (80081ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008104:	0a5b      	lsrs	r3, r3, #9
 8008106:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800810a:	ee07 3a90 	vmov	s15, r3
 800810e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008112:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008116:	ee37 7a87 	vadd.f32	s14, s15, s14
 800811a:	edd7 6a07 	vldr	s13, [r7, #28]
 800811e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008122:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008126:	ee17 2a90 	vmov	r2, s15
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800812e:	4b1f      	ldr	r3, [pc, #124]	; (80081ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008132:	0c1b      	lsrs	r3, r3, #16
 8008134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008138:	ee07 3a90 	vmov	s15, r3
 800813c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008140:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008144:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008148:	edd7 6a07 	vldr	s13, [r7, #28]
 800814c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008154:	ee17 2a90 	vmov	r2, s15
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800815c:	4b13      	ldr	r3, [pc, #76]	; (80081ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800815e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008160:	0e1b      	lsrs	r3, r3, #24
 8008162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008166:	ee07 3a90 	vmov	s15, r3
 800816a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800816e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008172:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008176:	edd7 6a07 	vldr	s13, [r7, #28]
 800817a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800817e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008182:	ee17 2a90 	vmov	r2, s15
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800818a:	e008      	b.n	800819e <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	609a      	str	r2, [r3, #8]
}
 800819e:	bf00      	nop
 80081a0:	3724      	adds	r7, #36	; 0x24
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	58024400 	.word	0x58024400
 80081b0:	03d09000 	.word	0x03d09000
 80081b4:	46000000 	.word	0x46000000
 80081b8:	4c742400 	.word	0x4c742400
 80081bc:	4a742400 	.word	0x4a742400
 80081c0:	4af42400 	.word	0x4af42400

080081c4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80081ce:	2300      	movs	r3, #0
 80081d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80081d2:	4b53      	ldr	r3, [pc, #332]	; (8008320 <RCCEx_PLL2_Config+0x15c>)
 80081d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d6:	f003 0303 	and.w	r3, r3, #3
 80081da:	2b03      	cmp	r3, #3
 80081dc:	d101      	bne.n	80081e2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	e099      	b.n	8008316 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80081e2:	4b4f      	ldr	r3, [pc, #316]	; (8008320 <RCCEx_PLL2_Config+0x15c>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a4e      	ldr	r2, [pc, #312]	; (8008320 <RCCEx_PLL2_Config+0x15c>)
 80081e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80081ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081ee:	f7f9 fc9b 	bl	8001b28 <HAL_GetTick>
 80081f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80081f4:	e008      	b.n	8008208 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80081f6:	f7f9 fc97 	bl	8001b28 <HAL_GetTick>
 80081fa:	4602      	mov	r2, r0
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	1ad3      	subs	r3, r2, r3
 8008200:	2b02      	cmp	r3, #2
 8008202:	d901      	bls.n	8008208 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008204:	2303      	movs	r3, #3
 8008206:	e086      	b.n	8008316 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008208:	4b45      	ldr	r3, [pc, #276]	; (8008320 <RCCEx_PLL2_Config+0x15c>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008210:	2b00      	cmp	r3, #0
 8008212:	d1f0      	bne.n	80081f6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008214:	4b42      	ldr	r3, [pc, #264]	; (8008320 <RCCEx_PLL2_Config+0x15c>)
 8008216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008218:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	031b      	lsls	r3, r3, #12
 8008222:	493f      	ldr	r1, [pc, #252]	; (8008320 <RCCEx_PLL2_Config+0x15c>)
 8008224:	4313      	orrs	r3, r2
 8008226:	628b      	str	r3, [r1, #40]	; 0x28
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	3b01      	subs	r3, #1
 800822e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	3b01      	subs	r3, #1
 8008238:	025b      	lsls	r3, r3, #9
 800823a:	b29b      	uxth	r3, r3
 800823c:	431a      	orrs	r2, r3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	3b01      	subs	r3, #1
 8008244:	041b      	lsls	r3, r3, #16
 8008246:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800824a:	431a      	orrs	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	691b      	ldr	r3, [r3, #16]
 8008250:	3b01      	subs	r3, #1
 8008252:	061b      	lsls	r3, r3, #24
 8008254:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008258:	4931      	ldr	r1, [pc, #196]	; (8008320 <RCCEx_PLL2_Config+0x15c>)
 800825a:	4313      	orrs	r3, r2
 800825c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800825e:	4b30      	ldr	r3, [pc, #192]	; (8008320 <RCCEx_PLL2_Config+0x15c>)
 8008260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008262:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	695b      	ldr	r3, [r3, #20]
 800826a:	492d      	ldr	r1, [pc, #180]	; (8008320 <RCCEx_PLL2_Config+0x15c>)
 800826c:	4313      	orrs	r3, r2
 800826e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008270:	4b2b      	ldr	r3, [pc, #172]	; (8008320 <RCCEx_PLL2_Config+0x15c>)
 8008272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008274:	f023 0220 	bic.w	r2, r3, #32
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	699b      	ldr	r3, [r3, #24]
 800827c:	4928      	ldr	r1, [pc, #160]	; (8008320 <RCCEx_PLL2_Config+0x15c>)
 800827e:	4313      	orrs	r3, r2
 8008280:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008282:	4b27      	ldr	r3, [pc, #156]	; (8008320 <RCCEx_PLL2_Config+0x15c>)
 8008284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008286:	4a26      	ldr	r2, [pc, #152]	; (8008320 <RCCEx_PLL2_Config+0x15c>)
 8008288:	f023 0310 	bic.w	r3, r3, #16
 800828c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800828e:	4b24      	ldr	r3, [pc, #144]	; (8008320 <RCCEx_PLL2_Config+0x15c>)
 8008290:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008292:	4b24      	ldr	r3, [pc, #144]	; (8008324 <RCCEx_PLL2_Config+0x160>)
 8008294:	4013      	ands	r3, r2
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	69d2      	ldr	r2, [r2, #28]
 800829a:	00d2      	lsls	r2, r2, #3
 800829c:	4920      	ldr	r1, [pc, #128]	; (8008320 <RCCEx_PLL2_Config+0x15c>)
 800829e:	4313      	orrs	r3, r2
 80082a0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80082a2:	4b1f      	ldr	r3, [pc, #124]	; (8008320 <RCCEx_PLL2_Config+0x15c>)
 80082a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a6:	4a1e      	ldr	r2, [pc, #120]	; (8008320 <RCCEx_PLL2_Config+0x15c>)
 80082a8:	f043 0310 	orr.w	r3, r3, #16
 80082ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d106      	bne.n	80082c2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80082b4:	4b1a      	ldr	r3, [pc, #104]	; (8008320 <RCCEx_PLL2_Config+0x15c>)
 80082b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b8:	4a19      	ldr	r2, [pc, #100]	; (8008320 <RCCEx_PLL2_Config+0x15c>)
 80082ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80082be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80082c0:	e00f      	b.n	80082e2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d106      	bne.n	80082d6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80082c8:	4b15      	ldr	r3, [pc, #84]	; (8008320 <RCCEx_PLL2_Config+0x15c>)
 80082ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082cc:	4a14      	ldr	r2, [pc, #80]	; (8008320 <RCCEx_PLL2_Config+0x15c>)
 80082ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80082d4:	e005      	b.n	80082e2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80082d6:	4b12      	ldr	r3, [pc, #72]	; (8008320 <RCCEx_PLL2_Config+0x15c>)
 80082d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082da:	4a11      	ldr	r2, [pc, #68]	; (8008320 <RCCEx_PLL2_Config+0x15c>)
 80082dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80082e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80082e2:	4b0f      	ldr	r3, [pc, #60]	; (8008320 <RCCEx_PLL2_Config+0x15c>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a0e      	ldr	r2, [pc, #56]	; (8008320 <RCCEx_PLL2_Config+0x15c>)
 80082e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80082ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082ee:	f7f9 fc1b 	bl	8001b28 <HAL_GetTick>
 80082f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80082f4:	e008      	b.n	8008308 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80082f6:	f7f9 fc17 	bl	8001b28 <HAL_GetTick>
 80082fa:	4602      	mov	r2, r0
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	2b02      	cmp	r3, #2
 8008302:	d901      	bls.n	8008308 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008304:	2303      	movs	r3, #3
 8008306:	e006      	b.n	8008316 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008308:	4b05      	ldr	r3, [pc, #20]	; (8008320 <RCCEx_PLL2_Config+0x15c>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008310:	2b00      	cmp	r3, #0
 8008312:	d0f0      	beq.n	80082f6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008314:	7bfb      	ldrb	r3, [r7, #15]
}
 8008316:	4618      	mov	r0, r3
 8008318:	3710      	adds	r7, #16
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	58024400 	.word	0x58024400
 8008324:	ffff0007 	.word	0xffff0007

08008328 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008332:	2300      	movs	r3, #0
 8008334:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008336:	4b53      	ldr	r3, [pc, #332]	; (8008484 <RCCEx_PLL3_Config+0x15c>)
 8008338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800833a:	f003 0303 	and.w	r3, r3, #3
 800833e:	2b03      	cmp	r3, #3
 8008340:	d101      	bne.n	8008346 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	e099      	b.n	800847a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008346:	4b4f      	ldr	r3, [pc, #316]	; (8008484 <RCCEx_PLL3_Config+0x15c>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a4e      	ldr	r2, [pc, #312]	; (8008484 <RCCEx_PLL3_Config+0x15c>)
 800834c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008350:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008352:	f7f9 fbe9 	bl	8001b28 <HAL_GetTick>
 8008356:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008358:	e008      	b.n	800836c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800835a:	f7f9 fbe5 	bl	8001b28 <HAL_GetTick>
 800835e:	4602      	mov	r2, r0
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	1ad3      	subs	r3, r2, r3
 8008364:	2b02      	cmp	r3, #2
 8008366:	d901      	bls.n	800836c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008368:	2303      	movs	r3, #3
 800836a:	e086      	b.n	800847a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800836c:	4b45      	ldr	r3, [pc, #276]	; (8008484 <RCCEx_PLL3_Config+0x15c>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008374:	2b00      	cmp	r3, #0
 8008376:	d1f0      	bne.n	800835a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008378:	4b42      	ldr	r3, [pc, #264]	; (8008484 <RCCEx_PLL3_Config+0x15c>)
 800837a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800837c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	051b      	lsls	r3, r3, #20
 8008386:	493f      	ldr	r1, [pc, #252]	; (8008484 <RCCEx_PLL3_Config+0x15c>)
 8008388:	4313      	orrs	r3, r2
 800838a:	628b      	str	r3, [r1, #40]	; 0x28
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	3b01      	subs	r3, #1
 8008392:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	3b01      	subs	r3, #1
 800839c:	025b      	lsls	r3, r3, #9
 800839e:	b29b      	uxth	r3, r3
 80083a0:	431a      	orrs	r2, r3
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	3b01      	subs	r3, #1
 80083a8:	041b      	lsls	r3, r3, #16
 80083aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80083ae:	431a      	orrs	r2, r3
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	3b01      	subs	r3, #1
 80083b6:	061b      	lsls	r3, r3, #24
 80083b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80083bc:	4931      	ldr	r1, [pc, #196]	; (8008484 <RCCEx_PLL3_Config+0x15c>)
 80083be:	4313      	orrs	r3, r2
 80083c0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80083c2:	4b30      	ldr	r3, [pc, #192]	; (8008484 <RCCEx_PLL3_Config+0x15c>)
 80083c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	695b      	ldr	r3, [r3, #20]
 80083ce:	492d      	ldr	r1, [pc, #180]	; (8008484 <RCCEx_PLL3_Config+0x15c>)
 80083d0:	4313      	orrs	r3, r2
 80083d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80083d4:	4b2b      	ldr	r3, [pc, #172]	; (8008484 <RCCEx_PLL3_Config+0x15c>)
 80083d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	699b      	ldr	r3, [r3, #24]
 80083e0:	4928      	ldr	r1, [pc, #160]	; (8008484 <RCCEx_PLL3_Config+0x15c>)
 80083e2:	4313      	orrs	r3, r2
 80083e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80083e6:	4b27      	ldr	r3, [pc, #156]	; (8008484 <RCCEx_PLL3_Config+0x15c>)
 80083e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ea:	4a26      	ldr	r2, [pc, #152]	; (8008484 <RCCEx_PLL3_Config+0x15c>)
 80083ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80083f2:	4b24      	ldr	r3, [pc, #144]	; (8008484 <RCCEx_PLL3_Config+0x15c>)
 80083f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083f6:	4b24      	ldr	r3, [pc, #144]	; (8008488 <RCCEx_PLL3_Config+0x160>)
 80083f8:	4013      	ands	r3, r2
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	69d2      	ldr	r2, [r2, #28]
 80083fe:	00d2      	lsls	r2, r2, #3
 8008400:	4920      	ldr	r1, [pc, #128]	; (8008484 <RCCEx_PLL3_Config+0x15c>)
 8008402:	4313      	orrs	r3, r2
 8008404:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008406:	4b1f      	ldr	r3, [pc, #124]	; (8008484 <RCCEx_PLL3_Config+0x15c>)
 8008408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800840a:	4a1e      	ldr	r2, [pc, #120]	; (8008484 <RCCEx_PLL3_Config+0x15c>)
 800840c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008410:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d106      	bne.n	8008426 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008418:	4b1a      	ldr	r3, [pc, #104]	; (8008484 <RCCEx_PLL3_Config+0x15c>)
 800841a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841c:	4a19      	ldr	r2, [pc, #100]	; (8008484 <RCCEx_PLL3_Config+0x15c>)
 800841e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008422:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008424:	e00f      	b.n	8008446 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	2b01      	cmp	r3, #1
 800842a:	d106      	bne.n	800843a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800842c:	4b15      	ldr	r3, [pc, #84]	; (8008484 <RCCEx_PLL3_Config+0x15c>)
 800842e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008430:	4a14      	ldr	r2, [pc, #80]	; (8008484 <RCCEx_PLL3_Config+0x15c>)
 8008432:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008436:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008438:	e005      	b.n	8008446 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800843a:	4b12      	ldr	r3, [pc, #72]	; (8008484 <RCCEx_PLL3_Config+0x15c>)
 800843c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843e:	4a11      	ldr	r2, [pc, #68]	; (8008484 <RCCEx_PLL3_Config+0x15c>)
 8008440:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008444:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008446:	4b0f      	ldr	r3, [pc, #60]	; (8008484 <RCCEx_PLL3_Config+0x15c>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a0e      	ldr	r2, [pc, #56]	; (8008484 <RCCEx_PLL3_Config+0x15c>)
 800844c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008450:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008452:	f7f9 fb69 	bl	8001b28 <HAL_GetTick>
 8008456:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008458:	e008      	b.n	800846c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800845a:	f7f9 fb65 	bl	8001b28 <HAL_GetTick>
 800845e:	4602      	mov	r2, r0
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	1ad3      	subs	r3, r2, r3
 8008464:	2b02      	cmp	r3, #2
 8008466:	d901      	bls.n	800846c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008468:	2303      	movs	r3, #3
 800846a:	e006      	b.n	800847a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800846c:	4b05      	ldr	r3, [pc, #20]	; (8008484 <RCCEx_PLL3_Config+0x15c>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008474:	2b00      	cmp	r3, #0
 8008476:	d0f0      	beq.n	800845a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008478:	7bfb      	ldrb	r3, [r7, #15]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	58024400 	.word	0x58024400
 8008488:	ffff0007 	.word	0xffff0007

0800848c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d101      	bne.n	800849e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	e049      	b.n	8008532 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d106      	bne.n	80084b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f7f9 f804 	bl	80014c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2202      	movs	r2, #2
 80084bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	3304      	adds	r3, #4
 80084c8:	4619      	mov	r1, r3
 80084ca:	4610      	mov	r0, r2
 80084cc:	f000 fa24 	bl	8008918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2201      	movs	r2, #1
 80084dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2201      	movs	r2, #1
 800850c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2201      	movs	r2, #1
 8008514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3708      	adds	r7, #8
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
	...

0800853c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800853c:	b480      	push	{r7}
 800853e:	b085      	sub	sp, #20
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800854a:	b2db      	uxtb	r3, r3
 800854c:	2b01      	cmp	r3, #1
 800854e:	d001      	beq.n	8008554 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	e019      	b.n	8008588 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2202      	movs	r2, #2
 8008558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	689a      	ldr	r2, [r3, #8]
 8008562:	4b0c      	ldr	r3, [pc, #48]	; (8008594 <HAL_TIM_Base_Start+0x58>)
 8008564:	4013      	ands	r3, r2
 8008566:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2b06      	cmp	r3, #6
 800856c:	d00b      	beq.n	8008586 <HAL_TIM_Base_Start+0x4a>
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008574:	d007      	beq.n	8008586 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f042 0201 	orr.w	r2, r2, #1
 8008584:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008586:	2300      	movs	r3, #0
}
 8008588:	4618      	mov	r0, r3
 800858a:	3714      	adds	r7, #20
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr
 8008594:	00010007 	.word	0x00010007

08008598 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008598:	b480      	push	{r7}
 800859a:	b085      	sub	sp, #20
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d001      	beq.n	80085b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	e021      	b.n	80085f4 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2202      	movs	r2, #2
 80085b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	68da      	ldr	r2, [r3, #12]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f042 0201 	orr.w	r2, r2, #1
 80085c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	689a      	ldr	r2, [r3, #8]
 80085ce:	4b0c      	ldr	r3, [pc, #48]	; (8008600 <HAL_TIM_Base_Start_IT+0x68>)
 80085d0:	4013      	ands	r3, r2
 80085d2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2b06      	cmp	r3, #6
 80085d8:	d00b      	beq.n	80085f2 <HAL_TIM_Base_Start_IT+0x5a>
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085e0:	d007      	beq.n	80085f2 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f042 0201 	orr.w	r2, r2, #1
 80085f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3714      	adds	r7, #20
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	00010007 	.word	0x00010007

08008604 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	691b      	ldr	r3, [r3, #16]
 8008612:	f003 0302 	and.w	r3, r3, #2
 8008616:	2b02      	cmp	r3, #2
 8008618:	d122      	bne.n	8008660 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	f003 0302 	and.w	r3, r3, #2
 8008624:	2b02      	cmp	r3, #2
 8008626:	d11b      	bne.n	8008660 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f06f 0202 	mvn.w	r2, #2
 8008630:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2201      	movs	r2, #1
 8008636:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	699b      	ldr	r3, [r3, #24]
 800863e:	f003 0303 	and.w	r3, r3, #3
 8008642:	2b00      	cmp	r3, #0
 8008644:	d003      	beq.n	800864e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f947 	bl	80088da <HAL_TIM_IC_CaptureCallback>
 800864c:	e005      	b.n	800865a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f939 	bl	80088c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 f94a 	bl	80088ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	f003 0304 	and.w	r3, r3, #4
 800866a:	2b04      	cmp	r3, #4
 800866c:	d122      	bne.n	80086b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	f003 0304 	and.w	r3, r3, #4
 8008678:	2b04      	cmp	r3, #4
 800867a:	d11b      	bne.n	80086b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f06f 0204 	mvn.w	r2, #4
 8008684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2202      	movs	r2, #2
 800868a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	699b      	ldr	r3, [r3, #24]
 8008692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008696:	2b00      	cmp	r3, #0
 8008698:	d003      	beq.n	80086a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 f91d 	bl	80088da <HAL_TIM_IC_CaptureCallback>
 80086a0:	e005      	b.n	80086ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 f90f 	bl	80088c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 f920 	bl	80088ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	f003 0308 	and.w	r3, r3, #8
 80086be:	2b08      	cmp	r3, #8
 80086c0:	d122      	bne.n	8008708 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	f003 0308 	and.w	r3, r3, #8
 80086cc:	2b08      	cmp	r3, #8
 80086ce:	d11b      	bne.n	8008708 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f06f 0208 	mvn.w	r2, #8
 80086d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2204      	movs	r2, #4
 80086de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	69db      	ldr	r3, [r3, #28]
 80086e6:	f003 0303 	and.w	r3, r3, #3
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d003      	beq.n	80086f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 f8f3 	bl	80088da <HAL_TIM_IC_CaptureCallback>
 80086f4:	e005      	b.n	8008702 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 f8e5 	bl	80088c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 f8f6 	bl	80088ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	691b      	ldr	r3, [r3, #16]
 800870e:	f003 0310 	and.w	r3, r3, #16
 8008712:	2b10      	cmp	r3, #16
 8008714:	d122      	bne.n	800875c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	f003 0310 	and.w	r3, r3, #16
 8008720:	2b10      	cmp	r3, #16
 8008722:	d11b      	bne.n	800875c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f06f 0210 	mvn.w	r2, #16
 800872c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2208      	movs	r2, #8
 8008732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	69db      	ldr	r3, [r3, #28]
 800873a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800873e:	2b00      	cmp	r3, #0
 8008740:	d003      	beq.n	800874a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 f8c9 	bl	80088da <HAL_TIM_IC_CaptureCallback>
 8008748:	e005      	b.n	8008756 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f8bb 	bl	80088c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 f8cc 	bl	80088ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	691b      	ldr	r3, [r3, #16]
 8008762:	f003 0301 	and.w	r3, r3, #1
 8008766:	2b01      	cmp	r3, #1
 8008768:	d10e      	bne.n	8008788 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	f003 0301 	and.w	r3, r3, #1
 8008774:	2b01      	cmp	r3, #1
 8008776:	d107      	bne.n	8008788 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f06f 0201 	mvn.w	r2, #1
 8008780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f7f8 fc28 	bl	8000fd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008792:	2b80      	cmp	r3, #128	; 0x80
 8008794:	d10e      	bne.n	80087b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087a0:	2b80      	cmp	r3, #128	; 0x80
 80087a2:	d107      	bne.n	80087b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80087ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fb28 	bl	8008e04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	691b      	ldr	r3, [r3, #16]
 80087ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087c2:	d10e      	bne.n	80087e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087ce:	2b80      	cmp	r3, #128	; 0x80
 80087d0:	d107      	bne.n	80087e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80087da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 fb1b 	bl	8008e18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	691b      	ldr	r3, [r3, #16]
 80087e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ec:	2b40      	cmp	r3, #64	; 0x40
 80087ee:	d10e      	bne.n	800880e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	68db      	ldr	r3, [r3, #12]
 80087f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087fa:	2b40      	cmp	r3, #64	; 0x40
 80087fc:	d107      	bne.n	800880e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 f87a 	bl	8008902 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	691b      	ldr	r3, [r3, #16]
 8008814:	f003 0320 	and.w	r3, r3, #32
 8008818:	2b20      	cmp	r3, #32
 800881a:	d10e      	bne.n	800883a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	f003 0320 	and.w	r3, r3, #32
 8008826:	2b20      	cmp	r3, #32
 8008828:	d107      	bne.n	800883a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f06f 0220 	mvn.w	r2, #32
 8008832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 fadb 	bl	8008df0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800883a:	bf00      	nop
 800883c:	3708      	adds	r7, #8
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}

08008842 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b082      	sub	sp, #8
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
 800884a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008852:	2b01      	cmp	r3, #1
 8008854:	d101      	bne.n	800885a <HAL_TIM_SlaveConfigSynchro+0x18>
 8008856:	2302      	movs	r3, #2
 8008858:	e031      	b.n	80088be <HAL_TIM_SlaveConfigSynchro+0x7c>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2201      	movs	r2, #1
 800885e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2202      	movs	r2, #2
 8008866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800886a:	6839      	ldr	r1, [r7, #0]
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 f8ed 	bl	8008a4c <TIM_SlaveTimer_SetConfig>
 8008872:	4603      	mov	r3, r0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d009      	beq.n	800888c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	e018      	b.n	80088be <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	68da      	ldr	r2, [r3, #12]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800889a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	68da      	ldr	r2, [r3, #12]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80088aa:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3708      	adds	r7, #8
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80088c6:	b480      	push	{r7}
 80088c8:	b083      	sub	sp, #12
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80088ce:	bf00      	nop
 80088d0:	370c      	adds	r7, #12
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr

080088da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80088da:	b480      	push	{r7}
 80088dc:	b083      	sub	sp, #12
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80088e2:	bf00      	nop
 80088e4:	370c      	adds	r7, #12
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr

080088ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80088ee:	b480      	push	{r7}
 80088f0:	b083      	sub	sp, #12
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80088f6:	bf00      	nop
 80088f8:	370c      	adds	r7, #12
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr

08008902 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008902:	b480      	push	{r7}
 8008904:	b083      	sub	sp, #12
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800890a:	bf00      	nop
 800890c:	370c      	adds	r7, #12
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
	...

08008918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008918:	b480      	push	{r7}
 800891a:	b085      	sub	sp, #20
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4a40      	ldr	r2, [pc, #256]	; (8008a2c <TIM_Base_SetConfig+0x114>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d013      	beq.n	8008958 <TIM_Base_SetConfig+0x40>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008936:	d00f      	beq.n	8008958 <TIM_Base_SetConfig+0x40>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4a3d      	ldr	r2, [pc, #244]	; (8008a30 <TIM_Base_SetConfig+0x118>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d00b      	beq.n	8008958 <TIM_Base_SetConfig+0x40>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a3c      	ldr	r2, [pc, #240]	; (8008a34 <TIM_Base_SetConfig+0x11c>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d007      	beq.n	8008958 <TIM_Base_SetConfig+0x40>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a3b      	ldr	r2, [pc, #236]	; (8008a38 <TIM_Base_SetConfig+0x120>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d003      	beq.n	8008958 <TIM_Base_SetConfig+0x40>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4a3a      	ldr	r2, [pc, #232]	; (8008a3c <TIM_Base_SetConfig+0x124>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d108      	bne.n	800896a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800895e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	68fa      	ldr	r2, [r7, #12]
 8008966:	4313      	orrs	r3, r2
 8008968:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4a2f      	ldr	r2, [pc, #188]	; (8008a2c <TIM_Base_SetConfig+0x114>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d01f      	beq.n	80089b2 <TIM_Base_SetConfig+0x9a>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008978:	d01b      	beq.n	80089b2 <TIM_Base_SetConfig+0x9a>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4a2c      	ldr	r2, [pc, #176]	; (8008a30 <TIM_Base_SetConfig+0x118>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d017      	beq.n	80089b2 <TIM_Base_SetConfig+0x9a>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4a2b      	ldr	r2, [pc, #172]	; (8008a34 <TIM_Base_SetConfig+0x11c>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d013      	beq.n	80089b2 <TIM_Base_SetConfig+0x9a>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4a2a      	ldr	r2, [pc, #168]	; (8008a38 <TIM_Base_SetConfig+0x120>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d00f      	beq.n	80089b2 <TIM_Base_SetConfig+0x9a>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	4a29      	ldr	r2, [pc, #164]	; (8008a3c <TIM_Base_SetConfig+0x124>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d00b      	beq.n	80089b2 <TIM_Base_SetConfig+0x9a>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4a28      	ldr	r2, [pc, #160]	; (8008a40 <TIM_Base_SetConfig+0x128>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d007      	beq.n	80089b2 <TIM_Base_SetConfig+0x9a>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4a27      	ldr	r2, [pc, #156]	; (8008a44 <TIM_Base_SetConfig+0x12c>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d003      	beq.n	80089b2 <TIM_Base_SetConfig+0x9a>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4a26      	ldr	r2, [pc, #152]	; (8008a48 <TIM_Base_SetConfig+0x130>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d108      	bne.n	80089c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	68db      	ldr	r3, [r3, #12]
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	695b      	ldr	r3, [r3, #20]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	68fa      	ldr	r2, [r7, #12]
 80089d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	689a      	ldr	r2, [r3, #8]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	4a10      	ldr	r2, [pc, #64]	; (8008a2c <TIM_Base_SetConfig+0x114>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d00f      	beq.n	8008a10 <TIM_Base_SetConfig+0xf8>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4a12      	ldr	r2, [pc, #72]	; (8008a3c <TIM_Base_SetConfig+0x124>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d00b      	beq.n	8008a10 <TIM_Base_SetConfig+0xf8>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4a11      	ldr	r2, [pc, #68]	; (8008a40 <TIM_Base_SetConfig+0x128>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d007      	beq.n	8008a10 <TIM_Base_SetConfig+0xf8>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4a10      	ldr	r2, [pc, #64]	; (8008a44 <TIM_Base_SetConfig+0x12c>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d003      	beq.n	8008a10 <TIM_Base_SetConfig+0xf8>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4a0f      	ldr	r2, [pc, #60]	; (8008a48 <TIM_Base_SetConfig+0x130>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d103      	bne.n	8008a18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	691a      	ldr	r2, [r3, #16]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	615a      	str	r2, [r3, #20]
}
 8008a1e:	bf00      	nop
 8008a20:	3714      	adds	r7, #20
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop
 8008a2c:	40010000 	.word	0x40010000
 8008a30:	40000400 	.word	0x40000400
 8008a34:	40000800 	.word	0x40000800
 8008a38:	40000c00 	.word	0x40000c00
 8008a3c:	40010400 	.word	0x40010400
 8008a40:	40014000 	.word	0x40014000
 8008a44:	40014400 	.word	0x40014400
 8008a48:	40014800 	.word	0x40014800

08008a4c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b086      	sub	sp, #24
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a5e:	697a      	ldr	r2, [r7, #20]
 8008a60:	4b56      	ldr	r3, [pc, #344]	; (8008bbc <TIM_SlaveTimer_SetConfig+0x170>)
 8008a62:	4013      	ands	r3, r2
 8008a64:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	697a      	ldr	r2, [r7, #20]
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008a70:	697a      	ldr	r2, [r7, #20]
 8008a72:	4b53      	ldr	r3, [pc, #332]	; (8008bc0 <TIM_SlaveTimer_SetConfig+0x174>)
 8008a74:	4013      	ands	r3, r2
 8008a76:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	697a      	ldr	r2, [r7, #20]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	697a      	ldr	r2, [r7, #20]
 8008a88:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a92:	f000 808c 	beq.w	8008bae <TIM_SlaveTimer_SetConfig+0x162>
 8008a96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a9a:	d818      	bhi.n	8008ace <TIM_SlaveTimer_SetConfig+0x82>
 8008a9c:	2b30      	cmp	r3, #48	; 0x30
 8008a9e:	f000 8086 	beq.w	8008bae <TIM_SlaveTimer_SetConfig+0x162>
 8008aa2:	2b30      	cmp	r3, #48	; 0x30
 8008aa4:	d807      	bhi.n	8008ab6 <TIM_SlaveTimer_SetConfig+0x6a>
 8008aa6:	2b10      	cmp	r3, #16
 8008aa8:	f000 8081 	beq.w	8008bae <TIM_SlaveTimer_SetConfig+0x162>
 8008aac:	2b20      	cmp	r3, #32
 8008aae:	d07e      	beq.n	8008bae <TIM_SlaveTimer_SetConfig+0x162>
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d07c      	beq.n	8008bae <TIM_SlaveTimer_SetConfig+0x162>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8008ab4:	e07c      	b.n	8008bb0 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8008ab6:	2b50      	cmp	r3, #80	; 0x50
 8008ab8:	d065      	beq.n	8008b86 <TIM_SlaveTimer_SetConfig+0x13a>
 8008aba:	2b50      	cmp	r3, #80	; 0x50
 8008abc:	d802      	bhi.n	8008ac4 <TIM_SlaveTimer_SetConfig+0x78>
 8008abe:	2b40      	cmp	r3, #64	; 0x40
 8008ac0:	d038      	beq.n	8008b34 <TIM_SlaveTimer_SetConfig+0xe8>
      break;
 8008ac2:	e075      	b.n	8008bb0 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8008ac4:	2b60      	cmp	r3, #96	; 0x60
 8008ac6:	d068      	beq.n	8008b9a <TIM_SlaveTimer_SetConfig+0x14e>
 8008ac8:	2b70      	cmp	r3, #112	; 0x70
 8008aca:	d028      	beq.n	8008b1e <TIM_SlaveTimer_SetConfig+0xd2>
      break;
 8008acc:	e070      	b.n	8008bb0 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8008ace:	4a3d      	ldr	r2, [pc, #244]	; (8008bc4 <TIM_SlaveTimer_SetConfig+0x178>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d06c      	beq.n	8008bae <TIM_SlaveTimer_SetConfig+0x162>
 8008ad4:	4a3b      	ldr	r2, [pc, #236]	; (8008bc4 <TIM_SlaveTimer_SetConfig+0x178>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d810      	bhi.n	8008afc <TIM_SlaveTimer_SetConfig+0xb0>
 8008ada:	4a3b      	ldr	r2, [pc, #236]	; (8008bc8 <TIM_SlaveTimer_SetConfig+0x17c>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d066      	beq.n	8008bae <TIM_SlaveTimer_SetConfig+0x162>
 8008ae0:	4a39      	ldr	r2, [pc, #228]	; (8008bc8 <TIM_SlaveTimer_SetConfig+0x17c>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d803      	bhi.n	8008aee <TIM_SlaveTimer_SetConfig+0xa2>
 8008ae6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008aea:	d060      	beq.n	8008bae <TIM_SlaveTimer_SetConfig+0x162>
      break;
 8008aec:	e060      	b.n	8008bb0 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8008aee:	4a37      	ldr	r2, [pc, #220]	; (8008bcc <TIM_SlaveTimer_SetConfig+0x180>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d05c      	beq.n	8008bae <TIM_SlaveTimer_SetConfig+0x162>
 8008af4:	4a36      	ldr	r2, [pc, #216]	; (8008bd0 <TIM_SlaveTimer_SetConfig+0x184>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d059      	beq.n	8008bae <TIM_SlaveTimer_SetConfig+0x162>
      break;
 8008afa:	e059      	b.n	8008bb0 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8008afc:	4a35      	ldr	r2, [pc, #212]	; (8008bd4 <TIM_SlaveTimer_SetConfig+0x188>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d055      	beq.n	8008bae <TIM_SlaveTimer_SetConfig+0x162>
 8008b02:	4a34      	ldr	r2, [pc, #208]	; (8008bd4 <TIM_SlaveTimer_SetConfig+0x188>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d803      	bhi.n	8008b10 <TIM_SlaveTimer_SetConfig+0xc4>
 8008b08:	4a33      	ldr	r2, [pc, #204]	; (8008bd8 <TIM_SlaveTimer_SetConfig+0x18c>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d04f      	beq.n	8008bae <TIM_SlaveTimer_SetConfig+0x162>
      break;
 8008b0e:	e04f      	b.n	8008bb0 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8008b10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b14:	d04b      	beq.n	8008bae <TIM_SlaveTimer_SetConfig+0x162>
 8008b16:	4a31      	ldr	r2, [pc, #196]	; (8008bdc <TIM_SlaveTimer_SetConfig+0x190>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d048      	beq.n	8008bae <TIM_SlaveTimer_SetConfig+0x162>
      break;
 8008b1c:	e048      	b.n	8008bb0 <TIM_SlaveTimer_SetConfig+0x164>
      TIM_ETR_SetConfig(htim->Instance,
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6818      	ldr	r0, [r3, #0]
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	68d9      	ldr	r1, [r3, #12]
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	689a      	ldr	r2, [r3, #8]
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	691b      	ldr	r3, [r3, #16]
 8008b2e:	f000 f8b6 	bl	8008c9e <TIM_ETR_SetConfig>
      break;
 8008b32:	e03d      	b.n	8008bb0 <TIM_SlaveTimer_SetConfig+0x164>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	2b05      	cmp	r3, #5
 8008b3a:	d101      	bne.n	8008b40 <TIM_SlaveTimer_SetConfig+0xf4>
        return HAL_ERROR;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	e038      	b.n	8008bb2 <TIM_SlaveTimer_SetConfig+0x166>
      tmpccer = htim->Instance->CCER;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	6a1b      	ldr	r3, [r3, #32]
 8008b46:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	6a1a      	ldr	r2, [r3, #32]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f022 0201 	bic.w	r2, r2, #1
 8008b56:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	699b      	ldr	r3, [r3, #24]
 8008b5e:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b66:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	691b      	ldr	r3, [r3, #16]
 8008b6c:	011b      	lsls	r3, r3, #4
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	68fa      	ldr	r2, [r7, #12]
 8008b7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	693a      	ldr	r2, [r7, #16]
 8008b82:	621a      	str	r2, [r3, #32]
      break;
 8008b84:	e014      	b.n	8008bb0 <TIM_SlaveTimer_SetConfig+0x164>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6818      	ldr	r0, [r3, #0]
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	6899      	ldr	r1, [r3, #8]
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	691b      	ldr	r3, [r3, #16]
 8008b92:	461a      	mov	r2, r3
 8008b94:	f000 f824 	bl	8008be0 <TIM_TI1_ConfigInputStage>
      break;
 8008b98:	e00a      	b.n	8008bb0 <TIM_SlaveTimer_SetConfig+0x164>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6818      	ldr	r0, [r3, #0]
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	6899      	ldr	r1, [r3, #8]
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	691b      	ldr	r3, [r3, #16]
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	f000 f849 	bl	8008c3e <TIM_TI2_ConfigInputStage>
      break;
 8008bac:	e000      	b.n	8008bb0 <TIM_SlaveTimer_SetConfig+0x164>
      break;
 8008bae:	bf00      	nop
  }
  return HAL_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3718      	adds	r7, #24
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	ffcfff8f 	.word	0xffcfff8f
 8008bc0:	fffefff8 	.word	0xfffefff8
 8008bc4:	00100050 	.word	0x00100050
 8008bc8:	00100020 	.word	0x00100020
 8008bcc:	00100030 	.word	0x00100030
 8008bd0:	00100040 	.word	0x00100040
 8008bd4:	00100070 	.word	0x00100070
 8008bd8:	00100060 	.word	0x00100060
 8008bdc:	00200010 	.word	0x00200010

08008be0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b087      	sub	sp, #28
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6a1b      	ldr	r3, [r3, #32]
 8008bf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	6a1b      	ldr	r3, [r3, #32]
 8008bf6:	f023 0201 	bic.w	r2, r3, #1
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	699b      	ldr	r3, [r3, #24]
 8008c02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	011b      	lsls	r3, r3, #4
 8008c10:	693a      	ldr	r2, [r7, #16]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	f023 030a 	bic.w	r3, r3, #10
 8008c1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c1e:	697a      	ldr	r2, [r7, #20]
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	693a      	ldr	r2, [r7, #16]
 8008c2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	697a      	ldr	r2, [r7, #20]
 8008c30:	621a      	str	r2, [r3, #32]
}
 8008c32:	bf00      	nop
 8008c34:	371c      	adds	r7, #28
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr

08008c3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c3e:	b480      	push	{r7}
 8008c40:	b087      	sub	sp, #28
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	60f8      	str	r0, [r7, #12]
 8008c46:	60b9      	str	r1, [r7, #8]
 8008c48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	6a1b      	ldr	r3, [r3, #32]
 8008c4e:	f023 0210 	bic.w	r2, r3, #16
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	699b      	ldr	r3, [r3, #24]
 8008c5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6a1b      	ldr	r3, [r3, #32]
 8008c60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	031b      	lsls	r3, r3, #12
 8008c6e:	697a      	ldr	r2, [r7, #20]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008c7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	011b      	lsls	r3, r3, #4
 8008c80:	693a      	ldr	r2, [r7, #16]
 8008c82:	4313      	orrs	r3, r2
 8008c84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	697a      	ldr	r2, [r7, #20]
 8008c8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	693a      	ldr	r2, [r7, #16]
 8008c90:	621a      	str	r2, [r3, #32]
}
 8008c92:	bf00      	nop
 8008c94:	371c      	adds	r7, #28
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr

08008c9e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c9e:	b480      	push	{r7}
 8008ca0:	b087      	sub	sp, #28
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	60f8      	str	r0, [r7, #12]
 8008ca6:	60b9      	str	r1, [r7, #8]
 8008ca8:	607a      	str	r2, [r7, #4]
 8008caa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008cb8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	021a      	lsls	r2, r3, #8
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	431a      	orrs	r2, r3
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	697a      	ldr	r2, [r7, #20]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	697a      	ldr	r2, [r7, #20]
 8008cd0:	609a      	str	r2, [r3, #8]
}
 8008cd2:	bf00      	nop
 8008cd4:	371c      	adds	r7, #28
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr
	...

08008ce0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b085      	sub	sp, #20
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d101      	bne.n	8008cf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008cf4:	2302      	movs	r3, #2
 8008cf6:	e068      	b.n	8008dca <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2202      	movs	r2, #2
 8008d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a2e      	ldr	r2, [pc, #184]	; (8008dd8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d004      	beq.n	8008d2c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a2d      	ldr	r2, [pc, #180]	; (8008ddc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d108      	bne.n	8008d3e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008d32:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	68fa      	ldr	r2, [r7, #12]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d44:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	68fa      	ldr	r2, [r7, #12]
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	68fa      	ldr	r2, [r7, #12]
 8008d56:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a1e      	ldr	r2, [pc, #120]	; (8008dd8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d01d      	beq.n	8008d9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d6a:	d018      	beq.n	8008d9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a1b      	ldr	r2, [pc, #108]	; (8008de0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d013      	beq.n	8008d9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a1a      	ldr	r2, [pc, #104]	; (8008de4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d00e      	beq.n	8008d9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a18      	ldr	r2, [pc, #96]	; (8008de8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d009      	beq.n	8008d9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a13      	ldr	r2, [pc, #76]	; (8008ddc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d004      	beq.n	8008d9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a14      	ldr	r2, [pc, #80]	; (8008dec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d10c      	bne.n	8008db8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008da4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	68ba      	ldr	r2, [r7, #8]
 8008dac:	4313      	orrs	r3, r2
 8008dae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	68ba      	ldr	r2, [r7, #8]
 8008db6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008dc8:	2300      	movs	r3, #0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3714      	adds	r7, #20
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	40010000 	.word	0x40010000
 8008ddc:	40010400 	.word	0x40010400
 8008de0:	40000400 	.word	0x40000400
 8008de4:	40000800 	.word	0x40000800
 8008de8:	40000c00 	.word	0x40000c00
 8008dec:	40001800 	.word	0x40001800

08008df0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008df8:	bf00      	nop
 8008dfa:	370c      	adds	r7, #12
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e0c:	bf00      	nop
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008e20:	bf00      	nop
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d101      	bne.n	8008e3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e042      	b.n	8008ec4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d106      	bne.n	8008e56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f7f8 fbe9 	bl	8001628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2224      	movs	r2, #36	; 0x24
 8008e5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f022 0201 	bic.w	r2, r2, #1
 8008e6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f82c 	bl	8008ecc <UART_SetConfig>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d101      	bne.n	8008e7e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e022      	b.n	8008ec4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d002      	beq.n	8008e8c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 fecc 	bl	8009c24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	685a      	ldr	r2, [r3, #4]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	689a      	ldr	r2, [r3, #8]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008eaa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	681a      	ldr	r2, [r3, #0]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f042 0201 	orr.w	r2, r2, #1
 8008eba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 ff53 	bl	8009d68 <UART_CheckIdleState>
 8008ec2:	4603      	mov	r3, r0
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3708      	adds	r7, #8
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ecc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008ed0:	b08e      	sub	sp, #56	; 0x38
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	689a      	ldr	r2, [r3, #8]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	691b      	ldr	r3, [r3, #16]
 8008ee4:	431a      	orrs	r2, r3
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	695b      	ldr	r3, [r3, #20]
 8008eea:	431a      	orrs	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	69db      	ldr	r3, [r3, #28]
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ef8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008efa:	4313      	orrs	r3, r2
 8008efc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	4bc1      	ldr	r3, [pc, #772]	; (800920c <UART_SetConfig+0x340>)
 8008f06:	4013      	ands	r3, r2
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	6812      	ldr	r2, [r2, #0]
 8008f0c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008f0e:	430b      	orrs	r3, r1
 8008f10:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	68da      	ldr	r2, [r3, #12]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	430a      	orrs	r2, r1
 8008f26:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	699b      	ldr	r3, [r3, #24]
 8008f2c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4ab7      	ldr	r2, [pc, #732]	; (8009210 <UART_SetConfig+0x344>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d004      	beq.n	8008f42 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6a1b      	ldr	r3, [r3, #32]
 8008f3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	689a      	ldr	r2, [r3, #8]
 8008f48:	4bb2      	ldr	r3, [pc, #712]	; (8009214 <UART_SetConfig+0x348>)
 8008f4a:	4013      	ands	r3, r2
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	6812      	ldr	r2, [r2, #0]
 8008f50:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008f52:	430b      	orrs	r3, r1
 8008f54:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f5c:	f023 010f 	bic.w	r1, r3, #15
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	430a      	orrs	r2, r1
 8008f6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4aa9      	ldr	r2, [pc, #676]	; (8009218 <UART_SetConfig+0x34c>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d177      	bne.n	8009066 <UART_SetConfig+0x19a>
 8008f76:	4ba9      	ldr	r3, [pc, #676]	; (800921c <UART_SetConfig+0x350>)
 8008f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f7e:	2b28      	cmp	r3, #40	; 0x28
 8008f80:	d86c      	bhi.n	800905c <UART_SetConfig+0x190>
 8008f82:	a201      	add	r2, pc, #4	; (adr r2, 8008f88 <UART_SetConfig+0xbc>)
 8008f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f88:	0800902d 	.word	0x0800902d
 8008f8c:	0800905d 	.word	0x0800905d
 8008f90:	0800905d 	.word	0x0800905d
 8008f94:	0800905d 	.word	0x0800905d
 8008f98:	0800905d 	.word	0x0800905d
 8008f9c:	0800905d 	.word	0x0800905d
 8008fa0:	0800905d 	.word	0x0800905d
 8008fa4:	0800905d 	.word	0x0800905d
 8008fa8:	08009035 	.word	0x08009035
 8008fac:	0800905d 	.word	0x0800905d
 8008fb0:	0800905d 	.word	0x0800905d
 8008fb4:	0800905d 	.word	0x0800905d
 8008fb8:	0800905d 	.word	0x0800905d
 8008fbc:	0800905d 	.word	0x0800905d
 8008fc0:	0800905d 	.word	0x0800905d
 8008fc4:	0800905d 	.word	0x0800905d
 8008fc8:	0800903d 	.word	0x0800903d
 8008fcc:	0800905d 	.word	0x0800905d
 8008fd0:	0800905d 	.word	0x0800905d
 8008fd4:	0800905d 	.word	0x0800905d
 8008fd8:	0800905d 	.word	0x0800905d
 8008fdc:	0800905d 	.word	0x0800905d
 8008fe0:	0800905d 	.word	0x0800905d
 8008fe4:	0800905d 	.word	0x0800905d
 8008fe8:	08009045 	.word	0x08009045
 8008fec:	0800905d 	.word	0x0800905d
 8008ff0:	0800905d 	.word	0x0800905d
 8008ff4:	0800905d 	.word	0x0800905d
 8008ff8:	0800905d 	.word	0x0800905d
 8008ffc:	0800905d 	.word	0x0800905d
 8009000:	0800905d 	.word	0x0800905d
 8009004:	0800905d 	.word	0x0800905d
 8009008:	0800904d 	.word	0x0800904d
 800900c:	0800905d 	.word	0x0800905d
 8009010:	0800905d 	.word	0x0800905d
 8009014:	0800905d 	.word	0x0800905d
 8009018:	0800905d 	.word	0x0800905d
 800901c:	0800905d 	.word	0x0800905d
 8009020:	0800905d 	.word	0x0800905d
 8009024:	0800905d 	.word	0x0800905d
 8009028:	08009055 	.word	0x08009055
 800902c:	2301      	movs	r3, #1
 800902e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009032:	e339      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009034:	2304      	movs	r3, #4
 8009036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800903a:	e335      	b.n	80096a8 <UART_SetConfig+0x7dc>
 800903c:	2308      	movs	r3, #8
 800903e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009042:	e331      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009044:	2310      	movs	r3, #16
 8009046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800904a:	e32d      	b.n	80096a8 <UART_SetConfig+0x7dc>
 800904c:	2320      	movs	r3, #32
 800904e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009052:	e329      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009054:	2340      	movs	r3, #64	; 0x40
 8009056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800905a:	e325      	b.n	80096a8 <UART_SetConfig+0x7dc>
 800905c:	2380      	movs	r3, #128	; 0x80
 800905e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009062:	bf00      	nop
 8009064:	e320      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a6d      	ldr	r2, [pc, #436]	; (8009220 <UART_SetConfig+0x354>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d132      	bne.n	80090d6 <UART_SetConfig+0x20a>
 8009070:	4b6a      	ldr	r3, [pc, #424]	; (800921c <UART_SetConfig+0x350>)
 8009072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009074:	f003 0307 	and.w	r3, r3, #7
 8009078:	2b05      	cmp	r3, #5
 800907a:	d827      	bhi.n	80090cc <UART_SetConfig+0x200>
 800907c:	a201      	add	r2, pc, #4	; (adr r2, 8009084 <UART_SetConfig+0x1b8>)
 800907e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009082:	bf00      	nop
 8009084:	0800909d 	.word	0x0800909d
 8009088:	080090a5 	.word	0x080090a5
 800908c:	080090ad 	.word	0x080090ad
 8009090:	080090b5 	.word	0x080090b5
 8009094:	080090bd 	.word	0x080090bd
 8009098:	080090c5 	.word	0x080090c5
 800909c:	2300      	movs	r3, #0
 800909e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090a2:	e301      	b.n	80096a8 <UART_SetConfig+0x7dc>
 80090a4:	2304      	movs	r3, #4
 80090a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090aa:	e2fd      	b.n	80096a8 <UART_SetConfig+0x7dc>
 80090ac:	2308      	movs	r3, #8
 80090ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090b2:	e2f9      	b.n	80096a8 <UART_SetConfig+0x7dc>
 80090b4:	2310      	movs	r3, #16
 80090b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090ba:	e2f5      	b.n	80096a8 <UART_SetConfig+0x7dc>
 80090bc:	2320      	movs	r3, #32
 80090be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090c2:	e2f1      	b.n	80096a8 <UART_SetConfig+0x7dc>
 80090c4:	2340      	movs	r3, #64	; 0x40
 80090c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090ca:	e2ed      	b.n	80096a8 <UART_SetConfig+0x7dc>
 80090cc:	2380      	movs	r3, #128	; 0x80
 80090ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090d2:	bf00      	nop
 80090d4:	e2e8      	b.n	80096a8 <UART_SetConfig+0x7dc>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a52      	ldr	r2, [pc, #328]	; (8009224 <UART_SetConfig+0x358>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d132      	bne.n	8009146 <UART_SetConfig+0x27a>
 80090e0:	4b4e      	ldr	r3, [pc, #312]	; (800921c <UART_SetConfig+0x350>)
 80090e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090e4:	f003 0307 	and.w	r3, r3, #7
 80090e8:	2b05      	cmp	r3, #5
 80090ea:	d827      	bhi.n	800913c <UART_SetConfig+0x270>
 80090ec:	a201      	add	r2, pc, #4	; (adr r2, 80090f4 <UART_SetConfig+0x228>)
 80090ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f2:	bf00      	nop
 80090f4:	0800910d 	.word	0x0800910d
 80090f8:	08009115 	.word	0x08009115
 80090fc:	0800911d 	.word	0x0800911d
 8009100:	08009125 	.word	0x08009125
 8009104:	0800912d 	.word	0x0800912d
 8009108:	08009135 	.word	0x08009135
 800910c:	2300      	movs	r3, #0
 800910e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009112:	e2c9      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009114:	2304      	movs	r3, #4
 8009116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800911a:	e2c5      	b.n	80096a8 <UART_SetConfig+0x7dc>
 800911c:	2308      	movs	r3, #8
 800911e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009122:	e2c1      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009124:	2310      	movs	r3, #16
 8009126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800912a:	e2bd      	b.n	80096a8 <UART_SetConfig+0x7dc>
 800912c:	2320      	movs	r3, #32
 800912e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009132:	e2b9      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009134:	2340      	movs	r3, #64	; 0x40
 8009136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800913a:	e2b5      	b.n	80096a8 <UART_SetConfig+0x7dc>
 800913c:	2380      	movs	r3, #128	; 0x80
 800913e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009142:	bf00      	nop
 8009144:	e2b0      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a37      	ldr	r2, [pc, #220]	; (8009228 <UART_SetConfig+0x35c>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d132      	bne.n	80091b6 <UART_SetConfig+0x2ea>
 8009150:	4b32      	ldr	r3, [pc, #200]	; (800921c <UART_SetConfig+0x350>)
 8009152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009154:	f003 0307 	and.w	r3, r3, #7
 8009158:	2b05      	cmp	r3, #5
 800915a:	d827      	bhi.n	80091ac <UART_SetConfig+0x2e0>
 800915c:	a201      	add	r2, pc, #4	; (adr r2, 8009164 <UART_SetConfig+0x298>)
 800915e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009162:	bf00      	nop
 8009164:	0800917d 	.word	0x0800917d
 8009168:	08009185 	.word	0x08009185
 800916c:	0800918d 	.word	0x0800918d
 8009170:	08009195 	.word	0x08009195
 8009174:	0800919d 	.word	0x0800919d
 8009178:	080091a5 	.word	0x080091a5
 800917c:	2300      	movs	r3, #0
 800917e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009182:	e291      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009184:	2304      	movs	r3, #4
 8009186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800918a:	e28d      	b.n	80096a8 <UART_SetConfig+0x7dc>
 800918c:	2308      	movs	r3, #8
 800918e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009192:	e289      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009194:	2310      	movs	r3, #16
 8009196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800919a:	e285      	b.n	80096a8 <UART_SetConfig+0x7dc>
 800919c:	2320      	movs	r3, #32
 800919e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091a2:	e281      	b.n	80096a8 <UART_SetConfig+0x7dc>
 80091a4:	2340      	movs	r3, #64	; 0x40
 80091a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091aa:	e27d      	b.n	80096a8 <UART_SetConfig+0x7dc>
 80091ac:	2380      	movs	r3, #128	; 0x80
 80091ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091b2:	bf00      	nop
 80091b4:	e278      	b.n	80096a8 <UART_SetConfig+0x7dc>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a1c      	ldr	r2, [pc, #112]	; (800922c <UART_SetConfig+0x360>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d144      	bne.n	800924a <UART_SetConfig+0x37e>
 80091c0:	4b16      	ldr	r3, [pc, #88]	; (800921c <UART_SetConfig+0x350>)
 80091c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091c4:	f003 0307 	and.w	r3, r3, #7
 80091c8:	2b05      	cmp	r3, #5
 80091ca:	d839      	bhi.n	8009240 <UART_SetConfig+0x374>
 80091cc:	a201      	add	r2, pc, #4	; (adr r2, 80091d4 <UART_SetConfig+0x308>)
 80091ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d2:	bf00      	nop
 80091d4:	080091ed 	.word	0x080091ed
 80091d8:	080091f5 	.word	0x080091f5
 80091dc:	080091fd 	.word	0x080091fd
 80091e0:	08009205 	.word	0x08009205
 80091e4:	08009231 	.word	0x08009231
 80091e8:	08009239 	.word	0x08009239
 80091ec:	2300      	movs	r3, #0
 80091ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091f2:	e259      	b.n	80096a8 <UART_SetConfig+0x7dc>
 80091f4:	2304      	movs	r3, #4
 80091f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091fa:	e255      	b.n	80096a8 <UART_SetConfig+0x7dc>
 80091fc:	2308      	movs	r3, #8
 80091fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009202:	e251      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009204:	2310      	movs	r3, #16
 8009206:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800920a:	e24d      	b.n	80096a8 <UART_SetConfig+0x7dc>
 800920c:	cfff69f3 	.word	0xcfff69f3
 8009210:	58000c00 	.word	0x58000c00
 8009214:	11fff4ff 	.word	0x11fff4ff
 8009218:	40011000 	.word	0x40011000
 800921c:	58024400 	.word	0x58024400
 8009220:	40004400 	.word	0x40004400
 8009224:	40004800 	.word	0x40004800
 8009228:	40004c00 	.word	0x40004c00
 800922c:	40005000 	.word	0x40005000
 8009230:	2320      	movs	r3, #32
 8009232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009236:	e237      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009238:	2340      	movs	r3, #64	; 0x40
 800923a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800923e:	e233      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009240:	2380      	movs	r3, #128	; 0x80
 8009242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009246:	bf00      	nop
 8009248:	e22e      	b.n	80096a8 <UART_SetConfig+0x7dc>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4ab5      	ldr	r2, [pc, #724]	; (8009524 <UART_SetConfig+0x658>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d178      	bne.n	8009346 <UART_SetConfig+0x47a>
 8009254:	4bb4      	ldr	r3, [pc, #720]	; (8009528 <UART_SetConfig+0x65c>)
 8009256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009258:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800925c:	2b28      	cmp	r3, #40	; 0x28
 800925e:	d86d      	bhi.n	800933c <UART_SetConfig+0x470>
 8009260:	a201      	add	r2, pc, #4	; (adr r2, 8009268 <UART_SetConfig+0x39c>)
 8009262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009266:	bf00      	nop
 8009268:	0800930d 	.word	0x0800930d
 800926c:	0800933d 	.word	0x0800933d
 8009270:	0800933d 	.word	0x0800933d
 8009274:	0800933d 	.word	0x0800933d
 8009278:	0800933d 	.word	0x0800933d
 800927c:	0800933d 	.word	0x0800933d
 8009280:	0800933d 	.word	0x0800933d
 8009284:	0800933d 	.word	0x0800933d
 8009288:	08009315 	.word	0x08009315
 800928c:	0800933d 	.word	0x0800933d
 8009290:	0800933d 	.word	0x0800933d
 8009294:	0800933d 	.word	0x0800933d
 8009298:	0800933d 	.word	0x0800933d
 800929c:	0800933d 	.word	0x0800933d
 80092a0:	0800933d 	.word	0x0800933d
 80092a4:	0800933d 	.word	0x0800933d
 80092a8:	0800931d 	.word	0x0800931d
 80092ac:	0800933d 	.word	0x0800933d
 80092b0:	0800933d 	.word	0x0800933d
 80092b4:	0800933d 	.word	0x0800933d
 80092b8:	0800933d 	.word	0x0800933d
 80092bc:	0800933d 	.word	0x0800933d
 80092c0:	0800933d 	.word	0x0800933d
 80092c4:	0800933d 	.word	0x0800933d
 80092c8:	08009325 	.word	0x08009325
 80092cc:	0800933d 	.word	0x0800933d
 80092d0:	0800933d 	.word	0x0800933d
 80092d4:	0800933d 	.word	0x0800933d
 80092d8:	0800933d 	.word	0x0800933d
 80092dc:	0800933d 	.word	0x0800933d
 80092e0:	0800933d 	.word	0x0800933d
 80092e4:	0800933d 	.word	0x0800933d
 80092e8:	0800932d 	.word	0x0800932d
 80092ec:	0800933d 	.word	0x0800933d
 80092f0:	0800933d 	.word	0x0800933d
 80092f4:	0800933d 	.word	0x0800933d
 80092f8:	0800933d 	.word	0x0800933d
 80092fc:	0800933d 	.word	0x0800933d
 8009300:	0800933d 	.word	0x0800933d
 8009304:	0800933d 	.word	0x0800933d
 8009308:	08009335 	.word	0x08009335
 800930c:	2301      	movs	r3, #1
 800930e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009312:	e1c9      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009314:	2304      	movs	r3, #4
 8009316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800931a:	e1c5      	b.n	80096a8 <UART_SetConfig+0x7dc>
 800931c:	2308      	movs	r3, #8
 800931e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009322:	e1c1      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009324:	2310      	movs	r3, #16
 8009326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800932a:	e1bd      	b.n	80096a8 <UART_SetConfig+0x7dc>
 800932c:	2320      	movs	r3, #32
 800932e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009332:	e1b9      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009334:	2340      	movs	r3, #64	; 0x40
 8009336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800933a:	e1b5      	b.n	80096a8 <UART_SetConfig+0x7dc>
 800933c:	2380      	movs	r3, #128	; 0x80
 800933e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009342:	bf00      	nop
 8009344:	e1b0      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a78      	ldr	r2, [pc, #480]	; (800952c <UART_SetConfig+0x660>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d132      	bne.n	80093b6 <UART_SetConfig+0x4ea>
 8009350:	4b75      	ldr	r3, [pc, #468]	; (8009528 <UART_SetConfig+0x65c>)
 8009352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009354:	f003 0307 	and.w	r3, r3, #7
 8009358:	2b05      	cmp	r3, #5
 800935a:	d827      	bhi.n	80093ac <UART_SetConfig+0x4e0>
 800935c:	a201      	add	r2, pc, #4	; (adr r2, 8009364 <UART_SetConfig+0x498>)
 800935e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009362:	bf00      	nop
 8009364:	0800937d 	.word	0x0800937d
 8009368:	08009385 	.word	0x08009385
 800936c:	0800938d 	.word	0x0800938d
 8009370:	08009395 	.word	0x08009395
 8009374:	0800939d 	.word	0x0800939d
 8009378:	080093a5 	.word	0x080093a5
 800937c:	2300      	movs	r3, #0
 800937e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009382:	e191      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009384:	2304      	movs	r3, #4
 8009386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800938a:	e18d      	b.n	80096a8 <UART_SetConfig+0x7dc>
 800938c:	2308      	movs	r3, #8
 800938e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009392:	e189      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009394:	2310      	movs	r3, #16
 8009396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800939a:	e185      	b.n	80096a8 <UART_SetConfig+0x7dc>
 800939c:	2320      	movs	r3, #32
 800939e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093a2:	e181      	b.n	80096a8 <UART_SetConfig+0x7dc>
 80093a4:	2340      	movs	r3, #64	; 0x40
 80093a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093aa:	e17d      	b.n	80096a8 <UART_SetConfig+0x7dc>
 80093ac:	2380      	movs	r3, #128	; 0x80
 80093ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093b2:	bf00      	nop
 80093b4:	e178      	b.n	80096a8 <UART_SetConfig+0x7dc>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a5d      	ldr	r2, [pc, #372]	; (8009530 <UART_SetConfig+0x664>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d132      	bne.n	8009426 <UART_SetConfig+0x55a>
 80093c0:	4b59      	ldr	r3, [pc, #356]	; (8009528 <UART_SetConfig+0x65c>)
 80093c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093c4:	f003 0307 	and.w	r3, r3, #7
 80093c8:	2b05      	cmp	r3, #5
 80093ca:	d827      	bhi.n	800941c <UART_SetConfig+0x550>
 80093cc:	a201      	add	r2, pc, #4	; (adr r2, 80093d4 <UART_SetConfig+0x508>)
 80093ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d2:	bf00      	nop
 80093d4:	080093ed 	.word	0x080093ed
 80093d8:	080093f5 	.word	0x080093f5
 80093dc:	080093fd 	.word	0x080093fd
 80093e0:	08009405 	.word	0x08009405
 80093e4:	0800940d 	.word	0x0800940d
 80093e8:	08009415 	.word	0x08009415
 80093ec:	2300      	movs	r3, #0
 80093ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093f2:	e159      	b.n	80096a8 <UART_SetConfig+0x7dc>
 80093f4:	2304      	movs	r3, #4
 80093f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093fa:	e155      	b.n	80096a8 <UART_SetConfig+0x7dc>
 80093fc:	2308      	movs	r3, #8
 80093fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009402:	e151      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009404:	2310      	movs	r3, #16
 8009406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800940a:	e14d      	b.n	80096a8 <UART_SetConfig+0x7dc>
 800940c:	2320      	movs	r3, #32
 800940e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009412:	e149      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009414:	2340      	movs	r3, #64	; 0x40
 8009416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800941a:	e145      	b.n	80096a8 <UART_SetConfig+0x7dc>
 800941c:	2380      	movs	r3, #128	; 0x80
 800941e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009422:	bf00      	nop
 8009424:	e140      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a42      	ldr	r2, [pc, #264]	; (8009534 <UART_SetConfig+0x668>)
 800942c:	4293      	cmp	r3, r2
 800942e:	f040 8083 	bne.w	8009538 <UART_SetConfig+0x66c>
 8009432:	4b3d      	ldr	r3, [pc, #244]	; (8009528 <UART_SetConfig+0x65c>)
 8009434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009436:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800943a:	2b28      	cmp	r3, #40	; 0x28
 800943c:	d86c      	bhi.n	8009518 <UART_SetConfig+0x64c>
 800943e:	a201      	add	r2, pc, #4	; (adr r2, 8009444 <UART_SetConfig+0x578>)
 8009440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009444:	080094e9 	.word	0x080094e9
 8009448:	08009519 	.word	0x08009519
 800944c:	08009519 	.word	0x08009519
 8009450:	08009519 	.word	0x08009519
 8009454:	08009519 	.word	0x08009519
 8009458:	08009519 	.word	0x08009519
 800945c:	08009519 	.word	0x08009519
 8009460:	08009519 	.word	0x08009519
 8009464:	080094f1 	.word	0x080094f1
 8009468:	08009519 	.word	0x08009519
 800946c:	08009519 	.word	0x08009519
 8009470:	08009519 	.word	0x08009519
 8009474:	08009519 	.word	0x08009519
 8009478:	08009519 	.word	0x08009519
 800947c:	08009519 	.word	0x08009519
 8009480:	08009519 	.word	0x08009519
 8009484:	080094f9 	.word	0x080094f9
 8009488:	08009519 	.word	0x08009519
 800948c:	08009519 	.word	0x08009519
 8009490:	08009519 	.word	0x08009519
 8009494:	08009519 	.word	0x08009519
 8009498:	08009519 	.word	0x08009519
 800949c:	08009519 	.word	0x08009519
 80094a0:	08009519 	.word	0x08009519
 80094a4:	08009501 	.word	0x08009501
 80094a8:	08009519 	.word	0x08009519
 80094ac:	08009519 	.word	0x08009519
 80094b0:	08009519 	.word	0x08009519
 80094b4:	08009519 	.word	0x08009519
 80094b8:	08009519 	.word	0x08009519
 80094bc:	08009519 	.word	0x08009519
 80094c0:	08009519 	.word	0x08009519
 80094c4:	08009509 	.word	0x08009509
 80094c8:	08009519 	.word	0x08009519
 80094cc:	08009519 	.word	0x08009519
 80094d0:	08009519 	.word	0x08009519
 80094d4:	08009519 	.word	0x08009519
 80094d8:	08009519 	.word	0x08009519
 80094dc:	08009519 	.word	0x08009519
 80094e0:	08009519 	.word	0x08009519
 80094e4:	08009511 	.word	0x08009511
 80094e8:	2301      	movs	r3, #1
 80094ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094ee:	e0db      	b.n	80096a8 <UART_SetConfig+0x7dc>
 80094f0:	2304      	movs	r3, #4
 80094f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094f6:	e0d7      	b.n	80096a8 <UART_SetConfig+0x7dc>
 80094f8:	2308      	movs	r3, #8
 80094fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094fe:	e0d3      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009500:	2310      	movs	r3, #16
 8009502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009506:	e0cf      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009508:	2320      	movs	r3, #32
 800950a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800950e:	e0cb      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009510:	2340      	movs	r3, #64	; 0x40
 8009512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009516:	e0c7      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009518:	2380      	movs	r3, #128	; 0x80
 800951a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800951e:	bf00      	nop
 8009520:	e0c2      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009522:	bf00      	nop
 8009524:	40011400 	.word	0x40011400
 8009528:	58024400 	.word	0x58024400
 800952c:	40007800 	.word	0x40007800
 8009530:	40007c00 	.word	0x40007c00
 8009534:	40011800 	.word	0x40011800
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4ab2      	ldr	r2, [pc, #712]	; (8009808 <UART_SetConfig+0x93c>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d177      	bne.n	8009632 <UART_SetConfig+0x766>
 8009542:	4bb2      	ldr	r3, [pc, #712]	; (800980c <UART_SetConfig+0x940>)
 8009544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009546:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800954a:	2b28      	cmp	r3, #40	; 0x28
 800954c:	d86c      	bhi.n	8009628 <UART_SetConfig+0x75c>
 800954e:	a201      	add	r2, pc, #4	; (adr r2, 8009554 <UART_SetConfig+0x688>)
 8009550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009554:	080095f9 	.word	0x080095f9
 8009558:	08009629 	.word	0x08009629
 800955c:	08009629 	.word	0x08009629
 8009560:	08009629 	.word	0x08009629
 8009564:	08009629 	.word	0x08009629
 8009568:	08009629 	.word	0x08009629
 800956c:	08009629 	.word	0x08009629
 8009570:	08009629 	.word	0x08009629
 8009574:	08009601 	.word	0x08009601
 8009578:	08009629 	.word	0x08009629
 800957c:	08009629 	.word	0x08009629
 8009580:	08009629 	.word	0x08009629
 8009584:	08009629 	.word	0x08009629
 8009588:	08009629 	.word	0x08009629
 800958c:	08009629 	.word	0x08009629
 8009590:	08009629 	.word	0x08009629
 8009594:	08009609 	.word	0x08009609
 8009598:	08009629 	.word	0x08009629
 800959c:	08009629 	.word	0x08009629
 80095a0:	08009629 	.word	0x08009629
 80095a4:	08009629 	.word	0x08009629
 80095a8:	08009629 	.word	0x08009629
 80095ac:	08009629 	.word	0x08009629
 80095b0:	08009629 	.word	0x08009629
 80095b4:	08009611 	.word	0x08009611
 80095b8:	08009629 	.word	0x08009629
 80095bc:	08009629 	.word	0x08009629
 80095c0:	08009629 	.word	0x08009629
 80095c4:	08009629 	.word	0x08009629
 80095c8:	08009629 	.word	0x08009629
 80095cc:	08009629 	.word	0x08009629
 80095d0:	08009629 	.word	0x08009629
 80095d4:	08009619 	.word	0x08009619
 80095d8:	08009629 	.word	0x08009629
 80095dc:	08009629 	.word	0x08009629
 80095e0:	08009629 	.word	0x08009629
 80095e4:	08009629 	.word	0x08009629
 80095e8:	08009629 	.word	0x08009629
 80095ec:	08009629 	.word	0x08009629
 80095f0:	08009629 	.word	0x08009629
 80095f4:	08009621 	.word	0x08009621
 80095f8:	2301      	movs	r3, #1
 80095fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095fe:	e053      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009600:	2304      	movs	r3, #4
 8009602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009606:	e04f      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009608:	2308      	movs	r3, #8
 800960a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800960e:	e04b      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009610:	2310      	movs	r3, #16
 8009612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009616:	e047      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009618:	2320      	movs	r3, #32
 800961a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800961e:	e043      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009620:	2340      	movs	r3, #64	; 0x40
 8009622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009626:	e03f      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009628:	2380      	movs	r3, #128	; 0x80
 800962a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800962e:	bf00      	nop
 8009630:	e03a      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a76      	ldr	r2, [pc, #472]	; (8009810 <UART_SetConfig+0x944>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d132      	bne.n	80096a2 <UART_SetConfig+0x7d6>
 800963c:	4b73      	ldr	r3, [pc, #460]	; (800980c <UART_SetConfig+0x940>)
 800963e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009640:	f003 0307 	and.w	r3, r3, #7
 8009644:	2b05      	cmp	r3, #5
 8009646:	d827      	bhi.n	8009698 <UART_SetConfig+0x7cc>
 8009648:	a201      	add	r2, pc, #4	; (adr r2, 8009650 <UART_SetConfig+0x784>)
 800964a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800964e:	bf00      	nop
 8009650:	08009669 	.word	0x08009669
 8009654:	08009671 	.word	0x08009671
 8009658:	08009679 	.word	0x08009679
 800965c:	08009681 	.word	0x08009681
 8009660:	08009689 	.word	0x08009689
 8009664:	08009691 	.word	0x08009691
 8009668:	2302      	movs	r3, #2
 800966a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800966e:	e01b      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009670:	2304      	movs	r3, #4
 8009672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009676:	e017      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009678:	2308      	movs	r3, #8
 800967a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800967e:	e013      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009680:	2310      	movs	r3, #16
 8009682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009686:	e00f      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009688:	2320      	movs	r3, #32
 800968a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800968e:	e00b      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009690:	2340      	movs	r3, #64	; 0x40
 8009692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009696:	e007      	b.n	80096a8 <UART_SetConfig+0x7dc>
 8009698:	2380      	movs	r3, #128	; 0x80
 800969a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800969e:	bf00      	nop
 80096a0:	e002      	b.n	80096a8 <UART_SetConfig+0x7dc>
 80096a2:	2380      	movs	r3, #128	; 0x80
 80096a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a58      	ldr	r2, [pc, #352]	; (8009810 <UART_SetConfig+0x944>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	f040 80b6 	bne.w	8009820 <UART_SetConfig+0x954>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80096b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80096b8:	2b08      	cmp	r3, #8
 80096ba:	d019      	beq.n	80096f0 <UART_SetConfig+0x824>
 80096bc:	2b08      	cmp	r3, #8
 80096be:	dc04      	bgt.n	80096ca <UART_SetConfig+0x7fe>
 80096c0:	2b02      	cmp	r3, #2
 80096c2:	d009      	beq.n	80096d8 <UART_SetConfig+0x80c>
 80096c4:	2b04      	cmp	r3, #4
 80096c6:	d00b      	beq.n	80096e0 <UART_SetConfig+0x814>
 80096c8:	e034      	b.n	8009734 <UART_SetConfig+0x868>
 80096ca:	2b20      	cmp	r3, #32
 80096cc:	d02b      	beq.n	8009726 <UART_SetConfig+0x85a>
 80096ce:	2b40      	cmp	r3, #64	; 0x40
 80096d0:	d02c      	beq.n	800972c <UART_SetConfig+0x860>
 80096d2:	2b10      	cmp	r3, #16
 80096d4:	d014      	beq.n	8009700 <UART_SetConfig+0x834>
 80096d6:	e02d      	b.n	8009734 <UART_SetConfig+0x868>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80096d8:	f7fe f97a 	bl	80079d0 <HAL_RCCEx_GetD3PCLK1Freq>
 80096dc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80096de:	e02f      	b.n	8009740 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096e0:	f107 0314 	add.w	r3, r7, #20
 80096e4:	4618      	mov	r0, r3
 80096e6:	f7fe f989 	bl	80079fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80096ea:	69bb      	ldr	r3, [r7, #24]
 80096ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80096ee:	e027      	b.n	8009740 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096f0:	f107 0308 	add.w	r3, r7, #8
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7fe facd 	bl	8007c94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80096fe:	e01f      	b.n	8009740 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009700:	4b42      	ldr	r3, [pc, #264]	; (800980c <UART_SetConfig+0x940>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f003 0320 	and.w	r3, r3, #32
 8009708:	2b00      	cmp	r3, #0
 800970a:	d009      	beq.n	8009720 <UART_SetConfig+0x854>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800970c:	4b3f      	ldr	r3, [pc, #252]	; (800980c <UART_SetConfig+0x940>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	08db      	lsrs	r3, r3, #3
 8009712:	f003 0303 	and.w	r3, r3, #3
 8009716:	4a3f      	ldr	r2, [pc, #252]	; (8009814 <UART_SetConfig+0x948>)
 8009718:	fa22 f303 	lsr.w	r3, r2, r3
 800971c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800971e:	e00f      	b.n	8009740 <UART_SetConfig+0x874>
          pclk = (uint32_t) HSI_VALUE;
 8009720:	4b3c      	ldr	r3, [pc, #240]	; (8009814 <UART_SetConfig+0x948>)
 8009722:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009724:	e00c      	b.n	8009740 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009726:	4b3c      	ldr	r3, [pc, #240]	; (8009818 <UART_SetConfig+0x94c>)
 8009728:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800972a:	e009      	b.n	8009740 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800972c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009730:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009732:	e005      	b.n	8009740 <UART_SetConfig+0x874>
      default:
        pclk = 0U;
 8009734:	2300      	movs	r3, #0
 8009736:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009738:	2301      	movs	r3, #1
 800973a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800973e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009742:	2b00      	cmp	r3, #0
 8009744:	f000 8251 	beq.w	8009bea <UART_SetConfig+0xd1e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974c:	4a33      	ldr	r2, [pc, #204]	; (800981c <UART_SetConfig+0x950>)
 800974e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009752:	461a      	mov	r2, r3
 8009754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009756:	fbb3 f3f2 	udiv	r3, r3, r2
 800975a:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	685a      	ldr	r2, [r3, #4]
 8009760:	4613      	mov	r3, r2
 8009762:	005b      	lsls	r3, r3, #1
 8009764:	4413      	add	r3, r2
 8009766:	6a3a      	ldr	r2, [r7, #32]
 8009768:	429a      	cmp	r2, r3
 800976a:	d305      	bcc.n	8009778 <UART_SetConfig+0x8ac>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009772:	6a3a      	ldr	r2, [r7, #32]
 8009774:	429a      	cmp	r2, r3
 8009776:	d903      	bls.n	8009780 <UART_SetConfig+0x8b4>
      {
        ret = HAL_ERROR;
 8009778:	2301      	movs	r3, #1
 800977a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800977e:	e234      	b.n	8009bea <UART_SetConfig+0xd1e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009782:	4618      	mov	r0, r3
 8009784:	f04f 0100 	mov.w	r1, #0
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800978c:	4a23      	ldr	r2, [pc, #140]	; (800981c <UART_SetConfig+0x950>)
 800978e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009792:	b29b      	uxth	r3, r3
 8009794:	f04f 0400 	mov.w	r4, #0
 8009798:	461a      	mov	r2, r3
 800979a:	4623      	mov	r3, r4
 800979c:	f7f6 fda8 	bl	80002f0 <__aeabi_uldivmod>
 80097a0:	4603      	mov	r3, r0
 80097a2:	460c      	mov	r4, r1
 80097a4:	4619      	mov	r1, r3
 80097a6:	4622      	mov	r2, r4
 80097a8:	f04f 0300 	mov.w	r3, #0
 80097ac:	f04f 0400 	mov.w	r4, #0
 80097b0:	0214      	lsls	r4, r2, #8
 80097b2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80097b6:	020b      	lsls	r3, r1, #8
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	6852      	ldr	r2, [r2, #4]
 80097bc:	0852      	lsrs	r2, r2, #1
 80097be:	4611      	mov	r1, r2
 80097c0:	f04f 0200 	mov.w	r2, #0
 80097c4:	eb13 0b01 	adds.w	fp, r3, r1
 80097c8:	eb44 0c02 	adc.w	ip, r4, r2
 80097cc:	4658      	mov	r0, fp
 80097ce:	4661      	mov	r1, ip
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	f04f 0400 	mov.w	r4, #0
 80097d8:	461a      	mov	r2, r3
 80097da:	4623      	mov	r3, r4
 80097dc:	f7f6 fd88 	bl	80002f0 <__aeabi_uldivmod>
 80097e0:	4603      	mov	r3, r0
 80097e2:	460c      	mov	r4, r1
 80097e4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80097e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097ec:	d308      	bcc.n	8009800 <UART_SetConfig+0x934>
 80097ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097f4:	d204      	bcs.n	8009800 <UART_SetConfig+0x934>
        {
          huart->Instance->BRR = usartdiv;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097fc:	60da      	str	r2, [r3, #12]
 80097fe:	e1f4      	b.n	8009bea <UART_SetConfig+0xd1e>
        }
        else
        {
          ret = HAL_ERROR;
 8009800:	2301      	movs	r3, #1
 8009802:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009806:	e1f0      	b.n	8009bea <UART_SetConfig+0xd1e>
 8009808:	40011c00 	.word	0x40011c00
 800980c:	58024400 	.word	0x58024400
 8009810:	58000c00 	.word	0x58000c00
 8009814:	03d09000 	.word	0x03d09000
 8009818:	003d0900 	.word	0x003d0900
 800981c:	0800b32c 	.word	0x0800b32c
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	69db      	ldr	r3, [r3, #28]
 8009824:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009828:	f040 80f8 	bne.w	8009a1c <UART_SetConfig+0xb50>
  {
    switch (clocksource)
 800982c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009830:	2b40      	cmp	r3, #64	; 0x40
 8009832:	f200 80b7 	bhi.w	80099a4 <UART_SetConfig+0xad8>
 8009836:	a201      	add	r2, pc, #4	; (adr r2, 800983c <UART_SetConfig+0x970>)
 8009838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800983c:	08009941 	.word	0x08009941
 8009840:	08009949 	.word	0x08009949
 8009844:	080099a5 	.word	0x080099a5
 8009848:	080099a5 	.word	0x080099a5
 800984c:	08009951 	.word	0x08009951
 8009850:	080099a5 	.word	0x080099a5
 8009854:	080099a5 	.word	0x080099a5
 8009858:	080099a5 	.word	0x080099a5
 800985c:	08009961 	.word	0x08009961
 8009860:	080099a5 	.word	0x080099a5
 8009864:	080099a5 	.word	0x080099a5
 8009868:	080099a5 	.word	0x080099a5
 800986c:	080099a5 	.word	0x080099a5
 8009870:	080099a5 	.word	0x080099a5
 8009874:	080099a5 	.word	0x080099a5
 8009878:	080099a5 	.word	0x080099a5
 800987c:	08009971 	.word	0x08009971
 8009880:	080099a5 	.word	0x080099a5
 8009884:	080099a5 	.word	0x080099a5
 8009888:	080099a5 	.word	0x080099a5
 800988c:	080099a5 	.word	0x080099a5
 8009890:	080099a5 	.word	0x080099a5
 8009894:	080099a5 	.word	0x080099a5
 8009898:	080099a5 	.word	0x080099a5
 800989c:	080099a5 	.word	0x080099a5
 80098a0:	080099a5 	.word	0x080099a5
 80098a4:	080099a5 	.word	0x080099a5
 80098a8:	080099a5 	.word	0x080099a5
 80098ac:	080099a5 	.word	0x080099a5
 80098b0:	080099a5 	.word	0x080099a5
 80098b4:	080099a5 	.word	0x080099a5
 80098b8:	080099a5 	.word	0x080099a5
 80098bc:	08009997 	.word	0x08009997
 80098c0:	080099a5 	.word	0x080099a5
 80098c4:	080099a5 	.word	0x080099a5
 80098c8:	080099a5 	.word	0x080099a5
 80098cc:	080099a5 	.word	0x080099a5
 80098d0:	080099a5 	.word	0x080099a5
 80098d4:	080099a5 	.word	0x080099a5
 80098d8:	080099a5 	.word	0x080099a5
 80098dc:	080099a5 	.word	0x080099a5
 80098e0:	080099a5 	.word	0x080099a5
 80098e4:	080099a5 	.word	0x080099a5
 80098e8:	080099a5 	.word	0x080099a5
 80098ec:	080099a5 	.word	0x080099a5
 80098f0:	080099a5 	.word	0x080099a5
 80098f4:	080099a5 	.word	0x080099a5
 80098f8:	080099a5 	.word	0x080099a5
 80098fc:	080099a5 	.word	0x080099a5
 8009900:	080099a5 	.word	0x080099a5
 8009904:	080099a5 	.word	0x080099a5
 8009908:	080099a5 	.word	0x080099a5
 800990c:	080099a5 	.word	0x080099a5
 8009910:	080099a5 	.word	0x080099a5
 8009914:	080099a5 	.word	0x080099a5
 8009918:	080099a5 	.word	0x080099a5
 800991c:	080099a5 	.word	0x080099a5
 8009920:	080099a5 	.word	0x080099a5
 8009924:	080099a5 	.word	0x080099a5
 8009928:	080099a5 	.word	0x080099a5
 800992c:	080099a5 	.word	0x080099a5
 8009930:	080099a5 	.word	0x080099a5
 8009934:	080099a5 	.word	0x080099a5
 8009938:	080099a5 	.word	0x080099a5
 800993c:	0800999d 	.word	0x0800999d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009940:	f7fc ff40 	bl	80067c4 <HAL_RCC_GetPCLK1Freq>
 8009944:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009946:	e033      	b.n	80099b0 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009948:	f7fc ff52 	bl	80067f0 <HAL_RCC_GetPCLK2Freq>
 800994c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800994e:	e02f      	b.n	80099b0 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009950:	f107 0314 	add.w	r3, r7, #20
 8009954:	4618      	mov	r0, r3
 8009956:	f7fe f851 	bl	80079fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800995a:	69bb      	ldr	r3, [r7, #24]
 800995c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800995e:	e027      	b.n	80099b0 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009960:	f107 0308 	add.w	r3, r7, #8
 8009964:	4618      	mov	r0, r3
 8009966:	f7fe f995 	bl	8007c94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800996e:	e01f      	b.n	80099b0 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009970:	4ba8      	ldr	r3, [pc, #672]	; (8009c14 <UART_SetConfig+0xd48>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f003 0320 	and.w	r3, r3, #32
 8009978:	2b00      	cmp	r3, #0
 800997a:	d009      	beq.n	8009990 <UART_SetConfig+0xac4>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800997c:	4ba5      	ldr	r3, [pc, #660]	; (8009c14 <UART_SetConfig+0xd48>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	08db      	lsrs	r3, r3, #3
 8009982:	f003 0303 	and.w	r3, r3, #3
 8009986:	4aa4      	ldr	r2, [pc, #656]	; (8009c18 <UART_SetConfig+0xd4c>)
 8009988:	fa22 f303 	lsr.w	r3, r2, r3
 800998c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800998e:	e00f      	b.n	80099b0 <UART_SetConfig+0xae4>
          pclk = (uint32_t) HSI_VALUE;
 8009990:	4ba1      	ldr	r3, [pc, #644]	; (8009c18 <UART_SetConfig+0xd4c>)
 8009992:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009994:	e00c      	b.n	80099b0 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009996:	4ba1      	ldr	r3, [pc, #644]	; (8009c1c <UART_SetConfig+0xd50>)
 8009998:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800999a:	e009      	b.n	80099b0 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800999c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80099a2:	e005      	b.n	80099b0 <UART_SetConfig+0xae4>
      default:
        pclk = 0U;
 80099a4:	2300      	movs	r3, #0
 80099a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80099a8:	2301      	movs	r3, #1
 80099aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80099ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80099b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	f000 8119 	beq.w	8009bea <UART_SetConfig+0xd1e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099bc:	4a98      	ldr	r2, [pc, #608]	; (8009c20 <UART_SetConfig+0xd54>)
 80099be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099c2:	461a      	mov	r2, r3
 80099c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80099ca:	005a      	lsls	r2, r3, #1
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	085b      	lsrs	r3, r3, #1
 80099d2:	441a      	add	r2, r3
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80099dc:	b29b      	uxth	r3, r3
 80099de:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e2:	2b0f      	cmp	r3, #15
 80099e4:	d916      	bls.n	8009a14 <UART_SetConfig+0xb48>
 80099e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099ec:	d212      	bcs.n	8009a14 <UART_SetConfig+0xb48>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80099ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	f023 030f 	bic.w	r3, r3, #15
 80099f6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80099f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099fa:	085b      	lsrs	r3, r3, #1
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	f003 0307 	and.w	r3, r3, #7
 8009a02:	b29a      	uxth	r2, r3
 8009a04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009a06:	4313      	orrs	r3, r2
 8009a08:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009a10:	60da      	str	r2, [r3, #12]
 8009a12:	e0ea      	b.n	8009bea <UART_SetConfig+0xd1e>
      }
      else
      {
        ret = HAL_ERROR;
 8009a14:	2301      	movs	r3, #1
 8009a16:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009a1a:	e0e6      	b.n	8009bea <UART_SetConfig+0xd1e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009a1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009a20:	2b40      	cmp	r3, #64	; 0x40
 8009a22:	f200 80b7 	bhi.w	8009b94 <UART_SetConfig+0xcc8>
 8009a26:	a201      	add	r2, pc, #4	; (adr r2, 8009a2c <UART_SetConfig+0xb60>)
 8009a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a2c:	08009b31 	.word	0x08009b31
 8009a30:	08009b39 	.word	0x08009b39
 8009a34:	08009b95 	.word	0x08009b95
 8009a38:	08009b95 	.word	0x08009b95
 8009a3c:	08009b41 	.word	0x08009b41
 8009a40:	08009b95 	.word	0x08009b95
 8009a44:	08009b95 	.word	0x08009b95
 8009a48:	08009b95 	.word	0x08009b95
 8009a4c:	08009b51 	.word	0x08009b51
 8009a50:	08009b95 	.word	0x08009b95
 8009a54:	08009b95 	.word	0x08009b95
 8009a58:	08009b95 	.word	0x08009b95
 8009a5c:	08009b95 	.word	0x08009b95
 8009a60:	08009b95 	.word	0x08009b95
 8009a64:	08009b95 	.word	0x08009b95
 8009a68:	08009b95 	.word	0x08009b95
 8009a6c:	08009b61 	.word	0x08009b61
 8009a70:	08009b95 	.word	0x08009b95
 8009a74:	08009b95 	.word	0x08009b95
 8009a78:	08009b95 	.word	0x08009b95
 8009a7c:	08009b95 	.word	0x08009b95
 8009a80:	08009b95 	.word	0x08009b95
 8009a84:	08009b95 	.word	0x08009b95
 8009a88:	08009b95 	.word	0x08009b95
 8009a8c:	08009b95 	.word	0x08009b95
 8009a90:	08009b95 	.word	0x08009b95
 8009a94:	08009b95 	.word	0x08009b95
 8009a98:	08009b95 	.word	0x08009b95
 8009a9c:	08009b95 	.word	0x08009b95
 8009aa0:	08009b95 	.word	0x08009b95
 8009aa4:	08009b95 	.word	0x08009b95
 8009aa8:	08009b95 	.word	0x08009b95
 8009aac:	08009b87 	.word	0x08009b87
 8009ab0:	08009b95 	.word	0x08009b95
 8009ab4:	08009b95 	.word	0x08009b95
 8009ab8:	08009b95 	.word	0x08009b95
 8009abc:	08009b95 	.word	0x08009b95
 8009ac0:	08009b95 	.word	0x08009b95
 8009ac4:	08009b95 	.word	0x08009b95
 8009ac8:	08009b95 	.word	0x08009b95
 8009acc:	08009b95 	.word	0x08009b95
 8009ad0:	08009b95 	.word	0x08009b95
 8009ad4:	08009b95 	.word	0x08009b95
 8009ad8:	08009b95 	.word	0x08009b95
 8009adc:	08009b95 	.word	0x08009b95
 8009ae0:	08009b95 	.word	0x08009b95
 8009ae4:	08009b95 	.word	0x08009b95
 8009ae8:	08009b95 	.word	0x08009b95
 8009aec:	08009b95 	.word	0x08009b95
 8009af0:	08009b95 	.word	0x08009b95
 8009af4:	08009b95 	.word	0x08009b95
 8009af8:	08009b95 	.word	0x08009b95
 8009afc:	08009b95 	.word	0x08009b95
 8009b00:	08009b95 	.word	0x08009b95
 8009b04:	08009b95 	.word	0x08009b95
 8009b08:	08009b95 	.word	0x08009b95
 8009b0c:	08009b95 	.word	0x08009b95
 8009b10:	08009b95 	.word	0x08009b95
 8009b14:	08009b95 	.word	0x08009b95
 8009b18:	08009b95 	.word	0x08009b95
 8009b1c:	08009b95 	.word	0x08009b95
 8009b20:	08009b95 	.word	0x08009b95
 8009b24:	08009b95 	.word	0x08009b95
 8009b28:	08009b95 	.word	0x08009b95
 8009b2c:	08009b8d 	.word	0x08009b8d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b30:	f7fc fe48 	bl	80067c4 <HAL_RCC_GetPCLK1Freq>
 8009b34:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009b36:	e033      	b.n	8009ba0 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b38:	f7fc fe5a 	bl	80067f0 <HAL_RCC_GetPCLK2Freq>
 8009b3c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009b3e:	e02f      	b.n	8009ba0 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b40:	f107 0314 	add.w	r3, r7, #20
 8009b44:	4618      	mov	r0, r3
 8009b46:	f7fd ff59 	bl	80079fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009b4a:	69bb      	ldr	r3, [r7, #24]
 8009b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b4e:	e027      	b.n	8009ba0 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b50:	f107 0308 	add.w	r3, r7, #8
 8009b54:	4618      	mov	r0, r3
 8009b56:	f7fe f89d 	bl	8007c94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b5e:	e01f      	b.n	8009ba0 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b60:	4b2c      	ldr	r3, [pc, #176]	; (8009c14 <UART_SetConfig+0xd48>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f003 0320 	and.w	r3, r3, #32
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d009      	beq.n	8009b80 <UART_SetConfig+0xcb4>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009b6c:	4b29      	ldr	r3, [pc, #164]	; (8009c14 <UART_SetConfig+0xd48>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	08db      	lsrs	r3, r3, #3
 8009b72:	f003 0303 	and.w	r3, r3, #3
 8009b76:	4a28      	ldr	r2, [pc, #160]	; (8009c18 <UART_SetConfig+0xd4c>)
 8009b78:	fa22 f303 	lsr.w	r3, r2, r3
 8009b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009b7e:	e00f      	b.n	8009ba0 <UART_SetConfig+0xcd4>
          pclk = (uint32_t) HSI_VALUE;
 8009b80:	4b25      	ldr	r3, [pc, #148]	; (8009c18 <UART_SetConfig+0xd4c>)
 8009b82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b84:	e00c      	b.n	8009ba0 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009b86:	4b25      	ldr	r3, [pc, #148]	; (8009c1c <UART_SetConfig+0xd50>)
 8009b88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b8a:	e009      	b.n	8009ba0 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b92:	e005      	b.n	8009ba0 <UART_SetConfig+0xcd4>
      default:
        pclk = 0U;
 8009b94:	2300      	movs	r3, #0
 8009b96:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009b9e:	bf00      	nop
    }

    if (pclk != 0U)
 8009ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d021      	beq.n	8009bea <UART_SetConfig+0xd1e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009baa:	4a1d      	ldr	r2, [pc, #116]	; (8009c20 <UART_SetConfig+0xd54>)
 8009bac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb4:	fbb3 f2f2 	udiv	r2, r3, r2
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	085b      	lsrs	r3, r3, #1
 8009bbe:	441a      	add	r2, r3
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bce:	2b0f      	cmp	r3, #15
 8009bd0:	d908      	bls.n	8009be4 <UART_SetConfig+0xd18>
 8009bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bd8:	d204      	bcs.n	8009be4 <UART_SetConfig+0xd18>
      {
        huart->Instance->BRR = usartdiv;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009be0:	60da      	str	r2, [r3, #12]
 8009be2:	e002      	b.n	8009bea <UART_SetConfig+0xd1e>
      }
      else
      {
        ret = HAL_ERROR;
 8009be4:	2301      	movs	r3, #1
 8009be6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2201      	movs	r2, #1
 8009bee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2201      	movs	r2, #1
 8009bf6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009c06:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3738      	adds	r7, #56	; 0x38
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8009c14:	58024400 	.word	0x58024400
 8009c18:	03d09000 	.word	0x03d09000
 8009c1c:	003d0900 	.word	0x003d0900
 8009c20:	0800b32c 	.word	0x0800b32c

08009c24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b083      	sub	sp, #12
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c30:	f003 0301 	and.w	r3, r3, #1
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d00a      	beq.n	8009c4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	430a      	orrs	r2, r1
 8009c4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c52:	f003 0302 	and.w	r3, r3, #2
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d00a      	beq.n	8009c70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	430a      	orrs	r2, r1
 8009c6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c74:	f003 0304 	and.w	r3, r3, #4
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00a      	beq.n	8009c92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	430a      	orrs	r2, r1
 8009c90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c96:	f003 0308 	and.w	r3, r3, #8
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d00a      	beq.n	8009cb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	430a      	orrs	r2, r1
 8009cb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cb8:	f003 0310 	and.w	r3, r3, #16
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d00a      	beq.n	8009cd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	430a      	orrs	r2, r1
 8009cd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cda:	f003 0320 	and.w	r3, r3, #32
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d00a      	beq.n	8009cf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	689b      	ldr	r3, [r3, #8]
 8009ce8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	430a      	orrs	r2, r1
 8009cf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d01a      	beq.n	8009d3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	430a      	orrs	r2, r1
 8009d18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d22:	d10a      	bne.n	8009d3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	430a      	orrs	r2, r1
 8009d38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d00a      	beq.n	8009d5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	430a      	orrs	r2, r1
 8009d5a:	605a      	str	r2, [r3, #4]
  }
}
 8009d5c:	bf00      	nop
 8009d5e:	370c      	adds	r7, #12
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b086      	sub	sp, #24
 8009d6c:	af02      	add	r7, sp, #8
 8009d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009d78:	f7f7 fed6 	bl	8001b28 <HAL_GetTick>
 8009d7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f003 0308 	and.w	r3, r3, #8
 8009d88:	2b08      	cmp	r3, #8
 8009d8a:	d10e      	bne.n	8009daa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009d90:	9300      	str	r3, [sp, #0]
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2200      	movs	r2, #0
 8009d96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 f82c 	bl	8009df8 <UART_WaitOnFlagUntilTimeout>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d001      	beq.n	8009daa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009da6:	2303      	movs	r3, #3
 8009da8:	e022      	b.n	8009df0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 0304 	and.w	r3, r3, #4
 8009db4:	2b04      	cmp	r3, #4
 8009db6:	d10e      	bne.n	8009dd6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009db8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009dbc:	9300      	str	r3, [sp, #0]
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 f816 	bl	8009df8 <UART_WaitOnFlagUntilTimeout>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d001      	beq.n	8009dd6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009dd2:	2303      	movs	r3, #3
 8009dd4:	e00c      	b.n	8009df0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2220      	movs	r2, #32
 8009dda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2220      	movs	r2, #32
 8009de2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009dee:	2300      	movs	r3, #0
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3710      	adds	r7, #16
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	60f8      	str	r0, [r7, #12]
 8009e00:	60b9      	str	r1, [r7, #8]
 8009e02:	603b      	str	r3, [r7, #0]
 8009e04:	4613      	mov	r3, r2
 8009e06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e08:	e062      	b.n	8009ed0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e0a:	69bb      	ldr	r3, [r7, #24]
 8009e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e10:	d05e      	beq.n	8009ed0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e12:	f7f7 fe89 	bl	8001b28 <HAL_GetTick>
 8009e16:	4602      	mov	r2, r0
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	1ad3      	subs	r3, r2, r3
 8009e1c:	69ba      	ldr	r2, [r7, #24]
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d302      	bcc.n	8009e28 <UART_WaitOnFlagUntilTimeout+0x30>
 8009e22:	69bb      	ldr	r3, [r7, #24]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d11d      	bne.n	8009e64 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009e36:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	689a      	ldr	r2, [r3, #8]
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f022 0201 	bic.w	r2, r2, #1
 8009e46:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2220      	movs	r2, #32
 8009e4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2220      	movs	r2, #32
 8009e54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009e60:	2303      	movs	r3, #3
 8009e62:	e045      	b.n	8009ef0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f003 0304 	and.w	r3, r3, #4
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d02e      	beq.n	8009ed0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	69db      	ldr	r3, [r3, #28]
 8009e78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e80:	d126      	bne.n	8009ed0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e8a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009e9a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	689a      	ldr	r2, [r3, #8]
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f022 0201 	bic.w	r2, r2, #1
 8009eaa:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2220      	movs	r2, #32
 8009eb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2220      	movs	r2, #32
 8009eb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2220      	movs	r2, #32
 8009ec0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8009ecc:	2303      	movs	r3, #3
 8009ece:	e00f      	b.n	8009ef0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	69da      	ldr	r2, [r3, #28]
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	4013      	ands	r3, r2
 8009eda:	68ba      	ldr	r2, [r7, #8]
 8009edc:	429a      	cmp	r2, r3
 8009ede:	bf0c      	ite	eq
 8009ee0:	2301      	moveq	r3, #1
 8009ee2:	2300      	movne	r3, #0
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	79fb      	ldrb	r3, [r7, #7]
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d08d      	beq.n	8009e0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009eee:	2300      	movs	r3, #0
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3710      	adds	r7, #16
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b085      	sub	sp, #20
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d101      	bne.n	8009f0e <HAL_UARTEx_DisableFifoMode+0x16>
 8009f0a:	2302      	movs	r3, #2
 8009f0c:	e027      	b.n	8009f5e <HAL_UARTEx_DisableFifoMode+0x66>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2201      	movs	r2, #1
 8009f12:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2224      	movs	r2, #36	; 0x24
 8009f1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f022 0201 	bic.w	r2, r2, #1
 8009f34:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009f3c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2200      	movs	r2, #0
 8009f42:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	68fa      	ldr	r2, [r7, #12]
 8009f4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2220      	movs	r2, #32
 8009f50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009f5c:	2300      	movs	r3, #0
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3714      	adds	r7, #20
 8009f62:	46bd      	mov	sp, r7
 8009f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f68:	4770      	bx	lr

08009f6a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b084      	sub	sp, #16
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
 8009f72:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d101      	bne.n	8009f82 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009f7e:	2302      	movs	r3, #2
 8009f80:	e02d      	b.n	8009fde <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2201      	movs	r2, #1
 8009f86:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2224      	movs	r2, #36	; 0x24
 8009f8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f022 0201 	bic.w	r2, r2, #1
 8009fa8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	683a      	ldr	r2, [r7, #0]
 8009fba:	430a      	orrs	r2, r1
 8009fbc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 f850 	bl	800a064 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	68fa      	ldr	r2, [r7, #12]
 8009fca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2220      	movs	r2, #32
 8009fd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009fdc:	2300      	movs	r3, #0
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3710      	adds	r7, #16
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009fe6:	b580      	push	{r7, lr}
 8009fe8:	b084      	sub	sp, #16
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
 8009fee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d101      	bne.n	8009ffe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009ffa:	2302      	movs	r3, #2
 8009ffc:	e02d      	b.n	800a05a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2201      	movs	r2, #1
 800a002:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2224      	movs	r2, #36	; 0x24
 800a00a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f022 0201 	bic.w	r2, r2, #1
 800a024:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	689b      	ldr	r3, [r3, #8]
 800a02c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	683a      	ldr	r2, [r7, #0]
 800a036:	430a      	orrs	r2, r1
 800a038:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 f812 	bl	800a064 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	68fa      	ldr	r2, [r7, #12]
 800a046:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2220      	movs	r2, #32
 800a04c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a058:	2300      	movs	r3, #0
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3710      	adds	r7, #16
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
	...

0800a064 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a064:	b480      	push	{r7}
 800a066:	b089      	sub	sp, #36	; 0x24
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a06c:	4a2f      	ldr	r2, [pc, #188]	; (800a12c <UARTEx_SetNbDataToProcess+0xc8>)
 800a06e:	f107 0314 	add.w	r3, r7, #20
 800a072:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a076:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a07a:	4a2d      	ldr	r2, [pc, #180]	; (800a130 <UARTEx_SetNbDataToProcess+0xcc>)
 800a07c:	f107 030c 	add.w	r3, r7, #12
 800a080:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a084:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d108      	bne.n	800a0a2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2201      	movs	r2, #1
 800a094:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2201      	movs	r2, #1
 800a09c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a0a0:	e03d      	b.n	800a11e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a0a2:	2310      	movs	r3, #16
 800a0a4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a0a6:	2310      	movs	r3, #16
 800a0a8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	0e5b      	lsrs	r3, r3, #25
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	f003 0307 	and.w	r3, r3, #7
 800a0b8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	689b      	ldr	r3, [r3, #8]
 800a0c0:	0f5b      	lsrs	r3, r3, #29
 800a0c2:	b2db      	uxtb	r3, r3
 800a0c4:	f003 0307 	and.w	r3, r3, #7
 800a0c8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a0ca:	7fbb      	ldrb	r3, [r7, #30]
 800a0cc:	7f3a      	ldrb	r2, [r7, #28]
 800a0ce:	f107 0120 	add.w	r1, r7, #32
 800a0d2:	440a      	add	r2, r1
 800a0d4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a0d8:	fb02 f303 	mul.w	r3, r2, r3
 800a0dc:	7f3a      	ldrb	r2, [r7, #28]
 800a0de:	f107 0120 	add.w	r1, r7, #32
 800a0e2:	440a      	add	r2, r1
 800a0e4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a0e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0ec:	b29a      	uxth	r2, r3
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a0f4:	7ffb      	ldrb	r3, [r7, #31]
 800a0f6:	7f7a      	ldrb	r2, [r7, #29]
 800a0f8:	f107 0120 	add.w	r1, r7, #32
 800a0fc:	440a      	add	r2, r1
 800a0fe:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a102:	fb02 f303 	mul.w	r3, r2, r3
 800a106:	7f7a      	ldrb	r2, [r7, #29]
 800a108:	f107 0120 	add.w	r1, r7, #32
 800a10c:	440a      	add	r2, r1
 800a10e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a112:	fb93 f3f2 	sdiv	r3, r3, r2
 800a116:	b29a      	uxth	r2, r3
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a11e:	bf00      	nop
 800a120:	3724      	adds	r7, #36	; 0x24
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr
 800a12a:	bf00      	nop
 800a12c:	0800ab04 	.word	0x0800ab04
 800a130:	0800ab0c 	.word	0x0800ab0c

0800a134 <calloc>:
 800a134:	4b02      	ldr	r3, [pc, #8]	; (800a140 <calloc+0xc>)
 800a136:	460a      	mov	r2, r1
 800a138:	4601      	mov	r1, r0
 800a13a:	6818      	ldr	r0, [r3, #0]
 800a13c:	f000 b850 	b.w	800a1e0 <_calloc_r>
 800a140:	24000010 	.word	0x24000010

0800a144 <__errno>:
 800a144:	4b01      	ldr	r3, [pc, #4]	; (800a14c <__errno+0x8>)
 800a146:	6818      	ldr	r0, [r3, #0]
 800a148:	4770      	bx	lr
 800a14a:	bf00      	nop
 800a14c:	24000010 	.word	0x24000010

0800a150 <exit>:
 800a150:	b508      	push	{r3, lr}
 800a152:	4b07      	ldr	r3, [pc, #28]	; (800a170 <exit+0x20>)
 800a154:	4604      	mov	r4, r0
 800a156:	b113      	cbz	r3, 800a15e <exit+0xe>
 800a158:	2100      	movs	r1, #0
 800a15a:	f3af 8000 	nop.w
 800a15e:	4b05      	ldr	r3, [pc, #20]	; (800a174 <exit+0x24>)
 800a160:	6818      	ldr	r0, [r3, #0]
 800a162:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a164:	b103      	cbz	r3, 800a168 <exit+0x18>
 800a166:	4798      	blx	r3
 800a168:	4620      	mov	r0, r4
 800a16a:	f7f7 fb03 	bl	8001774 <_exit>
 800a16e:	bf00      	nop
 800a170:	00000000 	.word	0x00000000
 800a174:	0800b344 	.word	0x0800b344

0800a178 <__libc_init_array>:
 800a178:	b570      	push	{r4, r5, r6, lr}
 800a17a:	4e0d      	ldr	r6, [pc, #52]	; (800a1b0 <__libc_init_array+0x38>)
 800a17c:	4c0d      	ldr	r4, [pc, #52]	; (800a1b4 <__libc_init_array+0x3c>)
 800a17e:	1ba4      	subs	r4, r4, r6
 800a180:	10a4      	asrs	r4, r4, #2
 800a182:	2500      	movs	r5, #0
 800a184:	42a5      	cmp	r5, r4
 800a186:	d109      	bne.n	800a19c <__libc_init_array+0x24>
 800a188:	4e0b      	ldr	r6, [pc, #44]	; (800a1b8 <__libc_init_array+0x40>)
 800a18a:	4c0c      	ldr	r4, [pc, #48]	; (800a1bc <__libc_init_array+0x44>)
 800a18c:	f000 fc9e 	bl	800aacc <_init>
 800a190:	1ba4      	subs	r4, r4, r6
 800a192:	10a4      	asrs	r4, r4, #2
 800a194:	2500      	movs	r5, #0
 800a196:	42a5      	cmp	r5, r4
 800a198:	d105      	bne.n	800a1a6 <__libc_init_array+0x2e>
 800a19a:	bd70      	pop	{r4, r5, r6, pc}
 800a19c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a1a0:	4798      	blx	r3
 800a1a2:	3501      	adds	r5, #1
 800a1a4:	e7ee      	b.n	800a184 <__libc_init_array+0xc>
 800a1a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a1aa:	4798      	blx	r3
 800a1ac:	3501      	adds	r5, #1
 800a1ae:	e7f2      	b.n	800a196 <__libc_init_array+0x1e>
 800a1b0:	0800b3b0 	.word	0x0800b3b0
 800a1b4:	0800b3b0 	.word	0x0800b3b0
 800a1b8:	0800b3b0 	.word	0x0800b3b0
 800a1bc:	0800b3b4 	.word	0x0800b3b4

0800a1c0 <malloc>:
 800a1c0:	4b02      	ldr	r3, [pc, #8]	; (800a1cc <malloc+0xc>)
 800a1c2:	4601      	mov	r1, r0
 800a1c4:	6818      	ldr	r0, [r3, #0]
 800a1c6:	f000 b867 	b.w	800a298 <_malloc_r>
 800a1ca:	bf00      	nop
 800a1cc:	24000010 	.word	0x24000010

0800a1d0 <memset>:
 800a1d0:	4402      	add	r2, r0
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d100      	bne.n	800a1da <memset+0xa>
 800a1d8:	4770      	bx	lr
 800a1da:	f803 1b01 	strb.w	r1, [r3], #1
 800a1de:	e7f9      	b.n	800a1d4 <memset+0x4>

0800a1e0 <_calloc_r>:
 800a1e0:	b538      	push	{r3, r4, r5, lr}
 800a1e2:	fb02 f401 	mul.w	r4, r2, r1
 800a1e6:	4621      	mov	r1, r4
 800a1e8:	f000 f856 	bl	800a298 <_malloc_r>
 800a1ec:	4605      	mov	r5, r0
 800a1ee:	b118      	cbz	r0, 800a1f8 <_calloc_r+0x18>
 800a1f0:	4622      	mov	r2, r4
 800a1f2:	2100      	movs	r1, #0
 800a1f4:	f7ff ffec 	bl	800a1d0 <memset>
 800a1f8:	4628      	mov	r0, r5
 800a1fa:	bd38      	pop	{r3, r4, r5, pc}

0800a1fc <_free_r>:
 800a1fc:	b538      	push	{r3, r4, r5, lr}
 800a1fe:	4605      	mov	r5, r0
 800a200:	2900      	cmp	r1, #0
 800a202:	d045      	beq.n	800a290 <_free_r+0x94>
 800a204:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a208:	1f0c      	subs	r4, r1, #4
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	bfb8      	it	lt
 800a20e:	18e4      	addlt	r4, r4, r3
 800a210:	f000 fbae 	bl	800a970 <__malloc_lock>
 800a214:	4a1f      	ldr	r2, [pc, #124]	; (800a294 <_free_r+0x98>)
 800a216:	6813      	ldr	r3, [r2, #0]
 800a218:	4610      	mov	r0, r2
 800a21a:	b933      	cbnz	r3, 800a22a <_free_r+0x2e>
 800a21c:	6063      	str	r3, [r4, #4]
 800a21e:	6014      	str	r4, [r2, #0]
 800a220:	4628      	mov	r0, r5
 800a222:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a226:	f000 bba4 	b.w	800a972 <__malloc_unlock>
 800a22a:	42a3      	cmp	r3, r4
 800a22c:	d90c      	bls.n	800a248 <_free_r+0x4c>
 800a22e:	6821      	ldr	r1, [r4, #0]
 800a230:	1862      	adds	r2, r4, r1
 800a232:	4293      	cmp	r3, r2
 800a234:	bf04      	itt	eq
 800a236:	681a      	ldreq	r2, [r3, #0]
 800a238:	685b      	ldreq	r3, [r3, #4]
 800a23a:	6063      	str	r3, [r4, #4]
 800a23c:	bf04      	itt	eq
 800a23e:	1852      	addeq	r2, r2, r1
 800a240:	6022      	streq	r2, [r4, #0]
 800a242:	6004      	str	r4, [r0, #0]
 800a244:	e7ec      	b.n	800a220 <_free_r+0x24>
 800a246:	4613      	mov	r3, r2
 800a248:	685a      	ldr	r2, [r3, #4]
 800a24a:	b10a      	cbz	r2, 800a250 <_free_r+0x54>
 800a24c:	42a2      	cmp	r2, r4
 800a24e:	d9fa      	bls.n	800a246 <_free_r+0x4a>
 800a250:	6819      	ldr	r1, [r3, #0]
 800a252:	1858      	adds	r0, r3, r1
 800a254:	42a0      	cmp	r0, r4
 800a256:	d10b      	bne.n	800a270 <_free_r+0x74>
 800a258:	6820      	ldr	r0, [r4, #0]
 800a25a:	4401      	add	r1, r0
 800a25c:	1858      	adds	r0, r3, r1
 800a25e:	4282      	cmp	r2, r0
 800a260:	6019      	str	r1, [r3, #0]
 800a262:	d1dd      	bne.n	800a220 <_free_r+0x24>
 800a264:	6810      	ldr	r0, [r2, #0]
 800a266:	6852      	ldr	r2, [r2, #4]
 800a268:	605a      	str	r2, [r3, #4]
 800a26a:	4401      	add	r1, r0
 800a26c:	6019      	str	r1, [r3, #0]
 800a26e:	e7d7      	b.n	800a220 <_free_r+0x24>
 800a270:	d902      	bls.n	800a278 <_free_r+0x7c>
 800a272:	230c      	movs	r3, #12
 800a274:	602b      	str	r3, [r5, #0]
 800a276:	e7d3      	b.n	800a220 <_free_r+0x24>
 800a278:	6820      	ldr	r0, [r4, #0]
 800a27a:	1821      	adds	r1, r4, r0
 800a27c:	428a      	cmp	r2, r1
 800a27e:	bf04      	itt	eq
 800a280:	6811      	ldreq	r1, [r2, #0]
 800a282:	6852      	ldreq	r2, [r2, #4]
 800a284:	6062      	str	r2, [r4, #4]
 800a286:	bf04      	itt	eq
 800a288:	1809      	addeq	r1, r1, r0
 800a28a:	6021      	streq	r1, [r4, #0]
 800a28c:	605c      	str	r4, [r3, #4]
 800a28e:	e7c7      	b.n	800a220 <_free_r+0x24>
 800a290:	bd38      	pop	{r3, r4, r5, pc}
 800a292:	bf00      	nop
 800a294:	240000a0 	.word	0x240000a0

0800a298 <_malloc_r>:
 800a298:	b570      	push	{r4, r5, r6, lr}
 800a29a:	1ccd      	adds	r5, r1, #3
 800a29c:	f025 0503 	bic.w	r5, r5, #3
 800a2a0:	3508      	adds	r5, #8
 800a2a2:	2d0c      	cmp	r5, #12
 800a2a4:	bf38      	it	cc
 800a2a6:	250c      	movcc	r5, #12
 800a2a8:	2d00      	cmp	r5, #0
 800a2aa:	4606      	mov	r6, r0
 800a2ac:	db01      	blt.n	800a2b2 <_malloc_r+0x1a>
 800a2ae:	42a9      	cmp	r1, r5
 800a2b0:	d903      	bls.n	800a2ba <_malloc_r+0x22>
 800a2b2:	230c      	movs	r3, #12
 800a2b4:	6033      	str	r3, [r6, #0]
 800a2b6:	2000      	movs	r0, #0
 800a2b8:	bd70      	pop	{r4, r5, r6, pc}
 800a2ba:	f000 fb59 	bl	800a970 <__malloc_lock>
 800a2be:	4a21      	ldr	r2, [pc, #132]	; (800a344 <_malloc_r+0xac>)
 800a2c0:	6814      	ldr	r4, [r2, #0]
 800a2c2:	4621      	mov	r1, r4
 800a2c4:	b991      	cbnz	r1, 800a2ec <_malloc_r+0x54>
 800a2c6:	4c20      	ldr	r4, [pc, #128]	; (800a348 <_malloc_r+0xb0>)
 800a2c8:	6823      	ldr	r3, [r4, #0]
 800a2ca:	b91b      	cbnz	r3, 800a2d4 <_malloc_r+0x3c>
 800a2cc:	4630      	mov	r0, r6
 800a2ce:	f000 f8a1 	bl	800a414 <_sbrk_r>
 800a2d2:	6020      	str	r0, [r4, #0]
 800a2d4:	4629      	mov	r1, r5
 800a2d6:	4630      	mov	r0, r6
 800a2d8:	f000 f89c 	bl	800a414 <_sbrk_r>
 800a2dc:	1c43      	adds	r3, r0, #1
 800a2de:	d124      	bne.n	800a32a <_malloc_r+0x92>
 800a2e0:	230c      	movs	r3, #12
 800a2e2:	6033      	str	r3, [r6, #0]
 800a2e4:	4630      	mov	r0, r6
 800a2e6:	f000 fb44 	bl	800a972 <__malloc_unlock>
 800a2ea:	e7e4      	b.n	800a2b6 <_malloc_r+0x1e>
 800a2ec:	680b      	ldr	r3, [r1, #0]
 800a2ee:	1b5b      	subs	r3, r3, r5
 800a2f0:	d418      	bmi.n	800a324 <_malloc_r+0x8c>
 800a2f2:	2b0b      	cmp	r3, #11
 800a2f4:	d90f      	bls.n	800a316 <_malloc_r+0x7e>
 800a2f6:	600b      	str	r3, [r1, #0]
 800a2f8:	50cd      	str	r5, [r1, r3]
 800a2fa:	18cc      	adds	r4, r1, r3
 800a2fc:	4630      	mov	r0, r6
 800a2fe:	f000 fb38 	bl	800a972 <__malloc_unlock>
 800a302:	f104 000b 	add.w	r0, r4, #11
 800a306:	1d23      	adds	r3, r4, #4
 800a308:	f020 0007 	bic.w	r0, r0, #7
 800a30c:	1ac3      	subs	r3, r0, r3
 800a30e:	d0d3      	beq.n	800a2b8 <_malloc_r+0x20>
 800a310:	425a      	negs	r2, r3
 800a312:	50e2      	str	r2, [r4, r3]
 800a314:	e7d0      	b.n	800a2b8 <_malloc_r+0x20>
 800a316:	428c      	cmp	r4, r1
 800a318:	684b      	ldr	r3, [r1, #4]
 800a31a:	bf16      	itet	ne
 800a31c:	6063      	strne	r3, [r4, #4]
 800a31e:	6013      	streq	r3, [r2, #0]
 800a320:	460c      	movne	r4, r1
 800a322:	e7eb      	b.n	800a2fc <_malloc_r+0x64>
 800a324:	460c      	mov	r4, r1
 800a326:	6849      	ldr	r1, [r1, #4]
 800a328:	e7cc      	b.n	800a2c4 <_malloc_r+0x2c>
 800a32a:	1cc4      	adds	r4, r0, #3
 800a32c:	f024 0403 	bic.w	r4, r4, #3
 800a330:	42a0      	cmp	r0, r4
 800a332:	d005      	beq.n	800a340 <_malloc_r+0xa8>
 800a334:	1a21      	subs	r1, r4, r0
 800a336:	4630      	mov	r0, r6
 800a338:	f000 f86c 	bl	800a414 <_sbrk_r>
 800a33c:	3001      	adds	r0, #1
 800a33e:	d0cf      	beq.n	800a2e0 <_malloc_r+0x48>
 800a340:	6025      	str	r5, [r4, #0]
 800a342:	e7db      	b.n	800a2fc <_malloc_r+0x64>
 800a344:	240000a0 	.word	0x240000a0
 800a348:	240000a4 	.word	0x240000a4

0800a34c <_puts_r>:
 800a34c:	b570      	push	{r4, r5, r6, lr}
 800a34e:	460e      	mov	r6, r1
 800a350:	4605      	mov	r5, r0
 800a352:	b118      	cbz	r0, 800a35c <_puts_r+0x10>
 800a354:	6983      	ldr	r3, [r0, #24]
 800a356:	b90b      	cbnz	r3, 800a35c <_puts_r+0x10>
 800a358:	f000 fa1c 	bl	800a794 <__sinit>
 800a35c:	69ab      	ldr	r3, [r5, #24]
 800a35e:	68ac      	ldr	r4, [r5, #8]
 800a360:	b913      	cbnz	r3, 800a368 <_puts_r+0x1c>
 800a362:	4628      	mov	r0, r5
 800a364:	f000 fa16 	bl	800a794 <__sinit>
 800a368:	4b23      	ldr	r3, [pc, #140]	; (800a3f8 <_puts_r+0xac>)
 800a36a:	429c      	cmp	r4, r3
 800a36c:	d117      	bne.n	800a39e <_puts_r+0x52>
 800a36e:	686c      	ldr	r4, [r5, #4]
 800a370:	89a3      	ldrh	r3, [r4, #12]
 800a372:	071b      	lsls	r3, r3, #28
 800a374:	d51d      	bpl.n	800a3b2 <_puts_r+0x66>
 800a376:	6923      	ldr	r3, [r4, #16]
 800a378:	b1db      	cbz	r3, 800a3b2 <_puts_r+0x66>
 800a37a:	3e01      	subs	r6, #1
 800a37c:	68a3      	ldr	r3, [r4, #8]
 800a37e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a382:	3b01      	subs	r3, #1
 800a384:	60a3      	str	r3, [r4, #8]
 800a386:	b9e9      	cbnz	r1, 800a3c4 <_puts_r+0x78>
 800a388:	2b00      	cmp	r3, #0
 800a38a:	da2e      	bge.n	800a3ea <_puts_r+0x9e>
 800a38c:	4622      	mov	r2, r4
 800a38e:	210a      	movs	r1, #10
 800a390:	4628      	mov	r0, r5
 800a392:	f000 f84f 	bl	800a434 <__swbuf_r>
 800a396:	3001      	adds	r0, #1
 800a398:	d011      	beq.n	800a3be <_puts_r+0x72>
 800a39a:	200a      	movs	r0, #10
 800a39c:	e011      	b.n	800a3c2 <_puts_r+0x76>
 800a39e:	4b17      	ldr	r3, [pc, #92]	; (800a3fc <_puts_r+0xb0>)
 800a3a0:	429c      	cmp	r4, r3
 800a3a2:	d101      	bne.n	800a3a8 <_puts_r+0x5c>
 800a3a4:	68ac      	ldr	r4, [r5, #8]
 800a3a6:	e7e3      	b.n	800a370 <_puts_r+0x24>
 800a3a8:	4b15      	ldr	r3, [pc, #84]	; (800a400 <_puts_r+0xb4>)
 800a3aa:	429c      	cmp	r4, r3
 800a3ac:	bf08      	it	eq
 800a3ae:	68ec      	ldreq	r4, [r5, #12]
 800a3b0:	e7de      	b.n	800a370 <_puts_r+0x24>
 800a3b2:	4621      	mov	r1, r4
 800a3b4:	4628      	mov	r0, r5
 800a3b6:	f000 f88f 	bl	800a4d8 <__swsetup_r>
 800a3ba:	2800      	cmp	r0, #0
 800a3bc:	d0dd      	beq.n	800a37a <_puts_r+0x2e>
 800a3be:	f04f 30ff 	mov.w	r0, #4294967295
 800a3c2:	bd70      	pop	{r4, r5, r6, pc}
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	da04      	bge.n	800a3d2 <_puts_r+0x86>
 800a3c8:	69a2      	ldr	r2, [r4, #24]
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	dc06      	bgt.n	800a3dc <_puts_r+0x90>
 800a3ce:	290a      	cmp	r1, #10
 800a3d0:	d004      	beq.n	800a3dc <_puts_r+0x90>
 800a3d2:	6823      	ldr	r3, [r4, #0]
 800a3d4:	1c5a      	adds	r2, r3, #1
 800a3d6:	6022      	str	r2, [r4, #0]
 800a3d8:	7019      	strb	r1, [r3, #0]
 800a3da:	e7cf      	b.n	800a37c <_puts_r+0x30>
 800a3dc:	4622      	mov	r2, r4
 800a3de:	4628      	mov	r0, r5
 800a3e0:	f000 f828 	bl	800a434 <__swbuf_r>
 800a3e4:	3001      	adds	r0, #1
 800a3e6:	d1c9      	bne.n	800a37c <_puts_r+0x30>
 800a3e8:	e7e9      	b.n	800a3be <_puts_r+0x72>
 800a3ea:	6823      	ldr	r3, [r4, #0]
 800a3ec:	200a      	movs	r0, #10
 800a3ee:	1c5a      	adds	r2, r3, #1
 800a3f0:	6022      	str	r2, [r4, #0]
 800a3f2:	7018      	strb	r0, [r3, #0]
 800a3f4:	e7e5      	b.n	800a3c2 <_puts_r+0x76>
 800a3f6:	bf00      	nop
 800a3f8:	0800b368 	.word	0x0800b368
 800a3fc:	0800b388 	.word	0x0800b388
 800a400:	0800b348 	.word	0x0800b348

0800a404 <puts>:
 800a404:	4b02      	ldr	r3, [pc, #8]	; (800a410 <puts+0xc>)
 800a406:	4601      	mov	r1, r0
 800a408:	6818      	ldr	r0, [r3, #0]
 800a40a:	f7ff bf9f 	b.w	800a34c <_puts_r>
 800a40e:	bf00      	nop
 800a410:	24000010 	.word	0x24000010

0800a414 <_sbrk_r>:
 800a414:	b538      	push	{r3, r4, r5, lr}
 800a416:	4c06      	ldr	r4, [pc, #24]	; (800a430 <_sbrk_r+0x1c>)
 800a418:	2300      	movs	r3, #0
 800a41a:	4605      	mov	r5, r0
 800a41c:	4608      	mov	r0, r1
 800a41e:	6023      	str	r3, [r4, #0]
 800a420:	f7f7 fa20 	bl	8001864 <_sbrk>
 800a424:	1c43      	adds	r3, r0, #1
 800a426:	d102      	bne.n	800a42e <_sbrk_r+0x1a>
 800a428:	6823      	ldr	r3, [r4, #0]
 800a42a:	b103      	cbz	r3, 800a42e <_sbrk_r+0x1a>
 800a42c:	602b      	str	r3, [r5, #0]
 800a42e:	bd38      	pop	{r3, r4, r5, pc}
 800a430:	240003d4 	.word	0x240003d4

0800a434 <__swbuf_r>:
 800a434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a436:	460e      	mov	r6, r1
 800a438:	4614      	mov	r4, r2
 800a43a:	4605      	mov	r5, r0
 800a43c:	b118      	cbz	r0, 800a446 <__swbuf_r+0x12>
 800a43e:	6983      	ldr	r3, [r0, #24]
 800a440:	b90b      	cbnz	r3, 800a446 <__swbuf_r+0x12>
 800a442:	f000 f9a7 	bl	800a794 <__sinit>
 800a446:	4b21      	ldr	r3, [pc, #132]	; (800a4cc <__swbuf_r+0x98>)
 800a448:	429c      	cmp	r4, r3
 800a44a:	d12a      	bne.n	800a4a2 <__swbuf_r+0x6e>
 800a44c:	686c      	ldr	r4, [r5, #4]
 800a44e:	69a3      	ldr	r3, [r4, #24]
 800a450:	60a3      	str	r3, [r4, #8]
 800a452:	89a3      	ldrh	r3, [r4, #12]
 800a454:	071a      	lsls	r2, r3, #28
 800a456:	d52e      	bpl.n	800a4b6 <__swbuf_r+0x82>
 800a458:	6923      	ldr	r3, [r4, #16]
 800a45a:	b363      	cbz	r3, 800a4b6 <__swbuf_r+0x82>
 800a45c:	6923      	ldr	r3, [r4, #16]
 800a45e:	6820      	ldr	r0, [r4, #0]
 800a460:	1ac0      	subs	r0, r0, r3
 800a462:	6963      	ldr	r3, [r4, #20]
 800a464:	b2f6      	uxtb	r6, r6
 800a466:	4283      	cmp	r3, r0
 800a468:	4637      	mov	r7, r6
 800a46a:	dc04      	bgt.n	800a476 <__swbuf_r+0x42>
 800a46c:	4621      	mov	r1, r4
 800a46e:	4628      	mov	r0, r5
 800a470:	f000 f926 	bl	800a6c0 <_fflush_r>
 800a474:	bb28      	cbnz	r0, 800a4c2 <__swbuf_r+0x8e>
 800a476:	68a3      	ldr	r3, [r4, #8]
 800a478:	3b01      	subs	r3, #1
 800a47a:	60a3      	str	r3, [r4, #8]
 800a47c:	6823      	ldr	r3, [r4, #0]
 800a47e:	1c5a      	adds	r2, r3, #1
 800a480:	6022      	str	r2, [r4, #0]
 800a482:	701e      	strb	r6, [r3, #0]
 800a484:	6963      	ldr	r3, [r4, #20]
 800a486:	3001      	adds	r0, #1
 800a488:	4283      	cmp	r3, r0
 800a48a:	d004      	beq.n	800a496 <__swbuf_r+0x62>
 800a48c:	89a3      	ldrh	r3, [r4, #12]
 800a48e:	07db      	lsls	r3, r3, #31
 800a490:	d519      	bpl.n	800a4c6 <__swbuf_r+0x92>
 800a492:	2e0a      	cmp	r6, #10
 800a494:	d117      	bne.n	800a4c6 <__swbuf_r+0x92>
 800a496:	4621      	mov	r1, r4
 800a498:	4628      	mov	r0, r5
 800a49a:	f000 f911 	bl	800a6c0 <_fflush_r>
 800a49e:	b190      	cbz	r0, 800a4c6 <__swbuf_r+0x92>
 800a4a0:	e00f      	b.n	800a4c2 <__swbuf_r+0x8e>
 800a4a2:	4b0b      	ldr	r3, [pc, #44]	; (800a4d0 <__swbuf_r+0x9c>)
 800a4a4:	429c      	cmp	r4, r3
 800a4a6:	d101      	bne.n	800a4ac <__swbuf_r+0x78>
 800a4a8:	68ac      	ldr	r4, [r5, #8]
 800a4aa:	e7d0      	b.n	800a44e <__swbuf_r+0x1a>
 800a4ac:	4b09      	ldr	r3, [pc, #36]	; (800a4d4 <__swbuf_r+0xa0>)
 800a4ae:	429c      	cmp	r4, r3
 800a4b0:	bf08      	it	eq
 800a4b2:	68ec      	ldreq	r4, [r5, #12]
 800a4b4:	e7cb      	b.n	800a44e <__swbuf_r+0x1a>
 800a4b6:	4621      	mov	r1, r4
 800a4b8:	4628      	mov	r0, r5
 800a4ba:	f000 f80d 	bl	800a4d8 <__swsetup_r>
 800a4be:	2800      	cmp	r0, #0
 800a4c0:	d0cc      	beq.n	800a45c <__swbuf_r+0x28>
 800a4c2:	f04f 37ff 	mov.w	r7, #4294967295
 800a4c6:	4638      	mov	r0, r7
 800a4c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	0800b368 	.word	0x0800b368
 800a4d0:	0800b388 	.word	0x0800b388
 800a4d4:	0800b348 	.word	0x0800b348

0800a4d8 <__swsetup_r>:
 800a4d8:	4b32      	ldr	r3, [pc, #200]	; (800a5a4 <__swsetup_r+0xcc>)
 800a4da:	b570      	push	{r4, r5, r6, lr}
 800a4dc:	681d      	ldr	r5, [r3, #0]
 800a4de:	4606      	mov	r6, r0
 800a4e0:	460c      	mov	r4, r1
 800a4e2:	b125      	cbz	r5, 800a4ee <__swsetup_r+0x16>
 800a4e4:	69ab      	ldr	r3, [r5, #24]
 800a4e6:	b913      	cbnz	r3, 800a4ee <__swsetup_r+0x16>
 800a4e8:	4628      	mov	r0, r5
 800a4ea:	f000 f953 	bl	800a794 <__sinit>
 800a4ee:	4b2e      	ldr	r3, [pc, #184]	; (800a5a8 <__swsetup_r+0xd0>)
 800a4f0:	429c      	cmp	r4, r3
 800a4f2:	d10f      	bne.n	800a514 <__swsetup_r+0x3c>
 800a4f4:	686c      	ldr	r4, [r5, #4]
 800a4f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4fa:	b29a      	uxth	r2, r3
 800a4fc:	0715      	lsls	r5, r2, #28
 800a4fe:	d42c      	bmi.n	800a55a <__swsetup_r+0x82>
 800a500:	06d0      	lsls	r0, r2, #27
 800a502:	d411      	bmi.n	800a528 <__swsetup_r+0x50>
 800a504:	2209      	movs	r2, #9
 800a506:	6032      	str	r2, [r6, #0]
 800a508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a50c:	81a3      	strh	r3, [r4, #12]
 800a50e:	f04f 30ff 	mov.w	r0, #4294967295
 800a512:	e03e      	b.n	800a592 <__swsetup_r+0xba>
 800a514:	4b25      	ldr	r3, [pc, #148]	; (800a5ac <__swsetup_r+0xd4>)
 800a516:	429c      	cmp	r4, r3
 800a518:	d101      	bne.n	800a51e <__swsetup_r+0x46>
 800a51a:	68ac      	ldr	r4, [r5, #8]
 800a51c:	e7eb      	b.n	800a4f6 <__swsetup_r+0x1e>
 800a51e:	4b24      	ldr	r3, [pc, #144]	; (800a5b0 <__swsetup_r+0xd8>)
 800a520:	429c      	cmp	r4, r3
 800a522:	bf08      	it	eq
 800a524:	68ec      	ldreq	r4, [r5, #12]
 800a526:	e7e6      	b.n	800a4f6 <__swsetup_r+0x1e>
 800a528:	0751      	lsls	r1, r2, #29
 800a52a:	d512      	bpl.n	800a552 <__swsetup_r+0x7a>
 800a52c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a52e:	b141      	cbz	r1, 800a542 <__swsetup_r+0x6a>
 800a530:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a534:	4299      	cmp	r1, r3
 800a536:	d002      	beq.n	800a53e <__swsetup_r+0x66>
 800a538:	4630      	mov	r0, r6
 800a53a:	f7ff fe5f 	bl	800a1fc <_free_r>
 800a53e:	2300      	movs	r3, #0
 800a540:	6363      	str	r3, [r4, #52]	; 0x34
 800a542:	89a3      	ldrh	r3, [r4, #12]
 800a544:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a548:	81a3      	strh	r3, [r4, #12]
 800a54a:	2300      	movs	r3, #0
 800a54c:	6063      	str	r3, [r4, #4]
 800a54e:	6923      	ldr	r3, [r4, #16]
 800a550:	6023      	str	r3, [r4, #0]
 800a552:	89a3      	ldrh	r3, [r4, #12]
 800a554:	f043 0308 	orr.w	r3, r3, #8
 800a558:	81a3      	strh	r3, [r4, #12]
 800a55a:	6923      	ldr	r3, [r4, #16]
 800a55c:	b94b      	cbnz	r3, 800a572 <__swsetup_r+0x9a>
 800a55e:	89a3      	ldrh	r3, [r4, #12]
 800a560:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a568:	d003      	beq.n	800a572 <__swsetup_r+0x9a>
 800a56a:	4621      	mov	r1, r4
 800a56c:	4630      	mov	r0, r6
 800a56e:	f000 f9bf 	bl	800a8f0 <__smakebuf_r>
 800a572:	89a2      	ldrh	r2, [r4, #12]
 800a574:	f012 0301 	ands.w	r3, r2, #1
 800a578:	d00c      	beq.n	800a594 <__swsetup_r+0xbc>
 800a57a:	2300      	movs	r3, #0
 800a57c:	60a3      	str	r3, [r4, #8]
 800a57e:	6963      	ldr	r3, [r4, #20]
 800a580:	425b      	negs	r3, r3
 800a582:	61a3      	str	r3, [r4, #24]
 800a584:	6923      	ldr	r3, [r4, #16]
 800a586:	b953      	cbnz	r3, 800a59e <__swsetup_r+0xc6>
 800a588:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a58c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a590:	d1ba      	bne.n	800a508 <__swsetup_r+0x30>
 800a592:	bd70      	pop	{r4, r5, r6, pc}
 800a594:	0792      	lsls	r2, r2, #30
 800a596:	bf58      	it	pl
 800a598:	6963      	ldrpl	r3, [r4, #20]
 800a59a:	60a3      	str	r3, [r4, #8]
 800a59c:	e7f2      	b.n	800a584 <__swsetup_r+0xac>
 800a59e:	2000      	movs	r0, #0
 800a5a0:	e7f7      	b.n	800a592 <__swsetup_r+0xba>
 800a5a2:	bf00      	nop
 800a5a4:	24000010 	.word	0x24000010
 800a5a8:	0800b368 	.word	0x0800b368
 800a5ac:	0800b388 	.word	0x0800b388
 800a5b0:	0800b348 	.word	0x0800b348

0800a5b4 <__sflush_r>:
 800a5b4:	898a      	ldrh	r2, [r1, #12]
 800a5b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ba:	4605      	mov	r5, r0
 800a5bc:	0710      	lsls	r0, r2, #28
 800a5be:	460c      	mov	r4, r1
 800a5c0:	d458      	bmi.n	800a674 <__sflush_r+0xc0>
 800a5c2:	684b      	ldr	r3, [r1, #4]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	dc05      	bgt.n	800a5d4 <__sflush_r+0x20>
 800a5c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	dc02      	bgt.n	800a5d4 <__sflush_r+0x20>
 800a5ce:	2000      	movs	r0, #0
 800a5d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a5d6:	2e00      	cmp	r6, #0
 800a5d8:	d0f9      	beq.n	800a5ce <__sflush_r+0x1a>
 800a5da:	2300      	movs	r3, #0
 800a5dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a5e0:	682f      	ldr	r7, [r5, #0]
 800a5e2:	6a21      	ldr	r1, [r4, #32]
 800a5e4:	602b      	str	r3, [r5, #0]
 800a5e6:	d032      	beq.n	800a64e <__sflush_r+0x9a>
 800a5e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a5ea:	89a3      	ldrh	r3, [r4, #12]
 800a5ec:	075a      	lsls	r2, r3, #29
 800a5ee:	d505      	bpl.n	800a5fc <__sflush_r+0x48>
 800a5f0:	6863      	ldr	r3, [r4, #4]
 800a5f2:	1ac0      	subs	r0, r0, r3
 800a5f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a5f6:	b10b      	cbz	r3, 800a5fc <__sflush_r+0x48>
 800a5f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a5fa:	1ac0      	subs	r0, r0, r3
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	4602      	mov	r2, r0
 800a600:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a602:	6a21      	ldr	r1, [r4, #32]
 800a604:	4628      	mov	r0, r5
 800a606:	47b0      	blx	r6
 800a608:	1c43      	adds	r3, r0, #1
 800a60a:	89a3      	ldrh	r3, [r4, #12]
 800a60c:	d106      	bne.n	800a61c <__sflush_r+0x68>
 800a60e:	6829      	ldr	r1, [r5, #0]
 800a610:	291d      	cmp	r1, #29
 800a612:	d848      	bhi.n	800a6a6 <__sflush_r+0xf2>
 800a614:	4a29      	ldr	r2, [pc, #164]	; (800a6bc <__sflush_r+0x108>)
 800a616:	40ca      	lsrs	r2, r1
 800a618:	07d6      	lsls	r6, r2, #31
 800a61a:	d544      	bpl.n	800a6a6 <__sflush_r+0xf2>
 800a61c:	2200      	movs	r2, #0
 800a61e:	6062      	str	r2, [r4, #4]
 800a620:	04d9      	lsls	r1, r3, #19
 800a622:	6922      	ldr	r2, [r4, #16]
 800a624:	6022      	str	r2, [r4, #0]
 800a626:	d504      	bpl.n	800a632 <__sflush_r+0x7e>
 800a628:	1c42      	adds	r2, r0, #1
 800a62a:	d101      	bne.n	800a630 <__sflush_r+0x7c>
 800a62c:	682b      	ldr	r3, [r5, #0]
 800a62e:	b903      	cbnz	r3, 800a632 <__sflush_r+0x7e>
 800a630:	6560      	str	r0, [r4, #84]	; 0x54
 800a632:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a634:	602f      	str	r7, [r5, #0]
 800a636:	2900      	cmp	r1, #0
 800a638:	d0c9      	beq.n	800a5ce <__sflush_r+0x1a>
 800a63a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a63e:	4299      	cmp	r1, r3
 800a640:	d002      	beq.n	800a648 <__sflush_r+0x94>
 800a642:	4628      	mov	r0, r5
 800a644:	f7ff fdda 	bl	800a1fc <_free_r>
 800a648:	2000      	movs	r0, #0
 800a64a:	6360      	str	r0, [r4, #52]	; 0x34
 800a64c:	e7c0      	b.n	800a5d0 <__sflush_r+0x1c>
 800a64e:	2301      	movs	r3, #1
 800a650:	4628      	mov	r0, r5
 800a652:	47b0      	blx	r6
 800a654:	1c41      	adds	r1, r0, #1
 800a656:	d1c8      	bne.n	800a5ea <__sflush_r+0x36>
 800a658:	682b      	ldr	r3, [r5, #0]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d0c5      	beq.n	800a5ea <__sflush_r+0x36>
 800a65e:	2b1d      	cmp	r3, #29
 800a660:	d001      	beq.n	800a666 <__sflush_r+0xb2>
 800a662:	2b16      	cmp	r3, #22
 800a664:	d101      	bne.n	800a66a <__sflush_r+0xb6>
 800a666:	602f      	str	r7, [r5, #0]
 800a668:	e7b1      	b.n	800a5ce <__sflush_r+0x1a>
 800a66a:	89a3      	ldrh	r3, [r4, #12]
 800a66c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a670:	81a3      	strh	r3, [r4, #12]
 800a672:	e7ad      	b.n	800a5d0 <__sflush_r+0x1c>
 800a674:	690f      	ldr	r7, [r1, #16]
 800a676:	2f00      	cmp	r7, #0
 800a678:	d0a9      	beq.n	800a5ce <__sflush_r+0x1a>
 800a67a:	0793      	lsls	r3, r2, #30
 800a67c:	680e      	ldr	r6, [r1, #0]
 800a67e:	bf08      	it	eq
 800a680:	694b      	ldreq	r3, [r1, #20]
 800a682:	600f      	str	r7, [r1, #0]
 800a684:	bf18      	it	ne
 800a686:	2300      	movne	r3, #0
 800a688:	eba6 0807 	sub.w	r8, r6, r7
 800a68c:	608b      	str	r3, [r1, #8]
 800a68e:	f1b8 0f00 	cmp.w	r8, #0
 800a692:	dd9c      	ble.n	800a5ce <__sflush_r+0x1a>
 800a694:	4643      	mov	r3, r8
 800a696:	463a      	mov	r2, r7
 800a698:	6a21      	ldr	r1, [r4, #32]
 800a69a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a69c:	4628      	mov	r0, r5
 800a69e:	47b0      	blx	r6
 800a6a0:	2800      	cmp	r0, #0
 800a6a2:	dc06      	bgt.n	800a6b2 <__sflush_r+0xfe>
 800a6a4:	89a3      	ldrh	r3, [r4, #12]
 800a6a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6aa:	81a3      	strh	r3, [r4, #12]
 800a6ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a6b0:	e78e      	b.n	800a5d0 <__sflush_r+0x1c>
 800a6b2:	4407      	add	r7, r0
 800a6b4:	eba8 0800 	sub.w	r8, r8, r0
 800a6b8:	e7e9      	b.n	800a68e <__sflush_r+0xda>
 800a6ba:	bf00      	nop
 800a6bc:	20400001 	.word	0x20400001

0800a6c0 <_fflush_r>:
 800a6c0:	b538      	push	{r3, r4, r5, lr}
 800a6c2:	690b      	ldr	r3, [r1, #16]
 800a6c4:	4605      	mov	r5, r0
 800a6c6:	460c      	mov	r4, r1
 800a6c8:	b1db      	cbz	r3, 800a702 <_fflush_r+0x42>
 800a6ca:	b118      	cbz	r0, 800a6d4 <_fflush_r+0x14>
 800a6cc:	6983      	ldr	r3, [r0, #24]
 800a6ce:	b90b      	cbnz	r3, 800a6d4 <_fflush_r+0x14>
 800a6d0:	f000 f860 	bl	800a794 <__sinit>
 800a6d4:	4b0c      	ldr	r3, [pc, #48]	; (800a708 <_fflush_r+0x48>)
 800a6d6:	429c      	cmp	r4, r3
 800a6d8:	d109      	bne.n	800a6ee <_fflush_r+0x2e>
 800a6da:	686c      	ldr	r4, [r5, #4]
 800a6dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6e0:	b17b      	cbz	r3, 800a702 <_fflush_r+0x42>
 800a6e2:	4621      	mov	r1, r4
 800a6e4:	4628      	mov	r0, r5
 800a6e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6ea:	f7ff bf63 	b.w	800a5b4 <__sflush_r>
 800a6ee:	4b07      	ldr	r3, [pc, #28]	; (800a70c <_fflush_r+0x4c>)
 800a6f0:	429c      	cmp	r4, r3
 800a6f2:	d101      	bne.n	800a6f8 <_fflush_r+0x38>
 800a6f4:	68ac      	ldr	r4, [r5, #8]
 800a6f6:	e7f1      	b.n	800a6dc <_fflush_r+0x1c>
 800a6f8:	4b05      	ldr	r3, [pc, #20]	; (800a710 <_fflush_r+0x50>)
 800a6fa:	429c      	cmp	r4, r3
 800a6fc:	bf08      	it	eq
 800a6fe:	68ec      	ldreq	r4, [r5, #12]
 800a700:	e7ec      	b.n	800a6dc <_fflush_r+0x1c>
 800a702:	2000      	movs	r0, #0
 800a704:	bd38      	pop	{r3, r4, r5, pc}
 800a706:	bf00      	nop
 800a708:	0800b368 	.word	0x0800b368
 800a70c:	0800b388 	.word	0x0800b388
 800a710:	0800b348 	.word	0x0800b348

0800a714 <std>:
 800a714:	2300      	movs	r3, #0
 800a716:	b510      	push	{r4, lr}
 800a718:	4604      	mov	r4, r0
 800a71a:	e9c0 3300 	strd	r3, r3, [r0]
 800a71e:	6083      	str	r3, [r0, #8]
 800a720:	8181      	strh	r1, [r0, #12]
 800a722:	6643      	str	r3, [r0, #100]	; 0x64
 800a724:	81c2      	strh	r2, [r0, #14]
 800a726:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a72a:	6183      	str	r3, [r0, #24]
 800a72c:	4619      	mov	r1, r3
 800a72e:	2208      	movs	r2, #8
 800a730:	305c      	adds	r0, #92	; 0x5c
 800a732:	f7ff fd4d 	bl	800a1d0 <memset>
 800a736:	4b05      	ldr	r3, [pc, #20]	; (800a74c <std+0x38>)
 800a738:	6263      	str	r3, [r4, #36]	; 0x24
 800a73a:	4b05      	ldr	r3, [pc, #20]	; (800a750 <std+0x3c>)
 800a73c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a73e:	4b05      	ldr	r3, [pc, #20]	; (800a754 <std+0x40>)
 800a740:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a742:	4b05      	ldr	r3, [pc, #20]	; (800a758 <std+0x44>)
 800a744:	6224      	str	r4, [r4, #32]
 800a746:	6323      	str	r3, [r4, #48]	; 0x30
 800a748:	bd10      	pop	{r4, pc}
 800a74a:	bf00      	nop
 800a74c:	0800a975 	.word	0x0800a975
 800a750:	0800a997 	.word	0x0800a997
 800a754:	0800a9cf 	.word	0x0800a9cf
 800a758:	0800a9f3 	.word	0x0800a9f3

0800a75c <_cleanup_r>:
 800a75c:	4901      	ldr	r1, [pc, #4]	; (800a764 <_cleanup_r+0x8>)
 800a75e:	f000 b885 	b.w	800a86c <_fwalk_reent>
 800a762:	bf00      	nop
 800a764:	0800a6c1 	.word	0x0800a6c1

0800a768 <__sfmoreglue>:
 800a768:	b570      	push	{r4, r5, r6, lr}
 800a76a:	1e4a      	subs	r2, r1, #1
 800a76c:	2568      	movs	r5, #104	; 0x68
 800a76e:	4355      	muls	r5, r2
 800a770:	460e      	mov	r6, r1
 800a772:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a776:	f7ff fd8f 	bl	800a298 <_malloc_r>
 800a77a:	4604      	mov	r4, r0
 800a77c:	b140      	cbz	r0, 800a790 <__sfmoreglue+0x28>
 800a77e:	2100      	movs	r1, #0
 800a780:	e9c0 1600 	strd	r1, r6, [r0]
 800a784:	300c      	adds	r0, #12
 800a786:	60a0      	str	r0, [r4, #8]
 800a788:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a78c:	f7ff fd20 	bl	800a1d0 <memset>
 800a790:	4620      	mov	r0, r4
 800a792:	bd70      	pop	{r4, r5, r6, pc}

0800a794 <__sinit>:
 800a794:	6983      	ldr	r3, [r0, #24]
 800a796:	b510      	push	{r4, lr}
 800a798:	4604      	mov	r4, r0
 800a79a:	bb33      	cbnz	r3, 800a7ea <__sinit+0x56>
 800a79c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a7a0:	6503      	str	r3, [r0, #80]	; 0x50
 800a7a2:	4b12      	ldr	r3, [pc, #72]	; (800a7ec <__sinit+0x58>)
 800a7a4:	4a12      	ldr	r2, [pc, #72]	; (800a7f0 <__sinit+0x5c>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	6282      	str	r2, [r0, #40]	; 0x28
 800a7aa:	4298      	cmp	r0, r3
 800a7ac:	bf04      	itt	eq
 800a7ae:	2301      	moveq	r3, #1
 800a7b0:	6183      	streq	r3, [r0, #24]
 800a7b2:	f000 f81f 	bl	800a7f4 <__sfp>
 800a7b6:	6060      	str	r0, [r4, #4]
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	f000 f81b 	bl	800a7f4 <__sfp>
 800a7be:	60a0      	str	r0, [r4, #8]
 800a7c0:	4620      	mov	r0, r4
 800a7c2:	f000 f817 	bl	800a7f4 <__sfp>
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	60e0      	str	r0, [r4, #12]
 800a7ca:	2104      	movs	r1, #4
 800a7cc:	6860      	ldr	r0, [r4, #4]
 800a7ce:	f7ff ffa1 	bl	800a714 <std>
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	2109      	movs	r1, #9
 800a7d6:	68a0      	ldr	r0, [r4, #8]
 800a7d8:	f7ff ff9c 	bl	800a714 <std>
 800a7dc:	2202      	movs	r2, #2
 800a7de:	2112      	movs	r1, #18
 800a7e0:	68e0      	ldr	r0, [r4, #12]
 800a7e2:	f7ff ff97 	bl	800a714 <std>
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	61a3      	str	r3, [r4, #24]
 800a7ea:	bd10      	pop	{r4, pc}
 800a7ec:	0800b344 	.word	0x0800b344
 800a7f0:	0800a75d 	.word	0x0800a75d

0800a7f4 <__sfp>:
 800a7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7f6:	4b1b      	ldr	r3, [pc, #108]	; (800a864 <__sfp+0x70>)
 800a7f8:	681e      	ldr	r6, [r3, #0]
 800a7fa:	69b3      	ldr	r3, [r6, #24]
 800a7fc:	4607      	mov	r7, r0
 800a7fe:	b913      	cbnz	r3, 800a806 <__sfp+0x12>
 800a800:	4630      	mov	r0, r6
 800a802:	f7ff ffc7 	bl	800a794 <__sinit>
 800a806:	3648      	adds	r6, #72	; 0x48
 800a808:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a80c:	3b01      	subs	r3, #1
 800a80e:	d503      	bpl.n	800a818 <__sfp+0x24>
 800a810:	6833      	ldr	r3, [r6, #0]
 800a812:	b133      	cbz	r3, 800a822 <__sfp+0x2e>
 800a814:	6836      	ldr	r6, [r6, #0]
 800a816:	e7f7      	b.n	800a808 <__sfp+0x14>
 800a818:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a81c:	b16d      	cbz	r5, 800a83a <__sfp+0x46>
 800a81e:	3468      	adds	r4, #104	; 0x68
 800a820:	e7f4      	b.n	800a80c <__sfp+0x18>
 800a822:	2104      	movs	r1, #4
 800a824:	4638      	mov	r0, r7
 800a826:	f7ff ff9f 	bl	800a768 <__sfmoreglue>
 800a82a:	6030      	str	r0, [r6, #0]
 800a82c:	2800      	cmp	r0, #0
 800a82e:	d1f1      	bne.n	800a814 <__sfp+0x20>
 800a830:	230c      	movs	r3, #12
 800a832:	603b      	str	r3, [r7, #0]
 800a834:	4604      	mov	r4, r0
 800a836:	4620      	mov	r0, r4
 800a838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a83a:	4b0b      	ldr	r3, [pc, #44]	; (800a868 <__sfp+0x74>)
 800a83c:	6665      	str	r5, [r4, #100]	; 0x64
 800a83e:	e9c4 5500 	strd	r5, r5, [r4]
 800a842:	60a5      	str	r5, [r4, #8]
 800a844:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a848:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a84c:	2208      	movs	r2, #8
 800a84e:	4629      	mov	r1, r5
 800a850:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a854:	f7ff fcbc 	bl	800a1d0 <memset>
 800a858:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a85c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a860:	e7e9      	b.n	800a836 <__sfp+0x42>
 800a862:	bf00      	nop
 800a864:	0800b344 	.word	0x0800b344
 800a868:	ffff0001 	.word	0xffff0001

0800a86c <_fwalk_reent>:
 800a86c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a870:	4680      	mov	r8, r0
 800a872:	4689      	mov	r9, r1
 800a874:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a878:	2600      	movs	r6, #0
 800a87a:	b914      	cbnz	r4, 800a882 <_fwalk_reent+0x16>
 800a87c:	4630      	mov	r0, r6
 800a87e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a882:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a886:	3f01      	subs	r7, #1
 800a888:	d501      	bpl.n	800a88e <_fwalk_reent+0x22>
 800a88a:	6824      	ldr	r4, [r4, #0]
 800a88c:	e7f5      	b.n	800a87a <_fwalk_reent+0xe>
 800a88e:	89ab      	ldrh	r3, [r5, #12]
 800a890:	2b01      	cmp	r3, #1
 800a892:	d907      	bls.n	800a8a4 <_fwalk_reent+0x38>
 800a894:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a898:	3301      	adds	r3, #1
 800a89a:	d003      	beq.n	800a8a4 <_fwalk_reent+0x38>
 800a89c:	4629      	mov	r1, r5
 800a89e:	4640      	mov	r0, r8
 800a8a0:	47c8      	blx	r9
 800a8a2:	4306      	orrs	r6, r0
 800a8a4:	3568      	adds	r5, #104	; 0x68
 800a8a6:	e7ee      	b.n	800a886 <_fwalk_reent+0x1a>

0800a8a8 <__swhatbuf_r>:
 800a8a8:	b570      	push	{r4, r5, r6, lr}
 800a8aa:	460e      	mov	r6, r1
 800a8ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8b0:	2900      	cmp	r1, #0
 800a8b2:	b096      	sub	sp, #88	; 0x58
 800a8b4:	4614      	mov	r4, r2
 800a8b6:	461d      	mov	r5, r3
 800a8b8:	da07      	bge.n	800a8ca <__swhatbuf_r+0x22>
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	602b      	str	r3, [r5, #0]
 800a8be:	89b3      	ldrh	r3, [r6, #12]
 800a8c0:	061a      	lsls	r2, r3, #24
 800a8c2:	d410      	bmi.n	800a8e6 <__swhatbuf_r+0x3e>
 800a8c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8c8:	e00e      	b.n	800a8e8 <__swhatbuf_r+0x40>
 800a8ca:	466a      	mov	r2, sp
 800a8cc:	f000 f8b8 	bl	800aa40 <_fstat_r>
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	dbf2      	blt.n	800a8ba <__swhatbuf_r+0x12>
 800a8d4:	9a01      	ldr	r2, [sp, #4]
 800a8d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a8da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a8de:	425a      	negs	r2, r3
 800a8e0:	415a      	adcs	r2, r3
 800a8e2:	602a      	str	r2, [r5, #0]
 800a8e4:	e7ee      	b.n	800a8c4 <__swhatbuf_r+0x1c>
 800a8e6:	2340      	movs	r3, #64	; 0x40
 800a8e8:	2000      	movs	r0, #0
 800a8ea:	6023      	str	r3, [r4, #0]
 800a8ec:	b016      	add	sp, #88	; 0x58
 800a8ee:	bd70      	pop	{r4, r5, r6, pc}

0800a8f0 <__smakebuf_r>:
 800a8f0:	898b      	ldrh	r3, [r1, #12]
 800a8f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a8f4:	079d      	lsls	r5, r3, #30
 800a8f6:	4606      	mov	r6, r0
 800a8f8:	460c      	mov	r4, r1
 800a8fa:	d507      	bpl.n	800a90c <__smakebuf_r+0x1c>
 800a8fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a900:	6023      	str	r3, [r4, #0]
 800a902:	6123      	str	r3, [r4, #16]
 800a904:	2301      	movs	r3, #1
 800a906:	6163      	str	r3, [r4, #20]
 800a908:	b002      	add	sp, #8
 800a90a:	bd70      	pop	{r4, r5, r6, pc}
 800a90c:	ab01      	add	r3, sp, #4
 800a90e:	466a      	mov	r2, sp
 800a910:	f7ff ffca 	bl	800a8a8 <__swhatbuf_r>
 800a914:	9900      	ldr	r1, [sp, #0]
 800a916:	4605      	mov	r5, r0
 800a918:	4630      	mov	r0, r6
 800a91a:	f7ff fcbd 	bl	800a298 <_malloc_r>
 800a91e:	b948      	cbnz	r0, 800a934 <__smakebuf_r+0x44>
 800a920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a924:	059a      	lsls	r2, r3, #22
 800a926:	d4ef      	bmi.n	800a908 <__smakebuf_r+0x18>
 800a928:	f023 0303 	bic.w	r3, r3, #3
 800a92c:	f043 0302 	orr.w	r3, r3, #2
 800a930:	81a3      	strh	r3, [r4, #12]
 800a932:	e7e3      	b.n	800a8fc <__smakebuf_r+0xc>
 800a934:	4b0d      	ldr	r3, [pc, #52]	; (800a96c <__smakebuf_r+0x7c>)
 800a936:	62b3      	str	r3, [r6, #40]	; 0x28
 800a938:	89a3      	ldrh	r3, [r4, #12]
 800a93a:	6020      	str	r0, [r4, #0]
 800a93c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a940:	81a3      	strh	r3, [r4, #12]
 800a942:	9b00      	ldr	r3, [sp, #0]
 800a944:	6163      	str	r3, [r4, #20]
 800a946:	9b01      	ldr	r3, [sp, #4]
 800a948:	6120      	str	r0, [r4, #16]
 800a94a:	b15b      	cbz	r3, 800a964 <__smakebuf_r+0x74>
 800a94c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a950:	4630      	mov	r0, r6
 800a952:	f000 f887 	bl	800aa64 <_isatty_r>
 800a956:	b128      	cbz	r0, 800a964 <__smakebuf_r+0x74>
 800a958:	89a3      	ldrh	r3, [r4, #12]
 800a95a:	f023 0303 	bic.w	r3, r3, #3
 800a95e:	f043 0301 	orr.w	r3, r3, #1
 800a962:	81a3      	strh	r3, [r4, #12]
 800a964:	89a3      	ldrh	r3, [r4, #12]
 800a966:	431d      	orrs	r5, r3
 800a968:	81a5      	strh	r5, [r4, #12]
 800a96a:	e7cd      	b.n	800a908 <__smakebuf_r+0x18>
 800a96c:	0800a75d 	.word	0x0800a75d

0800a970 <__malloc_lock>:
 800a970:	4770      	bx	lr

0800a972 <__malloc_unlock>:
 800a972:	4770      	bx	lr

0800a974 <__sread>:
 800a974:	b510      	push	{r4, lr}
 800a976:	460c      	mov	r4, r1
 800a978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a97c:	f000 f894 	bl	800aaa8 <_read_r>
 800a980:	2800      	cmp	r0, #0
 800a982:	bfab      	itete	ge
 800a984:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a986:	89a3      	ldrhlt	r3, [r4, #12]
 800a988:	181b      	addge	r3, r3, r0
 800a98a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a98e:	bfac      	ite	ge
 800a990:	6563      	strge	r3, [r4, #84]	; 0x54
 800a992:	81a3      	strhlt	r3, [r4, #12]
 800a994:	bd10      	pop	{r4, pc}

0800a996 <__swrite>:
 800a996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a99a:	461f      	mov	r7, r3
 800a99c:	898b      	ldrh	r3, [r1, #12]
 800a99e:	05db      	lsls	r3, r3, #23
 800a9a0:	4605      	mov	r5, r0
 800a9a2:	460c      	mov	r4, r1
 800a9a4:	4616      	mov	r6, r2
 800a9a6:	d505      	bpl.n	800a9b4 <__swrite+0x1e>
 800a9a8:	2302      	movs	r3, #2
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9b0:	f000 f868 	bl	800aa84 <_lseek_r>
 800a9b4:	89a3      	ldrh	r3, [r4, #12]
 800a9b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a9be:	81a3      	strh	r3, [r4, #12]
 800a9c0:	4632      	mov	r2, r6
 800a9c2:	463b      	mov	r3, r7
 800a9c4:	4628      	mov	r0, r5
 800a9c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9ca:	f000 b817 	b.w	800a9fc <_write_r>

0800a9ce <__sseek>:
 800a9ce:	b510      	push	{r4, lr}
 800a9d0:	460c      	mov	r4, r1
 800a9d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9d6:	f000 f855 	bl	800aa84 <_lseek_r>
 800a9da:	1c43      	adds	r3, r0, #1
 800a9dc:	89a3      	ldrh	r3, [r4, #12]
 800a9de:	bf15      	itete	ne
 800a9e0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a9e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a9e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a9ea:	81a3      	strheq	r3, [r4, #12]
 800a9ec:	bf18      	it	ne
 800a9ee:	81a3      	strhne	r3, [r4, #12]
 800a9f0:	bd10      	pop	{r4, pc}

0800a9f2 <__sclose>:
 800a9f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9f6:	f000 b813 	b.w	800aa20 <_close_r>
	...

0800a9fc <_write_r>:
 800a9fc:	b538      	push	{r3, r4, r5, lr}
 800a9fe:	4c07      	ldr	r4, [pc, #28]	; (800aa1c <_write_r+0x20>)
 800aa00:	4605      	mov	r5, r0
 800aa02:	4608      	mov	r0, r1
 800aa04:	4611      	mov	r1, r2
 800aa06:	2200      	movs	r2, #0
 800aa08:	6022      	str	r2, [r4, #0]
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	f7f6 fed9 	bl	80017c2 <_write>
 800aa10:	1c43      	adds	r3, r0, #1
 800aa12:	d102      	bne.n	800aa1a <_write_r+0x1e>
 800aa14:	6823      	ldr	r3, [r4, #0]
 800aa16:	b103      	cbz	r3, 800aa1a <_write_r+0x1e>
 800aa18:	602b      	str	r3, [r5, #0]
 800aa1a:	bd38      	pop	{r3, r4, r5, pc}
 800aa1c:	240003d4 	.word	0x240003d4

0800aa20 <_close_r>:
 800aa20:	b538      	push	{r3, r4, r5, lr}
 800aa22:	4c06      	ldr	r4, [pc, #24]	; (800aa3c <_close_r+0x1c>)
 800aa24:	2300      	movs	r3, #0
 800aa26:	4605      	mov	r5, r0
 800aa28:	4608      	mov	r0, r1
 800aa2a:	6023      	str	r3, [r4, #0]
 800aa2c:	f7f6 fee5 	bl	80017fa <_close>
 800aa30:	1c43      	adds	r3, r0, #1
 800aa32:	d102      	bne.n	800aa3a <_close_r+0x1a>
 800aa34:	6823      	ldr	r3, [r4, #0]
 800aa36:	b103      	cbz	r3, 800aa3a <_close_r+0x1a>
 800aa38:	602b      	str	r3, [r5, #0]
 800aa3a:	bd38      	pop	{r3, r4, r5, pc}
 800aa3c:	240003d4 	.word	0x240003d4

0800aa40 <_fstat_r>:
 800aa40:	b538      	push	{r3, r4, r5, lr}
 800aa42:	4c07      	ldr	r4, [pc, #28]	; (800aa60 <_fstat_r+0x20>)
 800aa44:	2300      	movs	r3, #0
 800aa46:	4605      	mov	r5, r0
 800aa48:	4608      	mov	r0, r1
 800aa4a:	4611      	mov	r1, r2
 800aa4c:	6023      	str	r3, [r4, #0]
 800aa4e:	f7f6 fee0 	bl	8001812 <_fstat>
 800aa52:	1c43      	adds	r3, r0, #1
 800aa54:	d102      	bne.n	800aa5c <_fstat_r+0x1c>
 800aa56:	6823      	ldr	r3, [r4, #0]
 800aa58:	b103      	cbz	r3, 800aa5c <_fstat_r+0x1c>
 800aa5a:	602b      	str	r3, [r5, #0]
 800aa5c:	bd38      	pop	{r3, r4, r5, pc}
 800aa5e:	bf00      	nop
 800aa60:	240003d4 	.word	0x240003d4

0800aa64 <_isatty_r>:
 800aa64:	b538      	push	{r3, r4, r5, lr}
 800aa66:	4c06      	ldr	r4, [pc, #24]	; (800aa80 <_isatty_r+0x1c>)
 800aa68:	2300      	movs	r3, #0
 800aa6a:	4605      	mov	r5, r0
 800aa6c:	4608      	mov	r0, r1
 800aa6e:	6023      	str	r3, [r4, #0]
 800aa70:	f7f6 fedf 	bl	8001832 <_isatty>
 800aa74:	1c43      	adds	r3, r0, #1
 800aa76:	d102      	bne.n	800aa7e <_isatty_r+0x1a>
 800aa78:	6823      	ldr	r3, [r4, #0]
 800aa7a:	b103      	cbz	r3, 800aa7e <_isatty_r+0x1a>
 800aa7c:	602b      	str	r3, [r5, #0]
 800aa7e:	bd38      	pop	{r3, r4, r5, pc}
 800aa80:	240003d4 	.word	0x240003d4

0800aa84 <_lseek_r>:
 800aa84:	b538      	push	{r3, r4, r5, lr}
 800aa86:	4c07      	ldr	r4, [pc, #28]	; (800aaa4 <_lseek_r+0x20>)
 800aa88:	4605      	mov	r5, r0
 800aa8a:	4608      	mov	r0, r1
 800aa8c:	4611      	mov	r1, r2
 800aa8e:	2200      	movs	r2, #0
 800aa90:	6022      	str	r2, [r4, #0]
 800aa92:	461a      	mov	r2, r3
 800aa94:	f7f6 fed8 	bl	8001848 <_lseek>
 800aa98:	1c43      	adds	r3, r0, #1
 800aa9a:	d102      	bne.n	800aaa2 <_lseek_r+0x1e>
 800aa9c:	6823      	ldr	r3, [r4, #0]
 800aa9e:	b103      	cbz	r3, 800aaa2 <_lseek_r+0x1e>
 800aaa0:	602b      	str	r3, [r5, #0]
 800aaa2:	bd38      	pop	{r3, r4, r5, pc}
 800aaa4:	240003d4 	.word	0x240003d4

0800aaa8 <_read_r>:
 800aaa8:	b538      	push	{r3, r4, r5, lr}
 800aaaa:	4c07      	ldr	r4, [pc, #28]	; (800aac8 <_read_r+0x20>)
 800aaac:	4605      	mov	r5, r0
 800aaae:	4608      	mov	r0, r1
 800aab0:	4611      	mov	r1, r2
 800aab2:	2200      	movs	r2, #0
 800aab4:	6022      	str	r2, [r4, #0]
 800aab6:	461a      	mov	r2, r3
 800aab8:	f7f6 fe66 	bl	8001788 <_read>
 800aabc:	1c43      	adds	r3, r0, #1
 800aabe:	d102      	bne.n	800aac6 <_read_r+0x1e>
 800aac0:	6823      	ldr	r3, [r4, #0]
 800aac2:	b103      	cbz	r3, 800aac6 <_read_r+0x1e>
 800aac4:	602b      	str	r3, [r5, #0]
 800aac6:	bd38      	pop	{r3, r4, r5, pc}
 800aac8:	240003d4 	.word	0x240003d4

0800aacc <_init>:
 800aacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aace:	bf00      	nop
 800aad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aad2:	bc08      	pop	{r3}
 800aad4:	469e      	mov	lr, r3
 800aad6:	4770      	bx	lr

0800aad8 <_fini>:
 800aad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aada:	bf00      	nop
 800aadc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aade:	bc08      	pop	{r3}
 800aae0:	469e      	mov	lr, r3
 800aae2:	4770      	bx	lr
