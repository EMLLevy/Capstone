
theremin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009458  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08009704  08009704  00019704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009750  08009750  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08009750  08009750  00019750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009758  08009758  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009758  08009758  00019758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800975c  0800975c  0001975c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08009760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  24000010  08009770  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240002c0  08009770  000202c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000213b7  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003100  00000000  00000000  000413f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001538  00000000  00000000  000444f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001410  00000000  00000000  00045a30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00032070  00000000  00000000  00046e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012878  00000000  00000000  00078eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00154d60  00000000  00000000  0008b728  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e0488  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c0c  00000000  00000000  001e0504  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	080096ec 	.word	0x080096ec

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	080096ec 	.word	0x080096ec

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b972 	b.w	80005e8 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9e08      	ldr	r6, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	4688      	mov	r8, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d14b      	bne.n	80003c2 <__udivmoddi4+0xa6>
 800032a:	428a      	cmp	r2, r1
 800032c:	4615      	mov	r5, r2
 800032e:	d967      	bls.n	8000400 <__udivmoddi4+0xe4>
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	b14a      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000336:	f1c2 0720 	rsb	r7, r2, #32
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	fa20 f707 	lsr.w	r7, r0, r7
 8000342:	4095      	lsls	r5, r2
 8000344:	ea47 0803 	orr.w	r8, r7, r3
 8000348:	4094      	lsls	r4, r2
 800034a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800034e:	0c23      	lsrs	r3, r4, #16
 8000350:	fbb8 f7fe 	udiv	r7, r8, lr
 8000354:	fa1f fc85 	uxth.w	ip, r5
 8000358:	fb0e 8817 	mls	r8, lr, r7, r8
 800035c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000360:	fb07 f10c 	mul.w	r1, r7, ip
 8000364:	4299      	cmp	r1, r3
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x60>
 8000368:	18eb      	adds	r3, r5, r3
 800036a:	f107 30ff 	add.w	r0, r7, #4294967295
 800036e:	f080 811b 	bcs.w	80005a8 <__udivmoddi4+0x28c>
 8000372:	4299      	cmp	r1, r3
 8000374:	f240 8118 	bls.w	80005a8 <__udivmoddi4+0x28c>
 8000378:	3f02      	subs	r7, #2
 800037a:	442b      	add	r3, r5
 800037c:	1a5b      	subs	r3, r3, r1
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb3 f0fe 	udiv	r0, r3, lr
 8000384:	fb0e 3310 	mls	r3, lr, r0, r3
 8000388:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000390:	45a4      	cmp	ip, r4
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x8c>
 8000394:	192c      	adds	r4, r5, r4
 8000396:	f100 33ff 	add.w	r3, r0, #4294967295
 800039a:	f080 8107 	bcs.w	80005ac <__udivmoddi4+0x290>
 800039e:	45a4      	cmp	ip, r4
 80003a0:	f240 8104 	bls.w	80005ac <__udivmoddi4+0x290>
 80003a4:	3802      	subs	r0, #2
 80003a6:	442c      	add	r4, r5
 80003a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003ac:	eba4 040c 	sub.w	r4, r4, ip
 80003b0:	2700      	movs	r7, #0
 80003b2:	b11e      	cbz	r6, 80003bc <__udivmoddi4+0xa0>
 80003b4:	40d4      	lsrs	r4, r2
 80003b6:	2300      	movs	r3, #0
 80003b8:	e9c6 4300 	strd	r4, r3, [r6]
 80003bc:	4639      	mov	r1, r7
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d909      	bls.n	80003da <__udivmoddi4+0xbe>
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f000 80eb 	beq.w	80005a2 <__udivmoddi4+0x286>
 80003cc:	2700      	movs	r7, #0
 80003ce:	e9c6 0100 	strd	r0, r1, [r6]
 80003d2:	4638      	mov	r0, r7
 80003d4:	4639      	mov	r1, r7
 80003d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003da:	fab3 f783 	clz	r7, r3
 80003de:	2f00      	cmp	r7, #0
 80003e0:	d147      	bne.n	8000472 <__udivmoddi4+0x156>
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xd0>
 80003e6:	4282      	cmp	r2, r0
 80003e8:	f200 80fa 	bhi.w	80005e0 <__udivmoddi4+0x2c4>
 80003ec:	1a84      	subs	r4, r0, r2
 80003ee:	eb61 0303 	sbc.w	r3, r1, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	4698      	mov	r8, r3
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	d0e0      	beq.n	80003bc <__udivmoddi4+0xa0>
 80003fa:	e9c6 4800 	strd	r4, r8, [r6]
 80003fe:	e7dd      	b.n	80003bc <__udivmoddi4+0xa0>
 8000400:	b902      	cbnz	r2, 8000404 <__udivmoddi4+0xe8>
 8000402:	deff      	udf	#255	; 0xff
 8000404:	fab2 f282 	clz	r2, r2
 8000408:	2a00      	cmp	r2, #0
 800040a:	f040 808f 	bne.w	800052c <__udivmoddi4+0x210>
 800040e:	1b49      	subs	r1, r1, r5
 8000410:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000414:	fa1f f885 	uxth.w	r8, r5
 8000418:	2701      	movs	r7, #1
 800041a:	fbb1 fcfe 	udiv	ip, r1, lr
 800041e:	0c23      	lsrs	r3, r4, #16
 8000420:	fb0e 111c 	mls	r1, lr, ip, r1
 8000424:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000428:	fb08 f10c 	mul.w	r1, r8, ip
 800042c:	4299      	cmp	r1, r3
 800042e:	d907      	bls.n	8000440 <__udivmoddi4+0x124>
 8000430:	18eb      	adds	r3, r5, r3
 8000432:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000436:	d202      	bcs.n	800043e <__udivmoddi4+0x122>
 8000438:	4299      	cmp	r1, r3
 800043a:	f200 80cd 	bhi.w	80005d8 <__udivmoddi4+0x2bc>
 800043e:	4684      	mov	ip, r0
 8000440:	1a59      	subs	r1, r3, r1
 8000442:	b2a3      	uxth	r3, r4
 8000444:	fbb1 f0fe 	udiv	r0, r1, lr
 8000448:	fb0e 1410 	mls	r4, lr, r0, r1
 800044c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000450:	fb08 f800 	mul.w	r8, r8, r0
 8000454:	45a0      	cmp	r8, r4
 8000456:	d907      	bls.n	8000468 <__udivmoddi4+0x14c>
 8000458:	192c      	adds	r4, r5, r4
 800045a:	f100 33ff 	add.w	r3, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x14a>
 8000460:	45a0      	cmp	r8, r4
 8000462:	f200 80b6 	bhi.w	80005d2 <__udivmoddi4+0x2b6>
 8000466:	4618      	mov	r0, r3
 8000468:	eba4 0408 	sub.w	r4, r4, r8
 800046c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000470:	e79f      	b.n	80003b2 <__udivmoddi4+0x96>
 8000472:	f1c7 0c20 	rsb	ip, r7, #32
 8000476:	40bb      	lsls	r3, r7
 8000478:	fa22 fe0c 	lsr.w	lr, r2, ip
 800047c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000480:	fa01 f407 	lsl.w	r4, r1, r7
 8000484:	fa20 f50c 	lsr.w	r5, r0, ip
 8000488:	fa21 f30c 	lsr.w	r3, r1, ip
 800048c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000490:	4325      	orrs	r5, r4
 8000492:	fbb3 f9f8 	udiv	r9, r3, r8
 8000496:	0c2c      	lsrs	r4, r5, #16
 8000498:	fb08 3319 	mls	r3, r8, r9, r3
 800049c:	fa1f fa8e 	uxth.w	sl, lr
 80004a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a4:	fb09 f40a 	mul.w	r4, r9, sl
 80004a8:	429c      	cmp	r4, r3
 80004aa:	fa02 f207 	lsl.w	r2, r2, r7
 80004ae:	fa00 f107 	lsl.w	r1, r0, r7
 80004b2:	d90b      	bls.n	80004cc <__udivmoddi4+0x1b0>
 80004b4:	eb1e 0303 	adds.w	r3, lr, r3
 80004b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80004bc:	f080 8087 	bcs.w	80005ce <__udivmoddi4+0x2b2>
 80004c0:	429c      	cmp	r4, r3
 80004c2:	f240 8084 	bls.w	80005ce <__udivmoddi4+0x2b2>
 80004c6:	f1a9 0902 	sub.w	r9, r9, #2
 80004ca:	4473      	add	r3, lr
 80004cc:	1b1b      	subs	r3, r3, r4
 80004ce:	b2ad      	uxth	r5, r5
 80004d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d4:	fb08 3310 	mls	r3, r8, r0, r3
 80004d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e0:	45a2      	cmp	sl, r4
 80004e2:	d908      	bls.n	80004f6 <__udivmoddi4+0x1da>
 80004e4:	eb1e 0404 	adds.w	r4, lr, r4
 80004e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80004ec:	d26b      	bcs.n	80005c6 <__udivmoddi4+0x2aa>
 80004ee:	45a2      	cmp	sl, r4
 80004f0:	d969      	bls.n	80005c6 <__udivmoddi4+0x2aa>
 80004f2:	3802      	subs	r0, #2
 80004f4:	4474      	add	r4, lr
 80004f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fa:	fba0 8902 	umull	r8, r9, r0, r2
 80004fe:	eba4 040a 	sub.w	r4, r4, sl
 8000502:	454c      	cmp	r4, r9
 8000504:	46c2      	mov	sl, r8
 8000506:	464b      	mov	r3, r9
 8000508:	d354      	bcc.n	80005b4 <__udivmoddi4+0x298>
 800050a:	d051      	beq.n	80005b0 <__udivmoddi4+0x294>
 800050c:	2e00      	cmp	r6, #0
 800050e:	d069      	beq.n	80005e4 <__udivmoddi4+0x2c8>
 8000510:	ebb1 050a 	subs.w	r5, r1, sl
 8000514:	eb64 0403 	sbc.w	r4, r4, r3
 8000518:	fa04 fc0c 	lsl.w	ip, r4, ip
 800051c:	40fd      	lsrs	r5, r7
 800051e:	40fc      	lsrs	r4, r7
 8000520:	ea4c 0505 	orr.w	r5, ip, r5
 8000524:	e9c6 5400 	strd	r5, r4, [r6]
 8000528:	2700      	movs	r7, #0
 800052a:	e747      	b.n	80003bc <__udivmoddi4+0xa0>
 800052c:	f1c2 0320 	rsb	r3, r2, #32
 8000530:	fa20 f703 	lsr.w	r7, r0, r3
 8000534:	4095      	lsls	r5, r2
 8000536:	fa01 f002 	lsl.w	r0, r1, r2
 800053a:	fa21 f303 	lsr.w	r3, r1, r3
 800053e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000542:	4338      	orrs	r0, r7
 8000544:	0c01      	lsrs	r1, r0, #16
 8000546:	fbb3 f7fe 	udiv	r7, r3, lr
 800054a:	fa1f f885 	uxth.w	r8, r5
 800054e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb07 f308 	mul.w	r3, r7, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	fa04 f402 	lsl.w	r4, r4, r2
 8000560:	d907      	bls.n	8000572 <__udivmoddi4+0x256>
 8000562:	1869      	adds	r1, r5, r1
 8000564:	f107 3cff 	add.w	ip, r7, #4294967295
 8000568:	d22f      	bcs.n	80005ca <__udivmoddi4+0x2ae>
 800056a:	428b      	cmp	r3, r1
 800056c:	d92d      	bls.n	80005ca <__udivmoddi4+0x2ae>
 800056e:	3f02      	subs	r7, #2
 8000570:	4429      	add	r1, r5
 8000572:	1acb      	subs	r3, r1, r3
 8000574:	b281      	uxth	r1, r0
 8000576:	fbb3 f0fe 	udiv	r0, r3, lr
 800057a:	fb0e 3310 	mls	r3, lr, r0, r3
 800057e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000582:	fb00 f308 	mul.w	r3, r0, r8
 8000586:	428b      	cmp	r3, r1
 8000588:	d907      	bls.n	800059a <__udivmoddi4+0x27e>
 800058a:	1869      	adds	r1, r5, r1
 800058c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000590:	d217      	bcs.n	80005c2 <__udivmoddi4+0x2a6>
 8000592:	428b      	cmp	r3, r1
 8000594:	d915      	bls.n	80005c2 <__udivmoddi4+0x2a6>
 8000596:	3802      	subs	r0, #2
 8000598:	4429      	add	r1, r5
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a0:	e73b      	b.n	800041a <__udivmoddi4+0xfe>
 80005a2:	4637      	mov	r7, r6
 80005a4:	4630      	mov	r0, r6
 80005a6:	e709      	b.n	80003bc <__udivmoddi4+0xa0>
 80005a8:	4607      	mov	r7, r0
 80005aa:	e6e7      	b.n	800037c <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fb      	b.n	80003a8 <__udivmoddi4+0x8c>
 80005b0:	4541      	cmp	r1, r8
 80005b2:	d2ab      	bcs.n	800050c <__udivmoddi4+0x1f0>
 80005b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80005b8:	eb69 020e 	sbc.w	r2, r9, lr
 80005bc:	3801      	subs	r0, #1
 80005be:	4613      	mov	r3, r2
 80005c0:	e7a4      	b.n	800050c <__udivmoddi4+0x1f0>
 80005c2:	4660      	mov	r0, ip
 80005c4:	e7e9      	b.n	800059a <__udivmoddi4+0x27e>
 80005c6:	4618      	mov	r0, r3
 80005c8:	e795      	b.n	80004f6 <__udivmoddi4+0x1da>
 80005ca:	4667      	mov	r7, ip
 80005cc:	e7d1      	b.n	8000572 <__udivmoddi4+0x256>
 80005ce:	4681      	mov	r9, r0
 80005d0:	e77c      	b.n	80004cc <__udivmoddi4+0x1b0>
 80005d2:	3802      	subs	r0, #2
 80005d4:	442c      	add	r4, r5
 80005d6:	e747      	b.n	8000468 <__udivmoddi4+0x14c>
 80005d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80005dc:	442b      	add	r3, r5
 80005de:	e72f      	b.n	8000440 <__udivmoddi4+0x124>
 80005e0:	4638      	mov	r0, r7
 80005e2:	e708      	b.n	80003f6 <__udivmoddi4+0xda>
 80005e4:	4637      	mov	r7, r6
 80005e6:	e6e9      	b.n	80003bc <__udivmoddi4+0xa0>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b090      	sub	sp, #64	; 0x40
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fee7 	bl	80013c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f83b 	bl	8000670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 fae7 	bl	8000bcc <MX_GPIO_Init>
  MX_DMA_Init();
 80005fe:	f000 faad 	bl	8000b5c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000602:	f000 fa57 	bl	8000ab4 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000606:	f000 faa1 	bl	8000b4c <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 800060a:	f000 f901 	bl	8000810 <MX_ADC1_Init>
  MX_DAC1_Init();
 800060e:	f000 f979 	bl	8000904 <MX_DAC1_Init>
  MX_TIM6_Init();
 8000612:	f000 fa19 	bl	8000a48 <MX_TIM6_Init>
  MX_TIM2_Init();
 8000616:	f000 f9a7 	bl	8000968 <MX_TIM2_Init>

  /* Start ADC with DMA */
//  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buff, 2*blocksize);

  /* Start TIM6 and DAC with DMA */
  HAL_TIM_Base_Start(&htim6);
 800061a:	480f      	ldr	r0, [pc, #60]	; (8000658 <main+0x6c>)
 800061c:	f006 feae 	bl	800737c <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000620:	2100      	movs	r1, #0
 8000622:	480e      	ldr	r0, [pc, #56]	; (800065c <main+0x70>)
 8000624:	f001 ffbf 	bl	80025a6 <HAL_DAC_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uart_buf_len = sprintf(uart_buf, "Testing\r\n");
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <main+0x74>)
 800062c:	ca07      	ldmia	r2, {r0, r1, r2}
 800062e:	c303      	stmia	r3!, {r0, r1}
 8000630:	801a      	strh	r2, [r3, #0]
 8000632:	2309      	movs	r3, #9
 8000634:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_UART_Transmit(&huart3, uart_buf, uart_buf_len, 100);
 8000636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000638:	b29a      	uxth	r2, r3
 800063a:	1d39      	adds	r1, r7, #4
 800063c:	2364      	movs	r3, #100	; 0x64
 800063e:	4809      	ldr	r0, [pc, #36]	; (8000664 <main+0x78>)
 8000640:	f007 fe5e 	bl	8008300 <HAL_UART_Transmit>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000644:	2100      	movs	r1, #0
 8000646:	4808      	ldr	r0, [pc, #32]	; (8000668 <main+0x7c>)
 8000648:	f006 ff28 	bl	800749c <HAL_TIM_IC_Start_IT>
  i = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	63bb      	str	r3, [r7, #56]	; 0x38

  timer_val = 0;
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <main+0x80>)
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
  while (1)
 8000656:	e7fe      	b.n	8000656 <main+0x6a>
 8000658:	24000220 	.word	0x24000220
 800065c:	2400002c 	.word	0x2400002c
 8000660:	08009704 	.word	0x08009704
 8000664:	24000040 	.word	0x24000040
 8000668:	24000270 	.word	0x24000270
 800066c:	2400026c 	.word	0x2400026c

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b0ca      	sub	sp, #296	; 0x128
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800067a:	224c      	movs	r2, #76	; 0x4c
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f009 f82c 	bl	80096dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000688:	2220      	movs	r2, #32
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f009 f825 	bl	80096dc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	4618      	mov	r0, r3
 8000696:	23b8      	movs	r3, #184	; 0xb8
 8000698:	461a      	mov	r2, r3
 800069a:	2100      	movs	r1, #0
 800069c:	f009 f81e 	bl	80096dc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80006a0:	2004      	movs	r0, #4
 80006a2:	f004 f815 	bl	80046d0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006a6:	463b      	mov	r3, r7
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	4b55      	ldr	r3, [pc, #340]	; (8000804 <SystemClock_Config+0x194>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	4a54      	ldr	r2, [pc, #336]	; (8000804 <SystemClock_Config+0x194>)
 80006b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006b6:	6193      	str	r3, [r2, #24]
 80006b8:	4b52      	ldr	r3, [pc, #328]	; (8000804 <SystemClock_Config+0x194>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80006c0:	463b      	mov	r3, r7
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	463b      	mov	r3, r7
 80006c6:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006c8:	bf00      	nop
 80006ca:	4b4e      	ldr	r3, [pc, #312]	; (8000804 <SystemClock_Config+0x194>)
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006d6:	d1f8      	bne.n	80006ca <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80006d8:	4b4b      	ldr	r3, [pc, #300]	; (8000808 <SystemClock_Config+0x198>)
 80006da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006dc:	f023 0303 	bic.w	r3, r3, #3
 80006e0:	4a49      	ldr	r2, [pc, #292]	; (8000808 <SystemClock_Config+0x198>)
 80006e2:	f043 0302 	orr.w	r3, r3, #2
 80006e6:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 80006e8:	2329      	movs	r3, #41	; 0x29
 80006ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006ee:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006f6:	2301      	movs	r3, #1
 80006f8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006fc:	2301      	movs	r3, #1
 80006fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000702:	2302      	movs	r3, #2
 8000704:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000708:	2302      	movs	r3, #2
 800070a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  RCC_OscInitStruct.PLL.PLLM = 1;
 800070e:	2301      	movs	r3, #1
 8000710:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000714:	2318      	movs	r3, #24
 8000716:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800071a:	2302      	movs	r3, #2
 800071c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000720:	2304      	movs	r3, #4
 8000722:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000726:	2302      	movs	r3, #2
 8000728:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800072c:	230c      	movs	r3, #12
 800072e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000732:	2300      	movs	r3, #0
 8000734:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000742:	4618      	mov	r0, r3
 8000744:	f004 f81e 	bl	8004784 <HAL_RCC_OscConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800074e:	f000 fb81 	bl	8000e54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000752:	233f      	movs	r3, #63	; 0x3f
 8000754:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000758:	2303      	movs	r3, #3
 800075a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000782:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000786:	2102      	movs	r1, #2
 8000788:	4618      	mov	r0, r3
 800078a:	f004 fbe3 	bl	8004f54 <HAL_RCC_ClockConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x128>
  {
    Error_Handler();
 8000794:	f000 fb5e 	bl	8000e54 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_ADC
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	4a1c      	ldr	r2, [pc, #112]	; (800080c <SystemClock_Config+0x19c>)
 800079c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2201      	movs	r2, #1
 80007a2:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	2210      	movs	r2, #16
 80007a8:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2202      	movs	r2, #2
 80007ae:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2202      	movs	r2, #2
 80007b4:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2202      	movs	r2, #2
 80007ba:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	22c0      	movs	r2, #192	; 0xc0
 80007c0:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	2200      	movs	r2, #0
 80007c6:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	2200      	movs	r2, #0
 80007cc:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	2200      	movs	r2, #0
 80007d2:	67da      	str	r2, [r3, #124]	; 0x7c
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80007da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2200      	movs	r2, #0
 80007e2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	4618      	mov	r0, r3
 80007ea:	f004 ff37 	bl	800565c <HAL_RCCEx_PeriphCLKConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0x188>
  {
    Error_Handler();
 80007f4:	f000 fb2e 	bl	8000e54 <Error_Handler>
  }
}
 80007f8:	bf00      	nop
 80007fa:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	58024800 	.word	0x58024800
 8000808:	58024400 	.word	0x58024400
 800080c:	000c0002 	.word	0x000c0002

08000810 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000822:	463b      	mov	r3, r7
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
 8000830:	615a      	str	r2, [r3, #20]
 8000832:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000834:	4b30      	ldr	r3, [pc, #192]	; (80008f8 <MX_ADC1_Init+0xe8>)
 8000836:	4a31      	ldr	r2, [pc, #196]	; (80008fc <MX_ADC1_Init+0xec>)
 8000838:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800083a:	4b2f      	ldr	r3, [pc, #188]	; (80008f8 <MX_ADC1_Init+0xe8>)
 800083c:	2200      	movs	r2, #0
 800083e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000840:	4b2d      	ldr	r3, [pc, #180]	; (80008f8 <MX_ADC1_Init+0xe8>)
 8000842:	2208      	movs	r2, #8
 8000844:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000846:	4b2c      	ldr	r3, [pc, #176]	; (80008f8 <MX_ADC1_Init+0xe8>)
 8000848:	2200      	movs	r2, #0
 800084a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800084c:	4b2a      	ldr	r3, [pc, #168]	; (80008f8 <MX_ADC1_Init+0xe8>)
 800084e:	2204      	movs	r2, #4
 8000850:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000852:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <MX_ADC1_Init+0xe8>)
 8000854:	2200      	movs	r2, #0
 8000856:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000858:	4b27      	ldr	r3, [pc, #156]	; (80008f8 <MX_ADC1_Init+0xe8>)
 800085a:	2201      	movs	r2, #1
 800085c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800085e:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <MX_ADC1_Init+0xe8>)
 8000860:	2201      	movs	r2, #1
 8000862:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000864:	4b24      	ldr	r3, [pc, #144]	; (80008f8 <MX_ADC1_Init+0xe8>)
 8000866:	2200      	movs	r2, #0
 8000868:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 800086a:	4b23      	ldr	r3, [pc, #140]	; (80008f8 <MX_ADC1_Init+0xe8>)
 800086c:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8000870:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000872:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <MX_ADC1_Init+0xe8>)
 8000874:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000878:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087a:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <MX_ADC1_Init+0xe8>)
 800087c:	2203      	movs	r2, #3
 800087e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000880:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <MX_ADC1_Init+0xe8>)
 8000882:	2200      	movs	r2, #0
 8000884:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000886:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <MX_ADC1_Init+0xe8>)
 8000888:	2200      	movs	r2, #0
 800088a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800088c:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <MX_ADC1_Init+0xe8>)
 800088e:	2200      	movs	r2, #0
 8000890:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000894:	4818      	ldr	r0, [pc, #96]	; (80008f8 <MX_ADC1_Init+0xe8>)
 8000896:	f000 ffd5 	bl	8001844 <HAL_ADC_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80008a0:	f000 fad8 	bl	8000e54 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	4812      	ldr	r0, [pc, #72]	; (80008f8 <MX_ADC1_Init+0xe8>)
 80008b0:	f001 fcb0 	bl	8002214 <HAL_ADCEx_MultiModeConfigChannel>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80008ba:	f000 facb 	bl	8000e54 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <MX_ADC1_Init+0xf0>)
 80008c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008c2:	2306      	movs	r3, #6
 80008c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008ca:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008ce:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008d0:	2304      	movs	r3, #4
 80008d2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008d8:	2300      	movs	r3, #0
 80008da:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008dc:	463b      	mov	r3, r7
 80008de:	4619      	mov	r1, r3
 80008e0:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_ADC1_Init+0xe8>)
 80008e2:	f001 f909 	bl	8001af8 <HAL_ADC_ConfigChannel>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80008ec:	f000 fab2 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	3728      	adds	r7, #40	; 0x28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	24000144 	.word	0x24000144
 80008fc:	40022000 	.word	0x40022000
 8000900:	14f00020 	.word	0x14f00020

08000904 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	; 0x28
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2224      	movs	r2, #36	; 0x24
 800090e:	2100      	movs	r1, #0
 8000910:	4618      	mov	r0, r3
 8000912:	f008 fee3 	bl	80096dc <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000916:	4b12      	ldr	r3, [pc, #72]	; (8000960 <MX_DAC1_Init+0x5c>)
 8000918:	4a12      	ldr	r2, [pc, #72]	; (8000964 <MX_DAC1_Init+0x60>)
 800091a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800091c:	4810      	ldr	r0, [pc, #64]	; (8000960 <MX_DAC1_Init+0x5c>)
 800091e:	f001 fe20 	bl	8002562 <HAL_DAC_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000928:	f000 fa94 	bl	8000e54 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000930:	2316      	movs	r3, #22
 8000932:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000934:	2300      	movs	r3, #0
 8000936:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000938:	2302      	movs	r3, #2
 800093a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2200      	movs	r2, #0
 8000944:	4619      	mov	r1, r3
 8000946:	4806      	ldr	r0, [pc, #24]	; (8000960 <MX_DAC1_Init+0x5c>)
 8000948:	f001 fe80 	bl	800264c <HAL_DAC_ConfigChannel>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000952:	f000 fa7f 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	3728      	adds	r7, #40	; 0x28
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	2400002c 	.word	0x2400002c
 8000964:	40007400 	.word	0x40007400

08000968 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08c      	sub	sp, #48	; 0x30
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800096e:	f107 0320 	add.w	r3, r7, #32
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000994:	4b2b      	ldr	r3, [pc, #172]	; (8000a44 <MX_TIM2_Init+0xdc>)
 8000996:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800099a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96;
 800099c:	4b29      	ldr	r3, [pc, #164]	; (8000a44 <MX_TIM2_Init+0xdc>)
 800099e:	2260      	movs	r2, #96	; 0x60
 80009a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a2:	4b28      	ldr	r3, [pc, #160]	; (8000a44 <MX_TIM2_Init+0xdc>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80009a8:	4b26      	ldr	r3, [pc, #152]	; (8000a44 <MX_TIM2_Init+0xdc>)
 80009aa:	f04f 32ff 	mov.w	r2, #4294967295
 80009ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b0:	4b24      	ldr	r3, [pc, #144]	; (8000a44 <MX_TIM2_Init+0xdc>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b6:	4b23      	ldr	r3, [pc, #140]	; (8000a44 <MX_TIM2_Init+0xdc>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009bc:	4821      	ldr	r0, [pc, #132]	; (8000a44 <MX_TIM2_Init+0xdc>)
 80009be:	f006 fc85 	bl	80072cc <HAL_TIM_Base_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80009c8:	f000 fa44 	bl	8000e54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009d2:	f107 0320 	add.w	r3, r7, #32
 80009d6:	4619      	mov	r1, r3
 80009d8:	481a      	ldr	r0, [pc, #104]	; (8000a44 <MX_TIM2_Init+0xdc>)
 80009da:	f007 f81b 	bl	8007a14 <HAL_TIM_ConfigClockSource>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80009e4:	f000 fa36 	bl	8000e54 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80009e8:	4816      	ldr	r0, [pc, #88]	; (8000a44 <MX_TIM2_Init+0xdc>)
 80009ea:	f006 fcf5 	bl	80073d8 <HAL_TIM_IC_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80009f4:	f000 fa2e 	bl	8000e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	4619      	mov	r1, r3
 8000a06:	480f      	ldr	r0, [pc, #60]	; (8000a44 <MX_TIM2_Init+0xdc>)
 8000a08:	f007 fb84 	bl	8008114 <HAL_TIMEx_MasterConfigSynchronization>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000a12:	f000 fa1f 	bl	8000e54 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 1;
 8000a22:	2301      	movs	r3, #1
 8000a24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	2200      	movs	r2, #0
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_TIM2_Init+0xdc>)
 8000a2e:	f006 ff5c 	bl	80078ea <HAL_TIM_IC_ConfigChannel>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000a38:	f000 fa0c 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a3c:	bf00      	nop
 8000a3e:	3730      	adds	r7, #48	; 0x30
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	24000270 	.word	0x24000270

08000a48 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a58:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_TIM6_Init+0x64>)
 8000a5a:	4a15      	ldr	r2, [pc, #84]	; (8000ab0 <MX_TIM6_Init+0x68>)
 8000a5c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <MX_TIM6_Init+0x64>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a64:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_TIM6_Init+0x64>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20;
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <MX_TIM6_Init+0x64>)
 8000a6c:	2214      	movs	r2, #20
 8000a6e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a70:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_TIM6_Init+0x64>)
 8000a72:	2280      	movs	r2, #128	; 0x80
 8000a74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a76:	480d      	ldr	r0, [pc, #52]	; (8000aac <MX_TIM6_Init+0x64>)
 8000a78:	f006 fc28 	bl	80072cc <HAL_TIM_Base_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000a82:	f000 f9e7 	bl	8000e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a86:	2320      	movs	r3, #32
 8000a88:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	4619      	mov	r1, r3
 8000a92:	4806      	ldr	r0, [pc, #24]	; (8000aac <MX_TIM6_Init+0x64>)
 8000a94:	f007 fb3e 	bl	8008114 <HAL_TIMEx_MasterConfigSynchronization>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000a9e:	f000 f9d9 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	24000220 	.word	0x24000220
 8000ab0:	40001000 	.word	0x40001000

08000ab4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ab8:	4b22      	ldr	r3, [pc, #136]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000aba:	4a23      	ldr	r2, [pc, #140]	; (8000b48 <MX_USART3_UART_Init+0x94>)
 8000abc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000abe:	4b21      	ldr	r3, [pc, #132]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000ac0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac6:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000acc:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ad2:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000ada:	220c      	movs	r2, #12
 8000adc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ade:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae4:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aea:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af6:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000afc:	4811      	ldr	r0, [pc, #68]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000afe:	f007 fbaf 	bl	8008260 <HAL_UART_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b08:	f000 f9a4 	bl	8000e54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	480d      	ldr	r0, [pc, #52]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000b10:	f008 fcdb 	bl	80094ca <HAL_UARTEx_SetTxFifoThreshold>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b1a:	f000 f99b 	bl	8000e54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4808      	ldr	r0, [pc, #32]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000b22:	f008 fd10 	bl	8009546 <HAL_UARTEx_SetRxFifoThreshold>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b2c:	f000 f992 	bl	8000e54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b30:	4804      	ldr	r0, [pc, #16]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000b32:	f008 fc91 	bl	8009458 <HAL_UARTEx_DisableFifoMode>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b3c:	f000 f98a 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	24000040 	.word	0x24000040
 8000b48:	40004800 	.word	0x40004800

08000b4c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
	...

08000b5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b62:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <MX_DMA_Init+0x6c>)
 8000b64:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000b68:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <MX_DMA_Init+0x6c>)
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <MX_DMA_Init+0x6c>)
 8000b74:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_DMA_Init+0x6c>)
 8000b82:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000b86:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <MX_DMA_Init+0x6c>)
 8000b88:	f043 0302 	orr.w	r3, r3, #2
 8000b8c:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000b90:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <MX_DMA_Init+0x6c>)
 8000b92:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	200b      	movs	r0, #11
 8000ba4:	f001 fca9 	bl	80024fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ba8:	200b      	movs	r0, #11
 8000baa:	f001 fcc0 	bl	800252e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	2038      	movs	r0, #56	; 0x38
 8000bb4:	f001 fca1 	bl	80024fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000bb8:	2038      	movs	r0, #56	; 0x38
 8000bba:	f001 fcb8 	bl	800252e <HAL_NVIC_EnableIRQ>

}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	58024400 	.word	0x58024400

08000bcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08e      	sub	sp, #56	; 0x38
 8000bd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]
 8000be0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be2:	4b87      	ldr	r3, [pc, #540]	; (8000e00 <MX_GPIO_Init+0x234>)
 8000be4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000be8:	4a85      	ldr	r2, [pc, #532]	; (8000e00 <MX_GPIO_Init+0x234>)
 8000bea:	f043 0304 	orr.w	r3, r3, #4
 8000bee:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bf2:	4b83      	ldr	r3, [pc, #524]	; (8000e00 <MX_GPIO_Init+0x234>)
 8000bf4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bf8:	f003 0304 	and.w	r3, r3, #4
 8000bfc:	623b      	str	r3, [r7, #32]
 8000bfe:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c00:	4b7f      	ldr	r3, [pc, #508]	; (8000e00 <MX_GPIO_Init+0x234>)
 8000c02:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c06:	4a7e      	ldr	r2, [pc, #504]	; (8000e00 <MX_GPIO_Init+0x234>)
 8000c08:	f043 0320 	orr.w	r3, r3, #32
 8000c0c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c10:	4b7b      	ldr	r3, [pc, #492]	; (8000e00 <MX_GPIO_Init+0x234>)
 8000c12:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c16:	f003 0320 	and.w	r3, r3, #32
 8000c1a:	61fb      	str	r3, [r7, #28]
 8000c1c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c1e:	4b78      	ldr	r3, [pc, #480]	; (8000e00 <MX_GPIO_Init+0x234>)
 8000c20:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c24:	4a76      	ldr	r2, [pc, #472]	; (8000e00 <MX_GPIO_Init+0x234>)
 8000c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c2a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c2e:	4b74      	ldr	r3, [pc, #464]	; (8000e00 <MX_GPIO_Init+0x234>)
 8000c30:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c38:	61bb      	str	r3, [r7, #24]
 8000c3a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3c:	4b70      	ldr	r3, [pc, #448]	; (8000e00 <MX_GPIO_Init+0x234>)
 8000c3e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c42:	4a6f      	ldr	r2, [pc, #444]	; (8000e00 <MX_GPIO_Init+0x234>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c4c:	4b6c      	ldr	r3, [pc, #432]	; (8000e00 <MX_GPIO_Init+0x234>)
 8000c4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	617b      	str	r3, [r7, #20]
 8000c58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5a:	4b69      	ldr	r3, [pc, #420]	; (8000e00 <MX_GPIO_Init+0x234>)
 8000c5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c60:	4a67      	ldr	r2, [pc, #412]	; (8000e00 <MX_GPIO_Init+0x234>)
 8000c62:	f043 0302 	orr.w	r3, r3, #2
 8000c66:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c6a:	4b65      	ldr	r3, [pc, #404]	; (8000e00 <MX_GPIO_Init+0x234>)
 8000c6c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c70:	f003 0302 	and.w	r3, r3, #2
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c78:	4b61      	ldr	r3, [pc, #388]	; (8000e00 <MX_GPIO_Init+0x234>)
 8000c7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c7e:	4a60      	ldr	r2, [pc, #384]	; (8000e00 <MX_GPIO_Init+0x234>)
 8000c80:	f043 0308 	orr.w	r3, r3, #8
 8000c84:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c88:	4b5d      	ldr	r3, [pc, #372]	; (8000e00 <MX_GPIO_Init+0x234>)
 8000c8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c8e:	f003 0308 	and.w	r3, r3, #8
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c96:	4b5a      	ldr	r3, [pc, #360]	; (8000e00 <MX_GPIO_Init+0x234>)
 8000c98:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c9c:	4a58      	ldr	r2, [pc, #352]	; (8000e00 <MX_GPIO_Init+0x234>)
 8000c9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ca2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ca6:	4b56      	ldr	r3, [pc, #344]	; (8000e00 <MX_GPIO_Init+0x234>)
 8000ca8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cb4:	4b52      	ldr	r3, [pc, #328]	; (8000e00 <MX_GPIO_Init+0x234>)
 8000cb6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cba:	4a51      	ldr	r2, [pc, #324]	; (8000e00 <MX_GPIO_Init+0x234>)
 8000cbc:	f043 0310 	orr.w	r3, r3, #16
 8000cc0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cc4:	4b4e      	ldr	r3, [pc, #312]	; (8000e00 <MX_GPIO_Init+0x234>)
 8000cc6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cca:	f003 0310 	and.w	r3, r3, #16
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cd8:	484a      	ldr	r0, [pc, #296]	; (8000e04 <MX_GPIO_Init+0x238>)
 8000cda:	f003 fcc5 	bl	8004668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f244 0101 	movw	r1, #16385	; 0x4001
 8000ce4:	4848      	ldr	r0, [pc, #288]	; (8000e08 <MX_GPIO_Init+0x23c>)
 8000ce6:	f003 fcbf 	bl	8004668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2102      	movs	r1, #2
 8000cee:	4847      	ldr	r0, [pc, #284]	; (8000e0c <MX_GPIO_Init+0x240>)
 8000cf0:	f003 fcba 	bl	8004668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d06:	4619      	mov	r1, r3
 8000d08:	4841      	ldr	r0, [pc, #260]	; (8000e10 <MX_GPIO_Init+0x244>)
 8000d0a:	f003 fafd 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d14:	2301      	movs	r3, #1
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d24:	4619      	mov	r1, r3
 8000d26:	4837      	ldr	r0, [pc, #220]	; (8000e04 <MX_GPIO_Init+0x238>)
 8000d28:	f003 faee 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000d2c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d32:	2301      	movs	r3, #1
 8000d34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d42:	4619      	mov	r1, r3
 8000d44:	4830      	ldr	r0, [pc, #192]	; (8000e08 <MX_GPIO_Init+0x23c>)
 8000d46:	f003 fadf 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000d4a:	2380      	movs	r3, #128	; 0x80
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d4e:	4b31      	ldr	r3, [pc, #196]	; (8000e14 <MX_GPIO_Init+0x248>)
 8000d50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	482e      	ldr	r0, [pc, #184]	; (8000e18 <MX_GPIO_Init+0x24c>)
 8000d5e:	f003 fad3 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000d62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d74:	4619      	mov	r1, r3
 8000d76:	4829      	ldr	r0, [pc, #164]	; (8000e1c <MX_GPIO_Init+0x250>)
 8000d78:	f003 fac6 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000d7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	2302      	movs	r3, #2
 8000d84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000d8e:	230a      	movs	r3, #10
 8000d90:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000d92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d96:	4619      	mov	r1, r3
 8000d98:	4820      	ldr	r0, [pc, #128]	; (8000e1c <MX_GPIO_Init+0x250>)
 8000d9a:	f003 fab5 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000d9e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db4:	4619      	mov	r1, r3
 8000db6:	4819      	ldr	r0, [pc, #100]	; (8000e1c <MX_GPIO_Init+0x250>)
 8000db8:	f003 faa6 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dbc:	23c0      	movs	r3, #192	; 0xc0
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dcc:	2307      	movs	r3, #7
 8000dce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	480c      	ldr	r0, [pc, #48]	; (8000e08 <MX_GPIO_Init+0x23c>)
 8000dd8:	f003 fa96 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de0:	2301      	movs	r3, #1
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df0:	4619      	mov	r1, r3
 8000df2:	4806      	ldr	r0, [pc, #24]	; (8000e0c <MX_GPIO_Init+0x240>)
 8000df4:	f003 fa88 	bl	8004308 <HAL_GPIO_Init>

}
 8000df8:	bf00      	nop
 8000dfa:	3738      	adds	r7, #56	; 0x38
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	58024400 	.word	0x58024400
 8000e04:	58021400 	.word	0x58021400
 8000e08:	58020400 	.word	0x58020400
 8000e0c:	58021000 	.word	0x58021000
 8000e10:	58020800 	.word	0x58020800
 8000e14:	11110000 	.word	0x11110000
 8000e18:	58021800 	.word	0x58021800
 8000e1c:	58020000 	.word	0x58020000

08000e20 <HAL_TIM_IC_CaptureCallback>:
//}
//void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac) {
//	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
//}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef * htim) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b090      	sub	sp, #64	; 0x40
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	char uart_buf[50];
	int uart_buf_len;
	timer_val = __HAL_TIM_GET_COUNTER(&htim2) - timer_val;
 8000e28:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <HAL_TIM_IC_CaptureCallback+0x28>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e2e:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0x2c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	4a05      	ldr	r2, [pc, #20]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0x2c>)
 8000e36:	6013      	str	r3, [r2, #0]
//  uart_buf_len = sprintf(uart_buf, "%d us\r\n", timer_val);
//  HAL_UART_Transmit(&huart3, uart_buf, uart_buf_len, 100);
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000e38:	2101      	movs	r1, #1
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <HAL_TIM_IC_CaptureCallback+0x30>)
 8000e3c:	f003 fc2d 	bl	800469a <HAL_GPIO_TogglePin>
}
 8000e40:	bf00      	nop
 8000e42:	3740      	adds	r7, #64	; 0x40
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	24000270 	.word	0x24000270
 8000e4c:	2400026c 	.word	0x2400026c
 8000e50:	58020400 	.word	0x58020400

08000e54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
	...

08000e64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <HAL_MspInit+0x30>)
 8000e6c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000e70:	4a08      	ldr	r2, [pc, #32]	; (8000e94 <HAL_MspInit+0x30>)
 8000e72:	f043 0302 	orr.w	r3, r3, #2
 8000e76:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_MspInit+0x30>)
 8000e7c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	58024400 	.word	0x58024400

08000e98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	; 0x28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a30      	ldr	r2, [pc, #192]	; (8000f78 <HAL_ADC_MspInit+0xe0>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d159      	bne.n	8000f6e <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000eba:	4b30      	ldr	r3, [pc, #192]	; (8000f7c <HAL_ADC_MspInit+0xe4>)
 8000ebc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000ec0:	4a2e      	ldr	r2, [pc, #184]	; (8000f7c <HAL_ADC_MspInit+0xe4>)
 8000ec2:	f043 0320 	orr.w	r3, r3, #32
 8000ec6:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000eca:	4b2c      	ldr	r3, [pc, #176]	; (8000f7c <HAL_ADC_MspInit+0xe4>)
 8000ecc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000ed0:	f003 0320 	and.w	r3, r3, #32
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed8:	4b28      	ldr	r3, [pc, #160]	; (8000f7c <HAL_ADC_MspInit+0xe4>)
 8000eda:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ede:	4a27      	ldr	r2, [pc, #156]	; (8000f7c <HAL_ADC_MspInit+0xe4>)
 8000ee0:	f043 0302 	orr.w	r3, r3, #2
 8000ee4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ee8:	4b24      	ldr	r3, [pc, #144]	; (8000f7c <HAL_ADC_MspInit+0xe4>)
 8000eea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000efa:	2303      	movs	r3, #3
 8000efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4619      	mov	r1, r3
 8000f08:	481d      	ldr	r0, [pc, #116]	; (8000f80 <HAL_ADC_MspInit+0xe8>)
 8000f0a:	f003 f9fd 	bl	8004308 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000f0e:	4b1d      	ldr	r3, [pc, #116]	; (8000f84 <HAL_ADC_MspInit+0xec>)
 8000f10:	4a1d      	ldr	r2, [pc, #116]	; (8000f88 <HAL_ADC_MspInit+0xf0>)
 8000f12:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f14:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <HAL_ADC_MspInit+0xec>)
 8000f16:	2209      	movs	r2, #9
 8000f18:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f1a:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <HAL_ADC_MspInit+0xec>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f20:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <HAL_ADC_MspInit+0xec>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f26:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <HAL_ADC_MspInit+0xec>)
 8000f28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f2c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <HAL_ADC_MspInit+0xec>)
 8000f30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f34:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f36:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <HAL_ADC_MspInit+0xec>)
 8000f38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f3c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f3e:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <HAL_ADC_MspInit+0xec>)
 8000f40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f44:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f46:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <HAL_ADC_MspInit+0xec>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f4c:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <HAL_ADC_MspInit+0xec>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f52:	480c      	ldr	r0, [pc, #48]	; (8000f84 <HAL_ADC_MspInit+0xec>)
 8000f54:	f001 fcaa 	bl	80028ac <HAL_DMA_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_ADC_MspInit+0xca>
    {
      Error_Handler();
 8000f5e:	f7ff ff79 	bl	8000e54 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a07      	ldr	r2, [pc, #28]	; (8000f84 <HAL_ADC_MspInit+0xec>)
 8000f66:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f68:	4a06      	ldr	r2, [pc, #24]	; (8000f84 <HAL_ADC_MspInit+0xec>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f6e:	bf00      	nop
 8000f70:	3728      	adds	r7, #40	; 0x28
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40022000 	.word	0x40022000
 8000f7c:	58024400 	.word	0x58024400
 8000f80:	58020400 	.word	0x58020400
 8000f84:	240001a8 	.word	0x240001a8
 8000f88:	40020010 	.word	0x40020010

08000f8c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a30      	ldr	r2, [pc, #192]	; (800106c <HAL_DAC_MspInit+0xe0>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d159      	bne.n	8001062 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000fae:	4b30      	ldr	r3, [pc, #192]	; (8001070 <HAL_DAC_MspInit+0xe4>)
 8000fb0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000fb4:	4a2e      	ldr	r2, [pc, #184]	; (8001070 <HAL_DAC_MspInit+0xe4>)
 8000fb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000fba:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000fbe:	4b2c      	ldr	r3, [pc, #176]	; (8001070 <HAL_DAC_MspInit+0xe4>)
 8000fc0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000fc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fcc:	4b28      	ldr	r3, [pc, #160]	; (8001070 <HAL_DAC_MspInit+0xe4>)
 8000fce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fd2:	4a27      	ldr	r2, [pc, #156]	; (8001070 <HAL_DAC_MspInit+0xe4>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fdc:	4b24      	ldr	r3, [pc, #144]	; (8001070 <HAL_DAC_MspInit+0xe4>)
 8000fde:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fea:	2310      	movs	r3, #16
 8000fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	481d      	ldr	r0, [pc, #116]	; (8001074 <HAL_DAC_MspInit+0xe8>)
 8000ffe:	f003 f983 	bl	8004308 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA2_Stream0;
 8001002:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <HAL_DAC_MspInit+0xec>)
 8001004:	4a1d      	ldr	r2, [pc, #116]	; (800107c <HAL_DAC_MspInit+0xf0>)
 8001006:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001008:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <HAL_DAC_MspInit+0xec>)
 800100a:	2243      	movs	r2, #67	; 0x43
 800100c:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800100e:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <HAL_DAC_MspInit+0xec>)
 8001010:	2240      	movs	r2, #64	; 0x40
 8001012:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001014:	4b18      	ldr	r3, [pc, #96]	; (8001078 <HAL_DAC_MspInit+0xec>)
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800101a:	4b17      	ldr	r3, [pc, #92]	; (8001078 <HAL_DAC_MspInit+0xec>)
 800101c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001020:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <HAL_DAC_MspInit+0xec>)
 8001024:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001028:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800102a:	4b13      	ldr	r3, [pc, #76]	; (8001078 <HAL_DAC_MspInit+0xec>)
 800102c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001030:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001032:	4b11      	ldr	r3, [pc, #68]	; (8001078 <HAL_DAC_MspInit+0xec>)
 8001034:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001038:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800103a:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <HAL_DAC_MspInit+0xec>)
 800103c:	2200      	movs	r2, #0
 800103e:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001040:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <HAL_DAC_MspInit+0xec>)
 8001042:	2200      	movs	r2, #0
 8001044:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001046:	480c      	ldr	r0, [pc, #48]	; (8001078 <HAL_DAC_MspInit+0xec>)
 8001048:	f001 fc30 	bl	80028ac <HAL_DMA_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001052:	f7ff feff 	bl	8000e54 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a07      	ldr	r2, [pc, #28]	; (8001078 <HAL_DAC_MspInit+0xec>)
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	4a06      	ldr	r2, [pc, #24]	; (8001078 <HAL_DAC_MspInit+0xec>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001062:	bf00      	nop
 8001064:	3728      	adds	r7, #40	; 0x28
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40007400 	.word	0x40007400
 8001070:	58024400 	.word	0x58024400
 8001074:	58020000 	.word	0x58020000
 8001078:	240000cc 	.word	0x240000cc
 800107c:	40020410 	.word	0x40020410

08001080 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08a      	sub	sp, #40	; 0x28
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010a0:	d136      	bne.n	8001110 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010a2:	4b27      	ldr	r3, [pc, #156]	; (8001140 <HAL_TIM_Base_MspInit+0xc0>)
 80010a4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80010a8:	4a25      	ldr	r2, [pc, #148]	; (8001140 <HAL_TIM_Base_MspInit+0xc0>)
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80010b2:	4b23      	ldr	r3, [pc, #140]	; (8001140 <HAL_TIM_Base_MspInit+0xc0>)
 80010b4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80010b8:	f003 0301 	and.w	r3, r3, #1
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c0:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <HAL_TIM_Base_MspInit+0xc0>)
 80010c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010c6:	4a1e      	ldr	r2, [pc, #120]	; (8001140 <HAL_TIM_Base_MspInit+0xc0>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010d0:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <HAL_TIM_Base_MspInit+0xc0>)
 80010d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010de:	2301      	movs	r3, #1
 80010e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ea:	2300      	movs	r3, #0
 80010ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010ee:	2301      	movs	r3, #1
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	4812      	ldr	r0, [pc, #72]	; (8001144 <HAL_TIM_Base_MspInit+0xc4>)
 80010fa:	f003 f905 	bl	8004308 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2100      	movs	r1, #0
 8001102:	201c      	movs	r0, #28
 8001104:	f001 f9f9 	bl	80024fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001108:	201c      	movs	r0, #28
 800110a:	f001 fa10 	bl	800252e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800110e:	e013      	b.n	8001138 <HAL_TIM_Base_MspInit+0xb8>
  else if(htim_base->Instance==TIM6)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a0c      	ldr	r2, [pc, #48]	; (8001148 <HAL_TIM_Base_MspInit+0xc8>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d10e      	bne.n	8001138 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <HAL_TIM_Base_MspInit+0xc0>)
 800111c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001120:	4a07      	ldr	r2, [pc, #28]	; (8001140 <HAL_TIM_Base_MspInit+0xc0>)
 8001122:	f043 0310 	orr.w	r3, r3, #16
 8001126:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800112a:	4b05      	ldr	r3, [pc, #20]	; (8001140 <HAL_TIM_Base_MspInit+0xc0>)
 800112c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001130:	f003 0310 	and.w	r3, r3, #16
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
}
 8001138:	bf00      	nop
 800113a:	3728      	adds	r7, #40	; 0x28
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	58024400 	.word	0x58024400
 8001144:	58020000 	.word	0x58020000
 8001148:	40001000 	.word	0x40001000

0800114c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	; 0x28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a1a      	ldr	r2, [pc, #104]	; (80011d4 <HAL_UART_MspInit+0x88>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d12e      	bne.n	80011cc <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800116e:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <HAL_UART_MspInit+0x8c>)
 8001170:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001174:	4a18      	ldr	r2, [pc, #96]	; (80011d8 <HAL_UART_MspInit+0x8c>)
 8001176:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800117a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800117e:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <HAL_UART_MspInit+0x8c>)
 8001180:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001184:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <HAL_UART_MspInit+0x8c>)
 800118e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001192:	4a11      	ldr	r2, [pc, #68]	; (80011d8 <HAL_UART_MspInit+0x8c>)
 8001194:	f043 0308 	orr.w	r3, r3, #8
 8001198:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800119c:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <HAL_UART_MspInit+0x8c>)
 800119e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011a2:	f003 0308 	and.w	r3, r3, #8
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80011aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011bc:	2307      	movs	r3, #7
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	4619      	mov	r1, r3
 80011c6:	4805      	ldr	r0, [pc, #20]	; (80011dc <HAL_UART_MspInit+0x90>)
 80011c8:	f003 f89e 	bl	8004308 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011cc:	bf00      	nop
 80011ce:	3728      	adds	r7, #40	; 0x28
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40004800 	.word	0x40004800
 80011d8:	58024400 	.word	0x58024400
 80011dc:	58020c00 	.word	0x58020c00

080011e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f2:	e7fe      	b.n	80011f2 <HardFault_Handler+0x4>

080011f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <MemManage_Handler+0x4>

080011fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011fe:	e7fe      	b.n	80011fe <BusFault_Handler+0x4>

08001200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <UsageFault_Handler+0x4>

08001206 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001234:	f000 f938 	bl	80014a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}

0800123c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001240:	4802      	ldr	r0, [pc, #8]	; (800124c <DMA1_Stream0_IRQHandler+0x10>)
 8001242:	f001 fec3 	bl	8002fcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	240001a8 	.word	0x240001a8

08001250 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001254:	4802      	ldr	r0, [pc, #8]	; (8001260 <TIM2_IRQHandler+0x10>)
 8001256:	f006 fa29 	bl	80076ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	24000270 	.word	0x24000270

08001264 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <DMA2_Stream0_IRQHandler+0x10>)
 800126a:	f001 feaf 	bl	8002fcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	240000cc 	.word	0x240000cc

08001278 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800127c:	4b34      	ldr	r3, [pc, #208]	; (8001350 <SystemInit+0xd8>)
 800127e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001282:	4a33      	ldr	r2, [pc, #204]	; (8001350 <SystemInit+0xd8>)
 8001284:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001288:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800128c:	4b31      	ldr	r3, [pc, #196]	; (8001354 <SystemInit+0xdc>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 030f 	and.w	r3, r3, #15
 8001294:	2b02      	cmp	r3, #2
 8001296:	d807      	bhi.n	80012a8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001298:	4b2e      	ldr	r3, [pc, #184]	; (8001354 <SystemInit+0xdc>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f023 030f 	bic.w	r3, r3, #15
 80012a0:	4a2c      	ldr	r2, [pc, #176]	; (8001354 <SystemInit+0xdc>)
 80012a2:	f043 0303 	orr.w	r3, r3, #3
 80012a6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80012a8:	4b2b      	ldr	r3, [pc, #172]	; (8001358 <SystemInit+0xe0>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a2a      	ldr	r2, [pc, #168]	; (8001358 <SystemInit+0xe0>)
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012b4:	4b28      	ldr	r3, [pc, #160]	; (8001358 <SystemInit+0xe0>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80012ba:	4b27      	ldr	r3, [pc, #156]	; (8001358 <SystemInit+0xe0>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	4926      	ldr	r1, [pc, #152]	; (8001358 <SystemInit+0xe0>)
 80012c0:	4b26      	ldr	r3, [pc, #152]	; (800135c <SystemInit+0xe4>)
 80012c2:	4013      	ands	r3, r2
 80012c4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012c6:	4b23      	ldr	r3, [pc, #140]	; (8001354 <SystemInit+0xdc>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	2b03      	cmp	r3, #3
 80012d0:	d907      	bls.n	80012e2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012d2:	4b20      	ldr	r3, [pc, #128]	; (8001354 <SystemInit+0xdc>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f023 030f 	bic.w	r3, r3, #15
 80012da:	4a1e      	ldr	r2, [pc, #120]	; (8001354 <SystemInit+0xdc>)
 80012dc:	f043 0303 	orr.w	r3, r3, #3
 80012e0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80012e2:	4b1d      	ldr	r3, [pc, #116]	; (8001358 <SystemInit+0xe0>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80012e8:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <SystemInit+0xe0>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80012ee:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <SystemInit+0xe0>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80012f4:	4b18      	ldr	r3, [pc, #96]	; (8001358 <SystemInit+0xe0>)
 80012f6:	4a1a      	ldr	r2, [pc, #104]	; (8001360 <SystemInit+0xe8>)
 80012f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80012fa:	4b17      	ldr	r3, [pc, #92]	; (8001358 <SystemInit+0xe0>)
 80012fc:	4a19      	ldr	r2, [pc, #100]	; (8001364 <SystemInit+0xec>)
 80012fe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001300:	4b15      	ldr	r3, [pc, #84]	; (8001358 <SystemInit+0xe0>)
 8001302:	4a19      	ldr	r2, [pc, #100]	; (8001368 <SystemInit+0xf0>)
 8001304:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001306:	4b14      	ldr	r3, [pc, #80]	; (8001358 <SystemInit+0xe0>)
 8001308:	2200      	movs	r2, #0
 800130a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <SystemInit+0xe0>)
 800130e:	4a16      	ldr	r2, [pc, #88]	; (8001368 <SystemInit+0xf0>)
 8001310:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <SystemInit+0xe0>)
 8001314:	2200      	movs	r2, #0
 8001316:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001318:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <SystemInit+0xe0>)
 800131a:	4a13      	ldr	r2, [pc, #76]	; (8001368 <SystemInit+0xf0>)
 800131c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <SystemInit+0xe0>)
 8001320:	2200      	movs	r2, #0
 8001322:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <SystemInit+0xe0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a0b      	ldr	r2, [pc, #44]	; (8001358 <SystemInit+0xe0>)
 800132a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800132e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <SystemInit+0xe0>)
 8001332:	2200      	movs	r2, #0
 8001334:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001336:	4b0d      	ldr	r3, [pc, #52]	; (800136c <SystemInit+0xf4>)
 8001338:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800133c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800133e:	4b04      	ldr	r3, [pc, #16]	; (8001350 <SystemInit+0xd8>)
 8001340:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001344:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001346:	bf00      	nop
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000ed00 	.word	0xe000ed00
 8001354:	52002000 	.word	0x52002000
 8001358:	58024400 	.word	0x58024400
 800135c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001360:	02020200 	.word	0x02020200
 8001364:	01ff0000 	.word	0x01ff0000
 8001368:	01010280 	.word	0x01010280
 800136c:	52004000 	.word	0x52004000

08001370 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001370:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013a8 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001374:	f7ff ff80 	bl	8001278 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001378:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800137a:	e003      	b.n	8001384 <LoopCopyDataInit>

0800137c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800137e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001380:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001382:	3104      	adds	r1, #4

08001384 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001384:	480a      	ldr	r0, [pc, #40]	; (80013b0 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001388:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800138a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800138c:	d3f6      	bcc.n	800137c <CopyDataInit>
  ldr  r2, =_sbss
 800138e:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001390:	e002      	b.n	8001398 <LoopFillZerobss>

08001392 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001392:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001394:	f842 3b04 	str.w	r3, [r2], #4

08001398 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001398:	4b08      	ldr	r3, [pc, #32]	; (80013bc <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800139a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800139c:	d3f9      	bcc.n	8001392 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800139e:	f008 f979 	bl	8009694 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013a2:	f7ff f923 	bl	80005ec <main>
  bx  lr
 80013a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013a8:	24100000 	.word	0x24100000
  ldr  r3, =_sidata
 80013ac:	08009760 	.word	0x08009760
  ldr  r0, =_sdata
 80013b0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80013b4:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 80013b8:	24000010 	.word	0x24000010
  ldr  r3, = _ebss
 80013bc:	240002c0 	.word	0x240002c0

080013c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013c0:	e7fe      	b.n	80013c0 <ADC_IRQHandler>
	...

080013c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ca:	2003      	movs	r0, #3
 80013cc:	f001 f88a 	bl	80024e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80013d0:	f003 ff76 	bl	80052c0 <HAL_RCC_GetSysClockFreq>
 80013d4:	4601      	mov	r1, r0
 80013d6:	4b15      	ldr	r3, [pc, #84]	; (800142c <HAL_Init+0x68>)
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	0a1b      	lsrs	r3, r3, #8
 80013dc:	f003 030f 	and.w	r3, r3, #15
 80013e0:	4a13      	ldr	r2, [pc, #76]	; (8001430 <HAL_Init+0x6c>)
 80013e2:	5cd3      	ldrb	r3, [r2, r3]
 80013e4:	f003 031f 	and.w	r3, r3, #31
 80013e8:	fa21 f303 	lsr.w	r3, r1, r3
 80013ec:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80013ee:	4b0f      	ldr	r3, [pc, #60]	; (800142c <HAL_Init+0x68>)
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	4a0e      	ldr	r2, [pc, #56]	; (8001430 <HAL_Init+0x6c>)
 80013f8:	5cd3      	ldrb	r3, [r2, r3]
 80013fa:	f003 031f 	and.w	r3, r3, #31
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	fa22 f303 	lsr.w	r3, r2, r3
 8001404:	4a0b      	ldr	r2, [pc, #44]	; (8001434 <HAL_Init+0x70>)
 8001406:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001408:	4a0b      	ldr	r2, [pc, #44]	; (8001438 <HAL_Init+0x74>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800140e:	2000      	movs	r0, #0
 8001410:	f000 f814 	bl	800143c <HAL_InitTick>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e002      	b.n	8001424 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800141e:	f7ff fd21 	bl	8000e64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001422:	2300      	movs	r3, #0
}
 8001424:	4618      	mov	r0, r3
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	58024400 	.word	0x58024400
 8001430:	08009720 	.word	0x08009720
 8001434:	24000004 	.word	0x24000004
 8001438:	24000000 	.word	0x24000000

0800143c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001444:	4b15      	ldr	r3, [pc, #84]	; (800149c <HAL_InitTick+0x60>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d101      	bne.n	8001450 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e021      	b.n	8001494 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001450:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <HAL_InitTick+0x64>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <HAL_InitTick+0x60>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4619      	mov	r1, r3
 800145a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800145e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001462:	fbb2 f3f3 	udiv	r3, r2, r3
 8001466:	4618      	mov	r0, r3
 8001468:	f001 f86f 	bl	800254a <HAL_SYSTICK_Config>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e00e      	b.n	8001494 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b0f      	cmp	r3, #15
 800147a:	d80a      	bhi.n	8001492 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800147c:	2200      	movs	r2, #0
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	f04f 30ff 	mov.w	r0, #4294967295
 8001484:	f001 f839 	bl	80024fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001488:	4a06      	ldr	r2, [pc, #24]	; (80014a4 <HAL_InitTick+0x68>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800148e:	2300      	movs	r3, #0
 8001490:	e000      	b.n	8001494 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	2400000c 	.word	0x2400000c
 80014a0:	24000000 	.word	0x24000000
 80014a4:	24000008 	.word	0x24000008

080014a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <HAL_IncTick+0x20>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <HAL_IncTick+0x24>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4413      	add	r3, r2
 80014b8:	4a04      	ldr	r2, [pc, #16]	; (80014cc <HAL_IncTick+0x24>)
 80014ba:	6013      	str	r3, [r2, #0]
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	2400000c 	.word	0x2400000c
 80014cc:	240002bc 	.word	0x240002bc

080014d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return uwTick;
 80014d4:	4b03      	ldr	r3, [pc, #12]	; (80014e4 <HAL_GetTick+0x14>)
 80014d6:	681b      	ldr	r3, [r3, #0]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	240002bc 	.word	0x240002bc

080014e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f0:	f7ff ffee 	bl	80014d0 <HAL_GetTick>
 80014f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001500:	d005      	beq.n	800150e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001502:	4b09      	ldr	r3, [pc, #36]	; (8001528 <HAL_Delay+0x40>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	461a      	mov	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4413      	add	r3, r2
 800150c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800150e:	bf00      	nop
 8001510:	f7ff ffde 	bl	80014d0 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	429a      	cmp	r2, r3
 800151e:	d8f7      	bhi.n	8001510 <HAL_Delay+0x28>
  {
  }
}
 8001520:	bf00      	nop
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	2400000c 	.word	0x2400000c

0800152c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	431a      	orrs	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	609a      	str	r2, [r3, #8]
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
 800155a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	431a      	orrs	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	609a      	str	r2, [r3, #8]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001588:	4618      	mov	r0, r3
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001594:	b480      	push	{r7}
 8001596:	b087      	sub	sp, #28
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
 80015a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	3360      	adds	r3, #96	; 0x60
 80015a6:	461a      	mov	r2, r3
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	430b      	orrs	r3, r1
 80015c2:	431a      	orrs	r2, r3
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80015c8:	bf00      	nop
 80015ca:	371c      	adds	r7, #28
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	f003 031f 	and.w	r3, r3, #31
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	fa01 f303 	lsl.w	r3, r1, r3
 80015f4:	431a      	orrs	r2, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	611a      	str	r2, [r3, #16]
}
 80015fa:	bf00      	nop
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001606:	b480      	push	{r7}
 8001608:	b087      	sub	sp, #28
 800160a:	af00      	add	r7, sp, #0
 800160c:	60f8      	str	r0, [r7, #12]
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	3360      	adds	r3, #96	; 0x60
 8001616:	461a      	mov	r2, r3
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	431a      	orrs	r2, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	601a      	str	r2, [r3, #0]
  }
}
 8001630:	bf00      	nop
 8001632:	371c      	adds	r7, #28
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800163c:	b480      	push	{r7}
 800163e:	b087      	sub	sp, #28
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	3330      	adds	r3, #48	; 0x30
 800164c:	461a      	mov	r2, r3
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	0a1b      	lsrs	r3, r3, #8
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	f003 030c 	and.w	r3, r3, #12
 8001658:	4413      	add	r3, r2
 800165a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	f003 031f 	and.w	r3, r3, #31
 8001666:	211f      	movs	r1, #31
 8001668:	fa01 f303 	lsl.w	r3, r1, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	401a      	ands	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	0e9b      	lsrs	r3, r3, #26
 8001674:	f003 011f 	and.w	r1, r3, #31
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	f003 031f 	and.w	r3, r3, #31
 800167e:	fa01 f303 	lsl.w	r3, r1, r3
 8001682:	431a      	orrs	r2, r3
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001688:	bf00      	nop
 800168a:	371c      	adds	r7, #28
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001694:	b480      	push	{r7}
 8001696:	b087      	sub	sp, #28
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	3314      	adds	r3, #20
 80016a4:	461a      	mov	r2, r3
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	0e5b      	lsrs	r3, r3, #25
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	4413      	add	r3, r2
 80016b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	0d1b      	lsrs	r3, r3, #20
 80016bc:	f003 031f 	and.w	r3, r3, #31
 80016c0:	2107      	movs	r1, #7
 80016c2:	fa01 f303 	lsl.w	r3, r1, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	401a      	ands	r2, r3
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	0d1b      	lsrs	r3, r3, #20
 80016ce:	f003 031f 	and.w	r3, r3, #31
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	fa01 f303 	lsl.w	r3, r1, r3
 80016d8:	431a      	orrs	r2, r3
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016de:	bf00      	nop
 80016e0:	371c      	adds	r7, #28
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001704:	43db      	mvns	r3, r3
 8001706:	401a      	ands	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f003 0318 	and.w	r3, r3, #24
 800170e:	4908      	ldr	r1, [pc, #32]	; (8001730 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001710:	40d9      	lsrs	r1, r3
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	400b      	ands	r3, r1
 8001716:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800171a:	431a      	orrs	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001722:	bf00      	nop
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	000fffff 	.word	0x000fffff

08001734 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	4b04      	ldr	r3, [pc, #16]	; (8001754 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001742:	4013      	ands	r3, r2
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6093      	str	r3, [r2, #8]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	5fffffc0 	.word	0x5fffffc0

08001758 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001768:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800176c:	d101      	bne.n	8001772 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800176e:	2301      	movs	r3, #1
 8001770:	e000      	b.n	8001774 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <LL_ADC_EnableInternalRegulator+0x24>)
 800178e:	4013      	ands	r3, r2
 8001790:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	6fffffc0 	.word	0x6fffffc0

080017a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80017bc:	d101      	bne.n	80017c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d101      	bne.n	80017e8 <LL_ADC_IsEnabled+0x18>
 80017e4:	2301      	movs	r3, #1
 80017e6:	e000      	b.n	80017ea <LL_ADC_IsEnabled+0x1a>
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	2b04      	cmp	r3, #4
 8001808:	d101      	bne.n	800180e <LL_ADC_REG_IsConversionOngoing+0x18>
 800180a:	2301      	movs	r3, #1
 800180c:	e000      	b.n	8001810 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 0308 	and.w	r3, r3, #8
 800182c:	2b08      	cmp	r3, #8
 800182e:	d101      	bne.n	8001834 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001830:	2301      	movs	r3, #1
 8001832:	e000      	b.n	8001836 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
	...

08001844 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b089      	sub	sp, #36	; 0x24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800184c:	2300      	movs	r3, #0
 800184e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001850:	2300      	movs	r3, #0
 8001852:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e137      	b.n	8001ace <HAL_ADC_Init+0x28a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001868:	2b00      	cmp	r3, #0
 800186a:	d109      	bne.n	8001880 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff fb13 	bl	8000e98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff67 	bl	8001758 <LL_ADC_IsDeepPowerDownEnabled>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d004      	beq.n	800189a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff4d 	bl	8001734 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff ff82 	bl	80017a8 <LL_ADC_IsInternalRegulatorEnabled>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d113      	bne.n	80018d2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff ff66 	bl	8001780 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80018b4:	4b88      	ldr	r3, [pc, #544]	; (8001ad8 <HAL_ADC_Init+0x294>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	099b      	lsrs	r3, r3, #6
 80018ba:	4a88      	ldr	r2, [pc, #544]	; (8001adc <HAL_ADC_Init+0x298>)
 80018bc:	fba2 2303 	umull	r2, r3, r2, r3
 80018c0:	099b      	lsrs	r3, r3, #6
 80018c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018c4:	e002      	b.n	80018cc <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	3b01      	subs	r3, #1
 80018ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f9      	bne.n	80018c6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff ff66 	bl	80017a8 <LL_ADC_IsInternalRegulatorEnabled>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d10d      	bne.n	80018fe <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e6:	f043 0210 	orr.w	r2, r3, #16
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f2:	f043 0201 	orr.w	r2, r3, #1
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff ff77 	bl	80017f6 <LL_ADC_REG_IsConversionOngoing>
 8001908:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800190e:	f003 0310 	and.w	r3, r3, #16
 8001912:	2b00      	cmp	r3, #0
 8001914:	f040 80d2 	bne.w	8001abc <HAL_ADC_Init+0x278>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	2b00      	cmp	r3, #0
 800191c:	f040 80ce 	bne.w	8001abc <HAL_ADC_Init+0x278>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001924:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001928:	f043 0202 	orr.w	r2, r3, #2
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff ff4b 	bl	80017d0 <LL_ADC_IsEnabled>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d110      	bne.n	8001962 <HAL_ADC_Init+0x11e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001940:	4867      	ldr	r0, [pc, #412]	; (8001ae0 <HAL_ADC_Init+0x29c>)
 8001942:	f7ff ff45 	bl	80017d0 <LL_ADC_IsEnabled>
 8001946:	4604      	mov	r4, r0
 8001948:	4866      	ldr	r0, [pc, #408]	; (8001ae4 <HAL_ADC_Init+0x2a0>)
 800194a:	f7ff ff41 	bl	80017d0 <LL_ADC_IsEnabled>
 800194e:	4603      	mov	r3, r0
 8001950:	4323      	orrs	r3, r4
 8001952:	2b00      	cmp	r3, #0
 8001954:	d105      	bne.n	8001962 <HAL_ADC_Init+0x11e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	4619      	mov	r1, r3
 800195c:	4862      	ldr	r0, [pc, #392]	; (8001ae8 <HAL_ADC_Init+0x2a4>)
 800195e:	f7ff fde5 	bl	800152c <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	7d5b      	ldrb	r3, [r3, #21]
 8001966:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800196c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001972:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	7f1b      	ldrb	r3, [r3, #28]
 8001978:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	7f1b      	ldrb	r3, [r3, #28]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d106      	bne.n	8001994 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a1b      	ldr	r3, [r3, #32]
 800198a:	3b01      	subs	r3, #1
 800198c:	045b      	lsls	r3, r3, #17
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4313      	orrs	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001998:	2b00      	cmp	r3, #0
 800199a:	d009      	beq.n	80019b0 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68da      	ldr	r2, [r3, #12]
 80019b6:	4b4d      	ldr	r3, [pc, #308]	; (8001aec <HAL_ADC_Init+0x2a8>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6812      	ldr	r2, [r2, #0]
 80019be:	69b9      	ldr	r1, [r7, #24]
 80019c0:	430b      	orrs	r3, r1
 80019c2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff ff14 	bl	80017f6 <LL_ADC_REG_IsConversionOngoing>
 80019ce:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff ff21 	bl	800181c <LL_ADC_INJ_IsConversionOngoing>
 80019da:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d14a      	bne.n	8001a78 <HAL_ADC_Init+0x234>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d147      	bne.n	8001a78 <HAL_ADC_Init+0x234>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	7d1b      	ldrb	r3, [r3, #20]
 80019ec:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68da      	ldr	r2, [r3, #12]
 80019fc:	4b3c      	ldr	r3, [pc, #240]	; (8001af0 <HAL_ADC_Init+0x2ac>)
 80019fe:	4013      	ands	r3, r2
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	69b9      	ldr	r1, [r7, #24]
 8001a06:	430b      	orrs	r3, r1
 8001a08:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d11b      	bne.n	8001a4c <HAL_ADC_Init+0x208>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a18:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	691a      	ldr	r2, [r3, #16]
 8001a20:	4b34      	ldr	r3, [pc, #208]	; (8001af4 <HAL_ADC_Init+0x2b0>)
 8001a22:	4013      	ands	r3, r2
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a28:	3a01      	subs	r2, #1
 8001a2a:	0411      	lsls	r1, r2, #16
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a30:	4311      	orrs	r1, r2
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a36:	4311      	orrs	r1, r2
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f042 0201 	orr.w	r2, r2, #1
 8001a48:	611a      	str	r2, [r3, #16]
 8001a4a:	e007      	b.n	8001a5c <HAL_ADC_Init+0x218>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	691a      	ldr	r2, [r3, #16]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0201 	bic.w	r2, r2, #1
 8001a5a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 faee 	bl	8002054 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d10c      	bne.n	8001a9a <HAL_ADC_Init+0x256>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f023 010f 	bic.w	r1, r3, #15
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	1e5a      	subs	r2, r3, #1
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	631a      	str	r2, [r3, #48]	; 0x30
 8001a98:	e007      	b.n	8001aaa <HAL_ADC_Init+0x266>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 020f 	bic.w	r2, r2, #15
 8001aa8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aae:	f023 0303 	bic.w	r3, r3, #3
 8001ab2:	f043 0201 	orr.w	r2, r3, #1
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	655a      	str	r2, [r3, #84]	; 0x54
 8001aba:	e007      	b.n	8001acc <HAL_ADC_Init+0x288>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac0:	f043 0210 	orr.w	r2, r3, #16
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001acc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3724      	adds	r7, #36	; 0x24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd90      	pop	{r4, r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	24000000 	.word	0x24000000
 8001adc:	053e2d63 	.word	0x053e2d63
 8001ae0:	40022000 	.word	0x40022000
 8001ae4:	40022100 	.word	0x40022100
 8001ae8:	40022300 	.word	0x40022300
 8001aec:	fff0c003 	.word	0xfff0c003
 8001af0:	ffffbffc 	.word	0xffffbffc
 8001af4:	fc00f81e 	.word	0xfc00f81e

08001af8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001af8:	b590      	push	{r4, r7, lr}
 8001afa:	b099      	sub	sp, #100	; 0x64
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b02:	2300      	movs	r3, #0
 8001b04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	4aa1      	ldr	r2, [pc, #644]	; (8001d98 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b12:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d101      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x2a>
 8001b1e:	2302      	movs	r3, #2
 8001b20:	e283      	b.n	800202a <HAL_ADC_ConfigChannel+0x532>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fe61 	bl	80017f6 <LL_ADC_REG_IsConversionOngoing>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f040 8268 	bne.w	800200c <HAL_ADC_ConfigChannel+0x514>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d108      	bne.n	8001b5a <HAL_ADC_ConfigChannel+0x62>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	0e9b      	lsrs	r3, r3, #26
 8001b4e:	f003 031f 	and.w	r3, r3, #31
 8001b52:	2201      	movs	r2, #1
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	e00f      	b.n	8001b7a <HAL_ADC_ConfigChannel+0x82>
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b62:	fa93 f3a3 	rbit	r3, r3
 8001b66:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b6a:	fab3 f383 	clz	r3, r3
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	f003 031f 	and.w	r3, r3, #31
 8001b74:	2201      	movs	r2, #1
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	6812      	ldr	r2, [r2, #0]
 8001b7e:	69d1      	ldr	r1, [r2, #28]
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	430b      	orrs	r3, r1
 8001b86:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6818      	ldr	r0, [r3, #0]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	6859      	ldr	r1, [r3, #4]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	461a      	mov	r2, r3
 8001b96:	f7ff fd51 	bl	800163c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff fe29 	bl	80017f6 <LL_ADC_REG_IsConversionOngoing>
 8001ba4:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff fe36 	bl	800181c <LL_ADC_INJ_IsConversionOngoing>
 8001bb0:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f040 80a0 	bne.w	8001cfa <HAL_ADC_ConfigChannel+0x202>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f040 809c 	bne.w	8001cfa <HAL_ADC_ConfigChannel+0x202>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6818      	ldr	r0, [r3, #0]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	6819      	ldr	r1, [r3, #0]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	f7ff fd60 	bl	8001694 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	f003 0310 	and.w	r3, r3, #16
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10b      	bne.n	8001bfa <HAL_ADC_ConfigChannel+0x102>
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	695a      	ldr	r2, [r3, #20]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	089b      	lsrs	r3, r3, #2
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	e00a      	b.n	8001c10 <HAL_ADC_ConfigChannel+0x118>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	695a      	ldr	r2, [r3, #20]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	089b      	lsrs	r3, r3, #2
 8001c06:	f003 0304 	and.w	r3, r3, #4
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	d027      	beq.n	8001c6a <HAL_ADC_ConfigChannel+0x172>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6818      	ldr	r0, [r3, #0]
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	6919      	ldr	r1, [r3, #16]
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c28:	f7ff fcb4 	bl	8001594 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6818      	ldr	r0, [r3, #0]
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	6919      	ldr	r1, [r3, #16]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	7e5b      	ldrb	r3, [r3, #25]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d102      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x14a>
 8001c3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001c40:	e000      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x14c>
 8001c42:	2300      	movs	r3, #0
 8001c44:	461a      	mov	r2, r3
 8001c46:	f7ff fcde 	bl	8001606 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6818      	ldr	r0, [r3, #0]
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	6919      	ldr	r1, [r3, #16]
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	7e1b      	ldrb	r3, [r3, #24]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d102      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x168>
 8001c5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c5e:	e000      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x16a>
 8001c60:	2300      	movs	r3, #0
 8001c62:	461a      	mov	r2, r3
 8001c64:	f7ff fcb6 	bl	80015d4 <LL_ADC_SetDataRightShift>
 8001c68:	e047      	b.n	8001cfa <HAL_ADC_ConfigChannel+0x202>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	069b      	lsls	r3, r3, #26
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d107      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x196>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c8c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	069b      	lsls	r3, r3, #26
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d107      	bne.n	8001cb2 <HAL_ADC_ConfigChannel+0x1ba>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cb0:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001cb8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	069b      	lsls	r3, r3, #26
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d107      	bne.n	8001cd6 <HAL_ADC_ConfigChannel+0x1de>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cd4:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cdc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	069b      	lsls	r3, r3, #26
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d107      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x202>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cf8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fd66 	bl	80017d0 <LL_ADC_IsEnabled>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f040 8189 	bne.w	800201e <HAL_ADC_ConfigChannel+0x526>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6818      	ldr	r0, [r3, #0]
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	6819      	ldr	r1, [r3, #0]
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	f7ff fce7 	bl	80016ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	4a1d      	ldr	r2, [pc, #116]	; (8001d98 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	f040 80ff 	bne.w	8001f28 <HAL_ADC_ConfigChannel+0x430>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d10b      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x25a>
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	0e9b      	lsrs	r3, r3, #26
 8001d40:	3301      	adds	r3, #1
 8001d42:	f003 031f 	and.w	r3, r3, #31
 8001d46:	2b09      	cmp	r3, #9
 8001d48:	bf94      	ite	ls
 8001d4a:	2301      	movls	r3, #1
 8001d4c:	2300      	movhi	r3, #0
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	e012      	b.n	8001d78 <HAL_ADC_ConfigChannel+0x280>
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d5a:	fa93 f3a3 	rbit	r3, r3
 8001d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d62:	fab3 f383 	clz	r3, r3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	3301      	adds	r3, #1
 8001d6a:	f003 031f 	and.w	r3, r3, #31
 8001d6e:	2b09      	cmp	r3, #9
 8001d70:	bf94      	ite	ls
 8001d72:	2301      	movls	r3, #1
 8001d74:	2300      	movhi	r3, #0
 8001d76:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d066      	beq.n	8001e4a <HAL_ADC_ConfigChannel+0x352>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d109      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x2a4>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	0e9b      	lsrs	r3, r3, #26
 8001d8e:	3301      	adds	r3, #1
 8001d90:	069b      	lsls	r3, r3, #26
 8001d92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d96:	e010      	b.n	8001dba <HAL_ADC_ConfigChannel+0x2c2>
 8001d98:	47ff0000 	.word	0x47ff0000
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001da4:	fa93 f3a3 	rbit	r3, r3
 8001da8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dac:	fab3 f383 	clz	r3, r3
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	3301      	adds	r3, #1
 8001db4:	069b      	lsls	r3, r3, #26
 8001db6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d109      	bne.n	8001dda <HAL_ADC_ConfigChannel+0x2e2>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	0e9b      	lsrs	r3, r3, #26
 8001dcc:	3301      	adds	r3, #1
 8001dce:	f003 031f 	and.w	r3, r3, #31
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd8:	e010      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x304>
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de2:	fa93 f3a3 	rbit	r3, r3
 8001de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dea:	fab3 f383 	clz	r3, r3
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	3301      	adds	r3, #1
 8001df2:	f003 031f 	and.w	r3, r3, #31
 8001df6:	2101      	movs	r1, #1
 8001df8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfc:	ea42 0103 	orr.w	r1, r2, r3
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d10a      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x32a>
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	0e9b      	lsrs	r3, r3, #26
 8001e12:	3301      	adds	r3, #1
 8001e14:	f003 021f 	and.w	r2, r3, #31
 8001e18:	4613      	mov	r3, r2
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	4413      	add	r3, r2
 8001e1e:	051b      	lsls	r3, r3, #20
 8001e20:	e011      	b.n	8001e46 <HAL_ADC_ConfigChannel+0x34e>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2a:	fa93 f3a3 	rbit	r3, r3
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	fab3 f383 	clz	r3, r3
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	3301      	adds	r3, #1
 8001e3a:	f003 021f 	and.w	r2, r3, #31
 8001e3e:	4613      	mov	r3, r2
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	4413      	add	r3, r2
 8001e44:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e46:	430b      	orrs	r3, r1
 8001e48:	e069      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x426>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d107      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x36e>
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	0e9b      	lsrs	r3, r3, #26
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	069b      	lsls	r3, r3, #26
 8001e60:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e64:	e00e      	b.n	8001e84 <HAL_ADC_ConfigChannel+0x38c>
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6c:	6a3b      	ldr	r3, [r7, #32]
 8001e6e:	fa93 f3a3 	rbit	r3, r3
 8001e72:	61fb      	str	r3, [r7, #28]
  return result;
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	fab3 f383 	clz	r3, r3
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	069b      	lsls	r3, r3, #26
 8001e80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d109      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x3ac>
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	0e9b      	lsrs	r3, r3, #26
 8001e96:	3301      	adds	r3, #1
 8001e98:	f003 031f 	and.w	r3, r3, #31
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea2:	e010      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x3ce>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	fa93 f3a3 	rbit	r3, r3
 8001eb0:	617b      	str	r3, [r7, #20]
  return result;
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	fab3 f383 	clz	r3, r3
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	3301      	adds	r3, #1
 8001ebc:	f003 031f 	and.w	r3, r3, #31
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec6:	ea42 0103 	orr.w	r1, r2, r3
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10d      	bne.n	8001ef2 <HAL_ADC_ConfigChannel+0x3fa>
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	0e9b      	lsrs	r3, r3, #26
 8001edc:	3301      	adds	r3, #1
 8001ede:	f003 021f 	and.w	r2, r3, #31
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3b1e      	subs	r3, #30
 8001eea:	051b      	lsls	r3, r3, #20
 8001eec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ef0:	e014      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x424>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	fa93 f3a3 	rbit	r3, r3
 8001efe:	60fb      	str	r3, [r7, #12]
  return result;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	fab3 f383 	clz	r3, r3
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	3301      	adds	r3, #1
 8001f0a:	f003 021f 	and.w	r2, r3, #31
 8001f0e:	4613      	mov	r3, r2
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	4413      	add	r3, r2
 8001f14:	3b1e      	subs	r3, #30
 8001f16:	051b      	lsls	r3, r3, #20
 8001f18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f1c:	430b      	orrs	r3, r1
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	6892      	ldr	r2, [r2, #8]
 8001f22:	4619      	mov	r1, r3
 8001f24:	f7ff fbb6 	bl	8001694 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	da76      	bge.n	800201e <HAL_ADC_ConfigChannel+0x526>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f30:	4840      	ldr	r0, [pc, #256]	; (8002034 <HAL_ADC_ConfigChannel+0x53c>)
 8001f32:	f7ff fb21 	bl	8001578 <LL_ADC_GetCommonPathInternalCh>
 8001f36:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f38:	483f      	ldr	r0, [pc, #252]	; (8002038 <HAL_ADC_ConfigChannel+0x540>)
 8001f3a:	f7ff fc49 	bl	80017d0 <LL_ADC_IsEnabled>
 8001f3e:	4604      	mov	r4, r0
 8001f40:	483e      	ldr	r0, [pc, #248]	; (800203c <HAL_ADC_ConfigChannel+0x544>)
 8001f42:	f7ff fc45 	bl	80017d0 <LL_ADC_IsEnabled>
 8001f46:	4603      	mov	r3, r0
 8001f48:	4323      	orrs	r3, r4
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d154      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x500>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a3b      	ldr	r2, [pc, #236]	; (8002040 <HAL_ADC_ConfigChannel+0x548>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d121      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x4a4>
 8001f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d11c      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x4a4>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a35      	ldr	r2, [pc, #212]	; (800203c <HAL_ADC_ConfigChannel+0x544>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d158      	bne.n	800201e <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f72:	4619      	mov	r1, r3
 8001f74:	482f      	ldr	r0, [pc, #188]	; (8002034 <HAL_ADC_ConfigChannel+0x53c>)
 8001f76:	f7ff faec 	bl	8001552 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001f7a:	4b32      	ldr	r3, [pc, #200]	; (8002044 <HAL_ADC_ConfigChannel+0x54c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	099b      	lsrs	r3, r3, #6
 8001f80:	4a31      	ldr	r2, [pc, #196]	; (8002048 <HAL_ADC_ConfigChannel+0x550>)
 8001f82:	fba2 2303 	umull	r2, r3, r2, r3
 8001f86:	099b      	lsrs	r3, r3, #6
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001f8c:	e002      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x49c>
              {
                wait_loop_index--;
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	3b01      	subs	r3, #1
 8001f92:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f9      	bne.n	8001f8e <HAL_ADC_ConfigChannel+0x496>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f9a:	e040      	b.n	800201e <HAL_ADC_ConfigChannel+0x526>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a2a      	ldr	r2, [pc, #168]	; (800204c <HAL_ADC_ConfigChannel+0x554>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d111      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x4d2>
 8001fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10c      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x4d2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a21      	ldr	r2, [pc, #132]	; (800203c <HAL_ADC_ConfigChannel+0x544>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d131      	bne.n	800201e <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	481c      	ldr	r0, [pc, #112]	; (8002034 <HAL_ADC_ConfigChannel+0x53c>)
 8001fc4:	f7ff fac5 	bl	8001552 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fc8:	e029      	b.n	800201e <HAL_ADC_ConfigChannel+0x526>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a20      	ldr	r2, [pc, #128]	; (8002050 <HAL_ADC_ConfigChannel+0x558>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d124      	bne.n	800201e <HAL_ADC_ConfigChannel+0x526>
 8001fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d11f      	bne.n	800201e <HAL_ADC_ConfigChannel+0x526>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a16      	ldr	r2, [pc, #88]	; (800203c <HAL_ADC_ConfigChannel+0x544>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d11a      	bne.n	800201e <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4810      	ldr	r0, [pc, #64]	; (8002034 <HAL_ADC_ConfigChannel+0x53c>)
 8001ff2:	f7ff faae 	bl	8001552 <LL_ADC_SetCommonPathInternalCh>
 8001ff6:	e012      	b.n	800201e <HAL_ADC_ConfigChannel+0x526>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffc:	f043 0220 	orr.w	r2, r3, #32
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800200a:	e008      	b.n	800201e <HAL_ADC_ConfigChannel+0x526>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002010:	f043 0220 	orr.w	r2, r3, #32
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002026:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800202a:	4618      	mov	r0, r3
 800202c:	3764      	adds	r7, #100	; 0x64
 800202e:	46bd      	mov	sp, r7
 8002030:	bd90      	pop	{r4, r7, pc}
 8002032:	bf00      	nop
 8002034:	40022300 	.word	0x40022300
 8002038:	40022000 	.word	0x40022000
 800203c:	40022100 	.word	0x40022100
 8002040:	cb840000 	.word	0xcb840000
 8002044:	24000000 	.word	0x24000000
 8002048:	053e2d63 	.word	0x053e2d63
 800204c:	bac04000 	.word	0xbac04000
 8002050:	cfb80000 	.word	0xcfb80000

08002054 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800205c:	4b56      	ldr	r3, [pc, #344]	; (80021b8 <ADC_ConfigureBoostMode+0x164>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d01a      	beq.n	800209e <ADC_ConfigureBoostMode+0x4a>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002068:	f003 fa9c 	bl	80055a4 <HAL_RCC_GetHCLKFreq>
 800206c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002076:	d006      	beq.n	8002086 <ADC_ConfigureBoostMode+0x32>
 8002078:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800207c:	d00b      	beq.n	8002096 <ADC_ConfigureBoostMode+0x42>
 800207e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002082:	d000      	beq.n	8002086 <ADC_ConfigureBoostMode+0x32>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8002084:	e05d      	b.n	8002142 <ADC_ConfigureBoostMode+0xee>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	0c1b      	lsrs	r3, r3, #16
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002092:	60fb      	str	r3, [r7, #12]
        break;
 8002094:	e055      	b.n	8002142 <ADC_ConfigureBoostMode+0xee>
        freq /= 4UL;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	089b      	lsrs	r3, r3, #2
 800209a:	60fb      	str	r3, [r7, #12]
        break;
 800209c:	e051      	b.n	8002142 <ADC_ConfigureBoostMode+0xee>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800209e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80020a2:	f004 f98f 	bl	80063c4 <HAL_RCCEx_GetPeriphCLKFreq>
 80020a6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80020b0:	d02a      	beq.n	8002108 <ADC_ConfigureBoostMode+0xb4>
 80020b2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80020b6:	d813      	bhi.n	80020e0 <ADC_ConfigureBoostMode+0x8c>
 80020b8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80020bc:	d024      	beq.n	8002108 <ADC_ConfigureBoostMode+0xb4>
 80020be:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80020c2:	d806      	bhi.n	80020d2 <ADC_ConfigureBoostMode+0x7e>
 80020c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80020c8:	d01e      	beq.n	8002108 <ADC_ConfigureBoostMode+0xb4>
 80020ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80020ce:	d01b      	beq.n	8002108 <ADC_ConfigureBoostMode+0xb4>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 80020d0:	e037      	b.n	8002142 <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 80020d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020d6:	d017      	beq.n	8002108 <ADC_ConfigureBoostMode+0xb4>
 80020d8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80020dc:	d014      	beq.n	8002108 <ADC_ConfigureBoostMode+0xb4>
        break;
 80020de:	e030      	b.n	8002142 <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 80020e0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80020e4:	d021      	beq.n	800212a <ADC_ConfigureBoostMode+0xd6>
 80020e6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80020ea:	d806      	bhi.n	80020fa <ADC_ConfigureBoostMode+0xa6>
 80020ec:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80020f0:	d013      	beq.n	800211a <ADC_ConfigureBoostMode+0xc6>
 80020f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020f6:	d014      	beq.n	8002122 <ADC_ConfigureBoostMode+0xce>
        break;
 80020f8:	e023      	b.n	8002142 <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 80020fa:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80020fe:	d018      	beq.n	8002132 <ADC_ConfigureBoostMode+0xde>
 8002100:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002104:	d019      	beq.n	800213a <ADC_ConfigureBoostMode+0xe6>
        break;
 8002106:	e01c      	b.n	8002142 <ADC_ConfigureBoostMode+0xee>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	0c9b      	lsrs	r3, r3, #18
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	fbb2 f3f3 	udiv	r3, r2, r3
 8002116:	60fb      	str	r3, [r7, #12]
        break;
 8002118:	e013      	b.n	8002142 <ADC_ConfigureBoostMode+0xee>
        freq /= 16UL;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	091b      	lsrs	r3, r3, #4
 800211e:	60fb      	str	r3, [r7, #12]
        break;
 8002120:	e00f      	b.n	8002142 <ADC_ConfigureBoostMode+0xee>
        freq /= 32UL;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	095b      	lsrs	r3, r3, #5
 8002126:	60fb      	str	r3, [r7, #12]
        break;
 8002128:	e00b      	b.n	8002142 <ADC_ConfigureBoostMode+0xee>
        freq /= 64UL;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	099b      	lsrs	r3, r3, #6
 800212e:	60fb      	str	r3, [r7, #12]
        break;
 8002130:	e007      	b.n	8002142 <ADC_ConfigureBoostMode+0xee>
        freq /= 128UL;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	09db      	lsrs	r3, r3, #7
 8002136:	60fb      	str	r3, [r7, #12]
        break;
 8002138:	e003      	b.n	8002142 <ADC_ConfigureBoostMode+0xee>
        freq /= 256UL;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	0a1b      	lsrs	r3, r3, #8
 800213e:	60fb      	str	r3, [r7, #12]
        break;
 8002140:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	085b      	lsrs	r3, r3, #1
 8002146:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4a1c      	ldr	r2, [pc, #112]	; (80021bc <ADC_ConfigureBoostMode+0x168>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d808      	bhi.n	8002162 <ADC_ConfigureBoostMode+0x10e>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800215e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002160:	e025      	b.n	80021ae <ADC_ConfigureBoostMode+0x15a>
  else if (freq <= 12500000UL)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	4a16      	ldr	r2, [pc, #88]	; (80021c0 <ADC_ConfigureBoostMode+0x16c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d80a      	bhi.n	8002180 <ADC_ConfigureBoostMode+0x12c>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800217c:	609a      	str	r2, [r3, #8]
}
 800217e:	e016      	b.n	80021ae <ADC_ConfigureBoostMode+0x15a>
  else if (freq <= 25000000UL)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4a10      	ldr	r2, [pc, #64]	; (80021c4 <ADC_ConfigureBoostMode+0x170>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d80a      	bhi.n	800219e <ADC_ConfigureBoostMode+0x14a>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800219a:	609a      	str	r2, [r3, #8]
}
 800219c:	e007      	b.n	80021ae <ADC_ConfigureBoostMode+0x15a>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80021ac:	609a      	str	r2, [r3, #8]
}
 80021ae:	bf00      	nop
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40022300 	.word	0x40022300
 80021bc:	005f5e10 	.word	0x005f5e10
 80021c0:	00bebc20 	.word	0x00bebc20
 80021c4:	017d7840 	.word	0x017d7840

080021c8 <LL_ADC_IsEnabled>:
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d101      	bne.n	80021e0 <LL_ADC_IsEnabled+0x18>
 80021dc:	2301      	movs	r3, #1
 80021de:	e000      	b.n	80021e2 <LL_ADC_IsEnabled+0x1a>
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <LL_ADC_REG_IsConversionOngoing>:
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d101      	bne.n	8002206 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002202:	2301      	movs	r3, #1
 8002204:	e000      	b.n	8002208 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002214:	b590      	push	{r4, r7, lr}
 8002216:	b09f      	sub	sp, #124	; 0x7c
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800221e:	2300      	movs	r3, #0
 8002220:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800222a:	2b01      	cmp	r3, #1
 800222c:	d101      	bne.n	8002232 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800222e:	2302      	movs	r3, #2
 8002230:	e07c      	b.n	800232c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a3d      	ldr	r2, [pc, #244]	; (8002334 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d102      	bne.n	800224a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002244:	4b3c      	ldr	r3, [pc, #240]	; (8002338 <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 8002246:	60bb      	str	r3, [r7, #8]
 8002248:	e001      	b.n	800224e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800224a:	2300      	movs	r3, #0
 800224c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10b      	bne.n	800226c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002258:	f043 0220 	orr.w	r2, r3, #32
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e05f      	b.n	800232c <HAL_ADCEx_MultiModeConfigChannel+0x118>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff ffbd 	bl	80021ee <LL_ADC_REG_IsConversionOngoing>
 8002274:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff ffb7 	bl	80021ee <LL_ADC_REG_IsConversionOngoing>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d141      	bne.n	800230a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002286:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002288:	2b00      	cmp	r3, #0
 800228a:	d13e      	bne.n	800230a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800228c:	4b2b      	ldr	r3, [pc, #172]	; (800233c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 800228e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d020      	beq.n	80022da <HAL_ADCEx_MultiModeConfigChannel+0xc6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	431a      	orrs	r2, r3
 80022a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022a8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022aa:	4822      	ldr	r0, [pc, #136]	; (8002334 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 80022ac:	f7ff ff8c 	bl	80021c8 <LL_ADC_IsEnabled>
 80022b0:	4604      	mov	r4, r0
 80022b2:	4821      	ldr	r0, [pc, #132]	; (8002338 <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 80022b4:	f7ff ff88 	bl	80021c8 <LL_ADC_IsEnabled>
 80022b8:	4603      	mov	r3, r0
 80022ba:	4323      	orrs	r3, r4
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d12e      	bne.n	800231e <HAL_ADCEx_MultiModeConfigChannel+0x10a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80022c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	4b1e      	ldr	r3, [pc, #120]	; (8002340 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80022c6:	4013      	ands	r3, r2
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	6811      	ldr	r1, [r2, #0]
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	6892      	ldr	r2, [r2, #8]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	431a      	orrs	r2, r3
 80022d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022d6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80022d8:	e021      	b.n	800231e <HAL_ADCEx_MultiModeConfigChannel+0x10a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80022da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022e4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022e6:	4813      	ldr	r0, [pc, #76]	; (8002334 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 80022e8:	f7ff ff6e 	bl	80021c8 <LL_ADC_IsEnabled>
 80022ec:	4604      	mov	r4, r0
 80022ee:	4812      	ldr	r0, [pc, #72]	; (8002338 <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 80022f0:	f7ff ff6a 	bl	80021c8 <LL_ADC_IsEnabled>
 80022f4:	4603      	mov	r3, r0
 80022f6:	4323      	orrs	r3, r4
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d110      	bne.n	800231e <HAL_ADCEx_MultiModeConfigChannel+0x10a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80022fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	4b0f      	ldr	r3, [pc, #60]	; (8002340 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002302:	4013      	ands	r3, r2
 8002304:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002306:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002308:	e009      	b.n	800231e <HAL_ADCEx_MultiModeConfigChannel+0x10a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230e:	f043 0220 	orr.w	r2, r3, #32
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800231c:	e000      	b.n	8002320 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800231e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002328:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800232c:	4618      	mov	r0, r3
 800232e:	377c      	adds	r7, #124	; 0x7c
 8002330:	46bd      	mov	sp, r7
 8002332:	bd90      	pop	{r4, r7, pc}
 8002334:	40022000 	.word	0x40022000
 8002338:	40022100 	.word	0x40022100
 800233c:	40022300 	.word	0x40022300
 8002340:	fffff0e0 	.word	0xfffff0e0

08002344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002354:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <__NVIC_SetPriorityGrouping+0x40>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002360:	4013      	ands	r3, r2
 8002362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800236c:	4b06      	ldr	r3, [pc, #24]	; (8002388 <__NVIC_SetPriorityGrouping+0x44>)
 800236e:	4313      	orrs	r3, r2
 8002370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002372:	4a04      	ldr	r2, [pc, #16]	; (8002384 <__NVIC_SetPriorityGrouping+0x40>)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	60d3      	str	r3, [r2, #12]
}
 8002378:	bf00      	nop
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	e000ed00 	.word	0xe000ed00
 8002388:	05fa0000 	.word	0x05fa0000

0800238c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002390:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	0a1b      	lsrs	r3, r3, #8
 8002396:	f003 0307 	and.w	r3, r3, #7
}
 800239a:	4618      	mov	r0, r3
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000ed00 	.word	0xe000ed00

080023a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	db0b      	blt.n	80023d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ba:	88fb      	ldrh	r3, [r7, #6]
 80023bc:	f003 021f 	and.w	r2, r3, #31
 80023c0:	4907      	ldr	r1, [pc, #28]	; (80023e0 <__NVIC_EnableIRQ+0x38>)
 80023c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023c6:	095b      	lsrs	r3, r3, #5
 80023c8:	2001      	movs	r0, #1
 80023ca:	fa00 f202 	lsl.w	r2, r0, r2
 80023ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	e000e100 	.word	0xe000e100

080023e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	6039      	str	r1, [r7, #0]
 80023ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	db0a      	blt.n	800240e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	490c      	ldr	r1, [pc, #48]	; (8002430 <__NVIC_SetPriority+0x4c>)
 80023fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002402:	0112      	lsls	r2, r2, #4
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	440b      	add	r3, r1
 8002408:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800240c:	e00a      	b.n	8002424 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	b2da      	uxtb	r2, r3
 8002412:	4908      	ldr	r1, [pc, #32]	; (8002434 <__NVIC_SetPriority+0x50>)
 8002414:	88fb      	ldrh	r3, [r7, #6]
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	3b04      	subs	r3, #4
 800241c:	0112      	lsls	r2, r2, #4
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	440b      	add	r3, r1
 8002422:	761a      	strb	r2, [r3, #24]
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	e000e100 	.word	0xe000e100
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002438:	b480      	push	{r7}
 800243a:	b089      	sub	sp, #36	; 0x24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f1c3 0307 	rsb	r3, r3, #7
 8002452:	2b04      	cmp	r3, #4
 8002454:	bf28      	it	cs
 8002456:	2304      	movcs	r3, #4
 8002458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	3304      	adds	r3, #4
 800245e:	2b06      	cmp	r3, #6
 8002460:	d902      	bls.n	8002468 <NVIC_EncodePriority+0x30>
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3b03      	subs	r3, #3
 8002466:	e000      	b.n	800246a <NVIC_EncodePriority+0x32>
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800246c:	f04f 32ff 	mov.w	r2, #4294967295
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43da      	mvns	r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	401a      	ands	r2, r3
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002480:	f04f 31ff 	mov.w	r1, #4294967295
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	fa01 f303 	lsl.w	r3, r1, r3
 800248a:	43d9      	mvns	r1, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002490:	4313      	orrs	r3, r2
         );
}
 8002492:	4618      	mov	r0, r3
 8002494:	3724      	adds	r7, #36	; 0x24
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024b0:	d301      	bcc.n	80024b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024b2:	2301      	movs	r3, #1
 80024b4:	e00f      	b.n	80024d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024b6:	4a0a      	ldr	r2, [pc, #40]	; (80024e0 <SysTick_Config+0x40>)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024be:	210f      	movs	r1, #15
 80024c0:	f04f 30ff 	mov.w	r0, #4294967295
 80024c4:	f7ff ff8e 	bl	80023e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024c8:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <SysTick_Config+0x40>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ce:	4b04      	ldr	r3, [pc, #16]	; (80024e0 <SysTick_Config+0x40>)
 80024d0:	2207      	movs	r2, #7
 80024d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	e000e010 	.word	0xe000e010

080024e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff ff29 	bl	8002344 <__NVIC_SetPriorityGrouping>
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b086      	sub	sp, #24
 80024fe:	af00      	add	r7, sp, #0
 8002500:	4603      	mov	r3, r0
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
 8002506:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002508:	f7ff ff40 	bl	800238c <__NVIC_GetPriorityGrouping>
 800250c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	68b9      	ldr	r1, [r7, #8]
 8002512:	6978      	ldr	r0, [r7, #20]
 8002514:	f7ff ff90 	bl	8002438 <NVIC_EncodePriority>
 8002518:	4602      	mov	r2, r0
 800251a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800251e:	4611      	mov	r1, r2
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff ff5f 	bl	80023e4 <__NVIC_SetPriority>
}
 8002526:	bf00      	nop
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	4603      	mov	r3, r0
 8002536:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002538:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff ff33 	bl	80023a8 <__NVIC_EnableIRQ>
}
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7ff ffa4 	bl	80024a0 <SysTick_Config>
 8002558:	4603      	mov	r3, r0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e014      	b.n	800259e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	791b      	ldrb	r3, [r3, #4]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d105      	bne.n	800258a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7fe fd01 	bl	8000f8c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2202      	movs	r2, #2
 800258e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	795b      	ldrb	r3, [r3, #5]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d101      	bne.n	80025bc <HAL_DAC_Start+0x16>
 80025b8:	2302      	movs	r3, #2
 80025ba:	e040      	b.n	800263e <HAL_DAC_Start+0x98>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2202      	movs	r2, #2
 80025c6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6819      	ldr	r1, [r3, #0]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	f003 0310 	and.w	r3, r3, #16
 80025d4:	2201      	movs	r2, #1
 80025d6:	409a      	lsls	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	430a      	orrs	r2, r1
 80025de:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10f      	bne.n	8002606 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d11d      	bne.n	8002630 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f042 0201 	orr.w	r2, r2, #1
 8002602:	605a      	str	r2, [r3, #4]
 8002604:	e014      	b.n	8002630 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	f003 0310 	and.w	r3, r3, #16
 8002616:	2102      	movs	r1, #2
 8002618:	fa01 f303 	lsl.w	r3, r1, r3
 800261c:	429a      	cmp	r2, r3
 800261e:	d107      	bne.n	8002630 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 0202 	orr.w	r2, r2, #2
 800262e:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
	...

0800264c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b088      	sub	sp, #32
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	795b      	ldrb	r3, [r3, #5]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <HAL_DAC_ConfigChannel+0x18>
 8002660:	2302      	movs	r3, #2
 8002662:	e11d      	b.n	80028a0 <HAL_DAC_ConfigChannel+0x254>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2201      	movs	r2, #1
 8002668:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2202      	movs	r2, #2
 800266e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b04      	cmp	r3, #4
 8002676:	d174      	bne.n	8002762 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002678:	f7fe ff2a 	bl	80014d0 <HAL_GetTick>
 800267c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d134      	bne.n	80026ee <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002684:	e011      	b.n	80026aa <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002686:	f7fe ff23 	bl	80014d0 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b01      	cmp	r3, #1
 8002692:	d90a      	bls.n	80026aa <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	f043 0208 	orr.w	r2, r3, #8
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2203      	movs	r2, #3
 80026a4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e0fa      	b.n	80028a0 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026b0:	4b7d      	ldr	r3, [pc, #500]	; (80028a8 <HAL_DAC_ConfigChannel+0x25c>)
 80026b2:	4013      	ands	r3, r2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1e6      	bne.n	8002686 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80026b8:	2001      	movs	r0, #1
 80026ba:	f7fe ff15 	bl	80014e8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68ba      	ldr	r2, [r7, #8]
 80026c4:	6992      	ldr	r2, [r2, #24]
 80026c6:	641a      	str	r2, [r3, #64]	; 0x40
 80026c8:	e01e      	b.n	8002708 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80026ca:	f7fe ff01 	bl	80014d0 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d90a      	bls.n	80026ee <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	f043 0208 	orr.w	r2, r3, #8
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2203      	movs	r2, #3
 80026e8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e0d8      	b.n	80028a0 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	dbe8      	blt.n	80026ca <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80026f8:	2001      	movs	r0, #1
 80026fa:	f7fe fef5 	bl	80014e8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	6992      	ldr	r2, [r2, #24]
 8002706:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f003 0310 	and.w	r3, r3, #16
 8002714:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002718:	fa01 f303 	lsl.w	r3, r1, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	ea02 0103 	and.w	r1, r2, r3
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	69da      	ldr	r2, [r3, #28]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f003 0310 	and.w	r3, r3, #16
 800272c:	409a      	lsls	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f003 0310 	and.w	r3, r3, #16
 8002742:	21ff      	movs	r1, #255	; 0xff
 8002744:	fa01 f303 	lsl.w	r3, r1, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	ea02 0103 	and.w	r1, r2, r3
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	6a1a      	ldr	r2, [r3, #32]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f003 0310 	and.w	r3, r3, #16
 8002758:	409a      	lsls	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	430a      	orrs	r2, r1
 8002760:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d11d      	bne.n	80027a6 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002770:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f003 0310 	and.w	r3, r3, #16
 8002778:	221f      	movs	r2, #31
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43db      	mvns	r3, r3
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	4013      	ands	r3, r2
 8002784:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f003 0310 	and.w	r3, r3, #16
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	4313      	orrs	r3, r2
 800279c:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ac:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f003 0310 	and.w	r3, r3, #16
 80027b4:	2207      	movs	r2, #7
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43db      	mvns	r3, r3
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	4013      	ands	r3, r2
 80027c0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d102      	bne.n	80027d0 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
 80027ce:	e00f      	b.n	80027f0 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d102      	bne.n	80027de <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80027d8:	2301      	movs	r3, #1
 80027da:	61fb      	str	r3, [r7, #28]
 80027dc:	e008      	b.n	80027f0 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d102      	bne.n	80027ec <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80027e6:	2301      	movs	r3, #1
 80027e8:	61fb      	str	r3, [r7, #28]
 80027ea:	e001      	b.n	80027f0 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	69fa      	ldr	r2, [r7, #28]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f003 0310 	and.w	r3, r3, #16
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	4313      	orrs	r3, r2
 8002810:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6819      	ldr	r1, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f003 0310 	and.w	r3, r3, #16
 8002826:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	43da      	mvns	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	400a      	ands	r2, r1
 8002836:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f003 0310 	and.w	r3, r3, #16
 8002846:	f640 72fe 	movw	r2, #4094	; 0xffe
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43db      	mvns	r3, r3
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	4013      	ands	r3, r2
 8002854:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f003 0310 	and.w	r3, r3, #16
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	4313      	orrs	r3, r2
 800286c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6819      	ldr	r1, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f003 0310 	and.w	r3, r3, #16
 8002882:	22c0      	movs	r2, #192	; 0xc0
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	43da      	mvns	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	400a      	ands	r2, r1
 8002890:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2201      	movs	r2, #1
 8002896:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3720      	adds	r7, #32
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	20008000 	.word	0x20008000

080028ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80028b4:	f7fe fe0c 	bl	80014d0 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e37f      	b.n	8002fc4 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a66      	ldr	r2, [pc, #408]	; (8002a64 <HAL_DMA_Init+0x1b8>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d04a      	beq.n	8002964 <HAL_DMA_Init+0xb8>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a65      	ldr	r2, [pc, #404]	; (8002a68 <HAL_DMA_Init+0x1bc>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d045      	beq.n	8002964 <HAL_DMA_Init+0xb8>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a63      	ldr	r2, [pc, #396]	; (8002a6c <HAL_DMA_Init+0x1c0>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d040      	beq.n	8002964 <HAL_DMA_Init+0xb8>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a62      	ldr	r2, [pc, #392]	; (8002a70 <HAL_DMA_Init+0x1c4>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d03b      	beq.n	8002964 <HAL_DMA_Init+0xb8>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a60      	ldr	r2, [pc, #384]	; (8002a74 <HAL_DMA_Init+0x1c8>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d036      	beq.n	8002964 <HAL_DMA_Init+0xb8>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a5f      	ldr	r2, [pc, #380]	; (8002a78 <HAL_DMA_Init+0x1cc>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d031      	beq.n	8002964 <HAL_DMA_Init+0xb8>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a5d      	ldr	r2, [pc, #372]	; (8002a7c <HAL_DMA_Init+0x1d0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d02c      	beq.n	8002964 <HAL_DMA_Init+0xb8>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a5c      	ldr	r2, [pc, #368]	; (8002a80 <HAL_DMA_Init+0x1d4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d027      	beq.n	8002964 <HAL_DMA_Init+0xb8>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a5a      	ldr	r2, [pc, #360]	; (8002a84 <HAL_DMA_Init+0x1d8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d022      	beq.n	8002964 <HAL_DMA_Init+0xb8>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a59      	ldr	r2, [pc, #356]	; (8002a88 <HAL_DMA_Init+0x1dc>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d01d      	beq.n	8002964 <HAL_DMA_Init+0xb8>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a57      	ldr	r2, [pc, #348]	; (8002a8c <HAL_DMA_Init+0x1e0>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d018      	beq.n	8002964 <HAL_DMA_Init+0xb8>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a56      	ldr	r2, [pc, #344]	; (8002a90 <HAL_DMA_Init+0x1e4>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d013      	beq.n	8002964 <HAL_DMA_Init+0xb8>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a54      	ldr	r2, [pc, #336]	; (8002a94 <HAL_DMA_Init+0x1e8>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d00e      	beq.n	8002964 <HAL_DMA_Init+0xb8>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a53      	ldr	r2, [pc, #332]	; (8002a98 <HAL_DMA_Init+0x1ec>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d009      	beq.n	8002964 <HAL_DMA_Init+0xb8>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a51      	ldr	r2, [pc, #324]	; (8002a9c <HAL_DMA_Init+0x1f0>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d004      	beq.n	8002964 <HAL_DMA_Init+0xb8>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a50      	ldr	r2, [pc, #320]	; (8002aa0 <HAL_DMA_Init+0x1f4>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d101      	bne.n	8002968 <HAL_DMA_Init+0xbc>
 8002964:	2301      	movs	r3, #1
 8002966:	e000      	b.n	800296a <HAL_DMA_Init+0xbe>
 8002968:	2300      	movs	r3, #0
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 813c 	beq.w	8002be8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2202      	movs	r2, #2
 800297c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a37      	ldr	r2, [pc, #220]	; (8002a64 <HAL_DMA_Init+0x1b8>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d04a      	beq.n	8002a20 <HAL_DMA_Init+0x174>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a36      	ldr	r2, [pc, #216]	; (8002a68 <HAL_DMA_Init+0x1bc>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d045      	beq.n	8002a20 <HAL_DMA_Init+0x174>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a34      	ldr	r2, [pc, #208]	; (8002a6c <HAL_DMA_Init+0x1c0>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d040      	beq.n	8002a20 <HAL_DMA_Init+0x174>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a33      	ldr	r2, [pc, #204]	; (8002a70 <HAL_DMA_Init+0x1c4>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d03b      	beq.n	8002a20 <HAL_DMA_Init+0x174>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a31      	ldr	r2, [pc, #196]	; (8002a74 <HAL_DMA_Init+0x1c8>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d036      	beq.n	8002a20 <HAL_DMA_Init+0x174>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a30      	ldr	r2, [pc, #192]	; (8002a78 <HAL_DMA_Init+0x1cc>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d031      	beq.n	8002a20 <HAL_DMA_Init+0x174>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a2e      	ldr	r2, [pc, #184]	; (8002a7c <HAL_DMA_Init+0x1d0>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d02c      	beq.n	8002a20 <HAL_DMA_Init+0x174>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a2d      	ldr	r2, [pc, #180]	; (8002a80 <HAL_DMA_Init+0x1d4>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d027      	beq.n	8002a20 <HAL_DMA_Init+0x174>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a2b      	ldr	r2, [pc, #172]	; (8002a84 <HAL_DMA_Init+0x1d8>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d022      	beq.n	8002a20 <HAL_DMA_Init+0x174>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a2a      	ldr	r2, [pc, #168]	; (8002a88 <HAL_DMA_Init+0x1dc>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d01d      	beq.n	8002a20 <HAL_DMA_Init+0x174>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a28      	ldr	r2, [pc, #160]	; (8002a8c <HAL_DMA_Init+0x1e0>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d018      	beq.n	8002a20 <HAL_DMA_Init+0x174>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a27      	ldr	r2, [pc, #156]	; (8002a90 <HAL_DMA_Init+0x1e4>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d013      	beq.n	8002a20 <HAL_DMA_Init+0x174>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a25      	ldr	r2, [pc, #148]	; (8002a94 <HAL_DMA_Init+0x1e8>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d00e      	beq.n	8002a20 <HAL_DMA_Init+0x174>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a24      	ldr	r2, [pc, #144]	; (8002a98 <HAL_DMA_Init+0x1ec>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d009      	beq.n	8002a20 <HAL_DMA_Init+0x174>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a22      	ldr	r2, [pc, #136]	; (8002a9c <HAL_DMA_Init+0x1f0>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d004      	beq.n	8002a20 <HAL_DMA_Init+0x174>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a21      	ldr	r2, [pc, #132]	; (8002aa0 <HAL_DMA_Init+0x1f4>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d108      	bne.n	8002a32 <HAL_DMA_Init+0x186>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0201 	bic.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	e007      	b.n	8002a42 <HAL_DMA_Init+0x196>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 0201 	bic.w	r2, r2, #1
 8002a40:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a42:	e02f      	b.n	8002aa4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a44:	f7fe fd44 	bl	80014d0 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b05      	cmp	r3, #5
 8002a50:	d928      	bls.n	8002aa4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2220      	movs	r2, #32
 8002a56:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e2af      	b.n	8002fc4 <HAL_DMA_Init+0x718>
 8002a64:	40020010 	.word	0x40020010
 8002a68:	40020028 	.word	0x40020028
 8002a6c:	40020040 	.word	0x40020040
 8002a70:	40020058 	.word	0x40020058
 8002a74:	40020070 	.word	0x40020070
 8002a78:	40020088 	.word	0x40020088
 8002a7c:	400200a0 	.word	0x400200a0
 8002a80:	400200b8 	.word	0x400200b8
 8002a84:	40020410 	.word	0x40020410
 8002a88:	40020428 	.word	0x40020428
 8002a8c:	40020440 	.word	0x40020440
 8002a90:	40020458 	.word	0x40020458
 8002a94:	40020470 	.word	0x40020470
 8002a98:	40020488 	.word	0x40020488
 8002a9c:	400204a0 	.word	0x400204a0
 8002aa0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1c8      	bne.n	8002a44 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	4b73      	ldr	r3, [pc, #460]	; (8002c8c <HAL_DMA_Init+0x3e0>)
 8002abe:	4013      	ands	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002aca:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ad6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ae2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	d107      	bne.n	8002b08 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b00:	4313      	orrs	r3, r2
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	617b      	str	r3, [r7, #20]
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2b28      	cmp	r3, #40	; 0x28
 8002b0e:	d903      	bls.n	8002b18 <HAL_DMA_Init+0x26c>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b2e      	cmp	r3, #46	; 0x2e
 8002b16:	d91f      	bls.n	8002b58 <HAL_DMA_Init+0x2ac>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2b3e      	cmp	r3, #62	; 0x3e
 8002b1e:	d903      	bls.n	8002b28 <HAL_DMA_Init+0x27c>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2b42      	cmp	r3, #66	; 0x42
 8002b26:	d917      	bls.n	8002b58 <HAL_DMA_Init+0x2ac>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b46      	cmp	r3, #70	; 0x46
 8002b2e:	d903      	bls.n	8002b38 <HAL_DMA_Init+0x28c>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2b48      	cmp	r3, #72	; 0x48
 8002b36:	d90f      	bls.n	8002b58 <HAL_DMA_Init+0x2ac>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	2b4e      	cmp	r3, #78	; 0x4e
 8002b3e:	d903      	bls.n	8002b48 <HAL_DMA_Init+0x29c>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b52      	cmp	r3, #82	; 0x52
 8002b46:	d907      	bls.n	8002b58 <HAL_DMA_Init+0x2ac>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2b73      	cmp	r3, #115	; 0x73
 8002b4e:	d905      	bls.n	8002b5c <HAL_DMA_Init+0x2b0>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	2b77      	cmp	r3, #119	; 0x77
 8002b56:	d801      	bhi.n	8002b5c <HAL_DMA_Init+0x2b0>
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e000      	b.n	8002b5e <HAL_DMA_Init+0x2b2>
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b68:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f023 0307 	bic.w	r3, r3, #7
 8002b80:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d117      	bne.n	8002bc4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00e      	beq.n	8002bc4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f001 fa24 	bl	8003ff4 <DMA_CheckFifoParam>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d008      	beq.n	8002bc4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2240      	movs	r2, #64	; 0x40
 8002bb6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e1ff      	b.n	8002fc4 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f001 f95f 	bl	8003e90 <DMA_CalcBaseAndBitshift>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bda:	f003 031f 	and.w	r3, r3, #31
 8002bde:	223f      	movs	r2, #63	; 0x3f
 8002be0:	409a      	lsls	r2, r3
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	609a      	str	r2, [r3, #8]
 8002be6:	e0fe      	b.n	8002de6 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a28      	ldr	r2, [pc, #160]	; (8002c90 <HAL_DMA_Init+0x3e4>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d04a      	beq.n	8002c88 <HAL_DMA_Init+0x3dc>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a27      	ldr	r2, [pc, #156]	; (8002c94 <HAL_DMA_Init+0x3e8>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d045      	beq.n	8002c88 <HAL_DMA_Init+0x3dc>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a25      	ldr	r2, [pc, #148]	; (8002c98 <HAL_DMA_Init+0x3ec>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d040      	beq.n	8002c88 <HAL_DMA_Init+0x3dc>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a24      	ldr	r2, [pc, #144]	; (8002c9c <HAL_DMA_Init+0x3f0>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d03b      	beq.n	8002c88 <HAL_DMA_Init+0x3dc>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a22      	ldr	r2, [pc, #136]	; (8002ca0 <HAL_DMA_Init+0x3f4>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d036      	beq.n	8002c88 <HAL_DMA_Init+0x3dc>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a21      	ldr	r2, [pc, #132]	; (8002ca4 <HAL_DMA_Init+0x3f8>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d031      	beq.n	8002c88 <HAL_DMA_Init+0x3dc>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a1f      	ldr	r2, [pc, #124]	; (8002ca8 <HAL_DMA_Init+0x3fc>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d02c      	beq.n	8002c88 <HAL_DMA_Init+0x3dc>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a1e      	ldr	r2, [pc, #120]	; (8002cac <HAL_DMA_Init+0x400>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d027      	beq.n	8002c88 <HAL_DMA_Init+0x3dc>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a1c      	ldr	r2, [pc, #112]	; (8002cb0 <HAL_DMA_Init+0x404>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d022      	beq.n	8002c88 <HAL_DMA_Init+0x3dc>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a1b      	ldr	r2, [pc, #108]	; (8002cb4 <HAL_DMA_Init+0x408>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d01d      	beq.n	8002c88 <HAL_DMA_Init+0x3dc>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a19      	ldr	r2, [pc, #100]	; (8002cb8 <HAL_DMA_Init+0x40c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d018      	beq.n	8002c88 <HAL_DMA_Init+0x3dc>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a18      	ldr	r2, [pc, #96]	; (8002cbc <HAL_DMA_Init+0x410>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d013      	beq.n	8002c88 <HAL_DMA_Init+0x3dc>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a16      	ldr	r2, [pc, #88]	; (8002cc0 <HAL_DMA_Init+0x414>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d00e      	beq.n	8002c88 <HAL_DMA_Init+0x3dc>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a15      	ldr	r2, [pc, #84]	; (8002cc4 <HAL_DMA_Init+0x418>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d009      	beq.n	8002c88 <HAL_DMA_Init+0x3dc>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a13      	ldr	r2, [pc, #76]	; (8002cc8 <HAL_DMA_Init+0x41c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d004      	beq.n	8002c88 <HAL_DMA_Init+0x3dc>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a12      	ldr	r2, [pc, #72]	; (8002ccc <HAL_DMA_Init+0x420>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d123      	bne.n	8002cd0 <HAL_DMA_Init+0x424>
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e022      	b.n	8002cd2 <HAL_DMA_Init+0x426>
 8002c8c:	fe10803f 	.word	0xfe10803f
 8002c90:	48022c08 	.word	0x48022c08
 8002c94:	48022c1c 	.word	0x48022c1c
 8002c98:	48022c30 	.word	0x48022c30
 8002c9c:	48022c44 	.word	0x48022c44
 8002ca0:	48022c58 	.word	0x48022c58
 8002ca4:	48022c6c 	.word	0x48022c6c
 8002ca8:	48022c80 	.word	0x48022c80
 8002cac:	48022c94 	.word	0x48022c94
 8002cb0:	58025408 	.word	0x58025408
 8002cb4:	5802541c 	.word	0x5802541c
 8002cb8:	58025430 	.word	0x58025430
 8002cbc:	58025444 	.word	0x58025444
 8002cc0:	58025458 	.word	0x58025458
 8002cc4:	5802546c 	.word	0x5802546c
 8002cc8:	58025480 	.word	0x58025480
 8002ccc:	58025494 	.word	0x58025494
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d07e      	beq.n	8002dd4 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a80      	ldr	r2, [pc, #512]	; (8002edc <HAL_DMA_Init+0x630>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d021      	beq.n	8002d24 <HAL_DMA_Init+0x478>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a7e      	ldr	r2, [pc, #504]	; (8002ee0 <HAL_DMA_Init+0x634>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d01c      	beq.n	8002d24 <HAL_DMA_Init+0x478>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a7d      	ldr	r2, [pc, #500]	; (8002ee4 <HAL_DMA_Init+0x638>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d017      	beq.n	8002d24 <HAL_DMA_Init+0x478>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a7b      	ldr	r2, [pc, #492]	; (8002ee8 <HAL_DMA_Init+0x63c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d012      	beq.n	8002d24 <HAL_DMA_Init+0x478>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a7a      	ldr	r2, [pc, #488]	; (8002eec <HAL_DMA_Init+0x640>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d00d      	beq.n	8002d24 <HAL_DMA_Init+0x478>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a78      	ldr	r2, [pc, #480]	; (8002ef0 <HAL_DMA_Init+0x644>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d008      	beq.n	8002d24 <HAL_DMA_Init+0x478>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a77      	ldr	r2, [pc, #476]	; (8002ef4 <HAL_DMA_Init+0x648>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d003      	beq.n	8002d24 <HAL_DMA_Init+0x478>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a75      	ldr	r2, [pc, #468]	; (8002ef8 <HAL_DMA_Init+0x64c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2202      	movs	r2, #2
 8002d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	4b6e      	ldr	r3, [pc, #440]	; (8002efc <HAL_DMA_Init+0x650>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2b40      	cmp	r3, #64	; 0x40
 8002d4c:	d008      	beq.n	8002d60 <HAL_DMA_Init+0x4b4>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	2b80      	cmp	r3, #128	; 0x80
 8002d54:	d102      	bne.n	8002d5c <HAL_DMA_Init+0x4b0>
 8002d56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d5a:	e002      	b.n	8002d62 <HAL_DMA_Init+0x4b6>
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	e000      	b.n	8002d62 <HAL_DMA_Init+0x4b6>
 8002d60:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	68d2      	ldr	r2, [r2, #12]
 8002d66:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002d70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002d78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002d80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002d88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002d90:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	461a      	mov	r2, r3
 8002da6:	4b56      	ldr	r3, [pc, #344]	; (8002f00 <HAL_DMA_Init+0x654>)
 8002da8:	4413      	add	r3, r2
 8002daa:	4a56      	ldr	r2, [pc, #344]	; (8002f04 <HAL_DMA_Init+0x658>)
 8002dac:	fba2 2303 	umull	r2, r3, r2, r3
 8002db0:	091b      	lsrs	r3, r3, #4
 8002db2:	009a      	lsls	r2, r3, #2
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f001 f869 	bl	8003e90 <DMA_CalcBaseAndBitshift>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc6:	f003 031f 	and.w	r3, r3, #31
 8002dca:	2201      	movs	r2, #1
 8002dcc:	409a      	lsls	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	605a      	str	r2, [r3, #4]
 8002dd2:	e008      	b.n	8002de6 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2240      	movs	r2, #64	; 0x40
 8002dd8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2203      	movs	r2, #3
 8002dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e0ee      	b.n	8002fc4 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a47      	ldr	r2, [pc, #284]	; (8002f08 <HAL_DMA_Init+0x65c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d072      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a45      	ldr	r2, [pc, #276]	; (8002f0c <HAL_DMA_Init+0x660>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d06d      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a44      	ldr	r2, [pc, #272]	; (8002f10 <HAL_DMA_Init+0x664>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d068      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a42      	ldr	r2, [pc, #264]	; (8002f14 <HAL_DMA_Init+0x668>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d063      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a41      	ldr	r2, [pc, #260]	; (8002f18 <HAL_DMA_Init+0x66c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d05e      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a3f      	ldr	r2, [pc, #252]	; (8002f1c <HAL_DMA_Init+0x670>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d059      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a3e      	ldr	r2, [pc, #248]	; (8002f20 <HAL_DMA_Init+0x674>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d054      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a3c      	ldr	r2, [pc, #240]	; (8002f24 <HAL_DMA_Init+0x678>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d04f      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a3b      	ldr	r2, [pc, #236]	; (8002f28 <HAL_DMA_Init+0x67c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d04a      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a39      	ldr	r2, [pc, #228]	; (8002f2c <HAL_DMA_Init+0x680>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d045      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a38      	ldr	r2, [pc, #224]	; (8002f30 <HAL_DMA_Init+0x684>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d040      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a36      	ldr	r2, [pc, #216]	; (8002f34 <HAL_DMA_Init+0x688>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d03b      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a35      	ldr	r2, [pc, #212]	; (8002f38 <HAL_DMA_Init+0x68c>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d036      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a33      	ldr	r2, [pc, #204]	; (8002f3c <HAL_DMA_Init+0x690>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d031      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a32      	ldr	r2, [pc, #200]	; (8002f40 <HAL_DMA_Init+0x694>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d02c      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a30      	ldr	r2, [pc, #192]	; (8002f44 <HAL_DMA_Init+0x698>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d027      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a14      	ldr	r2, [pc, #80]	; (8002edc <HAL_DMA_Init+0x630>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d022      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a12      	ldr	r2, [pc, #72]	; (8002ee0 <HAL_DMA_Init+0x634>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d01d      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a11      	ldr	r2, [pc, #68]	; (8002ee4 <HAL_DMA_Init+0x638>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d018      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a0f      	ldr	r2, [pc, #60]	; (8002ee8 <HAL_DMA_Init+0x63c>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d013      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a0e      	ldr	r2, [pc, #56]	; (8002eec <HAL_DMA_Init+0x640>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d00e      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a0c      	ldr	r2, [pc, #48]	; (8002ef0 <HAL_DMA_Init+0x644>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d009      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a0b      	ldr	r2, [pc, #44]	; (8002ef4 <HAL_DMA_Init+0x648>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d004      	beq.n	8002ed6 <HAL_DMA_Init+0x62a>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a09      	ldr	r2, [pc, #36]	; (8002ef8 <HAL_DMA_Init+0x64c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d138      	bne.n	8002f48 <HAL_DMA_Init+0x69c>
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e037      	b.n	8002f4a <HAL_DMA_Init+0x69e>
 8002eda:	bf00      	nop
 8002edc:	58025408 	.word	0x58025408
 8002ee0:	5802541c 	.word	0x5802541c
 8002ee4:	58025430 	.word	0x58025430
 8002ee8:	58025444 	.word	0x58025444
 8002eec:	58025458 	.word	0x58025458
 8002ef0:	5802546c 	.word	0x5802546c
 8002ef4:	58025480 	.word	0x58025480
 8002ef8:	58025494 	.word	0x58025494
 8002efc:	fffe000f 	.word	0xfffe000f
 8002f00:	a7fdabf8 	.word	0xa7fdabf8
 8002f04:	cccccccd 	.word	0xcccccccd
 8002f08:	40020010 	.word	0x40020010
 8002f0c:	40020028 	.word	0x40020028
 8002f10:	40020040 	.word	0x40020040
 8002f14:	40020058 	.word	0x40020058
 8002f18:	40020070 	.word	0x40020070
 8002f1c:	40020088 	.word	0x40020088
 8002f20:	400200a0 	.word	0x400200a0
 8002f24:	400200b8 	.word	0x400200b8
 8002f28:	40020410 	.word	0x40020410
 8002f2c:	40020428 	.word	0x40020428
 8002f30:	40020440 	.word	0x40020440
 8002f34:	40020458 	.word	0x40020458
 8002f38:	40020470 	.word	0x40020470
 8002f3c:	40020488 	.word	0x40020488
 8002f40:	400204a0 	.word	0x400204a0
 8002f44:	400204b8 	.word	0x400204b8
 8002f48:	2300      	movs	r3, #0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d032      	beq.n	8002fb4 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f001 f8cc 	bl	80040ec <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b80      	cmp	r3, #128	; 0x80
 8002f5a:	d102      	bne.n	8002f62 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002f76:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d010      	beq.n	8002fa2 <HAL_DMA_Init+0x6f6>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b08      	cmp	r3, #8
 8002f86:	d80c      	bhi.n	8002fa2 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f001 f949 	bl	8004220 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002f9e:	605a      	str	r2, [r3, #4]
 8002fa0:	e008      	b.n	8002fb4 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08a      	sub	sp, #40	; 0x28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fd8:	4b67      	ldr	r3, [pc, #412]	; (8003178 <HAL_DMA_IRQHandler+0x1ac>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a67      	ldr	r2, [pc, #412]	; (800317c <HAL_DMA_IRQHandler+0x1b0>)
 8002fde:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe2:	0a9b      	lsrs	r3, r3, #10
 8002fe4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fea:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002ff2:	6a3b      	ldr	r3, [r7, #32]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a5f      	ldr	r2, [pc, #380]	; (8003180 <HAL_DMA_IRQHandler+0x1b4>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d04a      	beq.n	800309e <HAL_DMA_IRQHandler+0xd2>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a5d      	ldr	r2, [pc, #372]	; (8003184 <HAL_DMA_IRQHandler+0x1b8>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d045      	beq.n	800309e <HAL_DMA_IRQHandler+0xd2>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a5c      	ldr	r2, [pc, #368]	; (8003188 <HAL_DMA_IRQHandler+0x1bc>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d040      	beq.n	800309e <HAL_DMA_IRQHandler+0xd2>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a5a      	ldr	r2, [pc, #360]	; (800318c <HAL_DMA_IRQHandler+0x1c0>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d03b      	beq.n	800309e <HAL_DMA_IRQHandler+0xd2>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a59      	ldr	r2, [pc, #356]	; (8003190 <HAL_DMA_IRQHandler+0x1c4>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d036      	beq.n	800309e <HAL_DMA_IRQHandler+0xd2>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a57      	ldr	r2, [pc, #348]	; (8003194 <HAL_DMA_IRQHandler+0x1c8>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d031      	beq.n	800309e <HAL_DMA_IRQHandler+0xd2>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a56      	ldr	r2, [pc, #344]	; (8003198 <HAL_DMA_IRQHandler+0x1cc>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d02c      	beq.n	800309e <HAL_DMA_IRQHandler+0xd2>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a54      	ldr	r2, [pc, #336]	; (800319c <HAL_DMA_IRQHandler+0x1d0>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d027      	beq.n	800309e <HAL_DMA_IRQHandler+0xd2>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a53      	ldr	r2, [pc, #332]	; (80031a0 <HAL_DMA_IRQHandler+0x1d4>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d022      	beq.n	800309e <HAL_DMA_IRQHandler+0xd2>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a51      	ldr	r2, [pc, #324]	; (80031a4 <HAL_DMA_IRQHandler+0x1d8>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d01d      	beq.n	800309e <HAL_DMA_IRQHandler+0xd2>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a50      	ldr	r2, [pc, #320]	; (80031a8 <HAL_DMA_IRQHandler+0x1dc>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d018      	beq.n	800309e <HAL_DMA_IRQHandler+0xd2>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a4e      	ldr	r2, [pc, #312]	; (80031ac <HAL_DMA_IRQHandler+0x1e0>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d013      	beq.n	800309e <HAL_DMA_IRQHandler+0xd2>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a4d      	ldr	r2, [pc, #308]	; (80031b0 <HAL_DMA_IRQHandler+0x1e4>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d00e      	beq.n	800309e <HAL_DMA_IRQHandler+0xd2>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a4b      	ldr	r2, [pc, #300]	; (80031b4 <HAL_DMA_IRQHandler+0x1e8>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d009      	beq.n	800309e <HAL_DMA_IRQHandler+0xd2>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a4a      	ldr	r2, [pc, #296]	; (80031b8 <HAL_DMA_IRQHandler+0x1ec>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d004      	beq.n	800309e <HAL_DMA_IRQHandler+0xd2>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a48      	ldr	r2, [pc, #288]	; (80031bc <HAL_DMA_IRQHandler+0x1f0>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d101      	bne.n	80030a2 <HAL_DMA_IRQHandler+0xd6>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <HAL_DMA_IRQHandler+0xd8>
 80030a2:	2300      	movs	r3, #0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 842b 	beq.w	8003900 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ae:	f003 031f 	and.w	r3, r3, #31
 80030b2:	2208      	movs	r2, #8
 80030b4:	409a      	lsls	r2, r3
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	4013      	ands	r3, r2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 80a2 	beq.w	8003204 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a2e      	ldr	r2, [pc, #184]	; (8003180 <HAL_DMA_IRQHandler+0x1b4>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d04a      	beq.n	8003160 <HAL_DMA_IRQHandler+0x194>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a2d      	ldr	r2, [pc, #180]	; (8003184 <HAL_DMA_IRQHandler+0x1b8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d045      	beq.n	8003160 <HAL_DMA_IRQHandler+0x194>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a2b      	ldr	r2, [pc, #172]	; (8003188 <HAL_DMA_IRQHandler+0x1bc>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d040      	beq.n	8003160 <HAL_DMA_IRQHandler+0x194>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a2a      	ldr	r2, [pc, #168]	; (800318c <HAL_DMA_IRQHandler+0x1c0>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d03b      	beq.n	8003160 <HAL_DMA_IRQHandler+0x194>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a28      	ldr	r2, [pc, #160]	; (8003190 <HAL_DMA_IRQHandler+0x1c4>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d036      	beq.n	8003160 <HAL_DMA_IRQHandler+0x194>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a27      	ldr	r2, [pc, #156]	; (8003194 <HAL_DMA_IRQHandler+0x1c8>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d031      	beq.n	8003160 <HAL_DMA_IRQHandler+0x194>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a25      	ldr	r2, [pc, #148]	; (8003198 <HAL_DMA_IRQHandler+0x1cc>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d02c      	beq.n	8003160 <HAL_DMA_IRQHandler+0x194>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a24      	ldr	r2, [pc, #144]	; (800319c <HAL_DMA_IRQHandler+0x1d0>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d027      	beq.n	8003160 <HAL_DMA_IRQHandler+0x194>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a22      	ldr	r2, [pc, #136]	; (80031a0 <HAL_DMA_IRQHandler+0x1d4>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d022      	beq.n	8003160 <HAL_DMA_IRQHandler+0x194>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a21      	ldr	r2, [pc, #132]	; (80031a4 <HAL_DMA_IRQHandler+0x1d8>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d01d      	beq.n	8003160 <HAL_DMA_IRQHandler+0x194>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a1f      	ldr	r2, [pc, #124]	; (80031a8 <HAL_DMA_IRQHandler+0x1dc>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d018      	beq.n	8003160 <HAL_DMA_IRQHandler+0x194>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a1e      	ldr	r2, [pc, #120]	; (80031ac <HAL_DMA_IRQHandler+0x1e0>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d013      	beq.n	8003160 <HAL_DMA_IRQHandler+0x194>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a1c      	ldr	r2, [pc, #112]	; (80031b0 <HAL_DMA_IRQHandler+0x1e4>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d00e      	beq.n	8003160 <HAL_DMA_IRQHandler+0x194>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a1b      	ldr	r2, [pc, #108]	; (80031b4 <HAL_DMA_IRQHandler+0x1e8>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d009      	beq.n	8003160 <HAL_DMA_IRQHandler+0x194>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a19      	ldr	r2, [pc, #100]	; (80031b8 <HAL_DMA_IRQHandler+0x1ec>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d004      	beq.n	8003160 <HAL_DMA_IRQHandler+0x194>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a18      	ldr	r2, [pc, #96]	; (80031bc <HAL_DMA_IRQHandler+0x1f0>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d12f      	bne.n	80031c0 <HAL_DMA_IRQHandler+0x1f4>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0304 	and.w	r3, r3, #4
 800316a:	2b00      	cmp	r3, #0
 800316c:	bf14      	ite	ne
 800316e:	2301      	movne	r3, #1
 8003170:	2300      	moveq	r3, #0
 8003172:	b2db      	uxtb	r3, r3
 8003174:	e02e      	b.n	80031d4 <HAL_DMA_IRQHandler+0x208>
 8003176:	bf00      	nop
 8003178:	24000000 	.word	0x24000000
 800317c:	1b4e81b5 	.word	0x1b4e81b5
 8003180:	40020010 	.word	0x40020010
 8003184:	40020028 	.word	0x40020028
 8003188:	40020040 	.word	0x40020040
 800318c:	40020058 	.word	0x40020058
 8003190:	40020070 	.word	0x40020070
 8003194:	40020088 	.word	0x40020088
 8003198:	400200a0 	.word	0x400200a0
 800319c:	400200b8 	.word	0x400200b8
 80031a0:	40020410 	.word	0x40020410
 80031a4:	40020428 	.word	0x40020428
 80031a8:	40020440 	.word	0x40020440
 80031ac:	40020458 	.word	0x40020458
 80031b0:	40020470 	.word	0x40020470
 80031b4:	40020488 	.word	0x40020488
 80031b8:	400204a0 	.word	0x400204a0
 80031bc:	400204b8 	.word	0x400204b8
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	bf14      	ite	ne
 80031ce:	2301      	movne	r3, #1
 80031d0:	2300      	moveq	r3, #0
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d015      	beq.n	8003204 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0204 	bic.w	r2, r2, #4
 80031e6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ec:	f003 031f 	and.w	r3, r3, #31
 80031f0:	2208      	movs	r2, #8
 80031f2:	409a      	lsls	r2, r3
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fc:	f043 0201 	orr.w	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003208:	f003 031f 	and.w	r3, r3, #31
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	fa22 f303 	lsr.w	r3, r2, r3
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d06e      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a69      	ldr	r2, [pc, #420]	; (80033c4 <HAL_DMA_IRQHandler+0x3f8>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d04a      	beq.n	80032ba <HAL_DMA_IRQHandler+0x2ee>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a67      	ldr	r2, [pc, #412]	; (80033c8 <HAL_DMA_IRQHandler+0x3fc>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d045      	beq.n	80032ba <HAL_DMA_IRQHandler+0x2ee>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a66      	ldr	r2, [pc, #408]	; (80033cc <HAL_DMA_IRQHandler+0x400>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d040      	beq.n	80032ba <HAL_DMA_IRQHandler+0x2ee>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a64      	ldr	r2, [pc, #400]	; (80033d0 <HAL_DMA_IRQHandler+0x404>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d03b      	beq.n	80032ba <HAL_DMA_IRQHandler+0x2ee>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a63      	ldr	r2, [pc, #396]	; (80033d4 <HAL_DMA_IRQHandler+0x408>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d036      	beq.n	80032ba <HAL_DMA_IRQHandler+0x2ee>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a61      	ldr	r2, [pc, #388]	; (80033d8 <HAL_DMA_IRQHandler+0x40c>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d031      	beq.n	80032ba <HAL_DMA_IRQHandler+0x2ee>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a60      	ldr	r2, [pc, #384]	; (80033dc <HAL_DMA_IRQHandler+0x410>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d02c      	beq.n	80032ba <HAL_DMA_IRQHandler+0x2ee>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a5e      	ldr	r2, [pc, #376]	; (80033e0 <HAL_DMA_IRQHandler+0x414>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d027      	beq.n	80032ba <HAL_DMA_IRQHandler+0x2ee>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a5d      	ldr	r2, [pc, #372]	; (80033e4 <HAL_DMA_IRQHandler+0x418>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d022      	beq.n	80032ba <HAL_DMA_IRQHandler+0x2ee>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a5b      	ldr	r2, [pc, #364]	; (80033e8 <HAL_DMA_IRQHandler+0x41c>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d01d      	beq.n	80032ba <HAL_DMA_IRQHandler+0x2ee>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a5a      	ldr	r2, [pc, #360]	; (80033ec <HAL_DMA_IRQHandler+0x420>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d018      	beq.n	80032ba <HAL_DMA_IRQHandler+0x2ee>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a58      	ldr	r2, [pc, #352]	; (80033f0 <HAL_DMA_IRQHandler+0x424>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d013      	beq.n	80032ba <HAL_DMA_IRQHandler+0x2ee>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a57      	ldr	r2, [pc, #348]	; (80033f4 <HAL_DMA_IRQHandler+0x428>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d00e      	beq.n	80032ba <HAL_DMA_IRQHandler+0x2ee>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a55      	ldr	r2, [pc, #340]	; (80033f8 <HAL_DMA_IRQHandler+0x42c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d009      	beq.n	80032ba <HAL_DMA_IRQHandler+0x2ee>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a54      	ldr	r2, [pc, #336]	; (80033fc <HAL_DMA_IRQHandler+0x430>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d004      	beq.n	80032ba <HAL_DMA_IRQHandler+0x2ee>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a52      	ldr	r2, [pc, #328]	; (8003400 <HAL_DMA_IRQHandler+0x434>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d10a      	bne.n	80032d0 <HAL_DMA_IRQHandler+0x304>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	bf14      	ite	ne
 80032c8:	2301      	movne	r3, #1
 80032ca:	2300      	moveq	r3, #0
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	e003      	b.n	80032d8 <HAL_DMA_IRQHandler+0x30c>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2300      	movs	r3, #0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00d      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e0:	f003 031f 	and.w	r3, r3, #31
 80032e4:	2201      	movs	r2, #1
 80032e6:	409a      	lsls	r2, r3
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f0:	f043 0202 	orr.w	r2, r3, #2
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fc:	f003 031f 	and.w	r3, r3, #31
 8003300:	2204      	movs	r2, #4
 8003302:	409a      	lsls	r2, r3
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	4013      	ands	r3, r2
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 808f 	beq.w	800342c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a2c      	ldr	r2, [pc, #176]	; (80033c4 <HAL_DMA_IRQHandler+0x3f8>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d04a      	beq.n	80033ae <HAL_DMA_IRQHandler+0x3e2>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a2a      	ldr	r2, [pc, #168]	; (80033c8 <HAL_DMA_IRQHandler+0x3fc>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d045      	beq.n	80033ae <HAL_DMA_IRQHandler+0x3e2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a29      	ldr	r2, [pc, #164]	; (80033cc <HAL_DMA_IRQHandler+0x400>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d040      	beq.n	80033ae <HAL_DMA_IRQHandler+0x3e2>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a27      	ldr	r2, [pc, #156]	; (80033d0 <HAL_DMA_IRQHandler+0x404>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d03b      	beq.n	80033ae <HAL_DMA_IRQHandler+0x3e2>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a26      	ldr	r2, [pc, #152]	; (80033d4 <HAL_DMA_IRQHandler+0x408>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d036      	beq.n	80033ae <HAL_DMA_IRQHandler+0x3e2>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a24      	ldr	r2, [pc, #144]	; (80033d8 <HAL_DMA_IRQHandler+0x40c>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d031      	beq.n	80033ae <HAL_DMA_IRQHandler+0x3e2>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a23      	ldr	r2, [pc, #140]	; (80033dc <HAL_DMA_IRQHandler+0x410>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d02c      	beq.n	80033ae <HAL_DMA_IRQHandler+0x3e2>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a21      	ldr	r2, [pc, #132]	; (80033e0 <HAL_DMA_IRQHandler+0x414>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d027      	beq.n	80033ae <HAL_DMA_IRQHandler+0x3e2>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a20      	ldr	r2, [pc, #128]	; (80033e4 <HAL_DMA_IRQHandler+0x418>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d022      	beq.n	80033ae <HAL_DMA_IRQHandler+0x3e2>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a1e      	ldr	r2, [pc, #120]	; (80033e8 <HAL_DMA_IRQHandler+0x41c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d01d      	beq.n	80033ae <HAL_DMA_IRQHandler+0x3e2>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a1d      	ldr	r2, [pc, #116]	; (80033ec <HAL_DMA_IRQHandler+0x420>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d018      	beq.n	80033ae <HAL_DMA_IRQHandler+0x3e2>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a1b      	ldr	r2, [pc, #108]	; (80033f0 <HAL_DMA_IRQHandler+0x424>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d013      	beq.n	80033ae <HAL_DMA_IRQHandler+0x3e2>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a1a      	ldr	r2, [pc, #104]	; (80033f4 <HAL_DMA_IRQHandler+0x428>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d00e      	beq.n	80033ae <HAL_DMA_IRQHandler+0x3e2>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a18      	ldr	r2, [pc, #96]	; (80033f8 <HAL_DMA_IRQHandler+0x42c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d009      	beq.n	80033ae <HAL_DMA_IRQHandler+0x3e2>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a17      	ldr	r2, [pc, #92]	; (80033fc <HAL_DMA_IRQHandler+0x430>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d004      	beq.n	80033ae <HAL_DMA_IRQHandler+0x3e2>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a15      	ldr	r2, [pc, #84]	; (8003400 <HAL_DMA_IRQHandler+0x434>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d12a      	bne.n	8003404 <HAL_DMA_IRQHandler+0x438>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	bf14      	ite	ne
 80033bc:	2301      	movne	r3, #1
 80033be:	2300      	moveq	r3, #0
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	e023      	b.n	800340c <HAL_DMA_IRQHandler+0x440>
 80033c4:	40020010 	.word	0x40020010
 80033c8:	40020028 	.word	0x40020028
 80033cc:	40020040 	.word	0x40020040
 80033d0:	40020058 	.word	0x40020058
 80033d4:	40020070 	.word	0x40020070
 80033d8:	40020088 	.word	0x40020088
 80033dc:	400200a0 	.word	0x400200a0
 80033e0:	400200b8 	.word	0x400200b8
 80033e4:	40020410 	.word	0x40020410
 80033e8:	40020428 	.word	0x40020428
 80033ec:	40020440 	.word	0x40020440
 80033f0:	40020458 	.word	0x40020458
 80033f4:	40020470 	.word	0x40020470
 80033f8:	40020488 	.word	0x40020488
 80033fc:	400204a0 	.word	0x400204a0
 8003400:	400204b8 	.word	0x400204b8
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2300      	movs	r3, #0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00d      	beq.n	800342c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003414:	f003 031f 	and.w	r3, r3, #31
 8003418:	2204      	movs	r2, #4
 800341a:	409a      	lsls	r2, r3
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003424:	f043 0204 	orr.w	r2, r3, #4
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003430:	f003 031f 	and.w	r3, r3, #31
 8003434:	2210      	movs	r2, #16
 8003436:	409a      	lsls	r2, r3
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	4013      	ands	r3, r2
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 80a6 	beq.w	800358e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a85      	ldr	r2, [pc, #532]	; (800365c <HAL_DMA_IRQHandler+0x690>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d04a      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x516>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a83      	ldr	r2, [pc, #524]	; (8003660 <HAL_DMA_IRQHandler+0x694>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d045      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x516>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a82      	ldr	r2, [pc, #520]	; (8003664 <HAL_DMA_IRQHandler+0x698>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d040      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x516>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a80      	ldr	r2, [pc, #512]	; (8003668 <HAL_DMA_IRQHandler+0x69c>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d03b      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x516>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a7f      	ldr	r2, [pc, #508]	; (800366c <HAL_DMA_IRQHandler+0x6a0>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d036      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x516>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a7d      	ldr	r2, [pc, #500]	; (8003670 <HAL_DMA_IRQHandler+0x6a4>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d031      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x516>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a7c      	ldr	r2, [pc, #496]	; (8003674 <HAL_DMA_IRQHandler+0x6a8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d02c      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x516>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a7a      	ldr	r2, [pc, #488]	; (8003678 <HAL_DMA_IRQHandler+0x6ac>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d027      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x516>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a79      	ldr	r2, [pc, #484]	; (800367c <HAL_DMA_IRQHandler+0x6b0>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d022      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x516>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a77      	ldr	r2, [pc, #476]	; (8003680 <HAL_DMA_IRQHandler+0x6b4>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d01d      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x516>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a76      	ldr	r2, [pc, #472]	; (8003684 <HAL_DMA_IRQHandler+0x6b8>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d018      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x516>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a74      	ldr	r2, [pc, #464]	; (8003688 <HAL_DMA_IRQHandler+0x6bc>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d013      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x516>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a73      	ldr	r2, [pc, #460]	; (800368c <HAL_DMA_IRQHandler+0x6c0>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d00e      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x516>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a71      	ldr	r2, [pc, #452]	; (8003690 <HAL_DMA_IRQHandler+0x6c4>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d009      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x516>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a70      	ldr	r2, [pc, #448]	; (8003694 <HAL_DMA_IRQHandler+0x6c8>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d004      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x516>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a6e      	ldr	r2, [pc, #440]	; (8003698 <HAL_DMA_IRQHandler+0x6cc>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d10a      	bne.n	80034f8 <HAL_DMA_IRQHandler+0x52c>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0308 	and.w	r3, r3, #8
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	bf14      	ite	ne
 80034f0:	2301      	movne	r3, #1
 80034f2:	2300      	moveq	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	e009      	b.n	800350c <HAL_DMA_IRQHandler+0x540>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	2b00      	cmp	r3, #0
 8003504:	bf14      	ite	ne
 8003506:	2301      	movne	r3, #1
 8003508:	2300      	moveq	r3, #0
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	d03e      	beq.n	800358e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003514:	f003 031f 	and.w	r3, r3, #31
 8003518:	2210      	movs	r2, #16
 800351a:	409a      	lsls	r2, r3
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d018      	beq.n	8003560 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d108      	bne.n	800354e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003540:	2b00      	cmp	r3, #0
 8003542:	d024      	beq.n	800358e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	4798      	blx	r3
 800354c:	e01f      	b.n	800358e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003552:	2b00      	cmp	r3, #0
 8003554:	d01b      	beq.n	800358e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	4798      	blx	r3
 800355e:	e016      	b.n	800358e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356a:	2b00      	cmp	r3, #0
 800356c:	d107      	bne.n	800357e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 0208 	bic.w	r2, r2, #8
 800357c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003592:	f003 031f 	and.w	r3, r3, #31
 8003596:	2220      	movs	r2, #32
 8003598:	409a      	lsls	r2, r3
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	4013      	ands	r3, r2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 8110 	beq.w	80037c4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a2c      	ldr	r2, [pc, #176]	; (800365c <HAL_DMA_IRQHandler+0x690>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d04a      	beq.n	8003644 <HAL_DMA_IRQHandler+0x678>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a2b      	ldr	r2, [pc, #172]	; (8003660 <HAL_DMA_IRQHandler+0x694>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d045      	beq.n	8003644 <HAL_DMA_IRQHandler+0x678>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a29      	ldr	r2, [pc, #164]	; (8003664 <HAL_DMA_IRQHandler+0x698>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d040      	beq.n	8003644 <HAL_DMA_IRQHandler+0x678>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a28      	ldr	r2, [pc, #160]	; (8003668 <HAL_DMA_IRQHandler+0x69c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d03b      	beq.n	8003644 <HAL_DMA_IRQHandler+0x678>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a26      	ldr	r2, [pc, #152]	; (800366c <HAL_DMA_IRQHandler+0x6a0>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d036      	beq.n	8003644 <HAL_DMA_IRQHandler+0x678>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a25      	ldr	r2, [pc, #148]	; (8003670 <HAL_DMA_IRQHandler+0x6a4>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d031      	beq.n	8003644 <HAL_DMA_IRQHandler+0x678>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a23      	ldr	r2, [pc, #140]	; (8003674 <HAL_DMA_IRQHandler+0x6a8>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d02c      	beq.n	8003644 <HAL_DMA_IRQHandler+0x678>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a22      	ldr	r2, [pc, #136]	; (8003678 <HAL_DMA_IRQHandler+0x6ac>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d027      	beq.n	8003644 <HAL_DMA_IRQHandler+0x678>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a20      	ldr	r2, [pc, #128]	; (800367c <HAL_DMA_IRQHandler+0x6b0>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d022      	beq.n	8003644 <HAL_DMA_IRQHandler+0x678>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a1f      	ldr	r2, [pc, #124]	; (8003680 <HAL_DMA_IRQHandler+0x6b4>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d01d      	beq.n	8003644 <HAL_DMA_IRQHandler+0x678>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a1d      	ldr	r2, [pc, #116]	; (8003684 <HAL_DMA_IRQHandler+0x6b8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d018      	beq.n	8003644 <HAL_DMA_IRQHandler+0x678>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a1c      	ldr	r2, [pc, #112]	; (8003688 <HAL_DMA_IRQHandler+0x6bc>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d013      	beq.n	8003644 <HAL_DMA_IRQHandler+0x678>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a1a      	ldr	r2, [pc, #104]	; (800368c <HAL_DMA_IRQHandler+0x6c0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d00e      	beq.n	8003644 <HAL_DMA_IRQHandler+0x678>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a19      	ldr	r2, [pc, #100]	; (8003690 <HAL_DMA_IRQHandler+0x6c4>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d009      	beq.n	8003644 <HAL_DMA_IRQHandler+0x678>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a17      	ldr	r2, [pc, #92]	; (8003694 <HAL_DMA_IRQHandler+0x6c8>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d004      	beq.n	8003644 <HAL_DMA_IRQHandler+0x678>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a16      	ldr	r2, [pc, #88]	; (8003698 <HAL_DMA_IRQHandler+0x6cc>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d12b      	bne.n	800369c <HAL_DMA_IRQHandler+0x6d0>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0310 	and.w	r3, r3, #16
 800364e:	2b00      	cmp	r3, #0
 8003650:	bf14      	ite	ne
 8003652:	2301      	movne	r3, #1
 8003654:	2300      	moveq	r3, #0
 8003656:	b2db      	uxtb	r3, r3
 8003658:	e02a      	b.n	80036b0 <HAL_DMA_IRQHandler+0x6e4>
 800365a:	bf00      	nop
 800365c:	40020010 	.word	0x40020010
 8003660:	40020028 	.word	0x40020028
 8003664:	40020040 	.word	0x40020040
 8003668:	40020058 	.word	0x40020058
 800366c:	40020070 	.word	0x40020070
 8003670:	40020088 	.word	0x40020088
 8003674:	400200a0 	.word	0x400200a0
 8003678:	400200b8 	.word	0x400200b8
 800367c:	40020410 	.word	0x40020410
 8003680:	40020428 	.word	0x40020428
 8003684:	40020440 	.word	0x40020440
 8003688:	40020458 	.word	0x40020458
 800368c:	40020470 	.word	0x40020470
 8003690:	40020488 	.word	0x40020488
 8003694:	400204a0 	.word	0x400204a0
 8003698:	400204b8 	.word	0x400204b8
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	bf14      	ite	ne
 80036aa:	2301      	movne	r3, #1
 80036ac:	2300      	moveq	r3, #0
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 8087 	beq.w	80037c4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ba:	f003 031f 	and.w	r3, r3, #31
 80036be:	2220      	movs	r2, #32
 80036c0:	409a      	lsls	r2, r3
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	d139      	bne.n	8003746 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0216 	bic.w	r2, r2, #22
 80036e0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	695a      	ldr	r2, [r3, #20]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036f0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d103      	bne.n	8003702 <HAL_DMA_IRQHandler+0x736>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d007      	beq.n	8003712 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0208 	bic.w	r2, r2, #8
 8003710:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003716:	f003 031f 	and.w	r3, r3, #31
 800371a:	223f      	movs	r2, #63	; 0x3f
 800371c:	409a      	lsls	r2, r3
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 8382 	beq.w	8003e40 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	4798      	blx	r3
          }
          return;
 8003744:	e37c      	b.n	8003e40 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d018      	beq.n	8003786 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d108      	bne.n	8003774 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003766:	2b00      	cmp	r3, #0
 8003768:	d02c      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	4798      	blx	r3
 8003772:	e027      	b.n	80037c4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003778:	2b00      	cmp	r3, #0
 800377a:	d023      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	4798      	blx	r3
 8003784:	e01e      	b.n	80037c4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003790:	2b00      	cmp	r3, #0
 8003792:	d10f      	bne.n	80037b4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0210 	bic.w	r2, r2, #16
 80037a2:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 833e 	beq.w	8003e4a <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 8088 	beq.w	80038ec <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2204      	movs	r2, #4
 80037e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a8e      	ldr	r2, [pc, #568]	; (8003a24 <HAL_DMA_IRQHandler+0xa58>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d04a      	beq.n	8003884 <HAL_DMA_IRQHandler+0x8b8>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a8d      	ldr	r2, [pc, #564]	; (8003a28 <HAL_DMA_IRQHandler+0xa5c>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d045      	beq.n	8003884 <HAL_DMA_IRQHandler+0x8b8>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a8b      	ldr	r2, [pc, #556]	; (8003a2c <HAL_DMA_IRQHandler+0xa60>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d040      	beq.n	8003884 <HAL_DMA_IRQHandler+0x8b8>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a8a      	ldr	r2, [pc, #552]	; (8003a30 <HAL_DMA_IRQHandler+0xa64>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d03b      	beq.n	8003884 <HAL_DMA_IRQHandler+0x8b8>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a88      	ldr	r2, [pc, #544]	; (8003a34 <HAL_DMA_IRQHandler+0xa68>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d036      	beq.n	8003884 <HAL_DMA_IRQHandler+0x8b8>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a87      	ldr	r2, [pc, #540]	; (8003a38 <HAL_DMA_IRQHandler+0xa6c>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d031      	beq.n	8003884 <HAL_DMA_IRQHandler+0x8b8>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a85      	ldr	r2, [pc, #532]	; (8003a3c <HAL_DMA_IRQHandler+0xa70>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d02c      	beq.n	8003884 <HAL_DMA_IRQHandler+0x8b8>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a84      	ldr	r2, [pc, #528]	; (8003a40 <HAL_DMA_IRQHandler+0xa74>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d027      	beq.n	8003884 <HAL_DMA_IRQHandler+0x8b8>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a82      	ldr	r2, [pc, #520]	; (8003a44 <HAL_DMA_IRQHandler+0xa78>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d022      	beq.n	8003884 <HAL_DMA_IRQHandler+0x8b8>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a81      	ldr	r2, [pc, #516]	; (8003a48 <HAL_DMA_IRQHandler+0xa7c>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d01d      	beq.n	8003884 <HAL_DMA_IRQHandler+0x8b8>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a7f      	ldr	r2, [pc, #508]	; (8003a4c <HAL_DMA_IRQHandler+0xa80>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d018      	beq.n	8003884 <HAL_DMA_IRQHandler+0x8b8>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a7e      	ldr	r2, [pc, #504]	; (8003a50 <HAL_DMA_IRQHandler+0xa84>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d013      	beq.n	8003884 <HAL_DMA_IRQHandler+0x8b8>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a7c      	ldr	r2, [pc, #496]	; (8003a54 <HAL_DMA_IRQHandler+0xa88>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d00e      	beq.n	8003884 <HAL_DMA_IRQHandler+0x8b8>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a7b      	ldr	r2, [pc, #492]	; (8003a58 <HAL_DMA_IRQHandler+0xa8c>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d009      	beq.n	8003884 <HAL_DMA_IRQHandler+0x8b8>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a79      	ldr	r2, [pc, #484]	; (8003a5c <HAL_DMA_IRQHandler+0xa90>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d004      	beq.n	8003884 <HAL_DMA_IRQHandler+0x8b8>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a78      	ldr	r2, [pc, #480]	; (8003a60 <HAL_DMA_IRQHandler+0xa94>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d108      	bne.n	8003896 <HAL_DMA_IRQHandler+0x8ca>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0201 	bic.w	r2, r2, #1
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	e007      	b.n	80038a6 <HAL_DMA_IRQHandler+0x8da>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0201 	bic.w	r2, r2, #1
 80038a4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	3301      	adds	r3, #1
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d307      	bcc.n	80038c2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1f2      	bne.n	80038a6 <HAL_DMA_IRQHandler+0x8da>
 80038c0:	e000      	b.n	80038c4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80038c2:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d004      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2203      	movs	r2, #3
 80038de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80038e2:	e003      	b.n	80038ec <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f000 82aa 	beq.w	8003e4a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	4798      	blx	r3
 80038fe:	e2a4      	b.n	8003e4a <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a57      	ldr	r2, [pc, #348]	; (8003a64 <HAL_DMA_IRQHandler+0xa98>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d04a      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x9d4>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a56      	ldr	r2, [pc, #344]	; (8003a68 <HAL_DMA_IRQHandler+0xa9c>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d045      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x9d4>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a54      	ldr	r2, [pc, #336]	; (8003a6c <HAL_DMA_IRQHandler+0xaa0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d040      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x9d4>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a53      	ldr	r2, [pc, #332]	; (8003a70 <HAL_DMA_IRQHandler+0xaa4>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d03b      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x9d4>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a51      	ldr	r2, [pc, #324]	; (8003a74 <HAL_DMA_IRQHandler+0xaa8>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d036      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x9d4>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a50      	ldr	r2, [pc, #320]	; (8003a78 <HAL_DMA_IRQHandler+0xaac>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d031      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x9d4>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a4e      	ldr	r2, [pc, #312]	; (8003a7c <HAL_DMA_IRQHandler+0xab0>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d02c      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x9d4>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a4d      	ldr	r2, [pc, #308]	; (8003a80 <HAL_DMA_IRQHandler+0xab4>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d027      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x9d4>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a4b      	ldr	r2, [pc, #300]	; (8003a84 <HAL_DMA_IRQHandler+0xab8>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d022      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x9d4>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a4a      	ldr	r2, [pc, #296]	; (8003a88 <HAL_DMA_IRQHandler+0xabc>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d01d      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x9d4>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a48      	ldr	r2, [pc, #288]	; (8003a8c <HAL_DMA_IRQHandler+0xac0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d018      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x9d4>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a47      	ldr	r2, [pc, #284]	; (8003a90 <HAL_DMA_IRQHandler+0xac4>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d013      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x9d4>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a45      	ldr	r2, [pc, #276]	; (8003a94 <HAL_DMA_IRQHandler+0xac8>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d00e      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x9d4>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a44      	ldr	r2, [pc, #272]	; (8003a98 <HAL_DMA_IRQHandler+0xacc>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d009      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x9d4>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a42      	ldr	r2, [pc, #264]	; (8003a9c <HAL_DMA_IRQHandler+0xad0>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d004      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x9d4>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a41      	ldr	r2, [pc, #260]	; (8003aa0 <HAL_DMA_IRQHandler+0xad4>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d101      	bne.n	80039a4 <HAL_DMA_IRQHandler+0x9d8>
 80039a0:	2301      	movs	r3, #1
 80039a2:	e000      	b.n	80039a6 <HAL_DMA_IRQHandler+0x9da>
 80039a4:	2300      	movs	r3, #0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 824f 	beq.w	8003e4a <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b8:	f003 031f 	and.w	r3, r3, #31
 80039bc:	2204      	movs	r2, #4
 80039be:	409a      	lsls	r2, r3
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	4013      	ands	r3, r2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 80dd 	beq.w	8003b84 <HAL_DMA_IRQHandler+0xbb8>
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 80d7 	beq.w	8003b84 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039da:	f003 031f 	and.w	r3, r3, #31
 80039de:	2204      	movs	r2, #4
 80039e0:	409a      	lsls	r2, r3
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d059      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d109      	bne.n	8003a0e <HAL_DMA_IRQHandler+0xa42>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f000 8220 	beq.w	8003e44 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a0c:	e21a      	b.n	8003e44 <HAL_DMA_IRQHandler+0xe78>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 8216 	beq.w	8003e44 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a20:	e210      	b.n	8003e44 <HAL_DMA_IRQHandler+0xe78>
 8003a22:	bf00      	nop
 8003a24:	40020010 	.word	0x40020010
 8003a28:	40020028 	.word	0x40020028
 8003a2c:	40020040 	.word	0x40020040
 8003a30:	40020058 	.word	0x40020058
 8003a34:	40020070 	.word	0x40020070
 8003a38:	40020088 	.word	0x40020088
 8003a3c:	400200a0 	.word	0x400200a0
 8003a40:	400200b8 	.word	0x400200b8
 8003a44:	40020410 	.word	0x40020410
 8003a48:	40020428 	.word	0x40020428
 8003a4c:	40020440 	.word	0x40020440
 8003a50:	40020458 	.word	0x40020458
 8003a54:	40020470 	.word	0x40020470
 8003a58:	40020488 	.word	0x40020488
 8003a5c:	400204a0 	.word	0x400204a0
 8003a60:	400204b8 	.word	0x400204b8
 8003a64:	48022c08 	.word	0x48022c08
 8003a68:	48022c1c 	.word	0x48022c1c
 8003a6c:	48022c30 	.word	0x48022c30
 8003a70:	48022c44 	.word	0x48022c44
 8003a74:	48022c58 	.word	0x48022c58
 8003a78:	48022c6c 	.word	0x48022c6c
 8003a7c:	48022c80 	.word	0x48022c80
 8003a80:	48022c94 	.word	0x48022c94
 8003a84:	58025408 	.word	0x58025408
 8003a88:	5802541c 	.word	0x5802541c
 8003a8c:	58025430 	.word	0x58025430
 8003a90:	58025444 	.word	0x58025444
 8003a94:	58025458 	.word	0x58025458
 8003a98:	5802546c 	.word	0x5802546c
 8003a9c:	58025480 	.word	0x58025480
 8003aa0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d160      	bne.n	8003b70 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a8c      	ldr	r2, [pc, #560]	; (8003ce4 <HAL_DMA_IRQHandler+0xd18>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d04a      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xb82>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a8a      	ldr	r2, [pc, #552]	; (8003ce8 <HAL_DMA_IRQHandler+0xd1c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d045      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xb82>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a89      	ldr	r2, [pc, #548]	; (8003cec <HAL_DMA_IRQHandler+0xd20>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d040      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xb82>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a87      	ldr	r2, [pc, #540]	; (8003cf0 <HAL_DMA_IRQHandler+0xd24>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d03b      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xb82>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a86      	ldr	r2, [pc, #536]	; (8003cf4 <HAL_DMA_IRQHandler+0xd28>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d036      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xb82>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a84      	ldr	r2, [pc, #528]	; (8003cf8 <HAL_DMA_IRQHandler+0xd2c>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d031      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xb82>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a83      	ldr	r2, [pc, #524]	; (8003cfc <HAL_DMA_IRQHandler+0xd30>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d02c      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xb82>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a81      	ldr	r2, [pc, #516]	; (8003d00 <HAL_DMA_IRQHandler+0xd34>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d027      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xb82>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a80      	ldr	r2, [pc, #512]	; (8003d04 <HAL_DMA_IRQHandler+0xd38>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d022      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xb82>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a7e      	ldr	r2, [pc, #504]	; (8003d08 <HAL_DMA_IRQHandler+0xd3c>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d01d      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xb82>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a7d      	ldr	r2, [pc, #500]	; (8003d0c <HAL_DMA_IRQHandler+0xd40>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d018      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xb82>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a7b      	ldr	r2, [pc, #492]	; (8003d10 <HAL_DMA_IRQHandler+0xd44>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d013      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xb82>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a7a      	ldr	r2, [pc, #488]	; (8003d14 <HAL_DMA_IRQHandler+0xd48>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d00e      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xb82>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a78      	ldr	r2, [pc, #480]	; (8003d18 <HAL_DMA_IRQHandler+0xd4c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d009      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xb82>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a77      	ldr	r2, [pc, #476]	; (8003d1c <HAL_DMA_IRQHandler+0xd50>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d004      	beq.n	8003b4e <HAL_DMA_IRQHandler+0xb82>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a75      	ldr	r2, [pc, #468]	; (8003d20 <HAL_DMA_IRQHandler+0xd54>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d108      	bne.n	8003b60 <HAL_DMA_IRQHandler+0xb94>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0208 	bic.w	r2, r2, #8
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	e007      	b.n	8003b70 <HAL_DMA_IRQHandler+0xba4>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0204 	bic.w	r2, r2, #4
 8003b6e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 8165 	beq.w	8003e44 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b82:	e15f      	b.n	8003e44 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b88:	f003 031f 	and.w	r3, r3, #31
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	409a      	lsls	r2, r3
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	4013      	ands	r3, r2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 80c5 	beq.w	8003d24 <HAL_DMA_IRQHandler+0xd58>
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 80bf 	beq.w	8003d24 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003baa:	f003 031f 	and.w	r3, r3, #31
 8003bae:	2202      	movs	r2, #2
 8003bb0:	409a      	lsls	r2, r3
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d018      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d109      	bne.n	8003bde <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 813a 	beq.w	8003e48 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bdc:	e134      	b.n	8003e48 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f000 8130 	beq.w	8003e48 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bf0:	e12a      	b.n	8003e48 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f003 0320 	and.w	r3, r3, #32
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d168      	bne.n	8003cce <HAL_DMA_IRQHandler+0xd02>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a38      	ldr	r2, [pc, #224]	; (8003ce4 <HAL_DMA_IRQHandler+0xd18>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d04a      	beq.n	8003c9c <HAL_DMA_IRQHandler+0xcd0>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a37      	ldr	r2, [pc, #220]	; (8003ce8 <HAL_DMA_IRQHandler+0xd1c>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d045      	beq.n	8003c9c <HAL_DMA_IRQHandler+0xcd0>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a35      	ldr	r2, [pc, #212]	; (8003cec <HAL_DMA_IRQHandler+0xd20>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d040      	beq.n	8003c9c <HAL_DMA_IRQHandler+0xcd0>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a34      	ldr	r2, [pc, #208]	; (8003cf0 <HAL_DMA_IRQHandler+0xd24>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d03b      	beq.n	8003c9c <HAL_DMA_IRQHandler+0xcd0>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a32      	ldr	r2, [pc, #200]	; (8003cf4 <HAL_DMA_IRQHandler+0xd28>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d036      	beq.n	8003c9c <HAL_DMA_IRQHandler+0xcd0>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a31      	ldr	r2, [pc, #196]	; (8003cf8 <HAL_DMA_IRQHandler+0xd2c>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d031      	beq.n	8003c9c <HAL_DMA_IRQHandler+0xcd0>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a2f      	ldr	r2, [pc, #188]	; (8003cfc <HAL_DMA_IRQHandler+0xd30>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d02c      	beq.n	8003c9c <HAL_DMA_IRQHandler+0xcd0>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a2e      	ldr	r2, [pc, #184]	; (8003d00 <HAL_DMA_IRQHandler+0xd34>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d027      	beq.n	8003c9c <HAL_DMA_IRQHandler+0xcd0>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a2c      	ldr	r2, [pc, #176]	; (8003d04 <HAL_DMA_IRQHandler+0xd38>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d022      	beq.n	8003c9c <HAL_DMA_IRQHandler+0xcd0>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a2b      	ldr	r2, [pc, #172]	; (8003d08 <HAL_DMA_IRQHandler+0xd3c>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d01d      	beq.n	8003c9c <HAL_DMA_IRQHandler+0xcd0>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a29      	ldr	r2, [pc, #164]	; (8003d0c <HAL_DMA_IRQHandler+0xd40>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d018      	beq.n	8003c9c <HAL_DMA_IRQHandler+0xcd0>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a28      	ldr	r2, [pc, #160]	; (8003d10 <HAL_DMA_IRQHandler+0xd44>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d013      	beq.n	8003c9c <HAL_DMA_IRQHandler+0xcd0>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a26      	ldr	r2, [pc, #152]	; (8003d14 <HAL_DMA_IRQHandler+0xd48>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d00e      	beq.n	8003c9c <HAL_DMA_IRQHandler+0xcd0>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a25      	ldr	r2, [pc, #148]	; (8003d18 <HAL_DMA_IRQHandler+0xd4c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d009      	beq.n	8003c9c <HAL_DMA_IRQHandler+0xcd0>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a23      	ldr	r2, [pc, #140]	; (8003d1c <HAL_DMA_IRQHandler+0xd50>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d004      	beq.n	8003c9c <HAL_DMA_IRQHandler+0xcd0>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a22      	ldr	r2, [pc, #136]	; (8003d20 <HAL_DMA_IRQHandler+0xd54>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d108      	bne.n	8003cae <HAL_DMA_IRQHandler+0xce2>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 0214 	bic.w	r2, r2, #20
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	e007      	b.n	8003cbe <HAL_DMA_IRQHandler+0xcf2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 020a 	bic.w	r2, r2, #10
 8003cbc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 80b8 	beq.w	8003e48 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ce0:	e0b2      	b.n	8003e48 <HAL_DMA_IRQHandler+0xe7c>
 8003ce2:	bf00      	nop
 8003ce4:	40020010 	.word	0x40020010
 8003ce8:	40020028 	.word	0x40020028
 8003cec:	40020040 	.word	0x40020040
 8003cf0:	40020058 	.word	0x40020058
 8003cf4:	40020070 	.word	0x40020070
 8003cf8:	40020088 	.word	0x40020088
 8003cfc:	400200a0 	.word	0x400200a0
 8003d00:	400200b8 	.word	0x400200b8
 8003d04:	40020410 	.word	0x40020410
 8003d08:	40020428 	.word	0x40020428
 8003d0c:	40020440 	.word	0x40020440
 8003d10:	40020458 	.word	0x40020458
 8003d14:	40020470 	.word	0x40020470
 8003d18:	40020488 	.word	0x40020488
 8003d1c:	400204a0 	.word	0x400204a0
 8003d20:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d28:	f003 031f 	and.w	r3, r3, #31
 8003d2c:	2208      	movs	r2, #8
 8003d2e:	409a      	lsls	r2, r3
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	4013      	ands	r3, r2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 8088 	beq.w	8003e4a <HAL_DMA_IRQHandler+0xe7e>
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	f003 0308 	and.w	r3, r3, #8
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 8082 	beq.w	8003e4a <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a41      	ldr	r2, [pc, #260]	; (8003e50 <HAL_DMA_IRQHandler+0xe84>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d04a      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xe1a>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a3f      	ldr	r2, [pc, #252]	; (8003e54 <HAL_DMA_IRQHandler+0xe88>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d045      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xe1a>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a3e      	ldr	r2, [pc, #248]	; (8003e58 <HAL_DMA_IRQHandler+0xe8c>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d040      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xe1a>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a3c      	ldr	r2, [pc, #240]	; (8003e5c <HAL_DMA_IRQHandler+0xe90>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d03b      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xe1a>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a3b      	ldr	r2, [pc, #236]	; (8003e60 <HAL_DMA_IRQHandler+0xe94>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d036      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xe1a>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a39      	ldr	r2, [pc, #228]	; (8003e64 <HAL_DMA_IRQHandler+0xe98>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d031      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xe1a>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a38      	ldr	r2, [pc, #224]	; (8003e68 <HAL_DMA_IRQHandler+0xe9c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d02c      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xe1a>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a36      	ldr	r2, [pc, #216]	; (8003e6c <HAL_DMA_IRQHandler+0xea0>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d027      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xe1a>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a35      	ldr	r2, [pc, #212]	; (8003e70 <HAL_DMA_IRQHandler+0xea4>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d022      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xe1a>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a33      	ldr	r2, [pc, #204]	; (8003e74 <HAL_DMA_IRQHandler+0xea8>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d01d      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xe1a>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a32      	ldr	r2, [pc, #200]	; (8003e78 <HAL_DMA_IRQHandler+0xeac>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d018      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xe1a>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a30      	ldr	r2, [pc, #192]	; (8003e7c <HAL_DMA_IRQHandler+0xeb0>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d013      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xe1a>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a2f      	ldr	r2, [pc, #188]	; (8003e80 <HAL_DMA_IRQHandler+0xeb4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d00e      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xe1a>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a2d      	ldr	r2, [pc, #180]	; (8003e84 <HAL_DMA_IRQHandler+0xeb8>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d009      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xe1a>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a2c      	ldr	r2, [pc, #176]	; (8003e88 <HAL_DMA_IRQHandler+0xebc>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d004      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xe1a>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a2a      	ldr	r2, [pc, #168]	; (8003e8c <HAL_DMA_IRQHandler+0xec0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d108      	bne.n	8003df8 <HAL_DMA_IRQHandler+0xe2c>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 021c 	bic.w	r2, r2, #28
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	e007      	b.n	8003e08 <HAL_DMA_IRQHandler+0xe3c>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 020e 	bic.w	r2, r2, #14
 8003e06:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e0c:	f003 031f 	and.w	r3, r3, #31
 8003e10:	2201      	movs	r2, #1
 8003e12:	409a      	lsls	r2, r3
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d009      	beq.n	8003e4a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	4798      	blx	r3
 8003e3e:	e004      	b.n	8003e4a <HAL_DMA_IRQHandler+0xe7e>
          return;
 8003e40:	bf00      	nop
 8003e42:	e002      	b.n	8003e4a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e44:	bf00      	nop
 8003e46:	e000      	b.n	8003e4a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e48:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003e4a:	3728      	adds	r7, #40	; 0x28
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40020010 	.word	0x40020010
 8003e54:	40020028 	.word	0x40020028
 8003e58:	40020040 	.word	0x40020040
 8003e5c:	40020058 	.word	0x40020058
 8003e60:	40020070 	.word	0x40020070
 8003e64:	40020088 	.word	0x40020088
 8003e68:	400200a0 	.word	0x400200a0
 8003e6c:	400200b8 	.word	0x400200b8
 8003e70:	40020410 	.word	0x40020410
 8003e74:	40020428 	.word	0x40020428
 8003e78:	40020440 	.word	0x40020440
 8003e7c:	40020458 	.word	0x40020458
 8003e80:	40020470 	.word	0x40020470
 8003e84:	40020488 	.word	0x40020488
 8003e88:	400204a0 	.word	0x400204a0
 8003e8c:	400204b8 	.word	0x400204b8

08003e90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a42      	ldr	r2, [pc, #264]	; (8003fa8 <DMA_CalcBaseAndBitshift+0x118>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d04a      	beq.n	8003f38 <DMA_CalcBaseAndBitshift+0xa8>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a41      	ldr	r2, [pc, #260]	; (8003fac <DMA_CalcBaseAndBitshift+0x11c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d045      	beq.n	8003f38 <DMA_CalcBaseAndBitshift+0xa8>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a3f      	ldr	r2, [pc, #252]	; (8003fb0 <DMA_CalcBaseAndBitshift+0x120>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d040      	beq.n	8003f38 <DMA_CalcBaseAndBitshift+0xa8>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a3e      	ldr	r2, [pc, #248]	; (8003fb4 <DMA_CalcBaseAndBitshift+0x124>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d03b      	beq.n	8003f38 <DMA_CalcBaseAndBitshift+0xa8>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a3c      	ldr	r2, [pc, #240]	; (8003fb8 <DMA_CalcBaseAndBitshift+0x128>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d036      	beq.n	8003f38 <DMA_CalcBaseAndBitshift+0xa8>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a3b      	ldr	r2, [pc, #236]	; (8003fbc <DMA_CalcBaseAndBitshift+0x12c>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d031      	beq.n	8003f38 <DMA_CalcBaseAndBitshift+0xa8>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a39      	ldr	r2, [pc, #228]	; (8003fc0 <DMA_CalcBaseAndBitshift+0x130>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d02c      	beq.n	8003f38 <DMA_CalcBaseAndBitshift+0xa8>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a38      	ldr	r2, [pc, #224]	; (8003fc4 <DMA_CalcBaseAndBitshift+0x134>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d027      	beq.n	8003f38 <DMA_CalcBaseAndBitshift+0xa8>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a36      	ldr	r2, [pc, #216]	; (8003fc8 <DMA_CalcBaseAndBitshift+0x138>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d022      	beq.n	8003f38 <DMA_CalcBaseAndBitshift+0xa8>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a35      	ldr	r2, [pc, #212]	; (8003fcc <DMA_CalcBaseAndBitshift+0x13c>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d01d      	beq.n	8003f38 <DMA_CalcBaseAndBitshift+0xa8>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a33      	ldr	r2, [pc, #204]	; (8003fd0 <DMA_CalcBaseAndBitshift+0x140>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d018      	beq.n	8003f38 <DMA_CalcBaseAndBitshift+0xa8>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a32      	ldr	r2, [pc, #200]	; (8003fd4 <DMA_CalcBaseAndBitshift+0x144>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d013      	beq.n	8003f38 <DMA_CalcBaseAndBitshift+0xa8>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a30      	ldr	r2, [pc, #192]	; (8003fd8 <DMA_CalcBaseAndBitshift+0x148>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d00e      	beq.n	8003f38 <DMA_CalcBaseAndBitshift+0xa8>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a2f      	ldr	r2, [pc, #188]	; (8003fdc <DMA_CalcBaseAndBitshift+0x14c>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d009      	beq.n	8003f38 <DMA_CalcBaseAndBitshift+0xa8>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a2d      	ldr	r2, [pc, #180]	; (8003fe0 <DMA_CalcBaseAndBitshift+0x150>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d004      	beq.n	8003f38 <DMA_CalcBaseAndBitshift+0xa8>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a2c      	ldr	r2, [pc, #176]	; (8003fe4 <DMA_CalcBaseAndBitshift+0x154>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d101      	bne.n	8003f3c <DMA_CalcBaseAndBitshift+0xac>
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e000      	b.n	8003f3e <DMA_CalcBaseAndBitshift+0xae>
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d024      	beq.n	8003f8c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	3b10      	subs	r3, #16
 8003f4a:	4a27      	ldr	r2, [pc, #156]	; (8003fe8 <DMA_CalcBaseAndBitshift+0x158>)
 8003f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f50:	091b      	lsrs	r3, r3, #4
 8003f52:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f003 0307 	and.w	r3, r3, #7
 8003f5a:	4a24      	ldr	r2, [pc, #144]	; (8003fec <DMA_CalcBaseAndBitshift+0x15c>)
 8003f5c:	5cd3      	ldrb	r3, [r2, r3]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2b03      	cmp	r3, #3
 8003f68:	d908      	bls.n	8003f7c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	4b1f      	ldr	r3, [pc, #124]	; (8003ff0 <DMA_CalcBaseAndBitshift+0x160>)
 8003f72:	4013      	ands	r3, r2
 8003f74:	1d1a      	adds	r2, r3, #4
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	659a      	str	r2, [r3, #88]	; 0x58
 8003f7a:	e00d      	b.n	8003f98 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	461a      	mov	r2, r3
 8003f82:	4b1b      	ldr	r3, [pc, #108]	; (8003ff0 <DMA_CalcBaseAndBitshift+0x160>)
 8003f84:	4013      	ands	r3, r2
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6593      	str	r3, [r2, #88]	; 0x58
 8003f8a:	e005      	b.n	8003f98 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3714      	adds	r7, #20
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	40020010 	.word	0x40020010
 8003fac:	40020028 	.word	0x40020028
 8003fb0:	40020040 	.word	0x40020040
 8003fb4:	40020058 	.word	0x40020058
 8003fb8:	40020070 	.word	0x40020070
 8003fbc:	40020088 	.word	0x40020088
 8003fc0:	400200a0 	.word	0x400200a0
 8003fc4:	400200b8 	.word	0x400200b8
 8003fc8:	40020410 	.word	0x40020410
 8003fcc:	40020428 	.word	0x40020428
 8003fd0:	40020440 	.word	0x40020440
 8003fd4:	40020458 	.word	0x40020458
 8003fd8:	40020470 	.word	0x40020470
 8003fdc:	40020488 	.word	0x40020488
 8003fe0:	400204a0 	.word	0x400204a0
 8003fe4:	400204b8 	.word	0x400204b8
 8003fe8:	aaaaaaab 	.word	0xaaaaaaab
 8003fec:	08009730 	.word	0x08009730
 8003ff0:	fffffc00 	.word	0xfffffc00

08003ff4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d120      	bne.n	800404a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400c:	2b03      	cmp	r3, #3
 800400e:	d858      	bhi.n	80040c2 <DMA_CheckFifoParam+0xce>
 8004010:	a201      	add	r2, pc, #4	; (adr r2, 8004018 <DMA_CheckFifoParam+0x24>)
 8004012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004016:	bf00      	nop
 8004018:	08004029 	.word	0x08004029
 800401c:	0800403b 	.word	0x0800403b
 8004020:	08004029 	.word	0x08004029
 8004024:	080040c3 	.word	0x080040c3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d048      	beq.n	80040c6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004038:	e045      	b.n	80040c6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004042:	d142      	bne.n	80040ca <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004048:	e03f      	b.n	80040ca <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004052:	d123      	bne.n	800409c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004058:	2b03      	cmp	r3, #3
 800405a:	d838      	bhi.n	80040ce <DMA_CheckFifoParam+0xda>
 800405c:	a201      	add	r2, pc, #4	; (adr r2, 8004064 <DMA_CheckFifoParam+0x70>)
 800405e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004062:	bf00      	nop
 8004064:	08004075 	.word	0x08004075
 8004068:	0800407b 	.word	0x0800407b
 800406c:	08004075 	.word	0x08004075
 8004070:	0800408d 	.word	0x0800408d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	73fb      	strb	r3, [r7, #15]
        break;
 8004078:	e030      	b.n	80040dc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d025      	beq.n	80040d2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800408a:	e022      	b.n	80040d2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004090:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004094:	d11f      	bne.n	80040d6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800409a:	e01c      	b.n	80040d6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d902      	bls.n	80040aa <DMA_CheckFifoParam+0xb6>
 80040a4:	2b03      	cmp	r3, #3
 80040a6:	d003      	beq.n	80040b0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80040a8:	e018      	b.n	80040dc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	73fb      	strb	r3, [r7, #15]
        break;
 80040ae:	e015      	b.n	80040dc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00e      	beq.n	80040da <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	73fb      	strb	r3, [r7, #15]
    break;
 80040c0:	e00b      	b.n	80040da <DMA_CheckFifoParam+0xe6>
        break;
 80040c2:	bf00      	nop
 80040c4:	e00a      	b.n	80040dc <DMA_CheckFifoParam+0xe8>
        break;
 80040c6:	bf00      	nop
 80040c8:	e008      	b.n	80040dc <DMA_CheckFifoParam+0xe8>
        break;
 80040ca:	bf00      	nop
 80040cc:	e006      	b.n	80040dc <DMA_CheckFifoParam+0xe8>
        break;
 80040ce:	bf00      	nop
 80040d0:	e004      	b.n	80040dc <DMA_CheckFifoParam+0xe8>
        break;
 80040d2:	bf00      	nop
 80040d4:	e002      	b.n	80040dc <DMA_CheckFifoParam+0xe8>
        break;
 80040d6:	bf00      	nop
 80040d8:	e000      	b.n	80040dc <DMA_CheckFifoParam+0xe8>
    break;
 80040da:	bf00      	nop
    }
  }

  return status;
 80040dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop

080040ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a38      	ldr	r2, [pc, #224]	; (80041e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d022      	beq.n	800414a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a36      	ldr	r2, [pc, #216]	; (80041e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d01d      	beq.n	800414a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a35      	ldr	r2, [pc, #212]	; (80041e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d018      	beq.n	800414a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a33      	ldr	r2, [pc, #204]	; (80041ec <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d013      	beq.n	800414a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a32      	ldr	r2, [pc, #200]	; (80041f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d00e      	beq.n	800414a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a30      	ldr	r2, [pc, #192]	; (80041f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d009      	beq.n	800414a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a2f      	ldr	r2, [pc, #188]	; (80041f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d004      	beq.n	800414a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a2d      	ldr	r2, [pc, #180]	; (80041fc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d101      	bne.n	800414e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800414a:	2301      	movs	r3, #1
 800414c:	e000      	b.n	8004150 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800414e:	2300      	movs	r3, #0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d01a      	beq.n	800418a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	b2db      	uxtb	r3, r3
 800415a:	3b08      	subs	r3, #8
 800415c:	4a28      	ldr	r2, [pc, #160]	; (8004200 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800415e:	fba2 2303 	umull	r2, r3, r2, r3
 8004162:	091b      	lsrs	r3, r3, #4
 8004164:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	4b26      	ldr	r3, [pc, #152]	; (8004204 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800416a:	4413      	add	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	461a      	mov	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a24      	ldr	r2, [pc, #144]	; (8004208 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004178:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f003 031f 	and.w	r3, r3, #31
 8004180:	2201      	movs	r2, #1
 8004182:	409a      	lsls	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004188:	e024      	b.n	80041d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	b2db      	uxtb	r3, r3
 8004190:	3b10      	subs	r3, #16
 8004192:	4a1e      	ldr	r2, [pc, #120]	; (800420c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004194:	fba2 2303 	umull	r2, r3, r2, r3
 8004198:	091b      	lsrs	r3, r3, #4
 800419a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	4a1c      	ldr	r2, [pc, #112]	; (8004210 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d806      	bhi.n	80041b2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	4a1b      	ldr	r2, [pc, #108]	; (8004214 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d902      	bls.n	80041b2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	3308      	adds	r3, #8
 80041b0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	4b18      	ldr	r3, [pc, #96]	; (8004218 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80041b6:	4413      	add	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	461a      	mov	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a16      	ldr	r2, [pc, #88]	; (800421c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80041c4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f003 031f 	and.w	r3, r3, #31
 80041cc:	2201      	movs	r2, #1
 80041ce:	409a      	lsls	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80041d4:	bf00      	nop
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	58025408 	.word	0x58025408
 80041e4:	5802541c 	.word	0x5802541c
 80041e8:	58025430 	.word	0x58025430
 80041ec:	58025444 	.word	0x58025444
 80041f0:	58025458 	.word	0x58025458
 80041f4:	5802546c 	.word	0x5802546c
 80041f8:	58025480 	.word	0x58025480
 80041fc:	58025494 	.word	0x58025494
 8004200:	cccccccd 	.word	0xcccccccd
 8004204:	16009600 	.word	0x16009600
 8004208:	58025880 	.word	0x58025880
 800420c:	aaaaaaab 	.word	0xaaaaaaab
 8004210:	400204b8 	.word	0x400204b8
 8004214:	4002040f 	.word	0x4002040f
 8004218:	10008200 	.word	0x10008200
 800421c:	40020880 	.word	0x40020880

08004220 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	b2db      	uxtb	r3, r3
 800422e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d04a      	beq.n	80042cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2b08      	cmp	r3, #8
 800423a:	d847      	bhi.n	80042cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a25      	ldr	r2, [pc, #148]	; (80042d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d022      	beq.n	800428c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a24      	ldr	r2, [pc, #144]	; (80042dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d01d      	beq.n	800428c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a22      	ldr	r2, [pc, #136]	; (80042e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d018      	beq.n	800428c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a21      	ldr	r2, [pc, #132]	; (80042e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d013      	beq.n	800428c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a1f      	ldr	r2, [pc, #124]	; (80042e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d00e      	beq.n	800428c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a1e      	ldr	r2, [pc, #120]	; (80042ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d009      	beq.n	800428c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a1c      	ldr	r2, [pc, #112]	; (80042f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d004      	beq.n	800428c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a1b      	ldr	r2, [pc, #108]	; (80042f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d101      	bne.n	8004290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800428c:	2301      	movs	r3, #1
 800428e:	e000      	b.n	8004292 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004290:	2300      	movs	r3, #0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00a      	beq.n	80042ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	4b17      	ldr	r3, [pc, #92]	; (80042f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800429a:	4413      	add	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	461a      	mov	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a15      	ldr	r2, [pc, #84]	; (80042fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80042a8:	671a      	str	r2, [r3, #112]	; 0x70
 80042aa:	e009      	b.n	80042c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	4b14      	ldr	r3, [pc, #80]	; (8004300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80042b0:	4413      	add	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	461a      	mov	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a11      	ldr	r2, [pc, #68]	; (8004304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80042be:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	3b01      	subs	r3, #1
 80042c4:	2201      	movs	r2, #1
 80042c6:	409a      	lsls	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80042cc:	bf00      	nop
 80042ce:	3714      	adds	r7, #20
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	58025408 	.word	0x58025408
 80042dc:	5802541c 	.word	0x5802541c
 80042e0:	58025430 	.word	0x58025430
 80042e4:	58025444 	.word	0x58025444
 80042e8:	58025458 	.word	0x58025458
 80042ec:	5802546c 	.word	0x5802546c
 80042f0:	58025480 	.word	0x58025480
 80042f4:	58025494 	.word	0x58025494
 80042f8:	1600963f 	.word	0x1600963f
 80042fc:	58025940 	.word	0x58025940
 8004300:	1000823f 	.word	0x1000823f
 8004304:	40020940 	.word	0x40020940

08004308 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004308:	b480      	push	{r7}
 800430a:	b089      	sub	sp, #36	; 0x24
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004312:	2300      	movs	r3, #0
 8004314:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004316:	4b89      	ldr	r3, [pc, #548]	; (800453c <HAL_GPIO_Init+0x234>)
 8004318:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800431a:	e194      	b.n	8004646 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	2101      	movs	r1, #1
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	fa01 f303 	lsl.w	r3, r1, r3
 8004328:	4013      	ands	r3, r2
 800432a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	2b00      	cmp	r3, #0
 8004330:	f000 8186 	beq.w	8004640 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d00b      	beq.n	8004354 <HAL_GPIO_Init+0x4c>
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	2b02      	cmp	r3, #2
 8004342:	d007      	beq.n	8004354 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004348:	2b11      	cmp	r3, #17
 800434a:	d003      	beq.n	8004354 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	2b12      	cmp	r3, #18
 8004352:	d130      	bne.n	80043b6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	2203      	movs	r2, #3
 8004360:	fa02 f303 	lsl.w	r3, r2, r3
 8004364:	43db      	mvns	r3, r3
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	4013      	ands	r3, r2
 800436a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	68da      	ldr	r2, [r3, #12]
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	fa02 f303 	lsl.w	r3, r2, r3
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	4313      	orrs	r3, r2
 800437c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800438a:	2201      	movs	r2, #1
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	fa02 f303 	lsl.w	r3, r2, r3
 8004392:	43db      	mvns	r3, r3
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	4013      	ands	r3, r2
 8004398:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	091b      	lsrs	r3, r3, #4
 80043a0:	f003 0201 	and.w	r2, r3, #1
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	fa02 f303 	lsl.w	r3, r2, r3
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	2203      	movs	r2, #3
 80043c2:	fa02 f303 	lsl.w	r3, r2, r3
 80043c6:	43db      	mvns	r3, r3
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	4013      	ands	r3, r2
 80043cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	689a      	ldr	r2, [r3, #8]
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	fa02 f303 	lsl.w	r3, r2, r3
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	4313      	orrs	r3, r2
 80043de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d003      	beq.n	80043f6 <HAL_GPIO_Init+0xee>
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b12      	cmp	r3, #18
 80043f4:	d123      	bne.n	800443e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	08da      	lsrs	r2, r3, #3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3208      	adds	r2, #8
 80043fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004402:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	220f      	movs	r2, #15
 800440e:	fa02 f303 	lsl.w	r3, r2, r3
 8004412:	43db      	mvns	r3, r3
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	4013      	ands	r3, r2
 8004418:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	691a      	ldr	r2, [r3, #16]
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	fa02 f303 	lsl.w	r3, r2, r3
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	4313      	orrs	r3, r2
 800442e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	08da      	lsrs	r2, r3, #3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3208      	adds	r2, #8
 8004438:	69b9      	ldr	r1, [r7, #24]
 800443a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	2203      	movs	r2, #3
 800444a:	fa02 f303 	lsl.w	r3, r2, r3
 800444e:	43db      	mvns	r3, r3
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	4013      	ands	r3, r2
 8004454:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f003 0203 	and.w	r2, r3, #3
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	4313      	orrs	r3, r2
 800446a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 80e0 	beq.w	8004640 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004480:	4b2f      	ldr	r3, [pc, #188]	; (8004540 <HAL_GPIO_Init+0x238>)
 8004482:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004486:	4a2e      	ldr	r2, [pc, #184]	; (8004540 <HAL_GPIO_Init+0x238>)
 8004488:	f043 0302 	orr.w	r3, r3, #2
 800448c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8004490:	4b2b      	ldr	r3, [pc, #172]	; (8004540 <HAL_GPIO_Init+0x238>)
 8004492:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	60fb      	str	r3, [r7, #12]
 800449c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800449e:	4a29      	ldr	r2, [pc, #164]	; (8004544 <HAL_GPIO_Init+0x23c>)
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	089b      	lsrs	r3, r3, #2
 80044a4:	3302      	adds	r3, #2
 80044a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	f003 0303 	and.w	r3, r3, #3
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	220f      	movs	r2, #15
 80044b6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ba:	43db      	mvns	r3, r3
 80044bc:	69ba      	ldr	r2, [r7, #24]
 80044be:	4013      	ands	r3, r2
 80044c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a20      	ldr	r2, [pc, #128]	; (8004548 <HAL_GPIO_Init+0x240>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d052      	beq.n	8004570 <HAL_GPIO_Init+0x268>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a1f      	ldr	r2, [pc, #124]	; (800454c <HAL_GPIO_Init+0x244>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d031      	beq.n	8004536 <HAL_GPIO_Init+0x22e>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a1e      	ldr	r2, [pc, #120]	; (8004550 <HAL_GPIO_Init+0x248>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d02b      	beq.n	8004532 <HAL_GPIO_Init+0x22a>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a1d      	ldr	r2, [pc, #116]	; (8004554 <HAL_GPIO_Init+0x24c>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d025      	beq.n	800452e <HAL_GPIO_Init+0x226>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a1c      	ldr	r2, [pc, #112]	; (8004558 <HAL_GPIO_Init+0x250>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d01f      	beq.n	800452a <HAL_GPIO_Init+0x222>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a1b      	ldr	r2, [pc, #108]	; (800455c <HAL_GPIO_Init+0x254>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d019      	beq.n	8004526 <HAL_GPIO_Init+0x21e>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a1a      	ldr	r2, [pc, #104]	; (8004560 <HAL_GPIO_Init+0x258>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d013      	beq.n	8004522 <HAL_GPIO_Init+0x21a>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a19      	ldr	r2, [pc, #100]	; (8004564 <HAL_GPIO_Init+0x25c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d00d      	beq.n	800451e <HAL_GPIO_Init+0x216>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a18      	ldr	r2, [pc, #96]	; (8004568 <HAL_GPIO_Init+0x260>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d007      	beq.n	800451a <HAL_GPIO_Init+0x212>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a17      	ldr	r2, [pc, #92]	; (800456c <HAL_GPIO_Init+0x264>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d101      	bne.n	8004516 <HAL_GPIO_Init+0x20e>
 8004512:	2309      	movs	r3, #9
 8004514:	e02d      	b.n	8004572 <HAL_GPIO_Init+0x26a>
 8004516:	230a      	movs	r3, #10
 8004518:	e02b      	b.n	8004572 <HAL_GPIO_Init+0x26a>
 800451a:	2308      	movs	r3, #8
 800451c:	e029      	b.n	8004572 <HAL_GPIO_Init+0x26a>
 800451e:	2307      	movs	r3, #7
 8004520:	e027      	b.n	8004572 <HAL_GPIO_Init+0x26a>
 8004522:	2306      	movs	r3, #6
 8004524:	e025      	b.n	8004572 <HAL_GPIO_Init+0x26a>
 8004526:	2305      	movs	r3, #5
 8004528:	e023      	b.n	8004572 <HAL_GPIO_Init+0x26a>
 800452a:	2304      	movs	r3, #4
 800452c:	e021      	b.n	8004572 <HAL_GPIO_Init+0x26a>
 800452e:	2303      	movs	r3, #3
 8004530:	e01f      	b.n	8004572 <HAL_GPIO_Init+0x26a>
 8004532:	2302      	movs	r3, #2
 8004534:	e01d      	b.n	8004572 <HAL_GPIO_Init+0x26a>
 8004536:	2301      	movs	r3, #1
 8004538:	e01b      	b.n	8004572 <HAL_GPIO_Init+0x26a>
 800453a:	bf00      	nop
 800453c:	58000080 	.word	0x58000080
 8004540:	58024400 	.word	0x58024400
 8004544:	58000400 	.word	0x58000400
 8004548:	58020000 	.word	0x58020000
 800454c:	58020400 	.word	0x58020400
 8004550:	58020800 	.word	0x58020800
 8004554:	58020c00 	.word	0x58020c00
 8004558:	58021000 	.word	0x58021000
 800455c:	58021400 	.word	0x58021400
 8004560:	58021800 	.word	0x58021800
 8004564:	58021c00 	.word	0x58021c00
 8004568:	58022000 	.word	0x58022000
 800456c:	58022400 	.word	0x58022400
 8004570:	2300      	movs	r3, #0
 8004572:	69fa      	ldr	r2, [r7, #28]
 8004574:	f002 0203 	and.w	r2, r2, #3
 8004578:	0092      	lsls	r2, r2, #2
 800457a:	4093      	lsls	r3, r2
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	4313      	orrs	r3, r2
 8004580:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004582:	4938      	ldr	r1, [pc, #224]	; (8004664 <HAL_GPIO_Init+0x35c>)
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	089b      	lsrs	r3, r3, #2
 8004588:	3302      	adds	r3, #2
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	43db      	mvns	r3, r3
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	4013      	ands	r3, r2
 800459e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	69ba      	ldr	r2, [r7, #24]
 80045b8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	43db      	mvns	r3, r3
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	4013      	ands	r3, r2
 80045c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	4313      	orrs	r3, r2
 80045dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	43db      	mvns	r3, r3
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	4013      	ands	r3, r2
 80045f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	4313      	orrs	r3, r2
 8004608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800460a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	43db      	mvns	r3, r3
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	4013      	ands	r3, r2
 8004622:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d003      	beq.n	8004638 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	4313      	orrs	r3, r2
 8004636:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004638:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	3301      	adds	r3, #1
 8004644:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	fa22 f303 	lsr.w	r3, r2, r3
 8004650:	2b00      	cmp	r3, #0
 8004652:	f47f ae63 	bne.w	800431c <HAL_GPIO_Init+0x14>
  }
}
 8004656:	bf00      	nop
 8004658:	3724      	adds	r7, #36	; 0x24
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	58000400 	.word	0x58000400

08004668 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	460b      	mov	r3, r1
 8004672:	807b      	strh	r3, [r7, #2]
 8004674:	4613      	mov	r3, r2
 8004676:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004678:	787b      	ldrb	r3, [r7, #1]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d003      	beq.n	8004686 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800467e:	887a      	ldrh	r2, [r7, #2]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004684:	e003      	b.n	800468e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004686:	887b      	ldrh	r3, [r7, #2]
 8004688:	041a      	lsls	r2, r3, #16
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	619a      	str	r2, [r3, #24]
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800469a:	b480      	push	{r7}
 800469c:	b083      	sub	sp, #12
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
 80046a2:	460b      	mov	r3, r1
 80046a4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	695a      	ldr	r2, [r3, #20]
 80046aa:	887b      	ldrh	r3, [r7, #2]
 80046ac:	401a      	ands	r2, r3
 80046ae:	887b      	ldrh	r3, [r7, #2]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d104      	bne.n	80046be <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80046b4:	887b      	ldrh	r3, [r7, #2]
 80046b6:	041a      	lsls	r2, r3, #16
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80046bc:	e002      	b.n	80046c4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80046be:	887a      	ldrh	r2, [r7, #2]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	619a      	str	r2, [r3, #24]
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80046d8:	4b29      	ldr	r3, [pc, #164]	; (8004780 <HAL_PWREx_ConfigSupply+0xb0>)
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	2b06      	cmp	r3, #6
 80046e2:	d00a      	beq.n	80046fa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80046e4:	4b26      	ldr	r3, [pc, #152]	; (8004780 <HAL_PWREx_ConfigSupply+0xb0>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d001      	beq.n	80046f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e040      	b.n	8004778 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80046f6:	2300      	movs	r3, #0
 80046f8:	e03e      	b.n	8004778 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80046fa:	4b21      	ldr	r3, [pc, #132]	; (8004780 <HAL_PWREx_ConfigSupply+0xb0>)
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004702:	491f      	ldr	r1, [pc, #124]	; (8004780 <HAL_PWREx_ConfigSupply+0xb0>)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4313      	orrs	r3, r2
 8004708:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800470a:	f7fc fee1 	bl	80014d0 <HAL_GetTick>
 800470e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004710:	e009      	b.n	8004726 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004712:	f7fc fedd 	bl	80014d0 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004720:	d901      	bls.n	8004726 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e028      	b.n	8004778 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004726:	4b16      	ldr	r3, [pc, #88]	; (8004780 <HAL_PWREx_ConfigSupply+0xb0>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800472e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004732:	d1ee      	bne.n	8004712 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b1e      	cmp	r3, #30
 8004738:	d008      	beq.n	800474c <HAL_PWREx_ConfigSupply+0x7c>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b2e      	cmp	r3, #46	; 0x2e
 800473e:	d005      	beq.n	800474c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b1d      	cmp	r3, #29
 8004744:	d002      	beq.n	800474c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b2d      	cmp	r3, #45	; 0x2d
 800474a:	d114      	bne.n	8004776 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800474c:	f7fc fec0 	bl	80014d0 <HAL_GetTick>
 8004750:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004752:	e009      	b.n	8004768 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004754:	f7fc febc 	bl	80014d0 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004762:	d901      	bls.n	8004768 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e007      	b.n	8004778 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004768:	4b05      	ldr	r3, [pc, #20]	; (8004780 <HAL_PWREx_ConfigSupply+0xb0>)
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004774:	d1ee      	bne.n	8004754 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	58024800 	.word	0x58024800

08004784 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b08c      	sub	sp, #48	; 0x30
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e3d7      	b.n	8004f46 <HAL_RCC_OscConfig+0x7c2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f000 80b3 	beq.w	800490a <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047a4:	4b90      	ldr	r3, [pc, #576]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80047ae:	4b8e      	ldr	r3, [pc, #568]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 80047b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80047b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b6:	2b10      	cmp	r3, #16
 80047b8:	d007      	beq.n	80047ca <HAL_RCC_OscConfig+0x46>
 80047ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047bc:	2b18      	cmp	r3, #24
 80047be:	d112      	bne.n	80047e6 <HAL_RCC_OscConfig+0x62>
 80047c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c2:	f003 0303 	and.w	r3, r3, #3
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d10d      	bne.n	80047e6 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ca:	4b87      	ldr	r3, [pc, #540]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 8098 	beq.w	8004908 <HAL_RCC_OscConfig+0x184>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f040 8093 	bne.w	8004908 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e3af      	b.n	8004f46 <HAL_RCC_OscConfig+0x7c2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ee:	d106      	bne.n	80047fe <HAL_RCC_OscConfig+0x7a>
 80047f0:	4b7d      	ldr	r3, [pc, #500]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a7c      	ldr	r2, [pc, #496]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 80047f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047fa:	6013      	str	r3, [r2, #0]
 80047fc:	e058      	b.n	80048b0 <HAL_RCC_OscConfig+0x12c>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d112      	bne.n	800482c <HAL_RCC_OscConfig+0xa8>
 8004806:	4b78      	ldr	r3, [pc, #480]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a77      	ldr	r2, [pc, #476]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 800480c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004810:	6013      	str	r3, [r2, #0]
 8004812:	4b75      	ldr	r3, [pc, #468]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a74      	ldr	r2, [pc, #464]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 8004818:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800481c:	6013      	str	r3, [r2, #0]
 800481e:	4b72      	ldr	r3, [pc, #456]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a71      	ldr	r2, [pc, #452]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 8004824:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004828:	6013      	str	r3, [r2, #0]
 800482a:	e041      	b.n	80048b0 <HAL_RCC_OscConfig+0x12c>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004834:	d112      	bne.n	800485c <HAL_RCC_OscConfig+0xd8>
 8004836:	4b6c      	ldr	r3, [pc, #432]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a6b      	ldr	r2, [pc, #428]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 800483c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004840:	6013      	str	r3, [r2, #0]
 8004842:	4b69      	ldr	r3, [pc, #420]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a68      	ldr	r2, [pc, #416]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 8004848:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800484c:	6013      	str	r3, [r2, #0]
 800484e:	4b66      	ldr	r3, [pc, #408]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a65      	ldr	r2, [pc, #404]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 8004854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004858:	6013      	str	r3, [r2, #0]
 800485a:	e029      	b.n	80048b0 <HAL_RCC_OscConfig+0x12c>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004864:	d112      	bne.n	800488c <HAL_RCC_OscConfig+0x108>
 8004866:	4b60      	ldr	r3, [pc, #384]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a5f      	ldr	r2, [pc, #380]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 800486c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004870:	6013      	str	r3, [r2, #0]
 8004872:	4b5d      	ldr	r3, [pc, #372]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a5c      	ldr	r2, [pc, #368]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 8004878:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	4b5a      	ldr	r3, [pc, #360]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a59      	ldr	r2, [pc, #356]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 8004884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004888:	6013      	str	r3, [r2, #0]
 800488a:	e011      	b.n	80048b0 <HAL_RCC_OscConfig+0x12c>
 800488c:	4b56      	ldr	r3, [pc, #344]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a55      	ldr	r2, [pc, #340]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 8004892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004896:	6013      	str	r3, [r2, #0]
 8004898:	4b53      	ldr	r3, [pc, #332]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a52      	ldr	r2, [pc, #328]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 800489e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048a2:	6013      	str	r3, [r2, #0]
 80048a4:	4b50      	ldr	r3, [pc, #320]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a4f      	ldr	r2, [pc, #316]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 80048aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80048ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d013      	beq.n	80048e0 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b8:	f7fc fe0a 	bl	80014d0 <HAL_GetTick>
 80048bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048be:	e008      	b.n	80048d2 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048c0:	f7fc fe06 	bl	80014d0 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b64      	cmp	r3, #100	; 0x64
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e339      	b.n	8004f46 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048d2:	4b45      	ldr	r3, [pc, #276]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d0f0      	beq.n	80048c0 <HAL_RCC_OscConfig+0x13c>
 80048de:	e014      	b.n	800490a <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e0:	f7fc fdf6 	bl	80014d0 <HAL_GetTick>
 80048e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048e8:	f7fc fdf2 	bl	80014d0 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b64      	cmp	r3, #100	; 0x64
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e325      	b.n	8004f46 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80048fa:	4b3b      	ldr	r3, [pc, #236]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1f0      	bne.n	80048e8 <HAL_RCC_OscConfig+0x164>
 8004906:	e000      	b.n	800490a <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d070      	beq.n	80049f8 <HAL_RCC_OscConfig+0x274>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004916:	4b34      	ldr	r3, [pc, #208]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800491e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004920:	4b31      	ldr	r3, [pc, #196]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 8004922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004924:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004926:	6a3b      	ldr	r3, [r7, #32]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d007      	beq.n	800493c <HAL_RCC_OscConfig+0x1b8>
 800492c:	6a3b      	ldr	r3, [r7, #32]
 800492e:	2b18      	cmp	r3, #24
 8004930:	d11b      	bne.n	800496a <HAL_RCC_OscConfig+0x1e6>
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	f003 0303 	and.w	r3, r3, #3
 8004938:	2b00      	cmp	r3, #0
 800493a:	d116      	bne.n	800496a <HAL_RCC_OscConfig+0x1e6>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800493c:	4b2a      	ldr	r3, [pc, #168]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0304 	and.w	r3, r3, #4
 8004944:	2b00      	cmp	r3, #0
 8004946:	d005      	beq.n	8004954 <HAL_RCC_OscConfig+0x1d0>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <HAL_RCC_OscConfig+0x1d0>
      {
        return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e2f8      	b.n	8004f46 <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004954:	4b24      	ldr	r3, [pc, #144]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	061b      	lsls	r3, r3, #24
 8004962:	4921      	ldr	r1, [pc, #132]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 8004964:	4313      	orrs	r3, r2
 8004966:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004968:	e046      	b.n	80049f8 <HAL_RCC_OscConfig+0x274>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d026      	beq.n	80049c0 <HAL_RCC_OscConfig+0x23c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004972:	4b1d      	ldr	r3, [pc, #116]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f023 0219 	bic.w	r2, r3, #25
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	491a      	ldr	r1, [pc, #104]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 8004980:	4313      	orrs	r3, r2
 8004982:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004984:	f7fc fda4 	bl	80014d0 <HAL_GetTick>
 8004988:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800498a:	e008      	b.n	800499e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800498c:	f7fc fda0 	bl	80014d0 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b02      	cmp	r3, #2
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e2d3      	b.n	8004f46 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800499e:	4b12      	ldr	r3, [pc, #72]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0304 	and.w	r3, r3, #4
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d0f0      	beq.n	800498c <HAL_RCC_OscConfig+0x208>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049aa:	4b0f      	ldr	r3, [pc, #60]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	061b      	lsls	r3, r3, #24
 80049b8:	490b      	ldr	r1, [pc, #44]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	604b      	str	r3, [r1, #4]
 80049be:	e01b      	b.n	80049f8 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049c0:	4b09      	ldr	r3, [pc, #36]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a08      	ldr	r2, [pc, #32]	; (80049e8 <HAL_RCC_OscConfig+0x264>)
 80049c6:	f023 0301 	bic.w	r3, r3, #1
 80049ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049cc:	f7fc fd80 	bl	80014d0 <HAL_GetTick>
 80049d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80049d2:	e00b      	b.n	80049ec <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049d4:	f7fc fd7c 	bl	80014d0 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d904      	bls.n	80049ec <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e2af      	b.n	8004f46 <HAL_RCC_OscConfig+0x7c2>
 80049e6:	bf00      	nop
 80049e8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80049ec:	4b99      	ldr	r3, [pc, #612]	; (8004c54 <HAL_RCC_OscConfig+0x4d0>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1ed      	bne.n	80049d4 <HAL_RCC_OscConfig+0x250>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0310 	and.w	r3, r3, #16
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d06a      	beq.n	8004ada <HAL_RCC_OscConfig+0x356>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a04:	4b93      	ldr	r3, [pc, #588]	; (8004c54 <HAL_RCC_OscConfig+0x4d0>)
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a0c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a0e:	4b91      	ldr	r3, [pc, #580]	; (8004c54 <HAL_RCC_OscConfig+0x4d0>)
 8004a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a12:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	2b08      	cmp	r3, #8
 8004a18:	d007      	beq.n	8004a2a <HAL_RCC_OscConfig+0x2a6>
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	2b18      	cmp	r3, #24
 8004a1e:	d11b      	bne.n	8004a58 <HAL_RCC_OscConfig+0x2d4>
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	f003 0303 	and.w	r3, r3, #3
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d116      	bne.n	8004a58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a2a:	4b8a      	ldr	r3, [pc, #552]	; (8004c54 <HAL_RCC_OscConfig+0x4d0>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d005      	beq.n	8004a42 <HAL_RCC_OscConfig+0x2be>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	69db      	ldr	r3, [r3, #28]
 8004a3a:	2b80      	cmp	r3, #128	; 0x80
 8004a3c:	d001      	beq.n	8004a42 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e281      	b.n	8004f46 <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a42:	4b84      	ldr	r3, [pc, #528]	; (8004c54 <HAL_RCC_OscConfig+0x4d0>)
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	061b      	lsls	r3, r3, #24
 8004a50:	4980      	ldr	r1, [pc, #512]	; (8004c54 <HAL_RCC_OscConfig+0x4d0>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a56:	e040      	b.n	8004ada <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	69db      	ldr	r3, [r3, #28]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d023      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x324>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004a60:	4b7c      	ldr	r3, [pc, #496]	; (8004c54 <HAL_RCC_OscConfig+0x4d0>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a7b      	ldr	r2, [pc, #492]	; (8004c54 <HAL_RCC_OscConfig+0x4d0>)
 8004a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6c:	f7fc fd30 	bl	80014d0 <HAL_GetTick>
 8004a70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0x302>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004a74:	f7fc fd2c 	bl	80014d0 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e25f      	b.n	8004f46 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a86:	4b73      	ldr	r3, [pc, #460]	; (8004c54 <HAL_RCC_OscConfig+0x4d0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d0f0      	beq.n	8004a74 <HAL_RCC_OscConfig+0x2f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a92:	4b70      	ldr	r3, [pc, #448]	; (8004c54 <HAL_RCC_OscConfig+0x4d0>)
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	061b      	lsls	r3, r3, #24
 8004aa0:	496c      	ldr	r1, [pc, #432]	; (8004c54 <HAL_RCC_OscConfig+0x4d0>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	60cb      	str	r3, [r1, #12]
 8004aa6:	e018      	b.n	8004ada <HAL_RCC_OscConfig+0x356>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004aa8:	4b6a      	ldr	r3, [pc, #424]	; (8004c54 <HAL_RCC_OscConfig+0x4d0>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a69      	ldr	r2, [pc, #420]	; (8004c54 <HAL_RCC_OscConfig+0x4d0>)
 8004aae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ab2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab4:	f7fc fd0c 	bl	80014d0 <HAL_GetTick>
 8004ab8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0x34a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004abc:	f7fc fd08 	bl	80014d0 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x34a>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e23b      	b.n	8004f46 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ace:	4b61      	ldr	r3, [pc, #388]	; (8004c54 <HAL_RCC_OscConfig+0x4d0>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1f0      	bne.n	8004abc <HAL_RCC_OscConfig+0x338>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0308 	and.w	r3, r3, #8
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d036      	beq.n	8004b54 <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d019      	beq.n	8004b22 <HAL_RCC_OscConfig+0x39e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aee:	4b59      	ldr	r3, [pc, #356]	; (8004c54 <HAL_RCC_OscConfig+0x4d0>)
 8004af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004af2:	4a58      	ldr	r2, [pc, #352]	; (8004c54 <HAL_RCC_OscConfig+0x4d0>)
 8004af4:	f043 0301 	orr.w	r3, r3, #1
 8004af8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004afa:	f7fc fce9 	bl	80014d0 <HAL_GetTick>
 8004afe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004b00:	e008      	b.n	8004b14 <HAL_RCC_OscConfig+0x390>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b02:	f7fc fce5 	bl	80014d0 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d901      	bls.n	8004b14 <HAL_RCC_OscConfig+0x390>
        {
          return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e218      	b.n	8004f46 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004b14:	4b4f      	ldr	r3, [pc, #316]	; (8004c54 <HAL_RCC_OscConfig+0x4d0>)
 8004b16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b18:	f003 0302 	and.w	r3, r3, #2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d0f0      	beq.n	8004b02 <HAL_RCC_OscConfig+0x37e>
 8004b20:	e018      	b.n	8004b54 <HAL_RCC_OscConfig+0x3d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b22:	4b4c      	ldr	r3, [pc, #304]	; (8004c54 <HAL_RCC_OscConfig+0x4d0>)
 8004b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b26:	4a4b      	ldr	r2, [pc, #300]	; (8004c54 <HAL_RCC_OscConfig+0x4d0>)
 8004b28:	f023 0301 	bic.w	r3, r3, #1
 8004b2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b2e:	f7fc fccf 	bl	80014d0 <HAL_GetTick>
 8004b32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004b34:	e008      	b.n	8004b48 <HAL_RCC_OscConfig+0x3c4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b36:	f7fc fccb 	bl	80014d0 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d901      	bls.n	8004b48 <HAL_RCC_OscConfig+0x3c4>
        {
          return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e1fe      	b.n	8004f46 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004b48:	4b42      	ldr	r3, [pc, #264]	; (8004c54 <HAL_RCC_OscConfig+0x4d0>)
 8004b4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1f0      	bne.n	8004b36 <HAL_RCC_OscConfig+0x3b2>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0320 	and.w	r3, r3, #32
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d036      	beq.n	8004bce <HAL_RCC_OscConfig+0x44a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d019      	beq.n	8004b9c <HAL_RCC_OscConfig+0x418>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b68:	4b3a      	ldr	r3, [pc, #232]	; (8004c54 <HAL_RCC_OscConfig+0x4d0>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a39      	ldr	r2, [pc, #228]	; (8004c54 <HAL_RCC_OscConfig+0x4d0>)
 8004b6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b72:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004b74:	f7fc fcac 	bl	80014d0 <HAL_GetTick>
 8004b78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b7a:	e008      	b.n	8004b8e <HAL_RCC_OscConfig+0x40a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004b7c:	f7fc fca8 	bl	80014d0 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0x40a>
        {
          return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e1db      	b.n	8004f46 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b8e:	4b31      	ldr	r3, [pc, #196]	; (8004c54 <HAL_RCC_OscConfig+0x4d0>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0f0      	beq.n	8004b7c <HAL_RCC_OscConfig+0x3f8>
 8004b9a:	e018      	b.n	8004bce <HAL_RCC_OscConfig+0x44a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b9c:	4b2d      	ldr	r3, [pc, #180]	; (8004c54 <HAL_RCC_OscConfig+0x4d0>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a2c      	ldr	r2, [pc, #176]	; (8004c54 <HAL_RCC_OscConfig+0x4d0>)
 8004ba2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ba6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004ba8:	f7fc fc92 	bl	80014d0 <HAL_GetTick>
 8004bac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0x43e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004bb0:	f7fc fc8e 	bl	80014d0 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e1c1      	b.n	8004f46 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004bc2:	4b24      	ldr	r3, [pc, #144]	; (8004c54 <HAL_RCC_OscConfig+0x4d0>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1f0      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x42c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0304 	and.w	r3, r3, #4
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 80af 	beq.w	8004d3a <HAL_RCC_OscConfig+0x5b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004bdc:	4b1e      	ldr	r3, [pc, #120]	; (8004c58 <HAL_RCC_OscConfig+0x4d4>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a1d      	ldr	r2, [pc, #116]	; (8004c58 <HAL_RCC_OscConfig+0x4d4>)
 8004be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004be6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004be8:	f7fc fc72 	bl	80014d0 <HAL_GetTick>
 8004bec:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bee:	e008      	b.n	8004c02 <HAL_RCC_OscConfig+0x47e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004bf0:	f7fc fc6e 	bl	80014d0 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b64      	cmp	r3, #100	; 0x64
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e1a1      	b.n	8004f46 <HAL_RCC_OscConfig+0x7c2>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c02:	4b15      	ldr	r3, [pc, #84]	; (8004c58 <HAL_RCC_OscConfig+0x4d4>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d0f0      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x46c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d106      	bne.n	8004c24 <HAL_RCC_OscConfig+0x4a0>
 8004c16:	4b0f      	ldr	r3, [pc, #60]	; (8004c54 <HAL_RCC_OscConfig+0x4d0>)
 8004c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c1a:	4a0e      	ldr	r2, [pc, #56]	; (8004c54 <HAL_RCC_OscConfig+0x4d0>)
 8004c1c:	f043 0301 	orr.w	r3, r3, #1
 8004c20:	6713      	str	r3, [r2, #112]	; 0x70
 8004c22:	e05b      	b.n	8004cdc <HAL_RCC_OscConfig+0x558>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d117      	bne.n	8004c5c <HAL_RCC_OscConfig+0x4d8>
 8004c2c:	4b09      	ldr	r3, [pc, #36]	; (8004c54 <HAL_RCC_OscConfig+0x4d0>)
 8004c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c30:	4a08      	ldr	r2, [pc, #32]	; (8004c54 <HAL_RCC_OscConfig+0x4d0>)
 8004c32:	f023 0301 	bic.w	r3, r3, #1
 8004c36:	6713      	str	r3, [r2, #112]	; 0x70
 8004c38:	4b06      	ldr	r3, [pc, #24]	; (8004c54 <HAL_RCC_OscConfig+0x4d0>)
 8004c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3c:	4a05      	ldr	r2, [pc, #20]	; (8004c54 <HAL_RCC_OscConfig+0x4d0>)
 8004c3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c42:	6713      	str	r3, [r2, #112]	; 0x70
 8004c44:	4b03      	ldr	r3, [pc, #12]	; (8004c54 <HAL_RCC_OscConfig+0x4d0>)
 8004c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c48:	4a02      	ldr	r2, [pc, #8]	; (8004c54 <HAL_RCC_OscConfig+0x4d0>)
 8004c4a:	f023 0304 	bic.w	r3, r3, #4
 8004c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c50:	e044      	b.n	8004cdc <HAL_RCC_OscConfig+0x558>
 8004c52:	bf00      	nop
 8004c54:	58024400 	.word	0x58024400
 8004c58:	58024800 	.word	0x58024800
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	2b05      	cmp	r3, #5
 8004c62:	d112      	bne.n	8004c8a <HAL_RCC_OscConfig+0x506>
 8004c64:	4b95      	ldr	r3, [pc, #596]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c68:	4a94      	ldr	r2, [pc, #592]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004c6a:	f043 0304 	orr.w	r3, r3, #4
 8004c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c70:	4b92      	ldr	r3, [pc, #584]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c74:	4a91      	ldr	r2, [pc, #580]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004c76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c7c:	4b8f      	ldr	r3, [pc, #572]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c80:	4a8e      	ldr	r2, [pc, #568]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004c82:	f043 0301 	orr.w	r3, r3, #1
 8004c86:	6713      	str	r3, [r2, #112]	; 0x70
 8004c88:	e028      	b.n	8004cdc <HAL_RCC_OscConfig+0x558>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	2b85      	cmp	r3, #133	; 0x85
 8004c90:	d112      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x534>
 8004c92:	4b8a      	ldr	r3, [pc, #552]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c96:	4a89      	ldr	r2, [pc, #548]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004c98:	f043 0304 	orr.w	r3, r3, #4
 8004c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c9e:	4b87      	ldr	r3, [pc, #540]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca2:	4a86      	ldr	r2, [pc, #536]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca8:	6713      	str	r3, [r2, #112]	; 0x70
 8004caa:	4b84      	ldr	r3, [pc, #528]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cae:	4a83      	ldr	r2, [pc, #524]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004cb0:	f043 0301 	orr.w	r3, r3, #1
 8004cb4:	6713      	str	r3, [r2, #112]	; 0x70
 8004cb6:	e011      	b.n	8004cdc <HAL_RCC_OscConfig+0x558>
 8004cb8:	4b80      	ldr	r3, [pc, #512]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cbc:	4a7f      	ldr	r2, [pc, #508]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004cbe:	f023 0301 	bic.w	r3, r3, #1
 8004cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8004cc4:	4b7d      	ldr	r3, [pc, #500]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc8:	4a7c      	ldr	r2, [pc, #496]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004cca:	f023 0304 	bic.w	r3, r3, #4
 8004cce:	6713      	str	r3, [r2, #112]	; 0x70
 8004cd0:	4b7a      	ldr	r3, [pc, #488]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd4:	4a79      	ldr	r2, [pc, #484]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004cd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d015      	beq.n	8004d10 <HAL_RCC_OscConfig+0x58c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce4:	f7fc fbf4 	bl	80014d0 <HAL_GetTick>
 8004ce8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cea:	e00a      	b.n	8004d02 <HAL_RCC_OscConfig+0x57e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cec:	f7fc fbf0 	bl	80014d0 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e121      	b.n	8004f46 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d02:	4b6e      	ldr	r3, [pc, #440]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0ee      	beq.n	8004cec <HAL_RCC_OscConfig+0x568>
 8004d0e:	e014      	b.n	8004d3a <HAL_RCC_OscConfig+0x5b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d10:	f7fc fbde 	bl	80014d0 <HAL_GetTick>
 8004d14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d16:	e00a      	b.n	8004d2e <HAL_RCC_OscConfig+0x5aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d18:	f7fc fbda 	bl	80014d0 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d901      	bls.n	8004d2e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e10b      	b.n	8004f46 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d2e:	4b63      	ldr	r3, [pc, #396]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1ee      	bne.n	8004d18 <HAL_RCC_OscConfig+0x594>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 8100 	beq.w	8004f44 <HAL_RCC_OscConfig+0x7c0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004d44:	4b5d      	ldr	r3, [pc, #372]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d4c:	2b18      	cmp	r3, #24
 8004d4e:	f000 80bb 	beq.w	8004ec8 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	f040 8095 	bne.w	8004e86 <HAL_RCC_OscConfig+0x702>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d5c:	4b57      	ldr	r3, [pc, #348]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a56      	ldr	r2, [pc, #344]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004d62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d68:	f7fc fbb2 	bl	80014d0 <HAL_GetTick>
 8004d6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d70:	f7fc fbae 	bl	80014d0 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e0e1      	b.n	8004f46 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d82:	4b4e      	ldr	r3, [pc, #312]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1f0      	bne.n	8004d70 <HAL_RCC_OscConfig+0x5ec>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d8e:	4b4b      	ldr	r3, [pc, #300]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004d90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d92:	4b4b      	ldr	r3, [pc, #300]	; (8004ec0 <HAL_RCC_OscConfig+0x73c>)
 8004d94:	4013      	ands	r3, r2
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004d9e:	0112      	lsls	r2, r2, #4
 8004da0:	430a      	orrs	r2, r1
 8004da2:	4946      	ldr	r1, [pc, #280]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	628b      	str	r3, [r1, #40]	; 0x28
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dac:	3b01      	subs	r3, #1
 8004dae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db6:	3b01      	subs	r3, #1
 8004db8:	025b      	lsls	r3, r3, #9
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	431a      	orrs	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	041b      	lsls	r3, r3, #16
 8004dc6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	061b      	lsls	r3, r3, #24
 8004dd4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004dd8:	4938      	ldr	r1, [pc, #224]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004dde:	4b37      	ldr	r3, [pc, #220]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de2:	4a36      	ldr	r2, [pc, #216]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004de4:	f023 0301 	bic.w	r3, r3, #1
 8004de8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004dea:	4b34      	ldr	r3, [pc, #208]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004dec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dee:	4b35      	ldr	r3, [pc, #212]	; (8004ec4 <HAL_RCC_OscConfig+0x740>)
 8004df0:	4013      	ands	r3, r2
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004df6:	00d2      	lsls	r2, r2, #3
 8004df8:	4930      	ldr	r1, [pc, #192]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004dfe:	4b2f      	ldr	r3, [pc, #188]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e02:	f023 020c 	bic.w	r2, r3, #12
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0a:	492c      	ldr	r1, [pc, #176]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004e10:	4b2a      	ldr	r3, [pc, #168]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e14:	f023 0202 	bic.w	r2, r3, #2
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e1c:	4927      	ldr	r1, [pc, #156]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004e22:	4b26      	ldr	r3, [pc, #152]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e26:	4a25      	ldr	r2, [pc, #148]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e2e:	4b23      	ldr	r3, [pc, #140]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e32:	4a22      	ldr	r2, [pc, #136]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004e3a:	4b20      	ldr	r3, [pc, #128]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3e:	4a1f      	ldr	r2, [pc, #124]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004e46:	4b1d      	ldr	r3, [pc, #116]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4a:	4a1c      	ldr	r2, [pc, #112]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004e4c:	f043 0301 	orr.w	r3, r3, #1
 8004e50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e52:	4b1a      	ldr	r3, [pc, #104]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a19      	ldr	r2, [pc, #100]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004e58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5e:	f7fc fb37 	bl	80014d0 <HAL_GetTick>
 8004e62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e64:	e008      	b.n	8004e78 <HAL_RCC_OscConfig+0x6f4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e66:	f7fc fb33 	bl	80014d0 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d901      	bls.n	8004e78 <HAL_RCC_OscConfig+0x6f4>
          {
            return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e066      	b.n	8004f46 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e78:	4b10      	ldr	r3, [pc, #64]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d0f0      	beq.n	8004e66 <HAL_RCC_OscConfig+0x6e2>
 8004e84:	e05e      	b.n	8004f44 <HAL_RCC_OscConfig+0x7c0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e86:	4b0d      	ldr	r3, [pc, #52]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a0c      	ldr	r2, [pc, #48]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004e8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e92:	f7fc fb1d 	bl	80014d0 <HAL_GetTick>
 8004e96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e98:	e008      	b.n	8004eac <HAL_RCC_OscConfig+0x728>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e9a:	f7fc fb19 	bl	80014d0 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d901      	bls.n	8004eac <HAL_RCC_OscConfig+0x728>
          {
            return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e04c      	b.n	8004f46 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004eac:	4b03      	ldr	r3, [pc, #12]	; (8004ebc <HAL_RCC_OscConfig+0x738>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1f0      	bne.n	8004e9a <HAL_RCC_OscConfig+0x716>
 8004eb8:	e044      	b.n	8004f44 <HAL_RCC_OscConfig+0x7c0>
 8004eba:	bf00      	nop
 8004ebc:	58024400 	.word	0x58024400
 8004ec0:	fffffc0c 	.word	0xfffffc0c
 8004ec4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004ec8:	4b21      	ldr	r3, [pc, #132]	; (8004f50 <HAL_RCC_OscConfig+0x7cc>)
 8004eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ecc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004ece:	4b20      	ldr	r3, [pc, #128]	; (8004f50 <HAL_RCC_OscConfig+0x7cc>)
 8004ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d031      	beq.n	8004f40 <HAL_RCC_OscConfig+0x7bc>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	f003 0203 	and.w	r2, r3, #3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d12a      	bne.n	8004f40 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	091b      	lsrs	r3, r3, #4
 8004eee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d122      	bne.n	8004f40 <HAL_RCC_OscConfig+0x7bc>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f04:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d11a      	bne.n	8004f40 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	0a5b      	lsrs	r3, r3, #9
 8004f0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f16:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d111      	bne.n	8004f40 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	0c1b      	lsrs	r3, r3, #16
 8004f20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f28:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d108      	bne.n	8004f40 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	0e1b      	lsrs	r3, r3, #24
 8004f32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f3a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d001      	beq.n	8004f44 <HAL_RCC_OscConfig+0x7c0>
      {
        return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e000      	b.n	8004f46 <HAL_RCC_OscConfig+0x7c2>
      }
    }
  }
  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3730      	adds	r7, #48	; 0x30
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	58024400 	.word	0x58024400

08004f54 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e19c      	b.n	80052a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f68:	4b8a      	ldr	r3, [pc, #552]	; (8005194 <HAL_RCC_ClockConfig+0x240>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 030f 	and.w	r3, r3, #15
 8004f70:	683a      	ldr	r2, [r7, #0]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d910      	bls.n	8004f98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f76:	4b87      	ldr	r3, [pc, #540]	; (8005194 <HAL_RCC_ClockConfig+0x240>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f023 020f 	bic.w	r2, r3, #15
 8004f7e:	4985      	ldr	r1, [pc, #532]	; (8005194 <HAL_RCC_ClockConfig+0x240>)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f86:	4b83      	ldr	r3, [pc, #524]	; (8005194 <HAL_RCC_ClockConfig+0x240>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 030f 	and.w	r3, r3, #15
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d001      	beq.n	8004f98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e184      	b.n	80052a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0304 	and.w	r3, r3, #4
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d010      	beq.n	8004fc6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	691a      	ldr	r2, [r3, #16]
 8004fa8:	4b7b      	ldr	r3, [pc, #492]	; (8005198 <HAL_RCC_ClockConfig+0x244>)
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d908      	bls.n	8004fc6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004fb4:	4b78      	ldr	r3, [pc, #480]	; (8005198 <HAL_RCC_ClockConfig+0x244>)
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	4975      	ldr	r1, [pc, #468]	; (8005198 <HAL_RCC_ClockConfig+0x244>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0308 	and.w	r3, r3, #8
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d010      	beq.n	8004ff4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	695a      	ldr	r2, [r3, #20]
 8004fd6:	4b70      	ldr	r3, [pc, #448]	; (8005198 <HAL_RCC_ClockConfig+0x244>)
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d908      	bls.n	8004ff4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004fe2:	4b6d      	ldr	r3, [pc, #436]	; (8005198 <HAL_RCC_ClockConfig+0x244>)
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	496a      	ldr	r1, [pc, #424]	; (8005198 <HAL_RCC_ClockConfig+0x244>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0310 	and.w	r3, r3, #16
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d010      	beq.n	8005022 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	699a      	ldr	r2, [r3, #24]
 8005004:	4b64      	ldr	r3, [pc, #400]	; (8005198 <HAL_RCC_ClockConfig+0x244>)
 8005006:	69db      	ldr	r3, [r3, #28]
 8005008:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800500c:	429a      	cmp	r2, r3
 800500e:	d908      	bls.n	8005022 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005010:	4b61      	ldr	r3, [pc, #388]	; (8005198 <HAL_RCC_ClockConfig+0x244>)
 8005012:	69db      	ldr	r3, [r3, #28]
 8005014:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	495e      	ldr	r1, [pc, #376]	; (8005198 <HAL_RCC_ClockConfig+0x244>)
 800501e:	4313      	orrs	r3, r2
 8005020:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0320 	and.w	r3, r3, #32
 800502a:	2b00      	cmp	r3, #0
 800502c:	d010      	beq.n	8005050 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	69da      	ldr	r2, [r3, #28]
 8005032:	4b59      	ldr	r3, [pc, #356]	; (8005198 <HAL_RCC_ClockConfig+0x244>)
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800503a:	429a      	cmp	r2, r3
 800503c:	d908      	bls.n	8005050 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800503e:	4b56      	ldr	r3, [pc, #344]	; (8005198 <HAL_RCC_ClockConfig+0x244>)
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	4953      	ldr	r1, [pc, #332]	; (8005198 <HAL_RCC_ClockConfig+0x244>)
 800504c:	4313      	orrs	r3, r2
 800504e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0302 	and.w	r3, r3, #2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d010      	beq.n	800507e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68da      	ldr	r2, [r3, #12]
 8005060:	4b4d      	ldr	r3, [pc, #308]	; (8005198 <HAL_RCC_ClockConfig+0x244>)
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	f003 030f 	and.w	r3, r3, #15
 8005068:	429a      	cmp	r2, r3
 800506a:	d908      	bls.n	800507e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800506c:	4b4a      	ldr	r3, [pc, #296]	; (8005198 <HAL_RCC_ClockConfig+0x244>)
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	f023 020f 	bic.w	r2, r3, #15
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	4947      	ldr	r1, [pc, #284]	; (8005198 <HAL_RCC_ClockConfig+0x244>)
 800507a:	4313      	orrs	r3, r2
 800507c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d055      	beq.n	8005136 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800508a:	4b43      	ldr	r3, [pc, #268]	; (8005198 <HAL_RCC_ClockConfig+0x244>)
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	4940      	ldr	r1, [pc, #256]	; (8005198 <HAL_RCC_ClockConfig+0x244>)
 8005098:	4313      	orrs	r3, r2
 800509a:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d107      	bne.n	80050b4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050a4:	4b3c      	ldr	r3, [pc, #240]	; (8005198 <HAL_RCC_ClockConfig+0x244>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d121      	bne.n	80050f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e0f6      	b.n	80052a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	2b03      	cmp	r3, #3
 80050ba:	d107      	bne.n	80050cc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050bc:	4b36      	ldr	r3, [pc, #216]	; (8005198 <HAL_RCC_ClockConfig+0x244>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d115      	bne.n	80050f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e0ea      	b.n	80052a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d107      	bne.n	80050e4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80050d4:	4b30      	ldr	r3, [pc, #192]	; (8005198 <HAL_RCC_ClockConfig+0x244>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d109      	bne.n	80050f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e0de      	b.n	80052a2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050e4:	4b2c      	ldr	r3, [pc, #176]	; (8005198 <HAL_RCC_ClockConfig+0x244>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d101      	bne.n	80050f4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e0d6      	b.n	80052a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050f4:	4b28      	ldr	r3, [pc, #160]	; (8005198 <HAL_RCC_ClockConfig+0x244>)
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	f023 0207 	bic.w	r2, r3, #7
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	4925      	ldr	r1, [pc, #148]	; (8005198 <HAL_RCC_ClockConfig+0x244>)
 8005102:	4313      	orrs	r3, r2
 8005104:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005106:	f7fc f9e3 	bl	80014d0 <HAL_GetTick>
 800510a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800510c:	e00a      	b.n	8005124 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800510e:	f7fc f9df 	bl	80014d0 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	f241 3288 	movw	r2, #5000	; 0x1388
 800511c:	4293      	cmp	r3, r2
 800511e:	d901      	bls.n	8005124 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e0be      	b.n	80052a2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005124:	4b1c      	ldr	r3, [pc, #112]	; (8005198 <HAL_RCC_ClockConfig+0x244>)
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	00db      	lsls	r3, r3, #3
 8005132:	429a      	cmp	r2, r3
 8005134:	d1eb      	bne.n	800510e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d010      	beq.n	8005164 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68da      	ldr	r2, [r3, #12]
 8005146:	4b14      	ldr	r3, [pc, #80]	; (8005198 <HAL_RCC_ClockConfig+0x244>)
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	f003 030f 	and.w	r3, r3, #15
 800514e:	429a      	cmp	r2, r3
 8005150:	d208      	bcs.n	8005164 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005152:	4b11      	ldr	r3, [pc, #68]	; (8005198 <HAL_RCC_ClockConfig+0x244>)
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	f023 020f 	bic.w	r2, r3, #15
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	490e      	ldr	r1, [pc, #56]	; (8005198 <HAL_RCC_ClockConfig+0x244>)
 8005160:	4313      	orrs	r3, r2
 8005162:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005164:	4b0b      	ldr	r3, [pc, #44]	; (8005194 <HAL_RCC_ClockConfig+0x240>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 030f 	and.w	r3, r3, #15
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	429a      	cmp	r2, r3
 8005170:	d214      	bcs.n	800519c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005172:	4b08      	ldr	r3, [pc, #32]	; (8005194 <HAL_RCC_ClockConfig+0x240>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f023 020f 	bic.w	r2, r3, #15
 800517a:	4906      	ldr	r1, [pc, #24]	; (8005194 <HAL_RCC_ClockConfig+0x240>)
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	4313      	orrs	r3, r2
 8005180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005182:	4b04      	ldr	r3, [pc, #16]	; (8005194 <HAL_RCC_ClockConfig+0x240>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 030f 	and.w	r3, r3, #15
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	429a      	cmp	r2, r3
 800518e:	d005      	beq.n	800519c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e086      	b.n	80052a2 <HAL_RCC_ClockConfig+0x34e>
 8005194:	52002000 	.word	0x52002000
 8005198:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0304 	and.w	r3, r3, #4
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d010      	beq.n	80051ca <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	691a      	ldr	r2, [r3, #16]
 80051ac:	4b3f      	ldr	r3, [pc, #252]	; (80052ac <HAL_RCC_ClockConfig+0x358>)
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d208      	bcs.n	80051ca <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80051b8:	4b3c      	ldr	r3, [pc, #240]	; (80052ac <HAL_RCC_ClockConfig+0x358>)
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	4939      	ldr	r1, [pc, #228]	; (80052ac <HAL_RCC_ClockConfig+0x358>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0308 	and.w	r3, r3, #8
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d010      	beq.n	80051f8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	695a      	ldr	r2, [r3, #20]
 80051da:	4b34      	ldr	r3, [pc, #208]	; (80052ac <HAL_RCC_ClockConfig+0x358>)
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d208      	bcs.n	80051f8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80051e6:	4b31      	ldr	r3, [pc, #196]	; (80052ac <HAL_RCC_ClockConfig+0x358>)
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	492e      	ldr	r1, [pc, #184]	; (80052ac <HAL_RCC_ClockConfig+0x358>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0310 	and.w	r3, r3, #16
 8005200:	2b00      	cmp	r3, #0
 8005202:	d010      	beq.n	8005226 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	699a      	ldr	r2, [r3, #24]
 8005208:	4b28      	ldr	r3, [pc, #160]	; (80052ac <HAL_RCC_ClockConfig+0x358>)
 800520a:	69db      	ldr	r3, [r3, #28]
 800520c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005210:	429a      	cmp	r2, r3
 8005212:	d208      	bcs.n	8005226 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005214:	4b25      	ldr	r3, [pc, #148]	; (80052ac <HAL_RCC_ClockConfig+0x358>)
 8005216:	69db      	ldr	r3, [r3, #28]
 8005218:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	4922      	ldr	r1, [pc, #136]	; (80052ac <HAL_RCC_ClockConfig+0x358>)
 8005222:	4313      	orrs	r3, r2
 8005224:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0320 	and.w	r3, r3, #32
 800522e:	2b00      	cmp	r3, #0
 8005230:	d010      	beq.n	8005254 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	69da      	ldr	r2, [r3, #28]
 8005236:	4b1d      	ldr	r3, [pc, #116]	; (80052ac <HAL_RCC_ClockConfig+0x358>)
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800523e:	429a      	cmp	r2, r3
 8005240:	d208      	bcs.n	8005254 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005242:	4b1a      	ldr	r3, [pc, #104]	; (80052ac <HAL_RCC_ClockConfig+0x358>)
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	69db      	ldr	r3, [r3, #28]
 800524e:	4917      	ldr	r1, [pc, #92]	; (80052ac <HAL_RCC_ClockConfig+0x358>)
 8005250:	4313      	orrs	r3, r2
 8005252:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005254:	f000 f834 	bl	80052c0 <HAL_RCC_GetSysClockFreq>
 8005258:	4601      	mov	r1, r0
 800525a:	4b14      	ldr	r3, [pc, #80]	; (80052ac <HAL_RCC_ClockConfig+0x358>)
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	0a1b      	lsrs	r3, r3, #8
 8005260:	f003 030f 	and.w	r3, r3, #15
 8005264:	4a12      	ldr	r2, [pc, #72]	; (80052b0 <HAL_RCC_ClockConfig+0x35c>)
 8005266:	5cd3      	ldrb	r3, [r2, r3]
 8005268:	f003 031f 	and.w	r3, r3, #31
 800526c:	fa21 f303 	lsr.w	r3, r1, r3
 8005270:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005272:	4b0e      	ldr	r3, [pc, #56]	; (80052ac <HAL_RCC_ClockConfig+0x358>)
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	f003 030f 	and.w	r3, r3, #15
 800527a:	4a0d      	ldr	r2, [pc, #52]	; (80052b0 <HAL_RCC_ClockConfig+0x35c>)
 800527c:	5cd3      	ldrb	r3, [r2, r3]
 800527e:	f003 031f 	and.w	r3, r3, #31
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	fa22 f303 	lsr.w	r3, r2, r3
 8005288:	4a0a      	ldr	r2, [pc, #40]	; (80052b4 <HAL_RCC_ClockConfig+0x360>)
 800528a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800528c:	4a0a      	ldr	r2, [pc, #40]	; (80052b8 <HAL_RCC_ClockConfig+0x364>)
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005292:	4b0a      	ldr	r3, [pc, #40]	; (80052bc <HAL_RCC_ClockConfig+0x368>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4618      	mov	r0, r3
 8005298:	f7fc f8d0 	bl	800143c <HAL_InitTick>
 800529c:	4603      	mov	r3, r0
 800529e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80052a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3718      	adds	r7, #24
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	58024400 	.word	0x58024400
 80052b0:	08009720 	.word	0x08009720
 80052b4:	24000004 	.word	0x24000004
 80052b8:	24000000 	.word	0x24000000
 80052bc:	24000008 	.word	0x24000008

080052c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b089      	sub	sp, #36	; 0x24
 80052c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052c6:	4baf      	ldr	r3, [pc, #700]	; (8005584 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052ce:	2b18      	cmp	r3, #24
 80052d0:	f200 814e 	bhi.w	8005570 <HAL_RCC_GetSysClockFreq+0x2b0>
 80052d4:	a201      	add	r2, pc, #4	; (adr r2, 80052dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80052d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052da:	bf00      	nop
 80052dc:	08005341 	.word	0x08005341
 80052e0:	08005571 	.word	0x08005571
 80052e4:	08005571 	.word	0x08005571
 80052e8:	08005571 	.word	0x08005571
 80052ec:	08005571 	.word	0x08005571
 80052f0:	08005571 	.word	0x08005571
 80052f4:	08005571 	.word	0x08005571
 80052f8:	08005571 	.word	0x08005571
 80052fc:	08005367 	.word	0x08005367
 8005300:	08005571 	.word	0x08005571
 8005304:	08005571 	.word	0x08005571
 8005308:	08005571 	.word	0x08005571
 800530c:	08005571 	.word	0x08005571
 8005310:	08005571 	.word	0x08005571
 8005314:	08005571 	.word	0x08005571
 8005318:	08005571 	.word	0x08005571
 800531c:	0800536d 	.word	0x0800536d
 8005320:	08005571 	.word	0x08005571
 8005324:	08005571 	.word	0x08005571
 8005328:	08005571 	.word	0x08005571
 800532c:	08005571 	.word	0x08005571
 8005330:	08005571 	.word	0x08005571
 8005334:	08005571 	.word	0x08005571
 8005338:	08005571 	.word	0x08005571
 800533c:	08005373 	.word	0x08005373
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005340:	4b90      	ldr	r3, [pc, #576]	; (8005584 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0320 	and.w	r3, r3, #32
 8005348:	2b00      	cmp	r3, #0
 800534a:	d009      	beq.n	8005360 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800534c:	4b8d      	ldr	r3, [pc, #564]	; (8005584 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	08db      	lsrs	r3, r3, #3
 8005352:	f003 0303 	and.w	r3, r3, #3
 8005356:	4a8c      	ldr	r2, [pc, #560]	; (8005588 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005358:	fa22 f303 	lsr.w	r3, r2, r3
 800535c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800535e:	e10a      	b.n	8005576 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005360:	4b89      	ldr	r3, [pc, #548]	; (8005588 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005362:	61bb      	str	r3, [r7, #24]
    break;
 8005364:	e107      	b.n	8005576 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005366:	4b89      	ldr	r3, [pc, #548]	; (800558c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005368:	61bb      	str	r3, [r7, #24]
    break;
 800536a:	e104      	b.n	8005576 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800536c:	4b88      	ldr	r3, [pc, #544]	; (8005590 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800536e:	61bb      	str	r3, [r7, #24]
    break;
 8005370:	e101      	b.n	8005576 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005372:	4b84      	ldr	r3, [pc, #528]	; (8005584 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005376:	f003 0303 	and.w	r3, r3, #3
 800537a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800537c:	4b81      	ldr	r3, [pc, #516]	; (8005584 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800537e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005380:	091b      	lsrs	r3, r3, #4
 8005382:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005386:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005388:	4b7e      	ldr	r3, [pc, #504]	; (8005584 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800538a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538c:	f003 0301 	and.w	r3, r3, #1
 8005390:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005392:	4b7c      	ldr	r3, [pc, #496]	; (8005584 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005396:	08db      	lsrs	r3, r3, #3
 8005398:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	fb02 f303 	mul.w	r3, r2, r3
 80053a2:	ee07 3a90 	vmov	s15, r3
 80053a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053aa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 80da 	beq.w	800556a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d05a      	beq.n	8005472 <HAL_RCC_GetSysClockFreq+0x1b2>
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d302      	bcc.n	80053c6 <HAL_RCC_GetSysClockFreq+0x106>
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d078      	beq.n	80054b6 <HAL_RCC_GetSysClockFreq+0x1f6>
 80053c4:	e099      	b.n	80054fa <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053c6:	4b6f      	ldr	r3, [pc, #444]	; (8005584 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0320 	and.w	r3, r3, #32
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d02d      	beq.n	800542e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80053d2:	4b6c      	ldr	r3, [pc, #432]	; (8005584 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	08db      	lsrs	r3, r3, #3
 80053d8:	f003 0303 	and.w	r3, r3, #3
 80053dc:	4a6a      	ldr	r2, [pc, #424]	; (8005588 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80053de:	fa22 f303 	lsr.w	r3, r2, r3
 80053e2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	ee07 3a90 	vmov	s15, r3
 80053ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	ee07 3a90 	vmov	s15, r3
 80053f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053fc:	4b61      	ldr	r3, [pc, #388]	; (8005584 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80053fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005404:	ee07 3a90 	vmov	s15, r3
 8005408:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800540c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005410:	eddf 5a60 	vldr	s11, [pc, #384]	; 8005594 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005414:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005418:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800541c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005420:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005428:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800542c:	e087      	b.n	800553e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	ee07 3a90 	vmov	s15, r3
 8005434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005438:	eddf 6a57 	vldr	s13, [pc, #348]	; 8005598 <HAL_RCC_GetSysClockFreq+0x2d8>
 800543c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005440:	4b50      	ldr	r3, [pc, #320]	; (8005584 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005448:	ee07 3a90 	vmov	s15, r3
 800544c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005450:	ed97 6a02 	vldr	s12, [r7, #8]
 8005454:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8005594 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005458:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800545c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005460:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005464:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800546c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005470:	e065      	b.n	800553e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	ee07 3a90 	vmov	s15, r3
 8005478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800547c:	eddf 6a47 	vldr	s13, [pc, #284]	; 800559c <HAL_RCC_GetSysClockFreq+0x2dc>
 8005480:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005484:	4b3f      	ldr	r3, [pc, #252]	; (8005584 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800548c:	ee07 3a90 	vmov	s15, r3
 8005490:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005494:	ed97 6a02 	vldr	s12, [r7, #8]
 8005498:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005594 <HAL_RCC_GetSysClockFreq+0x2d4>
 800549c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054b4:	e043      	b.n	800553e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	ee07 3a90 	vmov	s15, r3
 80054bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054c0:	eddf 6a37 	vldr	s13, [pc, #220]	; 80055a0 <HAL_RCC_GetSysClockFreq+0x2e0>
 80054c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054c8:	4b2e      	ldr	r3, [pc, #184]	; (8005584 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80054ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054d0:	ee07 3a90 	vmov	s15, r3
 80054d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80054dc:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005594 <HAL_RCC_GetSysClockFreq+0x2d4>
 80054e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054f8:	e021      	b.n	800553e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	ee07 3a90 	vmov	s15, r3
 8005500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005504:	eddf 6a25 	vldr	s13, [pc, #148]	; 800559c <HAL_RCC_GetSysClockFreq+0x2dc>
 8005508:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800550c:	4b1d      	ldr	r3, [pc, #116]	; (8005584 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800550e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005514:	ee07 3a90 	vmov	s15, r3
 8005518:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800551c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005520:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8005594 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005524:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005528:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800552c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005530:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005534:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005538:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800553c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800553e:	4b11      	ldr	r3, [pc, #68]	; (8005584 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005542:	0a5b      	lsrs	r3, r3, #9
 8005544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005548:	3301      	adds	r3, #1
 800554a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	ee07 3a90 	vmov	s15, r3
 8005552:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005556:	edd7 6a07 	vldr	s13, [r7, #28]
 800555a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800555e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005562:	ee17 3a90 	vmov	r3, s15
 8005566:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005568:	e005      	b.n	8005576 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800556a:	2300      	movs	r3, #0
 800556c:	61bb      	str	r3, [r7, #24]
    break;
 800556e:	e002      	b.n	8005576 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8005570:	4b06      	ldr	r3, [pc, #24]	; (800558c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005572:	61bb      	str	r3, [r7, #24]
    break;
 8005574:	bf00      	nop
  }

  return sysclockfreq;
 8005576:	69bb      	ldr	r3, [r7, #24]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3724      	adds	r7, #36	; 0x24
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr
 8005584:	58024400 	.word	0x58024400
 8005588:	03d09000 	.word	0x03d09000
 800558c:	003d0900 	.word	0x003d0900
 8005590:	007a1200 	.word	0x007a1200
 8005594:	46000000 	.word	0x46000000
 8005598:	4c742400 	.word	0x4c742400
 800559c:	4a742400 	.word	0x4a742400
 80055a0:	4af42400 	.word	0x4af42400

080055a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80055aa:	f7ff fe89 	bl	80052c0 <HAL_RCC_GetSysClockFreq>
 80055ae:	4601      	mov	r1, r0
 80055b0:	4b10      	ldr	r3, [pc, #64]	; (80055f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	0a1b      	lsrs	r3, r3, #8
 80055b6:	f003 030f 	and.w	r3, r3, #15
 80055ba:	4a0f      	ldr	r2, [pc, #60]	; (80055f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80055bc:	5cd3      	ldrb	r3, [r2, r3]
 80055be:	f003 031f 	and.w	r3, r3, #31
 80055c2:	fa21 f303 	lsr.w	r3, r1, r3
 80055c6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80055c8:	4b0a      	ldr	r3, [pc, #40]	; (80055f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	f003 030f 	and.w	r3, r3, #15
 80055d0:	4a09      	ldr	r2, [pc, #36]	; (80055f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80055d2:	5cd3      	ldrb	r3, [r2, r3]
 80055d4:	f003 031f 	and.w	r3, r3, #31
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	fa22 f303 	lsr.w	r3, r2, r3
 80055de:	4a07      	ldr	r2, [pc, #28]	; (80055fc <HAL_RCC_GetHCLKFreq+0x58>)
 80055e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80055e2:	4a07      	ldr	r2, [pc, #28]	; (8005600 <HAL_RCC_GetHCLKFreq+0x5c>)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80055e8:	4b04      	ldr	r3, [pc, #16]	; (80055fc <HAL_RCC_GetHCLKFreq+0x58>)
 80055ea:	681b      	ldr	r3, [r3, #0]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3708      	adds	r7, #8
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	58024400 	.word	0x58024400
 80055f8:	08009720 	.word	0x08009720
 80055fc:	24000004 	.word	0x24000004
 8005600:	24000000 	.word	0x24000000

08005604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8005608:	f7ff ffcc 	bl	80055a4 <HAL_RCC_GetHCLKFreq>
 800560c:	4601      	mov	r1, r0
 800560e:	4b06      	ldr	r3, [pc, #24]	; (8005628 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005610:	69db      	ldr	r3, [r3, #28]
 8005612:	091b      	lsrs	r3, r3, #4
 8005614:	f003 0307 	and.w	r3, r3, #7
 8005618:	4a04      	ldr	r2, [pc, #16]	; (800562c <HAL_RCC_GetPCLK1Freq+0x28>)
 800561a:	5cd3      	ldrb	r3, [r2, r3]
 800561c:	f003 031f 	and.w	r3, r3, #31
 8005620:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 8005624:	4618      	mov	r0, r3
 8005626:	bd80      	pop	{r7, pc}
 8005628:	58024400 	.word	0x58024400
 800562c:	08009720 	.word	0x08009720

08005630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8005634:	f7ff ffb6 	bl	80055a4 <HAL_RCC_GetHCLKFreq>
 8005638:	4601      	mov	r1, r0
 800563a:	4b06      	ldr	r3, [pc, #24]	; (8005654 <HAL_RCC_GetPCLK2Freq+0x24>)
 800563c:	69db      	ldr	r3, [r3, #28]
 800563e:	0a1b      	lsrs	r3, r3, #8
 8005640:	f003 0307 	and.w	r3, r3, #7
 8005644:	4a04      	ldr	r2, [pc, #16]	; (8005658 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005646:	5cd3      	ldrb	r3, [r2, r3]
 8005648:	f003 031f 	and.w	r3, r3, #31
 800564c:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 8005650:	4618      	mov	r0, r3
 8005652:	bd80      	pop	{r7, pc}
 8005654:	58024400 	.word	0x58024400
 8005658:	08009720 	.word	0x08009720

0800565c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005664:	2300      	movs	r3, #0
 8005666:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005668:	2300      	movs	r3, #0
 800566a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d03d      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800567c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005680:	d013      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005686:	d802      	bhi.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005688:	2b00      	cmp	r3, #0
 800568a:	d007      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800568c:	e01f      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x72>
 800568e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005692:	d013      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x60>
 8005694:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005698:	d01c      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800569a:	e018      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800569c:	4bad      	ldr	r3, [pc, #692]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800569e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a0:	4aac      	ldr	r2, [pc, #688]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80056a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80056a8:	e015      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	3304      	adds	r3, #4
 80056ae:	2102      	movs	r1, #2
 80056b0:	4618      	mov	r0, r3
 80056b2:	f001 fca7 	bl	8007004 <RCCEx_PLL2_Config>
 80056b6:	4603      	mov	r3, r0
 80056b8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80056ba:	e00c      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	3324      	adds	r3, #36	; 0x24
 80056c0:	2102      	movs	r1, #2
 80056c2:	4618      	mov	r0, r3
 80056c4:	f001 fd50 	bl	8007168 <RCCEx_PLL3_Config>
 80056c8:	4603      	mov	r3, r0
 80056ca:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80056cc:	e003      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	75fb      	strb	r3, [r7, #23]
      break;
 80056d2:	e000      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80056d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056d6:	7dfb      	ldrb	r3, [r7, #23]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d109      	bne.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80056dc:	4b9d      	ldr	r3, [pc, #628]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80056de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056e8:	499a      	ldr	r1, [pc, #616]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	650b      	str	r3, [r1, #80]	; 0x50
 80056ee:	e001      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056f0:	7dfb      	ldrb	r3, [r7, #23]
 80056f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d03d      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005704:	2b04      	cmp	r3, #4
 8005706:	d826      	bhi.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8005708:	a201      	add	r2, pc, #4	; (adr r2, 8005710 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800570a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570e:	bf00      	nop
 8005710:	08005725 	.word	0x08005725
 8005714:	08005733 	.word	0x08005733
 8005718:	08005745 	.word	0x08005745
 800571c:	0800575d 	.word	0x0800575d
 8005720:	0800575d 	.word	0x0800575d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005724:	4b8b      	ldr	r3, [pc, #556]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005728:	4a8a      	ldr	r2, [pc, #552]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800572a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800572e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005730:	e015      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	3304      	adds	r3, #4
 8005736:	2100      	movs	r1, #0
 8005738:	4618      	mov	r0, r3
 800573a:	f001 fc63 	bl	8007004 <RCCEx_PLL2_Config>
 800573e:	4603      	mov	r3, r0
 8005740:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005742:	e00c      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	3324      	adds	r3, #36	; 0x24
 8005748:	2100      	movs	r1, #0
 800574a:	4618      	mov	r0, r3
 800574c:	f001 fd0c 	bl	8007168 <RCCEx_PLL3_Config>
 8005750:	4603      	mov	r3, r0
 8005752:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005754:	e003      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	75fb      	strb	r3, [r7, #23]
      break;
 800575a:	e000      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800575c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800575e:	7dfb      	ldrb	r3, [r7, #23]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d109      	bne.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005764:	4b7b      	ldr	r3, [pc, #492]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005768:	f023 0207 	bic.w	r2, r3, #7
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005770:	4978      	ldr	r1, [pc, #480]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005772:	4313      	orrs	r3, r2
 8005774:	650b      	str	r3, [r1, #80]	; 0x50
 8005776:	e001      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005778:	7dfb      	ldrb	r3, [r7, #23]
 800577a:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005784:	2b00      	cmp	r3, #0
 8005786:	d043      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800578c:	2b80      	cmp	r3, #128	; 0x80
 800578e:	d01f      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8005790:	2b80      	cmp	r3, #128	; 0x80
 8005792:	d804      	bhi.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00b      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005798:	2b40      	cmp	r3, #64	; 0x40
 800579a:	d010      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x162>
 800579c:	e021      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800579e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057a2:	d021      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80057a4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80057a8:	d020      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x190>
 80057aa:	2bc0      	cmp	r3, #192	; 0xc0
 80057ac:	d020      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x194>
 80057ae:	e018      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057b0:	4b68      	ldr	r3, [pc, #416]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80057b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b4:	4a67      	ldr	r2, [pc, #412]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80057b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80057bc:	e019      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x196>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	3304      	adds	r3, #4
 80057c2:	2100      	movs	r1, #0
 80057c4:	4618      	mov	r0, r3
 80057c6:	f001 fc1d 	bl	8007004 <RCCEx_PLL2_Config>
 80057ca:	4603      	mov	r3, r0
 80057cc:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80057ce:	e010      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x196>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	3324      	adds	r3, #36	; 0x24
 80057d4:	2100      	movs	r1, #0
 80057d6:	4618      	mov	r0, r3
 80057d8:	f001 fcc6 	bl	8007168 <RCCEx_PLL3_Config>
 80057dc:	4603      	mov	r3, r0
 80057de:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80057e0:	e007      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	75fb      	strb	r3, [r7, #23]
      break;
 80057e6:	e004      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 80057e8:	bf00      	nop
 80057ea:	e002      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 80057ec:	bf00      	nop
 80057ee:	e000      	b.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 80057f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057f2:	7dfb      	ldrb	r3, [r7, #23]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d109      	bne.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80057f8:	4b56      	ldr	r3, [pc, #344]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80057fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057fc:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005804:	4953      	ldr	r1, [pc, #332]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005806:	4313      	orrs	r3, r2
 8005808:	650b      	str	r3, [r1, #80]	; 0x50
 800580a:	e001      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800580c:	7dfb      	ldrb	r3, [r7, #23]
 800580e:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005818:	2b00      	cmp	r3, #0
 800581a:	d047      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005824:	d022      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800582a:	d805      	bhi.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00d      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8005830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005834:	d011      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8005836:	e022      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8005838:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800583c:	d022      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800583e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005842:	d021      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8005844:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005848:	d020      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800584a:	e018      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x222>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800584c:	4b41      	ldr	r3, [pc, #260]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800584e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005850:	4a40      	ldr	r2, [pc, #256]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005856:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8005858:	e019      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x232>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	3304      	adds	r3, #4
 800585e:	2100      	movs	r1, #0
 8005860:	4618      	mov	r0, r3
 8005862:	f001 fbcf 	bl	8007004 <RCCEx_PLL2_Config>
 8005866:	4603      	mov	r3, r0
 8005868:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800586a:	e010      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x232>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	3324      	adds	r3, #36	; 0x24
 8005870:	2100      	movs	r1, #0
 8005872:	4618      	mov	r0, r3
 8005874:	f001 fc78 	bl	8007168 <RCCEx_PLL3_Config>
 8005878:	4603      	mov	r3, r0
 800587a:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800587c:	e007      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x232>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	75fb      	strb	r3, [r7, #23]
      break;
 8005882:	e004      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 8005884:	bf00      	nop
 8005886:	e002      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 8005888:	bf00      	nop
 800588a:	e000      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 800588c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800588e:	7dfb      	ldrb	r3, [r7, #23]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d109      	bne.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8005894:	4b2f      	ldr	r3, [pc, #188]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005898:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058a0:	492c      	ldr	r1, [pc, #176]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	650b      	str	r3, [r1, #80]	; 0x50
 80058a6:	e001      	b.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x250>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058a8:	7dfb      	ldrb	r3, [r7, #23]
 80058aa:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d032      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058bc:	2b10      	cmp	r3, #16
 80058be:	d009      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80058c0:	2b10      	cmp	r3, #16
 80058c2:	d802      	bhi.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d018      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x29e>
 80058c8:	e014      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80058ca:	2b20      	cmp	r3, #32
 80058cc:	d009      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80058ce:	2b30      	cmp	r3, #48	; 0x30
 80058d0:	d015      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 80058d2:	e00f      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x298>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058d4:	4b1f      	ldr	r3, [pc, #124]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80058d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d8:	4a1e      	ldr	r2, [pc, #120]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80058da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80058e0:	e00e      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x2a4>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	3304      	adds	r3, #4
 80058e6:	2102      	movs	r1, #2
 80058e8:	4618      	mov	r0, r3
 80058ea:	f001 fb8b 	bl	8007004 <RCCEx_PLL2_Config>
 80058ee:	4603      	mov	r3, r0
 80058f0:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80058f2:	e005      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	75fb      	strb	r3, [r7, #23]
      break;
 80058f8:	e002      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      break;
 80058fa:	bf00      	nop
 80058fc:	e000      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      break;
 80058fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005900:	7dfb      	ldrb	r3, [r7, #23]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d109      	bne.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005906:	4b13      	ldr	r3, [pc, #76]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800590a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005912:	4910      	ldr	r1, [pc, #64]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005914:	4313      	orrs	r3, r2
 8005916:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005918:	e001      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800591a:	7dfb      	ldrb	r3, [r7, #23]
 800591c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d044      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800592e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005932:	d021      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8005934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005938:	d805      	bhi.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00c      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800593e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005942:	d010      	beq.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8005944:	e021      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8005946:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800594a:	d021      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x334>
 800594c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005950:	d020      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8005952:	e01a      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8005954:	58024400 	.word	0x58024400
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005958:	4ba6      	ldr	r3, [pc, #664]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800595a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595c:	4aa5      	ldr	r2, [pc, #660]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800595e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005962:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005964:	e017      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x33a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	3304      	adds	r3, #4
 800596a:	2100      	movs	r1, #0
 800596c:	4618      	mov	r0, r3
 800596e:	f001 fb49 	bl	8007004 <RCCEx_PLL2_Config>
 8005972:	4603      	mov	r3, r0
 8005974:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005976:	e00e      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x33a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	3324      	adds	r3, #36	; 0x24
 800597c:	2100      	movs	r1, #0
 800597e:	4618      	mov	r0, r3
 8005980:	f001 fbf2 	bl	8007168 <RCCEx_PLL3_Config>
 8005984:	4603      	mov	r3, r0
 8005986:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005988:	e005      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x33a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	75fb      	strb	r3, [r7, #23]
      break;
 800598e:	e002      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x33a>
      break;
 8005990:	bf00      	nop
 8005992:	e000      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x33a>
      break;
 8005994:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005996:	7dfb      	ldrb	r3, [r7, #23]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d109      	bne.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x354>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800599c:	4b95      	ldr	r3, [pc, #596]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800599e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059a0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059a8:	4992      	ldr	r1, [pc, #584]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	650b      	str	r3, [r1, #80]	; 0x50
 80059ae:	e001      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x358>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b0:	7dfb      	ldrb	r3, [r7, #23]
 80059b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d042      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059c8:	d01b      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 80059ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059ce:	d805      	bhi.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x380>
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d022      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x3be>
 80059d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059d8:	d00a      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x394>
 80059da:	e01b      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 80059dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80059e0:	d01d      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 80059e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059e6:	d01c      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 80059e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80059ec:	d01b      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 80059ee:	e011      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	3304      	adds	r3, #4
 80059f4:	2101      	movs	r1, #1
 80059f6:	4618      	mov	r0, r3
 80059f8:	f001 fb04 	bl	8007004 <RCCEx_PLL2_Config>
 80059fc:	4603      	mov	r3, r0
 80059fe:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005a00:	e012      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	3324      	adds	r3, #36	; 0x24
 8005a06:	2101      	movs	r1, #1
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f001 fbad 	bl	8007168 <RCCEx_PLL3_Config>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005a12:	e009      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	75fb      	strb	r3, [r7, #23]
      break;
 8005a18:	e006      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8005a1a:	bf00      	nop
 8005a1c:	e004      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8005a1e:	bf00      	nop
 8005a20:	e002      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8005a22:	bf00      	nop
 8005a24:	e000      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8005a26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a28:	7dfb      	ldrb	r3, [r7, #23]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d109      	bne.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005a2e:	4b71      	ldr	r3, [pc, #452]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8005a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a32:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a3a:	496e      	ldr	r1, [pc, #440]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	650b      	str	r3, [r1, #80]	; 0x50
 8005a40:	e001      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a42:	7dfb      	ldrb	r3, [r7, #23]
 8005a44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d049      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005a58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005a5c:	d02a      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x458>
 8005a5e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005a62:	d808      	bhi.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005a64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a68:	d00f      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005a6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a6e:	d015      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d021      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 8005a74:	e01b      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x452>
 8005a76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a7a:	d01f      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x460>
 8005a7c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005a80:	d01e      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8005a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a86:	d01d      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8005a88:	e011      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x452>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	3304      	adds	r3, #4
 8005a8e:	2101      	movs	r1, #1
 8005a90:	4618      	mov	r0, r3
 8005a92:	f001 fab7 	bl	8007004 <RCCEx_PLL2_Config>
 8005a96:	4603      	mov	r3, r0
 8005a98:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005a9a:	e014      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	3324      	adds	r3, #36	; 0x24
 8005aa0:	2101      	movs	r1, #1
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f001 fb60 	bl	8007168 <RCCEx_PLL3_Config>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005aac:	e00b      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	75fb      	strb	r3, [r7, #23]
      break;
 8005ab2:	e008      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8005ab4:	bf00      	nop
 8005ab6:	e006      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8005ab8:	bf00      	nop
 8005aba:	e004      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8005abc:	bf00      	nop
 8005abe:	e002      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8005ac0:	bf00      	nop
 8005ac2:	e000      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 8005ac4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ac6:	7dfb      	ldrb	r3, [r7, #23]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d10a      	bne.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x486>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005acc:	4b49      	ldr	r3, [pc, #292]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8005ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005ada:	4946      	ldr	r1, [pc, #280]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	658b      	str	r3, [r1, #88]	; 0x58
 8005ae0:	e001      	b.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae2:	7dfb      	ldrb	r3, [r7, #23]
 8005ae4:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d02d      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005af6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005afa:	d005      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8005afc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b00:	d009      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d013      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005b06:	e00f      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b08:	4b3a      	ldr	r3, [pc, #232]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8005b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0c:	4a39      	ldr	r2, [pc, #228]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8005b0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005b14:	e00c      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4d4>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	3304      	adds	r3, #4
 8005b1a:	2101      	movs	r1, #1
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f001 fa71 	bl	8007004 <RCCEx_PLL2_Config>
 8005b22:	4603      	mov	r3, r0
 8005b24:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005b26:	e003      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	75fb      	strb	r3, [r7, #23]
      break;
 8005b2c:	e000      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      break;
 8005b2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b30:	7dfb      	ldrb	r3, [r7, #23]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d109      	bne.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b36:	4b2f      	ldr	r3, [pc, #188]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8005b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b3a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b42:	492c      	ldr	r1, [pc, #176]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	650b      	str	r3, [r1, #80]	; 0x50
 8005b48:	e001      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b4a:	7dfb      	ldrb	r3, [r7, #23]
 8005b4c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d031      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x562>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b5e:	2b03      	cmp	r3, #3
 8005b60:	d81a      	bhi.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x53c>
 8005b62:	a201      	add	r2, pc, #4	; (adr r2, 8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b68:	08005b9f 	.word	0x08005b9f
 8005b6c:	08005b79 	.word	0x08005b79
 8005b70:	08005b87 	.word	0x08005b87
 8005b74:	08005b9f 	.word	0x08005b9f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b78:	4b1e      	ldr	r3, [pc, #120]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8005b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7c:	4a1d      	ldr	r2, [pc, #116]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8005b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005b84:	e00c      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x544>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	3304      	adds	r3, #4
 8005b8a:	2102      	movs	r1, #2
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f001 fa39 	bl	8007004 <RCCEx_PLL2_Config>
 8005b92:	4603      	mov	r3, r0
 8005b94:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005b96:	e003      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	75fb      	strb	r3, [r7, #23]
      break;
 8005b9c:	e000      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      break;
 8005b9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ba0:	7dfb      	ldrb	r3, [r7, #23]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d109      	bne.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005ba6:	4b13      	ldr	r3, [pc, #76]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8005ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005baa:	f023 0203 	bic.w	r2, r3, #3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb2:	4910      	ldr	r1, [pc, #64]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005bb8:	e001      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x562>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bba:	7dfb      	ldrb	r3, [r7, #23]
 8005bbc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	f000 808a 	beq.w	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x684>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bcc:	4b0a      	ldr	r3, [pc, #40]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a09      	ldr	r2, [pc, #36]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 8005bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005bd8:	f7fb fc7a 	bl	80014d0 <HAL_GetTick>
 8005bdc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bde:	e00d      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005be0:	f7fb fc76 	bl	80014d0 <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	2b64      	cmp	r3, #100	; 0x64
 8005bec:	d906      	bls.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        ret = HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	75fb      	strb	r3, [r7, #23]
        break;
 8005bf2:	e009      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005bf4:	58024400 	.word	0x58024400
 8005bf8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bfc:	4bba      	ldr	r3, [pc, #744]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x88c>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d0eb      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      }
    }

    if(ret == HAL_OK)
 8005c08:	7dfb      	ldrb	r3, [r7, #23]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d166      	bne.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005c0e:	4bb7      	ldr	r3, [pc, #732]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8005c10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c18:	4053      	eors	r3, r2
 8005c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d013      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c22:	4bb2      	ldr	r3, [pc, #712]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8005c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c2a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c2c:	4baf      	ldr	r3, [pc, #700]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8005c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c30:	4aae      	ldr	r2, [pc, #696]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8005c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c36:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c38:	4bac      	ldr	r3, [pc, #688]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8005c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c3c:	4aab      	ldr	r2, [pc, #684]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8005c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c42:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005c44:	4aa9      	ldr	r2, [pc, #676]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c54:	d115      	bne.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x626>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c56:	f7fb fc3b 	bl	80014d0 <HAL_GetTick>
 8005c5a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c5c:	e00b      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c5e:	f7fb fc37 	bl	80014d0 <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d902      	bls.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x61a>
          {
            ret = HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	75fb      	strb	r3, [r7, #23]
            break;
 8005c74:	e005      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x626>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c76:	4b9d      	ldr	r3, [pc, #628]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8005c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7a:	f003 0302 	and.w	r3, r3, #2
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d0ed      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x602>
          }
        }
      }

      if(ret == HAL_OK)
 8005c82:	7dfb      	ldrb	r3, [r7, #23]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d126      	bne.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c96:	d10d      	bne.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x658>
 8005c98:	4b94      	ldr	r3, [pc, #592]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ca6:	0919      	lsrs	r1, r3, #4
 8005ca8:	4b91      	ldr	r3, [pc, #580]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8005caa:	400b      	ands	r3, r1
 8005cac:	498f      	ldr	r1, [pc, #572]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	610b      	str	r3, [r1, #16]
 8005cb2:	e005      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005cb4:	4b8d      	ldr	r3, [pc, #564]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	4a8c      	ldr	r2, [pc, #560]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8005cba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005cbe:	6113      	str	r3, [r2, #16]
 8005cc0:	4b8a      	ldr	r3, [pc, #552]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8005cc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005cca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cce:	4987      	ldr	r1, [pc, #540]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	670b      	str	r3, [r1, #112]	; 0x70
 8005cd4:	e004      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x684>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005cd6:	7dfb      	ldrb	r3, [r7, #23]
 8005cd8:	75bb      	strb	r3, [r7, #22]
 8005cda:	e001      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x684>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cdc:	7dfb      	ldrb	r3, [r7, #23]
 8005cde:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d07f      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x790>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cf2:	2b28      	cmp	r3, #40	; 0x28
 8005cf4:	d866      	bhi.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x768>
 8005cf6:	a201      	add	r2, pc, #4	; (adr r2, 8005cfc <HAL_RCCEx_PeriphCLKConfig+0x6a0>)
 8005cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfc:	08005dcb 	.word	0x08005dcb
 8005d00:	08005dc5 	.word	0x08005dc5
 8005d04:	08005dc5 	.word	0x08005dc5
 8005d08:	08005dc5 	.word	0x08005dc5
 8005d0c:	08005dc5 	.word	0x08005dc5
 8005d10:	08005dc5 	.word	0x08005dc5
 8005d14:	08005dc5 	.word	0x08005dc5
 8005d18:	08005dc5 	.word	0x08005dc5
 8005d1c:	08005da1 	.word	0x08005da1
 8005d20:	08005dc5 	.word	0x08005dc5
 8005d24:	08005dc5 	.word	0x08005dc5
 8005d28:	08005dc5 	.word	0x08005dc5
 8005d2c:	08005dc5 	.word	0x08005dc5
 8005d30:	08005dc5 	.word	0x08005dc5
 8005d34:	08005dc5 	.word	0x08005dc5
 8005d38:	08005dc5 	.word	0x08005dc5
 8005d3c:	08005db3 	.word	0x08005db3
 8005d40:	08005dc5 	.word	0x08005dc5
 8005d44:	08005dc5 	.word	0x08005dc5
 8005d48:	08005dc5 	.word	0x08005dc5
 8005d4c:	08005dc5 	.word	0x08005dc5
 8005d50:	08005dc5 	.word	0x08005dc5
 8005d54:	08005dc5 	.word	0x08005dc5
 8005d58:	08005dc5 	.word	0x08005dc5
 8005d5c:	08005dcb 	.word	0x08005dcb
 8005d60:	08005dc5 	.word	0x08005dc5
 8005d64:	08005dc5 	.word	0x08005dc5
 8005d68:	08005dc5 	.word	0x08005dc5
 8005d6c:	08005dc5 	.word	0x08005dc5
 8005d70:	08005dc5 	.word	0x08005dc5
 8005d74:	08005dc5 	.word	0x08005dc5
 8005d78:	08005dc5 	.word	0x08005dc5
 8005d7c:	08005dcb 	.word	0x08005dcb
 8005d80:	08005dc5 	.word	0x08005dc5
 8005d84:	08005dc5 	.word	0x08005dc5
 8005d88:	08005dc5 	.word	0x08005dc5
 8005d8c:	08005dc5 	.word	0x08005dc5
 8005d90:	08005dc5 	.word	0x08005dc5
 8005d94:	08005dc5 	.word	0x08005dc5
 8005d98:	08005dc5 	.word	0x08005dc5
 8005d9c:	08005dcb 	.word	0x08005dcb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	3304      	adds	r3, #4
 8005da4:	2101      	movs	r1, #1
 8005da6:	4618      	mov	r0, r3
 8005da8:	f001 f92c 	bl	8007004 <RCCEx_PLL2_Config>
 8005dac:	4603      	mov	r3, r0
 8005dae:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005db0:	e00c      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x770>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	3324      	adds	r3, #36	; 0x24
 8005db6:	2101      	movs	r1, #1
 8005db8:	4618      	mov	r0, r3
 8005dba:	f001 f9d5 	bl	8007168 <RCCEx_PLL3_Config>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005dc2:	e003      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x770>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	75fb      	strb	r3, [r7, #23]
      break;
 8005dc8:	e000      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x770>
      break;
 8005dca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dcc:	7dfb      	ldrb	r3, [r7, #23]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d10a      	bne.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x78c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005dd2:	4b46      	ldr	r3, [pc, #280]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8005dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dd6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005de0:	4942      	ldr	r1, [pc, #264]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	654b      	str	r3, [r1, #84]	; 0x54
 8005de6:	e001      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x790>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005de8:	7dfb      	ldrb	r3, [r7, #23]
 8005dea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0302 	and.w	r3, r3, #2
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d038      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x80e>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dfc:	2b05      	cmp	r3, #5
 8005dfe:	d821      	bhi.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
 8005e00:	a201      	add	r2, pc, #4	; (adr r2, 8005e08 <HAL_RCCEx_PeriphCLKConfig+0x7ac>)
 8005e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e06:	bf00      	nop
 8005e08:	08005e4b 	.word	0x08005e4b
 8005e0c:	08005e21 	.word	0x08005e21
 8005e10:	08005e33 	.word	0x08005e33
 8005e14:	08005e4b 	.word	0x08005e4b
 8005e18:	08005e4b 	.word	0x08005e4b
 8005e1c:	08005e4b 	.word	0x08005e4b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	3304      	adds	r3, #4
 8005e24:	2101      	movs	r1, #1
 8005e26:	4618      	mov	r0, r3
 8005e28:	f001 f8ec 	bl	8007004 <RCCEx_PLL2_Config>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005e30:	e00c      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x7f0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	3324      	adds	r3, #36	; 0x24
 8005e36:	2101      	movs	r1, #1
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f001 f995 	bl	8007168 <RCCEx_PLL3_Config>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005e42:	e003      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	75fb      	strb	r3, [r7, #23]
      break;
 8005e48:	e000      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      break;
 8005e4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e4c:	7dfb      	ldrb	r3, [r7, #23]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d109      	bne.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005e52:	4b26      	ldr	r3, [pc, #152]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8005e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e56:	f023 0207 	bic.w	r2, r3, #7
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e5e:	4923      	ldr	r1, [pc, #140]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8005e60:	4313      	orrs	r3, r2
 8005e62:	654b      	str	r3, [r1, #84]	; 0x54
 8005e64:	e001      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x80e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e66:	7dfb      	ldrb	r3, [r7, #23]
 8005e68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0304 	and.w	r3, r3, #4
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d040      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x89c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e7c:	2b05      	cmp	r3, #5
 8005e7e:	d821      	bhi.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x868>
 8005e80:	a201      	add	r2, pc, #4	; (adr r2, 8005e88 <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 8005e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e86:	bf00      	nop
 8005e88:	08005ecb 	.word	0x08005ecb
 8005e8c:	08005ea1 	.word	0x08005ea1
 8005e90:	08005eb3 	.word	0x08005eb3
 8005e94:	08005ecb 	.word	0x08005ecb
 8005e98:	08005ecb 	.word	0x08005ecb
 8005e9c:	08005ecb 	.word	0x08005ecb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	3304      	adds	r3, #4
 8005ea4:	2101      	movs	r1, #1
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f001 f8ac 	bl	8007004 <RCCEx_PLL2_Config>
 8005eac:	4603      	mov	r3, r0
 8005eae:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005eb0:	e00c      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x870>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	3324      	adds	r3, #36	; 0x24
 8005eb6:	2101      	movs	r1, #1
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f001 f955 	bl	8007168 <RCCEx_PLL3_Config>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005ec2:	e003      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x870>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ec8:	e000      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x870>
      break;
 8005eca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ecc:	7dfb      	ldrb	r3, [r7, #23]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d110      	bne.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x898>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ed2:	4b06      	ldr	r3, [pc, #24]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8005ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ed6:	f023 0207 	bic.w	r2, r3, #7
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ee0:	4902      	ldr	r1, [pc, #8]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	658b      	str	r3, [r1, #88]	; 0x58
 8005ee6:	e007      	b.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 8005ee8:	58024800 	.word	0x58024800
 8005eec:	58024400 	.word	0x58024400
 8005ef0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ef4:	7dfb      	ldrb	r3, [r7, #23]
 8005ef6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0320 	and.w	r3, r3, #32
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d044      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f0e:	d01b      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8005f10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f14:	d805      	bhi.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d022      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x904>
 8005f1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f1e:	d00a      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x8da>
 8005f20:	e01b      	b.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8005f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f26:	d01d      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x908>
 8005f28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f2c:	d01c      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x90c>
 8005f2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f32:	d01b      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x910>
 8005f34:	e011      	b.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	3304      	adds	r3, #4
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f001 f861 	bl	8007004 <RCCEx_PLL2_Config>
 8005f42:	4603      	mov	r3, r0
 8005f44:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005f46:	e012      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x912>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	3324      	adds	r3, #36	; 0x24
 8005f4c:	2102      	movs	r1, #2
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f001 f90a 	bl	8007168 <RCCEx_PLL3_Config>
 8005f54:	4603      	mov	r3, r0
 8005f56:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005f58:	e009      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	75fb      	strb	r3, [r7, #23]
      break;
 8005f5e:	e006      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8005f60:	bf00      	nop
 8005f62:	e004      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8005f64:	bf00      	nop
 8005f66:	e002      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8005f68:	bf00      	nop
 8005f6a:	e000      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8005f6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f6e:	7dfb      	ldrb	r3, [r7, #23]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10a      	bne.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f74:	4bb3      	ldr	r3, [pc, #716]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8005f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f78:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f82:	49b0      	ldr	r1, [pc, #704]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	654b      	str	r3, [r1, #84]	; 0x54
 8005f88:	e001      	b.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x932>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f8a:	7dfb      	ldrb	r3, [r7, #23]
 8005f8c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d044      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005fa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fa4:	d01b      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x982>
 8005fa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005faa:	d805      	bhi.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d022      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x99a>
 8005fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fb4:	d00a      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x970>
 8005fb6:	e01b      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x994>
 8005fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fbc:	d01d      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x99e>
 8005fbe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005fc2:	d01c      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8005fc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fc8:	d01b      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8005fca:	e011      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x994>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	3304      	adds	r3, #4
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f001 f816 	bl	8007004 <RCCEx_PLL2_Config>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005fdc:	e012      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x9a8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	3324      	adds	r3, #36	; 0x24
 8005fe2:	2102      	movs	r1, #2
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f001 f8bf 	bl	8007168 <RCCEx_PLL3_Config>
 8005fea:	4603      	mov	r3, r0
 8005fec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005fee:	e009      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ff4:	e006      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 8005ff6:	bf00      	nop
 8005ff8:	e004      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 8005ffa:	bf00      	nop
 8005ffc:	e002      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 8005ffe:	bf00      	nop
 8006000:	e000      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 8006002:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006004:	7dfb      	ldrb	r3, [r7, #23]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10a      	bne.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x9c4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800600a:	4b8e      	ldr	r3, [pc, #568]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800600c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800600e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006018:	498a      	ldr	r1, [pc, #552]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800601a:	4313      	orrs	r3, r2
 800601c:	658b      	str	r3, [r1, #88]	; 0x58
 800601e:	e001      	b.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006020:	7dfb      	ldrb	r3, [r7, #23]
 8006022:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800602c:	2b00      	cmp	r3, #0
 800602e:	d044      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0xa5e>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006036:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800603a:	d01b      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0xa18>
 800603c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006040:	d805      	bhi.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8006042:	2b00      	cmp	r3, #0
 8006044:	d022      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800604a:	d00a      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800604c:	e01b      	b.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 800604e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006052:	d01d      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8006054:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006058:	d01c      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0xa38>
 800605a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800605e:	d01b      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 8006060:	e011      	b.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	3304      	adds	r3, #4
 8006066:	2100      	movs	r1, #0
 8006068:	4618      	mov	r0, r3
 800606a:	f000 ffcb 	bl	8007004 <RCCEx_PLL2_Config>
 800606e:	4603      	mov	r3, r0
 8006070:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006072:	e012      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	3324      	adds	r3, #36	; 0x24
 8006078:	2102      	movs	r1, #2
 800607a:	4618      	mov	r0, r3
 800607c:	f001 f874 	bl	8007168 <RCCEx_PLL3_Config>
 8006080:	4603      	mov	r3, r0
 8006082:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006084:	e009      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	75fb      	strb	r3, [r7, #23]
      break;
 800608a:	e006      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 800608c:	bf00      	nop
 800608e:	e004      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 8006090:	bf00      	nop
 8006092:	e002      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 8006094:	bf00      	nop
 8006096:	e000      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 8006098:	bf00      	nop
    }

    if(ret == HAL_OK)
 800609a:	7dfb      	ldrb	r3, [r7, #23]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d10a      	bne.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80060a0:	4b68      	ldr	r3, [pc, #416]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80060a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80060ae:	4965      	ldr	r1, [pc, #404]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80060b0:	4313      	orrs	r3, r2
 80060b2:	658b      	str	r3, [r1, #88]	; 0x58
 80060b4:	e001      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060b6:	7dfb      	ldrb	r3, [r7, #23]
 80060b8:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0308 	and.w	r3, r3, #8
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d01a      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0xaa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060d0:	d10a      	bne.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	3324      	adds	r3, #36	; 0x24
 80060d6:	2102      	movs	r1, #2
 80060d8:	4618      	mov	r0, r3
 80060da:	f001 f845 	bl	8007168 <RCCEx_PLL3_Config>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d001      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
        {
          status = HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80060e8:	4b56      	ldr	r3, [pc, #344]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80060ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f6:	4953      	ldr	r1, [pc, #332]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80060f8:	4313      	orrs	r3, r2
 80060fa:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0310 	and.w	r3, r3, #16
 8006104:	2b00      	cmp	r3, #0
 8006106:	d01a      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xae2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800610e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006112:	d10a      	bne.n	800612a <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	3324      	adds	r3, #36	; 0x24
 8006118:	2102      	movs	r1, #2
 800611a:	4618      	mov	r0, r3
 800611c:	f001 f824 	bl	8007168 <RCCEx_PLL3_Config>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d001      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0xace>
      {
        status = HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800612a:	4b46      	ldr	r3, [pc, #280]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800612c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800612e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006138:	4942      	ldr	r1, [pc, #264]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800613a:	4313      	orrs	r3, r2
 800613c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d030      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006154:	d00d      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0xb16>
 8006156:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800615a:	d016      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800615c:	2b00      	cmp	r3, #0
 800615e:	d111      	bne.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0xb28>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	3304      	adds	r3, #4
 8006164:	2100      	movs	r1, #0
 8006166:	4618      	mov	r0, r3
 8006168:	f000 ff4c 	bl	8007004 <RCCEx_PLL2_Config>
 800616c:	4603      	mov	r3, r0
 800616e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006170:	e00c      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	3324      	adds	r3, #36	; 0x24
 8006176:	2102      	movs	r1, #2
 8006178:	4618      	mov	r0, r3
 800617a:	f000 fff5 	bl	8007168 <RCCEx_PLL3_Config>
 800617e:	4603      	mov	r3, r0
 8006180:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006182:	e003      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	75fb      	strb	r3, [r7, #23]
      break;
 8006188:	e000      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800618a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800618c:	7dfb      	ldrb	r3, [r7, #23]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10a      	bne.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006192:	4b2c      	ldr	r3, [pc, #176]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006196:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80061a0:	4928      	ldr	r1, [pc, #160]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	658b      	str	r3, [r1, #88]	; 0x58
 80061a6:	e001      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061a8:	7dfb      	ldrb	r3, [r7, #23]
 80061aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d02f      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061c2:	d00c      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80061c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061c8:	d015      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0xb9a>
 80061ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061ce:	d10f      	bne.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0xb94>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061d0:	4b1c      	ldr	r3, [pc, #112]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80061d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d4:	4a1b      	ldr	r2, [pc, #108]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80061d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80061dc:	e00c      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	3324      	adds	r3, #36	; 0x24
 80061e2:	2101      	movs	r1, #1
 80061e4:	4618      	mov	r0, r3
 80061e6:	f000 ffbf 	bl	8007168 <RCCEx_PLL3_Config>
 80061ea:	4603      	mov	r3, r0
 80061ec:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80061ee:	e003      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	75fb      	strb	r3, [r7, #23]
      break;
 80061f4:	e000      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      break;
 80061f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061f8:	7dfb      	ldrb	r3, [r7, #23]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10a      	bne.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061fe:	4b11      	ldr	r3, [pc, #68]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006202:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800620c:	490d      	ldr	r1, [pc, #52]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800620e:	4313      	orrs	r3, r2
 8006210:	654b      	str	r3, [r1, #84]	; 0x54
 8006212:	e001      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006214:	7dfb      	ldrb	r3, [r7, #23]
 8006216:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d02c      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xc22>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006228:	2b00      	cmp	r3, #0
 800622a:	d003      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 800622c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006230:	d00a      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8006232:	e012      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006234:	4b03      	ldr	r3, [pc, #12]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006238:	4a02      	ldr	r2, [pc, #8]	; (8006244 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800623a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800623e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006240:	e00e      	b.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0xc04>
 8006242:	bf00      	nop
 8006244:	58024400 	.word	0x58024400

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	3304      	adds	r3, #4
 800624c:	2102      	movs	r1, #2
 800624e:	4618      	mov	r0, r3
 8006250:	f000 fed8 	bl	8007004 <RCCEx_PLL2_Config>
 8006254:	4603      	mov	r3, r0
 8006256:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006258:	e002      	b.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0xc04>

    default:
      ret = HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	75fb      	strb	r3, [r7, #23]
      break;
 800625e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006260:	7dfb      	ldrb	r3, [r7, #23]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d109      	bne.n	800627a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006266:	4b56      	ldr	r3, [pc, #344]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8006268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800626a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006272:	4953      	ldr	r1, [pc, #332]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8006274:	4313      	orrs	r3, r2
 8006276:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006278:	e001      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800627a:	7dfb      	ldrb	r3, [r7, #23]
 800627c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00a      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	3324      	adds	r3, #36	; 0x24
 800628e:	2102      	movs	r1, #2
 8006290:	4618      	mov	r0, r3
 8006292:	f000 ff69 	bl	8007168 <RCCEx_PLL3_Config>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d001      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
    {
      status=HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d031      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062b6:	d00c      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80062b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062bc:	d802      	bhi.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d011      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0xc8a>
 80062c2:	e00d      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80062c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062c8:	d00f      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0xc8e>
 80062ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062ce:	d00e      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80062d0:	e006      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062d2:	4b3b      	ldr	r3, [pc, #236]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80062d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d6:	4a3a      	ldr	r2, [pc, #232]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80062d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80062de:	e007      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	75fb      	strb	r3, [r7, #23]
      break;
 80062e4:	e004      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 80062e6:	bf00      	nop
 80062e8:	e002      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 80062ea:	bf00      	nop
 80062ec:	e000      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 80062ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062f0:	7dfb      	ldrb	r3, [r7, #23]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10a      	bne.n	800630c <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80062f6:	4b32      	ldr	r3, [pc, #200]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80062f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006304:	492e      	ldr	r1, [pc, #184]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8006306:	4313      	orrs	r3, r2
 8006308:	654b      	str	r3, [r1, #84]	; 0x54
 800630a:	e001      	b.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800630c:	7dfb      	ldrb	r3, [r7, #23]
 800630e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d008      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800631c:	4b28      	ldr	r3, [pc, #160]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800631e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006320:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006328:	4925      	ldr	r1, [pc, #148]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800632a:	4313      	orrs	r3, r2
 800632c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d008      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xcf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800633a:	4b21      	ldr	r3, [pc, #132]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800633c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800633e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006346:	491e      	ldr	r1, [pc, #120]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8006348:	4313      	orrs	r3, r2
 800634a:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006354:	2b00      	cmp	r3, #0
 8006356:	d008      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8006358:	4b19      	ldr	r3, [pc, #100]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800635a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800635c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006364:	4916      	ldr	r1, [pc, #88]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8006366:	4313      	orrs	r3, r2
 8006368:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00d      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0xd36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006376:	4b12      	ldr	r3, [pc, #72]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	4a11      	ldr	r2, [pc, #68]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800637c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006380:	6113      	str	r3, [r2, #16]
 8006382:	4b0f      	ldr	r3, [pc, #60]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8006384:	691a      	ldr	r2, [r3, #16]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800638c:	490c      	ldr	r1, [pc, #48]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800638e:	4313      	orrs	r3, r2
 8006390:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	da08      	bge.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xd50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800639a:	4b09      	ldr	r3, [pc, #36]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800639c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800639e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a6:	4906      	ldr	r1, [pc, #24]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80063ac:	7dbb      	ldrb	r3, [r7, #22]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    return HAL_OK;
 80063b2:	2300      	movs	r3, #0
 80063b4:	e000      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
  }
  return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3718      	adds	r7, #24
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	58024400 	.word	0x58024400

080063c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b090      	sub	sp, #64	; 0x40
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063d2:	d150      	bne.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80063d4:	4ba1      	ldr	r3, [pc, #644]	; (800665c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80063d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d8:	f003 0307 	and.w	r3, r3, #7
 80063dc:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80063de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e0:	2b04      	cmp	r3, #4
 80063e2:	d844      	bhi.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 80063e4:	a201      	add	r2, pc, #4	; (adr r2, 80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80063e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ea:	bf00      	nop
 80063ec:	08006401 	.word	0x08006401
 80063f0:	08006411 	.word	0x08006411
 80063f4:	08006421 	.word	0x08006421
 80063f8:	08006469 	.word	0x08006469
 80063fc:	08006431 	.word	0x08006431
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006400:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006404:	4618      	mov	r0, r3
 8006406:	f000 fcb1 	bl	8006d6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800640a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800640e:	e1ef      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006410:	f107 0318 	add.w	r3, r7, #24
 8006414:	4618      	mov	r0, r3
 8006416:	f000 fa11 	bl	800683c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800641e:	e1e7      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006420:	f107 030c 	add.w	r3, r7, #12
 8006424:	4618      	mov	r0, r3
 8006426:	f000 fb55 	bl	8006ad4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800642e:	e1df      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006430:	4b8a      	ldr	r3, [pc, #552]	; (800665c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006434:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006438:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800643a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800643c:	2b00      	cmp	r3, #0
 800643e:	d102      	bne.n	8006446 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006440:	4b87      	ldr	r3, [pc, #540]	; (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006442:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006444:	e1d4      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006448:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800644c:	d102      	bne.n	8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800644e:	4b85      	ldr	r3, [pc, #532]	; (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006450:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006452:	e1cd      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006456:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800645a:	d102      	bne.n	8006462 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 800645c:	4b82      	ldr	r3, [pc, #520]	; (8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800645e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006460:	e1c6      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 8006462:	2300      	movs	r3, #0
 8006464:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006466:	e1c3      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006468:	4b80      	ldr	r3, [pc, #512]	; (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800646a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800646c:	e1c0      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      default :
        {
          frequency = 0;
 800646e:	2300      	movs	r3, #0
 8006470:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006472:	bf00      	nop
 8006474:	e1bc      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800647c:	d14f      	bne.n	800651e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 800647e:	4b77      	ldr	r3, [pc, #476]	; (800665c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006482:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006486:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648a:	2b80      	cmp	r3, #128	; 0x80
 800648c:	d01c      	beq.n	80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800648e:	2b80      	cmp	r3, #128	; 0x80
 8006490:	d804      	bhi.n	800649c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8006492:	2b00      	cmp	r3, #0
 8006494:	d008      	beq.n	80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8006496:	2b40      	cmp	r3, #64	; 0x40
 8006498:	d00e      	beq.n	80064b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800649a:	e03c      	b.n	8006516 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800649c:	2bc0      	cmp	r3, #192	; 0xc0
 800649e:	d037      	beq.n	8006510 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80064a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064a4:	d018      	beq.n	80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 80064a6:	e036      	b.n	8006516 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064ac:	4618      	mov	r0, r3
 80064ae:	f000 fc5d 	bl	8006d6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80064b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064b6:	e19b      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064b8:	f107 0318 	add.w	r3, r7, #24
 80064bc:	4618      	mov	r0, r3
 80064be:	f000 f9bd 	bl	800683c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064c6:	e193      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064c8:	f107 030c 	add.w	r3, r7, #12
 80064cc:	4618      	mov	r0, r3
 80064ce:	f000 fb01 	bl	8006ad4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064d6:	e18b      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80064d8:	4b60      	ldr	r3, [pc, #384]	; (800665c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80064da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80064e0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80064e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d102      	bne.n	80064ee <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80064e8:	4b5d      	ldr	r3, [pc, #372]	; (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80064ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80064ec:	e180      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80064ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064f4:	d102      	bne.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 80064f6:	4b5b      	ldr	r3, [pc, #364]	; (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80064f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064fa:	e179      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80064fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006502:	d102      	bne.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8006504:	4b58      	ldr	r3, [pc, #352]	; (8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006506:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006508:	e172      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 800650a:	2300      	movs	r3, #0
 800650c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800650e:	e16f      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006510:	4b56      	ldr	r3, [pc, #344]	; (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006512:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006514:	e16c      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 8006516:	2300      	movs	r3, #0
 8006518:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800651a:	bf00      	nop
 800651c:	e168      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006524:	d153      	bne.n	80065ce <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8006526:	4b4d      	ldr	r3, [pc, #308]	; (800665c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800652a:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800652e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006536:	d01f      	beq.n	8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8006538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800653c:	d805      	bhi.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00a      	beq.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8006542:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006546:	d00f      	beq.n	8006568 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8006548:	e03d      	b.n	80065c6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800654a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800654e:	d037      	beq.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8006550:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006554:	d018      	beq.n	8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8006556:	e036      	b.n	80065c6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800655c:	4618      	mov	r0, r3
 800655e:	f000 fc05 	bl	8006d6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006564:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006566:	e143      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006568:	f107 0318 	add.w	r3, r7, #24
 800656c:	4618      	mov	r0, r3
 800656e:	f000 f965 	bl	800683c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006576:	e13b      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006578:	f107 030c 	add.w	r3, r7, #12
 800657c:	4618      	mov	r0, r3
 800657e:	f000 faa9 	bl	8006ad4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006586:	e133      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006588:	4b34      	ldr	r3, [pc, #208]	; (800665c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800658a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800658c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006590:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006594:	2b00      	cmp	r3, #0
 8006596:	d102      	bne.n	800659e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006598:	4b31      	ldr	r3, [pc, #196]	; (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800659a:	63fb      	str	r3, [r7, #60]	; 0x3c
          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }
          break;
 800659c:	e128      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800659e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065a4:	d102      	bne.n	80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 80065a6:	4b2f      	ldr	r3, [pc, #188]	; (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80065a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065aa:	e121      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80065ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065b2:	d102      	bne.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 80065b4:	4b2c      	ldr	r3, [pc, #176]	; (8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80065b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065b8:	e11a      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 80065ba:	2300      	movs	r3, #0
 80065bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065be:	e117      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80065c0:	4b2a      	ldr	r3, [pc, #168]	; (800666c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80065c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065c4:	e114      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 80065c6:	2300      	movs	r3, #0
 80065c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065ca:	bf00      	nop
 80065cc:	e110      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065d4:	d15d      	bne.n	8006692 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80065d6:	4b21      	ldr	r3, [pc, #132]	; (800665c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80065d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065da:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80065de:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80065e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065e6:	d01f      	beq.n	8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80065e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ec:	d805      	bhi.n	80065fa <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00a      	beq.n	8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80065f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065f6:	d00f      	beq.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80065f8:	e047      	b.n	800668a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 80065fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065fe:	d041      	beq.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8006600:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006604:	d018      	beq.n	8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8006606:	e040      	b.n	800668a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800660c:	4618      	mov	r0, r3
 800660e:	f000 fbad 	bl	8006d6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006614:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006616:	e0eb      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006618:	f107 0318 	add.w	r3, r7, #24
 800661c:	4618      	mov	r0, r3
 800661e:	f000 f90d 	bl	800683c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006626:	e0e3      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006628:	f107 030c 	add.w	r3, r7, #12
 800662c:	4618      	mov	r0, r3
 800662e:	f000 fa51 	bl	8006ad4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006636:	e0db      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006638:	4b08      	ldr	r3, [pc, #32]	; (800665c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800663a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800663c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006640:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006644:	2b00      	cmp	r3, #0
 8006646:	d102      	bne.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006648:	4b05      	ldr	r3, [pc, #20]	; (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800664a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800664c:	e0d0      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800664e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006650:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006654:	d10c      	bne.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8006656:	4b03      	ldr	r3, [pc, #12]	; (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006658:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800665a:	e0c9      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
 800665c:	58024400 	.word	0x58024400
 8006660:	03d09000 	.word	0x03d09000
 8006664:	003d0900 	.word	0x003d0900
 8006668:	007a1200 	.word	0x007a1200
 800666c:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006672:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006676:	d102      	bne.n	800667e <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8006678:	4b60      	ldr	r3, [pc, #384]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 800667a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800667c:	e0b8      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 800667e:	2300      	movs	r3, #0
 8006680:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006682:	e0b5      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006684:	4b5e      	ldr	r3, [pc, #376]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 8006686:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006688:	e0b2      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      default :
        {
          frequency = 0;
 800668a:	2300      	movs	r3, #0
 800668c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800668e:	bf00      	nop
 8006690:	e0ae      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006698:	d13d      	bne.n	8006716 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800669a:	4b5a      	ldr	r3, [pc, #360]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 800669c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800669e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80066a2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80066a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066aa:	d00c      	beq.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 80066ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066b0:	d011      	beq.n	80066d6 <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d12b      	bne.n	800670e <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066b6:	f107 0318 	add.w	r3, r7, #24
 80066ba:	4618      	mov	r0, r3
 80066bc:	f000 f8be 	bl	800683c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066c4:	e094      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066c6:	f107 030c 	add.w	r3, r7, #12
 80066ca:	4618      	mov	r0, r3
 80066cc:	f000 fa02 	bl	8006ad4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066d4:	e08c      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80066d6:	4b4b      	ldr	r3, [pc, #300]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 80066d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80066de:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80066e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d102      	bne.n	80066ec <HAL_RCCEx_GetPeriphCLKFreq+0x328>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80066e6:	4b48      	ldr	r3, [pc, #288]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x444>)
 80066e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80066ea:	e081      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80066ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066f2:	d102      	bne.n	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0x336>
            frequency = CSI_VALUE;
 80066f4:	4b45      	ldr	r3, [pc, #276]	; (800680c <HAL_RCCEx_GetPeriphCLKFreq+0x448>)
 80066f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066f8:	e07a      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80066fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006700:	d102      	bne.n	8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
            frequency = HSE_VALUE;
 8006702:	4b3e      	ldr	r3, [pc, #248]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8006704:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006706:	e073      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 8006708:	2300      	movs	r3, #0
 800670a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800670c:	e070      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 800670e:	2300      	movs	r3, #0
 8006710:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006712:	bf00      	nop
 8006714:	e06c      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800671c:	d11f      	bne.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800671e:	4b39      	ldr	r3, [pc, #228]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8006720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006726:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672a:	2b00      	cmp	r3, #0
 800672c:	d003      	beq.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800672e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006732:	d008      	beq.n	8006746 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
 8006734:	e00f      	b.n	8006756 <HAL_RCCEx_GetPeriphCLKFreq+0x392>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800673a:	4618      	mov	r0, r3
 800673c:	f000 fb16 	bl	8006d6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006742:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006744:	e054      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006746:	f107 0318 	add.w	r3, r7, #24
 800674a:	4618      	mov	r0, r3
 800674c:	f000 f876 	bl	800683c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006750:	6a3b      	ldr	r3, [r7, #32]
 8006752:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006754:	e04c      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 8006756:	2300      	movs	r3, #0
 8006758:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800675a:	bf00      	nop
 800675c:	e048      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006764:	d142      	bne.n	80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x428>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8006766:	4b27      	ldr	r3, [pc, #156]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8006768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800676a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800676e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006772:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006776:	d029      	beq.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x408>
 8006778:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800677c:	d808      	bhi.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800677e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006782:	d013      	beq.n	80067ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006788:	d018      	beq.n	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00a      	beq.n	80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 800678e:	e029      	b.n	80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 8006790:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006794:	d020      	beq.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8006796:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800679a:	d020      	beq.n	80067de <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 800679c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067a0:	d017      	beq.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 80067a2:	e01f      	b.n	80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80067a4:	f000 f834 	bl	8006810 <HAL_RCCEx_GetD3PCLK1Freq>
 80067a8:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80067aa:	e021      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067ac:	f107 0318 	add.w	r3, r7, #24
 80067b0:	4618      	mov	r0, r3
 80067b2:	f000 f843 	bl	800683c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067ba:	e019      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067bc:	f107 030c 	add.w	r3, r7, #12
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 f987 	bl	8006ad4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067ca:	e011      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 80067cc:	4b0e      	ldr	r3, [pc, #56]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x444>)
 80067ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067d0:	e00e      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 80067d2:	4b0e      	ldr	r3, [pc, #56]	; (800680c <HAL_RCCEx_GetPeriphCLKFreq+0x448>)
 80067d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067d6:	e00b      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 80067d8:	4b08      	ldr	r3, [pc, #32]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80067da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067dc:	e008      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80067de:	4b08      	ldr	r3, [pc, #32]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 80067e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067e2:	e005      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80067e4:	2300      	movs	r3, #0
 80067e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067e8:	bf00      	nop
 80067ea:	e001      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else
    {
      frequency = 0;
 80067ec:	2300      	movs	r3, #0
 80067ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80067f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3740      	adds	r7, #64	; 0x40
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	007a1200 	.word	0x007a1200
 8006800:	00bb8000 	.word	0x00bb8000
 8006804:	58024400 	.word	0x58024400
 8006808:	03d09000 	.word	0x03d09000
 800680c:	003d0900 	.word	0x003d0900

08006810 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8006814:	f7fe fec6 	bl	80055a4 <HAL_RCC_GetHCLKFreq>
 8006818:	4601      	mov	r1, r0
 800681a:	4b06      	ldr	r3, [pc, #24]	; (8006834 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	091b      	lsrs	r3, r3, #4
 8006820:	f003 0307 	and.w	r3, r3, #7
 8006824:	4a04      	ldr	r2, [pc, #16]	; (8006838 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006826:	5cd3      	ldrb	r3, [r2, r3]
 8006828:	f003 031f 	and.w	r3, r3, #31
 800682c:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 8006830:	4618      	mov	r0, r3
 8006832:	bd80      	pop	{r7, pc}
 8006834:	58024400 	.word	0x58024400
 8006838:	08009720 	.word	0x08009720

0800683c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800683c:	b480      	push	{r7}
 800683e:	b089      	sub	sp, #36	; 0x24
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006844:	4b9d      	ldr	r3, [pc, #628]	; (8006abc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006848:	f003 0303 	and.w	r3, r3, #3
 800684c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800684e:	4b9b      	ldr	r3, [pc, #620]	; (8006abc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006852:	0b1b      	lsrs	r3, r3, #12
 8006854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006858:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800685a:	4b98      	ldr	r3, [pc, #608]	; (8006abc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800685c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685e:	091b      	lsrs	r3, r3, #4
 8006860:	f003 0301 	and.w	r3, r3, #1
 8006864:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006866:	4b95      	ldr	r3, [pc, #596]	; (8006abc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800686a:	08db      	lsrs	r3, r3, #3
 800686c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	fb02 f303 	mul.w	r3, r2, r3
 8006876:	ee07 3a90 	vmov	s15, r3
 800687a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800687e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	2b00      	cmp	r3, #0
 8006886:	f000 810a 	beq.w	8006a9e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d05a      	beq.n	8006946 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8006890:	2b01      	cmp	r3, #1
 8006892:	d302      	bcc.n	800689a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8006894:	2b02      	cmp	r3, #2
 8006896:	d078      	beq.n	800698a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8006898:	e099      	b.n	80069ce <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800689a:	4b88      	ldr	r3, [pc, #544]	; (8006abc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0320 	and.w	r3, r3, #32
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d02d      	beq.n	8006902 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80068a6:	4b85      	ldr	r3, [pc, #532]	; (8006abc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	08db      	lsrs	r3, r3, #3
 80068ac:	f003 0303 	and.w	r3, r3, #3
 80068b0:	4a83      	ldr	r2, [pc, #524]	; (8006ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80068b2:	fa22 f303 	lsr.w	r3, r2, r3
 80068b6:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	ee07 3a90 	vmov	s15, r3
 80068be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	ee07 3a90 	vmov	s15, r3
 80068c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068d0:	4b7a      	ldr	r3, [pc, #488]	; (8006abc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80068d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068d8:	ee07 3a90 	vmov	s15, r3
 80068dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80068e4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80068e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068fc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006900:	e087      	b.n	8006a12 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	ee07 3a90 	vmov	s15, r3
 8006908:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800690c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8006910:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006914:	4b69      	ldr	r3, [pc, #420]	; (8006abc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800691c:	ee07 3a90 	vmov	s15, r3
 8006920:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006924:	ed97 6a03 	vldr	s12, [r7, #12]
 8006928:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800692c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006930:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006934:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006938:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800693c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006940:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006944:	e065      	b.n	8006a12 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	ee07 3a90 	vmov	s15, r3
 800694c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006950:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006954:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006958:	4b58      	ldr	r3, [pc, #352]	; (8006abc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800695a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006960:	ee07 3a90 	vmov	s15, r3
 8006964:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006968:	ed97 6a03 	vldr	s12, [r7, #12]
 800696c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006970:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006974:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006978:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800697c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006984:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006988:	e043      	b.n	8006a12 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	ee07 3a90 	vmov	s15, r3
 8006990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006994:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8006998:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800699c:	4b47      	ldr	r3, [pc, #284]	; (8006abc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800699e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069a4:	ee07 3a90 	vmov	s15, r3
 80069a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80069b0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80069b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80069cc:	e021      	b.n	8006a12 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	ee07 3a90 	vmov	s15, r3
 80069d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069d8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006acc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80069dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069e0:	4b36      	ldr	r3, [pc, #216]	; (8006abc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80069e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069e8:	ee07 3a90 	vmov	s15, r3
 80069ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80069f4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80069f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a0c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a10:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006a12:	4b2a      	ldr	r3, [pc, #168]	; (8006abc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a16:	0a5b      	lsrs	r3, r3, #9
 8006a18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a1c:	ee07 3a90 	vmov	s15, r3
 8006a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a38:	ee17 2a90 	vmov	r2, s15
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006a40:	4b1e      	ldr	r3, [pc, #120]	; (8006abc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a44:	0c1b      	lsrs	r3, r3, #16
 8006a46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a4a:	ee07 3a90 	vmov	s15, r3
 8006a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a66:	ee17 2a90 	vmov	r2, s15
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006a6e:	4b13      	ldr	r3, [pc, #76]	; (8006abc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a72:	0e1b      	lsrs	r3, r3, #24
 8006a74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a78:	ee07 3a90 	vmov	s15, r3
 8006a7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a88:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a94:	ee17 2a90 	vmov	r2, s15
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006a9c:	e008      	b.n	8006ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	609a      	str	r2, [r3, #8]
}
 8006ab0:	bf00      	nop
 8006ab2:	3724      	adds	r7, #36	; 0x24
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	58024400 	.word	0x58024400
 8006ac0:	03d09000 	.word	0x03d09000
 8006ac4:	46000000 	.word	0x46000000
 8006ac8:	4c742400 	.word	0x4c742400
 8006acc:	4a742400 	.word	0x4a742400
 8006ad0:	4af42400 	.word	0x4af42400

08006ad4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b089      	sub	sp, #36	; 0x24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006adc:	4b9d      	ldr	r3, [pc, #628]	; (8006d54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae0:	f003 0303 	and.w	r3, r3, #3
 8006ae4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006ae6:	4b9b      	ldr	r3, [pc, #620]	; (8006d54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aea:	0d1b      	lsrs	r3, r3, #20
 8006aec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006af0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006af2:	4b98      	ldr	r3, [pc, #608]	; (8006d54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af6:	0a1b      	lsrs	r3, r3, #8
 8006af8:	f003 0301 	and.w	r3, r3, #1
 8006afc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006afe:	4b95      	ldr	r3, [pc, #596]	; (8006d54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b02:	08db      	lsrs	r3, r3, #3
 8006b04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b08:	693a      	ldr	r2, [r7, #16]
 8006b0a:	fb02 f303 	mul.w	r3, r2, r3
 8006b0e:	ee07 3a90 	vmov	s15, r3
 8006b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f000 810a 	beq.w	8006d36 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d05a      	beq.n	8006bde <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d302      	bcc.n	8006b32 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d078      	beq.n	8006c22 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8006b30:	e099      	b.n	8006c66 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b32:	4b88      	ldr	r3, [pc, #544]	; (8006d54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0320 	and.w	r3, r3, #32
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d02d      	beq.n	8006b9a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b3e:	4b85      	ldr	r3, [pc, #532]	; (8006d54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	08db      	lsrs	r3, r3, #3
 8006b44:	f003 0303 	and.w	r3, r3, #3
 8006b48:	4a83      	ldr	r2, [pc, #524]	; (8006d58 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8006b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b4e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	ee07 3a90 	vmov	s15, r3
 8006b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	ee07 3a90 	vmov	s15, r3
 8006b60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b68:	4b7a      	ldr	r3, [pc, #488]	; (8006d54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b70:	ee07 3a90 	vmov	s15, r3
 8006b74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b78:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b7c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006d5c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006b80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b94:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006b98:	e087      	b.n	8006caa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	ee07 3a90 	vmov	s15, r3
 8006ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ba4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8006ba8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bac:	4b69      	ldr	r3, [pc, #420]	; (8006d54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bb4:	ee07 3a90 	vmov	s15, r3
 8006bb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bbc:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bc0:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006d5c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006bc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bd8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bdc:	e065      	b.n	8006caa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	ee07 3a90 	vmov	s15, r3
 8006be4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006be8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006d64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006bec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bf0:	4b58      	ldr	r3, [pc, #352]	; (8006d54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bf8:	ee07 3a90 	vmov	s15, r3
 8006bfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c00:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c04:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006d5c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006c08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c1c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c20:	e043      	b.n	8006caa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	ee07 3a90 	vmov	s15, r3
 8006c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c2c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006d68 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8006c30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c34:	4b47      	ldr	r3, [pc, #284]	; (8006d54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c3c:	ee07 3a90 	vmov	s15, r3
 8006c40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c44:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c48:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006d5c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006c4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c60:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c64:	e021      	b.n	8006caa <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	ee07 3a90 	vmov	s15, r3
 8006c6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c70:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006d64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006c74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c78:	4b36      	ldr	r3, [pc, #216]	; (8006d54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c80:	ee07 3a90 	vmov	s15, r3
 8006c84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c88:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c8c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006d5c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006c90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ca4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ca8:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006caa:	4b2a      	ldr	r3, [pc, #168]	; (8006d54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cae:	0a5b      	lsrs	r3, r3, #9
 8006cb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cb4:	ee07 3a90 	vmov	s15, r3
 8006cb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cc0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ccc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cd0:	ee17 2a90 	vmov	r2, s15
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006cd8:	4b1e      	ldr	r3, [pc, #120]	; (8006d54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cdc:	0c1b      	lsrs	r3, r3, #16
 8006cde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ce2:	ee07 3a90 	vmov	s15, r3
 8006ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cf2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cfe:	ee17 2a90 	vmov	r2, s15
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006d06:	4b13      	ldr	r3, [pc, #76]	; (8006d54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0a:	0e1b      	lsrs	r3, r3, #24
 8006d0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d10:	ee07 3a90 	vmov	s15, r3
 8006d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d20:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d2c:	ee17 2a90 	vmov	r2, s15
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006d34:	e008      	b.n	8006d48 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	609a      	str	r2, [r3, #8]
}
 8006d48:	bf00      	nop
 8006d4a:	3724      	adds	r7, #36	; 0x24
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr
 8006d54:	58024400 	.word	0x58024400
 8006d58:	03d09000 	.word	0x03d09000
 8006d5c:	46000000 	.word	0x46000000
 8006d60:	4c742400 	.word	0x4c742400
 8006d64:	4a742400 	.word	0x4a742400
 8006d68:	4af42400 	.word	0x4af42400

08006d6c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b089      	sub	sp, #36	; 0x24
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d74:	4b9d      	ldr	r3, [pc, #628]	; (8006fec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d78:	f003 0303 	and.w	r3, r3, #3
 8006d7c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8006d7e:	4b9b      	ldr	r3, [pc, #620]	; (8006fec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d82:	091b      	lsrs	r3, r3, #4
 8006d84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d88:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006d8a:	4b98      	ldr	r3, [pc, #608]	; (8006fec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8e:	f003 0301 	and.w	r3, r3, #1
 8006d92:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006d94:	4b95      	ldr	r3, [pc, #596]	; (8006fec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d98:	08db      	lsrs	r3, r3, #3
 8006d9a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	fb02 f303 	mul.w	r3, r2, r3
 8006da4:	ee07 3a90 	vmov	s15, r3
 8006da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dac:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	f000 810a 	beq.w	8006fcc <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d05a      	beq.n	8006e74 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d302      	bcc.n	8006dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d078      	beq.n	8006eb8 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8006dc6:	e099      	b.n	8006efc <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dc8:	4b88      	ldr	r3, [pc, #544]	; (8006fec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0320 	and.w	r3, r3, #32
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d02d      	beq.n	8006e30 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006dd4:	4b85      	ldr	r3, [pc, #532]	; (8006fec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	08db      	lsrs	r3, r3, #3
 8006dda:	f003 0303 	and.w	r3, r3, #3
 8006dde:	4a84      	ldr	r2, [pc, #528]	; (8006ff0 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8006de0:	fa22 f303 	lsr.w	r3, r2, r3
 8006de4:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	ee07 3a90 	vmov	s15, r3
 8006dec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	ee07 3a90 	vmov	s15, r3
 8006df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dfe:	4b7b      	ldr	r3, [pc, #492]	; (8006fec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e06:	ee07 3a90 	vmov	s15, r3
 8006e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e12:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8006e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e2a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006e2e:	e087      	b.n	8006f40 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	ee07 3a90 	vmov	s15, r3
 8006e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e3a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8006e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e42:	4b6a      	ldr	r3, [pc, #424]	; (8006fec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e4a:	ee07 3a90 	vmov	s15, r3
 8006e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e52:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e56:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8006e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e72:	e065      	b.n	8006f40 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	ee07 3a90 	vmov	s15, r3
 8006e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e7e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006ffc <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8006e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e86:	4b59      	ldr	r3, [pc, #356]	; (8006fec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e8e:	ee07 3a90 	vmov	s15, r3
 8006e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e96:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e9a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8006e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006eb6:	e043      	b.n	8006f40 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	ee07 3a90 	vmov	s15, r3
 8006ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007000 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eca:	4b48      	ldr	r3, [pc, #288]	; (8006fec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ed2:	ee07 3a90 	vmov	s15, r3
 8006ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eda:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ede:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8006ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ef6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006efa:	e021      	b.n	8006f40 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	ee07 3a90 	vmov	s15, r3
 8006f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f06:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006ffc <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8006f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f0e:	4b37      	ldr	r3, [pc, #220]	; (8006fec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f16:	ee07 3a90 	vmov	s15, r3
 8006f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f22:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8006f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f3e:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8006f40:	4b2a      	ldr	r3, [pc, #168]	; (8006fec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f44:	0a5b      	lsrs	r3, r3, #9
 8006f46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f4a:	ee07 3a90 	vmov	s15, r3
 8006f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f66:	ee17 2a90 	vmov	r2, s15
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8006f6e:	4b1f      	ldr	r3, [pc, #124]	; (8006fec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f72:	0c1b      	lsrs	r3, r3, #16
 8006f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f78:	ee07 3a90 	vmov	s15, r3
 8006f7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f88:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f94:	ee17 2a90 	vmov	r2, s15
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8006f9c:	4b13      	ldr	r3, [pc, #76]	; (8006fec <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa0:	0e1b      	lsrs	r3, r3, #24
 8006fa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fa6:	ee07 3a90 	vmov	s15, r3
 8006faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006fb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fc2:	ee17 2a90 	vmov	r2, s15
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006fca:	e008      	b.n	8006fde <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	609a      	str	r2, [r3, #8]
}
 8006fde:	bf00      	nop
 8006fe0:	3724      	adds	r7, #36	; 0x24
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	58024400 	.word	0x58024400
 8006ff0:	03d09000 	.word	0x03d09000
 8006ff4:	46000000 	.word	0x46000000
 8006ff8:	4c742400 	.word	0x4c742400
 8006ffc:	4a742400 	.word	0x4a742400
 8007000:	4af42400 	.word	0x4af42400

08007004 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800700e:	2300      	movs	r3, #0
 8007010:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007012:	4b53      	ldr	r3, [pc, #332]	; (8007160 <RCCEx_PLL2_Config+0x15c>)
 8007014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007016:	f003 0303 	and.w	r3, r3, #3
 800701a:	2b03      	cmp	r3, #3
 800701c:	d101      	bne.n	8007022 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e099      	b.n	8007156 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007022:	4b4f      	ldr	r3, [pc, #316]	; (8007160 <RCCEx_PLL2_Config+0x15c>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a4e      	ldr	r2, [pc, #312]	; (8007160 <RCCEx_PLL2_Config+0x15c>)
 8007028:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800702c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800702e:	f7fa fa4f 	bl	80014d0 <HAL_GetTick>
 8007032:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007034:	e008      	b.n	8007048 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007036:	f7fa fa4b 	bl	80014d0 <HAL_GetTick>
 800703a:	4602      	mov	r2, r0
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	1ad3      	subs	r3, r2, r3
 8007040:	2b02      	cmp	r3, #2
 8007042:	d901      	bls.n	8007048 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007044:	2303      	movs	r3, #3
 8007046:	e086      	b.n	8007156 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007048:	4b45      	ldr	r3, [pc, #276]	; (8007160 <RCCEx_PLL2_Config+0x15c>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d1f0      	bne.n	8007036 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007054:	4b42      	ldr	r3, [pc, #264]	; (8007160 <RCCEx_PLL2_Config+0x15c>)
 8007056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007058:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	031b      	lsls	r3, r3, #12
 8007062:	493f      	ldr	r1, [pc, #252]	; (8007160 <RCCEx_PLL2_Config+0x15c>)
 8007064:	4313      	orrs	r3, r2
 8007066:	628b      	str	r3, [r1, #40]	; 0x28
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	3b01      	subs	r3, #1
 800706e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	3b01      	subs	r3, #1
 8007078:	025b      	lsls	r3, r3, #9
 800707a:	b29b      	uxth	r3, r3
 800707c:	431a      	orrs	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	3b01      	subs	r3, #1
 8007084:	041b      	lsls	r3, r3, #16
 8007086:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800708a:	431a      	orrs	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	3b01      	subs	r3, #1
 8007092:	061b      	lsls	r3, r3, #24
 8007094:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007098:	4931      	ldr	r1, [pc, #196]	; (8007160 <RCCEx_PLL2_Config+0x15c>)
 800709a:	4313      	orrs	r3, r2
 800709c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800709e:	4b30      	ldr	r3, [pc, #192]	; (8007160 <RCCEx_PLL2_Config+0x15c>)
 80070a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	695b      	ldr	r3, [r3, #20]
 80070aa:	492d      	ldr	r1, [pc, #180]	; (8007160 <RCCEx_PLL2_Config+0x15c>)
 80070ac:	4313      	orrs	r3, r2
 80070ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80070b0:	4b2b      	ldr	r3, [pc, #172]	; (8007160 <RCCEx_PLL2_Config+0x15c>)
 80070b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b4:	f023 0220 	bic.w	r2, r3, #32
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	4928      	ldr	r1, [pc, #160]	; (8007160 <RCCEx_PLL2_Config+0x15c>)
 80070be:	4313      	orrs	r3, r2
 80070c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80070c2:	4b27      	ldr	r3, [pc, #156]	; (8007160 <RCCEx_PLL2_Config+0x15c>)
 80070c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c6:	4a26      	ldr	r2, [pc, #152]	; (8007160 <RCCEx_PLL2_Config+0x15c>)
 80070c8:	f023 0310 	bic.w	r3, r3, #16
 80070cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80070ce:	4b24      	ldr	r3, [pc, #144]	; (8007160 <RCCEx_PLL2_Config+0x15c>)
 80070d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070d2:	4b24      	ldr	r3, [pc, #144]	; (8007164 <RCCEx_PLL2_Config+0x160>)
 80070d4:	4013      	ands	r3, r2
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	69d2      	ldr	r2, [r2, #28]
 80070da:	00d2      	lsls	r2, r2, #3
 80070dc:	4920      	ldr	r1, [pc, #128]	; (8007160 <RCCEx_PLL2_Config+0x15c>)
 80070de:	4313      	orrs	r3, r2
 80070e0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80070e2:	4b1f      	ldr	r3, [pc, #124]	; (8007160 <RCCEx_PLL2_Config+0x15c>)
 80070e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e6:	4a1e      	ldr	r2, [pc, #120]	; (8007160 <RCCEx_PLL2_Config+0x15c>)
 80070e8:	f043 0310 	orr.w	r3, r3, #16
 80070ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d106      	bne.n	8007102 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80070f4:	4b1a      	ldr	r3, [pc, #104]	; (8007160 <RCCEx_PLL2_Config+0x15c>)
 80070f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f8:	4a19      	ldr	r2, [pc, #100]	; (8007160 <RCCEx_PLL2_Config+0x15c>)
 80070fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007100:	e00f      	b.n	8007122 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	2b01      	cmp	r3, #1
 8007106:	d106      	bne.n	8007116 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007108:	4b15      	ldr	r3, [pc, #84]	; (8007160 <RCCEx_PLL2_Config+0x15c>)
 800710a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710c:	4a14      	ldr	r2, [pc, #80]	; (8007160 <RCCEx_PLL2_Config+0x15c>)
 800710e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007112:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007114:	e005      	b.n	8007122 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007116:	4b12      	ldr	r3, [pc, #72]	; (8007160 <RCCEx_PLL2_Config+0x15c>)
 8007118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711a:	4a11      	ldr	r2, [pc, #68]	; (8007160 <RCCEx_PLL2_Config+0x15c>)
 800711c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007120:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007122:	4b0f      	ldr	r3, [pc, #60]	; (8007160 <RCCEx_PLL2_Config+0x15c>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a0e      	ldr	r2, [pc, #56]	; (8007160 <RCCEx_PLL2_Config+0x15c>)
 8007128:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800712c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800712e:	f7fa f9cf 	bl	80014d0 <HAL_GetTick>
 8007132:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007134:	e008      	b.n	8007148 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007136:	f7fa f9cb 	bl	80014d0 <HAL_GetTick>
 800713a:	4602      	mov	r2, r0
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	2b02      	cmp	r3, #2
 8007142:	d901      	bls.n	8007148 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e006      	b.n	8007156 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007148:	4b05      	ldr	r3, [pc, #20]	; (8007160 <RCCEx_PLL2_Config+0x15c>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007150:	2b00      	cmp	r3, #0
 8007152:	d0f0      	beq.n	8007136 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007154:	7bfb      	ldrb	r3, [r7, #15]
}
 8007156:	4618      	mov	r0, r3
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	58024400 	.word	0x58024400
 8007164:	ffff0007 	.word	0xffff0007

08007168 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007172:	2300      	movs	r3, #0
 8007174:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007176:	4b53      	ldr	r3, [pc, #332]	; (80072c4 <RCCEx_PLL3_Config+0x15c>)
 8007178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800717a:	f003 0303 	and.w	r3, r3, #3
 800717e:	2b03      	cmp	r3, #3
 8007180:	d101      	bne.n	8007186 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e099      	b.n	80072ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007186:	4b4f      	ldr	r3, [pc, #316]	; (80072c4 <RCCEx_PLL3_Config+0x15c>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a4e      	ldr	r2, [pc, #312]	; (80072c4 <RCCEx_PLL3_Config+0x15c>)
 800718c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007190:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007192:	f7fa f99d 	bl	80014d0 <HAL_GetTick>
 8007196:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007198:	e008      	b.n	80071ac <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800719a:	f7fa f999 	bl	80014d0 <HAL_GetTick>
 800719e:	4602      	mov	r2, r0
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d901      	bls.n	80071ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80071a8:	2303      	movs	r3, #3
 80071aa:	e086      	b.n	80072ba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80071ac:	4b45      	ldr	r3, [pc, #276]	; (80072c4 <RCCEx_PLL3_Config+0x15c>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d1f0      	bne.n	800719a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80071b8:	4b42      	ldr	r3, [pc, #264]	; (80072c4 <RCCEx_PLL3_Config+0x15c>)
 80071ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071bc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	051b      	lsls	r3, r3, #20
 80071c6:	493f      	ldr	r1, [pc, #252]	; (80072c4 <RCCEx_PLL3_Config+0x15c>)
 80071c8:	4313      	orrs	r3, r2
 80071ca:	628b      	str	r3, [r1, #40]	; 0x28
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	3b01      	subs	r3, #1
 80071d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	3b01      	subs	r3, #1
 80071dc:	025b      	lsls	r3, r3, #9
 80071de:	b29b      	uxth	r3, r3
 80071e0:	431a      	orrs	r2, r3
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	3b01      	subs	r3, #1
 80071e8:	041b      	lsls	r3, r3, #16
 80071ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80071ee:	431a      	orrs	r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	3b01      	subs	r3, #1
 80071f6:	061b      	lsls	r3, r3, #24
 80071f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80071fc:	4931      	ldr	r1, [pc, #196]	; (80072c4 <RCCEx_PLL3_Config+0x15c>)
 80071fe:	4313      	orrs	r3, r2
 8007200:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007202:	4b30      	ldr	r3, [pc, #192]	; (80072c4 <RCCEx_PLL3_Config+0x15c>)
 8007204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007206:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	695b      	ldr	r3, [r3, #20]
 800720e:	492d      	ldr	r1, [pc, #180]	; (80072c4 <RCCEx_PLL3_Config+0x15c>)
 8007210:	4313      	orrs	r3, r2
 8007212:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007214:	4b2b      	ldr	r3, [pc, #172]	; (80072c4 <RCCEx_PLL3_Config+0x15c>)
 8007216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007218:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	4928      	ldr	r1, [pc, #160]	; (80072c4 <RCCEx_PLL3_Config+0x15c>)
 8007222:	4313      	orrs	r3, r2
 8007224:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007226:	4b27      	ldr	r3, [pc, #156]	; (80072c4 <RCCEx_PLL3_Config+0x15c>)
 8007228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722a:	4a26      	ldr	r2, [pc, #152]	; (80072c4 <RCCEx_PLL3_Config+0x15c>)
 800722c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007230:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007232:	4b24      	ldr	r3, [pc, #144]	; (80072c4 <RCCEx_PLL3_Config+0x15c>)
 8007234:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007236:	4b24      	ldr	r3, [pc, #144]	; (80072c8 <RCCEx_PLL3_Config+0x160>)
 8007238:	4013      	ands	r3, r2
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	69d2      	ldr	r2, [r2, #28]
 800723e:	00d2      	lsls	r2, r2, #3
 8007240:	4920      	ldr	r1, [pc, #128]	; (80072c4 <RCCEx_PLL3_Config+0x15c>)
 8007242:	4313      	orrs	r3, r2
 8007244:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007246:	4b1f      	ldr	r3, [pc, #124]	; (80072c4 <RCCEx_PLL3_Config+0x15c>)
 8007248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724a:	4a1e      	ldr	r2, [pc, #120]	; (80072c4 <RCCEx_PLL3_Config+0x15c>)
 800724c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007250:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d106      	bne.n	8007266 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007258:	4b1a      	ldr	r3, [pc, #104]	; (80072c4 <RCCEx_PLL3_Config+0x15c>)
 800725a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725c:	4a19      	ldr	r2, [pc, #100]	; (80072c4 <RCCEx_PLL3_Config+0x15c>)
 800725e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007262:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007264:	e00f      	b.n	8007286 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	2b01      	cmp	r3, #1
 800726a:	d106      	bne.n	800727a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800726c:	4b15      	ldr	r3, [pc, #84]	; (80072c4 <RCCEx_PLL3_Config+0x15c>)
 800726e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007270:	4a14      	ldr	r2, [pc, #80]	; (80072c4 <RCCEx_PLL3_Config+0x15c>)
 8007272:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007276:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007278:	e005      	b.n	8007286 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800727a:	4b12      	ldr	r3, [pc, #72]	; (80072c4 <RCCEx_PLL3_Config+0x15c>)
 800727c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727e:	4a11      	ldr	r2, [pc, #68]	; (80072c4 <RCCEx_PLL3_Config+0x15c>)
 8007280:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007284:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007286:	4b0f      	ldr	r3, [pc, #60]	; (80072c4 <RCCEx_PLL3_Config+0x15c>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a0e      	ldr	r2, [pc, #56]	; (80072c4 <RCCEx_PLL3_Config+0x15c>)
 800728c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007290:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007292:	f7fa f91d 	bl	80014d0 <HAL_GetTick>
 8007296:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007298:	e008      	b.n	80072ac <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800729a:	f7fa f919 	bl	80014d0 <HAL_GetTick>
 800729e:	4602      	mov	r2, r0
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	1ad3      	subs	r3, r2, r3
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d901      	bls.n	80072ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e006      	b.n	80072ba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80072ac:	4b05      	ldr	r3, [pc, #20]	; (80072c4 <RCCEx_PLL3_Config+0x15c>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d0f0      	beq.n	800729a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80072b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	58024400 	.word	0x58024400
 80072c8:	ffff0007 	.word	0xffff0007

080072cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d101      	bne.n	80072de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e049      	b.n	8007372 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d106      	bne.n	80072f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f7f9 fec4 	bl	8001080 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2202      	movs	r2, #2
 80072fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	3304      	adds	r3, #4
 8007308:	4619      	mov	r1, r3
 800730a:	4610      	mov	r0, r2
 800730c:	f000 fc7a 	bl	8007c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
	...

0800737c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800738a:	b2db      	uxtb	r3, r3
 800738c:	2b01      	cmp	r3, #1
 800738e:	d001      	beq.n	8007394 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e019      	b.n	80073c8 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2202      	movs	r2, #2
 8007398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	689a      	ldr	r2, [r3, #8]
 80073a2:	4b0c      	ldr	r3, [pc, #48]	; (80073d4 <HAL_TIM_Base_Start+0x58>)
 80073a4:	4013      	ands	r3, r2
 80073a6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2b06      	cmp	r3, #6
 80073ac:	d00b      	beq.n	80073c6 <HAL_TIM_Base_Start+0x4a>
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073b4:	d007      	beq.n	80073c6 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f042 0201 	orr.w	r2, r2, #1
 80073c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3714      	adds	r7, #20
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr
 80073d4:	00010007 	.word	0x00010007

080073d8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d101      	bne.n	80073ea <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e049      	b.n	800747e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d106      	bne.n	8007404 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f841 	bl	8007486 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2202      	movs	r2, #2
 8007408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	3304      	adds	r3, #4
 8007414:	4619      	mov	r1, r3
 8007416:	4610      	mov	r0, r2
 8007418:	f000 fbf4 	bl	8007c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2201      	movs	r2, #1
 8007420:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3708      	adds	r7, #8
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007486:	b480      	push	{r7}
 8007488:	b083      	sub	sp, #12
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800748e:	bf00      	nop
 8007490:	370c      	adds	r7, #12
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr
	...

0800749c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d104      	bne.n	80074b6 <HAL_TIM_IC_Start_IT+0x1a>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	e023      	b.n	80074fe <HAL_TIM_IC_Start_IT+0x62>
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	2b04      	cmp	r3, #4
 80074ba:	d104      	bne.n	80074c6 <HAL_TIM_IC_Start_IT+0x2a>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	e01b      	b.n	80074fe <HAL_TIM_IC_Start_IT+0x62>
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	2b08      	cmp	r3, #8
 80074ca:	d104      	bne.n	80074d6 <HAL_TIM_IC_Start_IT+0x3a>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	e013      	b.n	80074fe <HAL_TIM_IC_Start_IT+0x62>
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	2b0c      	cmp	r3, #12
 80074da:	d104      	bne.n	80074e6 <HAL_TIM_IC_Start_IT+0x4a>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	e00b      	b.n	80074fe <HAL_TIM_IC_Start_IT+0x62>
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	2b10      	cmp	r3, #16
 80074ea:	d104      	bne.n	80074f6 <HAL_TIM_IC_Start_IT+0x5a>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	e003      	b.n	80074fe <HAL_TIM_IC_Start_IT+0x62>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d104      	bne.n	8007510 <HAL_TIM_IC_Start_IT+0x74>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800750c:	b2db      	uxtb	r3, r3
 800750e:	e013      	b.n	8007538 <HAL_TIM_IC_Start_IT+0x9c>
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	2b04      	cmp	r3, #4
 8007514:	d104      	bne.n	8007520 <HAL_TIM_IC_Start_IT+0x84>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800751c:	b2db      	uxtb	r3, r3
 800751e:	e00b      	b.n	8007538 <HAL_TIM_IC_Start_IT+0x9c>
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	2b08      	cmp	r3, #8
 8007524:	d104      	bne.n	8007530 <HAL_TIM_IC_Start_IT+0x94>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800752c:	b2db      	uxtb	r3, r3
 800752e:	e003      	b.n	8007538 <HAL_TIM_IC_Start_IT+0x9c>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007536:	b2db      	uxtb	r3, r3
 8007538:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800753a:	7bfb      	ldrb	r3, [r7, #15]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d102      	bne.n	8007546 <HAL_TIM_IC_Start_IT+0xaa>
   || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007540:	7bbb      	ldrb	r3, [r7, #14]
 8007542:	2b01      	cmp	r3, #1
 8007544:	d001      	beq.n	800754a <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e0aa      	b.n	80076a0 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d104      	bne.n	800755a <HAL_TIM_IC_Start_IT+0xbe>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2202      	movs	r2, #2
 8007554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007558:	e023      	b.n	80075a2 <HAL_TIM_IC_Start_IT+0x106>
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	2b04      	cmp	r3, #4
 800755e:	d104      	bne.n	800756a <HAL_TIM_IC_Start_IT+0xce>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2202      	movs	r2, #2
 8007564:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007568:	e01b      	b.n	80075a2 <HAL_TIM_IC_Start_IT+0x106>
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	2b08      	cmp	r3, #8
 800756e:	d104      	bne.n	800757a <HAL_TIM_IC_Start_IT+0xde>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2202      	movs	r2, #2
 8007574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007578:	e013      	b.n	80075a2 <HAL_TIM_IC_Start_IT+0x106>
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	2b0c      	cmp	r3, #12
 800757e:	d104      	bne.n	800758a <HAL_TIM_IC_Start_IT+0xee>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2202      	movs	r2, #2
 8007584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007588:	e00b      	b.n	80075a2 <HAL_TIM_IC_Start_IT+0x106>
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	2b10      	cmp	r3, #16
 800758e:	d104      	bne.n	800759a <HAL_TIM_IC_Start_IT+0xfe>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2202      	movs	r2, #2
 8007594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007598:	e003      	b.n	80075a2 <HAL_TIM_IC_Start_IT+0x106>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2202      	movs	r2, #2
 800759e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d104      	bne.n	80075b2 <HAL_TIM_IC_Start_IT+0x116>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2202      	movs	r2, #2
 80075ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075b0:	e013      	b.n	80075da <HAL_TIM_IC_Start_IT+0x13e>
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	2b04      	cmp	r3, #4
 80075b6:	d104      	bne.n	80075c2 <HAL_TIM_IC_Start_IT+0x126>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2202      	movs	r2, #2
 80075bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075c0:	e00b      	b.n	80075da <HAL_TIM_IC_Start_IT+0x13e>
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	2b08      	cmp	r3, #8
 80075c6:	d104      	bne.n	80075d2 <HAL_TIM_IC_Start_IT+0x136>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2202      	movs	r2, #2
 80075cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80075d0:	e003      	b.n	80075da <HAL_TIM_IC_Start_IT+0x13e>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2202      	movs	r2, #2
 80075d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	2b0c      	cmp	r3, #12
 80075de:	d841      	bhi.n	8007664 <HAL_TIM_IC_Start_IT+0x1c8>
 80075e0:	a201      	add	r2, pc, #4	; (adr r2, 80075e8 <HAL_TIM_IC_Start_IT+0x14c>)
 80075e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e6:	bf00      	nop
 80075e8:	0800761d 	.word	0x0800761d
 80075ec:	08007665 	.word	0x08007665
 80075f0:	08007665 	.word	0x08007665
 80075f4:	08007665 	.word	0x08007665
 80075f8:	0800762f 	.word	0x0800762f
 80075fc:	08007665 	.word	0x08007665
 8007600:	08007665 	.word	0x08007665
 8007604:	08007665 	.word	0x08007665
 8007608:	08007641 	.word	0x08007641
 800760c:	08007665 	.word	0x08007665
 8007610:	08007665 	.word	0x08007665
 8007614:	08007665 	.word	0x08007665
 8007618:	08007653 	.word	0x08007653
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68da      	ldr	r2, [r3, #12]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f042 0202 	orr.w	r2, r2, #2
 800762a:	60da      	str	r2, [r3, #12]
      break;
 800762c:	e01b      	b.n	8007666 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68da      	ldr	r2, [r3, #12]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f042 0204 	orr.w	r2, r2, #4
 800763c:	60da      	str	r2, [r3, #12]
      break;
 800763e:	e012      	b.n	8007666 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68da      	ldr	r2, [r3, #12]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f042 0208 	orr.w	r2, r2, #8
 800764e:	60da      	str	r2, [r3, #12]
      break;
 8007650:	e009      	b.n	8007666 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68da      	ldr	r2, [r3, #12]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f042 0210 	orr.w	r2, r2, #16
 8007660:	60da      	str	r2, [r3, #12]
      break;
 8007662:	e000      	b.n	8007666 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 8007664:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2201      	movs	r2, #1
 800766c:	6839      	ldr	r1, [r7, #0]
 800766e:	4618      	mov	r0, r3
 8007670:	f000 fd2a 	bl	80080c8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	689a      	ldr	r2, [r3, #8]
 800767a:	4b0b      	ldr	r3, [pc, #44]	; (80076a8 <HAL_TIM_IC_Start_IT+0x20c>)
 800767c:	4013      	ands	r3, r2
 800767e:	60bb      	str	r3, [r7, #8]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	2b06      	cmp	r3, #6
 8007684:	d00b      	beq.n	800769e <HAL_TIM_IC_Start_IT+0x202>
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800768c:	d007      	beq.n	800769e <HAL_TIM_IC_Start_IT+0x202>
  {
    __HAL_TIM_ENABLE(htim);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f042 0201 	orr.w	r2, r2, #1
 800769c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3710      	adds	r7, #16
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	00010007 	.word	0x00010007

080076ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	f003 0302 	and.w	r3, r3, #2
 80076be:	2b02      	cmp	r3, #2
 80076c0:	d122      	bne.n	8007708 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	f003 0302 	and.w	r3, r3, #2
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d11b      	bne.n	8007708 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f06f 0202 	mvn.w	r2, #2
 80076d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2201      	movs	r2, #1
 80076de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	699b      	ldr	r3, [r3, #24]
 80076e6:	f003 0303 	and.w	r3, r3, #3
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d003      	beq.n	80076f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f7f9 fb96 	bl	8000e20 <HAL_TIM_IC_CaptureCallback>
 80076f4:	e005      	b.n	8007702 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fa66 	bl	8007bc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 fa6d 	bl	8007bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	f003 0304 	and.w	r3, r3, #4
 8007712:	2b04      	cmp	r3, #4
 8007714:	d122      	bne.n	800775c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	f003 0304 	and.w	r3, r3, #4
 8007720:	2b04      	cmp	r3, #4
 8007722:	d11b      	bne.n	800775c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f06f 0204 	mvn.w	r2, #4
 800772c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2202      	movs	r2, #2
 8007732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	699b      	ldr	r3, [r3, #24]
 800773a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800773e:	2b00      	cmp	r3, #0
 8007740:	d003      	beq.n	800774a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f7f9 fb6c 	bl	8000e20 <HAL_TIM_IC_CaptureCallback>
 8007748:	e005      	b.n	8007756 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 fa3c 	bl	8007bc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 fa43 	bl	8007bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	f003 0308 	and.w	r3, r3, #8
 8007766:	2b08      	cmp	r3, #8
 8007768:	d122      	bne.n	80077b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	f003 0308 	and.w	r3, r3, #8
 8007774:	2b08      	cmp	r3, #8
 8007776:	d11b      	bne.n	80077b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f06f 0208 	mvn.w	r2, #8
 8007780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2204      	movs	r2, #4
 8007786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	69db      	ldr	r3, [r3, #28]
 800778e:	f003 0303 	and.w	r3, r3, #3
 8007792:	2b00      	cmp	r3, #0
 8007794:	d003      	beq.n	800779e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f7f9 fb42 	bl	8000e20 <HAL_TIM_IC_CaptureCallback>
 800779c:	e005      	b.n	80077aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 fa12 	bl	8007bc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 fa19 	bl	8007bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	f003 0310 	and.w	r3, r3, #16
 80077ba:	2b10      	cmp	r3, #16
 80077bc:	d122      	bne.n	8007804 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	f003 0310 	and.w	r3, r3, #16
 80077c8:	2b10      	cmp	r3, #16
 80077ca:	d11b      	bne.n	8007804 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f06f 0210 	mvn.w	r2, #16
 80077d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2208      	movs	r2, #8
 80077da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	69db      	ldr	r3, [r3, #28]
 80077e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d003      	beq.n	80077f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f7f9 fb18 	bl	8000e20 <HAL_TIM_IC_CaptureCallback>
 80077f0:	e005      	b.n	80077fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f9e8 	bl	8007bc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 f9ef 	bl	8007bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	f003 0301 	and.w	r3, r3, #1
 800780e:	2b01      	cmp	r3, #1
 8007810:	d10e      	bne.n	8007830 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	f003 0301 	and.w	r3, r3, #1
 800781c:	2b01      	cmp	r3, #1
 800781e:	d107      	bne.n	8007830 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f06f 0201 	mvn.w	r2, #1
 8007828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 f9c2 	bl	8007bb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800783a:	2b80      	cmp	r3, #128	; 0x80
 800783c:	d10e      	bne.n	800785c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007848:	2b80      	cmp	r3, #128	; 0x80
 800784a:	d107      	bne.n	800785c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 fcee 	bl	8008238 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800786a:	d10e      	bne.n	800788a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007876:	2b80      	cmp	r3, #128	; 0x80
 8007878:	d107      	bne.n	800788a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fce1 	bl	800824c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007894:	2b40      	cmp	r3, #64	; 0x40
 8007896:	d10e      	bne.n	80078b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078a2:	2b40      	cmp	r3, #64	; 0x40
 80078a4:	d107      	bne.n	80078b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80078ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f99d 	bl	8007bf0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	f003 0320 	and.w	r3, r3, #32
 80078c0:	2b20      	cmp	r3, #32
 80078c2:	d10e      	bne.n	80078e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	f003 0320 	and.w	r3, r3, #32
 80078ce:	2b20      	cmp	r3, #32
 80078d0:	d107      	bne.n	80078e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f06f 0220 	mvn.w	r2, #32
 80078da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 fca1 	bl	8008224 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078e2:	bf00      	nop
 80078e4:	3708      	adds	r7, #8
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}

080078ea <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b084      	sub	sp, #16
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	60f8      	str	r0, [r7, #12]
 80078f2:	60b9      	str	r1, [r7, #8]
 80078f4:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d101      	bne.n	8007904 <HAL_TIM_IC_ConfigChannel+0x1a>
 8007900:	2302      	movs	r3, #2
 8007902:	e082      	b.n	8007a0a <HAL_TIM_IC_ConfigChannel+0x120>
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d11b      	bne.n	800794a <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6818      	ldr	r0, [r3, #0]
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	6819      	ldr	r1, [r3, #0]
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	685a      	ldr	r2, [r3, #4]
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	f000 fa09 	bl	8007d38 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	699a      	ldr	r2, [r3, #24]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f022 020c 	bic.w	r2, r2, #12
 8007934:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	6999      	ldr	r1, [r3, #24]
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	689a      	ldr	r2, [r3, #8]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	430a      	orrs	r2, r1
 8007946:	619a      	str	r2, [r3, #24]
 8007948:	e05a      	b.n	8007a00 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2b04      	cmp	r3, #4
 800794e:	d11c      	bne.n	800798a <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6818      	ldr	r0, [r3, #0]
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	6819      	ldr	r1, [r3, #0]
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	685a      	ldr	r2, [r3, #4]
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	f000 fa8d 	bl	8007e7e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	699a      	ldr	r2, [r3, #24]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007972:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	6999      	ldr	r1, [r3, #24]
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	021a      	lsls	r2, r3, #8
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	430a      	orrs	r2, r1
 8007986:	619a      	str	r2, [r3, #24]
 8007988:	e03a      	b.n	8007a00 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2b08      	cmp	r3, #8
 800798e:	d11b      	bne.n	80079c8 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6818      	ldr	r0, [r3, #0]
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	6819      	ldr	r1, [r3, #0]
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	685a      	ldr	r2, [r3, #4]
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	f000 fada 	bl	8007f58 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	69da      	ldr	r2, [r3, #28]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f022 020c 	bic.w	r2, r2, #12
 80079b2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	69d9      	ldr	r1, [r3, #28]
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	689a      	ldr	r2, [r3, #8]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	430a      	orrs	r2, r1
 80079c4:	61da      	str	r2, [r3, #28]
 80079c6:	e01b      	b.n	8007a00 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6818      	ldr	r0, [r3, #0]
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	6819      	ldr	r1, [r3, #0]
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	685a      	ldr	r2, [r3, #4]
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	f000 fafa 	bl	8007fd0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	69da      	ldr	r2, [r3, #28]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80079ea:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	69d9      	ldr	r1, [r3, #28]
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	021a      	lsls	r2, r3, #8
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	430a      	orrs	r2, r1
 80079fe:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
	...

08007a14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d101      	bne.n	8007a2c <HAL_TIM_ConfigClockSource+0x18>
 8007a28:	2302      	movs	r3, #2
 8007a2a:	e0b7      	b.n	8007b9c <HAL_TIM_ConfigClockSource+0x188>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2202      	movs	r2, #2
 8007a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	4b57      	ldr	r3, [pc, #348]	; (8007ba4 <HAL_TIM_ConfigClockSource+0x190>)
 8007a48:	4013      	ands	r3, r2
 8007a4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a52:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2b70      	cmp	r3, #112	; 0x70
 8007a62:	d02e      	beq.n	8007ac2 <HAL_TIM_ConfigClockSource+0xae>
 8007a64:	2b70      	cmp	r3, #112	; 0x70
 8007a66:	d812      	bhi.n	8007a8e <HAL_TIM_ConfigClockSource+0x7a>
 8007a68:	2b30      	cmp	r3, #48	; 0x30
 8007a6a:	f000 8084 	beq.w	8007b76 <HAL_TIM_ConfigClockSource+0x162>
 8007a6e:	2b30      	cmp	r3, #48	; 0x30
 8007a70:	d806      	bhi.n	8007a80 <HAL_TIM_ConfigClockSource+0x6c>
 8007a72:	2b10      	cmp	r3, #16
 8007a74:	d07f      	beq.n	8007b76 <HAL_TIM_ConfigClockSource+0x162>
 8007a76:	2b20      	cmp	r3, #32
 8007a78:	d07d      	beq.n	8007b76 <HAL_TIM_ConfigClockSource+0x162>
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d07b      	beq.n	8007b76 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007a7e:	e084      	b.n	8007b8a <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8007a80:	2b50      	cmp	r3, #80	; 0x50
 8007a82:	d048      	beq.n	8007b16 <HAL_TIM_ConfigClockSource+0x102>
 8007a84:	2b60      	cmp	r3, #96	; 0x60
 8007a86:	d056      	beq.n	8007b36 <HAL_TIM_ConfigClockSource+0x122>
 8007a88:	2b40      	cmp	r3, #64	; 0x40
 8007a8a:	d064      	beq.n	8007b56 <HAL_TIM_ConfigClockSource+0x142>
      break;
 8007a8c:	e07d      	b.n	8007b8a <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8007a8e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007a92:	d070      	beq.n	8007b76 <HAL_TIM_ConfigClockSource+0x162>
 8007a94:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007a98:	d809      	bhi.n	8007aae <HAL_TIM_ConfigClockSource+0x9a>
 8007a9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a9e:	d027      	beq.n	8007af0 <HAL_TIM_ConfigClockSource+0xdc>
 8007aa0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007aa4:	d067      	beq.n	8007b76 <HAL_TIM_ConfigClockSource+0x162>
 8007aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aaa:	d06d      	beq.n	8007b88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007aac:	e06d      	b.n	8007b8a <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8007aae:	4a3e      	ldr	r2, [pc, #248]	; (8007ba8 <HAL_TIM_ConfigClockSource+0x194>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d060      	beq.n	8007b76 <HAL_TIM_ConfigClockSource+0x162>
 8007ab4:	4a3d      	ldr	r2, [pc, #244]	; (8007bac <HAL_TIM_ConfigClockSource+0x198>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d05d      	beq.n	8007b76 <HAL_TIM_ConfigClockSource+0x162>
 8007aba:	4a3d      	ldr	r2, [pc, #244]	; (8007bb0 <HAL_TIM_ConfigClockSource+0x19c>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d05a      	beq.n	8007b76 <HAL_TIM_ConfigClockSource+0x162>
      break;
 8007ac0:	e063      	b.n	8007b8a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6818      	ldr	r0, [r3, #0]
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	6899      	ldr	r1, [r3, #8]
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	685a      	ldr	r2, [r3, #4]
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	f000 fad9 	bl	8008088 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007ae4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	609a      	str	r2, [r3, #8]
      break;
 8007aee:	e04c      	b.n	8007b8a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6818      	ldr	r0, [r3, #0]
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	6899      	ldr	r1, [r3, #8]
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	685a      	ldr	r2, [r3, #4]
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	f000 fac2 	bl	8008088 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	689a      	ldr	r2, [r3, #8]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b12:	609a      	str	r2, [r3, #8]
      break;
 8007b14:	e039      	b.n	8007b8a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6818      	ldr	r0, [r3, #0]
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	6859      	ldr	r1, [r3, #4]
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	461a      	mov	r2, r3
 8007b24:	f000 f97c 	bl	8007e20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2150      	movs	r1, #80	; 0x50
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f000 fa8c 	bl	800804c <TIM_ITRx_SetConfig>
      break;
 8007b34:	e029      	b.n	8007b8a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6818      	ldr	r0, [r3, #0]
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	6859      	ldr	r1, [r3, #4]
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	461a      	mov	r2, r3
 8007b44:	f000 f9d8 	bl	8007ef8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2160      	movs	r1, #96	; 0x60
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f000 fa7c 	bl	800804c <TIM_ITRx_SetConfig>
      break;
 8007b54:	e019      	b.n	8007b8a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6818      	ldr	r0, [r3, #0]
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	6859      	ldr	r1, [r3, #4]
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	461a      	mov	r2, r3
 8007b64:	f000 f95c 	bl	8007e20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2140      	movs	r1, #64	; 0x40
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f000 fa6c 	bl	800804c <TIM_ITRx_SetConfig>
      break;
 8007b74:	e009      	b.n	8007b8a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4619      	mov	r1, r3
 8007b80:	4610      	mov	r0, r2
 8007b82:	f000 fa63 	bl	800804c <TIM_ITRx_SetConfig>
      break;
 8007b86:	e000      	b.n	8007b8a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8007b88:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b9a:	2300      	movs	r3, #0
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	ffceff88 	.word	0xffceff88
 8007ba8:	00100030 	.word	0x00100030
 8007bac:	00100040 	.word	0x00100040
 8007bb0:	00100020 	.word	0x00100020

08007bb4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007bbc:	bf00      	nop
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007bd0:	bf00      	nop
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007be4:	bf00      	nop
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007bf8:	bf00      	nop
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a40      	ldr	r2, [pc, #256]	; (8007d18 <TIM_Base_SetConfig+0x114>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d013      	beq.n	8007c44 <TIM_Base_SetConfig+0x40>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c22:	d00f      	beq.n	8007c44 <TIM_Base_SetConfig+0x40>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4a3d      	ldr	r2, [pc, #244]	; (8007d1c <TIM_Base_SetConfig+0x118>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d00b      	beq.n	8007c44 <TIM_Base_SetConfig+0x40>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4a3c      	ldr	r2, [pc, #240]	; (8007d20 <TIM_Base_SetConfig+0x11c>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d007      	beq.n	8007c44 <TIM_Base_SetConfig+0x40>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	4a3b      	ldr	r2, [pc, #236]	; (8007d24 <TIM_Base_SetConfig+0x120>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d003      	beq.n	8007c44 <TIM_Base_SetConfig+0x40>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	4a3a      	ldr	r2, [pc, #232]	; (8007d28 <TIM_Base_SetConfig+0x124>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d108      	bne.n	8007c56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a2f      	ldr	r2, [pc, #188]	; (8007d18 <TIM_Base_SetConfig+0x114>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d01f      	beq.n	8007c9e <TIM_Base_SetConfig+0x9a>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c64:	d01b      	beq.n	8007c9e <TIM_Base_SetConfig+0x9a>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4a2c      	ldr	r2, [pc, #176]	; (8007d1c <TIM_Base_SetConfig+0x118>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d017      	beq.n	8007c9e <TIM_Base_SetConfig+0x9a>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a2b      	ldr	r2, [pc, #172]	; (8007d20 <TIM_Base_SetConfig+0x11c>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d013      	beq.n	8007c9e <TIM_Base_SetConfig+0x9a>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a2a      	ldr	r2, [pc, #168]	; (8007d24 <TIM_Base_SetConfig+0x120>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d00f      	beq.n	8007c9e <TIM_Base_SetConfig+0x9a>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a29      	ldr	r2, [pc, #164]	; (8007d28 <TIM_Base_SetConfig+0x124>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d00b      	beq.n	8007c9e <TIM_Base_SetConfig+0x9a>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a28      	ldr	r2, [pc, #160]	; (8007d2c <TIM_Base_SetConfig+0x128>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d007      	beq.n	8007c9e <TIM_Base_SetConfig+0x9a>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a27      	ldr	r2, [pc, #156]	; (8007d30 <TIM_Base_SetConfig+0x12c>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d003      	beq.n	8007c9e <TIM_Base_SetConfig+0x9a>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4a26      	ldr	r2, [pc, #152]	; (8007d34 <TIM_Base_SetConfig+0x130>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d108      	bne.n	8007cb0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ca4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	4313      	orrs	r3, r2
 8007cae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	695b      	ldr	r3, [r3, #20]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	689a      	ldr	r2, [r3, #8]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4a10      	ldr	r2, [pc, #64]	; (8007d18 <TIM_Base_SetConfig+0x114>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d00f      	beq.n	8007cfc <TIM_Base_SetConfig+0xf8>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	4a12      	ldr	r2, [pc, #72]	; (8007d28 <TIM_Base_SetConfig+0x124>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d00b      	beq.n	8007cfc <TIM_Base_SetConfig+0xf8>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a11      	ldr	r2, [pc, #68]	; (8007d2c <TIM_Base_SetConfig+0x128>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d007      	beq.n	8007cfc <TIM_Base_SetConfig+0xf8>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	4a10      	ldr	r2, [pc, #64]	; (8007d30 <TIM_Base_SetConfig+0x12c>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d003      	beq.n	8007cfc <TIM_Base_SetConfig+0xf8>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	4a0f      	ldr	r2, [pc, #60]	; (8007d34 <TIM_Base_SetConfig+0x130>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d103      	bne.n	8007d04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	691a      	ldr	r2, [r3, #16]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	615a      	str	r2, [r3, #20]
}
 8007d0a:	bf00      	nop
 8007d0c:	3714      	adds	r7, #20
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr
 8007d16:	bf00      	nop
 8007d18:	40010000 	.word	0x40010000
 8007d1c:	40000400 	.word	0x40000400
 8007d20:	40000800 	.word	0x40000800
 8007d24:	40000c00 	.word	0x40000c00
 8007d28:	40010400 	.word	0x40010400
 8007d2c:	40014000 	.word	0x40014000
 8007d30:	40014400 	.word	0x40014400
 8007d34:	40014800 	.word	0x40014800

08007d38 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b087      	sub	sp, #28
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	607a      	str	r2, [r7, #4]
 8007d44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6a1b      	ldr	r3, [r3, #32]
 8007d4a:	f023 0201 	bic.w	r2, r3, #1
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	699b      	ldr	r3, [r3, #24]
 8007d56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6a1b      	ldr	r3, [r3, #32]
 8007d5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	4a28      	ldr	r2, [pc, #160]	; (8007e04 <TIM_TI1_SetConfig+0xcc>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d01b      	beq.n	8007d9e <TIM_TI1_SetConfig+0x66>
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d6c:	d017      	beq.n	8007d9e <TIM_TI1_SetConfig+0x66>
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	4a25      	ldr	r2, [pc, #148]	; (8007e08 <TIM_TI1_SetConfig+0xd0>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d013      	beq.n	8007d9e <TIM_TI1_SetConfig+0x66>
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	4a24      	ldr	r2, [pc, #144]	; (8007e0c <TIM_TI1_SetConfig+0xd4>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d00f      	beq.n	8007d9e <TIM_TI1_SetConfig+0x66>
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	4a23      	ldr	r2, [pc, #140]	; (8007e10 <TIM_TI1_SetConfig+0xd8>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d00b      	beq.n	8007d9e <TIM_TI1_SetConfig+0x66>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	4a22      	ldr	r2, [pc, #136]	; (8007e14 <TIM_TI1_SetConfig+0xdc>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d007      	beq.n	8007d9e <TIM_TI1_SetConfig+0x66>
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	4a21      	ldr	r2, [pc, #132]	; (8007e18 <TIM_TI1_SetConfig+0xe0>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d003      	beq.n	8007d9e <TIM_TI1_SetConfig+0x66>
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	4a20      	ldr	r2, [pc, #128]	; (8007e1c <TIM_TI1_SetConfig+0xe4>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d101      	bne.n	8007da2 <TIM_TI1_SetConfig+0x6a>
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e000      	b.n	8007da4 <TIM_TI1_SetConfig+0x6c>
 8007da2:	2300      	movs	r3, #0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d008      	beq.n	8007dba <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	f023 0303 	bic.w	r3, r3, #3
 8007dae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007db0:	697a      	ldr	r2, [r7, #20]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	617b      	str	r3, [r7, #20]
 8007db8:	e003      	b.n	8007dc2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	f043 0301 	orr.w	r3, r3, #1
 8007dc0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007dc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	011b      	lsls	r3, r3, #4
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	697a      	ldr	r2, [r7, #20]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	f023 030a 	bic.w	r3, r3, #10
 8007ddc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	f003 030a 	and.w	r3, r3, #10
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	697a      	ldr	r2, [r7, #20]
 8007dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	693a      	ldr	r2, [r7, #16]
 8007df4:	621a      	str	r2, [r3, #32]
}
 8007df6:	bf00      	nop
 8007df8:	371c      	adds	r7, #28
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	40010000 	.word	0x40010000
 8007e08:	40000400 	.word	0x40000400
 8007e0c:	40000800 	.word	0x40000800
 8007e10:	40000c00 	.word	0x40000c00
 8007e14:	40010400 	.word	0x40010400
 8007e18:	40001800 	.word	0x40001800
 8007e1c:	40014000 	.word	0x40014000

08007e20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b087      	sub	sp, #28
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6a1b      	ldr	r3, [r3, #32]
 8007e30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	f023 0201 	bic.w	r2, r3, #1
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	011b      	lsls	r3, r3, #4
 8007e50:	693a      	ldr	r2, [r7, #16]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	f023 030a 	bic.w	r3, r3, #10
 8007e5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e5e:	697a      	ldr	r2, [r7, #20]
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	693a      	ldr	r2, [r7, #16]
 8007e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	697a      	ldr	r2, [r7, #20]
 8007e70:	621a      	str	r2, [r3, #32]
}
 8007e72:	bf00      	nop
 8007e74:	371c      	adds	r7, #28
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr

08007e7e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007e7e:	b480      	push	{r7}
 8007e80:	b087      	sub	sp, #28
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	60f8      	str	r0, [r7, #12]
 8007e86:	60b9      	str	r1, [r7, #8]
 8007e88:	607a      	str	r2, [r7, #4]
 8007e8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6a1b      	ldr	r3, [r3, #32]
 8007e90:	f023 0210 	bic.w	r2, r3, #16
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	699b      	ldr	r3, [r3, #24]
 8007e9c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6a1b      	ldr	r3, [r3, #32]
 8007ea2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007eaa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	021b      	lsls	r3, r3, #8
 8007eb0:	697a      	ldr	r2, [r7, #20]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ebc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	031b      	lsls	r3, r3, #12
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	697a      	ldr	r2, [r7, #20]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ed0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	011b      	lsls	r3, r3, #4
 8007ed6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007eda:	693a      	ldr	r2, [r7, #16]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	697a      	ldr	r2, [r7, #20]
 8007ee4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	621a      	str	r2, [r3, #32]
}
 8007eec:	bf00      	nop
 8007eee:	371c      	adds	r7, #28
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b087      	sub	sp, #28
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6a1b      	ldr	r3, [r3, #32]
 8007f08:	f023 0210 	bic.w	r2, r3, #16
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	699b      	ldr	r3, [r3, #24]
 8007f14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6a1b      	ldr	r3, [r3, #32]
 8007f1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	031b      	lsls	r3, r3, #12
 8007f28:	697a      	ldr	r2, [r7, #20]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	011b      	lsls	r3, r3, #4
 8007f3a:	693a      	ldr	r2, [r7, #16]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	697a      	ldr	r2, [r7, #20]
 8007f44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	693a      	ldr	r2, [r7, #16]
 8007f4a:	621a      	str	r2, [r3, #32]
}
 8007f4c:	bf00      	nop
 8007f4e:	371c      	adds	r7, #28
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b087      	sub	sp, #28
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	607a      	str	r2, [r7, #4]
 8007f64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6a1b      	ldr	r3, [r3, #32]
 8007f6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	69db      	ldr	r3, [r3, #28]
 8007f76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6a1b      	ldr	r3, [r3, #32]
 8007f7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	f023 0303 	bic.w	r3, r3, #3
 8007f84:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007f86:	697a      	ldr	r2, [r7, #20]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f94:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	011b      	lsls	r3, r3, #4
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	697a      	ldr	r2, [r7, #20]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007fa8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	021b      	lsls	r3, r3, #8
 8007fae:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007fb2:	693a      	ldr	r2, [r7, #16]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	697a      	ldr	r2, [r7, #20]
 8007fbc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	693a      	ldr	r2, [r7, #16]
 8007fc2:	621a      	str	r2, [r3, #32]
}
 8007fc4:	bf00      	nop
 8007fc6:	371c      	adds	r7, #28
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b087      	sub	sp, #28
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	607a      	str	r2, [r7, #4]
 8007fdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6a1b      	ldr	r3, [r3, #32]
 8007fe2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	69db      	ldr	r3, [r3, #28]
 8007fee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6a1b      	ldr	r3, [r3, #32]
 8007ff4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ffc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	021b      	lsls	r3, r3, #8
 8008002:	697a      	ldr	r2, [r7, #20]
 8008004:	4313      	orrs	r3, r2
 8008006:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800800e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	031b      	lsls	r3, r3, #12
 8008014:	b29b      	uxth	r3, r3
 8008016:	697a      	ldr	r2, [r7, #20]
 8008018:	4313      	orrs	r3, r2
 800801a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008022:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	031b      	lsls	r3, r3, #12
 8008028:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800802c:	693a      	ldr	r2, [r7, #16]
 800802e:	4313      	orrs	r3, r2
 8008030:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	697a      	ldr	r2, [r7, #20]
 8008036:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	693a      	ldr	r2, [r7, #16]
 800803c:	621a      	str	r2, [r3, #32]
}
 800803e:	bf00      	nop
 8008040:	371c      	adds	r7, #28
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr
	...

0800804c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800804c:	b480      	push	{r7}
 800804e:	b085      	sub	sp, #20
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	4b09      	ldr	r3, [pc, #36]	; (8008084 <TIM_ITRx_SetConfig+0x38>)
 8008060:	4013      	ands	r3, r2
 8008062:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008064:	683a      	ldr	r2, [r7, #0]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	4313      	orrs	r3, r2
 800806a:	f043 0307 	orr.w	r3, r3, #7
 800806e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	68fa      	ldr	r2, [r7, #12]
 8008074:	609a      	str	r2, [r3, #8]
}
 8008076:	bf00      	nop
 8008078:	3714      	adds	r7, #20
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	ffcfff8f 	.word	0xffcfff8f

08008088 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008088:	b480      	push	{r7}
 800808a:	b087      	sub	sp, #28
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	607a      	str	r2, [r7, #4]
 8008094:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	021a      	lsls	r2, r3, #8
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	431a      	orrs	r2, r3
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	697a      	ldr	r2, [r7, #20]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	697a      	ldr	r2, [r7, #20]
 80080ba:	609a      	str	r2, [r3, #8]
}
 80080bc:	bf00      	nop
 80080be:	371c      	adds	r7, #28
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b087      	sub	sp, #28
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	f003 031f 	and.w	r3, r3, #31
 80080da:	2201      	movs	r2, #1
 80080dc:	fa02 f303 	lsl.w	r3, r2, r3
 80080e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6a1a      	ldr	r2, [r3, #32]
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	43db      	mvns	r3, r3
 80080ea:	401a      	ands	r2, r3
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6a1a      	ldr	r2, [r3, #32]
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	f003 031f 	and.w	r3, r3, #31
 80080fa:	6879      	ldr	r1, [r7, #4]
 80080fc:	fa01 f303 	lsl.w	r3, r1, r3
 8008100:	431a      	orrs	r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	621a      	str	r2, [r3, #32]
}
 8008106:	bf00      	nop
 8008108:	371c      	adds	r7, #28
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr
	...

08008114 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008124:	2b01      	cmp	r3, #1
 8008126:	d101      	bne.n	800812c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008128:	2302      	movs	r3, #2
 800812a:	e068      	b.n	80081fe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2202      	movs	r2, #2
 8008138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a2e      	ldr	r2, [pc, #184]	; (800820c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d004      	beq.n	8008160 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a2d      	ldr	r2, [pc, #180]	; (8008210 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d108      	bne.n	8008172 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008166:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	4313      	orrs	r3, r2
 8008170:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008178:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	4313      	orrs	r3, r2
 8008182:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68fa      	ldr	r2, [r7, #12]
 800818a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a1e      	ldr	r2, [pc, #120]	; (800820c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d01d      	beq.n	80081d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800819e:	d018      	beq.n	80081d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a1b      	ldr	r2, [pc, #108]	; (8008214 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d013      	beq.n	80081d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a1a      	ldr	r2, [pc, #104]	; (8008218 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d00e      	beq.n	80081d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a18      	ldr	r2, [pc, #96]	; (800821c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d009      	beq.n	80081d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a13      	ldr	r2, [pc, #76]	; (8008210 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d004      	beq.n	80081d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a14      	ldr	r2, [pc, #80]	; (8008220 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d10c      	bne.n	80081ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	68ba      	ldr	r2, [r7, #8]
 80081e0:	4313      	orrs	r3, r2
 80081e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3714      	adds	r7, #20
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop
 800820c:	40010000 	.word	0x40010000
 8008210:	40010400 	.word	0x40010400
 8008214:	40000400 	.word	0x40000400
 8008218:	40000800 	.word	0x40000800
 800821c:	40000c00 	.word	0x40000c00
 8008220:	40001800 	.word	0x40001800

08008224 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800822c:	bf00      	nop
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008240:	bf00      	nop
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008254:	bf00      	nop
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d101      	bne.n	8008272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	e042      	b.n	80082f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008278:	2b00      	cmp	r3, #0
 800827a:	d106      	bne.n	800828a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f7f8 ff61 	bl	800114c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2224      	movs	r2, #36	; 0x24
 800828e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f022 0201 	bic.w	r2, r2, #1
 80082a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 f8c2 	bl	800842c <UART_SetConfig>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d101      	bne.n	80082b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e022      	b.n	80082f8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d002      	beq.n	80082c0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 ff62 	bl	8009184 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	685a      	ldr	r2, [r3, #4]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	689a      	ldr	r2, [r3, #8]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f042 0201 	orr.w	r2, r2, #1
 80082ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 ffe9 	bl	80092c8 <UART_CheckIdleState>
 80082f6:	4603      	mov	r3, r0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3708      	adds	r7, #8
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b08a      	sub	sp, #40	; 0x28
 8008304:	af02      	add	r7, sp, #8
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	603b      	str	r3, [r7, #0]
 800830c:	4613      	mov	r3, r2
 800830e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008316:	2b20      	cmp	r3, #32
 8008318:	f040 8083 	bne.w	8008422 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d002      	beq.n	8008328 <HAL_UART_Transmit+0x28>
 8008322:	88fb      	ldrh	r3, [r7, #6]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d101      	bne.n	800832c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	e07b      	b.n	8008424 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008332:	2b01      	cmp	r3, #1
 8008334:	d101      	bne.n	800833a <HAL_UART_Transmit+0x3a>
 8008336:	2302      	movs	r3, #2
 8008338:	e074      	b.n	8008424 <HAL_UART_Transmit+0x124>
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2201      	movs	r2, #1
 800833e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2200      	movs	r2, #0
 8008346:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2221      	movs	r2, #33	; 0x21
 800834e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008352:	f7f9 f8bd 	bl	80014d0 <HAL_GetTick>
 8008356:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	88fa      	ldrh	r2, [r7, #6]
 800835c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	88fa      	ldrh	r2, [r7, #6]
 8008364:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008370:	d108      	bne.n	8008384 <HAL_UART_Transmit+0x84>
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d104      	bne.n	8008384 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800837a:	2300      	movs	r3, #0
 800837c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	61bb      	str	r3, [r7, #24]
 8008382:	e003      	b.n	800838c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008388:	2300      	movs	r3, #0
 800838a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2200      	movs	r2, #0
 8008390:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8008394:	e02c      	b.n	80083f0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	9300      	str	r3, [sp, #0]
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	2200      	movs	r2, #0
 800839e:	2180      	movs	r1, #128	; 0x80
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f000 ffd9 	bl	8009358 <UART_WaitOnFlagUntilTimeout>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d001      	beq.n	80083b0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80083ac:	2303      	movs	r3, #3
 80083ae:	e039      	b.n	8008424 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d10b      	bne.n	80083ce <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	881b      	ldrh	r3, [r3, #0]
 80083ba:	461a      	mov	r2, r3
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80083c6:	69bb      	ldr	r3, [r7, #24]
 80083c8:	3302      	adds	r3, #2
 80083ca:	61bb      	str	r3, [r7, #24]
 80083cc:	e007      	b.n	80083de <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	781a      	ldrb	r2, [r3, #0]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	3301      	adds	r3, #1
 80083dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	3b01      	subs	r3, #1
 80083e8:	b29a      	uxth	r2, r3
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d1cc      	bne.n	8008396 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	9300      	str	r3, [sp, #0]
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	2200      	movs	r2, #0
 8008404:	2140      	movs	r1, #64	; 0x40
 8008406:	68f8      	ldr	r0, [r7, #12]
 8008408:	f000 ffa6 	bl	8009358 <UART_WaitOnFlagUntilTimeout>
 800840c:	4603      	mov	r3, r0
 800840e:	2b00      	cmp	r3, #0
 8008410:	d001      	beq.n	8008416 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008412:	2303      	movs	r3, #3
 8008414:	e006      	b.n	8008424 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2220      	movs	r2, #32
 800841a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800841e:	2300      	movs	r3, #0
 8008420:	e000      	b.n	8008424 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008422:	2302      	movs	r3, #2
  }
}
 8008424:	4618      	mov	r0, r3
 8008426:	3720      	adds	r7, #32
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800842c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008430:	b08e      	sub	sp, #56	; 0x38
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008436:	2300      	movs	r3, #0
 8008438:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	689a      	ldr	r2, [r3, #8]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	431a      	orrs	r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	695b      	ldr	r3, [r3, #20]
 800844a:	431a      	orrs	r2, r3
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	69db      	ldr	r3, [r3, #28]
 8008450:	4313      	orrs	r3, r2
 8008452:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008458:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800845a:	4313      	orrs	r3, r2
 800845c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	4bc1      	ldr	r3, [pc, #772]	; (800876c <UART_SetConfig+0x340>)
 8008466:	4013      	ands	r3, r2
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	6812      	ldr	r2, [r2, #0]
 800846c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800846e:	430b      	orrs	r3, r1
 8008470:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	68da      	ldr	r2, [r3, #12]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	430a      	orrs	r2, r1
 8008486:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	699b      	ldr	r3, [r3, #24]
 800848c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4ab7      	ldr	r2, [pc, #732]	; (8008770 <UART_SetConfig+0x344>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d004      	beq.n	80084a2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6a1b      	ldr	r3, [r3, #32]
 800849c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800849e:	4313      	orrs	r3, r2
 80084a0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	689a      	ldr	r2, [r3, #8]
 80084a8:	4bb2      	ldr	r3, [pc, #712]	; (8008774 <UART_SetConfig+0x348>)
 80084aa:	4013      	ands	r3, r2
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	6812      	ldr	r2, [r2, #0]
 80084b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80084b2:	430b      	orrs	r3, r1
 80084b4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084bc:	f023 010f 	bic.w	r1, r3, #15
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	430a      	orrs	r2, r1
 80084ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4aa9      	ldr	r2, [pc, #676]	; (8008778 <UART_SetConfig+0x34c>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d177      	bne.n	80085c6 <UART_SetConfig+0x19a>
 80084d6:	4ba9      	ldr	r3, [pc, #676]	; (800877c <UART_SetConfig+0x350>)
 80084d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084de:	2b28      	cmp	r3, #40	; 0x28
 80084e0:	d86c      	bhi.n	80085bc <UART_SetConfig+0x190>
 80084e2:	a201      	add	r2, pc, #4	; (adr r2, 80084e8 <UART_SetConfig+0xbc>)
 80084e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e8:	0800858d 	.word	0x0800858d
 80084ec:	080085bd 	.word	0x080085bd
 80084f0:	080085bd 	.word	0x080085bd
 80084f4:	080085bd 	.word	0x080085bd
 80084f8:	080085bd 	.word	0x080085bd
 80084fc:	080085bd 	.word	0x080085bd
 8008500:	080085bd 	.word	0x080085bd
 8008504:	080085bd 	.word	0x080085bd
 8008508:	08008595 	.word	0x08008595
 800850c:	080085bd 	.word	0x080085bd
 8008510:	080085bd 	.word	0x080085bd
 8008514:	080085bd 	.word	0x080085bd
 8008518:	080085bd 	.word	0x080085bd
 800851c:	080085bd 	.word	0x080085bd
 8008520:	080085bd 	.word	0x080085bd
 8008524:	080085bd 	.word	0x080085bd
 8008528:	0800859d 	.word	0x0800859d
 800852c:	080085bd 	.word	0x080085bd
 8008530:	080085bd 	.word	0x080085bd
 8008534:	080085bd 	.word	0x080085bd
 8008538:	080085bd 	.word	0x080085bd
 800853c:	080085bd 	.word	0x080085bd
 8008540:	080085bd 	.word	0x080085bd
 8008544:	080085bd 	.word	0x080085bd
 8008548:	080085a5 	.word	0x080085a5
 800854c:	080085bd 	.word	0x080085bd
 8008550:	080085bd 	.word	0x080085bd
 8008554:	080085bd 	.word	0x080085bd
 8008558:	080085bd 	.word	0x080085bd
 800855c:	080085bd 	.word	0x080085bd
 8008560:	080085bd 	.word	0x080085bd
 8008564:	080085bd 	.word	0x080085bd
 8008568:	080085ad 	.word	0x080085ad
 800856c:	080085bd 	.word	0x080085bd
 8008570:	080085bd 	.word	0x080085bd
 8008574:	080085bd 	.word	0x080085bd
 8008578:	080085bd 	.word	0x080085bd
 800857c:	080085bd 	.word	0x080085bd
 8008580:	080085bd 	.word	0x080085bd
 8008584:	080085bd 	.word	0x080085bd
 8008588:	080085b5 	.word	0x080085b5
 800858c:	2301      	movs	r3, #1
 800858e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008592:	e339      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008594:	2304      	movs	r3, #4
 8008596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800859a:	e335      	b.n	8008c08 <UART_SetConfig+0x7dc>
 800859c:	2308      	movs	r3, #8
 800859e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085a2:	e331      	b.n	8008c08 <UART_SetConfig+0x7dc>
 80085a4:	2310      	movs	r3, #16
 80085a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085aa:	e32d      	b.n	8008c08 <UART_SetConfig+0x7dc>
 80085ac:	2320      	movs	r3, #32
 80085ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085b2:	e329      	b.n	8008c08 <UART_SetConfig+0x7dc>
 80085b4:	2340      	movs	r3, #64	; 0x40
 80085b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085ba:	e325      	b.n	8008c08 <UART_SetConfig+0x7dc>
 80085bc:	2380      	movs	r3, #128	; 0x80
 80085be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085c2:	bf00      	nop
 80085c4:	e320      	b.n	8008c08 <UART_SetConfig+0x7dc>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a6d      	ldr	r2, [pc, #436]	; (8008780 <UART_SetConfig+0x354>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d132      	bne.n	8008636 <UART_SetConfig+0x20a>
 80085d0:	4b6a      	ldr	r3, [pc, #424]	; (800877c <UART_SetConfig+0x350>)
 80085d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085d4:	f003 0307 	and.w	r3, r3, #7
 80085d8:	2b05      	cmp	r3, #5
 80085da:	d827      	bhi.n	800862c <UART_SetConfig+0x200>
 80085dc:	a201      	add	r2, pc, #4	; (adr r2, 80085e4 <UART_SetConfig+0x1b8>)
 80085de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e2:	bf00      	nop
 80085e4:	080085fd 	.word	0x080085fd
 80085e8:	08008605 	.word	0x08008605
 80085ec:	0800860d 	.word	0x0800860d
 80085f0:	08008615 	.word	0x08008615
 80085f4:	0800861d 	.word	0x0800861d
 80085f8:	08008625 	.word	0x08008625
 80085fc:	2300      	movs	r3, #0
 80085fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008602:	e301      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008604:	2304      	movs	r3, #4
 8008606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800860a:	e2fd      	b.n	8008c08 <UART_SetConfig+0x7dc>
 800860c:	2308      	movs	r3, #8
 800860e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008612:	e2f9      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008614:	2310      	movs	r3, #16
 8008616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800861a:	e2f5      	b.n	8008c08 <UART_SetConfig+0x7dc>
 800861c:	2320      	movs	r3, #32
 800861e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008622:	e2f1      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008624:	2340      	movs	r3, #64	; 0x40
 8008626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800862a:	e2ed      	b.n	8008c08 <UART_SetConfig+0x7dc>
 800862c:	2380      	movs	r3, #128	; 0x80
 800862e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008632:	bf00      	nop
 8008634:	e2e8      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a52      	ldr	r2, [pc, #328]	; (8008784 <UART_SetConfig+0x358>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d132      	bne.n	80086a6 <UART_SetConfig+0x27a>
 8008640:	4b4e      	ldr	r3, [pc, #312]	; (800877c <UART_SetConfig+0x350>)
 8008642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008644:	f003 0307 	and.w	r3, r3, #7
 8008648:	2b05      	cmp	r3, #5
 800864a:	d827      	bhi.n	800869c <UART_SetConfig+0x270>
 800864c:	a201      	add	r2, pc, #4	; (adr r2, 8008654 <UART_SetConfig+0x228>)
 800864e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008652:	bf00      	nop
 8008654:	0800866d 	.word	0x0800866d
 8008658:	08008675 	.word	0x08008675
 800865c:	0800867d 	.word	0x0800867d
 8008660:	08008685 	.word	0x08008685
 8008664:	0800868d 	.word	0x0800868d
 8008668:	08008695 	.word	0x08008695
 800866c:	2300      	movs	r3, #0
 800866e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008672:	e2c9      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008674:	2304      	movs	r3, #4
 8008676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800867a:	e2c5      	b.n	8008c08 <UART_SetConfig+0x7dc>
 800867c:	2308      	movs	r3, #8
 800867e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008682:	e2c1      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008684:	2310      	movs	r3, #16
 8008686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800868a:	e2bd      	b.n	8008c08 <UART_SetConfig+0x7dc>
 800868c:	2320      	movs	r3, #32
 800868e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008692:	e2b9      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008694:	2340      	movs	r3, #64	; 0x40
 8008696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800869a:	e2b5      	b.n	8008c08 <UART_SetConfig+0x7dc>
 800869c:	2380      	movs	r3, #128	; 0x80
 800869e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086a2:	bf00      	nop
 80086a4:	e2b0      	b.n	8008c08 <UART_SetConfig+0x7dc>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a37      	ldr	r2, [pc, #220]	; (8008788 <UART_SetConfig+0x35c>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d132      	bne.n	8008716 <UART_SetConfig+0x2ea>
 80086b0:	4b32      	ldr	r3, [pc, #200]	; (800877c <UART_SetConfig+0x350>)
 80086b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086b4:	f003 0307 	and.w	r3, r3, #7
 80086b8:	2b05      	cmp	r3, #5
 80086ba:	d827      	bhi.n	800870c <UART_SetConfig+0x2e0>
 80086bc:	a201      	add	r2, pc, #4	; (adr r2, 80086c4 <UART_SetConfig+0x298>)
 80086be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c2:	bf00      	nop
 80086c4:	080086dd 	.word	0x080086dd
 80086c8:	080086e5 	.word	0x080086e5
 80086cc:	080086ed 	.word	0x080086ed
 80086d0:	080086f5 	.word	0x080086f5
 80086d4:	080086fd 	.word	0x080086fd
 80086d8:	08008705 	.word	0x08008705
 80086dc:	2300      	movs	r3, #0
 80086de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086e2:	e291      	b.n	8008c08 <UART_SetConfig+0x7dc>
 80086e4:	2304      	movs	r3, #4
 80086e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086ea:	e28d      	b.n	8008c08 <UART_SetConfig+0x7dc>
 80086ec:	2308      	movs	r3, #8
 80086ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086f2:	e289      	b.n	8008c08 <UART_SetConfig+0x7dc>
 80086f4:	2310      	movs	r3, #16
 80086f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086fa:	e285      	b.n	8008c08 <UART_SetConfig+0x7dc>
 80086fc:	2320      	movs	r3, #32
 80086fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008702:	e281      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008704:	2340      	movs	r3, #64	; 0x40
 8008706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800870a:	e27d      	b.n	8008c08 <UART_SetConfig+0x7dc>
 800870c:	2380      	movs	r3, #128	; 0x80
 800870e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008712:	bf00      	nop
 8008714:	e278      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a1c      	ldr	r2, [pc, #112]	; (800878c <UART_SetConfig+0x360>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d144      	bne.n	80087aa <UART_SetConfig+0x37e>
 8008720:	4b16      	ldr	r3, [pc, #88]	; (800877c <UART_SetConfig+0x350>)
 8008722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008724:	f003 0307 	and.w	r3, r3, #7
 8008728:	2b05      	cmp	r3, #5
 800872a:	d839      	bhi.n	80087a0 <UART_SetConfig+0x374>
 800872c:	a201      	add	r2, pc, #4	; (adr r2, 8008734 <UART_SetConfig+0x308>)
 800872e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008732:	bf00      	nop
 8008734:	0800874d 	.word	0x0800874d
 8008738:	08008755 	.word	0x08008755
 800873c:	0800875d 	.word	0x0800875d
 8008740:	08008765 	.word	0x08008765
 8008744:	08008791 	.word	0x08008791
 8008748:	08008799 	.word	0x08008799
 800874c:	2300      	movs	r3, #0
 800874e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008752:	e259      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008754:	2304      	movs	r3, #4
 8008756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800875a:	e255      	b.n	8008c08 <UART_SetConfig+0x7dc>
 800875c:	2308      	movs	r3, #8
 800875e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008762:	e251      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008764:	2310      	movs	r3, #16
 8008766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800876a:	e24d      	b.n	8008c08 <UART_SetConfig+0x7dc>
 800876c:	cfff69f3 	.word	0xcfff69f3
 8008770:	58000c00 	.word	0x58000c00
 8008774:	11fff4ff 	.word	0x11fff4ff
 8008778:	40011000 	.word	0x40011000
 800877c:	58024400 	.word	0x58024400
 8008780:	40004400 	.word	0x40004400
 8008784:	40004800 	.word	0x40004800
 8008788:	40004c00 	.word	0x40004c00
 800878c:	40005000 	.word	0x40005000
 8008790:	2320      	movs	r3, #32
 8008792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008796:	e237      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008798:	2340      	movs	r3, #64	; 0x40
 800879a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800879e:	e233      	b.n	8008c08 <UART_SetConfig+0x7dc>
 80087a0:	2380      	movs	r3, #128	; 0x80
 80087a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087a6:	bf00      	nop
 80087a8:	e22e      	b.n	8008c08 <UART_SetConfig+0x7dc>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4ab5      	ldr	r2, [pc, #724]	; (8008a84 <UART_SetConfig+0x658>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d178      	bne.n	80088a6 <UART_SetConfig+0x47a>
 80087b4:	4bb4      	ldr	r3, [pc, #720]	; (8008a88 <UART_SetConfig+0x65c>)
 80087b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087bc:	2b28      	cmp	r3, #40	; 0x28
 80087be:	d86d      	bhi.n	800889c <UART_SetConfig+0x470>
 80087c0:	a201      	add	r2, pc, #4	; (adr r2, 80087c8 <UART_SetConfig+0x39c>)
 80087c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c6:	bf00      	nop
 80087c8:	0800886d 	.word	0x0800886d
 80087cc:	0800889d 	.word	0x0800889d
 80087d0:	0800889d 	.word	0x0800889d
 80087d4:	0800889d 	.word	0x0800889d
 80087d8:	0800889d 	.word	0x0800889d
 80087dc:	0800889d 	.word	0x0800889d
 80087e0:	0800889d 	.word	0x0800889d
 80087e4:	0800889d 	.word	0x0800889d
 80087e8:	08008875 	.word	0x08008875
 80087ec:	0800889d 	.word	0x0800889d
 80087f0:	0800889d 	.word	0x0800889d
 80087f4:	0800889d 	.word	0x0800889d
 80087f8:	0800889d 	.word	0x0800889d
 80087fc:	0800889d 	.word	0x0800889d
 8008800:	0800889d 	.word	0x0800889d
 8008804:	0800889d 	.word	0x0800889d
 8008808:	0800887d 	.word	0x0800887d
 800880c:	0800889d 	.word	0x0800889d
 8008810:	0800889d 	.word	0x0800889d
 8008814:	0800889d 	.word	0x0800889d
 8008818:	0800889d 	.word	0x0800889d
 800881c:	0800889d 	.word	0x0800889d
 8008820:	0800889d 	.word	0x0800889d
 8008824:	0800889d 	.word	0x0800889d
 8008828:	08008885 	.word	0x08008885
 800882c:	0800889d 	.word	0x0800889d
 8008830:	0800889d 	.word	0x0800889d
 8008834:	0800889d 	.word	0x0800889d
 8008838:	0800889d 	.word	0x0800889d
 800883c:	0800889d 	.word	0x0800889d
 8008840:	0800889d 	.word	0x0800889d
 8008844:	0800889d 	.word	0x0800889d
 8008848:	0800888d 	.word	0x0800888d
 800884c:	0800889d 	.word	0x0800889d
 8008850:	0800889d 	.word	0x0800889d
 8008854:	0800889d 	.word	0x0800889d
 8008858:	0800889d 	.word	0x0800889d
 800885c:	0800889d 	.word	0x0800889d
 8008860:	0800889d 	.word	0x0800889d
 8008864:	0800889d 	.word	0x0800889d
 8008868:	08008895 	.word	0x08008895
 800886c:	2301      	movs	r3, #1
 800886e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008872:	e1c9      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008874:	2304      	movs	r3, #4
 8008876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800887a:	e1c5      	b.n	8008c08 <UART_SetConfig+0x7dc>
 800887c:	2308      	movs	r3, #8
 800887e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008882:	e1c1      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008884:	2310      	movs	r3, #16
 8008886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800888a:	e1bd      	b.n	8008c08 <UART_SetConfig+0x7dc>
 800888c:	2320      	movs	r3, #32
 800888e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008892:	e1b9      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008894:	2340      	movs	r3, #64	; 0x40
 8008896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800889a:	e1b5      	b.n	8008c08 <UART_SetConfig+0x7dc>
 800889c:	2380      	movs	r3, #128	; 0x80
 800889e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088a2:	bf00      	nop
 80088a4:	e1b0      	b.n	8008c08 <UART_SetConfig+0x7dc>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a78      	ldr	r2, [pc, #480]	; (8008a8c <UART_SetConfig+0x660>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d132      	bne.n	8008916 <UART_SetConfig+0x4ea>
 80088b0:	4b75      	ldr	r3, [pc, #468]	; (8008a88 <UART_SetConfig+0x65c>)
 80088b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088b4:	f003 0307 	and.w	r3, r3, #7
 80088b8:	2b05      	cmp	r3, #5
 80088ba:	d827      	bhi.n	800890c <UART_SetConfig+0x4e0>
 80088bc:	a201      	add	r2, pc, #4	; (adr r2, 80088c4 <UART_SetConfig+0x498>)
 80088be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c2:	bf00      	nop
 80088c4:	080088dd 	.word	0x080088dd
 80088c8:	080088e5 	.word	0x080088e5
 80088cc:	080088ed 	.word	0x080088ed
 80088d0:	080088f5 	.word	0x080088f5
 80088d4:	080088fd 	.word	0x080088fd
 80088d8:	08008905 	.word	0x08008905
 80088dc:	2300      	movs	r3, #0
 80088de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088e2:	e191      	b.n	8008c08 <UART_SetConfig+0x7dc>
 80088e4:	2304      	movs	r3, #4
 80088e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088ea:	e18d      	b.n	8008c08 <UART_SetConfig+0x7dc>
 80088ec:	2308      	movs	r3, #8
 80088ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088f2:	e189      	b.n	8008c08 <UART_SetConfig+0x7dc>
 80088f4:	2310      	movs	r3, #16
 80088f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088fa:	e185      	b.n	8008c08 <UART_SetConfig+0x7dc>
 80088fc:	2320      	movs	r3, #32
 80088fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008902:	e181      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008904:	2340      	movs	r3, #64	; 0x40
 8008906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800890a:	e17d      	b.n	8008c08 <UART_SetConfig+0x7dc>
 800890c:	2380      	movs	r3, #128	; 0x80
 800890e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008912:	bf00      	nop
 8008914:	e178      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a5d      	ldr	r2, [pc, #372]	; (8008a90 <UART_SetConfig+0x664>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d132      	bne.n	8008986 <UART_SetConfig+0x55a>
 8008920:	4b59      	ldr	r3, [pc, #356]	; (8008a88 <UART_SetConfig+0x65c>)
 8008922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008924:	f003 0307 	and.w	r3, r3, #7
 8008928:	2b05      	cmp	r3, #5
 800892a:	d827      	bhi.n	800897c <UART_SetConfig+0x550>
 800892c:	a201      	add	r2, pc, #4	; (adr r2, 8008934 <UART_SetConfig+0x508>)
 800892e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008932:	bf00      	nop
 8008934:	0800894d 	.word	0x0800894d
 8008938:	08008955 	.word	0x08008955
 800893c:	0800895d 	.word	0x0800895d
 8008940:	08008965 	.word	0x08008965
 8008944:	0800896d 	.word	0x0800896d
 8008948:	08008975 	.word	0x08008975
 800894c:	2300      	movs	r3, #0
 800894e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008952:	e159      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008954:	2304      	movs	r3, #4
 8008956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800895a:	e155      	b.n	8008c08 <UART_SetConfig+0x7dc>
 800895c:	2308      	movs	r3, #8
 800895e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008962:	e151      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008964:	2310      	movs	r3, #16
 8008966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800896a:	e14d      	b.n	8008c08 <UART_SetConfig+0x7dc>
 800896c:	2320      	movs	r3, #32
 800896e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008972:	e149      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008974:	2340      	movs	r3, #64	; 0x40
 8008976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800897a:	e145      	b.n	8008c08 <UART_SetConfig+0x7dc>
 800897c:	2380      	movs	r3, #128	; 0x80
 800897e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008982:	bf00      	nop
 8008984:	e140      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a42      	ldr	r2, [pc, #264]	; (8008a94 <UART_SetConfig+0x668>)
 800898c:	4293      	cmp	r3, r2
 800898e:	f040 8083 	bne.w	8008a98 <UART_SetConfig+0x66c>
 8008992:	4b3d      	ldr	r3, [pc, #244]	; (8008a88 <UART_SetConfig+0x65c>)
 8008994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008996:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800899a:	2b28      	cmp	r3, #40	; 0x28
 800899c:	d86c      	bhi.n	8008a78 <UART_SetConfig+0x64c>
 800899e:	a201      	add	r2, pc, #4	; (adr r2, 80089a4 <UART_SetConfig+0x578>)
 80089a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a4:	08008a49 	.word	0x08008a49
 80089a8:	08008a79 	.word	0x08008a79
 80089ac:	08008a79 	.word	0x08008a79
 80089b0:	08008a79 	.word	0x08008a79
 80089b4:	08008a79 	.word	0x08008a79
 80089b8:	08008a79 	.word	0x08008a79
 80089bc:	08008a79 	.word	0x08008a79
 80089c0:	08008a79 	.word	0x08008a79
 80089c4:	08008a51 	.word	0x08008a51
 80089c8:	08008a79 	.word	0x08008a79
 80089cc:	08008a79 	.word	0x08008a79
 80089d0:	08008a79 	.word	0x08008a79
 80089d4:	08008a79 	.word	0x08008a79
 80089d8:	08008a79 	.word	0x08008a79
 80089dc:	08008a79 	.word	0x08008a79
 80089e0:	08008a79 	.word	0x08008a79
 80089e4:	08008a59 	.word	0x08008a59
 80089e8:	08008a79 	.word	0x08008a79
 80089ec:	08008a79 	.word	0x08008a79
 80089f0:	08008a79 	.word	0x08008a79
 80089f4:	08008a79 	.word	0x08008a79
 80089f8:	08008a79 	.word	0x08008a79
 80089fc:	08008a79 	.word	0x08008a79
 8008a00:	08008a79 	.word	0x08008a79
 8008a04:	08008a61 	.word	0x08008a61
 8008a08:	08008a79 	.word	0x08008a79
 8008a0c:	08008a79 	.word	0x08008a79
 8008a10:	08008a79 	.word	0x08008a79
 8008a14:	08008a79 	.word	0x08008a79
 8008a18:	08008a79 	.word	0x08008a79
 8008a1c:	08008a79 	.word	0x08008a79
 8008a20:	08008a79 	.word	0x08008a79
 8008a24:	08008a69 	.word	0x08008a69
 8008a28:	08008a79 	.word	0x08008a79
 8008a2c:	08008a79 	.word	0x08008a79
 8008a30:	08008a79 	.word	0x08008a79
 8008a34:	08008a79 	.word	0x08008a79
 8008a38:	08008a79 	.word	0x08008a79
 8008a3c:	08008a79 	.word	0x08008a79
 8008a40:	08008a79 	.word	0x08008a79
 8008a44:	08008a71 	.word	0x08008a71
 8008a48:	2301      	movs	r3, #1
 8008a4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a4e:	e0db      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008a50:	2304      	movs	r3, #4
 8008a52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a56:	e0d7      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008a58:	2308      	movs	r3, #8
 8008a5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a5e:	e0d3      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008a60:	2310      	movs	r3, #16
 8008a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a66:	e0cf      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008a68:	2320      	movs	r3, #32
 8008a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a6e:	e0cb      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008a70:	2340      	movs	r3, #64	; 0x40
 8008a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a76:	e0c7      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008a78:	2380      	movs	r3, #128	; 0x80
 8008a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a7e:	bf00      	nop
 8008a80:	e0c2      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008a82:	bf00      	nop
 8008a84:	40011400 	.word	0x40011400
 8008a88:	58024400 	.word	0x58024400
 8008a8c:	40007800 	.word	0x40007800
 8008a90:	40007c00 	.word	0x40007c00
 8008a94:	40011800 	.word	0x40011800
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4ab2      	ldr	r2, [pc, #712]	; (8008d68 <UART_SetConfig+0x93c>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d177      	bne.n	8008b92 <UART_SetConfig+0x766>
 8008aa2:	4bb2      	ldr	r3, [pc, #712]	; (8008d6c <UART_SetConfig+0x940>)
 8008aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aa6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008aaa:	2b28      	cmp	r3, #40	; 0x28
 8008aac:	d86c      	bhi.n	8008b88 <UART_SetConfig+0x75c>
 8008aae:	a201      	add	r2, pc, #4	; (adr r2, 8008ab4 <UART_SetConfig+0x688>)
 8008ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab4:	08008b59 	.word	0x08008b59
 8008ab8:	08008b89 	.word	0x08008b89
 8008abc:	08008b89 	.word	0x08008b89
 8008ac0:	08008b89 	.word	0x08008b89
 8008ac4:	08008b89 	.word	0x08008b89
 8008ac8:	08008b89 	.word	0x08008b89
 8008acc:	08008b89 	.word	0x08008b89
 8008ad0:	08008b89 	.word	0x08008b89
 8008ad4:	08008b61 	.word	0x08008b61
 8008ad8:	08008b89 	.word	0x08008b89
 8008adc:	08008b89 	.word	0x08008b89
 8008ae0:	08008b89 	.word	0x08008b89
 8008ae4:	08008b89 	.word	0x08008b89
 8008ae8:	08008b89 	.word	0x08008b89
 8008aec:	08008b89 	.word	0x08008b89
 8008af0:	08008b89 	.word	0x08008b89
 8008af4:	08008b69 	.word	0x08008b69
 8008af8:	08008b89 	.word	0x08008b89
 8008afc:	08008b89 	.word	0x08008b89
 8008b00:	08008b89 	.word	0x08008b89
 8008b04:	08008b89 	.word	0x08008b89
 8008b08:	08008b89 	.word	0x08008b89
 8008b0c:	08008b89 	.word	0x08008b89
 8008b10:	08008b89 	.word	0x08008b89
 8008b14:	08008b71 	.word	0x08008b71
 8008b18:	08008b89 	.word	0x08008b89
 8008b1c:	08008b89 	.word	0x08008b89
 8008b20:	08008b89 	.word	0x08008b89
 8008b24:	08008b89 	.word	0x08008b89
 8008b28:	08008b89 	.word	0x08008b89
 8008b2c:	08008b89 	.word	0x08008b89
 8008b30:	08008b89 	.word	0x08008b89
 8008b34:	08008b79 	.word	0x08008b79
 8008b38:	08008b89 	.word	0x08008b89
 8008b3c:	08008b89 	.word	0x08008b89
 8008b40:	08008b89 	.word	0x08008b89
 8008b44:	08008b89 	.word	0x08008b89
 8008b48:	08008b89 	.word	0x08008b89
 8008b4c:	08008b89 	.word	0x08008b89
 8008b50:	08008b89 	.word	0x08008b89
 8008b54:	08008b81 	.word	0x08008b81
 8008b58:	2301      	movs	r3, #1
 8008b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b5e:	e053      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008b60:	2304      	movs	r3, #4
 8008b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b66:	e04f      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008b68:	2308      	movs	r3, #8
 8008b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b6e:	e04b      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008b70:	2310      	movs	r3, #16
 8008b72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b76:	e047      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008b78:	2320      	movs	r3, #32
 8008b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b7e:	e043      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008b80:	2340      	movs	r3, #64	; 0x40
 8008b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b86:	e03f      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008b88:	2380      	movs	r3, #128	; 0x80
 8008b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b8e:	bf00      	nop
 8008b90:	e03a      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a76      	ldr	r2, [pc, #472]	; (8008d70 <UART_SetConfig+0x944>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d132      	bne.n	8008c02 <UART_SetConfig+0x7d6>
 8008b9c:	4b73      	ldr	r3, [pc, #460]	; (8008d6c <UART_SetConfig+0x940>)
 8008b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ba0:	f003 0307 	and.w	r3, r3, #7
 8008ba4:	2b05      	cmp	r3, #5
 8008ba6:	d827      	bhi.n	8008bf8 <UART_SetConfig+0x7cc>
 8008ba8:	a201      	add	r2, pc, #4	; (adr r2, 8008bb0 <UART_SetConfig+0x784>)
 8008baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bae:	bf00      	nop
 8008bb0:	08008bc9 	.word	0x08008bc9
 8008bb4:	08008bd1 	.word	0x08008bd1
 8008bb8:	08008bd9 	.word	0x08008bd9
 8008bbc:	08008be1 	.word	0x08008be1
 8008bc0:	08008be9 	.word	0x08008be9
 8008bc4:	08008bf1 	.word	0x08008bf1
 8008bc8:	2302      	movs	r3, #2
 8008bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bce:	e01b      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008bd0:	2304      	movs	r3, #4
 8008bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bd6:	e017      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008bd8:	2308      	movs	r3, #8
 8008bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bde:	e013      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008be0:	2310      	movs	r3, #16
 8008be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008be6:	e00f      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008be8:	2320      	movs	r3, #32
 8008bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bee:	e00b      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008bf0:	2340      	movs	r3, #64	; 0x40
 8008bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bf6:	e007      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008bf8:	2380      	movs	r3, #128	; 0x80
 8008bfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bfe:	bf00      	nop
 8008c00:	e002      	b.n	8008c08 <UART_SetConfig+0x7dc>
 8008c02:	2380      	movs	r3, #128	; 0x80
 8008c04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a58      	ldr	r2, [pc, #352]	; (8008d70 <UART_SetConfig+0x944>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	f040 80b6 	bne.w	8008d80 <UART_SetConfig+0x954>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008c14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008c18:	2b08      	cmp	r3, #8
 8008c1a:	d019      	beq.n	8008c50 <UART_SetConfig+0x824>
 8008c1c:	2b08      	cmp	r3, #8
 8008c1e:	dc04      	bgt.n	8008c2a <UART_SetConfig+0x7fe>
 8008c20:	2b02      	cmp	r3, #2
 8008c22:	d009      	beq.n	8008c38 <UART_SetConfig+0x80c>
 8008c24:	2b04      	cmp	r3, #4
 8008c26:	d00b      	beq.n	8008c40 <UART_SetConfig+0x814>
 8008c28:	e034      	b.n	8008c94 <UART_SetConfig+0x868>
 8008c2a:	2b20      	cmp	r3, #32
 8008c2c:	d02b      	beq.n	8008c86 <UART_SetConfig+0x85a>
 8008c2e:	2b40      	cmp	r3, #64	; 0x40
 8008c30:	d02c      	beq.n	8008c8c <UART_SetConfig+0x860>
 8008c32:	2b10      	cmp	r3, #16
 8008c34:	d014      	beq.n	8008c60 <UART_SetConfig+0x834>
 8008c36:	e02d      	b.n	8008c94 <UART_SetConfig+0x868>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008c38:	f7fd fdea 	bl	8006810 <HAL_RCCEx_GetD3PCLK1Freq>
 8008c3c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008c3e:	e02f      	b.n	8008ca0 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c40:	f107 0314 	add.w	r3, r7, #20
 8008c44:	4618      	mov	r0, r3
 8008c46:	f7fd fdf9 	bl	800683c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c4e:	e027      	b.n	8008ca0 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c50:	f107 0308 	add.w	r3, r7, #8
 8008c54:	4618      	mov	r0, r3
 8008c56:	f7fd ff3d 	bl	8006ad4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c5e:	e01f      	b.n	8008ca0 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c60:	4b42      	ldr	r3, [pc, #264]	; (8008d6c <UART_SetConfig+0x940>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f003 0320 	and.w	r3, r3, #32
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d009      	beq.n	8008c80 <UART_SetConfig+0x854>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008c6c:	4b3f      	ldr	r3, [pc, #252]	; (8008d6c <UART_SetConfig+0x940>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	08db      	lsrs	r3, r3, #3
 8008c72:	f003 0303 	and.w	r3, r3, #3
 8008c76:	4a3f      	ldr	r2, [pc, #252]	; (8008d74 <UART_SetConfig+0x948>)
 8008c78:	fa22 f303 	lsr.w	r3, r2, r3
 8008c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008c7e:	e00f      	b.n	8008ca0 <UART_SetConfig+0x874>
          pclk = (uint32_t) HSI_VALUE;
 8008c80:	4b3c      	ldr	r3, [pc, #240]	; (8008d74 <UART_SetConfig+0x948>)
 8008c82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c84:	e00c      	b.n	8008ca0 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008c86:	4b3c      	ldr	r3, [pc, #240]	; (8008d78 <UART_SetConfig+0x94c>)
 8008c88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c8a:	e009      	b.n	8008ca0 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008c92:	e005      	b.n	8008ca0 <UART_SetConfig+0x874>
      default:
        pclk = 0U;
 8008c94:	2300      	movs	r3, #0
 8008c96:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008c9e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	f000 8251 	beq.w	800914a <UART_SetConfig+0xd1e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cac:	4a33      	ldr	r2, [pc, #204]	; (8008d7c <UART_SetConfig+0x950>)
 8008cae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cba:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	685a      	ldr	r2, [r3, #4]
 8008cc0:	4613      	mov	r3, r2
 8008cc2:	005b      	lsls	r3, r3, #1
 8008cc4:	4413      	add	r3, r2
 8008cc6:	6a3a      	ldr	r2, [r7, #32]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d305      	bcc.n	8008cd8 <UART_SetConfig+0x8ac>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008cd2:	6a3a      	ldr	r2, [r7, #32]
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d903      	bls.n	8008ce0 <UART_SetConfig+0x8b4>
      {
        ret = HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008cde:	e234      	b.n	800914a <UART_SetConfig+0xd1e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f04f 0100 	mov.w	r1, #0
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cec:	4a23      	ldr	r2, [pc, #140]	; (8008d7c <UART_SetConfig+0x950>)
 8008cee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	f04f 0400 	mov.w	r4, #0
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	4623      	mov	r3, r4
 8008cfc:	f7f7 faf6 	bl	80002ec <__aeabi_uldivmod>
 8008d00:	4603      	mov	r3, r0
 8008d02:	460c      	mov	r4, r1
 8008d04:	4619      	mov	r1, r3
 8008d06:	4622      	mov	r2, r4
 8008d08:	f04f 0300 	mov.w	r3, #0
 8008d0c:	f04f 0400 	mov.w	r4, #0
 8008d10:	0214      	lsls	r4, r2, #8
 8008d12:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008d16:	020b      	lsls	r3, r1, #8
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	6852      	ldr	r2, [r2, #4]
 8008d1c:	0852      	lsrs	r2, r2, #1
 8008d1e:	4611      	mov	r1, r2
 8008d20:	f04f 0200 	mov.w	r2, #0
 8008d24:	eb13 0b01 	adds.w	fp, r3, r1
 8008d28:	eb44 0c02 	adc.w	ip, r4, r2
 8008d2c:	4658      	mov	r0, fp
 8008d2e:	4661      	mov	r1, ip
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	f04f 0400 	mov.w	r4, #0
 8008d38:	461a      	mov	r2, r3
 8008d3a:	4623      	mov	r3, r4
 8008d3c:	f7f7 fad6 	bl	80002ec <__aeabi_uldivmod>
 8008d40:	4603      	mov	r3, r0
 8008d42:	460c      	mov	r4, r1
 8008d44:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d4c:	d308      	bcc.n	8008d60 <UART_SetConfig+0x934>
 8008d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d54:	d204      	bcs.n	8008d60 <UART_SetConfig+0x934>
        {
          huart->Instance->BRR = usartdiv;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d5c:	60da      	str	r2, [r3, #12]
 8008d5e:	e1f4      	b.n	800914a <UART_SetConfig+0xd1e>
        }
        else
        {
          ret = HAL_ERROR;
 8008d60:	2301      	movs	r3, #1
 8008d62:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008d66:	e1f0      	b.n	800914a <UART_SetConfig+0xd1e>
 8008d68:	40011c00 	.word	0x40011c00
 8008d6c:	58024400 	.word	0x58024400
 8008d70:	58000c00 	.word	0x58000c00
 8008d74:	03d09000 	.word	0x03d09000
 8008d78:	003d0900 	.word	0x003d0900
 8008d7c:	08009738 	.word	0x08009738
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	69db      	ldr	r3, [r3, #28]
 8008d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d88:	f040 80f8 	bne.w	8008f7c <UART_SetConfig+0xb50>
  {
    switch (clocksource)
 8008d8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008d90:	2b40      	cmp	r3, #64	; 0x40
 8008d92:	f200 80b7 	bhi.w	8008f04 <UART_SetConfig+0xad8>
 8008d96:	a201      	add	r2, pc, #4	; (adr r2, 8008d9c <UART_SetConfig+0x970>)
 8008d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d9c:	08008ea1 	.word	0x08008ea1
 8008da0:	08008ea9 	.word	0x08008ea9
 8008da4:	08008f05 	.word	0x08008f05
 8008da8:	08008f05 	.word	0x08008f05
 8008dac:	08008eb1 	.word	0x08008eb1
 8008db0:	08008f05 	.word	0x08008f05
 8008db4:	08008f05 	.word	0x08008f05
 8008db8:	08008f05 	.word	0x08008f05
 8008dbc:	08008ec1 	.word	0x08008ec1
 8008dc0:	08008f05 	.word	0x08008f05
 8008dc4:	08008f05 	.word	0x08008f05
 8008dc8:	08008f05 	.word	0x08008f05
 8008dcc:	08008f05 	.word	0x08008f05
 8008dd0:	08008f05 	.word	0x08008f05
 8008dd4:	08008f05 	.word	0x08008f05
 8008dd8:	08008f05 	.word	0x08008f05
 8008ddc:	08008ed1 	.word	0x08008ed1
 8008de0:	08008f05 	.word	0x08008f05
 8008de4:	08008f05 	.word	0x08008f05
 8008de8:	08008f05 	.word	0x08008f05
 8008dec:	08008f05 	.word	0x08008f05
 8008df0:	08008f05 	.word	0x08008f05
 8008df4:	08008f05 	.word	0x08008f05
 8008df8:	08008f05 	.word	0x08008f05
 8008dfc:	08008f05 	.word	0x08008f05
 8008e00:	08008f05 	.word	0x08008f05
 8008e04:	08008f05 	.word	0x08008f05
 8008e08:	08008f05 	.word	0x08008f05
 8008e0c:	08008f05 	.word	0x08008f05
 8008e10:	08008f05 	.word	0x08008f05
 8008e14:	08008f05 	.word	0x08008f05
 8008e18:	08008f05 	.word	0x08008f05
 8008e1c:	08008ef7 	.word	0x08008ef7
 8008e20:	08008f05 	.word	0x08008f05
 8008e24:	08008f05 	.word	0x08008f05
 8008e28:	08008f05 	.word	0x08008f05
 8008e2c:	08008f05 	.word	0x08008f05
 8008e30:	08008f05 	.word	0x08008f05
 8008e34:	08008f05 	.word	0x08008f05
 8008e38:	08008f05 	.word	0x08008f05
 8008e3c:	08008f05 	.word	0x08008f05
 8008e40:	08008f05 	.word	0x08008f05
 8008e44:	08008f05 	.word	0x08008f05
 8008e48:	08008f05 	.word	0x08008f05
 8008e4c:	08008f05 	.word	0x08008f05
 8008e50:	08008f05 	.word	0x08008f05
 8008e54:	08008f05 	.word	0x08008f05
 8008e58:	08008f05 	.word	0x08008f05
 8008e5c:	08008f05 	.word	0x08008f05
 8008e60:	08008f05 	.word	0x08008f05
 8008e64:	08008f05 	.word	0x08008f05
 8008e68:	08008f05 	.word	0x08008f05
 8008e6c:	08008f05 	.word	0x08008f05
 8008e70:	08008f05 	.word	0x08008f05
 8008e74:	08008f05 	.word	0x08008f05
 8008e78:	08008f05 	.word	0x08008f05
 8008e7c:	08008f05 	.word	0x08008f05
 8008e80:	08008f05 	.word	0x08008f05
 8008e84:	08008f05 	.word	0x08008f05
 8008e88:	08008f05 	.word	0x08008f05
 8008e8c:	08008f05 	.word	0x08008f05
 8008e90:	08008f05 	.word	0x08008f05
 8008e94:	08008f05 	.word	0x08008f05
 8008e98:	08008f05 	.word	0x08008f05
 8008e9c:	08008efd 	.word	0x08008efd
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ea0:	f7fc fbb0 	bl	8005604 <HAL_RCC_GetPCLK1Freq>
 8008ea4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008ea6:	e033      	b.n	8008f10 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ea8:	f7fc fbc2 	bl	8005630 <HAL_RCC_GetPCLK2Freq>
 8008eac:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008eae:	e02f      	b.n	8008f10 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eb0:	f107 0314 	add.w	r3, r7, #20
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7fd fcc1 	bl	800683c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008eba:	69bb      	ldr	r3, [r7, #24]
 8008ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ebe:	e027      	b.n	8008f10 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ec0:	f107 0308 	add.w	r3, r7, #8
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f7fd fe05 	bl	8006ad4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ece:	e01f      	b.n	8008f10 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ed0:	4ba8      	ldr	r3, [pc, #672]	; (8009174 <UART_SetConfig+0xd48>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f003 0320 	and.w	r3, r3, #32
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d009      	beq.n	8008ef0 <UART_SetConfig+0xac4>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008edc:	4ba5      	ldr	r3, [pc, #660]	; (8009174 <UART_SetConfig+0xd48>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	08db      	lsrs	r3, r3, #3
 8008ee2:	f003 0303 	and.w	r3, r3, #3
 8008ee6:	4aa4      	ldr	r2, [pc, #656]	; (8009178 <UART_SetConfig+0xd4c>)
 8008ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8008eec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008eee:	e00f      	b.n	8008f10 <UART_SetConfig+0xae4>
          pclk = (uint32_t) HSI_VALUE;
 8008ef0:	4ba1      	ldr	r3, [pc, #644]	; (8009178 <UART_SetConfig+0xd4c>)
 8008ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ef4:	e00c      	b.n	8008f10 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008ef6:	4ba1      	ldr	r3, [pc, #644]	; (800917c <UART_SetConfig+0xd50>)
 8008ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008efa:	e009      	b.n	8008f10 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008efc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f02:	e005      	b.n	8008f10 <UART_SetConfig+0xae4>
      default:
        pclk = 0U;
 8008f04:	2300      	movs	r3, #0
 8008f06:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008f0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	f000 8119 	beq.w	800914a <UART_SetConfig+0xd1e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1c:	4a98      	ldr	r2, [pc, #608]	; (8009180 <UART_SetConfig+0xd54>)
 8008f1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f22:	461a      	mov	r2, r3
 8008f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f26:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f2a:	005a      	lsls	r2, r3, #1
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	085b      	lsrs	r3, r3, #1
 8008f32:	441a      	add	r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f42:	2b0f      	cmp	r3, #15
 8008f44:	d916      	bls.n	8008f74 <UART_SetConfig+0xb48>
 8008f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f4c:	d212      	bcs.n	8008f74 <UART_SetConfig+0xb48>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	f023 030f 	bic.w	r3, r3, #15
 8008f56:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5a:	085b      	lsrs	r3, r3, #1
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	f003 0307 	and.w	r3, r3, #7
 8008f62:	b29a      	uxth	r2, r3
 8008f64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f66:	4313      	orrs	r3, r2
 8008f68:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008f70:	60da      	str	r2, [r3, #12]
 8008f72:	e0ea      	b.n	800914a <UART_SetConfig+0xd1e>
      }
      else
      {
        ret = HAL_ERROR;
 8008f74:	2301      	movs	r3, #1
 8008f76:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008f7a:	e0e6      	b.n	800914a <UART_SetConfig+0xd1e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008f7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008f80:	2b40      	cmp	r3, #64	; 0x40
 8008f82:	f200 80b7 	bhi.w	80090f4 <UART_SetConfig+0xcc8>
 8008f86:	a201      	add	r2, pc, #4	; (adr r2, 8008f8c <UART_SetConfig+0xb60>)
 8008f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f8c:	08009091 	.word	0x08009091
 8008f90:	08009099 	.word	0x08009099
 8008f94:	080090f5 	.word	0x080090f5
 8008f98:	080090f5 	.word	0x080090f5
 8008f9c:	080090a1 	.word	0x080090a1
 8008fa0:	080090f5 	.word	0x080090f5
 8008fa4:	080090f5 	.word	0x080090f5
 8008fa8:	080090f5 	.word	0x080090f5
 8008fac:	080090b1 	.word	0x080090b1
 8008fb0:	080090f5 	.word	0x080090f5
 8008fb4:	080090f5 	.word	0x080090f5
 8008fb8:	080090f5 	.word	0x080090f5
 8008fbc:	080090f5 	.word	0x080090f5
 8008fc0:	080090f5 	.word	0x080090f5
 8008fc4:	080090f5 	.word	0x080090f5
 8008fc8:	080090f5 	.word	0x080090f5
 8008fcc:	080090c1 	.word	0x080090c1
 8008fd0:	080090f5 	.word	0x080090f5
 8008fd4:	080090f5 	.word	0x080090f5
 8008fd8:	080090f5 	.word	0x080090f5
 8008fdc:	080090f5 	.word	0x080090f5
 8008fe0:	080090f5 	.word	0x080090f5
 8008fe4:	080090f5 	.word	0x080090f5
 8008fe8:	080090f5 	.word	0x080090f5
 8008fec:	080090f5 	.word	0x080090f5
 8008ff0:	080090f5 	.word	0x080090f5
 8008ff4:	080090f5 	.word	0x080090f5
 8008ff8:	080090f5 	.word	0x080090f5
 8008ffc:	080090f5 	.word	0x080090f5
 8009000:	080090f5 	.word	0x080090f5
 8009004:	080090f5 	.word	0x080090f5
 8009008:	080090f5 	.word	0x080090f5
 800900c:	080090e7 	.word	0x080090e7
 8009010:	080090f5 	.word	0x080090f5
 8009014:	080090f5 	.word	0x080090f5
 8009018:	080090f5 	.word	0x080090f5
 800901c:	080090f5 	.word	0x080090f5
 8009020:	080090f5 	.word	0x080090f5
 8009024:	080090f5 	.word	0x080090f5
 8009028:	080090f5 	.word	0x080090f5
 800902c:	080090f5 	.word	0x080090f5
 8009030:	080090f5 	.word	0x080090f5
 8009034:	080090f5 	.word	0x080090f5
 8009038:	080090f5 	.word	0x080090f5
 800903c:	080090f5 	.word	0x080090f5
 8009040:	080090f5 	.word	0x080090f5
 8009044:	080090f5 	.word	0x080090f5
 8009048:	080090f5 	.word	0x080090f5
 800904c:	080090f5 	.word	0x080090f5
 8009050:	080090f5 	.word	0x080090f5
 8009054:	080090f5 	.word	0x080090f5
 8009058:	080090f5 	.word	0x080090f5
 800905c:	080090f5 	.word	0x080090f5
 8009060:	080090f5 	.word	0x080090f5
 8009064:	080090f5 	.word	0x080090f5
 8009068:	080090f5 	.word	0x080090f5
 800906c:	080090f5 	.word	0x080090f5
 8009070:	080090f5 	.word	0x080090f5
 8009074:	080090f5 	.word	0x080090f5
 8009078:	080090f5 	.word	0x080090f5
 800907c:	080090f5 	.word	0x080090f5
 8009080:	080090f5 	.word	0x080090f5
 8009084:	080090f5 	.word	0x080090f5
 8009088:	080090f5 	.word	0x080090f5
 800908c:	080090ed 	.word	0x080090ed
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009090:	f7fc fab8 	bl	8005604 <HAL_RCC_GetPCLK1Freq>
 8009094:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009096:	e033      	b.n	8009100 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009098:	f7fc faca 	bl	8005630 <HAL_RCC_GetPCLK2Freq>
 800909c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800909e:	e02f      	b.n	8009100 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090a0:	f107 0314 	add.w	r3, r7, #20
 80090a4:	4618      	mov	r0, r3
 80090a6:	f7fd fbc9 	bl	800683c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80090ae:	e027      	b.n	8009100 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090b0:	f107 0308 	add.w	r3, r7, #8
 80090b4:	4618      	mov	r0, r3
 80090b6:	f7fd fd0d 	bl	8006ad4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80090be:	e01f      	b.n	8009100 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090c0:	4b2c      	ldr	r3, [pc, #176]	; (8009174 <UART_SetConfig+0xd48>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f003 0320 	and.w	r3, r3, #32
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d009      	beq.n	80090e0 <UART_SetConfig+0xcb4>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80090cc:	4b29      	ldr	r3, [pc, #164]	; (8009174 <UART_SetConfig+0xd48>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	08db      	lsrs	r3, r3, #3
 80090d2:	f003 0303 	and.w	r3, r3, #3
 80090d6:	4a28      	ldr	r2, [pc, #160]	; (8009178 <UART_SetConfig+0xd4c>)
 80090d8:	fa22 f303 	lsr.w	r3, r2, r3
 80090dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80090de:	e00f      	b.n	8009100 <UART_SetConfig+0xcd4>
          pclk = (uint32_t) HSI_VALUE;
 80090e0:	4b25      	ldr	r3, [pc, #148]	; (8009178 <UART_SetConfig+0xd4c>)
 80090e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80090e4:	e00c      	b.n	8009100 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80090e6:	4b25      	ldr	r3, [pc, #148]	; (800917c <UART_SetConfig+0xd50>)
 80090e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80090ea:	e009      	b.n	8009100 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80090f2:	e005      	b.n	8009100 <UART_SetConfig+0xcd4>
      default:
        pclk = 0U;
 80090f4:	2300      	movs	r3, #0
 80090f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80090f8:	2301      	movs	r3, #1
 80090fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80090fe:	bf00      	nop
    }

    if (pclk != 0U)
 8009100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009102:	2b00      	cmp	r3, #0
 8009104:	d021      	beq.n	800914a <UART_SetConfig+0xd1e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910a:	4a1d      	ldr	r2, [pc, #116]	; (8009180 <UART_SetConfig+0xd54>)
 800910c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009110:	461a      	mov	r2, r3
 8009112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009114:	fbb3 f2f2 	udiv	r2, r3, r2
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	085b      	lsrs	r3, r3, #1
 800911e:	441a      	add	r2, r3
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	fbb2 f3f3 	udiv	r3, r2, r3
 8009128:	b29b      	uxth	r3, r3
 800912a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800912c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912e:	2b0f      	cmp	r3, #15
 8009130:	d908      	bls.n	8009144 <UART_SetConfig+0xd18>
 8009132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009138:	d204      	bcs.n	8009144 <UART_SetConfig+0xd18>
      {
        huart->Instance->BRR = usartdiv;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009140:	60da      	str	r2, [r3, #12]
 8009142:	e002      	b.n	800914a <UART_SetConfig+0xd1e>
      }
      else
      {
        ret = HAL_ERROR;
 8009144:	2301      	movs	r3, #1
 8009146:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2201      	movs	r2, #1
 800914e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2201      	movs	r2, #1
 8009156:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009166:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800916a:	4618      	mov	r0, r3
 800916c:	3738      	adds	r7, #56	; 0x38
 800916e:	46bd      	mov	sp, r7
 8009170:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8009174:	58024400 	.word	0x58024400
 8009178:	03d09000 	.word	0x03d09000
 800917c:	003d0900 	.word	0x003d0900
 8009180:	08009738 	.word	0x08009738

08009184 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009190:	f003 0301 	and.w	r3, r3, #1
 8009194:	2b00      	cmp	r3, #0
 8009196:	d00a      	beq.n	80091ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	430a      	orrs	r2, r1
 80091ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091b2:	f003 0302 	and.w	r3, r3, #2
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d00a      	beq.n	80091d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	430a      	orrs	r2, r1
 80091ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091d4:	f003 0304 	and.w	r3, r3, #4
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d00a      	beq.n	80091f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	430a      	orrs	r2, r1
 80091f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f6:	f003 0308 	and.w	r3, r3, #8
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d00a      	beq.n	8009214 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	430a      	orrs	r2, r1
 8009212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009218:	f003 0310 	and.w	r3, r3, #16
 800921c:	2b00      	cmp	r3, #0
 800921e:	d00a      	beq.n	8009236 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	430a      	orrs	r2, r1
 8009234:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800923a:	f003 0320 	and.w	r3, r3, #32
 800923e:	2b00      	cmp	r3, #0
 8009240:	d00a      	beq.n	8009258 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	430a      	orrs	r2, r1
 8009256:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800925c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009260:	2b00      	cmp	r3, #0
 8009262:	d01a      	beq.n	800929a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	430a      	orrs	r2, r1
 8009278:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800927e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009282:	d10a      	bne.n	800929a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	430a      	orrs	r2, r1
 8009298:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800929e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d00a      	beq.n	80092bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	430a      	orrs	r2, r1
 80092ba:	605a      	str	r2, [r3, #4]
  }
}
 80092bc:	bf00      	nop
 80092be:	370c      	adds	r7, #12
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b086      	sub	sp, #24
 80092cc:	af02      	add	r7, sp, #8
 80092ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80092d8:	f7f8 f8fa 	bl	80014d0 <HAL_GetTick>
 80092dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f003 0308 	and.w	r3, r3, #8
 80092e8:	2b08      	cmp	r3, #8
 80092ea:	d10e      	bne.n	800930a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80092f0:	9300      	str	r3, [sp, #0]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2200      	movs	r2, #0
 80092f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 f82c 	bl	8009358 <UART_WaitOnFlagUntilTimeout>
 8009300:	4603      	mov	r3, r0
 8009302:	2b00      	cmp	r3, #0
 8009304:	d001      	beq.n	800930a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009306:	2303      	movs	r3, #3
 8009308:	e022      	b.n	8009350 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f003 0304 	and.w	r3, r3, #4
 8009314:	2b04      	cmp	r3, #4
 8009316:	d10e      	bne.n	8009336 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009318:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800931c:	9300      	str	r3, [sp, #0]
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2200      	movs	r2, #0
 8009322:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 f816 	bl	8009358 <UART_WaitOnFlagUntilTimeout>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d001      	beq.n	8009336 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009332:	2303      	movs	r3, #3
 8009334:	e00c      	b.n	8009350 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2220      	movs	r2, #32
 800933a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2220      	movs	r2, #32
 8009342:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800934e:	2300      	movs	r3, #0
}
 8009350:	4618      	mov	r0, r3
 8009352:	3710      	adds	r7, #16
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	603b      	str	r3, [r7, #0]
 8009364:	4613      	mov	r3, r2
 8009366:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009368:	e062      	b.n	8009430 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009370:	d05e      	beq.n	8009430 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009372:	f7f8 f8ad 	bl	80014d0 <HAL_GetTick>
 8009376:	4602      	mov	r2, r0
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	1ad3      	subs	r3, r2, r3
 800937c:	69ba      	ldr	r2, [r7, #24]
 800937e:	429a      	cmp	r2, r3
 8009380:	d302      	bcc.n	8009388 <UART_WaitOnFlagUntilTimeout+0x30>
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d11d      	bne.n	80093c4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009396:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	689a      	ldr	r2, [r3, #8]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f022 0201 	bic.w	r2, r2, #1
 80093a6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2220      	movs	r2, #32
 80093ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2220      	movs	r2, #32
 80093b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80093c0:	2303      	movs	r3, #3
 80093c2:	e045      	b.n	8009450 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f003 0304 	and.w	r3, r3, #4
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d02e      	beq.n	8009430 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	69db      	ldr	r3, [r3, #28]
 80093d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093e0:	d126      	bne.n	8009430 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80093ea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80093fa:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	689a      	ldr	r2, [r3, #8]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f022 0201 	bic.w	r2, r2, #1
 800940a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2220      	movs	r2, #32
 8009410:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2220      	movs	r2, #32
 8009418:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2220      	movs	r2, #32
 8009420:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2200      	movs	r2, #0
 8009428:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800942c:	2303      	movs	r3, #3
 800942e:	e00f      	b.n	8009450 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	69da      	ldr	r2, [r3, #28]
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	4013      	ands	r3, r2
 800943a:	68ba      	ldr	r2, [r7, #8]
 800943c:	429a      	cmp	r2, r3
 800943e:	bf0c      	ite	eq
 8009440:	2301      	moveq	r3, #1
 8009442:	2300      	movne	r3, #0
 8009444:	b2db      	uxtb	r3, r3
 8009446:	461a      	mov	r2, r3
 8009448:	79fb      	ldrb	r3, [r7, #7]
 800944a:	429a      	cmp	r2, r3
 800944c:	d08d      	beq.n	800936a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800944e:	2300      	movs	r3, #0
}
 8009450:	4618      	mov	r0, r3
 8009452:	3710      	adds	r7, #16
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009458:	b480      	push	{r7}
 800945a:	b085      	sub	sp, #20
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009466:	2b01      	cmp	r3, #1
 8009468:	d101      	bne.n	800946e <HAL_UARTEx_DisableFifoMode+0x16>
 800946a:	2302      	movs	r3, #2
 800946c:	e027      	b.n	80094be <HAL_UARTEx_DisableFifoMode+0x66>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2201      	movs	r2, #1
 8009472:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2224      	movs	r2, #36	; 0x24
 800947a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f022 0201 	bic.w	r2, r2, #1
 8009494:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800949c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	68fa      	ldr	r2, [r7, #12]
 80094aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2220      	movs	r2, #32
 80094b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80094bc:	2300      	movs	r3, #0
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3714      	adds	r7, #20
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr

080094ca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b084      	sub	sp, #16
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
 80094d2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d101      	bne.n	80094e2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80094de:	2302      	movs	r3, #2
 80094e0:	e02d      	b.n	800953e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2201      	movs	r2, #1
 80094e6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2224      	movs	r2, #36	; 0x24
 80094ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f022 0201 	bic.w	r2, r2, #1
 8009508:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	683a      	ldr	r2, [r7, #0]
 800951a:	430a      	orrs	r2, r1
 800951c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 f850 	bl	80095c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	68fa      	ldr	r2, [r7, #12]
 800952a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2220      	movs	r2, #32
 8009530:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2200      	movs	r2, #0
 8009538:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	3710      	adds	r7, #16
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009546:	b580      	push	{r7, lr}
 8009548:	b084      	sub	sp, #16
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
 800954e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009556:	2b01      	cmp	r3, #1
 8009558:	d101      	bne.n	800955e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800955a:	2302      	movs	r3, #2
 800955c:	e02d      	b.n	80095ba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2201      	movs	r2, #1
 8009562:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2224      	movs	r2, #36	; 0x24
 800956a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f022 0201 	bic.w	r2, r2, #1
 8009584:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	683a      	ldr	r2, [r7, #0]
 8009596:	430a      	orrs	r2, r1
 8009598:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 f812 	bl	80095c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	68fa      	ldr	r2, [r7, #12]
 80095a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2220      	movs	r2, #32
 80095ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80095b8:	2300      	movs	r3, #0
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3710      	adds	r7, #16
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
	...

080095c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b089      	sub	sp, #36	; 0x24
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80095cc:	4a2f      	ldr	r2, [pc, #188]	; (800968c <UARTEx_SetNbDataToProcess+0xc8>)
 80095ce:	f107 0314 	add.w	r3, r7, #20
 80095d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80095d6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80095da:	4a2d      	ldr	r2, [pc, #180]	; (8009690 <UARTEx_SetNbDataToProcess+0xcc>)
 80095dc:	f107 030c 	add.w	r3, r7, #12
 80095e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80095e4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d108      	bne.n	8009602 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2201      	movs	r2, #1
 80095f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2201      	movs	r2, #1
 80095fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009600:	e03d      	b.n	800967e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009602:	2310      	movs	r3, #16
 8009604:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009606:	2310      	movs	r3, #16
 8009608:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	0e5b      	lsrs	r3, r3, #25
 8009612:	b2db      	uxtb	r3, r3
 8009614:	f003 0307 	and.w	r3, r3, #7
 8009618:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	689b      	ldr	r3, [r3, #8]
 8009620:	0f5b      	lsrs	r3, r3, #29
 8009622:	b2db      	uxtb	r3, r3
 8009624:	f003 0307 	and.w	r3, r3, #7
 8009628:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800962a:	7fbb      	ldrb	r3, [r7, #30]
 800962c:	7f3a      	ldrb	r2, [r7, #28]
 800962e:	f107 0120 	add.w	r1, r7, #32
 8009632:	440a      	add	r2, r1
 8009634:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009638:	fb02 f303 	mul.w	r3, r2, r3
 800963c:	7f3a      	ldrb	r2, [r7, #28]
 800963e:	f107 0120 	add.w	r1, r7, #32
 8009642:	440a      	add	r2, r1
 8009644:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009648:	fb93 f3f2 	sdiv	r3, r3, r2
 800964c:	b29a      	uxth	r2, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009654:	7ffb      	ldrb	r3, [r7, #31]
 8009656:	7f7a      	ldrb	r2, [r7, #29]
 8009658:	f107 0120 	add.w	r1, r7, #32
 800965c:	440a      	add	r2, r1
 800965e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009662:	fb02 f303 	mul.w	r3, r2, r3
 8009666:	7f7a      	ldrb	r2, [r7, #29]
 8009668:	f107 0120 	add.w	r1, r7, #32
 800966c:	440a      	add	r2, r1
 800966e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009672:	fb93 f3f2 	sdiv	r3, r3, r2
 8009676:	b29a      	uxth	r2, r3
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800967e:	bf00      	nop
 8009680:	3724      	adds	r7, #36	; 0x24
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr
 800968a:	bf00      	nop
 800968c:	08009710 	.word	0x08009710
 8009690:	08009718 	.word	0x08009718

08009694 <__libc_init_array>:
 8009694:	b570      	push	{r4, r5, r6, lr}
 8009696:	4e0d      	ldr	r6, [pc, #52]	; (80096cc <__libc_init_array+0x38>)
 8009698:	4c0d      	ldr	r4, [pc, #52]	; (80096d0 <__libc_init_array+0x3c>)
 800969a:	1ba4      	subs	r4, r4, r6
 800969c:	10a4      	asrs	r4, r4, #2
 800969e:	2500      	movs	r5, #0
 80096a0:	42a5      	cmp	r5, r4
 80096a2:	d109      	bne.n	80096b8 <__libc_init_array+0x24>
 80096a4:	4e0b      	ldr	r6, [pc, #44]	; (80096d4 <__libc_init_array+0x40>)
 80096a6:	4c0c      	ldr	r4, [pc, #48]	; (80096d8 <__libc_init_array+0x44>)
 80096a8:	f000 f820 	bl	80096ec <_init>
 80096ac:	1ba4      	subs	r4, r4, r6
 80096ae:	10a4      	asrs	r4, r4, #2
 80096b0:	2500      	movs	r5, #0
 80096b2:	42a5      	cmp	r5, r4
 80096b4:	d105      	bne.n	80096c2 <__libc_init_array+0x2e>
 80096b6:	bd70      	pop	{r4, r5, r6, pc}
 80096b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80096bc:	4798      	blx	r3
 80096be:	3501      	adds	r5, #1
 80096c0:	e7ee      	b.n	80096a0 <__libc_init_array+0xc>
 80096c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80096c6:	4798      	blx	r3
 80096c8:	3501      	adds	r5, #1
 80096ca:	e7f2      	b.n	80096b2 <__libc_init_array+0x1e>
 80096cc:	08009758 	.word	0x08009758
 80096d0:	08009758 	.word	0x08009758
 80096d4:	08009758 	.word	0x08009758
 80096d8:	0800975c 	.word	0x0800975c

080096dc <memset>:
 80096dc:	4402      	add	r2, r0
 80096de:	4603      	mov	r3, r0
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d100      	bne.n	80096e6 <memset+0xa>
 80096e4:	4770      	bx	lr
 80096e6:	f803 1b01 	strb.w	r1, [r3], #1
 80096ea:	e7f9      	b.n	80096e0 <memset+0x4>

080096ec <_init>:
 80096ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ee:	bf00      	nop
 80096f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096f2:	bc08      	pop	{r3}
 80096f4:	469e      	mov	lr, r3
 80096f6:	4770      	bx	lr

080096f8 <_fini>:
 80096f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096fa:	bf00      	nop
 80096fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096fe:	bc08      	pop	{r3}
 8009700:	469e      	mov	lr, r3
 8009702:	4770      	bx	lr
