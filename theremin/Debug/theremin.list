
theremin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094d0  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800977c  0800977c  0001977c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097bc  080097bc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080097bc  080097bc  000197bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097c4  080097c4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097c4  080097c4  000197c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097c8  080097c8  000197c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  080097cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a60  24000010  080097dc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000a70  080097dc  00020a70  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022048  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033ca  00000000  00000000  00042086  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015d8  00000000  00000000  00045450  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014a0  00000000  00000000  00046a28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003138f  00000000  00000000  00047ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001333f  00000000  00000000  00079257  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00154e8b  00000000  00000000  0008c596  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e1421  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ec4  00000000  00000000  001e149c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08009764 	.word	0x08009764

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08009764 	.word	0x08009764

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b972 	b.w	80005e8 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9e08      	ldr	r6, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	4688      	mov	r8, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d14b      	bne.n	80003c2 <__udivmoddi4+0xa6>
 800032a:	428a      	cmp	r2, r1
 800032c:	4615      	mov	r5, r2
 800032e:	d967      	bls.n	8000400 <__udivmoddi4+0xe4>
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	b14a      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000336:	f1c2 0720 	rsb	r7, r2, #32
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	fa20 f707 	lsr.w	r7, r0, r7
 8000342:	4095      	lsls	r5, r2
 8000344:	ea47 0803 	orr.w	r8, r7, r3
 8000348:	4094      	lsls	r4, r2
 800034a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800034e:	0c23      	lsrs	r3, r4, #16
 8000350:	fbb8 f7fe 	udiv	r7, r8, lr
 8000354:	fa1f fc85 	uxth.w	ip, r5
 8000358:	fb0e 8817 	mls	r8, lr, r7, r8
 800035c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000360:	fb07 f10c 	mul.w	r1, r7, ip
 8000364:	4299      	cmp	r1, r3
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x60>
 8000368:	18eb      	adds	r3, r5, r3
 800036a:	f107 30ff 	add.w	r0, r7, #4294967295
 800036e:	f080 811b 	bcs.w	80005a8 <__udivmoddi4+0x28c>
 8000372:	4299      	cmp	r1, r3
 8000374:	f240 8118 	bls.w	80005a8 <__udivmoddi4+0x28c>
 8000378:	3f02      	subs	r7, #2
 800037a:	442b      	add	r3, r5
 800037c:	1a5b      	subs	r3, r3, r1
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb3 f0fe 	udiv	r0, r3, lr
 8000384:	fb0e 3310 	mls	r3, lr, r0, r3
 8000388:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000390:	45a4      	cmp	ip, r4
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x8c>
 8000394:	192c      	adds	r4, r5, r4
 8000396:	f100 33ff 	add.w	r3, r0, #4294967295
 800039a:	f080 8107 	bcs.w	80005ac <__udivmoddi4+0x290>
 800039e:	45a4      	cmp	ip, r4
 80003a0:	f240 8104 	bls.w	80005ac <__udivmoddi4+0x290>
 80003a4:	3802      	subs	r0, #2
 80003a6:	442c      	add	r4, r5
 80003a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003ac:	eba4 040c 	sub.w	r4, r4, ip
 80003b0:	2700      	movs	r7, #0
 80003b2:	b11e      	cbz	r6, 80003bc <__udivmoddi4+0xa0>
 80003b4:	40d4      	lsrs	r4, r2
 80003b6:	2300      	movs	r3, #0
 80003b8:	e9c6 4300 	strd	r4, r3, [r6]
 80003bc:	4639      	mov	r1, r7
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d909      	bls.n	80003da <__udivmoddi4+0xbe>
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f000 80eb 	beq.w	80005a2 <__udivmoddi4+0x286>
 80003cc:	2700      	movs	r7, #0
 80003ce:	e9c6 0100 	strd	r0, r1, [r6]
 80003d2:	4638      	mov	r0, r7
 80003d4:	4639      	mov	r1, r7
 80003d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003da:	fab3 f783 	clz	r7, r3
 80003de:	2f00      	cmp	r7, #0
 80003e0:	d147      	bne.n	8000472 <__udivmoddi4+0x156>
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xd0>
 80003e6:	4282      	cmp	r2, r0
 80003e8:	f200 80fa 	bhi.w	80005e0 <__udivmoddi4+0x2c4>
 80003ec:	1a84      	subs	r4, r0, r2
 80003ee:	eb61 0303 	sbc.w	r3, r1, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	4698      	mov	r8, r3
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	d0e0      	beq.n	80003bc <__udivmoddi4+0xa0>
 80003fa:	e9c6 4800 	strd	r4, r8, [r6]
 80003fe:	e7dd      	b.n	80003bc <__udivmoddi4+0xa0>
 8000400:	b902      	cbnz	r2, 8000404 <__udivmoddi4+0xe8>
 8000402:	deff      	udf	#255	; 0xff
 8000404:	fab2 f282 	clz	r2, r2
 8000408:	2a00      	cmp	r2, #0
 800040a:	f040 808f 	bne.w	800052c <__udivmoddi4+0x210>
 800040e:	1b49      	subs	r1, r1, r5
 8000410:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000414:	fa1f f885 	uxth.w	r8, r5
 8000418:	2701      	movs	r7, #1
 800041a:	fbb1 fcfe 	udiv	ip, r1, lr
 800041e:	0c23      	lsrs	r3, r4, #16
 8000420:	fb0e 111c 	mls	r1, lr, ip, r1
 8000424:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000428:	fb08 f10c 	mul.w	r1, r8, ip
 800042c:	4299      	cmp	r1, r3
 800042e:	d907      	bls.n	8000440 <__udivmoddi4+0x124>
 8000430:	18eb      	adds	r3, r5, r3
 8000432:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000436:	d202      	bcs.n	800043e <__udivmoddi4+0x122>
 8000438:	4299      	cmp	r1, r3
 800043a:	f200 80cd 	bhi.w	80005d8 <__udivmoddi4+0x2bc>
 800043e:	4684      	mov	ip, r0
 8000440:	1a59      	subs	r1, r3, r1
 8000442:	b2a3      	uxth	r3, r4
 8000444:	fbb1 f0fe 	udiv	r0, r1, lr
 8000448:	fb0e 1410 	mls	r4, lr, r0, r1
 800044c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000450:	fb08 f800 	mul.w	r8, r8, r0
 8000454:	45a0      	cmp	r8, r4
 8000456:	d907      	bls.n	8000468 <__udivmoddi4+0x14c>
 8000458:	192c      	adds	r4, r5, r4
 800045a:	f100 33ff 	add.w	r3, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x14a>
 8000460:	45a0      	cmp	r8, r4
 8000462:	f200 80b6 	bhi.w	80005d2 <__udivmoddi4+0x2b6>
 8000466:	4618      	mov	r0, r3
 8000468:	eba4 0408 	sub.w	r4, r4, r8
 800046c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000470:	e79f      	b.n	80003b2 <__udivmoddi4+0x96>
 8000472:	f1c7 0c20 	rsb	ip, r7, #32
 8000476:	40bb      	lsls	r3, r7
 8000478:	fa22 fe0c 	lsr.w	lr, r2, ip
 800047c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000480:	fa01 f407 	lsl.w	r4, r1, r7
 8000484:	fa20 f50c 	lsr.w	r5, r0, ip
 8000488:	fa21 f30c 	lsr.w	r3, r1, ip
 800048c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000490:	4325      	orrs	r5, r4
 8000492:	fbb3 f9f8 	udiv	r9, r3, r8
 8000496:	0c2c      	lsrs	r4, r5, #16
 8000498:	fb08 3319 	mls	r3, r8, r9, r3
 800049c:	fa1f fa8e 	uxth.w	sl, lr
 80004a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a4:	fb09 f40a 	mul.w	r4, r9, sl
 80004a8:	429c      	cmp	r4, r3
 80004aa:	fa02 f207 	lsl.w	r2, r2, r7
 80004ae:	fa00 f107 	lsl.w	r1, r0, r7
 80004b2:	d90b      	bls.n	80004cc <__udivmoddi4+0x1b0>
 80004b4:	eb1e 0303 	adds.w	r3, lr, r3
 80004b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80004bc:	f080 8087 	bcs.w	80005ce <__udivmoddi4+0x2b2>
 80004c0:	429c      	cmp	r4, r3
 80004c2:	f240 8084 	bls.w	80005ce <__udivmoddi4+0x2b2>
 80004c6:	f1a9 0902 	sub.w	r9, r9, #2
 80004ca:	4473      	add	r3, lr
 80004cc:	1b1b      	subs	r3, r3, r4
 80004ce:	b2ad      	uxth	r5, r5
 80004d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d4:	fb08 3310 	mls	r3, r8, r0, r3
 80004d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e0:	45a2      	cmp	sl, r4
 80004e2:	d908      	bls.n	80004f6 <__udivmoddi4+0x1da>
 80004e4:	eb1e 0404 	adds.w	r4, lr, r4
 80004e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80004ec:	d26b      	bcs.n	80005c6 <__udivmoddi4+0x2aa>
 80004ee:	45a2      	cmp	sl, r4
 80004f0:	d969      	bls.n	80005c6 <__udivmoddi4+0x2aa>
 80004f2:	3802      	subs	r0, #2
 80004f4:	4474      	add	r4, lr
 80004f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fa:	fba0 8902 	umull	r8, r9, r0, r2
 80004fe:	eba4 040a 	sub.w	r4, r4, sl
 8000502:	454c      	cmp	r4, r9
 8000504:	46c2      	mov	sl, r8
 8000506:	464b      	mov	r3, r9
 8000508:	d354      	bcc.n	80005b4 <__udivmoddi4+0x298>
 800050a:	d051      	beq.n	80005b0 <__udivmoddi4+0x294>
 800050c:	2e00      	cmp	r6, #0
 800050e:	d069      	beq.n	80005e4 <__udivmoddi4+0x2c8>
 8000510:	ebb1 050a 	subs.w	r5, r1, sl
 8000514:	eb64 0403 	sbc.w	r4, r4, r3
 8000518:	fa04 fc0c 	lsl.w	ip, r4, ip
 800051c:	40fd      	lsrs	r5, r7
 800051e:	40fc      	lsrs	r4, r7
 8000520:	ea4c 0505 	orr.w	r5, ip, r5
 8000524:	e9c6 5400 	strd	r5, r4, [r6]
 8000528:	2700      	movs	r7, #0
 800052a:	e747      	b.n	80003bc <__udivmoddi4+0xa0>
 800052c:	f1c2 0320 	rsb	r3, r2, #32
 8000530:	fa20 f703 	lsr.w	r7, r0, r3
 8000534:	4095      	lsls	r5, r2
 8000536:	fa01 f002 	lsl.w	r0, r1, r2
 800053a:	fa21 f303 	lsr.w	r3, r1, r3
 800053e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000542:	4338      	orrs	r0, r7
 8000544:	0c01      	lsrs	r1, r0, #16
 8000546:	fbb3 f7fe 	udiv	r7, r3, lr
 800054a:	fa1f f885 	uxth.w	r8, r5
 800054e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb07 f308 	mul.w	r3, r7, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	fa04 f402 	lsl.w	r4, r4, r2
 8000560:	d907      	bls.n	8000572 <__udivmoddi4+0x256>
 8000562:	1869      	adds	r1, r5, r1
 8000564:	f107 3cff 	add.w	ip, r7, #4294967295
 8000568:	d22f      	bcs.n	80005ca <__udivmoddi4+0x2ae>
 800056a:	428b      	cmp	r3, r1
 800056c:	d92d      	bls.n	80005ca <__udivmoddi4+0x2ae>
 800056e:	3f02      	subs	r7, #2
 8000570:	4429      	add	r1, r5
 8000572:	1acb      	subs	r3, r1, r3
 8000574:	b281      	uxth	r1, r0
 8000576:	fbb3 f0fe 	udiv	r0, r3, lr
 800057a:	fb0e 3310 	mls	r3, lr, r0, r3
 800057e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000582:	fb00 f308 	mul.w	r3, r0, r8
 8000586:	428b      	cmp	r3, r1
 8000588:	d907      	bls.n	800059a <__udivmoddi4+0x27e>
 800058a:	1869      	adds	r1, r5, r1
 800058c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000590:	d217      	bcs.n	80005c2 <__udivmoddi4+0x2a6>
 8000592:	428b      	cmp	r3, r1
 8000594:	d915      	bls.n	80005c2 <__udivmoddi4+0x2a6>
 8000596:	3802      	subs	r0, #2
 8000598:	4429      	add	r1, r5
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a0:	e73b      	b.n	800041a <__udivmoddi4+0xfe>
 80005a2:	4637      	mov	r7, r6
 80005a4:	4630      	mov	r0, r6
 80005a6:	e709      	b.n	80003bc <__udivmoddi4+0xa0>
 80005a8:	4607      	mov	r7, r0
 80005aa:	e6e7      	b.n	800037c <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fb      	b.n	80003a8 <__udivmoddi4+0x8c>
 80005b0:	4541      	cmp	r1, r8
 80005b2:	d2ab      	bcs.n	800050c <__udivmoddi4+0x1f0>
 80005b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80005b8:	eb69 020e 	sbc.w	r2, r9, lr
 80005bc:	3801      	subs	r0, #1
 80005be:	4613      	mov	r3, r2
 80005c0:	e7a4      	b.n	800050c <__udivmoddi4+0x1f0>
 80005c2:	4660      	mov	r0, ip
 80005c4:	e7e9      	b.n	800059a <__udivmoddi4+0x27e>
 80005c6:	4618      	mov	r0, r3
 80005c8:	e795      	b.n	80004f6 <__udivmoddi4+0x1da>
 80005ca:	4667      	mov	r7, ip
 80005cc:	e7d1      	b.n	8000572 <__udivmoddi4+0x256>
 80005ce:	4681      	mov	r9, r0
 80005d0:	e77c      	b.n	80004cc <__udivmoddi4+0x1b0>
 80005d2:	3802      	subs	r0, #2
 80005d4:	442c      	add	r4, r5
 80005d6:	e747      	b.n	8000468 <__udivmoddi4+0x14c>
 80005d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80005dc:	442b      	add	r3, r5
 80005de:	e72f      	b.n	8000440 <__udivmoddi4+0x124>
 80005e0:	4638      	mov	r0, r7
 80005e2:	e708      	b.n	80003f6 <__udivmoddi4+0xda>
 80005e4:	4637      	mov	r7, r6
 80005e6:	e6e9      	b.n	80003bc <__udivmoddi4+0xa0>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fe1f 	bl	8001234 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f82d 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 fa67 	bl	8000acc <MX_GPIO_Init>
  MX_DMA_Init();
 80005fe:	f000 fa2d 	bl	8000a5c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000602:	f000 f9d7 	bl	80009b4 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000606:	f000 fa21 	bl	8000a4c <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 800060a:	f000 f8f3 	bl	80007f4 <MX_ADC1_Init>
  MX_DAC1_Init();
 800060e:	f000 f969 	bl	80008e4 <MX_DAC1_Init>
  MX_TIM6_Init();
 8000612:	f000 f999 	bl	8000948 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_SIZE);
 8000616:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800061a:	490a      	ldr	r1, [pc, #40]	; (8000644 <main+0x58>)
 800061c:	480a      	ldr	r0, [pc, #40]	; (8000648 <main+0x5c>)
 800061e:	f001 f9ff 	bl	8001a20 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start(&htim6);
 8000622:	480a      	ldr	r0, [pc, #40]	; (800064c <main+0x60>)
 8000624:	f007 fd9e 	bl	8008164 <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000628:	2100      	movs	r1, #0
 800062a:	4809      	ldr	r0, [pc, #36]	; (8000650 <main+0x64>)
 800062c:	f002 f915 	bl	800285a <HAL_DAC_Start>
//  HAL_DACEx_TriangleWaveGenerate(&hdac1, DAC_CHANNEL_1, 4095);
//  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 4095);
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)adc_buf, ADC_BUF_SIZE, DAC_ALIGN_12B_R);
 8000630:	2300      	movs	r3, #0
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000638:	4a02      	ldr	r2, [pc, #8]	; (8000644 <main+0x58>)
 800063a:	2100      	movs	r1, #0
 800063c:	4804      	ldr	r0, [pc, #16]	; (8000650 <main+0x64>)
 800063e:	f002 f95f 	bl	8002900 <HAL_DAC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000642:	e7fe      	b.n	8000642 <main+0x56>
 8000644:	2400026c 	.word	0x2400026c
 8000648:	24000144 	.word	0x24000144
 800064c:	24000220 	.word	0x24000220
 8000650:	2400002c 	.word	0x2400002c

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b0ca      	sub	sp, #296	; 0x128
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800065e:	224c      	movs	r2, #76	; 0x4c
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f009 f876 	bl	8009754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800066c:	2220      	movs	r2, #32
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f009 f86f 	bl	8009754 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	4618      	mov	r0, r3
 800067a:	23b8      	movs	r3, #184	; 0xb8
 800067c:	461a      	mov	r2, r3
 800067e:	2100      	movs	r1, #0
 8000680:	f009 f868 	bl	8009754 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000684:	2004      	movs	r0, #4
 8000686:	f004 ff17 	bl	80054b8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800068a:	463b      	mov	r3, r7
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	4b55      	ldr	r3, [pc, #340]	; (80007e8 <SystemClock_Config+0x194>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	4a54      	ldr	r2, [pc, #336]	; (80007e8 <SystemClock_Config+0x194>)
 8000696:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800069a:	6193      	str	r3, [r2, #24]
 800069c:	4b52      	ldr	r3, [pc, #328]	; (80007e8 <SystemClock_Config+0x194>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80006a4:	463b      	mov	r3, r7
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	463b      	mov	r3, r7
 80006aa:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006ac:	bf00      	nop
 80006ae:	4b4e      	ldr	r3, [pc, #312]	; (80007e8 <SystemClock_Config+0x194>)
 80006b0:	699b      	ldr	r3, [r3, #24]
 80006b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006ba:	d1f8      	bne.n	80006ae <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80006bc:	4b4b      	ldr	r3, [pc, #300]	; (80007ec <SystemClock_Config+0x198>)
 80006be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006c0:	f023 0303 	bic.w	r3, r3, #3
 80006c4:	4a49      	ldr	r2, [pc, #292]	; (80007ec <SystemClock_Config+0x198>)
 80006c6:	f043 0302 	orr.w	r3, r3, #2
 80006ca:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 80006cc:	2329      	movs	r3, #41	; 0x29
 80006ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006d2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006da:	2301      	movs	r3, #1
 80006dc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006e0:	2301      	movs	r3, #1
 80006e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e6:	2302      	movs	r3, #2
 80006e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ec:	2302      	movs	r3, #2
 80006ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006f2:	2301      	movs	r3, #1
 80006f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLN = 24;
 80006f8:	2318      	movs	r3, #24
 80006fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006fe:	2302      	movs	r3, #2
 8000700:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000704:	2304      	movs	r3, #4
 8000706:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLR = 2;
 800070a:	2302      	movs	r3, #2
 800070c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000710:	230c      	movs	r3, #12
 8000712:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000716:	2300      	movs	r3, #0
 8000718:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000722:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000726:	4618      	mov	r0, r3
 8000728:	f004 ff20 	bl	800556c <HAL_RCC_OscConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000732:	f000 fb15 	bl	8000d60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000736:	233f      	movs	r3, #63	; 0x3f
 8000738:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073c:	2303      	movs	r3, #3
 800073e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000766:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800076a:	2102      	movs	r1, #2
 800076c:	4618      	mov	r0, r3
 800076e:	f005 fae5 	bl	8005d3c <HAL_RCC_ClockConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0x128>
  {
    Error_Handler();
 8000778:	f000 faf2 	bl	8000d60 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_ADC
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	4a1c      	ldr	r2, [pc, #112]	; (80007f0 <SystemClock_Config+0x19c>)
 8000780:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2201      	movs	r2, #1
 8000786:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	2210      	movs	r2, #16
 800078c:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	2202      	movs	r2, #2
 8000792:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	2202      	movs	r2, #2
 8000798:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2202      	movs	r2, #2
 800079e:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	22c0      	movs	r2, #192	; 0xc0
 80007a4:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	2200      	movs	r2, #0
 80007aa:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2200      	movs	r2, #0
 80007b0:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2200      	movs	r2, #0
 80007b6:	67da      	str	r2, [r3, #124]	; 0x7c
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80007be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	2200      	movs	r2, #0
 80007c6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	4618      	mov	r0, r3
 80007ce:	f005 fe39 	bl	8006444 <HAL_RCCEx_PeriphCLKConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x188>
  {
    Error_Handler();
 80007d8:	f000 fac2 	bl	8000d60 <Error_Handler>
  }
}
 80007dc:	bf00      	nop
 80007de:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	58024800 	.word	0x58024800
 80007ec:	58024400 	.word	0x58024400
 80007f0:	000c0002 	.word	0x000c0002

080007f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	; 0x28
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000806:	463b      	mov	r3, r7
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
 8000814:	615a      	str	r2, [r3, #20]
 8000816:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000818:	4b2f      	ldr	r3, [pc, #188]	; (80008d8 <MX_ADC1_Init+0xe4>)
 800081a:	4a30      	ldr	r2, [pc, #192]	; (80008dc <MX_ADC1_Init+0xe8>)
 800081c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800081e:	4b2e      	ldr	r3, [pc, #184]	; (80008d8 <MX_ADC1_Init+0xe4>)
 8000820:	2200      	movs	r2, #0
 8000822:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000824:	4b2c      	ldr	r3, [pc, #176]	; (80008d8 <MX_ADC1_Init+0xe4>)
 8000826:	2208      	movs	r2, #8
 8000828:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800082a:	4b2b      	ldr	r3, [pc, #172]	; (80008d8 <MX_ADC1_Init+0xe4>)
 800082c:	2200      	movs	r2, #0
 800082e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000830:	4b29      	ldr	r3, [pc, #164]	; (80008d8 <MX_ADC1_Init+0xe4>)
 8000832:	2204      	movs	r2, #4
 8000834:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000836:	4b28      	ldr	r3, [pc, #160]	; (80008d8 <MX_ADC1_Init+0xe4>)
 8000838:	2200      	movs	r2, #0
 800083a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800083c:	4b26      	ldr	r3, [pc, #152]	; (80008d8 <MX_ADC1_Init+0xe4>)
 800083e:	2201      	movs	r2, #1
 8000840:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000842:	4b25      	ldr	r3, [pc, #148]	; (80008d8 <MX_ADC1_Init+0xe4>)
 8000844:	2201      	movs	r2, #1
 8000846:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000848:	4b23      	ldr	r3, [pc, #140]	; (80008d8 <MX_ADC1_Init+0xe4>)
 800084a:	2200      	movs	r2, #0
 800084c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800084e:	4b22      	ldr	r3, [pc, #136]	; (80008d8 <MX_ADC1_Init+0xe4>)
 8000850:	2200      	movs	r2, #0
 8000852:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000854:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <MX_ADC1_Init+0xe4>)
 8000856:	2200      	movs	r2, #0
 8000858:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800085a:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <MX_ADC1_Init+0xe4>)
 800085c:	2203      	movs	r2, #3
 800085e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000860:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <MX_ADC1_Init+0xe4>)
 8000862:	2200      	movs	r2, #0
 8000864:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000866:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <MX_ADC1_Init+0xe4>)
 8000868:	2200      	movs	r2, #0
 800086a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800086c:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <MX_ADC1_Init+0xe4>)
 800086e:	2200      	movs	r2, #0
 8000870:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000874:	4818      	ldr	r0, [pc, #96]	; (80008d8 <MX_ADC1_Init+0xe4>)
 8000876:	f000 ff79 	bl	800176c <HAL_ADC_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000880:	f000 fa6e 	bl	8000d60 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4812      	ldr	r0, [pc, #72]	; (80008d8 <MX_ADC1_Init+0xe4>)
 8000890:	f001 fe1a 	bl	80024c8 <HAL_ADCEx_MultiModeConfigChannel>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800089a:	f000 fa61 	bl	8000d60 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <MX_ADC1_Init+0xec>)
 80008a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008a2:	2306      	movs	r3, #6
 80008a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008aa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008ae:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008b0:	2304      	movs	r3, #4
 80008b2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008b8:	2300      	movs	r3, #0
 80008ba:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008bc:	463b      	mov	r3, r7
 80008be:	4619      	mov	r1, r3
 80008c0:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_ADC1_Init+0xe4>)
 80008c2:	f001 f96b 	bl	8001b9c <HAL_ADC_ConfigChannel>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80008cc:	f000 fa48 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	3728      	adds	r7, #40	; 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	24000144 	.word	0x24000144
 80008dc:	40022000 	.word	0x40022000
 80008e0:	14f00020 	.word	0x14f00020

080008e4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	; 0x28
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	2224      	movs	r2, #36	; 0x24
 80008ee:	2100      	movs	r1, #0
 80008f0:	4618      	mov	r0, r3
 80008f2:	f008 ff2f 	bl	8009754 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80008f6:	4b12      	ldr	r3, [pc, #72]	; (8000940 <MX_DAC1_Init+0x5c>)
 80008f8:	4a12      	ldr	r2, [pc, #72]	; (8000944 <MX_DAC1_Init+0x60>)
 80008fa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80008fc:	4810      	ldr	r0, [pc, #64]	; (8000940 <MX_DAC1_Init+0x5c>)
 80008fe:	f001 ff8a 	bl	8002816 <HAL_DAC_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000908:	f000 fa2a 	bl	8000d60 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800090c:	2300      	movs	r3, #0
 800090e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000910:	2316      	movs	r3, #22
 8000912:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000918:	2302      	movs	r3, #2
 800091a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	2200      	movs	r2, #0
 8000924:	4619      	mov	r1, r3
 8000926:	4806      	ldr	r0, [pc, #24]	; (8000940 <MX_DAC1_Init+0x5c>)
 8000928:	f002 f8c6 	bl	8002ab8 <HAL_DAC_ConfigChannel>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000932:	f000 fa15 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	3728      	adds	r7, #40	; 0x28
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	2400002c 	.word	0x2400002c
 8000944:	40007400 	.word	0x40007400

08000948 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000958:	4b14      	ldr	r3, [pc, #80]	; (80009ac <MX_TIM6_Init+0x64>)
 800095a:	4a15      	ldr	r2, [pc, #84]	; (80009b0 <MX_TIM6_Init+0x68>)
 800095c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800095e:	4b13      	ldr	r3, [pc, #76]	; (80009ac <MX_TIM6_Init+0x64>)
 8000960:	2200      	movs	r2, #0
 8000962:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000964:	4b11      	ldr	r3, [pc, #68]	; (80009ac <MX_TIM6_Init+0x64>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 23;
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <MX_TIM6_Init+0x64>)
 800096c:	2217      	movs	r2, #23
 800096e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <MX_TIM6_Init+0x64>)
 8000972:	2280      	movs	r2, #128	; 0x80
 8000974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000976:	480d      	ldr	r0, [pc, #52]	; (80009ac <MX_TIM6_Init+0x64>)
 8000978:	f007 fb9c 	bl	80080b4 <HAL_TIM_Base_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000982:	f000 f9ed 	bl	8000d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000986:	2320      	movs	r3, #32
 8000988:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	4619      	mov	r1, r3
 8000992:	4806      	ldr	r0, [pc, #24]	; (80009ac <MX_TIM6_Init+0x64>)
 8000994:	f007 fcae 	bl	80082f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800099e:	f000 f9df 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	24000220 	.word	0x24000220
 80009b0:	40001000 	.word	0x40001000

080009b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009b8:	4b22      	ldr	r3, [pc, #136]	; (8000a44 <MX_USART3_UART_Init+0x90>)
 80009ba:	4a23      	ldr	r2, [pc, #140]	; (8000a48 <MX_USART3_UART_Init+0x94>)
 80009bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009be:	4b21      	ldr	r3, [pc, #132]	; (8000a44 <MX_USART3_UART_Init+0x90>)
 80009c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009c6:	4b1f      	ldr	r3, [pc, #124]	; (8000a44 <MX_USART3_UART_Init+0x90>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009cc:	4b1d      	ldr	r3, [pc, #116]	; (8000a44 <MX_USART3_UART_Init+0x90>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009d2:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <MX_USART3_UART_Init+0x90>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009d8:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <MX_USART3_UART_Init+0x90>)
 80009da:	220c      	movs	r2, #12
 80009dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009de:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <MX_USART3_UART_Init+0x90>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e4:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <MX_USART3_UART_Init+0x90>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ea:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <MX_USART3_UART_Init+0x90>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_USART3_UART_Init+0x90>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f6:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <MX_USART3_UART_Init+0x90>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009fc:	4811      	ldr	r0, [pc, #68]	; (8000a44 <MX_USART3_UART_Init+0x90>)
 80009fe:	f007 fd01 	bl	8008404 <HAL_UART_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a08:	f000 f9aa 	bl	8000d60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	480d      	ldr	r0, [pc, #52]	; (8000a44 <MX_USART3_UART_Init+0x90>)
 8000a10:	f008 fd97 	bl	8009542 <HAL_UARTEx_SetTxFifoThreshold>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a1a:	f000 f9a1 	bl	8000d60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4808      	ldr	r0, [pc, #32]	; (8000a44 <MX_USART3_UART_Init+0x90>)
 8000a22:	f008 fdcc 	bl	80095be <HAL_UARTEx_SetRxFifoThreshold>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a2c:	f000 f998 	bl	8000d60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a30:	4804      	ldr	r0, [pc, #16]	; (8000a44 <MX_USART3_UART_Init+0x90>)
 8000a32:	f008 fd4d 	bl	80094d0 <HAL_UARTEx_DisableFifoMode>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a3c:	f000 f990 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	24000040 	.word	0x24000040
 8000a48:	40004800 	.word	0x40004800

08000a4c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
	...

08000a5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a62:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <MX_DMA_Init+0x6c>)
 8000a64:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000a68:	4a17      	ldr	r2, [pc, #92]	; (8000ac8 <MX_DMA_Init+0x6c>)
 8000a6a:	f043 0301 	orr.w	r3, r3, #1
 8000a6e:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000a72:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <MX_DMA_Init+0x6c>)
 8000a74:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000a78:	f003 0301 	and.w	r3, r3, #1
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a80:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <MX_DMA_Init+0x6c>)
 8000a82:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000a86:	4a10      	ldr	r2, [pc, #64]	; (8000ac8 <MX_DMA_Init+0x6c>)
 8000a88:	f043 0302 	orr.w	r3, r3, #2
 8000a8c:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000a90:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <MX_DMA_Init+0x6c>)
 8000a92:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	200b      	movs	r0, #11
 8000aa4:	f001 fe83 	bl	80027ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000aa8:	200b      	movs	r0, #11
 8000aaa:	f001 fe9a 	bl	80027e2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	2038      	movs	r0, #56	; 0x38
 8000ab4:	f001 fe7b 	bl	80027ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ab8:	2038      	movs	r0, #56	; 0x38
 8000aba:	f001 fe92 	bl	80027e2 <HAL_NVIC_EnableIRQ>

}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	58024400 	.word	0x58024400

08000acc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08e      	sub	sp, #56	; 0x38
 8000ad0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae2:	4b87      	ldr	r3, [pc, #540]	; (8000d00 <MX_GPIO_Init+0x234>)
 8000ae4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ae8:	4a85      	ldr	r2, [pc, #532]	; (8000d00 <MX_GPIO_Init+0x234>)
 8000aea:	f043 0304 	orr.w	r3, r3, #4
 8000aee:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000af2:	4b83      	ldr	r3, [pc, #524]	; (8000d00 <MX_GPIO_Init+0x234>)
 8000af4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000af8:	f003 0304 	and.w	r3, r3, #4
 8000afc:	623b      	str	r3, [r7, #32]
 8000afe:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b00:	4b7f      	ldr	r3, [pc, #508]	; (8000d00 <MX_GPIO_Init+0x234>)
 8000b02:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b06:	4a7e      	ldr	r2, [pc, #504]	; (8000d00 <MX_GPIO_Init+0x234>)
 8000b08:	f043 0320 	orr.w	r3, r3, #32
 8000b0c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b10:	4b7b      	ldr	r3, [pc, #492]	; (8000d00 <MX_GPIO_Init+0x234>)
 8000b12:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b16:	f003 0320 	and.w	r3, r3, #32
 8000b1a:	61fb      	str	r3, [r7, #28]
 8000b1c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b1e:	4b78      	ldr	r3, [pc, #480]	; (8000d00 <MX_GPIO_Init+0x234>)
 8000b20:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b24:	4a76      	ldr	r2, [pc, #472]	; (8000d00 <MX_GPIO_Init+0x234>)
 8000b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b2a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b2e:	4b74      	ldr	r3, [pc, #464]	; (8000d00 <MX_GPIO_Init+0x234>)
 8000b30:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b38:	61bb      	str	r3, [r7, #24]
 8000b3a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3c:	4b70      	ldr	r3, [pc, #448]	; (8000d00 <MX_GPIO_Init+0x234>)
 8000b3e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b42:	4a6f      	ldr	r2, [pc, #444]	; (8000d00 <MX_GPIO_Init+0x234>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b4c:	4b6c      	ldr	r3, [pc, #432]	; (8000d00 <MX_GPIO_Init+0x234>)
 8000b4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	4b69      	ldr	r3, [pc, #420]	; (8000d00 <MX_GPIO_Init+0x234>)
 8000b5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b60:	4a67      	ldr	r2, [pc, #412]	; (8000d00 <MX_GPIO_Init+0x234>)
 8000b62:	f043 0302 	orr.w	r3, r3, #2
 8000b66:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b6a:	4b65      	ldr	r3, [pc, #404]	; (8000d00 <MX_GPIO_Init+0x234>)
 8000b6c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b70:	f003 0302 	and.w	r3, r3, #2
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b78:	4b61      	ldr	r3, [pc, #388]	; (8000d00 <MX_GPIO_Init+0x234>)
 8000b7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b7e:	4a60      	ldr	r2, [pc, #384]	; (8000d00 <MX_GPIO_Init+0x234>)
 8000b80:	f043 0308 	orr.w	r3, r3, #8
 8000b84:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b88:	4b5d      	ldr	r3, [pc, #372]	; (8000d00 <MX_GPIO_Init+0x234>)
 8000b8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b8e:	f003 0308 	and.w	r3, r3, #8
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b96:	4b5a      	ldr	r3, [pc, #360]	; (8000d00 <MX_GPIO_Init+0x234>)
 8000b98:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b9c:	4a58      	ldr	r2, [pc, #352]	; (8000d00 <MX_GPIO_Init+0x234>)
 8000b9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ba2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ba6:	4b56      	ldr	r3, [pc, #344]	; (8000d00 <MX_GPIO_Init+0x234>)
 8000ba8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bb4:	4b52      	ldr	r3, [pc, #328]	; (8000d00 <MX_GPIO_Init+0x234>)
 8000bb6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bba:	4a51      	ldr	r2, [pc, #324]	; (8000d00 <MX_GPIO_Init+0x234>)
 8000bbc:	f043 0310 	orr.w	r3, r3, #16
 8000bc0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bc4:	4b4e      	ldr	r3, [pc, #312]	; (8000d00 <MX_GPIO_Init+0x234>)
 8000bc6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bca:	f003 0310 	and.w	r3, r3, #16
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bd8:	484a      	ldr	r0, [pc, #296]	; (8000d04 <MX_GPIO_Init+0x238>)
 8000bda:	f004 fc53 	bl	8005484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	f244 0101 	movw	r1, #16385	; 0x4001
 8000be4:	4848      	ldr	r0, [pc, #288]	; (8000d08 <MX_GPIO_Init+0x23c>)
 8000be6:	f004 fc4d 	bl	8005484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2102      	movs	r1, #2
 8000bee:	4847      	ldr	r0, [pc, #284]	; (8000d0c <MX_GPIO_Init+0x240>)
 8000bf0:	f004 fc48 	bl	8005484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c06:	4619      	mov	r1, r3
 8000c08:	4841      	ldr	r0, [pc, #260]	; (8000d10 <MX_GPIO_Init+0x244>)
 8000c0a:	f004 fa8b 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000c0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c14:	2301      	movs	r3, #1
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c24:	4619      	mov	r1, r3
 8000c26:	4837      	ldr	r0, [pc, #220]	; (8000d04 <MX_GPIO_Init+0x238>)
 8000c28:	f004 fa7c 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000c2c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c42:	4619      	mov	r1, r3
 8000c44:	4830      	ldr	r0, [pc, #192]	; (8000d08 <MX_GPIO_Init+0x23c>)
 8000c46:	f004 fa6d 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000c4a:	2380      	movs	r3, #128	; 0x80
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c4e:	4b31      	ldr	r3, [pc, #196]	; (8000d14 <MX_GPIO_Init+0x248>)
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	482e      	ldr	r0, [pc, #184]	; (8000d18 <MX_GPIO_Init+0x24c>)
 8000c5e:	f004 fa61 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000c62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c74:	4619      	mov	r1, r3
 8000c76:	4829      	ldr	r0, [pc, #164]	; (8000d1c <MX_GPIO_Init+0x250>)
 8000c78:	f004 fa54 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000c7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000c8e:	230a      	movs	r3, #10
 8000c90:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c96:	4619      	mov	r1, r3
 8000c98:	4820      	ldr	r0, [pc, #128]	; (8000d1c <MX_GPIO_Init+0x250>)
 8000c9a:	f004 fa43 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000c9e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4819      	ldr	r0, [pc, #100]	; (8000d1c <MX_GPIO_Init+0x250>)
 8000cb8:	f004 fa34 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cbc:	23c0      	movs	r3, #192	; 0xc0
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ccc:	2307      	movs	r3, #7
 8000cce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	480c      	ldr	r0, [pc, #48]	; (8000d08 <MX_GPIO_Init+0x23c>)
 8000cd8:	f004 fa24 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4806      	ldr	r0, [pc, #24]	; (8000d0c <MX_GPIO_Init+0x240>)
 8000cf4:	f004 fa16 	bl	8005124 <HAL_GPIO_Init>

}
 8000cf8:	bf00      	nop
 8000cfa:	3738      	adds	r7, #56	; 0x38
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	58024400 	.word	0x58024400
 8000d04:	58021400 	.word	0x58021400
 8000d08:	58020400 	.word	0x58020400
 8000d0c:	58021000 	.word	0x58021000
 8000d10:	58020800 	.word	0x58020800
 8000d14:	11110000 	.word	0x11110000
 8000d18:	58021800 	.word	0x58021800
 8000d1c:	58020000 	.word	0x58020000

08000d20 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
//Toggle LED1 whenever ADC
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	4803      	ldr	r0, [pc, #12]	; (8000d3c <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8000d2e:	f004 fba9 	bl	8005484 <HAL_GPIO_WritePin>
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	58020400 	.word	0x58020400

08000d40 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	4803      	ldr	r0, [pc, #12]	; (8000d5c <HAL_ADC_ConvCpltCallback+0x1c>)
 8000d4e:	f004 fb99 	bl	8005484 <HAL_GPIO_WritePin>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	58020400 	.word	0x58020400

08000d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
	...

08000d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d76:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <HAL_MspInit+0x30>)
 8000d78:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000d7c:	4a08      	ldr	r2, [pc, #32]	; (8000da0 <HAL_MspInit+0x30>)
 8000d7e:	f043 0302 	orr.w	r3, r3, #2
 8000d82:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_MspInit+0x30>)
 8000d88:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000d8c:	f003 0302 	and.w	r3, r3, #2
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	58024400 	.word	0x58024400

08000da4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	; 0x28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a30      	ldr	r2, [pc, #192]	; (8000e84 <HAL_ADC_MspInit+0xe0>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d159      	bne.n	8000e7a <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000dc6:	4b30      	ldr	r3, [pc, #192]	; (8000e88 <HAL_ADC_MspInit+0xe4>)
 8000dc8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000dcc:	4a2e      	ldr	r2, [pc, #184]	; (8000e88 <HAL_ADC_MspInit+0xe4>)
 8000dce:	f043 0320 	orr.w	r3, r3, #32
 8000dd2:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000dd6:	4b2c      	ldr	r3, [pc, #176]	; (8000e88 <HAL_ADC_MspInit+0xe4>)
 8000dd8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000ddc:	f003 0320 	and.w	r3, r3, #32
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de4:	4b28      	ldr	r3, [pc, #160]	; (8000e88 <HAL_ADC_MspInit+0xe4>)
 8000de6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dea:	4a27      	ldr	r2, [pc, #156]	; (8000e88 <HAL_ADC_MspInit+0xe4>)
 8000dec:	f043 0302 	orr.w	r3, r3, #2
 8000df0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000df4:	4b24      	ldr	r3, [pc, #144]	; (8000e88 <HAL_ADC_MspInit+0xe4>)
 8000df6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e02:	2302      	movs	r3, #2
 8000e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e06:	2303      	movs	r3, #3
 8000e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	4619      	mov	r1, r3
 8000e14:	481d      	ldr	r0, [pc, #116]	; (8000e8c <HAL_ADC_MspInit+0xe8>)
 8000e16:	f004 f985 	bl	8005124 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000e1a:	4b1d      	ldr	r3, [pc, #116]	; (8000e90 <HAL_ADC_MspInit+0xec>)
 8000e1c:	4a1d      	ldr	r2, [pc, #116]	; (8000e94 <HAL_ADC_MspInit+0xf0>)
 8000e1e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000e20:	4b1b      	ldr	r3, [pc, #108]	; (8000e90 <HAL_ADC_MspInit+0xec>)
 8000e22:	2209      	movs	r2, #9
 8000e24:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e26:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <HAL_ADC_MspInit+0xec>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e2c:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <HAL_ADC_MspInit+0xec>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e32:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <HAL_ADC_MspInit+0xec>)
 8000e34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e38:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e3a:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <HAL_ADC_MspInit+0xec>)
 8000e3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e40:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e42:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <HAL_ADC_MspInit+0xec>)
 8000e44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e48:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e4a:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <HAL_ADC_MspInit+0xec>)
 8000e4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e50:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e52:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <HAL_ADC_MspInit+0xec>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e58:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <HAL_ADC_MspInit+0xec>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e5e:	480c      	ldr	r0, [pc, #48]	; (8000e90 <HAL_ADC_MspInit+0xec>)
 8000e60:	f001 ffe4 	bl	8002e2c <HAL_DMA_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <HAL_ADC_MspInit+0xca>
    {
      Error_Handler();
 8000e6a:	f7ff ff79 	bl	8000d60 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a07      	ldr	r2, [pc, #28]	; (8000e90 <HAL_ADC_MspInit+0xec>)
 8000e72:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e74:	4a06      	ldr	r2, [pc, #24]	; (8000e90 <HAL_ADC_MspInit+0xec>)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e7a:	bf00      	nop
 8000e7c:	3728      	adds	r7, #40	; 0x28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40022000 	.word	0x40022000
 8000e88:	58024400 	.word	0x58024400
 8000e8c:	58020400 	.word	0x58020400
 8000e90:	240001a8 	.word	0x240001a8
 8000e94:	40020010 	.word	0x40020010

08000e98 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	; 0x28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a30      	ldr	r2, [pc, #192]	; (8000f78 <HAL_DAC_MspInit+0xe0>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d159      	bne.n	8000f6e <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000eba:	4b30      	ldr	r3, [pc, #192]	; (8000f7c <HAL_DAC_MspInit+0xe4>)
 8000ebc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000ec0:	4a2e      	ldr	r2, [pc, #184]	; (8000f7c <HAL_DAC_MspInit+0xe4>)
 8000ec2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ec6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000eca:	4b2c      	ldr	r3, [pc, #176]	; (8000f7c <HAL_DAC_MspInit+0xe4>)
 8000ecc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000ed0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed8:	4b28      	ldr	r3, [pc, #160]	; (8000f7c <HAL_DAC_MspInit+0xe4>)
 8000eda:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ede:	4a27      	ldr	r2, [pc, #156]	; (8000f7c <HAL_DAC_MspInit+0xe4>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ee8:	4b24      	ldr	r3, [pc, #144]	; (8000f7c <HAL_DAC_MspInit+0xe4>)
 8000eea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ef6:	2310      	movs	r3, #16
 8000ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000efa:	2303      	movs	r3, #3
 8000efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4619      	mov	r1, r3
 8000f08:	481d      	ldr	r0, [pc, #116]	; (8000f80 <HAL_DAC_MspInit+0xe8>)
 8000f0a:	f004 f90b 	bl	8005124 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA2_Stream0;
 8000f0e:	4b1d      	ldr	r3, [pc, #116]	; (8000f84 <HAL_DAC_MspInit+0xec>)
 8000f10:	4a1d      	ldr	r2, [pc, #116]	; (8000f88 <HAL_DAC_MspInit+0xf0>)
 8000f12:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000f14:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <HAL_DAC_MspInit+0xec>)
 8000f16:	2243      	movs	r2, #67	; 0x43
 8000f18:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f1a:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <HAL_DAC_MspInit+0xec>)
 8000f1c:	2240      	movs	r2, #64	; 0x40
 8000f1e:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f20:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <HAL_DAC_MspInit+0xec>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000f26:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <HAL_DAC_MspInit+0xec>)
 8000f28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f2c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <HAL_DAC_MspInit+0xec>)
 8000f30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f34:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f36:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <HAL_DAC_MspInit+0xec>)
 8000f38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f3c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000f3e:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <HAL_DAC_MspInit+0xec>)
 8000f40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f44:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000f46:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <HAL_DAC_MspInit+0xec>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f4c:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <HAL_DAC_MspInit+0xec>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000f52:	480c      	ldr	r0, [pc, #48]	; (8000f84 <HAL_DAC_MspInit+0xec>)
 8000f54:	f001 ff6a 	bl	8002e2c <HAL_DMA_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000f5e:	f7ff feff 	bl	8000d60 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a07      	ldr	r2, [pc, #28]	; (8000f84 <HAL_DAC_MspInit+0xec>)
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	4a06      	ldr	r2, [pc, #24]	; (8000f84 <HAL_DAC_MspInit+0xec>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000f6e:	bf00      	nop
 8000f70:	3728      	adds	r7, #40	; 0x28
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40007400 	.word	0x40007400
 8000f7c:	58024400 	.word	0x58024400
 8000f80:	58020000 	.word	0x58020000
 8000f84:	240000cc 	.word	0x240000cc
 8000f88:	40020410 	.word	0x40020410

08000f8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0b      	ldr	r2, [pc, #44]	; (8000fc8 <HAL_TIM_Base_MspInit+0x3c>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d10e      	bne.n	8000fbc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <HAL_TIM_Base_MspInit+0x40>)
 8000fa0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000fa4:	4a09      	ldr	r2, [pc, #36]	; (8000fcc <HAL_TIM_Base_MspInit+0x40>)
 8000fa6:	f043 0310 	orr.w	r3, r3, #16
 8000faa:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000fae:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <HAL_TIM_Base_MspInit+0x40>)
 8000fb0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000fb4:	f003 0310 	and.w	r3, r3, #16
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	40001000 	.word	0x40001000
 8000fcc:	58024400 	.word	0x58024400

08000fd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a1a      	ldr	r2, [pc, #104]	; (8001058 <HAL_UART_MspInit+0x88>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d12e      	bne.n	8001050 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	; (800105c <HAL_UART_MspInit+0x8c>)
 8000ff4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000ff8:	4a18      	ldr	r2, [pc, #96]	; (800105c <HAL_UART_MspInit+0x8c>)
 8000ffa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ffe:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001002:	4b16      	ldr	r3, [pc, #88]	; (800105c <HAL_UART_MspInit+0x8c>)
 8001004:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001008:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <HAL_UART_MspInit+0x8c>)
 8001012:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001016:	4a11      	ldr	r2, [pc, #68]	; (800105c <HAL_UART_MspInit+0x8c>)
 8001018:	f043 0308 	orr.w	r3, r3, #8
 800101c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001020:	4b0e      	ldr	r3, [pc, #56]	; (800105c <HAL_UART_MspInit+0x8c>)
 8001022:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001026:	f003 0308 	and.w	r3, r3, #8
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800102e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2300      	movs	r3, #0
 800103e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001040:	2307      	movs	r3, #7
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	4619      	mov	r1, r3
 800104a:	4805      	ldr	r0, [pc, #20]	; (8001060 <HAL_UART_MspInit+0x90>)
 800104c:	f004 f86a 	bl	8005124 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001050:	bf00      	nop
 8001052:	3728      	adds	r7, #40	; 0x28
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40004800 	.word	0x40004800
 800105c:	58024400 	.word	0x58024400
 8001060:	58020c00 	.word	0x58020c00

08001064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <HardFault_Handler+0x4>

08001078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800107c:	e7fe      	b.n	800107c <MemManage_Handler+0x4>

0800107e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001082:	e7fe      	b.n	8001082 <BusFault_Handler+0x4>

08001084 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <UsageFault_Handler+0x4>

0800108a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b8:	f000 f92e 	bl	8001318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80010c4:	4802      	ldr	r0, [pc, #8]	; (80010d0 <DMA1_Stream0_IRQHandler+0x10>)
 80010c6:	f002 fcab 	bl	8003a20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	240001a8 	.word	0x240001a8

080010d4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80010d8:	4802      	ldr	r0, [pc, #8]	; (80010e4 <DMA2_Stream0_IRQHandler+0x10>)
 80010da:	f002 fca1 	bl	8003a20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	240000cc 	.word	0x240000cc

080010e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010ec:	4b34      	ldr	r3, [pc, #208]	; (80011c0 <SystemInit+0xd8>)
 80010ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010f2:	4a33      	ldr	r2, [pc, #204]	; (80011c0 <SystemInit+0xd8>)
 80010f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010fc:	4b31      	ldr	r3, [pc, #196]	; (80011c4 <SystemInit+0xdc>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 030f 	and.w	r3, r3, #15
 8001104:	2b02      	cmp	r3, #2
 8001106:	d807      	bhi.n	8001118 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001108:	4b2e      	ldr	r3, [pc, #184]	; (80011c4 <SystemInit+0xdc>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f023 030f 	bic.w	r3, r3, #15
 8001110:	4a2c      	ldr	r2, [pc, #176]	; (80011c4 <SystemInit+0xdc>)
 8001112:	f043 0303 	orr.w	r3, r3, #3
 8001116:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001118:	4b2b      	ldr	r3, [pc, #172]	; (80011c8 <SystemInit+0xe0>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a2a      	ldr	r2, [pc, #168]	; (80011c8 <SystemInit+0xe0>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001124:	4b28      	ldr	r3, [pc, #160]	; (80011c8 <SystemInit+0xe0>)
 8001126:	2200      	movs	r2, #0
 8001128:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800112a:	4b27      	ldr	r3, [pc, #156]	; (80011c8 <SystemInit+0xe0>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	4926      	ldr	r1, [pc, #152]	; (80011c8 <SystemInit+0xe0>)
 8001130:	4b26      	ldr	r3, [pc, #152]	; (80011cc <SystemInit+0xe4>)
 8001132:	4013      	ands	r3, r2
 8001134:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001136:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <SystemInit+0xdc>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	2b03      	cmp	r3, #3
 8001140:	d907      	bls.n	8001152 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001142:	4b20      	ldr	r3, [pc, #128]	; (80011c4 <SystemInit+0xdc>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f023 030f 	bic.w	r3, r3, #15
 800114a:	4a1e      	ldr	r2, [pc, #120]	; (80011c4 <SystemInit+0xdc>)
 800114c:	f043 0303 	orr.w	r3, r3, #3
 8001150:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001152:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <SystemInit+0xe0>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001158:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <SystemInit+0xe0>)
 800115a:	2200      	movs	r2, #0
 800115c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800115e:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <SystemInit+0xe0>)
 8001160:	2200      	movs	r2, #0
 8001162:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001164:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <SystemInit+0xe0>)
 8001166:	4a1a      	ldr	r2, [pc, #104]	; (80011d0 <SystemInit+0xe8>)
 8001168:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800116a:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <SystemInit+0xe0>)
 800116c:	4a19      	ldr	r2, [pc, #100]	; (80011d4 <SystemInit+0xec>)
 800116e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001170:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <SystemInit+0xe0>)
 8001172:	4a19      	ldr	r2, [pc, #100]	; (80011d8 <SystemInit+0xf0>)
 8001174:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001176:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <SystemInit+0xe0>)
 8001178:	2200      	movs	r2, #0
 800117a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <SystemInit+0xe0>)
 800117e:	4a16      	ldr	r2, [pc, #88]	; (80011d8 <SystemInit+0xf0>)
 8001180:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <SystemInit+0xe0>)
 8001184:	2200      	movs	r2, #0
 8001186:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001188:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <SystemInit+0xe0>)
 800118a:	4a13      	ldr	r2, [pc, #76]	; (80011d8 <SystemInit+0xf0>)
 800118c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <SystemInit+0xe0>)
 8001190:	2200      	movs	r2, #0
 8001192:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <SystemInit+0xe0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a0b      	ldr	r2, [pc, #44]	; (80011c8 <SystemInit+0xe0>)
 800119a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800119e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011a0:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <SystemInit+0xe0>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011a6:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <SystemInit+0xf4>)
 80011a8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80011ac:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011ae:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <SystemInit+0xd8>)
 80011b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011b4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00
 80011c4:	52002000 	.word	0x52002000
 80011c8:	58024400 	.word	0x58024400
 80011cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80011d0:	02020200 	.word	0x02020200
 80011d4:	01ff0000 	.word	0x01ff0000
 80011d8:	01010280 	.word	0x01010280
 80011dc:	52004000 	.word	0x52004000

080011e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001218 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80011e4:	f7ff ff80 	bl	80010e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80011e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80011ea:	e003      	b.n	80011f4 <LoopCopyDataInit>

080011ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80011ec:	4b0b      	ldr	r3, [pc, #44]	; (800121c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80011ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80011f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80011f2:	3104      	adds	r1, #4

080011f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80011f4:	480a      	ldr	r0, [pc, #40]	; (8001220 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80011f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80011fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80011fc:	d3f6      	bcc.n	80011ec <CopyDataInit>
  ldr  r2, =_sbss
 80011fe:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001200:	e002      	b.n	8001208 <LoopFillZerobss>

08001202 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001202:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001204:	f842 3b04 	str.w	r3, [r2], #4

08001208 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800120a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800120c:	d3f9      	bcc.n	8001202 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800120e:	f008 fa7d 	bl	800970c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001212:	f7ff f9eb 	bl	80005ec <main>
  bx  lr
 8001216:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001218:	24100000 	.word	0x24100000
  ldr  r3, =_sidata
 800121c:	080097cc 	.word	0x080097cc
  ldr  r0, =_sdata
 8001220:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001224:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 8001228:	24000010 	.word	0x24000010
  ldr  r3, = _ebss
 800122c:	24000a70 	.word	0x24000a70

08001230 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001230:	e7fe      	b.n	8001230 <ADC_IRQHandler>
	...

08001234 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800123a:	2003      	movs	r0, #3
 800123c:	f001 faac 	bl	8002798 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001240:	f004 ff32 	bl	80060a8 <HAL_RCC_GetSysClockFreq>
 8001244:	4601      	mov	r1, r0
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <HAL_Init+0x68>)
 8001248:	699b      	ldr	r3, [r3, #24]
 800124a:	0a1b      	lsrs	r3, r3, #8
 800124c:	f003 030f 	and.w	r3, r3, #15
 8001250:	4a13      	ldr	r2, [pc, #76]	; (80012a0 <HAL_Init+0x6c>)
 8001252:	5cd3      	ldrb	r3, [r2, r3]
 8001254:	f003 031f 	and.w	r3, r3, #31
 8001258:	fa21 f303 	lsr.w	r3, r1, r3
 800125c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800125e:	4b0f      	ldr	r3, [pc, #60]	; (800129c <HAL_Init+0x68>)
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	4a0e      	ldr	r2, [pc, #56]	; (80012a0 <HAL_Init+0x6c>)
 8001268:	5cd3      	ldrb	r3, [r2, r3]
 800126a:	f003 031f 	and.w	r3, r3, #31
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	fa22 f303 	lsr.w	r3, r2, r3
 8001274:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <HAL_Init+0x70>)
 8001276:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001278:	4a0b      	ldr	r2, [pc, #44]	; (80012a8 <HAL_Init+0x74>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800127e:	2000      	movs	r0, #0
 8001280:	f000 f814 	bl	80012ac <HAL_InitTick>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e002      	b.n	8001294 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800128e:	f7ff fd6f 	bl	8000d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001292:	2300      	movs	r3, #0
}
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	58024400 	.word	0x58024400
 80012a0:	0800978c 	.word	0x0800978c
 80012a4:	24000004 	.word	0x24000004
 80012a8:	24000000 	.word	0x24000000

080012ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012b4:	4b15      	ldr	r3, [pc, #84]	; (800130c <HAL_InitTick+0x60>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d101      	bne.n	80012c0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e021      	b.n	8001304 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <HAL_InitTick+0x64>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <HAL_InitTick+0x60>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	4619      	mov	r1, r3
 80012ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80012d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d6:	4618      	mov	r0, r3
 80012d8:	f001 fa91 	bl	80027fe <HAL_SYSTICK_Config>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e00e      	b.n	8001304 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b0f      	cmp	r3, #15
 80012ea:	d80a      	bhi.n	8001302 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ec:	2200      	movs	r2, #0
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	f04f 30ff 	mov.w	r0, #4294967295
 80012f4:	f001 fa5b 	bl	80027ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f8:	4a06      	ldr	r2, [pc, #24]	; (8001314 <HAL_InitTick+0x68>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012fe:	2300      	movs	r3, #0
 8001300:	e000      	b.n	8001304 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
}
 8001304:	4618      	mov	r0, r3
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	2400000c 	.word	0x2400000c
 8001310:	24000000 	.word	0x24000000
 8001314:	24000008 	.word	0x24000008

08001318 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_IncTick+0x20>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_IncTick+0x24>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4413      	add	r3, r2
 8001328:	4a04      	ldr	r2, [pc, #16]	; (800133c <HAL_IncTick+0x24>)
 800132a:	6013      	str	r3, [r2, #0]
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	2400000c 	.word	0x2400000c
 800133c:	24000a6c 	.word	0x24000a6c

08001340 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return uwTick;
 8001344:	4b03      	ldr	r3, [pc, #12]	; (8001354 <HAL_GetTick+0x14>)
 8001346:	681b      	ldr	r3, [r3, #0]
}
 8001348:	4618      	mov	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	24000a6c 	.word	0x24000a6c

08001358 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001360:	f7ff ffee 	bl	8001340 <HAL_GetTick>
 8001364:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001370:	d005      	beq.n	800137e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <HAL_Delay+0x40>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	461a      	mov	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4413      	add	r3, r2
 800137c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800137e:	bf00      	nop
 8001380:	f7ff ffde 	bl	8001340 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	429a      	cmp	r2, r3
 800138e:	d8f7      	bhi.n	8001380 <HAL_Delay+0x28>
  {
  }
}
 8001390:	bf00      	nop
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	2400000c 	.word	0x2400000c

0800139c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	431a      	orrs	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	609a      	str	r2, [r3, #8]
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
 80013ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	431a      	orrs	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	609a      	str	r2, [r3, #8]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001404:	b480      	push	{r7}
 8001406:	b087      	sub	sp, #28
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
 8001410:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	3360      	adds	r3, #96	; 0x60
 8001416:	461a      	mov	r2, r3
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	430b      	orrs	r3, r1
 8001432:	431a      	orrs	r2, r3
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001438:	bf00      	nop
 800143a:	371c      	adds	r7, #28
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	f003 031f 	and.w	r3, r3, #31
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	fa01 f303 	lsl.w	r3, r1, r3
 8001464:	431a      	orrs	r2, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	611a      	str	r2, [r3, #16]
}
 800146a:	bf00      	nop
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001476:	b480      	push	{r7}
 8001478:	b087      	sub	sp, #28
 800147a:	af00      	add	r7, sp, #0
 800147c:	60f8      	str	r0, [r7, #12]
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	3360      	adds	r3, #96	; 0x60
 8001486:	461a      	mov	r2, r3
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4413      	add	r3, r2
 800148e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	431a      	orrs	r2, r3
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	601a      	str	r2, [r3, #0]
  }
}
 80014a0:	bf00      	nop
 80014a2:	371c      	adds	r7, #28
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d101      	bne.n	80014c4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80014c0:	2301      	movs	r3, #1
 80014c2:	e000      	b.n	80014c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b087      	sub	sp, #28
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	60f8      	str	r0, [r7, #12]
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	3330      	adds	r3, #48	; 0x30
 80014e2:	461a      	mov	r2, r3
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	0a1b      	lsrs	r3, r3, #8
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	f003 030c 	and.w	r3, r3, #12
 80014ee:	4413      	add	r3, r2
 80014f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	f003 031f 	and.w	r3, r3, #31
 80014fc:	211f      	movs	r1, #31
 80014fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001502:	43db      	mvns	r3, r3
 8001504:	401a      	ands	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	0e9b      	lsrs	r3, r3, #26
 800150a:	f003 011f 	and.w	r1, r3, #31
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	f003 031f 	and.w	r3, r3, #31
 8001514:	fa01 f303 	lsl.w	r3, r1, r3
 8001518:	431a      	orrs	r2, r3
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800151e:	bf00      	nop
 8001520:	371c      	adds	r7, #28
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
 8001532:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	f023 0203 	bic.w	r2, r3, #3
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	60da      	str	r2, [r3, #12]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001550:	b480      	push	{r7}
 8001552:	b087      	sub	sp, #28
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	3314      	adds	r3, #20
 8001560:	461a      	mov	r2, r3
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	0e5b      	lsrs	r3, r3, #25
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	4413      	add	r3, r2
 800156e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	0d1b      	lsrs	r3, r3, #20
 8001578:	f003 031f 	and.w	r3, r3, #31
 800157c:	2107      	movs	r1, #7
 800157e:	fa01 f303 	lsl.w	r3, r1, r3
 8001582:	43db      	mvns	r3, r3
 8001584:	401a      	ands	r2, r3
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	0d1b      	lsrs	r3, r3, #20
 800158a:	f003 031f 	and.w	r3, r3, #31
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	fa01 f303 	lsl.w	r3, r1, r3
 8001594:	431a      	orrs	r2, r3
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800159a:	bf00      	nop
 800159c:	371c      	adds	r7, #28
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015c0:	43db      	mvns	r3, r3
 80015c2:	401a      	ands	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f003 0318 	and.w	r3, r3, #24
 80015ca:	4908      	ldr	r1, [pc, #32]	; (80015ec <LL_ADC_SetChannelSingleDiff+0x44>)
 80015cc:	40d9      	lsrs	r1, r3
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	400b      	ands	r3, r1
 80015d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015d6:	431a      	orrs	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80015de:	bf00      	nop
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	000fffff 	.word	0x000fffff

080015f0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f003 031f 	and.w	r3, r3, #31
}
 8001600:	4618      	mov	r0, r3
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	4b04      	ldr	r3, [pc, #16]	; (800162c <LL_ADC_DisableDeepPowerDown+0x20>)
 800161a:	4013      	ands	r3, r2
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	6093      	str	r3, [r2, #8]
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	5fffffc0 	.word	0x5fffffc0

08001630 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001640:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001644:	d101      	bne.n	800164a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001646:	2301      	movs	r3, #1
 8001648:	e000      	b.n	800164c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	4b05      	ldr	r3, [pc, #20]	; (800167c <LL_ADC_EnableInternalRegulator+0x24>)
 8001666:	4013      	ands	r3, r2
 8001668:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	6fffffc0 	.word	0x6fffffc0

08001680 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001690:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001694:	d101      	bne.n	800169a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001696:	2301      	movs	r3, #1
 8001698:	e000      	b.n	800169c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	4b05      	ldr	r3, [pc, #20]	; (80016cc <LL_ADC_Enable+0x24>)
 80016b6:	4013      	ands	r3, r2
 80016b8:	f043 0201 	orr.w	r2, r3, #1
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	7fffffc0 	.word	0x7fffffc0

080016d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d101      	bne.n	80016e8 <LL_ADC_IsEnabled+0x18>
 80016e4:	2301      	movs	r3, #1
 80016e6:	e000      	b.n	80016ea <LL_ADC_IsEnabled+0x1a>
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
	...

080016f8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <LL_ADC_REG_StartConversion+0x24>)
 8001706:	4013      	ands	r3, r2
 8001708:	f043 0204 	orr.w	r2, r3, #4
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	7fffffc0 	.word	0x7fffffc0

08001720 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	2b04      	cmp	r3, #4
 8001732:	d101      	bne.n	8001738 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001734:	2301      	movs	r3, #1
 8001736:	e000      	b.n	800173a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 0308 	and.w	r3, r3, #8
 8001756:	2b08      	cmp	r3, #8
 8001758:	d101      	bne.n	800175e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800175a:	2301      	movs	r3, #1
 800175c:	e000      	b.n	8001760 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800176c:	b590      	push	{r4, r7, lr}
 800176e:	b089      	sub	sp, #36	; 0x24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001774:	2300      	movs	r3, #0
 8001776:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001778:	2300      	movs	r3, #0
 800177a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e137      	b.n	80019f6 <HAL_ADC_Init+0x28a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001790:	2b00      	cmp	r3, #0
 8001792:	d109      	bne.n	80017a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff fb05 	bl	8000da4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff3f 	bl	8001630 <LL_ADC_IsDeepPowerDownEnabled>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d004      	beq.n	80017c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff25 	bl	800160c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff ff5a 	bl	8001680 <LL_ADC_IsInternalRegulatorEnabled>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d113      	bne.n	80017fa <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff ff3e 	bl	8001658 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80017dc:	4b88      	ldr	r3, [pc, #544]	; (8001a00 <HAL_ADC_Init+0x294>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	099b      	lsrs	r3, r3, #6
 80017e2:	4a88      	ldr	r2, [pc, #544]	; (8001a04 <HAL_ADC_Init+0x298>)
 80017e4:	fba2 2303 	umull	r2, r3, r2, r3
 80017e8:	099b      	lsrs	r3, r3, #6
 80017ea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80017ec:	e002      	b.n	80017f4 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	3b01      	subs	r3, #1
 80017f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f9      	bne.n	80017ee <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff ff3e 	bl	8001680 <LL_ADC_IsInternalRegulatorEnabled>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10d      	bne.n	8001826 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800180e:	f043 0210 	orr.w	r2, r3, #16
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181a:	f043 0201 	orr.w	r2, r3, #1
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff ff78 	bl	8001720 <LL_ADC_REG_IsConversionOngoing>
 8001830:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001836:	f003 0310 	and.w	r3, r3, #16
 800183a:	2b00      	cmp	r3, #0
 800183c:	f040 80d2 	bne.w	80019e4 <HAL_ADC_Init+0x278>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	2b00      	cmp	r3, #0
 8001844:	f040 80ce 	bne.w	80019e4 <HAL_ADC_Init+0x278>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800184c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001850:	f043 0202 	orr.w	r2, r3, #2
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff37 	bl	80016d0 <LL_ADC_IsEnabled>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d110      	bne.n	800188a <HAL_ADC_Init+0x11e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001868:	4867      	ldr	r0, [pc, #412]	; (8001a08 <HAL_ADC_Init+0x29c>)
 800186a:	f7ff ff31 	bl	80016d0 <LL_ADC_IsEnabled>
 800186e:	4604      	mov	r4, r0
 8001870:	4866      	ldr	r0, [pc, #408]	; (8001a0c <HAL_ADC_Init+0x2a0>)
 8001872:	f7ff ff2d 	bl	80016d0 <LL_ADC_IsEnabled>
 8001876:	4603      	mov	r3, r0
 8001878:	4323      	orrs	r3, r4
 800187a:	2b00      	cmp	r3, #0
 800187c:	d105      	bne.n	800188a <HAL_ADC_Init+0x11e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	4619      	mov	r1, r3
 8001884:	4862      	ldr	r0, [pc, #392]	; (8001a10 <HAL_ADC_Init+0x2a4>)
 8001886:	f7ff fd89 	bl	800139c <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	7d5b      	ldrb	r3, [r3, #21]
 800188e:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001894:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 800189a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	7f1b      	ldrb	r3, [r3, #28]
 80018a0:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	7f1b      	ldrb	r3, [r3, #28]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d106      	bne.n	80018bc <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	045b      	lsls	r3, r3, #17
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d009      	beq.n	80018d8 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68da      	ldr	r2, [r3, #12]
 80018de:	4b4d      	ldr	r3, [pc, #308]	; (8001a14 <HAL_ADC_Init+0x2a8>)
 80018e0:	4013      	ands	r3, r2
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6812      	ldr	r2, [r2, #0]
 80018e6:	69b9      	ldr	r1, [r7, #24]
 80018e8:	430b      	orrs	r3, r1
 80018ea:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ff15 	bl	8001720 <LL_ADC_REG_IsConversionOngoing>
 80018f6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ff22 	bl	8001746 <LL_ADC_INJ_IsConversionOngoing>
 8001902:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d14a      	bne.n	80019a0 <HAL_ADC_Init+0x234>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d147      	bne.n	80019a0 <HAL_ADC_Init+0x234>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	7d1b      	ldrb	r3, [r3, #20]
 8001914:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800191a:	4313      	orrs	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68da      	ldr	r2, [r3, #12]
 8001924:	4b3c      	ldr	r3, [pc, #240]	; (8001a18 <HAL_ADC_Init+0x2ac>)
 8001926:	4013      	ands	r3, r2
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	6812      	ldr	r2, [r2, #0]
 800192c:	69b9      	ldr	r1, [r7, #24]
 800192e:	430b      	orrs	r3, r1
 8001930:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001938:	2b01      	cmp	r3, #1
 800193a:	d11b      	bne.n	8001974 <HAL_ADC_Init+0x208>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001940:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	691a      	ldr	r2, [r3, #16]
 8001948:	4b34      	ldr	r3, [pc, #208]	; (8001a1c <HAL_ADC_Init+0x2b0>)
 800194a:	4013      	ands	r3, r2
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001950:	3a01      	subs	r2, #1
 8001952:	0411      	lsls	r1, r2, #16
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001958:	4311      	orrs	r1, r2
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800195e:	4311      	orrs	r1, r2
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001964:	430a      	orrs	r2, r1
 8001966:	431a      	orrs	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f042 0201 	orr.w	r2, r2, #1
 8001970:	611a      	str	r2, [r3, #16]
 8001972:	e007      	b.n	8001984 <HAL_ADC_Init+0x218>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	691a      	ldr	r2, [r3, #16]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f022 0201 	bic.w	r2, r2, #1
 8001982:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 fcb4 	bl	8002308 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d10c      	bne.n	80019c2 <HAL_ADC_Init+0x256>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f023 010f 	bic.w	r1, r3, #15
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	1e5a      	subs	r2, r3, #1
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	430a      	orrs	r2, r1
 80019be:	631a      	str	r2, [r3, #48]	; 0x30
 80019c0:	e007      	b.n	80019d2 <HAL_ADC_Init+0x266>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 020f 	bic.w	r2, r2, #15
 80019d0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d6:	f023 0303 	bic.w	r3, r3, #3
 80019da:	f043 0201 	orr.w	r2, r3, #1
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	655a      	str	r2, [r3, #84]	; 0x54
 80019e2:	e007      	b.n	80019f4 <HAL_ADC_Init+0x288>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e8:	f043 0210 	orr.w	r2, r3, #16
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80019f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3724      	adds	r7, #36	; 0x24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd90      	pop	{r4, r7, pc}
 80019fe:	bf00      	nop
 8001a00:	24000000 	.word	0x24000000
 8001a04:	053e2d63 	.word	0x053e2d63
 8001a08:	40022000 	.word	0x40022000
 8001a0c:	40022100 	.word	0x40022100
 8001a10:	40022300 	.word	0x40022300
 8001a14:	fff0c003 	.word	0xfff0c003
 8001a18:	ffffbffc 	.word	0xffffbffc
 8001a1c:	fc00f81e 	.word	0xfc00f81e

08001a20 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a2c:	484f      	ldr	r0, [pc, #316]	; (8001b6c <HAL_ADC_Start_DMA+0x14c>)
 8001a2e:	f7ff fddf 	bl	80015f0 <LL_ADC_GetMultimode>
 8001a32:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff fe71 	bl	8001720 <LL_ADC_REG_IsConversionOngoing>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f040 808c 	bne.w	8001b5e <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <HAL_ADC_Start_DMA+0x34>
 8001a50:	2302      	movs	r3, #2
 8001a52:	e087      	b.n	8001b64 <HAL_ADC_Start_DMA+0x144>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d005      	beq.n	8001a6e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	2b05      	cmp	r3, #5
 8001a66:	d002      	beq.n	8001a6e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	2b09      	cmp	r3, #9
 8001a6c:	d170      	bne.n	8001b50 <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f000 fb42 	bl	80020f8 <ADC_Enable>
 8001a74:	4603      	mov	r3, r0
 8001a76:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001a78:	7dfb      	ldrb	r3, [r7, #23]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d163      	bne.n	8001b46 <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001a82:	4b3b      	ldr	r3, [pc, #236]	; (8001b70 <HAL_ADC_Start_DMA+0x150>)
 8001a84:	4013      	ands	r3, r2
 8001a86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a38      	ldr	r2, [pc, #224]	; (8001b74 <HAL_ADC_Start_DMA+0x154>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d002      	beq.n	8001a9e <HAL_ADC_Start_DMA+0x7e>
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	e000      	b.n	8001aa0 <HAL_ADC_Start_DMA+0x80>
 8001a9e:	4b36      	ldr	r3, [pc, #216]	; (8001b78 <HAL_ADC_Start_DMA+0x158>)
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	6812      	ldr	r2, [r2, #0]
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d002      	beq.n	8001aae <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d105      	bne.n	8001aba <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001abe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d006      	beq.n	8001ad4 <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aca:	f023 0206 	bic.w	r2, r3, #6
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	659a      	str	r2, [r3, #88]	; 0x58
 8001ad2:	e002      	b.n	8001ada <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ade:	4a27      	ldr	r2, [pc, #156]	; (8001b7c <HAL_ADC_Start_DMA+0x15c>)
 8001ae0:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae6:	4a26      	ldr	r2, [pc, #152]	; (8001b80 <HAL_ADC_Start_DMA+0x160>)
 8001ae8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aee:	4a25      	ldr	r2, [pc, #148]	; (8001b84 <HAL_ADC_Start_DMA+0x164>)
 8001af0:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	221c      	movs	r2, #28
 8001af8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f042 0210 	orr.w	r2, r2, #16
 8001b10:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	f7ff fd04 	bl	800152a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	3340      	adds	r3, #64	; 0x40
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f001 fd0b 	bl	800354c <HAL_DMA_Start_IT>
 8001b36:	4603      	mov	r3, r0
 8001b38:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff fdda 	bl	80016f8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001b44:	e00d      	b.n	8001b62 <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001b4e:	e008      	b.n	8001b62 <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001b5c:	e001      	b.n	8001b62 <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40022300 	.word	0x40022300
 8001b70:	fffff0fe 	.word	0xfffff0fe
 8001b74:	40022100 	.word	0x40022100
 8001b78:	40022000 	.word	0x40022000
 8001b7c:	080021e1 	.word	0x080021e1
 8001b80:	080022b9 	.word	0x080022b9
 8001b84:	080022d5 	.word	0x080022d5

08001b88 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b9c:	b590      	push	{r4, r7, lr}
 8001b9e:	b099      	sub	sp, #100	; 0x64
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	4aa1      	ldr	r2, [pc, #644]	; (8001e3c <HAL_ADC_ConfigChannel+0x2a0>)
 8001bb6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d101      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x2a>
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	e283      	b.n	80020ce <HAL_ADC_ConfigChannel+0x532>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff fda4 	bl	8001720 <LL_ADC_REG_IsConversionOngoing>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f040 8268 	bne.w	80020b0 <HAL_ADC_ConfigChannel+0x514>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d108      	bne.n	8001bfe <HAL_ADC_ConfigChannel+0x62>
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	0e9b      	lsrs	r3, r3, #26
 8001bf2:	f003 031f 	and.w	r3, r3, #31
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	e00f      	b.n	8001c1e <HAL_ADC_ConfigChannel+0x82>
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c06:	fa93 f3a3 	rbit	r3, r3
 8001c0a:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c0e:	fab3 f383 	clz	r3, r3
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	f003 031f 	and.w	r3, r3, #31
 8001c18:	2201      	movs	r2, #1
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	6812      	ldr	r2, [r2, #0]
 8001c22:	69d1      	ldr	r1, [r2, #28]
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	6812      	ldr	r2, [r2, #0]
 8001c28:	430b      	orrs	r3, r1
 8001c2a:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6818      	ldr	r0, [r3, #0]
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	6859      	ldr	r1, [r3, #4]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	f7ff fc4a 	bl	80014d2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff fd6c 	bl	8001720 <LL_ADC_REG_IsConversionOngoing>
 8001c48:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff fd79 	bl	8001746 <LL_ADC_INJ_IsConversionOngoing>
 8001c54:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f040 80a0 	bne.w	8001d9e <HAL_ADC_ConfigChannel+0x202>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f040 809c 	bne.w	8001d9e <HAL_ADC_ConfigChannel+0x202>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6818      	ldr	r0, [r3, #0]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	6819      	ldr	r1, [r3, #0]
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	461a      	mov	r2, r3
 8001c74:	f7ff fc6c 	bl	8001550 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	f003 0310 	and.w	r3, r3, #16
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10b      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x102>
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	695a      	ldr	r2, [r3, #20]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	089b      	lsrs	r3, r3, #2
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	e00a      	b.n	8001cb4 <HAL_ADC_ConfigChannel+0x118>
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	695a      	ldr	r2, [r3, #20]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	089b      	lsrs	r3, r3, #2
 8001caa:	f003 0304 	and.w	r3, r3, #4
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	d027      	beq.n	8001d0e <HAL_ADC_ConfigChannel+0x172>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6818      	ldr	r0, [r3, #0]
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	6919      	ldr	r1, [r3, #16]
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ccc:	f7ff fb9a 	bl	8001404 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6818      	ldr	r0, [r3, #0]
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	6919      	ldr	r1, [r3, #16]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	7e5b      	ldrb	r3, [r3, #25]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d102      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x14a>
 8001ce0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001ce4:	e000      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x14c>
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	461a      	mov	r2, r3
 8001cea:	f7ff fbc4 	bl	8001476 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6818      	ldr	r0, [r3, #0]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	6919      	ldr	r1, [r3, #16]
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	7e1b      	ldrb	r3, [r3, #24]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d102      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x168>
 8001cfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d02:	e000      	b.n	8001d06 <HAL_ADC_ConfigChannel+0x16a>
 8001d04:	2300      	movs	r3, #0
 8001d06:	461a      	mov	r2, r3
 8001d08:	f7ff fb9c 	bl	8001444 <LL_ADC_SetDataRightShift>
 8001d0c:	e047      	b.n	8001d9e <HAL_ADC_ConfigChannel+0x202>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	069b      	lsls	r3, r3, #26
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d107      	bne.n	8001d32 <HAL_ADC_ConfigChannel+0x196>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d30:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	069b      	lsls	r3, r3, #26
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d107      	bne.n	8001d56 <HAL_ADC_ConfigChannel+0x1ba>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d54:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	069b      	lsls	r3, r3, #26
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d107      	bne.n	8001d7a <HAL_ADC_ConfigChannel+0x1de>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d78:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	069b      	lsls	r3, r3, #26
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d107      	bne.n	8001d9e <HAL_ADC_ConfigChannel+0x202>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d9c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fc94 	bl	80016d0 <LL_ADC_IsEnabled>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f040 8189 	bne.w	80020c2 <HAL_ADC_ConfigChannel+0x526>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6818      	ldr	r0, [r3, #0]
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	6819      	ldr	r1, [r3, #0]
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	f7ff fbf3 	bl	80015a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	4a1d      	ldr	r2, [pc, #116]	; (8001e3c <HAL_ADC_ConfigChannel+0x2a0>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	f040 80ff 	bne.w	8001fcc <HAL_ADC_ConfigChannel+0x430>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10b      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x25a>
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	0e9b      	lsrs	r3, r3, #26
 8001de4:	3301      	adds	r3, #1
 8001de6:	f003 031f 	and.w	r3, r3, #31
 8001dea:	2b09      	cmp	r3, #9
 8001dec:	bf94      	ite	ls
 8001dee:	2301      	movls	r3, #1
 8001df0:	2300      	movhi	r3, #0
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	e012      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x280>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dfe:	fa93 f3a3 	rbit	r3, r3
 8001e02:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e06:	fab3 f383 	clz	r3, r3
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	f003 031f 	and.w	r3, r3, #31
 8001e12:	2b09      	cmp	r3, #9
 8001e14:	bf94      	ite	ls
 8001e16:	2301      	movls	r3, #1
 8001e18:	2300      	movhi	r3, #0
 8001e1a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d066      	beq.n	8001eee <HAL_ADC_ConfigChannel+0x352>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d109      	bne.n	8001e40 <HAL_ADC_ConfigChannel+0x2a4>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	0e9b      	lsrs	r3, r3, #26
 8001e32:	3301      	adds	r3, #1
 8001e34:	069b      	lsls	r3, r3, #26
 8001e36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e3a:	e010      	b.n	8001e5e <HAL_ADC_ConfigChannel+0x2c2>
 8001e3c:	47ff0000 	.word	0x47ff0000
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e48:	fa93 f3a3 	rbit	r3, r3
 8001e4c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e50:	fab3 f383 	clz	r3, r3
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	3301      	adds	r3, #1
 8001e58:	069b      	lsls	r3, r3, #26
 8001e5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d109      	bne.n	8001e7e <HAL_ADC_ConfigChannel+0x2e2>
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	0e9b      	lsrs	r3, r3, #26
 8001e70:	3301      	adds	r3, #1
 8001e72:	f003 031f 	and.w	r3, r3, #31
 8001e76:	2101      	movs	r1, #1
 8001e78:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7c:	e010      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x304>
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e86:	fa93 f3a3 	rbit	r3, r3
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e8e:	fab3 f383 	clz	r3, r3
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	3301      	adds	r3, #1
 8001e96:	f003 031f 	and.w	r3, r3, #31
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea0:	ea42 0103 	orr.w	r1, r2, r3
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10a      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x32a>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	0e9b      	lsrs	r3, r3, #26
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	f003 021f 	and.w	r2, r3, #31
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	4413      	add	r3, r2
 8001ec2:	051b      	lsls	r3, r3, #20
 8001ec4:	e011      	b.n	8001eea <HAL_ADC_ConfigChannel+0x34e>
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ece:	fa93 f3a3 	rbit	r3, r3
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	fab3 f383 	clz	r3, r3
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	3301      	adds	r3, #1
 8001ede:	f003 021f 	and.w	r2, r3, #31
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	4413      	add	r3, r2
 8001ee8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001eea:	430b      	orrs	r3, r1
 8001eec:	e069      	b.n	8001fc2 <HAL_ADC_ConfigChannel+0x426>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d107      	bne.n	8001f0a <HAL_ADC_ConfigChannel+0x36e>
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	0e9b      	lsrs	r3, r3, #26
 8001f00:	3301      	adds	r3, #1
 8001f02:	069b      	lsls	r3, r3, #26
 8001f04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f08:	e00e      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x38c>
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f10:	6a3b      	ldr	r3, [r7, #32]
 8001f12:	fa93 f3a3 	rbit	r3, r3
 8001f16:	61fb      	str	r3, [r7, #28]
  return result;
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	fab3 f383 	clz	r3, r3
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	3301      	adds	r3, #1
 8001f22:	069b      	lsls	r3, r3, #26
 8001f24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d109      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x3ac>
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	0e9b      	lsrs	r3, r3, #26
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	f003 031f 	and.w	r3, r3, #31
 8001f40:	2101      	movs	r1, #1
 8001f42:	fa01 f303 	lsl.w	r3, r1, r3
 8001f46:	e010      	b.n	8001f6a <HAL_ADC_ConfigChannel+0x3ce>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	fa93 f3a3 	rbit	r3, r3
 8001f54:	617b      	str	r3, [r7, #20]
  return result;
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	fab3 f383 	clz	r3, r3
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	3301      	adds	r3, #1
 8001f60:	f003 031f 	and.w	r3, r3, #31
 8001f64:	2101      	movs	r1, #1
 8001f66:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6a:	ea42 0103 	orr.w	r1, r2, r3
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10d      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x3fa>
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	0e9b      	lsrs	r3, r3, #26
 8001f80:	3301      	adds	r3, #1
 8001f82:	f003 021f 	and.w	r2, r3, #31
 8001f86:	4613      	mov	r3, r2
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	4413      	add	r3, r2
 8001f8c:	3b1e      	subs	r3, #30
 8001f8e:	051b      	lsls	r3, r3, #20
 8001f90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f94:	e014      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x424>
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	fa93 f3a3 	rbit	r3, r3
 8001fa2:	60fb      	str	r3, [r7, #12]
  return result;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	fab3 f383 	clz	r3, r3
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	3301      	adds	r3, #1
 8001fae:	f003 021f 	and.w	r2, r3, #31
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3b1e      	subs	r3, #30
 8001fba:	051b      	lsls	r3, r3, #20
 8001fbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fc0:	430b      	orrs	r3, r1
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	6892      	ldr	r2, [r2, #8]
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f7ff fac2 	bl	8001550 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	da76      	bge.n	80020c2 <HAL_ADC_ConfigChannel+0x526>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fd4:	4840      	ldr	r0, [pc, #256]	; (80020d8 <HAL_ADC_ConfigChannel+0x53c>)
 8001fd6:	f7ff fa07 	bl	80013e8 <LL_ADC_GetCommonPathInternalCh>
 8001fda:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fdc:	483f      	ldr	r0, [pc, #252]	; (80020dc <HAL_ADC_ConfigChannel+0x540>)
 8001fde:	f7ff fb77 	bl	80016d0 <LL_ADC_IsEnabled>
 8001fe2:	4604      	mov	r4, r0
 8001fe4:	483e      	ldr	r0, [pc, #248]	; (80020e0 <HAL_ADC_ConfigChannel+0x544>)
 8001fe6:	f7ff fb73 	bl	80016d0 <LL_ADC_IsEnabled>
 8001fea:	4603      	mov	r3, r0
 8001fec:	4323      	orrs	r3, r4
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d154      	bne.n	800209c <HAL_ADC_ConfigChannel+0x500>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a3b      	ldr	r2, [pc, #236]	; (80020e4 <HAL_ADC_ConfigChannel+0x548>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d121      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x4a4>
 8001ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ffe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d11c      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x4a4>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a35      	ldr	r2, [pc, #212]	; (80020e0 <HAL_ADC_ConfigChannel+0x544>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d158      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002012:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002016:	4619      	mov	r1, r3
 8002018:	482f      	ldr	r0, [pc, #188]	; (80020d8 <HAL_ADC_ConfigChannel+0x53c>)
 800201a:	f7ff f9d2 	bl	80013c2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800201e:	4b32      	ldr	r3, [pc, #200]	; (80020e8 <HAL_ADC_ConfigChannel+0x54c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	099b      	lsrs	r3, r3, #6
 8002024:	4a31      	ldr	r2, [pc, #196]	; (80020ec <HAL_ADC_ConfigChannel+0x550>)
 8002026:	fba2 2303 	umull	r2, r3, r2, r3
 800202a:	099b      	lsrs	r3, r3, #6
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002030:	e002      	b.n	8002038 <HAL_ADC_ConfigChannel+0x49c>
              {
                wait_loop_index--;
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	3b01      	subs	r3, #1
 8002036:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f9      	bne.n	8002032 <HAL_ADC_ConfigChannel+0x496>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800203e:	e040      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x526>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a2a      	ldr	r2, [pc, #168]	; (80020f0 <HAL_ADC_ConfigChannel+0x554>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d111      	bne.n	800206e <HAL_ADC_ConfigChannel+0x4d2>
 800204a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800204c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10c      	bne.n	800206e <HAL_ADC_ConfigChannel+0x4d2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a21      	ldr	r2, [pc, #132]	; (80020e0 <HAL_ADC_ConfigChannel+0x544>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d131      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800205e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002060:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002064:	4619      	mov	r1, r3
 8002066:	481c      	ldr	r0, [pc, #112]	; (80020d8 <HAL_ADC_ConfigChannel+0x53c>)
 8002068:	f7ff f9ab 	bl	80013c2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800206c:	e029      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x526>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a20      	ldr	r2, [pc, #128]	; (80020f4 <HAL_ADC_ConfigChannel+0x558>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d124      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x526>
 8002078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800207a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d11f      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x526>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a16      	ldr	r2, [pc, #88]	; (80020e0 <HAL_ADC_ConfigChannel+0x544>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d11a      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800208c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800208e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002092:	4619      	mov	r1, r3
 8002094:	4810      	ldr	r0, [pc, #64]	; (80020d8 <HAL_ADC_ConfigChannel+0x53c>)
 8002096:	f7ff f994 	bl	80013c2 <LL_ADC_SetCommonPathInternalCh>
 800209a:	e012      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x526>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a0:	f043 0220 	orr.w	r2, r3, #32
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80020ae:	e008      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x526>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b4:	f043 0220 	orr.w	r2, r3, #32
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80020ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3764      	adds	r7, #100	; 0x64
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd90      	pop	{r4, r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40022300 	.word	0x40022300
 80020dc:	40022000 	.word	0x40022000
 80020e0:	40022100 	.word	0x40022100
 80020e4:	cb840000 	.word	0xcb840000
 80020e8:	24000000 	.word	0x24000000
 80020ec:	053e2d63 	.word	0x053e2d63
 80020f0:	bac04000 	.word	0xbac04000
 80020f4:	cfb80000 	.word	0xcfb80000

080020f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff fae3 	bl	80016d0 <LL_ADC_IsEnabled>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d15a      	bne.n	80021c6 <ADC_Enable+0xce>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	4b2e      	ldr	r3, [pc, #184]	; (80021d0 <ADC_Enable+0xd8>)
 8002118:	4013      	ands	r3, r2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00d      	beq.n	800213a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002122:	f043 0210 	orr.w	r2, r3, #16
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212e:	f043 0201 	orr.w	r2, r3, #1
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e046      	b.n	80021c8 <ADC_Enable+0xd0>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fab2 	bl	80016a8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002144:	f7ff f8fc 	bl	8001340 <HAL_GetTick>
 8002148:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800214a:	4822      	ldr	r0, [pc, #136]	; (80021d4 <ADC_Enable+0xdc>)
 800214c:	f7ff fa50 	bl	80015f0 <LL_ADC_GetMultimode>
 8002150:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a20      	ldr	r2, [pc, #128]	; (80021d8 <ADC_Enable+0xe0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d002      	beq.n	8002162 <ADC_Enable+0x6a>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	e000      	b.n	8002164 <ADC_Enable+0x6c>
 8002162:	4b1e      	ldr	r3, [pc, #120]	; (80021dc <ADC_Enable+0xe4>)
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6812      	ldr	r2, [r2, #0]
 8002168:	4293      	cmp	r3, r2
 800216a:	d025      	beq.n	80021b8 <ADC_Enable+0xc0>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d129      	bne.n	80021c6 <ADC_Enable+0xce>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002172:	e021      	b.n	80021b8 <ADC_Enable+0xc0>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff faa9 	bl	80016d0 <LL_ADC_IsEnabled>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d104      	bne.n	800218e <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff fa8d 	bl	80016a8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800218e:	f7ff f8d7 	bl	8001340 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d90d      	bls.n	80021b8 <ADC_Enable+0xc0>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a0:	f043 0210 	orr.w	r2, r3, #16
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ac:	f043 0201 	orr.w	r2, r3, #1
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e007      	b.n	80021c8 <ADC_Enable+0xd0>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d1d6      	bne.n	8002174 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	8000003f 	.word	0x8000003f
 80021d4:	40022300 	.word	0x40022300
 80021d8:	40022100 	.word	0x40022100
 80021dc:	40022000 	.word	0x40022000

080021e0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ec:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d14b      	bne.n	8002292 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0308 	and.w	r3, r3, #8
 8002210:	2b00      	cmp	r3, #0
 8002212:	d021      	beq.n	8002258 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff f947 	bl	80014ac <LL_ADC_REG_IsTriggerSourceSWStart>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d032      	beq.n	800228a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d12b      	bne.n	800228a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002236:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002242:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d11f      	bne.n	800228a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224e:	f043 0201 	orr.w	r2, r3, #1
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	655a      	str	r2, [r3, #84]	; 0x54
 8002256:	e018      	b.n	800228a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d111      	bne.n	800228a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002276:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d105      	bne.n	800228a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002282:	f043 0201 	orr.w	r2, r3, #1
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f7fe fd58 	bl	8000d40 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002290:	e00e      	b.n	80022b0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002296:	f003 0310 	and.w	r3, r3, #16
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f7ff fc72 	bl	8001b88 <HAL_ADC_ErrorCallback>
}
 80022a4:	e004      	b.n	80022b0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	4798      	blx	r3
}
 80022b0:	bf00      	nop
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f7fe fd2a 	bl	8000d20 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022cc:	bf00      	nop
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f2:	f043 0204 	orr.w	r2, r3, #4
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f7ff fc44 	bl	8001b88 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002300:	bf00      	nop
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002310:	4b56      	ldr	r3, [pc, #344]	; (800246c <ADC_ConfigureBoostMode+0x164>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d01a      	beq.n	8002352 <ADC_ConfigureBoostMode+0x4a>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800231c:	f004 f836 	bl	800638c <HAL_RCC_GetHCLKFreq>
 8002320:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800232a:	d006      	beq.n	800233a <ADC_ConfigureBoostMode+0x32>
 800232c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002330:	d00b      	beq.n	800234a <ADC_ConfigureBoostMode+0x42>
 8002332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002336:	d000      	beq.n	800233a <ADC_ConfigureBoostMode+0x32>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8002338:	e05d      	b.n	80023f6 <ADC_ConfigureBoostMode+0xee>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	0c1b      	lsrs	r3, r3, #16
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	fbb2 f3f3 	udiv	r3, r2, r3
 8002346:	60fb      	str	r3, [r7, #12]
        break;
 8002348:	e055      	b.n	80023f6 <ADC_ConfigureBoostMode+0xee>
        freq /= 4UL;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	089b      	lsrs	r3, r3, #2
 800234e:	60fb      	str	r3, [r7, #12]
        break;
 8002350:	e051      	b.n	80023f6 <ADC_ConfigureBoostMode+0xee>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002352:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002356:	f004 ff29 	bl	80071ac <HAL_RCCEx_GetPeriphCLKFreq>
 800235a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002364:	d02a      	beq.n	80023bc <ADC_ConfigureBoostMode+0xb4>
 8002366:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800236a:	d813      	bhi.n	8002394 <ADC_ConfigureBoostMode+0x8c>
 800236c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002370:	d024      	beq.n	80023bc <ADC_ConfigureBoostMode+0xb4>
 8002372:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002376:	d806      	bhi.n	8002386 <ADC_ConfigureBoostMode+0x7e>
 8002378:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800237c:	d01e      	beq.n	80023bc <ADC_ConfigureBoostMode+0xb4>
 800237e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002382:	d01b      	beq.n	80023bc <ADC_ConfigureBoostMode+0xb4>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8002384:	e037      	b.n	80023f6 <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 8002386:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800238a:	d017      	beq.n	80023bc <ADC_ConfigureBoostMode+0xb4>
 800238c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002390:	d014      	beq.n	80023bc <ADC_ConfigureBoostMode+0xb4>
        break;
 8002392:	e030      	b.n	80023f6 <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 8002394:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002398:	d021      	beq.n	80023de <ADC_ConfigureBoostMode+0xd6>
 800239a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800239e:	d806      	bhi.n	80023ae <ADC_ConfigureBoostMode+0xa6>
 80023a0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80023a4:	d013      	beq.n	80023ce <ADC_ConfigureBoostMode+0xc6>
 80023a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023aa:	d014      	beq.n	80023d6 <ADC_ConfigureBoostMode+0xce>
        break;
 80023ac:	e023      	b.n	80023f6 <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 80023ae:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80023b2:	d018      	beq.n	80023e6 <ADC_ConfigureBoostMode+0xde>
 80023b4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80023b8:	d019      	beq.n	80023ee <ADC_ConfigureBoostMode+0xe6>
        break;
 80023ba:	e01c      	b.n	80023f6 <ADC_ConfigureBoostMode+0xee>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	0c9b      	lsrs	r3, r3, #18
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ca:	60fb      	str	r3, [r7, #12]
        break;
 80023cc:	e013      	b.n	80023f6 <ADC_ConfigureBoostMode+0xee>
        freq /= 16UL;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	091b      	lsrs	r3, r3, #4
 80023d2:	60fb      	str	r3, [r7, #12]
        break;
 80023d4:	e00f      	b.n	80023f6 <ADC_ConfigureBoostMode+0xee>
        freq /= 32UL;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	095b      	lsrs	r3, r3, #5
 80023da:	60fb      	str	r3, [r7, #12]
        break;
 80023dc:	e00b      	b.n	80023f6 <ADC_ConfigureBoostMode+0xee>
        freq /= 64UL;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	099b      	lsrs	r3, r3, #6
 80023e2:	60fb      	str	r3, [r7, #12]
        break;
 80023e4:	e007      	b.n	80023f6 <ADC_ConfigureBoostMode+0xee>
        freq /= 128UL;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	09db      	lsrs	r3, r3, #7
 80023ea:	60fb      	str	r3, [r7, #12]
        break;
 80023ec:	e003      	b.n	80023f6 <ADC_ConfigureBoostMode+0xee>
        freq /= 256UL;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	0a1b      	lsrs	r3, r3, #8
 80023f2:	60fb      	str	r3, [r7, #12]
        break;
 80023f4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	085b      	lsrs	r3, r3, #1
 80023fa:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4a1c      	ldr	r2, [pc, #112]	; (8002470 <ADC_ConfigureBoostMode+0x168>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d808      	bhi.n	8002416 <ADC_ConfigureBoostMode+0x10e>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002412:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002414:	e025      	b.n	8002462 <ADC_ConfigureBoostMode+0x15a>
  else if (freq <= 12500000UL)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	4a16      	ldr	r2, [pc, #88]	; (8002474 <ADC_ConfigureBoostMode+0x16c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d80a      	bhi.n	8002434 <ADC_ConfigureBoostMode+0x12c>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002430:	609a      	str	r2, [r3, #8]
}
 8002432:	e016      	b.n	8002462 <ADC_ConfigureBoostMode+0x15a>
  else if (freq <= 25000000UL)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4a10      	ldr	r2, [pc, #64]	; (8002478 <ADC_ConfigureBoostMode+0x170>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d80a      	bhi.n	8002452 <ADC_ConfigureBoostMode+0x14a>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800244e:	609a      	str	r2, [r3, #8]
}
 8002450:	e007      	b.n	8002462 <ADC_ConfigureBoostMode+0x15a>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002460:	609a      	str	r2, [r3, #8]
}
 8002462:	bf00      	nop
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40022300 	.word	0x40022300
 8002470:	005f5e10 	.word	0x005f5e10
 8002474:	00bebc20 	.word	0x00bebc20
 8002478:	017d7840 	.word	0x017d7840

0800247c <LL_ADC_IsEnabled>:
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b01      	cmp	r3, #1
 800248e:	d101      	bne.n	8002494 <LL_ADC_IsEnabled+0x18>
 8002490:	2301      	movs	r3, #1
 8002492:	e000      	b.n	8002496 <LL_ADC_IsEnabled+0x1a>
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <LL_ADC_REG_IsConversionOngoing>:
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 0304 	and.w	r3, r3, #4
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	d101      	bne.n	80024ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80024c8:	b590      	push	{r4, r7, lr}
 80024ca:	b09f      	sub	sp, #124	; 0x7c
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024d2:	2300      	movs	r3, #0
 80024d4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d101      	bne.n	80024e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80024e2:	2302      	movs	r3, #2
 80024e4:	e07c      	b.n	80025e0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a3d      	ldr	r2, [pc, #244]	; (80025e8 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d102      	bne.n	80024fe <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80024f8:	4b3c      	ldr	r3, [pc, #240]	; (80025ec <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 80024fa:	60bb      	str	r3, [r7, #8]
 80024fc:	e001      	b.n	8002502 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80024fe:	2300      	movs	r3, #0
 8002500:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10b      	bne.n	8002520 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250c:	f043 0220 	orr.w	r2, r3, #32
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e05f      	b.n	80025e0 <HAL_ADCEx_MultiModeConfigChannel+0x118>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff ffbd 	bl	80024a2 <LL_ADC_REG_IsConversionOngoing>
 8002528:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff ffb7 	bl	80024a2 <LL_ADC_REG_IsConversionOngoing>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d141      	bne.n	80025be <HAL_ADCEx_MultiModeConfigChannel+0xf6>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800253a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800253c:	2b00      	cmp	r3, #0
 800253e:	d13e      	bne.n	80025be <HAL_ADCEx_MultiModeConfigChannel+0xf6>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002540:	4b2b      	ldr	r3, [pc, #172]	; (80025f0 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002542:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d020      	beq.n	800258e <HAL_ADCEx_MultiModeConfigChannel+0xc6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800254c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	431a      	orrs	r2, r3
 800255a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800255c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800255e:	4822      	ldr	r0, [pc, #136]	; (80025e8 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8002560:	f7ff ff8c 	bl	800247c <LL_ADC_IsEnabled>
 8002564:	4604      	mov	r4, r0
 8002566:	4821      	ldr	r0, [pc, #132]	; (80025ec <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 8002568:	f7ff ff88 	bl	800247c <LL_ADC_IsEnabled>
 800256c:	4603      	mov	r3, r0
 800256e:	4323      	orrs	r3, r4
 8002570:	2b00      	cmp	r3, #0
 8002572:	d12e      	bne.n	80025d2 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	4b1e      	ldr	r3, [pc, #120]	; (80025f4 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800257a:	4013      	ands	r3, r2
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	6811      	ldr	r1, [r2, #0]
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	6892      	ldr	r2, [r2, #8]
 8002584:	430a      	orrs	r2, r1
 8002586:	431a      	orrs	r2, r3
 8002588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800258a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800258c:	e021      	b.n	80025d2 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800258e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002598:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800259a:	4813      	ldr	r0, [pc, #76]	; (80025e8 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 800259c:	f7ff ff6e 	bl	800247c <LL_ADC_IsEnabled>
 80025a0:	4604      	mov	r4, r0
 80025a2:	4812      	ldr	r0, [pc, #72]	; (80025ec <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 80025a4:	f7ff ff6a 	bl	800247c <LL_ADC_IsEnabled>
 80025a8:	4603      	mov	r3, r0
 80025aa:	4323      	orrs	r3, r4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d110      	bne.n	80025d2 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80025b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80025ba:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025bc:	e009      	b.n	80025d2 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c2:	f043 0220 	orr.w	r2, r3, #32
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80025d0:	e000      	b.n	80025d4 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025d2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80025dc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	377c      	adds	r7, #124	; 0x7c
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd90      	pop	{r4, r7, pc}
 80025e8:	40022000 	.word	0x40022000
 80025ec:	40022100 	.word	0x40022100
 80025f0:	40022300 	.word	0x40022300
 80025f4:	fffff0e0 	.word	0xfffff0e0

080025f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002608:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <__NVIC_SetPriorityGrouping+0x40>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800260e:	68ba      	ldr	r2, [r7, #8]
 8002610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002614:	4013      	ands	r3, r2
 8002616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <__NVIC_SetPriorityGrouping+0x44>)
 8002622:	4313      	orrs	r3, r2
 8002624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002626:	4a04      	ldr	r2, [pc, #16]	; (8002638 <__NVIC_SetPriorityGrouping+0x40>)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	60d3      	str	r3, [r2, #12]
}
 800262c:	bf00      	nop
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000ed00 	.word	0xe000ed00
 800263c:	05fa0000 	.word	0x05fa0000

08002640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002644:	4b04      	ldr	r3, [pc, #16]	; (8002658 <__NVIC_GetPriorityGrouping+0x18>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	0a1b      	lsrs	r3, r3, #8
 800264a:	f003 0307 	and.w	r3, r3, #7
}
 800264e:	4618      	mov	r0, r3
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	e000ed00 	.word	0xe000ed00

0800265c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002666:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800266a:	2b00      	cmp	r3, #0
 800266c:	db0b      	blt.n	8002686 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800266e:	88fb      	ldrh	r3, [r7, #6]
 8002670:	f003 021f 	and.w	r2, r3, #31
 8002674:	4907      	ldr	r1, [pc, #28]	; (8002694 <__NVIC_EnableIRQ+0x38>)
 8002676:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800267a:	095b      	lsrs	r3, r3, #5
 800267c:	2001      	movs	r0, #1
 800267e:	fa00 f202 	lsl.w	r2, r0, r2
 8002682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	e000e100 	.word	0xe000e100

08002698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	6039      	str	r1, [r7, #0]
 80026a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	db0a      	blt.n	80026c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	b2da      	uxtb	r2, r3
 80026b0:	490c      	ldr	r1, [pc, #48]	; (80026e4 <__NVIC_SetPriority+0x4c>)
 80026b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026b6:	0112      	lsls	r2, r2, #4
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	440b      	add	r3, r1
 80026bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026c0:	e00a      	b.n	80026d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	4908      	ldr	r1, [pc, #32]	; (80026e8 <__NVIC_SetPriority+0x50>)
 80026c8:	88fb      	ldrh	r3, [r7, #6]
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	3b04      	subs	r3, #4
 80026d0:	0112      	lsls	r2, r2, #4
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	440b      	add	r3, r1
 80026d6:	761a      	strb	r2, [r3, #24]
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	e000e100 	.word	0xe000e100
 80026e8:	e000ed00 	.word	0xe000ed00

080026ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b089      	sub	sp, #36	; 0x24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f1c3 0307 	rsb	r3, r3, #7
 8002706:	2b04      	cmp	r3, #4
 8002708:	bf28      	it	cs
 800270a:	2304      	movcs	r3, #4
 800270c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	3304      	adds	r3, #4
 8002712:	2b06      	cmp	r3, #6
 8002714:	d902      	bls.n	800271c <NVIC_EncodePriority+0x30>
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	3b03      	subs	r3, #3
 800271a:	e000      	b.n	800271e <NVIC_EncodePriority+0x32>
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002720:	f04f 32ff 	mov.w	r2, #4294967295
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43da      	mvns	r2, r3
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	401a      	ands	r2, r3
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002734:	f04f 31ff 	mov.w	r1, #4294967295
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	fa01 f303 	lsl.w	r3, r1, r3
 800273e:	43d9      	mvns	r1, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002744:	4313      	orrs	r3, r2
         );
}
 8002746:	4618      	mov	r0, r3
 8002748:	3724      	adds	r7, #36	; 0x24
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
	...

08002754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3b01      	subs	r3, #1
 8002760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002764:	d301      	bcc.n	800276a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002766:	2301      	movs	r3, #1
 8002768:	e00f      	b.n	800278a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800276a:	4a0a      	ldr	r2, [pc, #40]	; (8002794 <SysTick_Config+0x40>)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3b01      	subs	r3, #1
 8002770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002772:	210f      	movs	r1, #15
 8002774:	f04f 30ff 	mov.w	r0, #4294967295
 8002778:	f7ff ff8e 	bl	8002698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800277c:	4b05      	ldr	r3, [pc, #20]	; (8002794 <SysTick_Config+0x40>)
 800277e:	2200      	movs	r2, #0
 8002780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002782:	4b04      	ldr	r3, [pc, #16]	; (8002794 <SysTick_Config+0x40>)
 8002784:	2207      	movs	r2, #7
 8002786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	e000e010 	.word	0xe000e010

08002798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f7ff ff29 	bl	80025f8 <__NVIC_SetPriorityGrouping>
}
 80027a6:	bf00      	nop
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b086      	sub	sp, #24
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	4603      	mov	r3, r0
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	607a      	str	r2, [r7, #4]
 80027ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027bc:	f7ff ff40 	bl	8002640 <__NVIC_GetPriorityGrouping>
 80027c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	68b9      	ldr	r1, [r7, #8]
 80027c6:	6978      	ldr	r0, [r7, #20]
 80027c8:	f7ff ff90 	bl	80026ec <NVIC_EncodePriority>
 80027cc:	4602      	mov	r2, r0
 80027ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027d2:	4611      	mov	r1, r2
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff ff5f 	bl	8002698 <__NVIC_SetPriority>
}
 80027da:	bf00      	nop
 80027dc:	3718      	adds	r7, #24
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	4603      	mov	r3, r0
 80027ea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff ff33 	bl	800265c <__NVIC_EnableIRQ>
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7ff ffa4 	bl	8002754 <SysTick_Config>
 800280c:	4603      	mov	r3, r0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b082      	sub	sp, #8
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e014      	b.n	8002852 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	791b      	ldrb	r3, [r3, #4]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d105      	bne.n	800283e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7fe fb2d 	bl	8000e98 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2202      	movs	r2, #2
 8002842:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
 8002862:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	795b      	ldrb	r3, [r3, #5]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_DAC_Start+0x16>
 800286c:	2302      	movs	r3, #2
 800286e:	e040      	b.n	80028f2 <HAL_DAC_Start+0x98>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2202      	movs	r2, #2
 800287a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6819      	ldr	r1, [r3, #0]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	2201      	movs	r2, #1
 800288a:	409a      	lsls	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	430a      	orrs	r2, r1
 8002892:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10f      	bne.n	80028ba <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d11d      	bne.n	80028e4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0201 	orr.w	r2, r2, #1
 80028b6:	605a      	str	r2, [r3, #4]
 80028b8:	e014      	b.n	80028e4 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	f003 0310 	and.w	r3, r3, #16
 80028ca:	2102      	movs	r1, #2
 80028cc:	fa01 f303 	lsl.w	r3, r1, r3
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d107      	bne.n	80028e4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f042 0202 	orr.w	r2, r2, #2
 80028e2:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
	...

08002900 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
 800290c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800290e:	2300      	movs	r3, #0
 8002910:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	795b      	ldrb	r3, [r3, #5]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_DAC_Start_DMA+0x1e>
 800291a:	2302      	movs	r3, #2
 800291c:	e09e      	b.n	8002a5c <HAL_DAC_Start_DMA+0x15c>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2201      	movs	r2, #1
 8002922:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2202      	movs	r2, #2
 8002928:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d12a      	bne.n	8002986 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	4a4b      	ldr	r2, [pc, #300]	; (8002a64 <HAL_DAC_Start_DMA+0x164>)
 8002936:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	4a4a      	ldr	r2, [pc, #296]	; (8002a68 <HAL_DAC_Start_DMA+0x168>)
 800293e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	4a49      	ldr	r2, [pc, #292]	; (8002a6c <HAL_DAC_Start_DMA+0x16c>)
 8002946:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002956:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	2b04      	cmp	r3, #4
 800295c:	d009      	beq.n	8002972 <HAL_DAC_Start_DMA+0x72>
 800295e:	2b08      	cmp	r3, #8
 8002960:	d00c      	beq.n	800297c <HAL_DAC_Start_DMA+0x7c>
 8002962:	2b00      	cmp	r3, #0
 8002964:	d000      	beq.n	8002968 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002966:	e039      	b.n	80029dc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	3308      	adds	r3, #8
 800296e:	613b      	str	r3, [r7, #16]
        break;
 8002970:	e034      	b.n	80029dc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	330c      	adds	r3, #12
 8002978:	613b      	str	r3, [r7, #16]
        break;
 800297a:	e02f      	b.n	80029dc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	3310      	adds	r3, #16
 8002982:	613b      	str	r3, [r7, #16]
        break;
 8002984:	e02a      	b.n	80029dc <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	4a39      	ldr	r2, [pc, #228]	; (8002a70 <HAL_DAC_Start_DMA+0x170>)
 800298c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	4a38      	ldr	r2, [pc, #224]	; (8002a74 <HAL_DAC_Start_DMA+0x174>)
 8002994:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	4a37      	ldr	r2, [pc, #220]	; (8002a78 <HAL_DAC_Start_DMA+0x178>)
 800299c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80029ac:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	2b04      	cmp	r3, #4
 80029b2:	d009      	beq.n	80029c8 <HAL_DAC_Start_DMA+0xc8>
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	d00c      	beq.n	80029d2 <HAL_DAC_Start_DMA+0xd2>
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d000      	beq.n	80029be <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80029bc:	e00e      	b.n	80029dc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	3314      	adds	r3, #20
 80029c4:	613b      	str	r3, [r7, #16]
        break;
 80029c6:	e009      	b.n	80029dc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	3318      	adds	r3, #24
 80029ce:	613b      	str	r3, [r7, #16]
        break;
 80029d0:	e004      	b.n	80029dc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	331c      	adds	r3, #28
 80029d8:	613b      	str	r3, [r7, #16]
        break;
 80029da:	bf00      	nop
    }
  }

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d111      	bne.n	8002a06 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029f0:	601a      	str	r2, [r3, #0]

   /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6898      	ldr	r0, [r3, #8]
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	f000 fda6 	bl	800354c <HAL_DMA_Start_IT>
 8002a00:	4603      	mov	r3, r0
 8002a02:	75fb      	strb	r3, [r7, #23]
 8002a04:	e010      	b.n	8002a28 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002a14:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	68d8      	ldr	r0, [r3, #12]
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	f000 fd94 	bl	800354c <HAL_DMA_Start_IT>
 8002a24:	4603      	mov	r3, r0
 8002a26:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002a2e:	7dfb      	ldrb	r3, [r7, #23]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10c      	bne.n	8002a4e <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6819      	ldr	r1, [r3, #0]
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f003 0310 	and.w	r3, r3, #16
 8002a40:	2201      	movs	r2, #1
 8002a42:	409a      	lsls	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	e005      	b.n	8002a5a <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	f043 0204 	orr.w	r2, r3, #4
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3718      	adds	r7, #24
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	08002d19 	.word	0x08002d19
 8002a68:	08002d3b 	.word	0x08002d3b
 8002a6c:	08002d57 	.word	0x08002d57
 8002a70:	08002dc1 	.word	0x08002dc1
 8002a74:	08002de3 	.word	0x08002de3
 8002a78:	08002dff 	.word	0x08002dff

08002a7c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b088      	sub	sp, #32
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	795b      	ldrb	r3, [r3, #5]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d101      	bne.n	8002ad0 <HAL_DAC_ConfigChannel+0x18>
 8002acc:	2302      	movs	r3, #2
 8002ace:	e11d      	b.n	8002d0c <HAL_DAC_ConfigChannel+0x254>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2202      	movs	r2, #2
 8002ada:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2b04      	cmp	r3, #4
 8002ae2:	d174      	bne.n	8002bce <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002ae4:	f7fe fc2c 	bl	8001340 <HAL_GetTick>
 8002ae8:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d134      	bne.n	8002b5a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002af0:	e011      	b.n	8002b16 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002af2:	f7fe fc25 	bl	8001340 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d90a      	bls.n	8002b16 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	f043 0208 	orr.w	r2, r3, #8
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2203      	movs	r2, #3
 8002b10:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e0fa      	b.n	8002d0c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b1c:	4b7d      	ldr	r3, [pc, #500]	; (8002d14 <HAL_DAC_ConfigChannel+0x25c>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1e6      	bne.n	8002af2 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8002b24:	2001      	movs	r0, #1
 8002b26:	f7fe fc17 	bl	8001358 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	6992      	ldr	r2, [r2, #24]
 8002b32:	641a      	str	r2, [r3, #64]	; 0x40
 8002b34:	e01e      	b.n	8002b74 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002b36:	f7fe fc03 	bl	8001340 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d90a      	bls.n	8002b5a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	f043 0208 	orr.w	r2, r3, #8
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2203      	movs	r2, #3
 8002b54:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e0d8      	b.n	8002d0c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	dbe8      	blt.n	8002b36 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8002b64:	2001      	movs	r0, #1
 8002b66:	f7fe fbf7 	bl	8001358 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	6992      	ldr	r2, [r2, #24]
 8002b72:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f003 0310 	and.w	r3, r3, #16
 8002b80:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002b84:	fa01 f303 	lsl.w	r3, r1, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	ea02 0103 	and.w	r1, r2, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	69da      	ldr	r2, [r3, #28]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f003 0310 	and.w	r3, r3, #16
 8002b98:	409a      	lsls	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f003 0310 	and.w	r3, r3, #16
 8002bae:	21ff      	movs	r1, #255	; 0xff
 8002bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	ea02 0103 	and.w	r1, r2, r3
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	6a1a      	ldr	r2, [r3, #32]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f003 0310 	and.w	r3, r3, #16
 8002bc4:	409a      	lsls	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d11d      	bne.n	8002c12 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bdc:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	221f      	movs	r2, #31
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	43db      	mvns	r3, r3
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f003 0310 	and.w	r3, r3, #16
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c18:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f003 0310 	and.w	r3, r3, #16
 8002c20:	2207      	movs	r2, #7
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	43db      	mvns	r3, r3
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d102      	bne.n	8002c3c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	61fb      	str	r3, [r7, #28]
 8002c3a:	e00f      	b.n	8002c5c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d102      	bne.n	8002c4a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002c44:	2301      	movs	r3, #1
 8002c46:	61fb      	str	r3, [r7, #28]
 8002c48:	e008      	b.n	8002c5c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d102      	bne.n	8002c58 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002c52:	2301      	movs	r3, #1
 8002c54:	61fb      	str	r3, [r7, #28]
 8002c56:	e001      	b.n	8002c5c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	69fa      	ldr	r2, [r7, #28]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f003 0310 	and.w	r3, r3, #16
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6819      	ldr	r1, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f003 0310 	and.w	r3, r3, #16
 8002c92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	43da      	mvns	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	400a      	ands	r2, r1
 8002ca2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f003 0310 	and.w	r3, r3, #16
 8002cb2:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f003 0310 	and.w	r3, r3, #16
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6819      	ldr	r1, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f003 0310 	and.w	r3, r3, #16
 8002cee:	22c0      	movs	r2, #192	; 0xc0
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43da      	mvns	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	400a      	ands	r2, r1
 8002cfc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2201      	movs	r2, #1
 8002d02:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3720      	adds	r7, #32
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	20008000 	.word	0x20008000

08002d18 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d24:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f7ff fea8 	bl	8002a7c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	711a      	strb	r2, [r3, #4]
}
 8002d32:	bf00      	nop
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b084      	sub	sp, #16
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d46:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f7ff fea1 	bl	8002a90 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002d4e:	bf00      	nop
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b084      	sub	sp, #16
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d62:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	f043 0204 	orr.w	r2, r3, #4
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f7ff fe97 	bl	8002aa4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	711a      	strb	r2, [r3, #4]
}
 8002d7c:	bf00      	nop
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dcc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f7ff ffd8 	bl	8002d84 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	711a      	strb	r2, [r3, #4]
}
 8002dda:	bf00      	nop
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b084      	sub	sp, #16
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dee:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f7ff ffd1 	bl	8002d98 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002df6:	bf00      	nop
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b084      	sub	sp, #16
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	f043 0204 	orr.w	r2, r3, #4
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f7ff ffc7 	bl	8002dac <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2201      	movs	r2, #1
 8002e22:	711a      	strb	r2, [r3, #4]
}
 8002e24:	bf00      	nop
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002e34:	f7fe fa84 	bl	8001340 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e37f      	b.n	8003544 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a66      	ldr	r2, [pc, #408]	; (8002fe4 <HAL_DMA_Init+0x1b8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d04a      	beq.n	8002ee4 <HAL_DMA_Init+0xb8>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a65      	ldr	r2, [pc, #404]	; (8002fe8 <HAL_DMA_Init+0x1bc>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d045      	beq.n	8002ee4 <HAL_DMA_Init+0xb8>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a63      	ldr	r2, [pc, #396]	; (8002fec <HAL_DMA_Init+0x1c0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d040      	beq.n	8002ee4 <HAL_DMA_Init+0xb8>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a62      	ldr	r2, [pc, #392]	; (8002ff0 <HAL_DMA_Init+0x1c4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d03b      	beq.n	8002ee4 <HAL_DMA_Init+0xb8>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a60      	ldr	r2, [pc, #384]	; (8002ff4 <HAL_DMA_Init+0x1c8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d036      	beq.n	8002ee4 <HAL_DMA_Init+0xb8>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a5f      	ldr	r2, [pc, #380]	; (8002ff8 <HAL_DMA_Init+0x1cc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d031      	beq.n	8002ee4 <HAL_DMA_Init+0xb8>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a5d      	ldr	r2, [pc, #372]	; (8002ffc <HAL_DMA_Init+0x1d0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d02c      	beq.n	8002ee4 <HAL_DMA_Init+0xb8>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a5c      	ldr	r2, [pc, #368]	; (8003000 <HAL_DMA_Init+0x1d4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d027      	beq.n	8002ee4 <HAL_DMA_Init+0xb8>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a5a      	ldr	r2, [pc, #360]	; (8003004 <HAL_DMA_Init+0x1d8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d022      	beq.n	8002ee4 <HAL_DMA_Init+0xb8>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a59      	ldr	r2, [pc, #356]	; (8003008 <HAL_DMA_Init+0x1dc>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d01d      	beq.n	8002ee4 <HAL_DMA_Init+0xb8>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a57      	ldr	r2, [pc, #348]	; (800300c <HAL_DMA_Init+0x1e0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d018      	beq.n	8002ee4 <HAL_DMA_Init+0xb8>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a56      	ldr	r2, [pc, #344]	; (8003010 <HAL_DMA_Init+0x1e4>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d013      	beq.n	8002ee4 <HAL_DMA_Init+0xb8>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a54      	ldr	r2, [pc, #336]	; (8003014 <HAL_DMA_Init+0x1e8>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d00e      	beq.n	8002ee4 <HAL_DMA_Init+0xb8>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a53      	ldr	r2, [pc, #332]	; (8003018 <HAL_DMA_Init+0x1ec>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d009      	beq.n	8002ee4 <HAL_DMA_Init+0xb8>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a51      	ldr	r2, [pc, #324]	; (800301c <HAL_DMA_Init+0x1f0>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d004      	beq.n	8002ee4 <HAL_DMA_Init+0xb8>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a50      	ldr	r2, [pc, #320]	; (8003020 <HAL_DMA_Init+0x1f4>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d101      	bne.n	8002ee8 <HAL_DMA_Init+0xbc>
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e000      	b.n	8002eea <HAL_DMA_Init+0xbe>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 813c 	beq.w	8003168 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a37      	ldr	r2, [pc, #220]	; (8002fe4 <HAL_DMA_Init+0x1b8>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d04a      	beq.n	8002fa0 <HAL_DMA_Init+0x174>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a36      	ldr	r2, [pc, #216]	; (8002fe8 <HAL_DMA_Init+0x1bc>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d045      	beq.n	8002fa0 <HAL_DMA_Init+0x174>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a34      	ldr	r2, [pc, #208]	; (8002fec <HAL_DMA_Init+0x1c0>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d040      	beq.n	8002fa0 <HAL_DMA_Init+0x174>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a33      	ldr	r2, [pc, #204]	; (8002ff0 <HAL_DMA_Init+0x1c4>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d03b      	beq.n	8002fa0 <HAL_DMA_Init+0x174>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a31      	ldr	r2, [pc, #196]	; (8002ff4 <HAL_DMA_Init+0x1c8>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d036      	beq.n	8002fa0 <HAL_DMA_Init+0x174>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a30      	ldr	r2, [pc, #192]	; (8002ff8 <HAL_DMA_Init+0x1cc>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d031      	beq.n	8002fa0 <HAL_DMA_Init+0x174>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a2e      	ldr	r2, [pc, #184]	; (8002ffc <HAL_DMA_Init+0x1d0>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d02c      	beq.n	8002fa0 <HAL_DMA_Init+0x174>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a2d      	ldr	r2, [pc, #180]	; (8003000 <HAL_DMA_Init+0x1d4>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d027      	beq.n	8002fa0 <HAL_DMA_Init+0x174>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a2b      	ldr	r2, [pc, #172]	; (8003004 <HAL_DMA_Init+0x1d8>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d022      	beq.n	8002fa0 <HAL_DMA_Init+0x174>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a2a      	ldr	r2, [pc, #168]	; (8003008 <HAL_DMA_Init+0x1dc>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d01d      	beq.n	8002fa0 <HAL_DMA_Init+0x174>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a28      	ldr	r2, [pc, #160]	; (800300c <HAL_DMA_Init+0x1e0>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d018      	beq.n	8002fa0 <HAL_DMA_Init+0x174>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a27      	ldr	r2, [pc, #156]	; (8003010 <HAL_DMA_Init+0x1e4>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d013      	beq.n	8002fa0 <HAL_DMA_Init+0x174>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a25      	ldr	r2, [pc, #148]	; (8003014 <HAL_DMA_Init+0x1e8>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d00e      	beq.n	8002fa0 <HAL_DMA_Init+0x174>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a24      	ldr	r2, [pc, #144]	; (8003018 <HAL_DMA_Init+0x1ec>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d009      	beq.n	8002fa0 <HAL_DMA_Init+0x174>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a22      	ldr	r2, [pc, #136]	; (800301c <HAL_DMA_Init+0x1f0>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d004      	beq.n	8002fa0 <HAL_DMA_Init+0x174>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a21      	ldr	r2, [pc, #132]	; (8003020 <HAL_DMA_Init+0x1f4>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d108      	bne.n	8002fb2 <HAL_DMA_Init+0x186>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0201 	bic.w	r2, r2, #1
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	e007      	b.n	8002fc2 <HAL_DMA_Init+0x196>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0201 	bic.w	r2, r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002fc2:	e02f      	b.n	8003024 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fc4:	f7fe f9bc 	bl	8001340 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b05      	cmp	r3, #5
 8002fd0:	d928      	bls.n	8003024 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2203      	movs	r2, #3
 8002fdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e2af      	b.n	8003544 <HAL_DMA_Init+0x718>
 8002fe4:	40020010 	.word	0x40020010
 8002fe8:	40020028 	.word	0x40020028
 8002fec:	40020040 	.word	0x40020040
 8002ff0:	40020058 	.word	0x40020058
 8002ff4:	40020070 	.word	0x40020070
 8002ff8:	40020088 	.word	0x40020088
 8002ffc:	400200a0 	.word	0x400200a0
 8003000:	400200b8 	.word	0x400200b8
 8003004:	40020410 	.word	0x40020410
 8003008:	40020428 	.word	0x40020428
 800300c:	40020440 	.word	0x40020440
 8003010:	40020458 	.word	0x40020458
 8003014:	40020470 	.word	0x40020470
 8003018:	40020488 	.word	0x40020488
 800301c:	400204a0 	.word	0x400204a0
 8003020:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1c8      	bne.n	8002fc4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	4b73      	ldr	r3, [pc, #460]	; (800320c <HAL_DMA_Init+0x3e0>)
 800303e:	4013      	ands	r3, r2
 8003040:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800304a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003056:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003062:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	4313      	orrs	r3, r2
 800306e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	2b04      	cmp	r3, #4
 8003076:	d107      	bne.n	8003088 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003080:	4313      	orrs	r3, r2
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	4313      	orrs	r3, r2
 8003086:	617b      	str	r3, [r7, #20]
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	2b28      	cmp	r3, #40	; 0x28
 800308e:	d903      	bls.n	8003098 <HAL_DMA_Init+0x26c>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b2e      	cmp	r3, #46	; 0x2e
 8003096:	d91f      	bls.n	80030d8 <HAL_DMA_Init+0x2ac>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b3e      	cmp	r3, #62	; 0x3e
 800309e:	d903      	bls.n	80030a8 <HAL_DMA_Init+0x27c>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b42      	cmp	r3, #66	; 0x42
 80030a6:	d917      	bls.n	80030d8 <HAL_DMA_Init+0x2ac>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2b46      	cmp	r3, #70	; 0x46
 80030ae:	d903      	bls.n	80030b8 <HAL_DMA_Init+0x28c>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2b48      	cmp	r3, #72	; 0x48
 80030b6:	d90f      	bls.n	80030d8 <HAL_DMA_Init+0x2ac>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2b4e      	cmp	r3, #78	; 0x4e
 80030be:	d903      	bls.n	80030c8 <HAL_DMA_Init+0x29c>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2b52      	cmp	r3, #82	; 0x52
 80030c6:	d907      	bls.n	80030d8 <HAL_DMA_Init+0x2ac>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b73      	cmp	r3, #115	; 0x73
 80030ce:	d905      	bls.n	80030dc <HAL_DMA_Init+0x2b0>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	2b77      	cmp	r3, #119	; 0x77
 80030d6:	d801      	bhi.n	80030dc <HAL_DMA_Init+0x2b0>
 80030d8:	2301      	movs	r3, #1
 80030da:	e000      	b.n	80030de <HAL_DMA_Init+0x2b2>
 80030dc:	2300      	movs	r3, #0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030e8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f023 0307 	bic.w	r3, r3, #7
 8003100:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	4313      	orrs	r3, r2
 800310a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	2b04      	cmp	r3, #4
 8003112:	d117      	bne.n	8003144 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	4313      	orrs	r3, r2
 800311c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00e      	beq.n	8003144 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f001 fe72 	bl	8004e10 <DMA_CheckFifoParam>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d008      	beq.n	8003144 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2240      	movs	r2, #64	; 0x40
 8003136:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e1ff      	b.n	8003544 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f001 fdad 	bl	8004cac <DMA_CalcBaseAndBitshift>
 8003152:	4603      	mov	r3, r0
 8003154:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315a:	f003 031f 	and.w	r3, r3, #31
 800315e:	223f      	movs	r2, #63	; 0x3f
 8003160:	409a      	lsls	r2, r3
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	609a      	str	r2, [r3, #8]
 8003166:	e0fe      	b.n	8003366 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a28      	ldr	r2, [pc, #160]	; (8003210 <HAL_DMA_Init+0x3e4>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d04a      	beq.n	8003208 <HAL_DMA_Init+0x3dc>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a27      	ldr	r2, [pc, #156]	; (8003214 <HAL_DMA_Init+0x3e8>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d045      	beq.n	8003208 <HAL_DMA_Init+0x3dc>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a25      	ldr	r2, [pc, #148]	; (8003218 <HAL_DMA_Init+0x3ec>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d040      	beq.n	8003208 <HAL_DMA_Init+0x3dc>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a24      	ldr	r2, [pc, #144]	; (800321c <HAL_DMA_Init+0x3f0>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d03b      	beq.n	8003208 <HAL_DMA_Init+0x3dc>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a22      	ldr	r2, [pc, #136]	; (8003220 <HAL_DMA_Init+0x3f4>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d036      	beq.n	8003208 <HAL_DMA_Init+0x3dc>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a21      	ldr	r2, [pc, #132]	; (8003224 <HAL_DMA_Init+0x3f8>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d031      	beq.n	8003208 <HAL_DMA_Init+0x3dc>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a1f      	ldr	r2, [pc, #124]	; (8003228 <HAL_DMA_Init+0x3fc>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d02c      	beq.n	8003208 <HAL_DMA_Init+0x3dc>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a1e      	ldr	r2, [pc, #120]	; (800322c <HAL_DMA_Init+0x400>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d027      	beq.n	8003208 <HAL_DMA_Init+0x3dc>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a1c      	ldr	r2, [pc, #112]	; (8003230 <HAL_DMA_Init+0x404>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d022      	beq.n	8003208 <HAL_DMA_Init+0x3dc>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a1b      	ldr	r2, [pc, #108]	; (8003234 <HAL_DMA_Init+0x408>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d01d      	beq.n	8003208 <HAL_DMA_Init+0x3dc>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a19      	ldr	r2, [pc, #100]	; (8003238 <HAL_DMA_Init+0x40c>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d018      	beq.n	8003208 <HAL_DMA_Init+0x3dc>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a18      	ldr	r2, [pc, #96]	; (800323c <HAL_DMA_Init+0x410>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d013      	beq.n	8003208 <HAL_DMA_Init+0x3dc>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a16      	ldr	r2, [pc, #88]	; (8003240 <HAL_DMA_Init+0x414>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d00e      	beq.n	8003208 <HAL_DMA_Init+0x3dc>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a15      	ldr	r2, [pc, #84]	; (8003244 <HAL_DMA_Init+0x418>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d009      	beq.n	8003208 <HAL_DMA_Init+0x3dc>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a13      	ldr	r2, [pc, #76]	; (8003248 <HAL_DMA_Init+0x41c>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d004      	beq.n	8003208 <HAL_DMA_Init+0x3dc>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a12      	ldr	r2, [pc, #72]	; (800324c <HAL_DMA_Init+0x420>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d123      	bne.n	8003250 <HAL_DMA_Init+0x424>
 8003208:	2301      	movs	r3, #1
 800320a:	e022      	b.n	8003252 <HAL_DMA_Init+0x426>
 800320c:	fe10803f 	.word	0xfe10803f
 8003210:	48022c08 	.word	0x48022c08
 8003214:	48022c1c 	.word	0x48022c1c
 8003218:	48022c30 	.word	0x48022c30
 800321c:	48022c44 	.word	0x48022c44
 8003220:	48022c58 	.word	0x48022c58
 8003224:	48022c6c 	.word	0x48022c6c
 8003228:	48022c80 	.word	0x48022c80
 800322c:	48022c94 	.word	0x48022c94
 8003230:	58025408 	.word	0x58025408
 8003234:	5802541c 	.word	0x5802541c
 8003238:	58025430 	.word	0x58025430
 800323c:	58025444 	.word	0x58025444
 8003240:	58025458 	.word	0x58025458
 8003244:	5802546c 	.word	0x5802546c
 8003248:	58025480 	.word	0x58025480
 800324c:	58025494 	.word	0x58025494
 8003250:	2300      	movs	r3, #0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d07e      	beq.n	8003354 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a80      	ldr	r2, [pc, #512]	; (800345c <HAL_DMA_Init+0x630>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d021      	beq.n	80032a4 <HAL_DMA_Init+0x478>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a7e      	ldr	r2, [pc, #504]	; (8003460 <HAL_DMA_Init+0x634>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d01c      	beq.n	80032a4 <HAL_DMA_Init+0x478>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a7d      	ldr	r2, [pc, #500]	; (8003464 <HAL_DMA_Init+0x638>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d017      	beq.n	80032a4 <HAL_DMA_Init+0x478>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a7b      	ldr	r2, [pc, #492]	; (8003468 <HAL_DMA_Init+0x63c>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d012      	beq.n	80032a4 <HAL_DMA_Init+0x478>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a7a      	ldr	r2, [pc, #488]	; (800346c <HAL_DMA_Init+0x640>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d00d      	beq.n	80032a4 <HAL_DMA_Init+0x478>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a78      	ldr	r2, [pc, #480]	; (8003470 <HAL_DMA_Init+0x644>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d008      	beq.n	80032a4 <HAL_DMA_Init+0x478>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a77      	ldr	r2, [pc, #476]	; (8003474 <HAL_DMA_Init+0x648>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d003      	beq.n	80032a4 <HAL_DMA_Init+0x478>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a75      	ldr	r2, [pc, #468]	; (8003478 <HAL_DMA_Init+0x64c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2202      	movs	r2, #2
 80032b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	4b6e      	ldr	r3, [pc, #440]	; (800347c <HAL_DMA_Init+0x650>)
 80032c2:	4013      	ands	r3, r2
 80032c4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	2b40      	cmp	r3, #64	; 0x40
 80032cc:	d008      	beq.n	80032e0 <HAL_DMA_Init+0x4b4>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	2b80      	cmp	r3, #128	; 0x80
 80032d4:	d102      	bne.n	80032dc <HAL_DMA_Init+0x4b0>
 80032d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80032da:	e002      	b.n	80032e2 <HAL_DMA_Init+0x4b6>
 80032dc:	2300      	movs	r3, #0
 80032de:	e000      	b.n	80032e2 <HAL_DMA_Init+0x4b6>
 80032e0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	68d2      	ldr	r2, [r2, #12]
 80032e6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80032e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80032f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80032f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003300:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003308:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003310:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	4313      	orrs	r3, r2
 8003316:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	461a      	mov	r2, r3
 8003326:	4b56      	ldr	r3, [pc, #344]	; (8003480 <HAL_DMA_Init+0x654>)
 8003328:	4413      	add	r3, r2
 800332a:	4a56      	ldr	r2, [pc, #344]	; (8003484 <HAL_DMA_Init+0x658>)
 800332c:	fba2 2303 	umull	r2, r3, r2, r3
 8003330:	091b      	lsrs	r3, r3, #4
 8003332:	009a      	lsls	r2, r3, #2
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f001 fcb7 	bl	8004cac <DMA_CalcBaseAndBitshift>
 800333e:	4603      	mov	r3, r0
 8003340:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003346:	f003 031f 	and.w	r3, r3, #31
 800334a:	2201      	movs	r2, #1
 800334c:	409a      	lsls	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	605a      	str	r2, [r3, #4]
 8003352:	e008      	b.n	8003366 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2240      	movs	r2, #64	; 0x40
 8003358:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2203      	movs	r2, #3
 800335e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e0ee      	b.n	8003544 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a47      	ldr	r2, [pc, #284]	; (8003488 <HAL_DMA_Init+0x65c>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d072      	beq.n	8003456 <HAL_DMA_Init+0x62a>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a45      	ldr	r2, [pc, #276]	; (800348c <HAL_DMA_Init+0x660>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d06d      	beq.n	8003456 <HAL_DMA_Init+0x62a>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a44      	ldr	r2, [pc, #272]	; (8003490 <HAL_DMA_Init+0x664>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d068      	beq.n	8003456 <HAL_DMA_Init+0x62a>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a42      	ldr	r2, [pc, #264]	; (8003494 <HAL_DMA_Init+0x668>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d063      	beq.n	8003456 <HAL_DMA_Init+0x62a>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a41      	ldr	r2, [pc, #260]	; (8003498 <HAL_DMA_Init+0x66c>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d05e      	beq.n	8003456 <HAL_DMA_Init+0x62a>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a3f      	ldr	r2, [pc, #252]	; (800349c <HAL_DMA_Init+0x670>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d059      	beq.n	8003456 <HAL_DMA_Init+0x62a>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a3e      	ldr	r2, [pc, #248]	; (80034a0 <HAL_DMA_Init+0x674>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d054      	beq.n	8003456 <HAL_DMA_Init+0x62a>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a3c      	ldr	r2, [pc, #240]	; (80034a4 <HAL_DMA_Init+0x678>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d04f      	beq.n	8003456 <HAL_DMA_Init+0x62a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a3b      	ldr	r2, [pc, #236]	; (80034a8 <HAL_DMA_Init+0x67c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d04a      	beq.n	8003456 <HAL_DMA_Init+0x62a>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a39      	ldr	r2, [pc, #228]	; (80034ac <HAL_DMA_Init+0x680>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d045      	beq.n	8003456 <HAL_DMA_Init+0x62a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a38      	ldr	r2, [pc, #224]	; (80034b0 <HAL_DMA_Init+0x684>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d040      	beq.n	8003456 <HAL_DMA_Init+0x62a>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a36      	ldr	r2, [pc, #216]	; (80034b4 <HAL_DMA_Init+0x688>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d03b      	beq.n	8003456 <HAL_DMA_Init+0x62a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a35      	ldr	r2, [pc, #212]	; (80034b8 <HAL_DMA_Init+0x68c>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d036      	beq.n	8003456 <HAL_DMA_Init+0x62a>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a33      	ldr	r2, [pc, #204]	; (80034bc <HAL_DMA_Init+0x690>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d031      	beq.n	8003456 <HAL_DMA_Init+0x62a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a32      	ldr	r2, [pc, #200]	; (80034c0 <HAL_DMA_Init+0x694>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d02c      	beq.n	8003456 <HAL_DMA_Init+0x62a>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a30      	ldr	r2, [pc, #192]	; (80034c4 <HAL_DMA_Init+0x698>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d027      	beq.n	8003456 <HAL_DMA_Init+0x62a>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a14      	ldr	r2, [pc, #80]	; (800345c <HAL_DMA_Init+0x630>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d022      	beq.n	8003456 <HAL_DMA_Init+0x62a>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a12      	ldr	r2, [pc, #72]	; (8003460 <HAL_DMA_Init+0x634>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d01d      	beq.n	8003456 <HAL_DMA_Init+0x62a>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a11      	ldr	r2, [pc, #68]	; (8003464 <HAL_DMA_Init+0x638>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d018      	beq.n	8003456 <HAL_DMA_Init+0x62a>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a0f      	ldr	r2, [pc, #60]	; (8003468 <HAL_DMA_Init+0x63c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d013      	beq.n	8003456 <HAL_DMA_Init+0x62a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a0e      	ldr	r2, [pc, #56]	; (800346c <HAL_DMA_Init+0x640>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d00e      	beq.n	8003456 <HAL_DMA_Init+0x62a>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a0c      	ldr	r2, [pc, #48]	; (8003470 <HAL_DMA_Init+0x644>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d009      	beq.n	8003456 <HAL_DMA_Init+0x62a>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a0b      	ldr	r2, [pc, #44]	; (8003474 <HAL_DMA_Init+0x648>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d004      	beq.n	8003456 <HAL_DMA_Init+0x62a>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a09      	ldr	r2, [pc, #36]	; (8003478 <HAL_DMA_Init+0x64c>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d138      	bne.n	80034c8 <HAL_DMA_Init+0x69c>
 8003456:	2301      	movs	r3, #1
 8003458:	e037      	b.n	80034ca <HAL_DMA_Init+0x69e>
 800345a:	bf00      	nop
 800345c:	58025408 	.word	0x58025408
 8003460:	5802541c 	.word	0x5802541c
 8003464:	58025430 	.word	0x58025430
 8003468:	58025444 	.word	0x58025444
 800346c:	58025458 	.word	0x58025458
 8003470:	5802546c 	.word	0x5802546c
 8003474:	58025480 	.word	0x58025480
 8003478:	58025494 	.word	0x58025494
 800347c:	fffe000f 	.word	0xfffe000f
 8003480:	a7fdabf8 	.word	0xa7fdabf8
 8003484:	cccccccd 	.word	0xcccccccd
 8003488:	40020010 	.word	0x40020010
 800348c:	40020028 	.word	0x40020028
 8003490:	40020040 	.word	0x40020040
 8003494:	40020058 	.word	0x40020058
 8003498:	40020070 	.word	0x40020070
 800349c:	40020088 	.word	0x40020088
 80034a0:	400200a0 	.word	0x400200a0
 80034a4:	400200b8 	.word	0x400200b8
 80034a8:	40020410 	.word	0x40020410
 80034ac:	40020428 	.word	0x40020428
 80034b0:	40020440 	.word	0x40020440
 80034b4:	40020458 	.word	0x40020458
 80034b8:	40020470 	.word	0x40020470
 80034bc:	40020488 	.word	0x40020488
 80034c0:	400204a0 	.word	0x400204a0
 80034c4:	400204b8 	.word	0x400204b8
 80034c8:	2300      	movs	r3, #0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d032      	beq.n	8003534 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f001 fd1a 	bl	8004f08 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	2b80      	cmp	r3, #128	; 0x80
 80034da:	d102      	bne.n	80034e2 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80034f6:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d010      	beq.n	8003522 <HAL_DMA_Init+0x6f6>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	2b08      	cmp	r3, #8
 8003506:	d80c      	bhi.n	8003522 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f001 fd97 	bl	800503c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003512:	2200      	movs	r2, #0
 8003514:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800351e:	605a      	str	r2, [r3, #4]
 8003520:	e008      	b.n	8003534 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
 8003558:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800355a:	2300      	movs	r3, #0
 800355c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e226      	b.n	80039b6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800356e:	2b01      	cmp	r3, #1
 8003570:	d101      	bne.n	8003576 <HAL_DMA_Start_IT+0x2a>
 8003572:	2302      	movs	r3, #2
 8003574:	e21f      	b.n	80039b6 <HAL_DMA_Start_IT+0x46a>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b01      	cmp	r3, #1
 8003588:	f040 820a 	bne.w	80039a0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2202      	movs	r2, #2
 8003590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a68      	ldr	r2, [pc, #416]	; (8003740 <HAL_DMA_Start_IT+0x1f4>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d04a      	beq.n	800363a <HAL_DMA_Start_IT+0xee>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a66      	ldr	r2, [pc, #408]	; (8003744 <HAL_DMA_Start_IT+0x1f8>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d045      	beq.n	800363a <HAL_DMA_Start_IT+0xee>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a65      	ldr	r2, [pc, #404]	; (8003748 <HAL_DMA_Start_IT+0x1fc>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d040      	beq.n	800363a <HAL_DMA_Start_IT+0xee>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a63      	ldr	r2, [pc, #396]	; (800374c <HAL_DMA_Start_IT+0x200>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d03b      	beq.n	800363a <HAL_DMA_Start_IT+0xee>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a62      	ldr	r2, [pc, #392]	; (8003750 <HAL_DMA_Start_IT+0x204>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d036      	beq.n	800363a <HAL_DMA_Start_IT+0xee>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a60      	ldr	r2, [pc, #384]	; (8003754 <HAL_DMA_Start_IT+0x208>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d031      	beq.n	800363a <HAL_DMA_Start_IT+0xee>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a5f      	ldr	r2, [pc, #380]	; (8003758 <HAL_DMA_Start_IT+0x20c>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d02c      	beq.n	800363a <HAL_DMA_Start_IT+0xee>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a5d      	ldr	r2, [pc, #372]	; (800375c <HAL_DMA_Start_IT+0x210>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d027      	beq.n	800363a <HAL_DMA_Start_IT+0xee>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a5c      	ldr	r2, [pc, #368]	; (8003760 <HAL_DMA_Start_IT+0x214>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d022      	beq.n	800363a <HAL_DMA_Start_IT+0xee>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a5a      	ldr	r2, [pc, #360]	; (8003764 <HAL_DMA_Start_IT+0x218>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d01d      	beq.n	800363a <HAL_DMA_Start_IT+0xee>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a59      	ldr	r2, [pc, #356]	; (8003768 <HAL_DMA_Start_IT+0x21c>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d018      	beq.n	800363a <HAL_DMA_Start_IT+0xee>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a57      	ldr	r2, [pc, #348]	; (800376c <HAL_DMA_Start_IT+0x220>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d013      	beq.n	800363a <HAL_DMA_Start_IT+0xee>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a56      	ldr	r2, [pc, #344]	; (8003770 <HAL_DMA_Start_IT+0x224>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d00e      	beq.n	800363a <HAL_DMA_Start_IT+0xee>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a54      	ldr	r2, [pc, #336]	; (8003774 <HAL_DMA_Start_IT+0x228>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d009      	beq.n	800363a <HAL_DMA_Start_IT+0xee>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a53      	ldr	r2, [pc, #332]	; (8003778 <HAL_DMA_Start_IT+0x22c>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d004      	beq.n	800363a <HAL_DMA_Start_IT+0xee>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a51      	ldr	r2, [pc, #324]	; (800377c <HAL_DMA_Start_IT+0x230>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d108      	bne.n	800364c <HAL_DMA_Start_IT+0x100>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0201 	bic.w	r2, r2, #1
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	e007      	b.n	800365c <HAL_DMA_Start_IT+0x110>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0201 	bic.w	r2, r2, #1
 800365a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	68b9      	ldr	r1, [r7, #8]
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f001 f93e 	bl	80048e4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a34      	ldr	r2, [pc, #208]	; (8003740 <HAL_DMA_Start_IT+0x1f4>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d04a      	beq.n	8003708 <HAL_DMA_Start_IT+0x1bc>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a33      	ldr	r2, [pc, #204]	; (8003744 <HAL_DMA_Start_IT+0x1f8>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d045      	beq.n	8003708 <HAL_DMA_Start_IT+0x1bc>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a31      	ldr	r2, [pc, #196]	; (8003748 <HAL_DMA_Start_IT+0x1fc>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d040      	beq.n	8003708 <HAL_DMA_Start_IT+0x1bc>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a30      	ldr	r2, [pc, #192]	; (800374c <HAL_DMA_Start_IT+0x200>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d03b      	beq.n	8003708 <HAL_DMA_Start_IT+0x1bc>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a2e      	ldr	r2, [pc, #184]	; (8003750 <HAL_DMA_Start_IT+0x204>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d036      	beq.n	8003708 <HAL_DMA_Start_IT+0x1bc>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a2d      	ldr	r2, [pc, #180]	; (8003754 <HAL_DMA_Start_IT+0x208>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d031      	beq.n	8003708 <HAL_DMA_Start_IT+0x1bc>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a2b      	ldr	r2, [pc, #172]	; (8003758 <HAL_DMA_Start_IT+0x20c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d02c      	beq.n	8003708 <HAL_DMA_Start_IT+0x1bc>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a2a      	ldr	r2, [pc, #168]	; (800375c <HAL_DMA_Start_IT+0x210>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d027      	beq.n	8003708 <HAL_DMA_Start_IT+0x1bc>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a28      	ldr	r2, [pc, #160]	; (8003760 <HAL_DMA_Start_IT+0x214>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d022      	beq.n	8003708 <HAL_DMA_Start_IT+0x1bc>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a27      	ldr	r2, [pc, #156]	; (8003764 <HAL_DMA_Start_IT+0x218>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d01d      	beq.n	8003708 <HAL_DMA_Start_IT+0x1bc>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a25      	ldr	r2, [pc, #148]	; (8003768 <HAL_DMA_Start_IT+0x21c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d018      	beq.n	8003708 <HAL_DMA_Start_IT+0x1bc>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a24      	ldr	r2, [pc, #144]	; (800376c <HAL_DMA_Start_IT+0x220>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d013      	beq.n	8003708 <HAL_DMA_Start_IT+0x1bc>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a22      	ldr	r2, [pc, #136]	; (8003770 <HAL_DMA_Start_IT+0x224>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d00e      	beq.n	8003708 <HAL_DMA_Start_IT+0x1bc>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a21      	ldr	r2, [pc, #132]	; (8003774 <HAL_DMA_Start_IT+0x228>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d009      	beq.n	8003708 <HAL_DMA_Start_IT+0x1bc>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a1f      	ldr	r2, [pc, #124]	; (8003778 <HAL_DMA_Start_IT+0x22c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d004      	beq.n	8003708 <HAL_DMA_Start_IT+0x1bc>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a1e      	ldr	r2, [pc, #120]	; (800377c <HAL_DMA_Start_IT+0x230>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d101      	bne.n	800370c <HAL_DMA_Start_IT+0x1c0>
 8003708:	2301      	movs	r3, #1
 800370a:	e000      	b.n	800370e <HAL_DMA_Start_IT+0x1c2>
 800370c:	2300      	movs	r3, #0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d036      	beq.n	8003780 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f023 021e 	bic.w	r2, r3, #30
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f042 0216 	orr.w	r2, r2, #22
 8003724:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	2b00      	cmp	r3, #0
 800372c:	d03e      	beq.n	80037ac <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f042 0208 	orr.w	r2, r2, #8
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	e035      	b.n	80037ac <HAL_DMA_Start_IT+0x260>
 8003740:	40020010 	.word	0x40020010
 8003744:	40020028 	.word	0x40020028
 8003748:	40020040 	.word	0x40020040
 800374c:	40020058 	.word	0x40020058
 8003750:	40020070 	.word	0x40020070
 8003754:	40020088 	.word	0x40020088
 8003758:	400200a0 	.word	0x400200a0
 800375c:	400200b8 	.word	0x400200b8
 8003760:	40020410 	.word	0x40020410
 8003764:	40020428 	.word	0x40020428
 8003768:	40020440 	.word	0x40020440
 800376c:	40020458 	.word	0x40020458
 8003770:	40020470 	.word	0x40020470
 8003774:	40020488 	.word	0x40020488
 8003778:	400204a0 	.word	0x400204a0
 800377c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f023 020e 	bic.w	r2, r3, #14
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 020a 	orr.w	r2, r2, #10
 8003792:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003798:	2b00      	cmp	r3, #0
 800379a:	d007      	beq.n	80037ac <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0204 	orr.w	r2, r2, #4
 80037aa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a83      	ldr	r2, [pc, #524]	; (80039c0 <HAL_DMA_Start_IT+0x474>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d072      	beq.n	800389c <HAL_DMA_Start_IT+0x350>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a82      	ldr	r2, [pc, #520]	; (80039c4 <HAL_DMA_Start_IT+0x478>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d06d      	beq.n	800389c <HAL_DMA_Start_IT+0x350>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a80      	ldr	r2, [pc, #512]	; (80039c8 <HAL_DMA_Start_IT+0x47c>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d068      	beq.n	800389c <HAL_DMA_Start_IT+0x350>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a7f      	ldr	r2, [pc, #508]	; (80039cc <HAL_DMA_Start_IT+0x480>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d063      	beq.n	800389c <HAL_DMA_Start_IT+0x350>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a7d      	ldr	r2, [pc, #500]	; (80039d0 <HAL_DMA_Start_IT+0x484>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d05e      	beq.n	800389c <HAL_DMA_Start_IT+0x350>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a7c      	ldr	r2, [pc, #496]	; (80039d4 <HAL_DMA_Start_IT+0x488>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d059      	beq.n	800389c <HAL_DMA_Start_IT+0x350>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a7a      	ldr	r2, [pc, #488]	; (80039d8 <HAL_DMA_Start_IT+0x48c>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d054      	beq.n	800389c <HAL_DMA_Start_IT+0x350>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a79      	ldr	r2, [pc, #484]	; (80039dc <HAL_DMA_Start_IT+0x490>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d04f      	beq.n	800389c <HAL_DMA_Start_IT+0x350>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a77      	ldr	r2, [pc, #476]	; (80039e0 <HAL_DMA_Start_IT+0x494>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d04a      	beq.n	800389c <HAL_DMA_Start_IT+0x350>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a76      	ldr	r2, [pc, #472]	; (80039e4 <HAL_DMA_Start_IT+0x498>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d045      	beq.n	800389c <HAL_DMA_Start_IT+0x350>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a74      	ldr	r2, [pc, #464]	; (80039e8 <HAL_DMA_Start_IT+0x49c>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d040      	beq.n	800389c <HAL_DMA_Start_IT+0x350>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a73      	ldr	r2, [pc, #460]	; (80039ec <HAL_DMA_Start_IT+0x4a0>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d03b      	beq.n	800389c <HAL_DMA_Start_IT+0x350>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a71      	ldr	r2, [pc, #452]	; (80039f0 <HAL_DMA_Start_IT+0x4a4>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d036      	beq.n	800389c <HAL_DMA_Start_IT+0x350>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a70      	ldr	r2, [pc, #448]	; (80039f4 <HAL_DMA_Start_IT+0x4a8>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d031      	beq.n	800389c <HAL_DMA_Start_IT+0x350>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a6e      	ldr	r2, [pc, #440]	; (80039f8 <HAL_DMA_Start_IT+0x4ac>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d02c      	beq.n	800389c <HAL_DMA_Start_IT+0x350>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a6d      	ldr	r2, [pc, #436]	; (80039fc <HAL_DMA_Start_IT+0x4b0>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d027      	beq.n	800389c <HAL_DMA_Start_IT+0x350>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a6b      	ldr	r2, [pc, #428]	; (8003a00 <HAL_DMA_Start_IT+0x4b4>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d022      	beq.n	800389c <HAL_DMA_Start_IT+0x350>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a6a      	ldr	r2, [pc, #424]	; (8003a04 <HAL_DMA_Start_IT+0x4b8>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d01d      	beq.n	800389c <HAL_DMA_Start_IT+0x350>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a68      	ldr	r2, [pc, #416]	; (8003a08 <HAL_DMA_Start_IT+0x4bc>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d018      	beq.n	800389c <HAL_DMA_Start_IT+0x350>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a67      	ldr	r2, [pc, #412]	; (8003a0c <HAL_DMA_Start_IT+0x4c0>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d013      	beq.n	800389c <HAL_DMA_Start_IT+0x350>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a65      	ldr	r2, [pc, #404]	; (8003a10 <HAL_DMA_Start_IT+0x4c4>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d00e      	beq.n	800389c <HAL_DMA_Start_IT+0x350>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a64      	ldr	r2, [pc, #400]	; (8003a14 <HAL_DMA_Start_IT+0x4c8>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d009      	beq.n	800389c <HAL_DMA_Start_IT+0x350>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a62      	ldr	r2, [pc, #392]	; (8003a18 <HAL_DMA_Start_IT+0x4cc>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d004      	beq.n	800389c <HAL_DMA_Start_IT+0x350>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a61      	ldr	r2, [pc, #388]	; (8003a1c <HAL_DMA_Start_IT+0x4d0>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d101      	bne.n	80038a0 <HAL_DMA_Start_IT+0x354>
 800389c:	2301      	movs	r3, #1
 800389e:	e000      	b.n	80038a2 <HAL_DMA_Start_IT+0x356>
 80038a0:	2300      	movs	r3, #0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d01a      	beq.n	80038dc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d007      	beq.n	80038c4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038c2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d007      	beq.n	80038dc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038da:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a37      	ldr	r2, [pc, #220]	; (80039c0 <HAL_DMA_Start_IT+0x474>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d04a      	beq.n	800397c <HAL_DMA_Start_IT+0x430>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a36      	ldr	r2, [pc, #216]	; (80039c4 <HAL_DMA_Start_IT+0x478>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d045      	beq.n	800397c <HAL_DMA_Start_IT+0x430>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a34      	ldr	r2, [pc, #208]	; (80039c8 <HAL_DMA_Start_IT+0x47c>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d040      	beq.n	800397c <HAL_DMA_Start_IT+0x430>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a33      	ldr	r2, [pc, #204]	; (80039cc <HAL_DMA_Start_IT+0x480>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d03b      	beq.n	800397c <HAL_DMA_Start_IT+0x430>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a31      	ldr	r2, [pc, #196]	; (80039d0 <HAL_DMA_Start_IT+0x484>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d036      	beq.n	800397c <HAL_DMA_Start_IT+0x430>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a30      	ldr	r2, [pc, #192]	; (80039d4 <HAL_DMA_Start_IT+0x488>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d031      	beq.n	800397c <HAL_DMA_Start_IT+0x430>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a2e      	ldr	r2, [pc, #184]	; (80039d8 <HAL_DMA_Start_IT+0x48c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d02c      	beq.n	800397c <HAL_DMA_Start_IT+0x430>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a2d      	ldr	r2, [pc, #180]	; (80039dc <HAL_DMA_Start_IT+0x490>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d027      	beq.n	800397c <HAL_DMA_Start_IT+0x430>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a2b      	ldr	r2, [pc, #172]	; (80039e0 <HAL_DMA_Start_IT+0x494>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d022      	beq.n	800397c <HAL_DMA_Start_IT+0x430>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a2a      	ldr	r2, [pc, #168]	; (80039e4 <HAL_DMA_Start_IT+0x498>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d01d      	beq.n	800397c <HAL_DMA_Start_IT+0x430>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a28      	ldr	r2, [pc, #160]	; (80039e8 <HAL_DMA_Start_IT+0x49c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d018      	beq.n	800397c <HAL_DMA_Start_IT+0x430>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a27      	ldr	r2, [pc, #156]	; (80039ec <HAL_DMA_Start_IT+0x4a0>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d013      	beq.n	800397c <HAL_DMA_Start_IT+0x430>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a25      	ldr	r2, [pc, #148]	; (80039f0 <HAL_DMA_Start_IT+0x4a4>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d00e      	beq.n	800397c <HAL_DMA_Start_IT+0x430>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a24      	ldr	r2, [pc, #144]	; (80039f4 <HAL_DMA_Start_IT+0x4a8>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d009      	beq.n	800397c <HAL_DMA_Start_IT+0x430>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a22      	ldr	r2, [pc, #136]	; (80039f8 <HAL_DMA_Start_IT+0x4ac>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d004      	beq.n	800397c <HAL_DMA_Start_IT+0x430>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a21      	ldr	r2, [pc, #132]	; (80039fc <HAL_DMA_Start_IT+0x4b0>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d108      	bne.n	800398e <HAL_DMA_Start_IT+0x442>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 0201 	orr.w	r2, r2, #1
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	e012      	b.n	80039b4 <HAL_DMA_Start_IT+0x468>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f042 0201 	orr.w	r2, r2, #1
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	e009      	b.n	80039b4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80039b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3718      	adds	r7, #24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	40020010 	.word	0x40020010
 80039c4:	40020028 	.word	0x40020028
 80039c8:	40020040 	.word	0x40020040
 80039cc:	40020058 	.word	0x40020058
 80039d0:	40020070 	.word	0x40020070
 80039d4:	40020088 	.word	0x40020088
 80039d8:	400200a0 	.word	0x400200a0
 80039dc:	400200b8 	.word	0x400200b8
 80039e0:	40020410 	.word	0x40020410
 80039e4:	40020428 	.word	0x40020428
 80039e8:	40020440 	.word	0x40020440
 80039ec:	40020458 	.word	0x40020458
 80039f0:	40020470 	.word	0x40020470
 80039f4:	40020488 	.word	0x40020488
 80039f8:	400204a0 	.word	0x400204a0
 80039fc:	400204b8 	.word	0x400204b8
 8003a00:	58025408 	.word	0x58025408
 8003a04:	5802541c 	.word	0x5802541c
 8003a08:	58025430 	.word	0x58025430
 8003a0c:	58025444 	.word	0x58025444
 8003a10:	58025458 	.word	0x58025458
 8003a14:	5802546c 	.word	0x5802546c
 8003a18:	58025480 	.word	0x58025480
 8003a1c:	58025494 	.word	0x58025494

08003a20 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b08a      	sub	sp, #40	; 0x28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a2c:	4b67      	ldr	r3, [pc, #412]	; (8003bcc <HAL_DMA_IRQHandler+0x1ac>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a67      	ldr	r2, [pc, #412]	; (8003bd0 <HAL_DMA_IRQHandler+0x1b0>)
 8003a32:	fba2 2303 	umull	r2, r3, r2, r3
 8003a36:	0a9b      	lsrs	r3, r3, #10
 8003a38:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a44:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a5f      	ldr	r2, [pc, #380]	; (8003bd4 <HAL_DMA_IRQHandler+0x1b4>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d04a      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xd2>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a5d      	ldr	r2, [pc, #372]	; (8003bd8 <HAL_DMA_IRQHandler+0x1b8>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d045      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xd2>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a5c      	ldr	r2, [pc, #368]	; (8003bdc <HAL_DMA_IRQHandler+0x1bc>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d040      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xd2>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a5a      	ldr	r2, [pc, #360]	; (8003be0 <HAL_DMA_IRQHandler+0x1c0>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d03b      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xd2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a59      	ldr	r2, [pc, #356]	; (8003be4 <HAL_DMA_IRQHandler+0x1c4>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d036      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xd2>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a57      	ldr	r2, [pc, #348]	; (8003be8 <HAL_DMA_IRQHandler+0x1c8>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d031      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xd2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a56      	ldr	r2, [pc, #344]	; (8003bec <HAL_DMA_IRQHandler+0x1cc>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d02c      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xd2>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a54      	ldr	r2, [pc, #336]	; (8003bf0 <HAL_DMA_IRQHandler+0x1d0>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d027      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xd2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a53      	ldr	r2, [pc, #332]	; (8003bf4 <HAL_DMA_IRQHandler+0x1d4>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d022      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xd2>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a51      	ldr	r2, [pc, #324]	; (8003bf8 <HAL_DMA_IRQHandler+0x1d8>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d01d      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xd2>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a50      	ldr	r2, [pc, #320]	; (8003bfc <HAL_DMA_IRQHandler+0x1dc>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d018      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xd2>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a4e      	ldr	r2, [pc, #312]	; (8003c00 <HAL_DMA_IRQHandler+0x1e0>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d013      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xd2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a4d      	ldr	r2, [pc, #308]	; (8003c04 <HAL_DMA_IRQHandler+0x1e4>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d00e      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xd2>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a4b      	ldr	r2, [pc, #300]	; (8003c08 <HAL_DMA_IRQHandler+0x1e8>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d009      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xd2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a4a      	ldr	r2, [pc, #296]	; (8003c0c <HAL_DMA_IRQHandler+0x1ec>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d004      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xd2>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a48      	ldr	r2, [pc, #288]	; (8003c10 <HAL_DMA_IRQHandler+0x1f0>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d101      	bne.n	8003af6 <HAL_DMA_IRQHandler+0xd6>
 8003af2:	2301      	movs	r3, #1
 8003af4:	e000      	b.n	8003af8 <HAL_DMA_IRQHandler+0xd8>
 8003af6:	2300      	movs	r3, #0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 842b 	beq.w	8004354 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b02:	f003 031f 	and.w	r3, r3, #31
 8003b06:	2208      	movs	r2, #8
 8003b08:	409a      	lsls	r2, r3
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 80a2 	beq.w	8003c58 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a2e      	ldr	r2, [pc, #184]	; (8003bd4 <HAL_DMA_IRQHandler+0x1b4>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d04a      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x194>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a2d      	ldr	r2, [pc, #180]	; (8003bd8 <HAL_DMA_IRQHandler+0x1b8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d045      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x194>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a2b      	ldr	r2, [pc, #172]	; (8003bdc <HAL_DMA_IRQHandler+0x1bc>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d040      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x194>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a2a      	ldr	r2, [pc, #168]	; (8003be0 <HAL_DMA_IRQHandler+0x1c0>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d03b      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x194>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a28      	ldr	r2, [pc, #160]	; (8003be4 <HAL_DMA_IRQHandler+0x1c4>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d036      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x194>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a27      	ldr	r2, [pc, #156]	; (8003be8 <HAL_DMA_IRQHandler+0x1c8>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d031      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x194>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a25      	ldr	r2, [pc, #148]	; (8003bec <HAL_DMA_IRQHandler+0x1cc>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d02c      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x194>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a24      	ldr	r2, [pc, #144]	; (8003bf0 <HAL_DMA_IRQHandler+0x1d0>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d027      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x194>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a22      	ldr	r2, [pc, #136]	; (8003bf4 <HAL_DMA_IRQHandler+0x1d4>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d022      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x194>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a21      	ldr	r2, [pc, #132]	; (8003bf8 <HAL_DMA_IRQHandler+0x1d8>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d01d      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x194>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a1f      	ldr	r2, [pc, #124]	; (8003bfc <HAL_DMA_IRQHandler+0x1dc>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d018      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x194>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a1e      	ldr	r2, [pc, #120]	; (8003c00 <HAL_DMA_IRQHandler+0x1e0>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d013      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x194>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a1c      	ldr	r2, [pc, #112]	; (8003c04 <HAL_DMA_IRQHandler+0x1e4>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d00e      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x194>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a1b      	ldr	r2, [pc, #108]	; (8003c08 <HAL_DMA_IRQHandler+0x1e8>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d009      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x194>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a19      	ldr	r2, [pc, #100]	; (8003c0c <HAL_DMA_IRQHandler+0x1ec>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d004      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0x194>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a18      	ldr	r2, [pc, #96]	; (8003c10 <HAL_DMA_IRQHandler+0x1f0>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d12f      	bne.n	8003c14 <HAL_DMA_IRQHandler+0x1f4>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0304 	and.w	r3, r3, #4
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	bf14      	ite	ne
 8003bc2:	2301      	movne	r3, #1
 8003bc4:	2300      	moveq	r3, #0
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	e02e      	b.n	8003c28 <HAL_DMA_IRQHandler+0x208>
 8003bca:	bf00      	nop
 8003bcc:	24000000 	.word	0x24000000
 8003bd0:	1b4e81b5 	.word	0x1b4e81b5
 8003bd4:	40020010 	.word	0x40020010
 8003bd8:	40020028 	.word	0x40020028
 8003bdc:	40020040 	.word	0x40020040
 8003be0:	40020058 	.word	0x40020058
 8003be4:	40020070 	.word	0x40020070
 8003be8:	40020088 	.word	0x40020088
 8003bec:	400200a0 	.word	0x400200a0
 8003bf0:	400200b8 	.word	0x400200b8
 8003bf4:	40020410 	.word	0x40020410
 8003bf8:	40020428 	.word	0x40020428
 8003bfc:	40020440 	.word	0x40020440
 8003c00:	40020458 	.word	0x40020458
 8003c04:	40020470 	.word	0x40020470
 8003c08:	40020488 	.word	0x40020488
 8003c0c:	400204a0 	.word	0x400204a0
 8003c10:	400204b8 	.word	0x400204b8
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0308 	and.w	r3, r3, #8
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	bf14      	ite	ne
 8003c22:	2301      	movne	r3, #1
 8003c24:	2300      	moveq	r3, #0
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d015      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 0204 	bic.w	r2, r2, #4
 8003c3a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c40:	f003 031f 	and.w	r3, r3, #31
 8003c44:	2208      	movs	r2, #8
 8003c46:	409a      	lsls	r2, r3
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c50:	f043 0201 	orr.w	r2, r3, #1
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c5c:	f003 031f 	and.w	r3, r3, #31
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	fa22 f303 	lsr.w	r3, r2, r3
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d06e      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a69      	ldr	r2, [pc, #420]	; (8003e18 <HAL_DMA_IRQHandler+0x3f8>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d04a      	beq.n	8003d0e <HAL_DMA_IRQHandler+0x2ee>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a67      	ldr	r2, [pc, #412]	; (8003e1c <HAL_DMA_IRQHandler+0x3fc>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d045      	beq.n	8003d0e <HAL_DMA_IRQHandler+0x2ee>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a66      	ldr	r2, [pc, #408]	; (8003e20 <HAL_DMA_IRQHandler+0x400>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d040      	beq.n	8003d0e <HAL_DMA_IRQHandler+0x2ee>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a64      	ldr	r2, [pc, #400]	; (8003e24 <HAL_DMA_IRQHandler+0x404>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d03b      	beq.n	8003d0e <HAL_DMA_IRQHandler+0x2ee>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a63      	ldr	r2, [pc, #396]	; (8003e28 <HAL_DMA_IRQHandler+0x408>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d036      	beq.n	8003d0e <HAL_DMA_IRQHandler+0x2ee>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a61      	ldr	r2, [pc, #388]	; (8003e2c <HAL_DMA_IRQHandler+0x40c>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d031      	beq.n	8003d0e <HAL_DMA_IRQHandler+0x2ee>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a60      	ldr	r2, [pc, #384]	; (8003e30 <HAL_DMA_IRQHandler+0x410>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d02c      	beq.n	8003d0e <HAL_DMA_IRQHandler+0x2ee>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a5e      	ldr	r2, [pc, #376]	; (8003e34 <HAL_DMA_IRQHandler+0x414>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d027      	beq.n	8003d0e <HAL_DMA_IRQHandler+0x2ee>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a5d      	ldr	r2, [pc, #372]	; (8003e38 <HAL_DMA_IRQHandler+0x418>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d022      	beq.n	8003d0e <HAL_DMA_IRQHandler+0x2ee>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a5b      	ldr	r2, [pc, #364]	; (8003e3c <HAL_DMA_IRQHandler+0x41c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d01d      	beq.n	8003d0e <HAL_DMA_IRQHandler+0x2ee>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a5a      	ldr	r2, [pc, #360]	; (8003e40 <HAL_DMA_IRQHandler+0x420>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d018      	beq.n	8003d0e <HAL_DMA_IRQHandler+0x2ee>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a58      	ldr	r2, [pc, #352]	; (8003e44 <HAL_DMA_IRQHandler+0x424>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d013      	beq.n	8003d0e <HAL_DMA_IRQHandler+0x2ee>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a57      	ldr	r2, [pc, #348]	; (8003e48 <HAL_DMA_IRQHandler+0x428>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d00e      	beq.n	8003d0e <HAL_DMA_IRQHandler+0x2ee>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a55      	ldr	r2, [pc, #340]	; (8003e4c <HAL_DMA_IRQHandler+0x42c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d009      	beq.n	8003d0e <HAL_DMA_IRQHandler+0x2ee>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a54      	ldr	r2, [pc, #336]	; (8003e50 <HAL_DMA_IRQHandler+0x430>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d004      	beq.n	8003d0e <HAL_DMA_IRQHandler+0x2ee>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a52      	ldr	r2, [pc, #328]	; (8003e54 <HAL_DMA_IRQHandler+0x434>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d10a      	bne.n	8003d24 <HAL_DMA_IRQHandler+0x304>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	bf14      	ite	ne
 8003d1c:	2301      	movne	r3, #1
 8003d1e:	2300      	moveq	r3, #0
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	e003      	b.n	8003d2c <HAL_DMA_IRQHandler+0x30c>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00d      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d34:	f003 031f 	and.w	r3, r3, #31
 8003d38:	2201      	movs	r2, #1
 8003d3a:	409a      	lsls	r2, r3
 8003d3c:	6a3b      	ldr	r3, [r7, #32]
 8003d3e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d44:	f043 0202 	orr.w	r2, r3, #2
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d50:	f003 031f 	and.w	r3, r3, #31
 8003d54:	2204      	movs	r2, #4
 8003d56:	409a      	lsls	r2, r3
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 808f 	beq.w	8003e80 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a2c      	ldr	r2, [pc, #176]	; (8003e18 <HAL_DMA_IRQHandler+0x3f8>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d04a      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x3e2>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a2a      	ldr	r2, [pc, #168]	; (8003e1c <HAL_DMA_IRQHandler+0x3fc>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d045      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x3e2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a29      	ldr	r2, [pc, #164]	; (8003e20 <HAL_DMA_IRQHandler+0x400>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d040      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x3e2>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a27      	ldr	r2, [pc, #156]	; (8003e24 <HAL_DMA_IRQHandler+0x404>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d03b      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x3e2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a26      	ldr	r2, [pc, #152]	; (8003e28 <HAL_DMA_IRQHandler+0x408>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d036      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x3e2>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a24      	ldr	r2, [pc, #144]	; (8003e2c <HAL_DMA_IRQHandler+0x40c>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d031      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x3e2>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a23      	ldr	r2, [pc, #140]	; (8003e30 <HAL_DMA_IRQHandler+0x410>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d02c      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x3e2>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a21      	ldr	r2, [pc, #132]	; (8003e34 <HAL_DMA_IRQHandler+0x414>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d027      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x3e2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a20      	ldr	r2, [pc, #128]	; (8003e38 <HAL_DMA_IRQHandler+0x418>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d022      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x3e2>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a1e      	ldr	r2, [pc, #120]	; (8003e3c <HAL_DMA_IRQHandler+0x41c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d01d      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x3e2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a1d      	ldr	r2, [pc, #116]	; (8003e40 <HAL_DMA_IRQHandler+0x420>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d018      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x3e2>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a1b      	ldr	r2, [pc, #108]	; (8003e44 <HAL_DMA_IRQHandler+0x424>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d013      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x3e2>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a1a      	ldr	r2, [pc, #104]	; (8003e48 <HAL_DMA_IRQHandler+0x428>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d00e      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x3e2>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a18      	ldr	r2, [pc, #96]	; (8003e4c <HAL_DMA_IRQHandler+0x42c>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d009      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x3e2>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a17      	ldr	r2, [pc, #92]	; (8003e50 <HAL_DMA_IRQHandler+0x430>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d004      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x3e2>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a15      	ldr	r2, [pc, #84]	; (8003e54 <HAL_DMA_IRQHandler+0x434>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d12a      	bne.n	8003e58 <HAL_DMA_IRQHandler+0x438>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	bf14      	ite	ne
 8003e10:	2301      	movne	r3, #1
 8003e12:	2300      	moveq	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	e023      	b.n	8003e60 <HAL_DMA_IRQHandler+0x440>
 8003e18:	40020010 	.word	0x40020010
 8003e1c:	40020028 	.word	0x40020028
 8003e20:	40020040 	.word	0x40020040
 8003e24:	40020058 	.word	0x40020058
 8003e28:	40020070 	.word	0x40020070
 8003e2c:	40020088 	.word	0x40020088
 8003e30:	400200a0 	.word	0x400200a0
 8003e34:	400200b8 	.word	0x400200b8
 8003e38:	40020410 	.word	0x40020410
 8003e3c:	40020428 	.word	0x40020428
 8003e40:	40020440 	.word	0x40020440
 8003e44:	40020458 	.word	0x40020458
 8003e48:	40020470 	.word	0x40020470
 8003e4c:	40020488 	.word	0x40020488
 8003e50:	400204a0 	.word	0x400204a0
 8003e54:	400204b8 	.word	0x400204b8
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2300      	movs	r3, #0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00d      	beq.n	8003e80 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e68:	f003 031f 	and.w	r3, r3, #31
 8003e6c:	2204      	movs	r2, #4
 8003e6e:	409a      	lsls	r2, r3
 8003e70:	6a3b      	ldr	r3, [r7, #32]
 8003e72:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e78:	f043 0204 	orr.w	r2, r3, #4
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e84:	f003 031f 	and.w	r3, r3, #31
 8003e88:	2210      	movs	r2, #16
 8003e8a:	409a      	lsls	r2, r3
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 80a6 	beq.w	8003fe2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a85      	ldr	r2, [pc, #532]	; (80040b0 <HAL_DMA_IRQHandler+0x690>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d04a      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x516>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a83      	ldr	r2, [pc, #524]	; (80040b4 <HAL_DMA_IRQHandler+0x694>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d045      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x516>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a82      	ldr	r2, [pc, #520]	; (80040b8 <HAL_DMA_IRQHandler+0x698>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d040      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x516>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a80      	ldr	r2, [pc, #512]	; (80040bc <HAL_DMA_IRQHandler+0x69c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d03b      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x516>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a7f      	ldr	r2, [pc, #508]	; (80040c0 <HAL_DMA_IRQHandler+0x6a0>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d036      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x516>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a7d      	ldr	r2, [pc, #500]	; (80040c4 <HAL_DMA_IRQHandler+0x6a4>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d031      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x516>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a7c      	ldr	r2, [pc, #496]	; (80040c8 <HAL_DMA_IRQHandler+0x6a8>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d02c      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x516>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a7a      	ldr	r2, [pc, #488]	; (80040cc <HAL_DMA_IRQHandler+0x6ac>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d027      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x516>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a79      	ldr	r2, [pc, #484]	; (80040d0 <HAL_DMA_IRQHandler+0x6b0>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d022      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x516>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a77      	ldr	r2, [pc, #476]	; (80040d4 <HAL_DMA_IRQHandler+0x6b4>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d01d      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x516>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a76      	ldr	r2, [pc, #472]	; (80040d8 <HAL_DMA_IRQHandler+0x6b8>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d018      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x516>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a74      	ldr	r2, [pc, #464]	; (80040dc <HAL_DMA_IRQHandler+0x6bc>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d013      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x516>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a73      	ldr	r2, [pc, #460]	; (80040e0 <HAL_DMA_IRQHandler+0x6c0>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d00e      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x516>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a71      	ldr	r2, [pc, #452]	; (80040e4 <HAL_DMA_IRQHandler+0x6c4>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d009      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x516>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a70      	ldr	r2, [pc, #448]	; (80040e8 <HAL_DMA_IRQHandler+0x6c8>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d004      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x516>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a6e      	ldr	r2, [pc, #440]	; (80040ec <HAL_DMA_IRQHandler+0x6cc>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d10a      	bne.n	8003f4c <HAL_DMA_IRQHandler+0x52c>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0308 	and.w	r3, r3, #8
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	bf14      	ite	ne
 8003f44:	2301      	movne	r3, #1
 8003f46:	2300      	moveq	r3, #0
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	e009      	b.n	8003f60 <HAL_DMA_IRQHandler+0x540>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0304 	and.w	r3, r3, #4
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	bf14      	ite	ne
 8003f5a:	2301      	movne	r3, #1
 8003f5c:	2300      	moveq	r3, #0
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d03e      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f68:	f003 031f 	and.w	r3, r3, #31
 8003f6c:	2210      	movs	r2, #16
 8003f6e:	409a      	lsls	r2, r3
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d018      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d108      	bne.n	8003fa2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d024      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	4798      	blx	r3
 8003fa0:	e01f      	b.n	8003fe2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d01b      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	4798      	blx	r3
 8003fb2:	e016      	b.n	8003fe2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d107      	bne.n	8003fd2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 0208 	bic.w	r2, r2, #8
 8003fd0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe6:	f003 031f 	and.w	r3, r3, #31
 8003fea:	2220      	movs	r2, #32
 8003fec:	409a      	lsls	r2, r3
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 8110 	beq.w	8004218 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a2c      	ldr	r2, [pc, #176]	; (80040b0 <HAL_DMA_IRQHandler+0x690>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d04a      	beq.n	8004098 <HAL_DMA_IRQHandler+0x678>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a2b      	ldr	r2, [pc, #172]	; (80040b4 <HAL_DMA_IRQHandler+0x694>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d045      	beq.n	8004098 <HAL_DMA_IRQHandler+0x678>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a29      	ldr	r2, [pc, #164]	; (80040b8 <HAL_DMA_IRQHandler+0x698>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d040      	beq.n	8004098 <HAL_DMA_IRQHandler+0x678>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a28      	ldr	r2, [pc, #160]	; (80040bc <HAL_DMA_IRQHandler+0x69c>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d03b      	beq.n	8004098 <HAL_DMA_IRQHandler+0x678>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a26      	ldr	r2, [pc, #152]	; (80040c0 <HAL_DMA_IRQHandler+0x6a0>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d036      	beq.n	8004098 <HAL_DMA_IRQHandler+0x678>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a25      	ldr	r2, [pc, #148]	; (80040c4 <HAL_DMA_IRQHandler+0x6a4>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d031      	beq.n	8004098 <HAL_DMA_IRQHandler+0x678>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a23      	ldr	r2, [pc, #140]	; (80040c8 <HAL_DMA_IRQHandler+0x6a8>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d02c      	beq.n	8004098 <HAL_DMA_IRQHandler+0x678>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a22      	ldr	r2, [pc, #136]	; (80040cc <HAL_DMA_IRQHandler+0x6ac>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d027      	beq.n	8004098 <HAL_DMA_IRQHandler+0x678>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a20      	ldr	r2, [pc, #128]	; (80040d0 <HAL_DMA_IRQHandler+0x6b0>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d022      	beq.n	8004098 <HAL_DMA_IRQHandler+0x678>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a1f      	ldr	r2, [pc, #124]	; (80040d4 <HAL_DMA_IRQHandler+0x6b4>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d01d      	beq.n	8004098 <HAL_DMA_IRQHandler+0x678>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a1d      	ldr	r2, [pc, #116]	; (80040d8 <HAL_DMA_IRQHandler+0x6b8>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d018      	beq.n	8004098 <HAL_DMA_IRQHandler+0x678>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a1c      	ldr	r2, [pc, #112]	; (80040dc <HAL_DMA_IRQHandler+0x6bc>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d013      	beq.n	8004098 <HAL_DMA_IRQHandler+0x678>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a1a      	ldr	r2, [pc, #104]	; (80040e0 <HAL_DMA_IRQHandler+0x6c0>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d00e      	beq.n	8004098 <HAL_DMA_IRQHandler+0x678>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a19      	ldr	r2, [pc, #100]	; (80040e4 <HAL_DMA_IRQHandler+0x6c4>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d009      	beq.n	8004098 <HAL_DMA_IRQHandler+0x678>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a17      	ldr	r2, [pc, #92]	; (80040e8 <HAL_DMA_IRQHandler+0x6c8>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d004      	beq.n	8004098 <HAL_DMA_IRQHandler+0x678>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a16      	ldr	r2, [pc, #88]	; (80040ec <HAL_DMA_IRQHandler+0x6cc>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d12b      	bne.n	80040f0 <HAL_DMA_IRQHandler+0x6d0>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0310 	and.w	r3, r3, #16
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	bf14      	ite	ne
 80040a6:	2301      	movne	r3, #1
 80040a8:	2300      	moveq	r3, #0
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	e02a      	b.n	8004104 <HAL_DMA_IRQHandler+0x6e4>
 80040ae:	bf00      	nop
 80040b0:	40020010 	.word	0x40020010
 80040b4:	40020028 	.word	0x40020028
 80040b8:	40020040 	.word	0x40020040
 80040bc:	40020058 	.word	0x40020058
 80040c0:	40020070 	.word	0x40020070
 80040c4:	40020088 	.word	0x40020088
 80040c8:	400200a0 	.word	0x400200a0
 80040cc:	400200b8 	.word	0x400200b8
 80040d0:	40020410 	.word	0x40020410
 80040d4:	40020428 	.word	0x40020428
 80040d8:	40020440 	.word	0x40020440
 80040dc:	40020458 	.word	0x40020458
 80040e0:	40020470 	.word	0x40020470
 80040e4:	40020488 	.word	0x40020488
 80040e8:	400204a0 	.word	0x400204a0
 80040ec:	400204b8 	.word	0x400204b8
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	bf14      	ite	ne
 80040fe:	2301      	movne	r3, #1
 8004100:	2300      	moveq	r3, #0
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 8087 	beq.w	8004218 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800410e:	f003 031f 	and.w	r3, r3, #31
 8004112:	2220      	movs	r2, #32
 8004114:	409a      	lsls	r2, r3
 8004116:	6a3b      	ldr	r3, [r7, #32]
 8004118:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b04      	cmp	r3, #4
 8004124:	d139      	bne.n	800419a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0216 	bic.w	r2, r2, #22
 8004134:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	695a      	ldr	r2, [r3, #20]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004144:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	2b00      	cmp	r3, #0
 800414c:	d103      	bne.n	8004156 <HAL_DMA_IRQHandler+0x736>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004152:	2b00      	cmp	r3, #0
 8004154:	d007      	beq.n	8004166 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 0208 	bic.w	r2, r2, #8
 8004164:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800416a:	f003 031f 	and.w	r3, r3, #31
 800416e:	223f      	movs	r2, #63	; 0x3f
 8004170:	409a      	lsls	r2, r3
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800418a:	2b00      	cmp	r3, #0
 800418c:	f000 8382 	beq.w	8004894 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	4798      	blx	r3
          }
          return;
 8004198:	e37c      	b.n	8004894 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d018      	beq.n	80041da <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d108      	bne.n	80041c8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d02c      	beq.n	8004218 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	4798      	blx	r3
 80041c6:	e027      	b.n	8004218 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d023      	beq.n	8004218 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	4798      	blx	r3
 80041d8:	e01e      	b.n	8004218 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10f      	bne.n	8004208 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 0210 	bic.w	r2, r2, #16
 80041f6:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 833e 	beq.w	800489e <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 8088 	beq.w	8004340 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2204      	movs	r2, #4
 8004234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a8e      	ldr	r2, [pc, #568]	; (8004478 <HAL_DMA_IRQHandler+0xa58>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d04a      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x8b8>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a8d      	ldr	r2, [pc, #564]	; (800447c <HAL_DMA_IRQHandler+0xa5c>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d045      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x8b8>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a8b      	ldr	r2, [pc, #556]	; (8004480 <HAL_DMA_IRQHandler+0xa60>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d040      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x8b8>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a8a      	ldr	r2, [pc, #552]	; (8004484 <HAL_DMA_IRQHandler+0xa64>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d03b      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x8b8>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a88      	ldr	r2, [pc, #544]	; (8004488 <HAL_DMA_IRQHandler+0xa68>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d036      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x8b8>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a87      	ldr	r2, [pc, #540]	; (800448c <HAL_DMA_IRQHandler+0xa6c>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d031      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x8b8>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a85      	ldr	r2, [pc, #532]	; (8004490 <HAL_DMA_IRQHandler+0xa70>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d02c      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x8b8>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a84      	ldr	r2, [pc, #528]	; (8004494 <HAL_DMA_IRQHandler+0xa74>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d027      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x8b8>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a82      	ldr	r2, [pc, #520]	; (8004498 <HAL_DMA_IRQHandler+0xa78>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d022      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x8b8>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a81      	ldr	r2, [pc, #516]	; (800449c <HAL_DMA_IRQHandler+0xa7c>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d01d      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x8b8>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a7f      	ldr	r2, [pc, #508]	; (80044a0 <HAL_DMA_IRQHandler+0xa80>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d018      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x8b8>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a7e      	ldr	r2, [pc, #504]	; (80044a4 <HAL_DMA_IRQHandler+0xa84>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d013      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x8b8>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a7c      	ldr	r2, [pc, #496]	; (80044a8 <HAL_DMA_IRQHandler+0xa88>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d00e      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x8b8>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a7b      	ldr	r2, [pc, #492]	; (80044ac <HAL_DMA_IRQHandler+0xa8c>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d009      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x8b8>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a79      	ldr	r2, [pc, #484]	; (80044b0 <HAL_DMA_IRQHandler+0xa90>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d004      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x8b8>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a78      	ldr	r2, [pc, #480]	; (80044b4 <HAL_DMA_IRQHandler+0xa94>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d108      	bne.n	80042ea <HAL_DMA_IRQHandler+0x8ca>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0201 	bic.w	r2, r2, #1
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	e007      	b.n	80042fa <HAL_DMA_IRQHandler+0x8da>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 0201 	bic.w	r2, r2, #1
 80042f8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	3301      	adds	r3, #1
 80042fe:	60fb      	str	r3, [r7, #12]
 8004300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004302:	429a      	cmp	r2, r3
 8004304:	d307      	bcc.n	8004316 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1f2      	bne.n	80042fa <HAL_DMA_IRQHandler+0x8da>
 8004314:	e000      	b.n	8004318 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004316:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d004      	beq.n	8004338 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2203      	movs	r2, #3
 8004332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004336:	e003      	b.n	8004340 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 82aa 	beq.w	800489e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	4798      	blx	r3
 8004352:	e2a4      	b.n	800489e <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a57      	ldr	r2, [pc, #348]	; (80044b8 <HAL_DMA_IRQHandler+0xa98>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d04a      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x9d4>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a56      	ldr	r2, [pc, #344]	; (80044bc <HAL_DMA_IRQHandler+0xa9c>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d045      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x9d4>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a54      	ldr	r2, [pc, #336]	; (80044c0 <HAL_DMA_IRQHandler+0xaa0>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d040      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x9d4>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a53      	ldr	r2, [pc, #332]	; (80044c4 <HAL_DMA_IRQHandler+0xaa4>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d03b      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x9d4>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a51      	ldr	r2, [pc, #324]	; (80044c8 <HAL_DMA_IRQHandler+0xaa8>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d036      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x9d4>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a50      	ldr	r2, [pc, #320]	; (80044cc <HAL_DMA_IRQHandler+0xaac>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d031      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x9d4>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a4e      	ldr	r2, [pc, #312]	; (80044d0 <HAL_DMA_IRQHandler+0xab0>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d02c      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x9d4>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a4d      	ldr	r2, [pc, #308]	; (80044d4 <HAL_DMA_IRQHandler+0xab4>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d027      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x9d4>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a4b      	ldr	r2, [pc, #300]	; (80044d8 <HAL_DMA_IRQHandler+0xab8>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d022      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x9d4>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a4a      	ldr	r2, [pc, #296]	; (80044dc <HAL_DMA_IRQHandler+0xabc>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d01d      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x9d4>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a48      	ldr	r2, [pc, #288]	; (80044e0 <HAL_DMA_IRQHandler+0xac0>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d018      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x9d4>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a47      	ldr	r2, [pc, #284]	; (80044e4 <HAL_DMA_IRQHandler+0xac4>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d013      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x9d4>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a45      	ldr	r2, [pc, #276]	; (80044e8 <HAL_DMA_IRQHandler+0xac8>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d00e      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x9d4>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a44      	ldr	r2, [pc, #272]	; (80044ec <HAL_DMA_IRQHandler+0xacc>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d009      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x9d4>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a42      	ldr	r2, [pc, #264]	; (80044f0 <HAL_DMA_IRQHandler+0xad0>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d004      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x9d4>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a41      	ldr	r2, [pc, #260]	; (80044f4 <HAL_DMA_IRQHandler+0xad4>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d101      	bne.n	80043f8 <HAL_DMA_IRQHandler+0x9d8>
 80043f4:	2301      	movs	r3, #1
 80043f6:	e000      	b.n	80043fa <HAL_DMA_IRQHandler+0x9da>
 80043f8:	2300      	movs	r3, #0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 824f 	beq.w	800489e <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800440c:	f003 031f 	and.w	r3, r3, #31
 8004410:	2204      	movs	r2, #4
 8004412:	409a      	lsls	r2, r3
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	4013      	ands	r3, r2
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 80dd 	beq.w	80045d8 <HAL_DMA_IRQHandler+0xbb8>
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	f003 0304 	and.w	r3, r3, #4
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 80d7 	beq.w	80045d8 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800442e:	f003 031f 	and.w	r3, r3, #31
 8004432:	2204      	movs	r2, #4
 8004434:	409a      	lsls	r2, r3
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d059      	beq.n	80044f8 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d109      	bne.n	8004462 <HAL_DMA_IRQHandler+0xa42>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 8220 	beq.w	8004898 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004460:	e21a      	b.n	8004898 <HAL_DMA_IRQHandler+0xe78>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	2b00      	cmp	r3, #0
 8004468:	f000 8216 	beq.w	8004898 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004474:	e210      	b.n	8004898 <HAL_DMA_IRQHandler+0xe78>
 8004476:	bf00      	nop
 8004478:	40020010 	.word	0x40020010
 800447c:	40020028 	.word	0x40020028
 8004480:	40020040 	.word	0x40020040
 8004484:	40020058 	.word	0x40020058
 8004488:	40020070 	.word	0x40020070
 800448c:	40020088 	.word	0x40020088
 8004490:	400200a0 	.word	0x400200a0
 8004494:	400200b8 	.word	0x400200b8
 8004498:	40020410 	.word	0x40020410
 800449c:	40020428 	.word	0x40020428
 80044a0:	40020440 	.word	0x40020440
 80044a4:	40020458 	.word	0x40020458
 80044a8:	40020470 	.word	0x40020470
 80044ac:	40020488 	.word	0x40020488
 80044b0:	400204a0 	.word	0x400204a0
 80044b4:	400204b8 	.word	0x400204b8
 80044b8:	48022c08 	.word	0x48022c08
 80044bc:	48022c1c 	.word	0x48022c1c
 80044c0:	48022c30 	.word	0x48022c30
 80044c4:	48022c44 	.word	0x48022c44
 80044c8:	48022c58 	.word	0x48022c58
 80044cc:	48022c6c 	.word	0x48022c6c
 80044d0:	48022c80 	.word	0x48022c80
 80044d4:	48022c94 	.word	0x48022c94
 80044d8:	58025408 	.word	0x58025408
 80044dc:	5802541c 	.word	0x5802541c
 80044e0:	58025430 	.word	0x58025430
 80044e4:	58025444 	.word	0x58025444
 80044e8:	58025458 	.word	0x58025458
 80044ec:	5802546c 	.word	0x5802546c
 80044f0:	58025480 	.word	0x58025480
 80044f4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	f003 0320 	and.w	r3, r3, #32
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d160      	bne.n	80045c4 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a8c      	ldr	r2, [pc, #560]	; (8004738 <HAL_DMA_IRQHandler+0xd18>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d04a      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xb82>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a8a      	ldr	r2, [pc, #552]	; (800473c <HAL_DMA_IRQHandler+0xd1c>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d045      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xb82>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a89      	ldr	r2, [pc, #548]	; (8004740 <HAL_DMA_IRQHandler+0xd20>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d040      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xb82>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a87      	ldr	r2, [pc, #540]	; (8004744 <HAL_DMA_IRQHandler+0xd24>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d03b      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xb82>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a86      	ldr	r2, [pc, #536]	; (8004748 <HAL_DMA_IRQHandler+0xd28>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d036      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xb82>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a84      	ldr	r2, [pc, #528]	; (800474c <HAL_DMA_IRQHandler+0xd2c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d031      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xb82>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a83      	ldr	r2, [pc, #524]	; (8004750 <HAL_DMA_IRQHandler+0xd30>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d02c      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xb82>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a81      	ldr	r2, [pc, #516]	; (8004754 <HAL_DMA_IRQHandler+0xd34>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d027      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xb82>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a80      	ldr	r2, [pc, #512]	; (8004758 <HAL_DMA_IRQHandler+0xd38>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d022      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xb82>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a7e      	ldr	r2, [pc, #504]	; (800475c <HAL_DMA_IRQHandler+0xd3c>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d01d      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xb82>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a7d      	ldr	r2, [pc, #500]	; (8004760 <HAL_DMA_IRQHandler+0xd40>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d018      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xb82>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a7b      	ldr	r2, [pc, #492]	; (8004764 <HAL_DMA_IRQHandler+0xd44>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d013      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xb82>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a7a      	ldr	r2, [pc, #488]	; (8004768 <HAL_DMA_IRQHandler+0xd48>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d00e      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xb82>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a78      	ldr	r2, [pc, #480]	; (800476c <HAL_DMA_IRQHandler+0xd4c>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d009      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xb82>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a77      	ldr	r2, [pc, #476]	; (8004770 <HAL_DMA_IRQHandler+0xd50>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d004      	beq.n	80045a2 <HAL_DMA_IRQHandler+0xb82>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a75      	ldr	r2, [pc, #468]	; (8004774 <HAL_DMA_IRQHandler+0xd54>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d108      	bne.n	80045b4 <HAL_DMA_IRQHandler+0xb94>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 0208 	bic.w	r2, r2, #8
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	e007      	b.n	80045c4 <HAL_DMA_IRQHandler+0xba4>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 0204 	bic.w	r2, r2, #4
 80045c2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 8165 	beq.w	8004898 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045d6:	e15f      	b.n	8004898 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045dc:	f003 031f 	and.w	r3, r3, #31
 80045e0:	2202      	movs	r2, #2
 80045e2:	409a      	lsls	r2, r3
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	4013      	ands	r3, r2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 80c5 	beq.w	8004778 <HAL_DMA_IRQHandler+0xd58>
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 80bf 	beq.w	8004778 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045fe:	f003 031f 	and.w	r3, r3, #31
 8004602:	2202      	movs	r2, #2
 8004604:	409a      	lsls	r2, r3
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d018      	beq.n	8004646 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d109      	bne.n	8004632 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 813a 	beq.w	800489c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004630:	e134      	b.n	800489c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 8130 	beq.w	800489c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004644:	e12a      	b.n	800489c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	f003 0320 	and.w	r3, r3, #32
 800464c:	2b00      	cmp	r3, #0
 800464e:	d168      	bne.n	8004722 <HAL_DMA_IRQHandler+0xd02>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a38      	ldr	r2, [pc, #224]	; (8004738 <HAL_DMA_IRQHandler+0xd18>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d04a      	beq.n	80046f0 <HAL_DMA_IRQHandler+0xcd0>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a37      	ldr	r2, [pc, #220]	; (800473c <HAL_DMA_IRQHandler+0xd1c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d045      	beq.n	80046f0 <HAL_DMA_IRQHandler+0xcd0>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a35      	ldr	r2, [pc, #212]	; (8004740 <HAL_DMA_IRQHandler+0xd20>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d040      	beq.n	80046f0 <HAL_DMA_IRQHandler+0xcd0>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a34      	ldr	r2, [pc, #208]	; (8004744 <HAL_DMA_IRQHandler+0xd24>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d03b      	beq.n	80046f0 <HAL_DMA_IRQHandler+0xcd0>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a32      	ldr	r2, [pc, #200]	; (8004748 <HAL_DMA_IRQHandler+0xd28>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d036      	beq.n	80046f0 <HAL_DMA_IRQHandler+0xcd0>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a31      	ldr	r2, [pc, #196]	; (800474c <HAL_DMA_IRQHandler+0xd2c>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d031      	beq.n	80046f0 <HAL_DMA_IRQHandler+0xcd0>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a2f      	ldr	r2, [pc, #188]	; (8004750 <HAL_DMA_IRQHandler+0xd30>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d02c      	beq.n	80046f0 <HAL_DMA_IRQHandler+0xcd0>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a2e      	ldr	r2, [pc, #184]	; (8004754 <HAL_DMA_IRQHandler+0xd34>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d027      	beq.n	80046f0 <HAL_DMA_IRQHandler+0xcd0>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a2c      	ldr	r2, [pc, #176]	; (8004758 <HAL_DMA_IRQHandler+0xd38>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d022      	beq.n	80046f0 <HAL_DMA_IRQHandler+0xcd0>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a2b      	ldr	r2, [pc, #172]	; (800475c <HAL_DMA_IRQHandler+0xd3c>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d01d      	beq.n	80046f0 <HAL_DMA_IRQHandler+0xcd0>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a29      	ldr	r2, [pc, #164]	; (8004760 <HAL_DMA_IRQHandler+0xd40>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d018      	beq.n	80046f0 <HAL_DMA_IRQHandler+0xcd0>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a28      	ldr	r2, [pc, #160]	; (8004764 <HAL_DMA_IRQHandler+0xd44>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d013      	beq.n	80046f0 <HAL_DMA_IRQHandler+0xcd0>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a26      	ldr	r2, [pc, #152]	; (8004768 <HAL_DMA_IRQHandler+0xd48>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d00e      	beq.n	80046f0 <HAL_DMA_IRQHandler+0xcd0>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a25      	ldr	r2, [pc, #148]	; (800476c <HAL_DMA_IRQHandler+0xd4c>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d009      	beq.n	80046f0 <HAL_DMA_IRQHandler+0xcd0>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a23      	ldr	r2, [pc, #140]	; (8004770 <HAL_DMA_IRQHandler+0xd50>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d004      	beq.n	80046f0 <HAL_DMA_IRQHandler+0xcd0>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a22      	ldr	r2, [pc, #136]	; (8004774 <HAL_DMA_IRQHandler+0xd54>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d108      	bne.n	8004702 <HAL_DMA_IRQHandler+0xce2>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 0214 	bic.w	r2, r2, #20
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	e007      	b.n	8004712 <HAL_DMA_IRQHandler+0xcf2>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 020a 	bic.w	r2, r2, #10
 8004710:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004726:	2b00      	cmp	r3, #0
 8004728:	f000 80b8 	beq.w	800489c <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004734:	e0b2      	b.n	800489c <HAL_DMA_IRQHandler+0xe7c>
 8004736:	bf00      	nop
 8004738:	40020010 	.word	0x40020010
 800473c:	40020028 	.word	0x40020028
 8004740:	40020040 	.word	0x40020040
 8004744:	40020058 	.word	0x40020058
 8004748:	40020070 	.word	0x40020070
 800474c:	40020088 	.word	0x40020088
 8004750:	400200a0 	.word	0x400200a0
 8004754:	400200b8 	.word	0x400200b8
 8004758:	40020410 	.word	0x40020410
 800475c:	40020428 	.word	0x40020428
 8004760:	40020440 	.word	0x40020440
 8004764:	40020458 	.word	0x40020458
 8004768:	40020470 	.word	0x40020470
 800476c:	40020488 	.word	0x40020488
 8004770:	400204a0 	.word	0x400204a0
 8004774:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800477c:	f003 031f 	and.w	r3, r3, #31
 8004780:	2208      	movs	r2, #8
 8004782:	409a      	lsls	r2, r3
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	4013      	ands	r3, r2
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 8088 	beq.w	800489e <HAL_DMA_IRQHandler+0xe7e>
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	f003 0308 	and.w	r3, r3, #8
 8004794:	2b00      	cmp	r3, #0
 8004796:	f000 8082 	beq.w	800489e <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a41      	ldr	r2, [pc, #260]	; (80048a4 <HAL_DMA_IRQHandler+0xe84>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d04a      	beq.n	800483a <HAL_DMA_IRQHandler+0xe1a>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a3f      	ldr	r2, [pc, #252]	; (80048a8 <HAL_DMA_IRQHandler+0xe88>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d045      	beq.n	800483a <HAL_DMA_IRQHandler+0xe1a>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a3e      	ldr	r2, [pc, #248]	; (80048ac <HAL_DMA_IRQHandler+0xe8c>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d040      	beq.n	800483a <HAL_DMA_IRQHandler+0xe1a>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a3c      	ldr	r2, [pc, #240]	; (80048b0 <HAL_DMA_IRQHandler+0xe90>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d03b      	beq.n	800483a <HAL_DMA_IRQHandler+0xe1a>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a3b      	ldr	r2, [pc, #236]	; (80048b4 <HAL_DMA_IRQHandler+0xe94>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d036      	beq.n	800483a <HAL_DMA_IRQHandler+0xe1a>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a39      	ldr	r2, [pc, #228]	; (80048b8 <HAL_DMA_IRQHandler+0xe98>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d031      	beq.n	800483a <HAL_DMA_IRQHandler+0xe1a>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a38      	ldr	r2, [pc, #224]	; (80048bc <HAL_DMA_IRQHandler+0xe9c>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d02c      	beq.n	800483a <HAL_DMA_IRQHandler+0xe1a>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a36      	ldr	r2, [pc, #216]	; (80048c0 <HAL_DMA_IRQHandler+0xea0>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d027      	beq.n	800483a <HAL_DMA_IRQHandler+0xe1a>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a35      	ldr	r2, [pc, #212]	; (80048c4 <HAL_DMA_IRQHandler+0xea4>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d022      	beq.n	800483a <HAL_DMA_IRQHandler+0xe1a>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a33      	ldr	r2, [pc, #204]	; (80048c8 <HAL_DMA_IRQHandler+0xea8>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d01d      	beq.n	800483a <HAL_DMA_IRQHandler+0xe1a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a32      	ldr	r2, [pc, #200]	; (80048cc <HAL_DMA_IRQHandler+0xeac>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d018      	beq.n	800483a <HAL_DMA_IRQHandler+0xe1a>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a30      	ldr	r2, [pc, #192]	; (80048d0 <HAL_DMA_IRQHandler+0xeb0>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d013      	beq.n	800483a <HAL_DMA_IRQHandler+0xe1a>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a2f      	ldr	r2, [pc, #188]	; (80048d4 <HAL_DMA_IRQHandler+0xeb4>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d00e      	beq.n	800483a <HAL_DMA_IRQHandler+0xe1a>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a2d      	ldr	r2, [pc, #180]	; (80048d8 <HAL_DMA_IRQHandler+0xeb8>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d009      	beq.n	800483a <HAL_DMA_IRQHandler+0xe1a>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a2c      	ldr	r2, [pc, #176]	; (80048dc <HAL_DMA_IRQHandler+0xebc>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d004      	beq.n	800483a <HAL_DMA_IRQHandler+0xe1a>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a2a      	ldr	r2, [pc, #168]	; (80048e0 <HAL_DMA_IRQHandler+0xec0>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d108      	bne.n	800484c <HAL_DMA_IRQHandler+0xe2c>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 021c 	bic.w	r2, r2, #28
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	e007      	b.n	800485c <HAL_DMA_IRQHandler+0xe3c>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 020e 	bic.w	r2, r2, #14
 800485a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004860:	f003 031f 	and.w	r3, r3, #31
 8004864:	2201      	movs	r2, #1
 8004866:	409a      	lsls	r2, r3
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004886:	2b00      	cmp	r3, #0
 8004888:	d009      	beq.n	800489e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	4798      	blx	r3
 8004892:	e004      	b.n	800489e <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004894:	bf00      	nop
 8004896:	e002      	b.n	800489e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004898:	bf00      	nop
 800489a:	e000      	b.n	800489e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800489c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800489e:	3728      	adds	r7, #40	; 0x28
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	40020010 	.word	0x40020010
 80048a8:	40020028 	.word	0x40020028
 80048ac:	40020040 	.word	0x40020040
 80048b0:	40020058 	.word	0x40020058
 80048b4:	40020070 	.word	0x40020070
 80048b8:	40020088 	.word	0x40020088
 80048bc:	400200a0 	.word	0x400200a0
 80048c0:	400200b8 	.word	0x400200b8
 80048c4:	40020410 	.word	0x40020410
 80048c8:	40020428 	.word	0x40020428
 80048cc:	40020440 	.word	0x40020440
 80048d0:	40020458 	.word	0x40020458
 80048d4:	40020470 	.word	0x40020470
 80048d8:	40020488 	.word	0x40020488
 80048dc:	400204a0 	.word	0x400204a0
 80048e0:	400204b8 	.word	0x400204b8

080048e4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b087      	sub	sp, #28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
 80048f0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048fc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a84      	ldr	r2, [pc, #528]	; (8004b14 <DMA_SetConfig+0x230>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d072      	beq.n	80049ee <DMA_SetConfig+0x10a>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a82      	ldr	r2, [pc, #520]	; (8004b18 <DMA_SetConfig+0x234>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d06d      	beq.n	80049ee <DMA_SetConfig+0x10a>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a81      	ldr	r2, [pc, #516]	; (8004b1c <DMA_SetConfig+0x238>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d068      	beq.n	80049ee <DMA_SetConfig+0x10a>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a7f      	ldr	r2, [pc, #508]	; (8004b20 <DMA_SetConfig+0x23c>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d063      	beq.n	80049ee <DMA_SetConfig+0x10a>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a7e      	ldr	r2, [pc, #504]	; (8004b24 <DMA_SetConfig+0x240>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d05e      	beq.n	80049ee <DMA_SetConfig+0x10a>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a7c      	ldr	r2, [pc, #496]	; (8004b28 <DMA_SetConfig+0x244>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d059      	beq.n	80049ee <DMA_SetConfig+0x10a>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a7b      	ldr	r2, [pc, #492]	; (8004b2c <DMA_SetConfig+0x248>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d054      	beq.n	80049ee <DMA_SetConfig+0x10a>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a79      	ldr	r2, [pc, #484]	; (8004b30 <DMA_SetConfig+0x24c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d04f      	beq.n	80049ee <DMA_SetConfig+0x10a>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a78      	ldr	r2, [pc, #480]	; (8004b34 <DMA_SetConfig+0x250>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d04a      	beq.n	80049ee <DMA_SetConfig+0x10a>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a76      	ldr	r2, [pc, #472]	; (8004b38 <DMA_SetConfig+0x254>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d045      	beq.n	80049ee <DMA_SetConfig+0x10a>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a75      	ldr	r2, [pc, #468]	; (8004b3c <DMA_SetConfig+0x258>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d040      	beq.n	80049ee <DMA_SetConfig+0x10a>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a73      	ldr	r2, [pc, #460]	; (8004b40 <DMA_SetConfig+0x25c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d03b      	beq.n	80049ee <DMA_SetConfig+0x10a>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a72      	ldr	r2, [pc, #456]	; (8004b44 <DMA_SetConfig+0x260>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d036      	beq.n	80049ee <DMA_SetConfig+0x10a>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a70      	ldr	r2, [pc, #448]	; (8004b48 <DMA_SetConfig+0x264>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d031      	beq.n	80049ee <DMA_SetConfig+0x10a>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a6f      	ldr	r2, [pc, #444]	; (8004b4c <DMA_SetConfig+0x268>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d02c      	beq.n	80049ee <DMA_SetConfig+0x10a>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a6d      	ldr	r2, [pc, #436]	; (8004b50 <DMA_SetConfig+0x26c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d027      	beq.n	80049ee <DMA_SetConfig+0x10a>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a6c      	ldr	r2, [pc, #432]	; (8004b54 <DMA_SetConfig+0x270>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d022      	beq.n	80049ee <DMA_SetConfig+0x10a>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a6a      	ldr	r2, [pc, #424]	; (8004b58 <DMA_SetConfig+0x274>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d01d      	beq.n	80049ee <DMA_SetConfig+0x10a>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a69      	ldr	r2, [pc, #420]	; (8004b5c <DMA_SetConfig+0x278>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d018      	beq.n	80049ee <DMA_SetConfig+0x10a>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a67      	ldr	r2, [pc, #412]	; (8004b60 <DMA_SetConfig+0x27c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d013      	beq.n	80049ee <DMA_SetConfig+0x10a>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a66      	ldr	r2, [pc, #408]	; (8004b64 <DMA_SetConfig+0x280>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d00e      	beq.n	80049ee <DMA_SetConfig+0x10a>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a64      	ldr	r2, [pc, #400]	; (8004b68 <DMA_SetConfig+0x284>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d009      	beq.n	80049ee <DMA_SetConfig+0x10a>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a63      	ldr	r2, [pc, #396]	; (8004b6c <DMA_SetConfig+0x288>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d004      	beq.n	80049ee <DMA_SetConfig+0x10a>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a61      	ldr	r2, [pc, #388]	; (8004b70 <DMA_SetConfig+0x28c>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d101      	bne.n	80049f2 <DMA_SetConfig+0x10e>
 80049ee:	2301      	movs	r3, #1
 80049f0:	e000      	b.n	80049f4 <DMA_SetConfig+0x110>
 80049f2:	2300      	movs	r3, #0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00d      	beq.n	8004a14 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004a00:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d004      	beq.n	8004a14 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004a12:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a3e      	ldr	r2, [pc, #248]	; (8004b14 <DMA_SetConfig+0x230>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d04a      	beq.n	8004ab4 <DMA_SetConfig+0x1d0>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a3d      	ldr	r2, [pc, #244]	; (8004b18 <DMA_SetConfig+0x234>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d045      	beq.n	8004ab4 <DMA_SetConfig+0x1d0>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a3b      	ldr	r2, [pc, #236]	; (8004b1c <DMA_SetConfig+0x238>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d040      	beq.n	8004ab4 <DMA_SetConfig+0x1d0>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a3a      	ldr	r2, [pc, #232]	; (8004b20 <DMA_SetConfig+0x23c>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d03b      	beq.n	8004ab4 <DMA_SetConfig+0x1d0>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a38      	ldr	r2, [pc, #224]	; (8004b24 <DMA_SetConfig+0x240>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d036      	beq.n	8004ab4 <DMA_SetConfig+0x1d0>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a37      	ldr	r2, [pc, #220]	; (8004b28 <DMA_SetConfig+0x244>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d031      	beq.n	8004ab4 <DMA_SetConfig+0x1d0>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a35      	ldr	r2, [pc, #212]	; (8004b2c <DMA_SetConfig+0x248>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d02c      	beq.n	8004ab4 <DMA_SetConfig+0x1d0>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a34      	ldr	r2, [pc, #208]	; (8004b30 <DMA_SetConfig+0x24c>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d027      	beq.n	8004ab4 <DMA_SetConfig+0x1d0>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a32      	ldr	r2, [pc, #200]	; (8004b34 <DMA_SetConfig+0x250>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d022      	beq.n	8004ab4 <DMA_SetConfig+0x1d0>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a31      	ldr	r2, [pc, #196]	; (8004b38 <DMA_SetConfig+0x254>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d01d      	beq.n	8004ab4 <DMA_SetConfig+0x1d0>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a2f      	ldr	r2, [pc, #188]	; (8004b3c <DMA_SetConfig+0x258>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d018      	beq.n	8004ab4 <DMA_SetConfig+0x1d0>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a2e      	ldr	r2, [pc, #184]	; (8004b40 <DMA_SetConfig+0x25c>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d013      	beq.n	8004ab4 <DMA_SetConfig+0x1d0>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a2c      	ldr	r2, [pc, #176]	; (8004b44 <DMA_SetConfig+0x260>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d00e      	beq.n	8004ab4 <DMA_SetConfig+0x1d0>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a2b      	ldr	r2, [pc, #172]	; (8004b48 <DMA_SetConfig+0x264>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d009      	beq.n	8004ab4 <DMA_SetConfig+0x1d0>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a29      	ldr	r2, [pc, #164]	; (8004b4c <DMA_SetConfig+0x268>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d004      	beq.n	8004ab4 <DMA_SetConfig+0x1d0>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a28      	ldr	r2, [pc, #160]	; (8004b50 <DMA_SetConfig+0x26c>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d101      	bne.n	8004ab8 <DMA_SetConfig+0x1d4>
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e000      	b.n	8004aba <DMA_SetConfig+0x1d6>
 8004ab8:	2300      	movs	r3, #0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d05a      	beq.n	8004b74 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac2:	f003 031f 	and.w	r3, r3, #31
 8004ac6:	223f      	movs	r2, #63	; 0x3f
 8004ac8:	409a      	lsls	r2, r3
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004adc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	2b40      	cmp	r3, #64	; 0x40
 8004aec:	d108      	bne.n	8004b00 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004afe:	e0af      	b.n	8004c60 <DMA_SetConfig+0x37c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68ba      	ldr	r2, [r7, #8]
 8004b06:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	60da      	str	r2, [r3, #12]
}
 8004b10:	e0a6      	b.n	8004c60 <DMA_SetConfig+0x37c>
 8004b12:	bf00      	nop
 8004b14:	40020010 	.word	0x40020010
 8004b18:	40020028 	.word	0x40020028
 8004b1c:	40020040 	.word	0x40020040
 8004b20:	40020058 	.word	0x40020058
 8004b24:	40020070 	.word	0x40020070
 8004b28:	40020088 	.word	0x40020088
 8004b2c:	400200a0 	.word	0x400200a0
 8004b30:	400200b8 	.word	0x400200b8
 8004b34:	40020410 	.word	0x40020410
 8004b38:	40020428 	.word	0x40020428
 8004b3c:	40020440 	.word	0x40020440
 8004b40:	40020458 	.word	0x40020458
 8004b44:	40020470 	.word	0x40020470
 8004b48:	40020488 	.word	0x40020488
 8004b4c:	400204a0 	.word	0x400204a0
 8004b50:	400204b8 	.word	0x400204b8
 8004b54:	58025408 	.word	0x58025408
 8004b58:	5802541c 	.word	0x5802541c
 8004b5c:	58025430 	.word	0x58025430
 8004b60:	58025444 	.word	0x58025444
 8004b64:	58025458 	.word	0x58025458
 8004b68:	5802546c 	.word	0x5802546c
 8004b6c:	58025480 	.word	0x58025480
 8004b70:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a3c      	ldr	r2, [pc, #240]	; (8004c6c <DMA_SetConfig+0x388>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d04a      	beq.n	8004c14 <DMA_SetConfig+0x330>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a3b      	ldr	r2, [pc, #236]	; (8004c70 <DMA_SetConfig+0x38c>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d045      	beq.n	8004c14 <DMA_SetConfig+0x330>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a39      	ldr	r2, [pc, #228]	; (8004c74 <DMA_SetConfig+0x390>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d040      	beq.n	8004c14 <DMA_SetConfig+0x330>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a38      	ldr	r2, [pc, #224]	; (8004c78 <DMA_SetConfig+0x394>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d03b      	beq.n	8004c14 <DMA_SetConfig+0x330>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a36      	ldr	r2, [pc, #216]	; (8004c7c <DMA_SetConfig+0x398>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d036      	beq.n	8004c14 <DMA_SetConfig+0x330>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a35      	ldr	r2, [pc, #212]	; (8004c80 <DMA_SetConfig+0x39c>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d031      	beq.n	8004c14 <DMA_SetConfig+0x330>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a33      	ldr	r2, [pc, #204]	; (8004c84 <DMA_SetConfig+0x3a0>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d02c      	beq.n	8004c14 <DMA_SetConfig+0x330>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a32      	ldr	r2, [pc, #200]	; (8004c88 <DMA_SetConfig+0x3a4>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d027      	beq.n	8004c14 <DMA_SetConfig+0x330>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a30      	ldr	r2, [pc, #192]	; (8004c8c <DMA_SetConfig+0x3a8>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d022      	beq.n	8004c14 <DMA_SetConfig+0x330>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a2f      	ldr	r2, [pc, #188]	; (8004c90 <DMA_SetConfig+0x3ac>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d01d      	beq.n	8004c14 <DMA_SetConfig+0x330>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a2d      	ldr	r2, [pc, #180]	; (8004c94 <DMA_SetConfig+0x3b0>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d018      	beq.n	8004c14 <DMA_SetConfig+0x330>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a2c      	ldr	r2, [pc, #176]	; (8004c98 <DMA_SetConfig+0x3b4>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d013      	beq.n	8004c14 <DMA_SetConfig+0x330>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a2a      	ldr	r2, [pc, #168]	; (8004c9c <DMA_SetConfig+0x3b8>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d00e      	beq.n	8004c14 <DMA_SetConfig+0x330>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a29      	ldr	r2, [pc, #164]	; (8004ca0 <DMA_SetConfig+0x3bc>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d009      	beq.n	8004c14 <DMA_SetConfig+0x330>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a27      	ldr	r2, [pc, #156]	; (8004ca4 <DMA_SetConfig+0x3c0>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d004      	beq.n	8004c14 <DMA_SetConfig+0x330>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a26      	ldr	r2, [pc, #152]	; (8004ca8 <DMA_SetConfig+0x3c4>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d101      	bne.n	8004c18 <DMA_SetConfig+0x334>
 8004c14:	2301      	movs	r3, #1
 8004c16:	e000      	b.n	8004c1a <DMA_SetConfig+0x336>
 8004c18:	2300      	movs	r3, #0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d020      	beq.n	8004c60 <DMA_SetConfig+0x37c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c22:	f003 031f 	and.w	r3, r3, #31
 8004c26:	2201      	movs	r2, #1
 8004c28:	409a      	lsls	r2, r3
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	683a      	ldr	r2, [r7, #0]
 8004c34:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	2b40      	cmp	r3, #64	; 0x40
 8004c3c:	d108      	bne.n	8004c50 <DMA_SetConfig+0x36c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	60da      	str	r2, [r3, #12]
}
 8004c4e:	e007      	b.n	8004c60 <DMA_SetConfig+0x37c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	60da      	str	r2, [r3, #12]
}
 8004c60:	bf00      	nop
 8004c62:	371c      	adds	r7, #28
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	48022c08 	.word	0x48022c08
 8004c70:	48022c1c 	.word	0x48022c1c
 8004c74:	48022c30 	.word	0x48022c30
 8004c78:	48022c44 	.word	0x48022c44
 8004c7c:	48022c58 	.word	0x48022c58
 8004c80:	48022c6c 	.word	0x48022c6c
 8004c84:	48022c80 	.word	0x48022c80
 8004c88:	48022c94 	.word	0x48022c94
 8004c8c:	58025408 	.word	0x58025408
 8004c90:	5802541c 	.word	0x5802541c
 8004c94:	58025430 	.word	0x58025430
 8004c98:	58025444 	.word	0x58025444
 8004c9c:	58025458 	.word	0x58025458
 8004ca0:	5802546c 	.word	0x5802546c
 8004ca4:	58025480 	.word	0x58025480
 8004ca8:	58025494 	.word	0x58025494

08004cac <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a42      	ldr	r2, [pc, #264]	; (8004dc4 <DMA_CalcBaseAndBitshift+0x118>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d04a      	beq.n	8004d54 <DMA_CalcBaseAndBitshift+0xa8>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a41      	ldr	r2, [pc, #260]	; (8004dc8 <DMA_CalcBaseAndBitshift+0x11c>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d045      	beq.n	8004d54 <DMA_CalcBaseAndBitshift+0xa8>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a3f      	ldr	r2, [pc, #252]	; (8004dcc <DMA_CalcBaseAndBitshift+0x120>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d040      	beq.n	8004d54 <DMA_CalcBaseAndBitshift+0xa8>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a3e      	ldr	r2, [pc, #248]	; (8004dd0 <DMA_CalcBaseAndBitshift+0x124>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d03b      	beq.n	8004d54 <DMA_CalcBaseAndBitshift+0xa8>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a3c      	ldr	r2, [pc, #240]	; (8004dd4 <DMA_CalcBaseAndBitshift+0x128>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d036      	beq.n	8004d54 <DMA_CalcBaseAndBitshift+0xa8>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a3b      	ldr	r2, [pc, #236]	; (8004dd8 <DMA_CalcBaseAndBitshift+0x12c>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d031      	beq.n	8004d54 <DMA_CalcBaseAndBitshift+0xa8>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a39      	ldr	r2, [pc, #228]	; (8004ddc <DMA_CalcBaseAndBitshift+0x130>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d02c      	beq.n	8004d54 <DMA_CalcBaseAndBitshift+0xa8>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a38      	ldr	r2, [pc, #224]	; (8004de0 <DMA_CalcBaseAndBitshift+0x134>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d027      	beq.n	8004d54 <DMA_CalcBaseAndBitshift+0xa8>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a36      	ldr	r2, [pc, #216]	; (8004de4 <DMA_CalcBaseAndBitshift+0x138>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d022      	beq.n	8004d54 <DMA_CalcBaseAndBitshift+0xa8>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a35      	ldr	r2, [pc, #212]	; (8004de8 <DMA_CalcBaseAndBitshift+0x13c>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d01d      	beq.n	8004d54 <DMA_CalcBaseAndBitshift+0xa8>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a33      	ldr	r2, [pc, #204]	; (8004dec <DMA_CalcBaseAndBitshift+0x140>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d018      	beq.n	8004d54 <DMA_CalcBaseAndBitshift+0xa8>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a32      	ldr	r2, [pc, #200]	; (8004df0 <DMA_CalcBaseAndBitshift+0x144>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d013      	beq.n	8004d54 <DMA_CalcBaseAndBitshift+0xa8>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a30      	ldr	r2, [pc, #192]	; (8004df4 <DMA_CalcBaseAndBitshift+0x148>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d00e      	beq.n	8004d54 <DMA_CalcBaseAndBitshift+0xa8>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a2f      	ldr	r2, [pc, #188]	; (8004df8 <DMA_CalcBaseAndBitshift+0x14c>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d009      	beq.n	8004d54 <DMA_CalcBaseAndBitshift+0xa8>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a2d      	ldr	r2, [pc, #180]	; (8004dfc <DMA_CalcBaseAndBitshift+0x150>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d004      	beq.n	8004d54 <DMA_CalcBaseAndBitshift+0xa8>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a2c      	ldr	r2, [pc, #176]	; (8004e00 <DMA_CalcBaseAndBitshift+0x154>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d101      	bne.n	8004d58 <DMA_CalcBaseAndBitshift+0xac>
 8004d54:	2301      	movs	r3, #1
 8004d56:	e000      	b.n	8004d5a <DMA_CalcBaseAndBitshift+0xae>
 8004d58:	2300      	movs	r3, #0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d024      	beq.n	8004da8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	3b10      	subs	r3, #16
 8004d66:	4a27      	ldr	r2, [pc, #156]	; (8004e04 <DMA_CalcBaseAndBitshift+0x158>)
 8004d68:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6c:	091b      	lsrs	r3, r3, #4
 8004d6e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f003 0307 	and.w	r3, r3, #7
 8004d76:	4a24      	ldr	r2, [pc, #144]	; (8004e08 <DMA_CalcBaseAndBitshift+0x15c>)
 8004d78:	5cd3      	ldrb	r3, [r2, r3]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2b03      	cmp	r3, #3
 8004d84:	d908      	bls.n	8004d98 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	4b1f      	ldr	r3, [pc, #124]	; (8004e0c <DMA_CalcBaseAndBitshift+0x160>)
 8004d8e:	4013      	ands	r3, r2
 8004d90:	1d1a      	adds	r2, r3, #4
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	659a      	str	r2, [r3, #88]	; 0x58
 8004d96:	e00d      	b.n	8004db4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	4b1b      	ldr	r3, [pc, #108]	; (8004e0c <DMA_CalcBaseAndBitshift+0x160>)
 8004da0:	4013      	ands	r3, r2
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	6593      	str	r3, [r2, #88]	; 0x58
 8004da6:	e005      	b.n	8004db4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3714      	adds	r7, #20
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	40020010 	.word	0x40020010
 8004dc8:	40020028 	.word	0x40020028
 8004dcc:	40020040 	.word	0x40020040
 8004dd0:	40020058 	.word	0x40020058
 8004dd4:	40020070 	.word	0x40020070
 8004dd8:	40020088 	.word	0x40020088
 8004ddc:	400200a0 	.word	0x400200a0
 8004de0:	400200b8 	.word	0x400200b8
 8004de4:	40020410 	.word	0x40020410
 8004de8:	40020428 	.word	0x40020428
 8004dec:	40020440 	.word	0x40020440
 8004df0:	40020458 	.word	0x40020458
 8004df4:	40020470 	.word	0x40020470
 8004df8:	40020488 	.word	0x40020488
 8004dfc:	400204a0 	.word	0x400204a0
 8004e00:	400204b8 	.word	0x400204b8
 8004e04:	aaaaaaab 	.word	0xaaaaaaab
 8004e08:	0800979c 	.word	0x0800979c
 8004e0c:	fffffc00 	.word	0xfffffc00

08004e10 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d120      	bne.n	8004e66 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e28:	2b03      	cmp	r3, #3
 8004e2a:	d858      	bhi.n	8004ede <DMA_CheckFifoParam+0xce>
 8004e2c:	a201      	add	r2, pc, #4	; (adr r2, 8004e34 <DMA_CheckFifoParam+0x24>)
 8004e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e32:	bf00      	nop
 8004e34:	08004e45 	.word	0x08004e45
 8004e38:	08004e57 	.word	0x08004e57
 8004e3c:	08004e45 	.word	0x08004e45
 8004e40:	08004edf 	.word	0x08004edf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d048      	beq.n	8004ee2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e54:	e045      	b.n	8004ee2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e5e:	d142      	bne.n	8004ee6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e64:	e03f      	b.n	8004ee6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e6e:	d123      	bne.n	8004eb8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e74:	2b03      	cmp	r3, #3
 8004e76:	d838      	bhi.n	8004eea <DMA_CheckFifoParam+0xda>
 8004e78:	a201      	add	r2, pc, #4	; (adr r2, 8004e80 <DMA_CheckFifoParam+0x70>)
 8004e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7e:	bf00      	nop
 8004e80:	08004e91 	.word	0x08004e91
 8004e84:	08004e97 	.word	0x08004e97
 8004e88:	08004e91 	.word	0x08004e91
 8004e8c:	08004ea9 	.word	0x08004ea9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	73fb      	strb	r3, [r7, #15]
        break;
 8004e94:	e030      	b.n	8004ef8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d025      	beq.n	8004eee <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ea6:	e022      	b.n	8004eee <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004eb0:	d11f      	bne.n	8004ef2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004eb6:	e01c      	b.n	8004ef2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d902      	bls.n	8004ec6 <DMA_CheckFifoParam+0xb6>
 8004ec0:	2b03      	cmp	r3, #3
 8004ec2:	d003      	beq.n	8004ecc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004ec4:	e018      	b.n	8004ef8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	73fb      	strb	r3, [r7, #15]
        break;
 8004eca:	e015      	b.n	8004ef8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00e      	beq.n	8004ef6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	73fb      	strb	r3, [r7, #15]
    break;
 8004edc:	e00b      	b.n	8004ef6 <DMA_CheckFifoParam+0xe6>
        break;
 8004ede:	bf00      	nop
 8004ee0:	e00a      	b.n	8004ef8 <DMA_CheckFifoParam+0xe8>
        break;
 8004ee2:	bf00      	nop
 8004ee4:	e008      	b.n	8004ef8 <DMA_CheckFifoParam+0xe8>
        break;
 8004ee6:	bf00      	nop
 8004ee8:	e006      	b.n	8004ef8 <DMA_CheckFifoParam+0xe8>
        break;
 8004eea:	bf00      	nop
 8004eec:	e004      	b.n	8004ef8 <DMA_CheckFifoParam+0xe8>
        break;
 8004eee:	bf00      	nop
 8004ef0:	e002      	b.n	8004ef8 <DMA_CheckFifoParam+0xe8>
        break;
 8004ef2:	bf00      	nop
 8004ef4:	e000      	b.n	8004ef8 <DMA_CheckFifoParam+0xe8>
    break;
 8004ef6:	bf00      	nop
    }
  }

  return status;
 8004ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop

08004f08 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a38      	ldr	r2, [pc, #224]	; (8004ffc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d022      	beq.n	8004f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a36      	ldr	r2, [pc, #216]	; (8005000 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d01d      	beq.n	8004f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a35      	ldr	r2, [pc, #212]	; (8005004 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d018      	beq.n	8004f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a33      	ldr	r2, [pc, #204]	; (8005008 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d013      	beq.n	8004f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a32      	ldr	r2, [pc, #200]	; (800500c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d00e      	beq.n	8004f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a30      	ldr	r2, [pc, #192]	; (8005010 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d009      	beq.n	8004f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a2f      	ldr	r2, [pc, #188]	; (8005014 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d004      	beq.n	8004f66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a2d      	ldr	r2, [pc, #180]	; (8005018 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d101      	bne.n	8004f6a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004f66:	2301      	movs	r3, #1
 8004f68:	e000      	b.n	8004f6c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d01a      	beq.n	8004fa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	3b08      	subs	r3, #8
 8004f78:	4a28      	ldr	r2, [pc, #160]	; (800501c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7e:	091b      	lsrs	r3, r3, #4
 8004f80:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	4b26      	ldr	r3, [pc, #152]	; (8005020 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004f86:	4413      	add	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a24      	ldr	r2, [pc, #144]	; (8005024 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004f94:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f003 031f 	and.w	r3, r3, #31
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	409a      	lsls	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004fa4:	e024      	b.n	8004ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	3b10      	subs	r3, #16
 8004fae:	4a1e      	ldr	r2, [pc, #120]	; (8005028 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb4:	091b      	lsrs	r3, r3, #4
 8004fb6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	4a1c      	ldr	r2, [pc, #112]	; (800502c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d806      	bhi.n	8004fce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	4a1b      	ldr	r2, [pc, #108]	; (8005030 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d902      	bls.n	8004fce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	3308      	adds	r3, #8
 8004fcc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	4b18      	ldr	r3, [pc, #96]	; (8005034 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004fd2:	4413      	add	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a16      	ldr	r2, [pc, #88]	; (8005038 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004fe0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f003 031f 	and.w	r3, r3, #31
 8004fe8:	2201      	movs	r2, #1
 8004fea:	409a      	lsls	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004ff0:	bf00      	nop
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	58025408 	.word	0x58025408
 8005000:	5802541c 	.word	0x5802541c
 8005004:	58025430 	.word	0x58025430
 8005008:	58025444 	.word	0x58025444
 800500c:	58025458 	.word	0x58025458
 8005010:	5802546c 	.word	0x5802546c
 8005014:	58025480 	.word	0x58025480
 8005018:	58025494 	.word	0x58025494
 800501c:	cccccccd 	.word	0xcccccccd
 8005020:	16009600 	.word	0x16009600
 8005024:	58025880 	.word	0x58025880
 8005028:	aaaaaaab 	.word	0xaaaaaaab
 800502c:	400204b8 	.word	0x400204b8
 8005030:	4002040f 	.word	0x4002040f
 8005034:	10008200 	.word	0x10008200
 8005038:	40020880 	.word	0x40020880

0800503c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	b2db      	uxtb	r3, r3
 800504a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d04a      	beq.n	80050e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2b08      	cmp	r3, #8
 8005056:	d847      	bhi.n	80050e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a25      	ldr	r2, [pc, #148]	; (80050f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d022      	beq.n	80050a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a24      	ldr	r2, [pc, #144]	; (80050f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d01d      	beq.n	80050a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a22      	ldr	r2, [pc, #136]	; (80050fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d018      	beq.n	80050a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a21      	ldr	r2, [pc, #132]	; (8005100 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d013      	beq.n	80050a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a1f      	ldr	r2, [pc, #124]	; (8005104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d00e      	beq.n	80050a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a1e      	ldr	r2, [pc, #120]	; (8005108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d009      	beq.n	80050a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a1c      	ldr	r2, [pc, #112]	; (800510c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d004      	beq.n	80050a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a1b      	ldr	r2, [pc, #108]	; (8005110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d101      	bne.n	80050ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80050a8:	2301      	movs	r3, #1
 80050aa:	e000      	b.n	80050ae <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80050ac:	2300      	movs	r3, #0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00a      	beq.n	80050c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	4b17      	ldr	r3, [pc, #92]	; (8005114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80050b6:	4413      	add	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	461a      	mov	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a15      	ldr	r2, [pc, #84]	; (8005118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80050c4:	671a      	str	r2, [r3, #112]	; 0x70
 80050c6:	e009      	b.n	80050dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	4b14      	ldr	r3, [pc, #80]	; (800511c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80050cc:	4413      	add	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	461a      	mov	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a11      	ldr	r2, [pc, #68]	; (8005120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80050da:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	3b01      	subs	r3, #1
 80050e0:	2201      	movs	r2, #1
 80050e2:	409a      	lsls	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80050e8:	bf00      	nop
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	58025408 	.word	0x58025408
 80050f8:	5802541c 	.word	0x5802541c
 80050fc:	58025430 	.word	0x58025430
 8005100:	58025444 	.word	0x58025444
 8005104:	58025458 	.word	0x58025458
 8005108:	5802546c 	.word	0x5802546c
 800510c:	58025480 	.word	0x58025480
 8005110:	58025494 	.word	0x58025494
 8005114:	1600963f 	.word	0x1600963f
 8005118:	58025940 	.word	0x58025940
 800511c:	1000823f 	.word	0x1000823f
 8005120:	40020940 	.word	0x40020940

08005124 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005124:	b480      	push	{r7}
 8005126:	b089      	sub	sp, #36	; 0x24
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800512e:	2300      	movs	r3, #0
 8005130:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005132:	4b89      	ldr	r3, [pc, #548]	; (8005358 <HAL_GPIO_Init+0x234>)
 8005134:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005136:	e194      	b.n	8005462 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	2101      	movs	r1, #1
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	fa01 f303 	lsl.w	r3, r1, r3
 8005144:	4013      	ands	r3, r2
 8005146:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	2b00      	cmp	r3, #0
 800514c:	f000 8186 	beq.w	800545c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d00b      	beq.n	8005170 <HAL_GPIO_Init+0x4c>
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	2b02      	cmp	r3, #2
 800515e:	d007      	beq.n	8005170 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005164:	2b11      	cmp	r3, #17
 8005166:	d003      	beq.n	8005170 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	2b12      	cmp	r3, #18
 800516e:	d130      	bne.n	80051d2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	2203      	movs	r2, #3
 800517c:	fa02 f303 	lsl.w	r3, r2, r3
 8005180:	43db      	mvns	r3, r3
 8005182:	69ba      	ldr	r2, [r7, #24]
 8005184:	4013      	ands	r3, r2
 8005186:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	68da      	ldr	r2, [r3, #12]
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	005b      	lsls	r3, r3, #1
 8005190:	fa02 f303 	lsl.w	r3, r2, r3
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	4313      	orrs	r3, r2
 8005198:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80051a6:	2201      	movs	r2, #1
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	fa02 f303 	lsl.w	r3, r2, r3
 80051ae:	43db      	mvns	r3, r3
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	4013      	ands	r3, r2
 80051b4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	091b      	lsrs	r3, r3, #4
 80051bc:	f003 0201 	and.w	r2, r3, #1
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	fa02 f303 	lsl.w	r3, r2, r3
 80051c6:	69ba      	ldr	r2, [r7, #24]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	005b      	lsls	r3, r3, #1
 80051dc:	2203      	movs	r2, #3
 80051de:	fa02 f303 	lsl.w	r3, r2, r3
 80051e2:	43db      	mvns	r3, r3
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	4013      	ands	r3, r2
 80051e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	689a      	ldr	r2, [r3, #8]
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	005b      	lsls	r3, r3, #1
 80051f2:	fa02 f303 	lsl.w	r3, r2, r3
 80051f6:	69ba      	ldr	r2, [r7, #24]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	2b02      	cmp	r3, #2
 8005208:	d003      	beq.n	8005212 <HAL_GPIO_Init+0xee>
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	2b12      	cmp	r3, #18
 8005210:	d123      	bne.n	800525a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	08da      	lsrs	r2, r3, #3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	3208      	adds	r2, #8
 800521a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800521e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	f003 0307 	and.w	r3, r3, #7
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	220f      	movs	r2, #15
 800522a:	fa02 f303 	lsl.w	r3, r2, r3
 800522e:	43db      	mvns	r3, r3
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	4013      	ands	r3, r2
 8005234:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	691a      	ldr	r2, [r3, #16]
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	f003 0307 	and.w	r3, r3, #7
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	fa02 f303 	lsl.w	r3, r2, r3
 8005246:	69ba      	ldr	r2, [r7, #24]
 8005248:	4313      	orrs	r3, r2
 800524a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	08da      	lsrs	r2, r3, #3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	3208      	adds	r2, #8
 8005254:	69b9      	ldr	r1, [r7, #24]
 8005256:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	005b      	lsls	r3, r3, #1
 8005264:	2203      	movs	r2, #3
 8005266:	fa02 f303 	lsl.w	r3, r2, r3
 800526a:	43db      	mvns	r3, r3
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	4013      	ands	r3, r2
 8005270:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f003 0203 	and.w	r2, r3, #3
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	005b      	lsls	r3, r3, #1
 800527e:	fa02 f303 	lsl.w	r3, r2, r3
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	4313      	orrs	r3, r2
 8005286:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005296:	2b00      	cmp	r3, #0
 8005298:	f000 80e0 	beq.w	800545c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800529c:	4b2f      	ldr	r3, [pc, #188]	; (800535c <HAL_GPIO_Init+0x238>)
 800529e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80052a2:	4a2e      	ldr	r2, [pc, #184]	; (800535c <HAL_GPIO_Init+0x238>)
 80052a4:	f043 0302 	orr.w	r3, r3, #2
 80052a8:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80052ac:	4b2b      	ldr	r3, [pc, #172]	; (800535c <HAL_GPIO_Init+0x238>)
 80052ae:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052ba:	4a29      	ldr	r2, [pc, #164]	; (8005360 <HAL_GPIO_Init+0x23c>)
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	089b      	lsrs	r3, r3, #2
 80052c0:	3302      	adds	r3, #2
 80052c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	f003 0303 	and.w	r3, r3, #3
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	220f      	movs	r2, #15
 80052d2:	fa02 f303 	lsl.w	r3, r2, r3
 80052d6:	43db      	mvns	r3, r3
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	4013      	ands	r3, r2
 80052dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a20      	ldr	r2, [pc, #128]	; (8005364 <HAL_GPIO_Init+0x240>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d052      	beq.n	800538c <HAL_GPIO_Init+0x268>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a1f      	ldr	r2, [pc, #124]	; (8005368 <HAL_GPIO_Init+0x244>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d031      	beq.n	8005352 <HAL_GPIO_Init+0x22e>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a1e      	ldr	r2, [pc, #120]	; (800536c <HAL_GPIO_Init+0x248>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d02b      	beq.n	800534e <HAL_GPIO_Init+0x22a>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a1d      	ldr	r2, [pc, #116]	; (8005370 <HAL_GPIO_Init+0x24c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d025      	beq.n	800534a <HAL_GPIO_Init+0x226>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a1c      	ldr	r2, [pc, #112]	; (8005374 <HAL_GPIO_Init+0x250>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d01f      	beq.n	8005346 <HAL_GPIO_Init+0x222>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a1b      	ldr	r2, [pc, #108]	; (8005378 <HAL_GPIO_Init+0x254>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d019      	beq.n	8005342 <HAL_GPIO_Init+0x21e>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a1a      	ldr	r2, [pc, #104]	; (800537c <HAL_GPIO_Init+0x258>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d013      	beq.n	800533e <HAL_GPIO_Init+0x21a>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a19      	ldr	r2, [pc, #100]	; (8005380 <HAL_GPIO_Init+0x25c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d00d      	beq.n	800533a <HAL_GPIO_Init+0x216>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a18      	ldr	r2, [pc, #96]	; (8005384 <HAL_GPIO_Init+0x260>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d007      	beq.n	8005336 <HAL_GPIO_Init+0x212>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a17      	ldr	r2, [pc, #92]	; (8005388 <HAL_GPIO_Init+0x264>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d101      	bne.n	8005332 <HAL_GPIO_Init+0x20e>
 800532e:	2309      	movs	r3, #9
 8005330:	e02d      	b.n	800538e <HAL_GPIO_Init+0x26a>
 8005332:	230a      	movs	r3, #10
 8005334:	e02b      	b.n	800538e <HAL_GPIO_Init+0x26a>
 8005336:	2308      	movs	r3, #8
 8005338:	e029      	b.n	800538e <HAL_GPIO_Init+0x26a>
 800533a:	2307      	movs	r3, #7
 800533c:	e027      	b.n	800538e <HAL_GPIO_Init+0x26a>
 800533e:	2306      	movs	r3, #6
 8005340:	e025      	b.n	800538e <HAL_GPIO_Init+0x26a>
 8005342:	2305      	movs	r3, #5
 8005344:	e023      	b.n	800538e <HAL_GPIO_Init+0x26a>
 8005346:	2304      	movs	r3, #4
 8005348:	e021      	b.n	800538e <HAL_GPIO_Init+0x26a>
 800534a:	2303      	movs	r3, #3
 800534c:	e01f      	b.n	800538e <HAL_GPIO_Init+0x26a>
 800534e:	2302      	movs	r3, #2
 8005350:	e01d      	b.n	800538e <HAL_GPIO_Init+0x26a>
 8005352:	2301      	movs	r3, #1
 8005354:	e01b      	b.n	800538e <HAL_GPIO_Init+0x26a>
 8005356:	bf00      	nop
 8005358:	58000080 	.word	0x58000080
 800535c:	58024400 	.word	0x58024400
 8005360:	58000400 	.word	0x58000400
 8005364:	58020000 	.word	0x58020000
 8005368:	58020400 	.word	0x58020400
 800536c:	58020800 	.word	0x58020800
 8005370:	58020c00 	.word	0x58020c00
 8005374:	58021000 	.word	0x58021000
 8005378:	58021400 	.word	0x58021400
 800537c:	58021800 	.word	0x58021800
 8005380:	58021c00 	.word	0x58021c00
 8005384:	58022000 	.word	0x58022000
 8005388:	58022400 	.word	0x58022400
 800538c:	2300      	movs	r3, #0
 800538e:	69fa      	ldr	r2, [r7, #28]
 8005390:	f002 0203 	and.w	r2, r2, #3
 8005394:	0092      	lsls	r2, r2, #2
 8005396:	4093      	lsls	r3, r2
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	4313      	orrs	r3, r2
 800539c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800539e:	4938      	ldr	r1, [pc, #224]	; (8005480 <HAL_GPIO_Init+0x35c>)
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	089b      	lsrs	r3, r3, #2
 80053a4:	3302      	adds	r3, #2
 80053a6:	69ba      	ldr	r2, [r7, #24]
 80053a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	43db      	mvns	r3, r3
 80053b6:	69ba      	ldr	r2, [r7, #24]
 80053b8:	4013      	ands	r3, r2
 80053ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d003      	beq.n	80053d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	69ba      	ldr	r2, [r7, #24]
 80053d4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	43db      	mvns	r3, r3
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	4013      	ands	r3, r2
 80053e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	43db      	mvns	r3, r3
 800540c:	69ba      	ldr	r2, [r7, #24]
 800540e:	4013      	ands	r3, r2
 8005410:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800541e:	69ba      	ldr	r2, [r7, #24]
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	4313      	orrs	r3, r2
 8005424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005426:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800542e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	43db      	mvns	r3, r3
 800543a:	69ba      	ldr	r2, [r7, #24]
 800543c:	4013      	ands	r3, r2
 800543e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d003      	beq.n	8005454 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	4313      	orrs	r3, r2
 8005452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005454:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	3301      	adds	r3, #1
 8005460:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	fa22 f303 	lsr.w	r3, r2, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	f47f ae63 	bne.w	8005138 <HAL_GPIO_Init+0x14>
  }
}
 8005472:	bf00      	nop
 8005474:	3724      	adds	r7, #36	; 0x24
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	58000400 	.word	0x58000400

08005484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	460b      	mov	r3, r1
 800548e:	807b      	strh	r3, [r7, #2]
 8005490:	4613      	mov	r3, r2
 8005492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005494:	787b      	ldrb	r3, [r7, #1]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800549a:	887a      	ldrh	r2, [r7, #2]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80054a0:	e003      	b.n	80054aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80054a2:	887b      	ldrh	r3, [r7, #2]
 80054a4:	041a      	lsls	r2, r3, #16
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	619a      	str	r2, [r3, #24]
}
 80054aa:	bf00      	nop
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
	...

080054b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80054c0:	4b29      	ldr	r3, [pc, #164]	; (8005568 <HAL_PWREx_ConfigSupply+0xb0>)
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f003 0307 	and.w	r3, r3, #7
 80054c8:	2b06      	cmp	r3, #6
 80054ca:	d00a      	beq.n	80054e2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80054cc:	4b26      	ldr	r3, [pc, #152]	; (8005568 <HAL_PWREx_ConfigSupply+0xb0>)
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d001      	beq.n	80054de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e040      	b.n	8005560 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80054de:	2300      	movs	r3, #0
 80054e0:	e03e      	b.n	8005560 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80054e2:	4b21      	ldr	r3, [pc, #132]	; (8005568 <HAL_PWREx_ConfigSupply+0xb0>)
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80054ea:	491f      	ldr	r1, [pc, #124]	; (8005568 <HAL_PWREx_ConfigSupply+0xb0>)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80054f2:	f7fb ff25 	bl	8001340 <HAL_GetTick>
 80054f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80054f8:	e009      	b.n	800550e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80054fa:	f7fb ff21 	bl	8001340 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005508:	d901      	bls.n	800550e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e028      	b.n	8005560 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800550e:	4b16      	ldr	r3, [pc, #88]	; (8005568 <HAL_PWREx_ConfigSupply+0xb0>)
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800551a:	d1ee      	bne.n	80054fa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b1e      	cmp	r3, #30
 8005520:	d008      	beq.n	8005534 <HAL_PWREx_ConfigSupply+0x7c>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b2e      	cmp	r3, #46	; 0x2e
 8005526:	d005      	beq.n	8005534 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b1d      	cmp	r3, #29
 800552c:	d002      	beq.n	8005534 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2b2d      	cmp	r3, #45	; 0x2d
 8005532:	d114      	bne.n	800555e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005534:	f7fb ff04 	bl	8001340 <HAL_GetTick>
 8005538:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800553a:	e009      	b.n	8005550 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800553c:	f7fb ff00 	bl	8001340 <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800554a:	d901      	bls.n	8005550 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e007      	b.n	8005560 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005550:	4b05      	ldr	r3, [pc, #20]	; (8005568 <HAL_PWREx_ConfigSupply+0xb0>)
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800555c:	d1ee      	bne.n	800553c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	58024800 	.word	0x58024800

0800556c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b08c      	sub	sp, #48	; 0x30
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e3d7      	b.n	8005d2e <HAL_RCC_OscConfig+0x7c2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b00      	cmp	r3, #0
 8005588:	f000 80b3 	beq.w	80056f2 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800558c:	4b90      	ldr	r3, [pc, #576]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005594:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005596:	4b8e      	ldr	r3, [pc, #568]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 8005598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800559c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559e:	2b10      	cmp	r3, #16
 80055a0:	d007      	beq.n	80055b2 <HAL_RCC_OscConfig+0x46>
 80055a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a4:	2b18      	cmp	r3, #24
 80055a6:	d112      	bne.n	80055ce <HAL_RCC_OscConfig+0x62>
 80055a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055aa:	f003 0303 	and.w	r3, r3, #3
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d10d      	bne.n	80055ce <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055b2:	4b87      	ldr	r3, [pc, #540]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f000 8098 	beq.w	80056f0 <HAL_RCC_OscConfig+0x184>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f040 8093 	bne.w	80056f0 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e3af      	b.n	8005d2e <HAL_RCC_OscConfig+0x7c2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055d6:	d106      	bne.n	80055e6 <HAL_RCC_OscConfig+0x7a>
 80055d8:	4b7d      	ldr	r3, [pc, #500]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a7c      	ldr	r2, [pc, #496]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 80055de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055e2:	6013      	str	r3, [r2, #0]
 80055e4:	e058      	b.n	8005698 <HAL_RCC_OscConfig+0x12c>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d112      	bne.n	8005614 <HAL_RCC_OscConfig+0xa8>
 80055ee:	4b78      	ldr	r3, [pc, #480]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a77      	ldr	r2, [pc, #476]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 80055f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055f8:	6013      	str	r3, [r2, #0]
 80055fa:	4b75      	ldr	r3, [pc, #468]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a74      	ldr	r2, [pc, #464]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 8005600:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005604:	6013      	str	r3, [r2, #0]
 8005606:	4b72      	ldr	r3, [pc, #456]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a71      	ldr	r2, [pc, #452]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 800560c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005610:	6013      	str	r3, [r2, #0]
 8005612:	e041      	b.n	8005698 <HAL_RCC_OscConfig+0x12c>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800561c:	d112      	bne.n	8005644 <HAL_RCC_OscConfig+0xd8>
 800561e:	4b6c      	ldr	r3, [pc, #432]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a6b      	ldr	r2, [pc, #428]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 8005624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005628:	6013      	str	r3, [r2, #0]
 800562a:	4b69      	ldr	r3, [pc, #420]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a68      	ldr	r2, [pc, #416]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 8005630:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005634:	6013      	str	r3, [r2, #0]
 8005636:	4b66      	ldr	r3, [pc, #408]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a65      	ldr	r2, [pc, #404]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 800563c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005640:	6013      	str	r3, [r2, #0]
 8005642:	e029      	b.n	8005698 <HAL_RCC_OscConfig+0x12c>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800564c:	d112      	bne.n	8005674 <HAL_RCC_OscConfig+0x108>
 800564e:	4b60      	ldr	r3, [pc, #384]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a5f      	ldr	r2, [pc, #380]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 8005654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005658:	6013      	str	r3, [r2, #0]
 800565a:	4b5d      	ldr	r3, [pc, #372]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a5c      	ldr	r2, [pc, #368]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 8005660:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005664:	6013      	str	r3, [r2, #0]
 8005666:	4b5a      	ldr	r3, [pc, #360]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a59      	ldr	r2, [pc, #356]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 800566c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005670:	6013      	str	r3, [r2, #0]
 8005672:	e011      	b.n	8005698 <HAL_RCC_OscConfig+0x12c>
 8005674:	4b56      	ldr	r3, [pc, #344]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a55      	ldr	r2, [pc, #340]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 800567a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800567e:	6013      	str	r3, [r2, #0]
 8005680:	4b53      	ldr	r3, [pc, #332]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a52      	ldr	r2, [pc, #328]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 8005686:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800568a:	6013      	str	r3, [r2, #0]
 800568c:	4b50      	ldr	r3, [pc, #320]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a4f      	ldr	r2, [pc, #316]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 8005692:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005696:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d013      	beq.n	80056c8 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a0:	f7fb fe4e 	bl	8001340 <HAL_GetTick>
 80056a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80056a6:	e008      	b.n	80056ba <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056a8:	f7fb fe4a 	bl	8001340 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	2b64      	cmp	r3, #100	; 0x64
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e339      	b.n	8005d2e <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80056ba:	4b45      	ldr	r3, [pc, #276]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d0f0      	beq.n	80056a8 <HAL_RCC_OscConfig+0x13c>
 80056c6:	e014      	b.n	80056f2 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c8:	f7fb fe3a 	bl	8001340 <HAL_GetTick>
 80056cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80056ce:	e008      	b.n	80056e2 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056d0:	f7fb fe36 	bl	8001340 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b64      	cmp	r3, #100	; 0x64
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e325      	b.n	8005d2e <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80056e2:	4b3b      	ldr	r3, [pc, #236]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1f0      	bne.n	80056d0 <HAL_RCC_OscConfig+0x164>
 80056ee:	e000      	b.n	80056f2 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d070      	beq.n	80057e0 <HAL_RCC_OscConfig+0x274>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056fe:	4b34      	ldr	r3, [pc, #208]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005706:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005708:	4b31      	ldr	r3, [pc, #196]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 800570a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800570e:	6a3b      	ldr	r3, [r7, #32]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d007      	beq.n	8005724 <HAL_RCC_OscConfig+0x1b8>
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	2b18      	cmp	r3, #24
 8005718:	d11b      	bne.n	8005752 <HAL_RCC_OscConfig+0x1e6>
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	f003 0303 	and.w	r3, r3, #3
 8005720:	2b00      	cmp	r3, #0
 8005722:	d116      	bne.n	8005752 <HAL_RCC_OscConfig+0x1e6>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005724:	4b2a      	ldr	r3, [pc, #168]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b00      	cmp	r3, #0
 800572e:	d005      	beq.n	800573c <HAL_RCC_OscConfig+0x1d0>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d101      	bne.n	800573c <HAL_RCC_OscConfig+0x1d0>
      {
        return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e2f8      	b.n	8005d2e <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800573c:	4b24      	ldr	r3, [pc, #144]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	061b      	lsls	r3, r3, #24
 800574a:	4921      	ldr	r1, [pc, #132]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 800574c:	4313      	orrs	r3, r2
 800574e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005750:	e046      	b.n	80057e0 <HAL_RCC_OscConfig+0x274>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d026      	beq.n	80057a8 <HAL_RCC_OscConfig+0x23c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800575a:	4b1d      	ldr	r3, [pc, #116]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f023 0219 	bic.w	r2, r3, #25
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	491a      	ldr	r1, [pc, #104]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 8005768:	4313      	orrs	r3, r2
 800576a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800576c:	f7fb fde8 	bl	8001340 <HAL_GetTick>
 8005770:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005772:	e008      	b.n	8005786 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005774:	f7fb fde4 	bl	8001340 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b02      	cmp	r3, #2
 8005780:	d901      	bls.n	8005786 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e2d3      	b.n	8005d2e <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005786:	4b12      	ldr	r3, [pc, #72]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0304 	and.w	r3, r3, #4
 800578e:	2b00      	cmp	r3, #0
 8005790:	d0f0      	beq.n	8005774 <HAL_RCC_OscConfig+0x208>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005792:	4b0f      	ldr	r3, [pc, #60]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	061b      	lsls	r3, r3, #24
 80057a0:	490b      	ldr	r1, [pc, #44]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	604b      	str	r3, [r1, #4]
 80057a6:	e01b      	b.n	80057e0 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057a8:	4b09      	ldr	r3, [pc, #36]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a08      	ldr	r2, [pc, #32]	; (80057d0 <HAL_RCC_OscConfig+0x264>)
 80057ae:	f023 0301 	bic.w	r3, r3, #1
 80057b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b4:	f7fb fdc4 	bl	8001340 <HAL_GetTick>
 80057b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80057ba:	e00b      	b.n	80057d4 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057bc:	f7fb fdc0 	bl	8001340 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d904      	bls.n	80057d4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e2af      	b.n	8005d2e <HAL_RCC_OscConfig+0x7c2>
 80057ce:	bf00      	nop
 80057d0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80057d4:	4b99      	ldr	r3, [pc, #612]	; (8005a3c <HAL_RCC_OscConfig+0x4d0>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0304 	and.w	r3, r3, #4
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1ed      	bne.n	80057bc <HAL_RCC_OscConfig+0x250>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0310 	and.w	r3, r3, #16
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d06a      	beq.n	80058c2 <HAL_RCC_OscConfig+0x356>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057ec:	4b93      	ldr	r3, [pc, #588]	; (8005a3c <HAL_RCC_OscConfig+0x4d0>)
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057f4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80057f6:	4b91      	ldr	r3, [pc, #580]	; (8005a3c <HAL_RCC_OscConfig+0x4d0>)
 80057f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fa:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	2b08      	cmp	r3, #8
 8005800:	d007      	beq.n	8005812 <HAL_RCC_OscConfig+0x2a6>
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	2b18      	cmp	r3, #24
 8005806:	d11b      	bne.n	8005840 <HAL_RCC_OscConfig+0x2d4>
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	f003 0303 	and.w	r3, r3, #3
 800580e:	2b01      	cmp	r3, #1
 8005810:	d116      	bne.n	8005840 <HAL_RCC_OscConfig+0x2d4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005812:	4b8a      	ldr	r3, [pc, #552]	; (8005a3c <HAL_RCC_OscConfig+0x4d0>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800581a:	2b00      	cmp	r3, #0
 800581c:	d005      	beq.n	800582a <HAL_RCC_OscConfig+0x2be>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	69db      	ldr	r3, [r3, #28]
 8005822:	2b80      	cmp	r3, #128	; 0x80
 8005824:	d001      	beq.n	800582a <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e281      	b.n	8005d2e <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800582a:	4b84      	ldr	r3, [pc, #528]	; (8005a3c <HAL_RCC_OscConfig+0x4d0>)
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	061b      	lsls	r3, r3, #24
 8005838:	4980      	ldr	r1, [pc, #512]	; (8005a3c <HAL_RCC_OscConfig+0x4d0>)
 800583a:	4313      	orrs	r3, r2
 800583c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800583e:	e040      	b.n	80058c2 <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	69db      	ldr	r3, [r3, #28]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d023      	beq.n	8005890 <HAL_RCC_OscConfig+0x324>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005848:	4b7c      	ldr	r3, [pc, #496]	; (8005a3c <HAL_RCC_OscConfig+0x4d0>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a7b      	ldr	r2, [pc, #492]	; (8005a3c <HAL_RCC_OscConfig+0x4d0>)
 800584e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005854:	f7fb fd74 	bl	8001340 <HAL_GetTick>
 8005858:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800585a:	e008      	b.n	800586e <HAL_RCC_OscConfig+0x302>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800585c:	f7fb fd70 	bl	8001340 <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	2b02      	cmp	r3, #2
 8005868:	d901      	bls.n	800586e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e25f      	b.n	8005d2e <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800586e:	4b73      	ldr	r3, [pc, #460]	; (8005a3c <HAL_RCC_OscConfig+0x4d0>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005876:	2b00      	cmp	r3, #0
 8005878:	d0f0      	beq.n	800585c <HAL_RCC_OscConfig+0x2f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800587a:	4b70      	ldr	r3, [pc, #448]	; (8005a3c <HAL_RCC_OscConfig+0x4d0>)
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	061b      	lsls	r3, r3, #24
 8005888:	496c      	ldr	r1, [pc, #432]	; (8005a3c <HAL_RCC_OscConfig+0x4d0>)
 800588a:	4313      	orrs	r3, r2
 800588c:	60cb      	str	r3, [r1, #12]
 800588e:	e018      	b.n	80058c2 <HAL_RCC_OscConfig+0x356>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005890:	4b6a      	ldr	r3, [pc, #424]	; (8005a3c <HAL_RCC_OscConfig+0x4d0>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a69      	ldr	r2, [pc, #420]	; (8005a3c <HAL_RCC_OscConfig+0x4d0>)
 8005896:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800589a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800589c:	f7fb fd50 	bl	8001340 <HAL_GetTick>
 80058a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80058a2:	e008      	b.n	80058b6 <HAL_RCC_OscConfig+0x34a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80058a4:	f7fb fd4c 	bl	8001340 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d901      	bls.n	80058b6 <HAL_RCC_OscConfig+0x34a>
          {
            return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e23b      	b.n	8005d2e <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80058b6:	4b61      	ldr	r3, [pc, #388]	; (8005a3c <HAL_RCC_OscConfig+0x4d0>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1f0      	bne.n	80058a4 <HAL_RCC_OscConfig+0x338>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0308 	and.w	r3, r3, #8
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d036      	beq.n	800593c <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d019      	beq.n	800590a <HAL_RCC_OscConfig+0x39e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058d6:	4b59      	ldr	r3, [pc, #356]	; (8005a3c <HAL_RCC_OscConfig+0x4d0>)
 80058d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058da:	4a58      	ldr	r2, [pc, #352]	; (8005a3c <HAL_RCC_OscConfig+0x4d0>)
 80058dc:	f043 0301 	orr.w	r3, r3, #1
 80058e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058e2:	f7fb fd2d 	bl	8001340 <HAL_GetTick>
 80058e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80058e8:	e008      	b.n	80058fc <HAL_RCC_OscConfig+0x390>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058ea:	f7fb fd29 	bl	8001340 <HAL_GetTick>
 80058ee:	4602      	mov	r2, r0
 80058f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d901      	bls.n	80058fc <HAL_RCC_OscConfig+0x390>
        {
          return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e218      	b.n	8005d2e <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80058fc:	4b4f      	ldr	r3, [pc, #316]	; (8005a3c <HAL_RCC_OscConfig+0x4d0>)
 80058fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	2b00      	cmp	r3, #0
 8005906:	d0f0      	beq.n	80058ea <HAL_RCC_OscConfig+0x37e>
 8005908:	e018      	b.n	800593c <HAL_RCC_OscConfig+0x3d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800590a:	4b4c      	ldr	r3, [pc, #304]	; (8005a3c <HAL_RCC_OscConfig+0x4d0>)
 800590c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800590e:	4a4b      	ldr	r2, [pc, #300]	; (8005a3c <HAL_RCC_OscConfig+0x4d0>)
 8005910:	f023 0301 	bic.w	r3, r3, #1
 8005914:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005916:	f7fb fd13 	bl	8001340 <HAL_GetTick>
 800591a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800591c:	e008      	b.n	8005930 <HAL_RCC_OscConfig+0x3c4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800591e:	f7fb fd0f 	bl	8001340 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	2b02      	cmp	r3, #2
 800592a:	d901      	bls.n	8005930 <HAL_RCC_OscConfig+0x3c4>
        {
          return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e1fe      	b.n	8005d2e <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005930:	4b42      	ldr	r3, [pc, #264]	; (8005a3c <HAL_RCC_OscConfig+0x4d0>)
 8005932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005934:	f003 0302 	and.w	r3, r3, #2
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1f0      	bne.n	800591e <HAL_RCC_OscConfig+0x3b2>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0320 	and.w	r3, r3, #32
 8005944:	2b00      	cmp	r3, #0
 8005946:	d036      	beq.n	80059b6 <HAL_RCC_OscConfig+0x44a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d019      	beq.n	8005984 <HAL_RCC_OscConfig+0x418>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005950:	4b3a      	ldr	r3, [pc, #232]	; (8005a3c <HAL_RCC_OscConfig+0x4d0>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a39      	ldr	r2, [pc, #228]	; (8005a3c <HAL_RCC_OscConfig+0x4d0>)
 8005956:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800595a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800595c:	f7fb fcf0 	bl	8001340 <HAL_GetTick>
 8005960:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005962:	e008      	b.n	8005976 <HAL_RCC_OscConfig+0x40a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005964:	f7fb fcec 	bl	8001340 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b02      	cmp	r3, #2
 8005970:	d901      	bls.n	8005976 <HAL_RCC_OscConfig+0x40a>
        {
          return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e1db      	b.n	8005d2e <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005976:	4b31      	ldr	r3, [pc, #196]	; (8005a3c <HAL_RCC_OscConfig+0x4d0>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d0f0      	beq.n	8005964 <HAL_RCC_OscConfig+0x3f8>
 8005982:	e018      	b.n	80059b6 <HAL_RCC_OscConfig+0x44a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005984:	4b2d      	ldr	r3, [pc, #180]	; (8005a3c <HAL_RCC_OscConfig+0x4d0>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a2c      	ldr	r2, [pc, #176]	; (8005a3c <HAL_RCC_OscConfig+0x4d0>)
 800598a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800598e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005990:	f7fb fcd6 	bl	8001340 <HAL_GetTick>
 8005994:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005996:	e008      	b.n	80059aa <HAL_RCC_OscConfig+0x43e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005998:	f7fb fcd2 	bl	8001340 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e1c1      	b.n	8005d2e <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80059aa:	4b24      	ldr	r3, [pc, #144]	; (8005a3c <HAL_RCC_OscConfig+0x4d0>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1f0      	bne.n	8005998 <HAL_RCC_OscConfig+0x42c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0304 	and.w	r3, r3, #4
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f000 80af 	beq.w	8005b22 <HAL_RCC_OscConfig+0x5b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80059c4:	4b1e      	ldr	r3, [pc, #120]	; (8005a40 <HAL_RCC_OscConfig+0x4d4>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a1d      	ldr	r2, [pc, #116]	; (8005a40 <HAL_RCC_OscConfig+0x4d4>)
 80059ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059d0:	f7fb fcb6 	bl	8001340 <HAL_GetTick>
 80059d4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059d6:	e008      	b.n	80059ea <HAL_RCC_OscConfig+0x47e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80059d8:	f7fb fcb2 	bl	8001340 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b64      	cmp	r3, #100	; 0x64
 80059e4:	d901      	bls.n	80059ea <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e1a1      	b.n	8005d2e <HAL_RCC_OscConfig+0x7c2>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059ea:	4b15      	ldr	r3, [pc, #84]	; (8005a40 <HAL_RCC_OscConfig+0x4d4>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d0f0      	beq.n	80059d8 <HAL_RCC_OscConfig+0x46c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d106      	bne.n	8005a0c <HAL_RCC_OscConfig+0x4a0>
 80059fe:	4b0f      	ldr	r3, [pc, #60]	; (8005a3c <HAL_RCC_OscConfig+0x4d0>)
 8005a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a02:	4a0e      	ldr	r2, [pc, #56]	; (8005a3c <HAL_RCC_OscConfig+0x4d0>)
 8005a04:	f043 0301 	orr.w	r3, r3, #1
 8005a08:	6713      	str	r3, [r2, #112]	; 0x70
 8005a0a:	e05b      	b.n	8005ac4 <HAL_RCC_OscConfig+0x558>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d117      	bne.n	8005a44 <HAL_RCC_OscConfig+0x4d8>
 8005a14:	4b09      	ldr	r3, [pc, #36]	; (8005a3c <HAL_RCC_OscConfig+0x4d0>)
 8005a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a18:	4a08      	ldr	r2, [pc, #32]	; (8005a3c <HAL_RCC_OscConfig+0x4d0>)
 8005a1a:	f023 0301 	bic.w	r3, r3, #1
 8005a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a20:	4b06      	ldr	r3, [pc, #24]	; (8005a3c <HAL_RCC_OscConfig+0x4d0>)
 8005a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a24:	4a05      	ldr	r2, [pc, #20]	; (8005a3c <HAL_RCC_OscConfig+0x4d0>)
 8005a26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a2c:	4b03      	ldr	r3, [pc, #12]	; (8005a3c <HAL_RCC_OscConfig+0x4d0>)
 8005a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a30:	4a02      	ldr	r2, [pc, #8]	; (8005a3c <HAL_RCC_OscConfig+0x4d0>)
 8005a32:	f023 0304 	bic.w	r3, r3, #4
 8005a36:	6713      	str	r3, [r2, #112]	; 0x70
 8005a38:	e044      	b.n	8005ac4 <HAL_RCC_OscConfig+0x558>
 8005a3a:	bf00      	nop
 8005a3c:	58024400 	.word	0x58024400
 8005a40:	58024800 	.word	0x58024800
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	2b05      	cmp	r3, #5
 8005a4a:	d112      	bne.n	8005a72 <HAL_RCC_OscConfig+0x506>
 8005a4c:	4b95      	ldr	r3, [pc, #596]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a50:	4a94      	ldr	r2, [pc, #592]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005a52:	f043 0304 	orr.w	r3, r3, #4
 8005a56:	6713      	str	r3, [r2, #112]	; 0x70
 8005a58:	4b92      	ldr	r3, [pc, #584]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a5c:	4a91      	ldr	r2, [pc, #580]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005a5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a62:	6713      	str	r3, [r2, #112]	; 0x70
 8005a64:	4b8f      	ldr	r3, [pc, #572]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a68:	4a8e      	ldr	r2, [pc, #568]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005a6a:	f043 0301 	orr.w	r3, r3, #1
 8005a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a70:	e028      	b.n	8005ac4 <HAL_RCC_OscConfig+0x558>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	2b85      	cmp	r3, #133	; 0x85
 8005a78:	d112      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x534>
 8005a7a:	4b8a      	ldr	r3, [pc, #552]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7e:	4a89      	ldr	r2, [pc, #548]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005a80:	f043 0304 	orr.w	r3, r3, #4
 8005a84:	6713      	str	r3, [r2, #112]	; 0x70
 8005a86:	4b87      	ldr	r3, [pc, #540]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a8a:	4a86      	ldr	r2, [pc, #536]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a90:	6713      	str	r3, [r2, #112]	; 0x70
 8005a92:	4b84      	ldr	r3, [pc, #528]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a96:	4a83      	ldr	r2, [pc, #524]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005a98:	f043 0301 	orr.w	r3, r3, #1
 8005a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8005a9e:	e011      	b.n	8005ac4 <HAL_RCC_OscConfig+0x558>
 8005aa0:	4b80      	ldr	r3, [pc, #512]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa4:	4a7f      	ldr	r2, [pc, #508]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005aa6:	f023 0301 	bic.w	r3, r3, #1
 8005aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8005aac:	4b7d      	ldr	r3, [pc, #500]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab0:	4a7c      	ldr	r2, [pc, #496]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005ab2:	f023 0304 	bic.w	r3, r3, #4
 8005ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ab8:	4b7a      	ldr	r3, [pc, #488]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005abc:	4a79      	ldr	r2, [pc, #484]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005abe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ac2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d015      	beq.n	8005af8 <HAL_RCC_OscConfig+0x58c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005acc:	f7fb fc38 	bl	8001340 <HAL_GetTick>
 8005ad0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ad2:	e00a      	b.n	8005aea <HAL_RCC_OscConfig+0x57e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ad4:	f7fb fc34 	bl	8001340 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d901      	bls.n	8005aea <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e121      	b.n	8005d2e <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005aea:	4b6e      	ldr	r3, [pc, #440]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d0ee      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x568>
 8005af6:	e014      	b.n	8005b22 <HAL_RCC_OscConfig+0x5b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005af8:	f7fb fc22 	bl	8001340 <HAL_GetTick>
 8005afc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005afe:	e00a      	b.n	8005b16 <HAL_RCC_OscConfig+0x5aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b00:	f7fb fc1e 	bl	8001340 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d901      	bls.n	8005b16 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e10b      	b.n	8005d2e <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005b16:	4b63      	ldr	r3, [pc, #396]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1ee      	bne.n	8005b00 <HAL_RCC_OscConfig+0x594>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f000 8100 	beq.w	8005d2c <HAL_RCC_OscConfig+0x7c0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005b2c:	4b5d      	ldr	r3, [pc, #372]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b34:	2b18      	cmp	r3, #24
 8005b36:	f000 80bb 	beq.w	8005cb0 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	f040 8095 	bne.w	8005c6e <HAL_RCC_OscConfig+0x702>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b44:	4b57      	ldr	r3, [pc, #348]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a56      	ldr	r2, [pc, #344]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005b4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b50:	f7fb fbf6 	bl	8001340 <HAL_GetTick>
 8005b54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b56:	e008      	b.n	8005b6a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b58:	f7fb fbf2 	bl	8001340 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d901      	bls.n	8005b6a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e0e1      	b.n	8005d2e <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b6a:	4b4e      	ldr	r3, [pc, #312]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1f0      	bne.n	8005b58 <HAL_RCC_OscConfig+0x5ec>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b76:	4b4b      	ldr	r3, [pc, #300]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005b78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b7a:	4b4b      	ldr	r3, [pc, #300]	; (8005ca8 <HAL_RCC_OscConfig+0x73c>)
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005b86:	0112      	lsls	r2, r2, #4
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	4946      	ldr	r1, [pc, #280]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	628b      	str	r3, [r1, #40]	; 0x28
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b94:	3b01      	subs	r3, #1
 8005b96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	025b      	lsls	r3, r3, #9
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	431a      	orrs	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005baa:	3b01      	subs	r3, #1
 8005bac:	041b      	lsls	r3, r3, #16
 8005bae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	061b      	lsls	r3, r3, #24
 8005bbc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005bc0:	4938      	ldr	r1, [pc, #224]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005bc6:	4b37      	ldr	r3, [pc, #220]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bca:	4a36      	ldr	r2, [pc, #216]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005bcc:	f023 0301 	bic.w	r3, r3, #1
 8005bd0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005bd2:	4b34      	ldr	r3, [pc, #208]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005bd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bd6:	4b35      	ldr	r3, [pc, #212]	; (8005cac <HAL_RCC_OscConfig+0x740>)
 8005bd8:	4013      	ands	r3, r2
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005bde:	00d2      	lsls	r2, r2, #3
 8005be0:	4930      	ldr	r1, [pc, #192]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005be6:	4b2f      	ldr	r3, [pc, #188]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bea:	f023 020c 	bic.w	r2, r3, #12
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf2:	492c      	ldr	r1, [pc, #176]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005bf8:	4b2a      	ldr	r3, [pc, #168]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfc:	f023 0202 	bic.w	r2, r3, #2
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c04:	4927      	ldr	r1, [pc, #156]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005c0a:	4b26      	ldr	r3, [pc, #152]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0e:	4a25      	ldr	r2, [pc, #148]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c16:	4b23      	ldr	r3, [pc, #140]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1a:	4a22      	ldr	r2, [pc, #136]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005c22:	4b20      	ldr	r3, [pc, #128]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c26:	4a1f      	ldr	r2, [pc, #124]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005c28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005c2e:	4b1d      	ldr	r3, [pc, #116]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c32:	4a1c      	ldr	r2, [pc, #112]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005c34:	f043 0301 	orr.w	r3, r3, #1
 8005c38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c3a:	4b1a      	ldr	r3, [pc, #104]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a19      	ldr	r2, [pc, #100]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005c40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c46:	f7fb fb7b 	bl	8001340 <HAL_GetTick>
 8005c4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c4c:	e008      	b.n	8005c60 <HAL_RCC_OscConfig+0x6f4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c4e:	f7fb fb77 	bl	8001340 <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d901      	bls.n	8005c60 <HAL_RCC_OscConfig+0x6f4>
          {
            return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e066      	b.n	8005d2e <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c60:	4b10      	ldr	r3, [pc, #64]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d0f0      	beq.n	8005c4e <HAL_RCC_OscConfig+0x6e2>
 8005c6c:	e05e      	b.n	8005d2c <HAL_RCC_OscConfig+0x7c0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c6e:	4b0d      	ldr	r3, [pc, #52]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a0c      	ldr	r2, [pc, #48]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005c74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c7a:	f7fb fb61 	bl	8001340 <HAL_GetTick>
 8005c7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c80:	e008      	b.n	8005c94 <HAL_RCC_OscConfig+0x728>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c82:	f7fb fb5d 	bl	8001340 <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d901      	bls.n	8005c94 <HAL_RCC_OscConfig+0x728>
          {
            return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e04c      	b.n	8005d2e <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c94:	4b03      	ldr	r3, [pc, #12]	; (8005ca4 <HAL_RCC_OscConfig+0x738>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1f0      	bne.n	8005c82 <HAL_RCC_OscConfig+0x716>
 8005ca0:	e044      	b.n	8005d2c <HAL_RCC_OscConfig+0x7c0>
 8005ca2:	bf00      	nop
 8005ca4:	58024400 	.word	0x58024400
 8005ca8:	fffffc0c 	.word	0xfffffc0c
 8005cac:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005cb0:	4b21      	ldr	r3, [pc, #132]	; (8005d38 <HAL_RCC_OscConfig+0x7cc>)
 8005cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005cb6:	4b20      	ldr	r3, [pc, #128]	; (8005d38 <HAL_RCC_OscConfig+0x7cc>)
 8005cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cba:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d031      	beq.n	8005d28 <HAL_RCC_OscConfig+0x7bc>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	f003 0203 	and.w	r2, r3, #3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d12a      	bne.n	8005d28 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	091b      	lsrs	r3, r3, #4
 8005cd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d122      	bne.n	8005d28 <HAL_RCC_OscConfig+0x7bc>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cec:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d11a      	bne.n	8005d28 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	0a5b      	lsrs	r3, r3, #9
 8005cf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cfe:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d111      	bne.n	8005d28 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	0c1b      	lsrs	r3, r3, #16
 8005d08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d10:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d108      	bne.n	8005d28 <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	0e1b      	lsrs	r3, r3, #24
 8005d1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d22:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d001      	beq.n	8005d2c <HAL_RCC_OscConfig+0x7c0>
      {
        return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e000      	b.n	8005d2e <HAL_RCC_OscConfig+0x7c2>
      }
    }
  }
  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3730      	adds	r7, #48	; 0x30
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	58024400 	.word	0x58024400

08005d3c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d101      	bne.n	8005d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e19c      	b.n	800608a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d50:	4b8a      	ldr	r3, [pc, #552]	; (8005f7c <HAL_RCC_ClockConfig+0x240>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 030f 	and.w	r3, r3, #15
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d910      	bls.n	8005d80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d5e:	4b87      	ldr	r3, [pc, #540]	; (8005f7c <HAL_RCC_ClockConfig+0x240>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f023 020f 	bic.w	r2, r3, #15
 8005d66:	4985      	ldr	r1, [pc, #532]	; (8005f7c <HAL_RCC_ClockConfig+0x240>)
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d6e:	4b83      	ldr	r3, [pc, #524]	; (8005f7c <HAL_RCC_ClockConfig+0x240>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 030f 	and.w	r3, r3, #15
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d001      	beq.n	8005d80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e184      	b.n	800608a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0304 	and.w	r3, r3, #4
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d010      	beq.n	8005dae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	691a      	ldr	r2, [r3, #16]
 8005d90:	4b7b      	ldr	r3, [pc, #492]	; (8005f80 <HAL_RCC_ClockConfig+0x244>)
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d908      	bls.n	8005dae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d9c:	4b78      	ldr	r3, [pc, #480]	; (8005f80 <HAL_RCC_ClockConfig+0x244>)
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	4975      	ldr	r1, [pc, #468]	; (8005f80 <HAL_RCC_ClockConfig+0x244>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0308 	and.w	r3, r3, #8
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d010      	beq.n	8005ddc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	695a      	ldr	r2, [r3, #20]
 8005dbe:	4b70      	ldr	r3, [pc, #448]	; (8005f80 <HAL_RCC_ClockConfig+0x244>)
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d908      	bls.n	8005ddc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005dca:	4b6d      	ldr	r3, [pc, #436]	; (8005f80 <HAL_RCC_ClockConfig+0x244>)
 8005dcc:	69db      	ldr	r3, [r3, #28]
 8005dce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	496a      	ldr	r1, [pc, #424]	; (8005f80 <HAL_RCC_ClockConfig+0x244>)
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0310 	and.w	r3, r3, #16
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d010      	beq.n	8005e0a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	699a      	ldr	r2, [r3, #24]
 8005dec:	4b64      	ldr	r3, [pc, #400]	; (8005f80 <HAL_RCC_ClockConfig+0x244>)
 8005dee:	69db      	ldr	r3, [r3, #28]
 8005df0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d908      	bls.n	8005e0a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005df8:	4b61      	ldr	r3, [pc, #388]	; (8005f80 <HAL_RCC_ClockConfig+0x244>)
 8005dfa:	69db      	ldr	r3, [r3, #28]
 8005dfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	495e      	ldr	r1, [pc, #376]	; (8005f80 <HAL_RCC_ClockConfig+0x244>)
 8005e06:	4313      	orrs	r3, r2
 8005e08:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0320 	and.w	r3, r3, #32
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d010      	beq.n	8005e38 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	69da      	ldr	r2, [r3, #28]
 8005e1a:	4b59      	ldr	r3, [pc, #356]	; (8005f80 <HAL_RCC_ClockConfig+0x244>)
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d908      	bls.n	8005e38 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005e26:	4b56      	ldr	r3, [pc, #344]	; (8005f80 <HAL_RCC_ClockConfig+0x244>)
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	69db      	ldr	r3, [r3, #28]
 8005e32:	4953      	ldr	r1, [pc, #332]	; (8005f80 <HAL_RCC_ClockConfig+0x244>)
 8005e34:	4313      	orrs	r3, r2
 8005e36:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0302 	and.w	r3, r3, #2
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d010      	beq.n	8005e66 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	68da      	ldr	r2, [r3, #12]
 8005e48:	4b4d      	ldr	r3, [pc, #308]	; (8005f80 <HAL_RCC_ClockConfig+0x244>)
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	f003 030f 	and.w	r3, r3, #15
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d908      	bls.n	8005e66 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e54:	4b4a      	ldr	r3, [pc, #296]	; (8005f80 <HAL_RCC_ClockConfig+0x244>)
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	f023 020f 	bic.w	r2, r3, #15
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	4947      	ldr	r1, [pc, #284]	; (8005f80 <HAL_RCC_ClockConfig+0x244>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d055      	beq.n	8005f1e <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005e72:	4b43      	ldr	r3, [pc, #268]	; (8005f80 <HAL_RCC_ClockConfig+0x244>)
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	4940      	ldr	r1, [pc, #256]	; (8005f80 <HAL_RCC_ClockConfig+0x244>)
 8005e80:	4313      	orrs	r3, r2
 8005e82:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d107      	bne.n	8005e9c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e8c:	4b3c      	ldr	r3, [pc, #240]	; (8005f80 <HAL_RCC_ClockConfig+0x244>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d121      	bne.n	8005edc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e0f6      	b.n	800608a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	2b03      	cmp	r3, #3
 8005ea2:	d107      	bne.n	8005eb4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ea4:	4b36      	ldr	r3, [pc, #216]	; (8005f80 <HAL_RCC_ClockConfig+0x244>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d115      	bne.n	8005edc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e0ea      	b.n	800608a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d107      	bne.n	8005ecc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ebc:	4b30      	ldr	r3, [pc, #192]	; (8005f80 <HAL_RCC_ClockConfig+0x244>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d109      	bne.n	8005edc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e0de      	b.n	800608a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ecc:	4b2c      	ldr	r3, [pc, #176]	; (8005f80 <HAL_RCC_ClockConfig+0x244>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0304 	and.w	r3, r3, #4
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d101      	bne.n	8005edc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e0d6      	b.n	800608a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005edc:	4b28      	ldr	r3, [pc, #160]	; (8005f80 <HAL_RCC_ClockConfig+0x244>)
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	f023 0207 	bic.w	r2, r3, #7
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	4925      	ldr	r1, [pc, #148]	; (8005f80 <HAL_RCC_ClockConfig+0x244>)
 8005eea:	4313      	orrs	r3, r2
 8005eec:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eee:	f7fb fa27 	bl	8001340 <HAL_GetTick>
 8005ef2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ef4:	e00a      	b.n	8005f0c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ef6:	f7fb fa23 	bl	8001340 <HAL_GetTick>
 8005efa:	4602      	mov	r2, r0
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d901      	bls.n	8005f0c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e0be      	b.n	800608a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f0c:	4b1c      	ldr	r3, [pc, #112]	; (8005f80 <HAL_RCC_ClockConfig+0x244>)
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	00db      	lsls	r3, r3, #3
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d1eb      	bne.n	8005ef6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0302 	and.w	r3, r3, #2
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d010      	beq.n	8005f4c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	68da      	ldr	r2, [r3, #12]
 8005f2e:	4b14      	ldr	r3, [pc, #80]	; (8005f80 <HAL_RCC_ClockConfig+0x244>)
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	f003 030f 	and.w	r3, r3, #15
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d208      	bcs.n	8005f4c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f3a:	4b11      	ldr	r3, [pc, #68]	; (8005f80 <HAL_RCC_ClockConfig+0x244>)
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	f023 020f 	bic.w	r2, r3, #15
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	490e      	ldr	r1, [pc, #56]	; (8005f80 <HAL_RCC_ClockConfig+0x244>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f4c:	4b0b      	ldr	r3, [pc, #44]	; (8005f7c <HAL_RCC_ClockConfig+0x240>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 030f 	and.w	r3, r3, #15
 8005f54:	683a      	ldr	r2, [r7, #0]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d214      	bcs.n	8005f84 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f5a:	4b08      	ldr	r3, [pc, #32]	; (8005f7c <HAL_RCC_ClockConfig+0x240>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f023 020f 	bic.w	r2, r3, #15
 8005f62:	4906      	ldr	r1, [pc, #24]	; (8005f7c <HAL_RCC_ClockConfig+0x240>)
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f6a:	4b04      	ldr	r3, [pc, #16]	; (8005f7c <HAL_RCC_ClockConfig+0x240>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 030f 	and.w	r3, r3, #15
 8005f72:	683a      	ldr	r2, [r7, #0]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d005      	beq.n	8005f84 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e086      	b.n	800608a <HAL_RCC_ClockConfig+0x34e>
 8005f7c:	52002000 	.word	0x52002000
 8005f80:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0304 	and.w	r3, r3, #4
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d010      	beq.n	8005fb2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	691a      	ldr	r2, [r3, #16]
 8005f94:	4b3f      	ldr	r3, [pc, #252]	; (8006094 <HAL_RCC_ClockConfig+0x358>)
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d208      	bcs.n	8005fb2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005fa0:	4b3c      	ldr	r3, [pc, #240]	; (8006094 <HAL_RCC_ClockConfig+0x358>)
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	4939      	ldr	r1, [pc, #228]	; (8006094 <HAL_RCC_ClockConfig+0x358>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0308 	and.w	r3, r3, #8
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d010      	beq.n	8005fe0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	695a      	ldr	r2, [r3, #20]
 8005fc2:	4b34      	ldr	r3, [pc, #208]	; (8006094 <HAL_RCC_ClockConfig+0x358>)
 8005fc4:	69db      	ldr	r3, [r3, #28]
 8005fc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d208      	bcs.n	8005fe0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005fce:	4b31      	ldr	r3, [pc, #196]	; (8006094 <HAL_RCC_ClockConfig+0x358>)
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	492e      	ldr	r1, [pc, #184]	; (8006094 <HAL_RCC_ClockConfig+0x358>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0310 	and.w	r3, r3, #16
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d010      	beq.n	800600e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	699a      	ldr	r2, [r3, #24]
 8005ff0:	4b28      	ldr	r3, [pc, #160]	; (8006094 <HAL_RCC_ClockConfig+0x358>)
 8005ff2:	69db      	ldr	r3, [r3, #28]
 8005ff4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d208      	bcs.n	800600e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005ffc:	4b25      	ldr	r3, [pc, #148]	; (8006094 <HAL_RCC_ClockConfig+0x358>)
 8005ffe:	69db      	ldr	r3, [r3, #28]
 8006000:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	4922      	ldr	r1, [pc, #136]	; (8006094 <HAL_RCC_ClockConfig+0x358>)
 800600a:	4313      	orrs	r3, r2
 800600c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0320 	and.w	r3, r3, #32
 8006016:	2b00      	cmp	r3, #0
 8006018:	d010      	beq.n	800603c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	69da      	ldr	r2, [r3, #28]
 800601e:	4b1d      	ldr	r3, [pc, #116]	; (8006094 <HAL_RCC_ClockConfig+0x358>)
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006026:	429a      	cmp	r2, r3
 8006028:	d208      	bcs.n	800603c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800602a:	4b1a      	ldr	r3, [pc, #104]	; (8006094 <HAL_RCC_ClockConfig+0x358>)
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	4917      	ldr	r1, [pc, #92]	; (8006094 <HAL_RCC_ClockConfig+0x358>)
 8006038:	4313      	orrs	r3, r2
 800603a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800603c:	f000 f834 	bl	80060a8 <HAL_RCC_GetSysClockFreq>
 8006040:	4601      	mov	r1, r0
 8006042:	4b14      	ldr	r3, [pc, #80]	; (8006094 <HAL_RCC_ClockConfig+0x358>)
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	0a1b      	lsrs	r3, r3, #8
 8006048:	f003 030f 	and.w	r3, r3, #15
 800604c:	4a12      	ldr	r2, [pc, #72]	; (8006098 <HAL_RCC_ClockConfig+0x35c>)
 800604e:	5cd3      	ldrb	r3, [r2, r3]
 8006050:	f003 031f 	and.w	r3, r3, #31
 8006054:	fa21 f303 	lsr.w	r3, r1, r3
 8006058:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800605a:	4b0e      	ldr	r3, [pc, #56]	; (8006094 <HAL_RCC_ClockConfig+0x358>)
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	f003 030f 	and.w	r3, r3, #15
 8006062:	4a0d      	ldr	r2, [pc, #52]	; (8006098 <HAL_RCC_ClockConfig+0x35c>)
 8006064:	5cd3      	ldrb	r3, [r2, r3]
 8006066:	f003 031f 	and.w	r3, r3, #31
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	fa22 f303 	lsr.w	r3, r2, r3
 8006070:	4a0a      	ldr	r2, [pc, #40]	; (800609c <HAL_RCC_ClockConfig+0x360>)
 8006072:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006074:	4a0a      	ldr	r2, [pc, #40]	; (80060a0 <HAL_RCC_ClockConfig+0x364>)
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800607a:	4b0a      	ldr	r3, [pc, #40]	; (80060a4 <HAL_RCC_ClockConfig+0x368>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4618      	mov	r0, r3
 8006080:	f7fb f914 	bl	80012ac <HAL_InitTick>
 8006084:	4603      	mov	r3, r0
 8006086:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006088:	7bfb      	ldrb	r3, [r7, #15]
}
 800608a:	4618      	mov	r0, r3
 800608c:	3718      	adds	r7, #24
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	58024400 	.word	0x58024400
 8006098:	0800978c 	.word	0x0800978c
 800609c:	24000004 	.word	0x24000004
 80060a0:	24000000 	.word	0x24000000
 80060a4:	24000008 	.word	0x24000008

080060a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b089      	sub	sp, #36	; 0x24
 80060ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060ae:	4baf      	ldr	r3, [pc, #700]	; (800636c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060b6:	2b18      	cmp	r3, #24
 80060b8:	f200 814e 	bhi.w	8006358 <HAL_RCC_GetSysClockFreq+0x2b0>
 80060bc:	a201      	add	r2, pc, #4	; (adr r2, 80060c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80060be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c2:	bf00      	nop
 80060c4:	08006129 	.word	0x08006129
 80060c8:	08006359 	.word	0x08006359
 80060cc:	08006359 	.word	0x08006359
 80060d0:	08006359 	.word	0x08006359
 80060d4:	08006359 	.word	0x08006359
 80060d8:	08006359 	.word	0x08006359
 80060dc:	08006359 	.word	0x08006359
 80060e0:	08006359 	.word	0x08006359
 80060e4:	0800614f 	.word	0x0800614f
 80060e8:	08006359 	.word	0x08006359
 80060ec:	08006359 	.word	0x08006359
 80060f0:	08006359 	.word	0x08006359
 80060f4:	08006359 	.word	0x08006359
 80060f8:	08006359 	.word	0x08006359
 80060fc:	08006359 	.word	0x08006359
 8006100:	08006359 	.word	0x08006359
 8006104:	08006155 	.word	0x08006155
 8006108:	08006359 	.word	0x08006359
 800610c:	08006359 	.word	0x08006359
 8006110:	08006359 	.word	0x08006359
 8006114:	08006359 	.word	0x08006359
 8006118:	08006359 	.word	0x08006359
 800611c:	08006359 	.word	0x08006359
 8006120:	08006359 	.word	0x08006359
 8006124:	0800615b 	.word	0x0800615b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006128:	4b90      	ldr	r3, [pc, #576]	; (800636c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0320 	and.w	r3, r3, #32
 8006130:	2b00      	cmp	r3, #0
 8006132:	d009      	beq.n	8006148 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006134:	4b8d      	ldr	r3, [pc, #564]	; (800636c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	08db      	lsrs	r3, r3, #3
 800613a:	f003 0303 	and.w	r3, r3, #3
 800613e:	4a8c      	ldr	r2, [pc, #560]	; (8006370 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006140:	fa22 f303 	lsr.w	r3, r2, r3
 8006144:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006146:	e10a      	b.n	800635e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006148:	4b89      	ldr	r3, [pc, #548]	; (8006370 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800614a:	61bb      	str	r3, [r7, #24]
    break;
 800614c:	e107      	b.n	800635e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800614e:	4b89      	ldr	r3, [pc, #548]	; (8006374 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006150:	61bb      	str	r3, [r7, #24]
    break;
 8006152:	e104      	b.n	800635e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006154:	4b88      	ldr	r3, [pc, #544]	; (8006378 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8006156:	61bb      	str	r3, [r7, #24]
    break;
 8006158:	e101      	b.n	800635e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800615a:	4b84      	ldr	r3, [pc, #528]	; (800636c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800615c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615e:	f003 0303 	and.w	r3, r3, #3
 8006162:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006164:	4b81      	ldr	r3, [pc, #516]	; (800636c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006168:	091b      	lsrs	r3, r3, #4
 800616a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800616e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006170:	4b7e      	ldr	r3, [pc, #504]	; (800636c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800617a:	4b7c      	ldr	r3, [pc, #496]	; (800636c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800617c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800617e:	08db      	lsrs	r3, r3, #3
 8006180:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	fb02 f303 	mul.w	r3, r2, r3
 800618a:	ee07 3a90 	vmov	s15, r3
 800618e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006192:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	2b00      	cmp	r3, #0
 800619a:	f000 80da 	beq.w	8006352 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d05a      	beq.n	800625a <HAL_RCC_GetSysClockFreq+0x1b2>
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d302      	bcc.n	80061ae <HAL_RCC_GetSysClockFreq+0x106>
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d078      	beq.n	800629e <HAL_RCC_GetSysClockFreq+0x1f6>
 80061ac:	e099      	b.n	80062e2 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061ae:	4b6f      	ldr	r3, [pc, #444]	; (800636c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0320 	and.w	r3, r3, #32
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d02d      	beq.n	8006216 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80061ba:	4b6c      	ldr	r3, [pc, #432]	; (800636c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	08db      	lsrs	r3, r3, #3
 80061c0:	f003 0303 	and.w	r3, r3, #3
 80061c4:	4a6a      	ldr	r2, [pc, #424]	; (8006370 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80061c6:	fa22 f303 	lsr.w	r3, r2, r3
 80061ca:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	ee07 3a90 	vmov	s15, r3
 80061d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	ee07 3a90 	vmov	s15, r3
 80061dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061e4:	4b61      	ldr	r3, [pc, #388]	; (800636c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80061e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ec:	ee07 3a90 	vmov	s15, r3
 80061f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061f4:	ed97 6a02 	vldr	s12, [r7, #8]
 80061f8:	eddf 5a60 	vldr	s11, [pc, #384]	; 800637c <HAL_RCC_GetSysClockFreq+0x2d4>
 80061fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006200:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006204:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006208:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800620c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006210:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006214:	e087      	b.n	8006326 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	ee07 3a90 	vmov	s15, r3
 800621c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006220:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006380 <HAL_RCC_GetSysClockFreq+0x2d8>
 8006224:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006228:	4b50      	ldr	r3, [pc, #320]	; (800636c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800622a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006230:	ee07 3a90 	vmov	s15, r3
 8006234:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006238:	ed97 6a02 	vldr	s12, [r7, #8]
 800623c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800637c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006240:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006244:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006248:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800624c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006250:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006254:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006258:	e065      	b.n	8006326 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	ee07 3a90 	vmov	s15, r3
 8006260:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006264:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006384 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006268:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800626c:	4b3f      	ldr	r3, [pc, #252]	; (800636c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800626e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006274:	ee07 3a90 	vmov	s15, r3
 8006278:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800627c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006280:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800637c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006284:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006288:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800628c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006290:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006298:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800629c:	e043      	b.n	8006326 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	ee07 3a90 	vmov	s15, r3
 80062a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062a8:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006388 <HAL_RCC_GetSysClockFreq+0x2e0>
 80062ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062b0:	4b2e      	ldr	r3, [pc, #184]	; (800636c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80062b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062b8:	ee07 3a90 	vmov	s15, r3
 80062bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80062c4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800637c <HAL_RCC_GetSysClockFreq+0x2d4>
 80062c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062e0:	e021      	b.n	8006326 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	ee07 3a90 	vmov	s15, r3
 80062e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ec:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006384 <HAL_RCC_GetSysClockFreq+0x2dc>
 80062f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062f4:	4b1d      	ldr	r3, [pc, #116]	; (800636c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80062f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062fc:	ee07 3a90 	vmov	s15, r3
 8006300:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006304:	ed97 6a02 	vldr	s12, [r7, #8]
 8006308:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800637c <HAL_RCC_GetSysClockFreq+0x2d4>
 800630c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006310:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006314:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006318:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800631c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006320:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006324:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006326:	4b11      	ldr	r3, [pc, #68]	; (800636c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800632a:	0a5b      	lsrs	r3, r3, #9
 800632c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006330:	3301      	adds	r3, #1
 8006332:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	ee07 3a90 	vmov	s15, r3
 800633a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800633e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006346:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800634a:	ee17 3a90 	vmov	r3, s15
 800634e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006350:	e005      	b.n	800635e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8006352:	2300      	movs	r3, #0
 8006354:	61bb      	str	r3, [r7, #24]
    break;
 8006356:	e002      	b.n	800635e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006358:	4b06      	ldr	r3, [pc, #24]	; (8006374 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800635a:	61bb      	str	r3, [r7, #24]
    break;
 800635c:	bf00      	nop
  }

  return sysclockfreq;
 800635e:	69bb      	ldr	r3, [r7, #24]
}
 8006360:	4618      	mov	r0, r3
 8006362:	3724      	adds	r7, #36	; 0x24
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr
 800636c:	58024400 	.word	0x58024400
 8006370:	03d09000 	.word	0x03d09000
 8006374:	003d0900 	.word	0x003d0900
 8006378:	007a1200 	.word	0x007a1200
 800637c:	46000000 	.word	0x46000000
 8006380:	4c742400 	.word	0x4c742400
 8006384:	4a742400 	.word	0x4a742400
 8006388:	4af42400 	.word	0x4af42400

0800638c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8006392:	f7ff fe89 	bl	80060a8 <HAL_RCC_GetSysClockFreq>
 8006396:	4601      	mov	r1, r0
 8006398:	4b10      	ldr	r3, [pc, #64]	; (80063dc <HAL_RCC_GetHCLKFreq+0x50>)
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	0a1b      	lsrs	r3, r3, #8
 800639e:	f003 030f 	and.w	r3, r3, #15
 80063a2:	4a0f      	ldr	r2, [pc, #60]	; (80063e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80063a4:	5cd3      	ldrb	r3, [r2, r3]
 80063a6:	f003 031f 	and.w	r3, r3, #31
 80063aa:	fa21 f303 	lsr.w	r3, r1, r3
 80063ae:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80063b0:	4b0a      	ldr	r3, [pc, #40]	; (80063dc <HAL_RCC_GetHCLKFreq+0x50>)
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	f003 030f 	and.w	r3, r3, #15
 80063b8:	4a09      	ldr	r2, [pc, #36]	; (80063e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80063ba:	5cd3      	ldrb	r3, [r2, r3]
 80063bc:	f003 031f 	and.w	r3, r3, #31
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	fa22 f303 	lsr.w	r3, r2, r3
 80063c6:	4a07      	ldr	r2, [pc, #28]	; (80063e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80063c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80063ca:	4a07      	ldr	r2, [pc, #28]	; (80063e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80063d0:	4b04      	ldr	r3, [pc, #16]	; (80063e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80063d2:	681b      	ldr	r3, [r3, #0]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3708      	adds	r7, #8
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	58024400 	.word	0x58024400
 80063e0:	0800978c 	.word	0x0800978c
 80063e4:	24000004 	.word	0x24000004
 80063e8:	24000000 	.word	0x24000000

080063ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80063f0:	f7ff ffcc 	bl	800638c <HAL_RCC_GetHCLKFreq>
 80063f4:	4601      	mov	r1, r0
 80063f6:	4b06      	ldr	r3, [pc, #24]	; (8006410 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063f8:	69db      	ldr	r3, [r3, #28]
 80063fa:	091b      	lsrs	r3, r3, #4
 80063fc:	f003 0307 	and.w	r3, r3, #7
 8006400:	4a04      	ldr	r2, [pc, #16]	; (8006414 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006402:	5cd3      	ldrb	r3, [r2, r3]
 8006404:	f003 031f 	and.w	r3, r3, #31
 8006408:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 800640c:	4618      	mov	r0, r3
 800640e:	bd80      	pop	{r7, pc}
 8006410:	58024400 	.word	0x58024400
 8006414:	0800978c 	.word	0x0800978c

08006418 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800641c:	f7ff ffb6 	bl	800638c <HAL_RCC_GetHCLKFreq>
 8006420:	4601      	mov	r1, r0
 8006422:	4b06      	ldr	r3, [pc, #24]	; (800643c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006424:	69db      	ldr	r3, [r3, #28]
 8006426:	0a1b      	lsrs	r3, r3, #8
 8006428:	f003 0307 	and.w	r3, r3, #7
 800642c:	4a04      	ldr	r2, [pc, #16]	; (8006440 <HAL_RCC_GetPCLK2Freq+0x28>)
 800642e:	5cd3      	ldrb	r3, [r2, r3]
 8006430:	f003 031f 	and.w	r3, r3, #31
 8006434:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 8006438:	4618      	mov	r0, r3
 800643a:	bd80      	pop	{r7, pc}
 800643c:	58024400 	.word	0x58024400
 8006440:	0800978c 	.word	0x0800978c

08006444 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800644c:	2300      	movs	r3, #0
 800644e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006450:	2300      	movs	r3, #0
 8006452:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d03d      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006464:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006468:	d013      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800646a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800646e:	d802      	bhi.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006470:	2b00      	cmp	r3, #0
 8006472:	d007      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006474:	e01f      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006476:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800647a:	d013      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800647c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006480:	d01c      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006482:	e018      	b.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006484:	4bad      	ldr	r3, [pc, #692]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006488:	4aac      	ldr	r2, [pc, #688]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800648a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800648e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006490:	e015      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	3304      	adds	r3, #4
 8006496:	2102      	movs	r1, #2
 8006498:	4618      	mov	r0, r3
 800649a:	f001 fca7 	bl	8007dec <RCCEx_PLL2_Config>
 800649e:	4603      	mov	r3, r0
 80064a0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80064a2:	e00c      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	3324      	adds	r3, #36	; 0x24
 80064a8:	2102      	movs	r1, #2
 80064aa:	4618      	mov	r0, r3
 80064ac:	f001 fd50 	bl	8007f50 <RCCEx_PLL3_Config>
 80064b0:	4603      	mov	r3, r0
 80064b2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80064b4:	e003      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	75fb      	strb	r3, [r7, #23]
      break;
 80064ba:	e000      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80064bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064be:	7dfb      	ldrb	r3, [r7, #23]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d109      	bne.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80064c4:	4b9d      	ldr	r3, [pc, #628]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80064c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064d0:	499a      	ldr	r1, [pc, #616]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80064d2:	4313      	orrs	r3, r2
 80064d4:	650b      	str	r3, [r1, #80]	; 0x50
 80064d6:	e001      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d8:	7dfb      	ldrb	r3, [r7, #23]
 80064da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d03d      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ec:	2b04      	cmp	r3, #4
 80064ee:	d826      	bhi.n	800653e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80064f0:	a201      	add	r2, pc, #4	; (adr r2, 80064f8 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80064f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f6:	bf00      	nop
 80064f8:	0800650d 	.word	0x0800650d
 80064fc:	0800651b 	.word	0x0800651b
 8006500:	0800652d 	.word	0x0800652d
 8006504:	08006545 	.word	0x08006545
 8006508:	08006545 	.word	0x08006545
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800650c:	4b8b      	ldr	r3, [pc, #556]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800650e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006510:	4a8a      	ldr	r2, [pc, #552]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006516:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006518:	e015      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	3304      	adds	r3, #4
 800651e:	2100      	movs	r1, #0
 8006520:	4618      	mov	r0, r3
 8006522:	f001 fc63 	bl	8007dec <RCCEx_PLL2_Config>
 8006526:	4603      	mov	r3, r0
 8006528:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800652a:	e00c      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	3324      	adds	r3, #36	; 0x24
 8006530:	2100      	movs	r1, #0
 8006532:	4618      	mov	r0, r3
 8006534:	f001 fd0c 	bl	8007f50 <RCCEx_PLL3_Config>
 8006538:	4603      	mov	r3, r0
 800653a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800653c:	e003      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	75fb      	strb	r3, [r7, #23]
      break;
 8006542:	e000      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006544:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006546:	7dfb      	ldrb	r3, [r7, #23]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d109      	bne.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800654c:	4b7b      	ldr	r3, [pc, #492]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800654e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006550:	f023 0207 	bic.w	r2, r3, #7
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006558:	4978      	ldr	r1, [pc, #480]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800655a:	4313      	orrs	r3, r2
 800655c:	650b      	str	r3, [r1, #80]	; 0x50
 800655e:	e001      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006560:	7dfb      	ldrb	r3, [r7, #23]
 8006562:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800656c:	2b00      	cmp	r3, #0
 800656e:	d043      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006574:	2b80      	cmp	r3, #128	; 0x80
 8006576:	d01f      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8006578:	2b80      	cmp	r3, #128	; 0x80
 800657a:	d804      	bhi.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00b      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006580:	2b40      	cmp	r3, #64	; 0x40
 8006582:	d010      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8006584:	e021      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800658a:	d021      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800658c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006590:	d020      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006592:	2bc0      	cmp	r3, #192	; 0xc0
 8006594:	d020      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8006596:	e018      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006598:	4b68      	ldr	r3, [pc, #416]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800659a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659c:	4a67      	ldr	r2, [pc, #412]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800659e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80065a4:	e019      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x196>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	3304      	adds	r3, #4
 80065aa:	2100      	movs	r1, #0
 80065ac:	4618      	mov	r0, r3
 80065ae:	f001 fc1d 	bl	8007dec <RCCEx_PLL2_Config>
 80065b2:	4603      	mov	r3, r0
 80065b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80065b6:	e010      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x196>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	3324      	adds	r3, #36	; 0x24
 80065bc:	2100      	movs	r1, #0
 80065be:	4618      	mov	r0, r3
 80065c0:	f001 fcc6 	bl	8007f50 <RCCEx_PLL3_Config>
 80065c4:	4603      	mov	r3, r0
 80065c6:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80065c8:	e007      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x196>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	75fb      	strb	r3, [r7, #23]
      break;
 80065ce:	e004      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 80065d0:	bf00      	nop
 80065d2:	e002      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 80065d4:	bf00      	nop
 80065d6:	e000      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 80065d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065da:	7dfb      	ldrb	r3, [r7, #23]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d109      	bne.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80065e0:	4b56      	ldr	r3, [pc, #344]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80065e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065e4:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ec:	4953      	ldr	r1, [pc, #332]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	650b      	str	r3, [r1, #80]	; 0x50
 80065f2:	e001      	b.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f4:	7dfb      	ldrb	r3, [r7, #23]
 80065f6:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006600:	2b00      	cmp	r3, #0
 8006602:	d047      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800660c:	d022      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800660e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006612:	d805      	bhi.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00d      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8006618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800661c:	d011      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800661e:	e022      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006620:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006624:	d022      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x228>
 8006626:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800662a:	d021      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 800662c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006630:	d020      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006632:	e018      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x222>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006634:	4b41      	ldr	r3, [pc, #260]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006638:	4a40      	ldr	r2, [pc, #256]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800663a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800663e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006640:	e019      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x232>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	3304      	adds	r3, #4
 8006646:	2100      	movs	r1, #0
 8006648:	4618      	mov	r0, r3
 800664a:	f001 fbcf 	bl	8007dec <RCCEx_PLL2_Config>
 800664e:	4603      	mov	r3, r0
 8006650:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006652:	e010      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x232>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	3324      	adds	r3, #36	; 0x24
 8006658:	2100      	movs	r1, #0
 800665a:	4618      	mov	r0, r3
 800665c:	f001 fc78 	bl	8007f50 <RCCEx_PLL3_Config>
 8006660:	4603      	mov	r3, r0
 8006662:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006664:	e007      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x232>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	75fb      	strb	r3, [r7, #23]
      break;
 800666a:	e004      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 800666c:	bf00      	nop
 800666e:	e002      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 8006670:	bf00      	nop
 8006672:	e000      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 8006674:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006676:	7dfb      	ldrb	r3, [r7, #23]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d109      	bne.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800667c:	4b2f      	ldr	r3, [pc, #188]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800667e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006680:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006688:	492c      	ldr	r1, [pc, #176]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800668a:	4313      	orrs	r3, r2
 800668c:	650b      	str	r3, [r1, #80]	; 0x50
 800668e:	e001      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x250>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006690:	7dfb      	ldrb	r3, [r7, #23]
 8006692:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d032      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066a4:	2b10      	cmp	r3, #16
 80066a6:	d009      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x278>
 80066a8:	2b10      	cmp	r3, #16
 80066aa:	d802      	bhi.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d018      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
 80066b0:	e014      	b.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80066b2:	2b20      	cmp	r3, #32
 80066b4:	d009      	beq.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x286>
 80066b6:	2b30      	cmp	r3, #48	; 0x30
 80066b8:	d015      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 80066ba:	e00f      	b.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x298>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066bc:	4b1f      	ldr	r3, [pc, #124]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80066be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c0:	4a1e      	ldr	r2, [pc, #120]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80066c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80066c8:	e00e      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	3304      	adds	r3, #4
 80066ce:	2102      	movs	r1, #2
 80066d0:	4618      	mov	r0, r3
 80066d2:	f001 fb8b 	bl	8007dec <RCCEx_PLL2_Config>
 80066d6:	4603      	mov	r3, r0
 80066d8:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80066da:	e005      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	75fb      	strb	r3, [r7, #23]
      break;
 80066e0:	e002      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      break;
 80066e2:	bf00      	nop
 80066e4:	e000      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      break;
 80066e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066e8:	7dfb      	ldrb	r3, [r7, #23]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d109      	bne.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80066ee:	4b13      	ldr	r3, [pc, #76]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80066f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066fa:	4910      	ldr	r1, [pc, #64]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80066fc:	4313      	orrs	r3, r2
 80066fe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006700:	e001      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006702:	7dfb      	ldrb	r3, [r7, #23]
 8006704:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d044      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800671a:	d021      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800671c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006720:	d805      	bhi.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x2ea>
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00c      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800672a:	d010      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x30a>
 800672c:	e021      	b.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800672e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006732:	d021      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x334>
 8006734:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006738:	d020      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x338>
 800673a:	e01a      	b.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800673c:	58024400 	.word	0x58024400
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006740:	4ba6      	ldr	r3, [pc, #664]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006744:	4aa5      	ldr	r2, [pc, #660]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006746:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800674a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800674c:	e017      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x33a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	3304      	adds	r3, #4
 8006752:	2100      	movs	r1, #0
 8006754:	4618      	mov	r0, r3
 8006756:	f001 fb49 	bl	8007dec <RCCEx_PLL2_Config>
 800675a:	4603      	mov	r3, r0
 800675c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800675e:	e00e      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x33a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	3324      	adds	r3, #36	; 0x24
 8006764:	2100      	movs	r1, #0
 8006766:	4618      	mov	r0, r3
 8006768:	f001 fbf2 	bl	8007f50 <RCCEx_PLL3_Config>
 800676c:	4603      	mov	r3, r0
 800676e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006770:	e005      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x33a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	75fb      	strb	r3, [r7, #23]
      break;
 8006776:	e002      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x33a>
      break;
 8006778:	bf00      	nop
 800677a:	e000      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x33a>
      break;
 800677c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800677e:	7dfb      	ldrb	r3, [r7, #23]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d109      	bne.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x354>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006784:	4b95      	ldr	r3, [pc, #596]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006788:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006790:	4992      	ldr	r1, [pc, #584]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006792:	4313      	orrs	r3, r2
 8006794:	650b      	str	r3, [r1, #80]	; 0x50
 8006796:	e001      	b.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x358>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006798:	7dfb      	ldrb	r3, [r7, #23]
 800679a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d042      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067b0:	d01b      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 80067b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067b6:	d805      	bhi.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x380>
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d022      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x3be>
 80067bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067c0:	d00a      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x394>
 80067c2:	e01b      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 80067c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80067c8:	d01d      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 80067ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067ce:	d01c      	beq.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 80067d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80067d4:	d01b      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 80067d6:	e011      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	3304      	adds	r3, #4
 80067dc:	2101      	movs	r1, #1
 80067de:	4618      	mov	r0, r3
 80067e0:	f001 fb04 	bl	8007dec <RCCEx_PLL2_Config>
 80067e4:	4603      	mov	r3, r0
 80067e6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80067e8:	e012      	b.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	3324      	adds	r3, #36	; 0x24
 80067ee:	2101      	movs	r1, #1
 80067f0:	4618      	mov	r0, r3
 80067f2:	f001 fbad 	bl	8007f50 <RCCEx_PLL3_Config>
 80067f6:	4603      	mov	r3, r0
 80067f8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80067fa:	e009      	b.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006800:	e006      	b.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006802:	bf00      	nop
 8006804:	e004      	b.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006806:	bf00      	nop
 8006808:	e002      	b.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 800680a:	bf00      	nop
 800680c:	e000      	b.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 800680e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006810:	7dfb      	ldrb	r3, [r7, #23]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d109      	bne.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006816:	4b71      	ldr	r3, [pc, #452]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800681a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006822:	496e      	ldr	r1, [pc, #440]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006824:	4313      	orrs	r3, r2
 8006826:	650b      	str	r3, [r1, #80]	; 0x50
 8006828:	e001      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800682a:	7dfb      	ldrb	r3, [r7, #23]
 800682c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d049      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006840:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006844:	d02a      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x458>
 8006846:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800684a:	d808      	bhi.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800684c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006850:	d00f      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006852:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006856:	d015      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006858:	2b00      	cmp	r3, #0
 800685a:	d021      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 800685c:	e01b      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800685e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006862:	d01f      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8006864:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006868:	d01e      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800686a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800686e:	d01d      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x468>
 8006870:	e011      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x452>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	3304      	adds	r3, #4
 8006876:	2101      	movs	r1, #1
 8006878:	4618      	mov	r0, r3
 800687a:	f001 fab7 	bl	8007dec <RCCEx_PLL2_Config>
 800687e:	4603      	mov	r3, r0
 8006880:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006882:	e014      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x46a>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	3324      	adds	r3, #36	; 0x24
 8006888:	2101      	movs	r1, #1
 800688a:	4618      	mov	r0, r3
 800688c:	f001 fb60 	bl	8007f50 <RCCEx_PLL3_Config>
 8006890:	4603      	mov	r3, r0
 8006892:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006894:	e00b      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x46a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	75fb      	strb	r3, [r7, #23]
      break;
 800689a:	e008      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 800689c:	bf00      	nop
 800689e:	e006      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 80068a0:	bf00      	nop
 80068a2:	e004      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 80068a4:	bf00      	nop
 80068a6:	e002      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 80068a8:	bf00      	nop
 80068aa:	e000      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 80068ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068ae:	7dfb      	ldrb	r3, [r7, #23]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10a      	bne.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x486>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80068b4:	4b49      	ldr	r3, [pc, #292]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80068b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068b8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80068c2:	4946      	ldr	r1, [pc, #280]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80068c4:	4313      	orrs	r3, r2
 80068c6:	658b      	str	r3, [r1, #88]	; 0x58
 80068c8:	e001      	b.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x48a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ca:	7dfb      	ldrb	r3, [r7, #23]
 80068cc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d02d      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068e2:	d005      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 80068e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068e8:	d009      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d013      	beq.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80068ee:	e00f      	b.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068f0:	4b3a      	ldr	r3, [pc, #232]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80068f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f4:	4a39      	ldr	r2, [pc, #228]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80068f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80068fc:	e00c      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x4d4>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	3304      	adds	r3, #4
 8006902:	2101      	movs	r1, #1
 8006904:	4618      	mov	r0, r3
 8006906:	f001 fa71 	bl	8007dec <RCCEx_PLL2_Config>
 800690a:	4603      	mov	r3, r0
 800690c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800690e:	e003      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	75fb      	strb	r3, [r7, #23]
      break;
 8006914:	e000      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      break;
 8006916:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006918:	7dfb      	ldrb	r3, [r7, #23]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d109      	bne.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800691e:	4b2f      	ldr	r3, [pc, #188]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006922:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800692a:	492c      	ldr	r1, [pc, #176]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800692c:	4313      	orrs	r3, r2
 800692e:	650b      	str	r3, [r1, #80]	; 0x50
 8006930:	e001      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006932:	7dfb      	ldrb	r3, [r7, #23]
 8006934:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d031      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x562>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006946:	2b03      	cmp	r3, #3
 8006948:	d81a      	bhi.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x53c>
 800694a:	a201      	add	r2, pc, #4	; (adr r2, 8006950 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800694c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006950:	08006987 	.word	0x08006987
 8006954:	08006961 	.word	0x08006961
 8006958:	0800696f 	.word	0x0800696f
 800695c:	08006987 	.word	0x08006987
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006960:	4b1e      	ldr	r3, [pc, #120]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006964:	4a1d      	ldr	r2, [pc, #116]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800696a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800696c:	e00c      	b.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x544>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	3304      	adds	r3, #4
 8006972:	2102      	movs	r1, #2
 8006974:	4618      	mov	r0, r3
 8006976:	f001 fa39 	bl	8007dec <RCCEx_PLL2_Config>
 800697a:	4603      	mov	r3, r0
 800697c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800697e:	e003      	b.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x544>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	75fb      	strb	r3, [r7, #23]
      break;
 8006984:	e000      	b.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x544>
      break;
 8006986:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006988:	7dfb      	ldrb	r3, [r7, #23]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d109      	bne.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800698e:	4b13      	ldr	r3, [pc, #76]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006992:	f023 0203 	bic.w	r2, r3, #3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800699a:	4910      	ldr	r1, [pc, #64]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800699c:	4313      	orrs	r3, r2
 800699e:	64cb      	str	r3, [r1, #76]	; 0x4c
 80069a0:	e001      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x562>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069a2:	7dfb      	ldrb	r3, [r7, #23]
 80069a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f000 808a 	beq.w	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x684>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069b4:	4b0a      	ldr	r3, [pc, #40]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a09      	ldr	r2, [pc, #36]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80069ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80069c0:	f7fa fcbe 	bl	8001340 <HAL_GetTick>
 80069c4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069c6:	e00d      	b.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069c8:	f7fa fcba 	bl	8001340 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	2b64      	cmp	r3, #100	; 0x64
 80069d4:	d906      	bls.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        ret = HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	75fb      	strb	r3, [r7, #23]
        break;
 80069da:	e009      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80069dc:	58024400 	.word	0x58024400
 80069e0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069e4:	4bba      	ldr	r3, [pc, #744]	; (8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x88c>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d0eb      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      }
    }

    if(ret == HAL_OK)
 80069f0:	7dfb      	ldrb	r3, [r7, #23]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d166      	bne.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80069f6:	4bb7      	ldr	r3, [pc, #732]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80069f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a00:	4053      	eors	r3, r2
 8006a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d013      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a0a:	4bb2      	ldr	r3, [pc, #712]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a12:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a14:	4baf      	ldr	r3, [pc, #700]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a18:	4aae      	ldr	r2, [pc, #696]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006a1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a1e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a20:	4bac      	ldr	r3, [pc, #688]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a24:	4aab      	ldr	r2, [pc, #684]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a2a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006a2c:	4aa9      	ldr	r2, [pc, #676]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a3c:	d115      	bne.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x626>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a3e:	f7fa fc7f 	bl	8001340 <HAL_GetTick>
 8006a42:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a44:	e00b      	b.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a46:	f7fa fc7b 	bl	8001340 <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d902      	bls.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x61a>
          {
            ret = HAL_TIMEOUT;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	75fb      	strb	r3, [r7, #23]
            break;
 8006a5c:	e005      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x626>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a5e:	4b9d      	ldr	r3, [pc, #628]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a62:	f003 0302 	and.w	r3, r3, #2
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d0ed      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x602>
          }
        }
      }

      if(ret == HAL_OK)
 8006a6a:	7dfb      	ldrb	r3, [r7, #23]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d126      	bne.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a7e:	d10d      	bne.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x658>
 8006a80:	4b94      	ldr	r3, [pc, #592]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a8e:	0919      	lsrs	r1, r3, #4
 8006a90:	4b91      	ldr	r3, [pc, #580]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8006a92:	400b      	ands	r3, r1
 8006a94:	498f      	ldr	r1, [pc, #572]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006a96:	4313      	orrs	r3, r2
 8006a98:	610b      	str	r3, [r1, #16]
 8006a9a:	e005      	b.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006a9c:	4b8d      	ldr	r3, [pc, #564]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	4a8c      	ldr	r2, [pc, #560]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006aa2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006aa6:	6113      	str	r3, [r2, #16]
 8006aa8:	4b8a      	ldr	r3, [pc, #552]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006aaa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ab2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ab6:	4987      	ldr	r1, [pc, #540]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	670b      	str	r3, [r1, #112]	; 0x70
 8006abc:	e004      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x684>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006abe:	7dfb      	ldrb	r3, [r7, #23]
 8006ac0:	75bb      	strb	r3, [r7, #22]
 8006ac2:	e001      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x684>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac4:	7dfb      	ldrb	r3, [r7, #23]
 8006ac6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 0301 	and.w	r3, r3, #1
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d07f      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x790>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ada:	2b28      	cmp	r3, #40	; 0x28
 8006adc:	d866      	bhi.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x768>
 8006ade:	a201      	add	r2, pc, #4	; (adr r2, 8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>)
 8006ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae4:	08006bb3 	.word	0x08006bb3
 8006ae8:	08006bad 	.word	0x08006bad
 8006aec:	08006bad 	.word	0x08006bad
 8006af0:	08006bad 	.word	0x08006bad
 8006af4:	08006bad 	.word	0x08006bad
 8006af8:	08006bad 	.word	0x08006bad
 8006afc:	08006bad 	.word	0x08006bad
 8006b00:	08006bad 	.word	0x08006bad
 8006b04:	08006b89 	.word	0x08006b89
 8006b08:	08006bad 	.word	0x08006bad
 8006b0c:	08006bad 	.word	0x08006bad
 8006b10:	08006bad 	.word	0x08006bad
 8006b14:	08006bad 	.word	0x08006bad
 8006b18:	08006bad 	.word	0x08006bad
 8006b1c:	08006bad 	.word	0x08006bad
 8006b20:	08006bad 	.word	0x08006bad
 8006b24:	08006b9b 	.word	0x08006b9b
 8006b28:	08006bad 	.word	0x08006bad
 8006b2c:	08006bad 	.word	0x08006bad
 8006b30:	08006bad 	.word	0x08006bad
 8006b34:	08006bad 	.word	0x08006bad
 8006b38:	08006bad 	.word	0x08006bad
 8006b3c:	08006bad 	.word	0x08006bad
 8006b40:	08006bad 	.word	0x08006bad
 8006b44:	08006bb3 	.word	0x08006bb3
 8006b48:	08006bad 	.word	0x08006bad
 8006b4c:	08006bad 	.word	0x08006bad
 8006b50:	08006bad 	.word	0x08006bad
 8006b54:	08006bad 	.word	0x08006bad
 8006b58:	08006bad 	.word	0x08006bad
 8006b5c:	08006bad 	.word	0x08006bad
 8006b60:	08006bad 	.word	0x08006bad
 8006b64:	08006bb3 	.word	0x08006bb3
 8006b68:	08006bad 	.word	0x08006bad
 8006b6c:	08006bad 	.word	0x08006bad
 8006b70:	08006bad 	.word	0x08006bad
 8006b74:	08006bad 	.word	0x08006bad
 8006b78:	08006bad 	.word	0x08006bad
 8006b7c:	08006bad 	.word	0x08006bad
 8006b80:	08006bad 	.word	0x08006bad
 8006b84:	08006bb3 	.word	0x08006bb3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	3304      	adds	r3, #4
 8006b8c:	2101      	movs	r1, #1
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f001 f92c 	bl	8007dec <RCCEx_PLL2_Config>
 8006b94:	4603      	mov	r3, r0
 8006b96:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006b98:	e00c      	b.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x770>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	3324      	adds	r3, #36	; 0x24
 8006b9e:	2101      	movs	r1, #1
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f001 f9d5 	bl	8007f50 <RCCEx_PLL3_Config>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006baa:	e003      	b.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x770>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	75fb      	strb	r3, [r7, #23]
      break;
 8006bb0:	e000      	b.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x770>
      break;
 8006bb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bb4:	7dfb      	ldrb	r3, [r7, #23]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d10a      	bne.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x78c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006bba:	4b46      	ldr	r3, [pc, #280]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bbe:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bc8:	4942      	ldr	r1, [pc, #264]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	654b      	str	r3, [r1, #84]	; 0x54
 8006bce:	e001      	b.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x790>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bd0:	7dfb      	ldrb	r3, [r7, #23]
 8006bd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0302 	and.w	r3, r3, #2
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d038      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x80e>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006be4:	2b05      	cmp	r3, #5
 8006be6:	d821      	bhi.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x7e8>
 8006be8:	a201      	add	r2, pc, #4	; (adr r2, 8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>)
 8006bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bee:	bf00      	nop
 8006bf0:	08006c33 	.word	0x08006c33
 8006bf4:	08006c09 	.word	0x08006c09
 8006bf8:	08006c1b 	.word	0x08006c1b
 8006bfc:	08006c33 	.word	0x08006c33
 8006c00:	08006c33 	.word	0x08006c33
 8006c04:	08006c33 	.word	0x08006c33
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	3304      	adds	r3, #4
 8006c0c:	2101      	movs	r1, #1
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f001 f8ec 	bl	8007dec <RCCEx_PLL2_Config>
 8006c14:	4603      	mov	r3, r0
 8006c16:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006c18:	e00c      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x7f0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	3324      	adds	r3, #36	; 0x24
 8006c1e:	2101      	movs	r1, #1
 8006c20:	4618      	mov	r0, r3
 8006c22:	f001 f995 	bl	8007f50 <RCCEx_PLL3_Config>
 8006c26:	4603      	mov	r3, r0
 8006c28:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006c2a:	e003      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	75fb      	strb	r3, [r7, #23]
      break;
 8006c30:	e000      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      break;
 8006c32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c34:	7dfb      	ldrb	r3, [r7, #23]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d109      	bne.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006c3a:	4b26      	ldr	r3, [pc, #152]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c3e:	f023 0207 	bic.w	r2, r3, #7
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c46:	4923      	ldr	r1, [pc, #140]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	654b      	str	r3, [r1, #84]	; 0x54
 8006c4c:	e001      	b.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x80e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c4e:	7dfb      	ldrb	r3, [r7, #23]
 8006c50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0304 	and.w	r3, r3, #4
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d040      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x89c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c64:	2b05      	cmp	r3, #5
 8006c66:	d821      	bhi.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x868>
 8006c68:	a201      	add	r2, pc, #4	; (adr r2, 8006c70 <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 8006c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6e:	bf00      	nop
 8006c70:	08006cb3 	.word	0x08006cb3
 8006c74:	08006c89 	.word	0x08006c89
 8006c78:	08006c9b 	.word	0x08006c9b
 8006c7c:	08006cb3 	.word	0x08006cb3
 8006c80:	08006cb3 	.word	0x08006cb3
 8006c84:	08006cb3 	.word	0x08006cb3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	3304      	adds	r3, #4
 8006c8c:	2101      	movs	r1, #1
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f001 f8ac 	bl	8007dec <RCCEx_PLL2_Config>
 8006c94:	4603      	mov	r3, r0
 8006c96:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006c98:	e00c      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x870>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	3324      	adds	r3, #36	; 0x24
 8006c9e:	2101      	movs	r1, #1
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f001 f955 	bl	8007f50 <RCCEx_PLL3_Config>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006caa:	e003      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x870>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	75fb      	strb	r3, [r7, #23]
      break;
 8006cb0:	e000      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x870>
      break;
 8006cb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cb4:	7dfb      	ldrb	r3, [r7, #23]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d110      	bne.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x898>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006cba:	4b06      	ldr	r3, [pc, #24]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cbe:	f023 0207 	bic.w	r2, r3, #7
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cc8:	4902      	ldr	r1, [pc, #8]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	658b      	str	r3, [r1, #88]	; 0x58
 8006cce:	e007      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 8006cd0:	58024800 	.word	0x58024800
 8006cd4:	58024400 	.word	0x58024400
 8006cd8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cdc:	7dfb      	ldrb	r3, [r7, #23]
 8006cde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 0320 	and.w	r3, r3, #32
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d044      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cf6:	d01b      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8006cf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cfc:	d805      	bhi.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d022      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x904>
 8006d02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d06:	d00a      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x8da>
 8006d08:	e01b      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8006d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d0e:	d01d      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x908>
 8006d10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d14:	d01c      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x90c>
 8006d16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d1a:	d01b      	beq.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8006d1c:	e011      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	3304      	adds	r3, #4
 8006d22:	2100      	movs	r1, #0
 8006d24:	4618      	mov	r0, r3
 8006d26:	f001 f861 	bl	8007dec <RCCEx_PLL2_Config>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006d2e:	e012      	b.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x912>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	3324      	adds	r3, #36	; 0x24
 8006d34:	2102      	movs	r1, #2
 8006d36:	4618      	mov	r0, r3
 8006d38:	f001 f90a 	bl	8007f50 <RCCEx_PLL3_Config>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006d40:	e009      	b.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	75fb      	strb	r3, [r7, #23]
      break;
 8006d46:	e006      	b.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8006d48:	bf00      	nop
 8006d4a:	e004      	b.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8006d4c:	bf00      	nop
 8006d4e:	e002      	b.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8006d50:	bf00      	nop
 8006d52:	e000      	b.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8006d54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d56:	7dfb      	ldrb	r3, [r7, #23]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10a      	bne.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d5c:	4bb3      	ldr	r3, [pc, #716]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d60:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d6a:	49b0      	ldr	r1, [pc, #704]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	654b      	str	r3, [r1, #84]	; 0x54
 8006d70:	e001      	b.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x932>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d72:	7dfb      	ldrb	r3, [r7, #23]
 8006d74:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d044      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x9c8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d8c:	d01b      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x982>
 8006d8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d92:	d805      	bhi.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d022      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x99a>
 8006d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d9c:	d00a      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x970>
 8006d9e:	e01b      	b.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x994>
 8006da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006da4:	d01d      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
 8006da6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006daa:	d01c      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8006dac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006db0:	d01b      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8006db2:	e011      	b.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x994>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	3304      	adds	r3, #4
 8006db8:	2100      	movs	r1, #0
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f001 f816 	bl	8007dec <RCCEx_PLL2_Config>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006dc4:	e012      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x9a8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	3324      	adds	r3, #36	; 0x24
 8006dca:	2102      	movs	r1, #2
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f001 f8bf 	bl	8007f50 <RCCEx_PLL3_Config>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006dd6:	e009      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	75fb      	strb	r3, [r7, #23]
      break;
 8006ddc:	e006      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 8006dde:	bf00      	nop
 8006de0:	e004      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 8006de2:	bf00      	nop
 8006de4:	e002      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 8006de6:	bf00      	nop
 8006de8:	e000      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 8006dea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dec:	7dfb      	ldrb	r3, [r7, #23]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d10a      	bne.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x9c4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006df2:	4b8e      	ldr	r3, [pc, #568]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006df6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e00:	498a      	ldr	r1, [pc, #552]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006e02:	4313      	orrs	r3, r2
 8006e04:	658b      	str	r3, [r1, #88]	; 0x58
 8006e06:	e001      	b.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x9c8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e08:	7dfb      	ldrb	r3, [r7, #23]
 8006e0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d044      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e22:	d01b      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0xa18>
 8006e24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e28:	d805      	bhi.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d022      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e32:	d00a      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8006e34:	e01b      	b.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8006e36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e3a:	d01d      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8006e3c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006e40:	d01c      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0xa38>
 8006e42:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006e46:	d01b      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 8006e48:	e011      	b.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	3304      	adds	r3, #4
 8006e4e:	2100      	movs	r1, #0
 8006e50:	4618      	mov	r0, r3
 8006e52:	f000 ffcb 	bl	8007dec <RCCEx_PLL2_Config>
 8006e56:	4603      	mov	r3, r0
 8006e58:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006e5a:	e012      	b.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	3324      	adds	r3, #36	; 0x24
 8006e60:	2102      	movs	r1, #2
 8006e62:	4618      	mov	r0, r3
 8006e64:	f001 f874 	bl	8007f50 <RCCEx_PLL3_Config>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006e6c:	e009      	b.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	75fb      	strb	r3, [r7, #23]
      break;
 8006e72:	e006      	b.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 8006e74:	bf00      	nop
 8006e76:	e004      	b.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 8006e78:	bf00      	nop
 8006e7a:	e002      	b.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 8006e7c:	bf00      	nop
 8006e7e:	e000      	b.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 8006e80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e82:	7dfb      	ldrb	r3, [r7, #23]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d10a      	bne.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006e88:	4b68      	ldr	r3, [pc, #416]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e8c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e96:	4965      	ldr	r1, [pc, #404]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	658b      	str	r3, [r1, #88]	; 0x58
 8006e9c:	e001      	b.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ea0:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0308 	and.w	r3, r3, #8
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d01a      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eb8:	d10a      	bne.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	3324      	adds	r3, #36	; 0x24
 8006ebe:	2102      	movs	r1, #2
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f001 f845 	bl	8007f50 <RCCEx_PLL3_Config>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d001      	beq.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
        {
          status = HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006ed0:	4b56      	ldr	r3, [pc, #344]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ed4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ede:	4953      	ldr	r1, [pc, #332]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0310 	and.w	r3, r3, #16
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d01a      	beq.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0xae2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006efa:	d10a      	bne.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	3324      	adds	r3, #36	; 0x24
 8006f00:	2102      	movs	r1, #2
 8006f02:	4618      	mov	r0, r3
 8006f04:	f001 f824 	bl	8007f50 <RCCEx_PLL3_Config>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d001      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0xace>
      {
        status = HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006f12:	4b46      	ldr	r3, [pc, #280]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f20:	4942      	ldr	r1, [pc, #264]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006f22:	4313      	orrs	r3, r2
 8006f24:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d030      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f3c:	d00d      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0xb16>
 8006f3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f42:	d016      	beq.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d111      	bne.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0xb28>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	3304      	adds	r3, #4
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f000 ff4c 	bl	8007dec <RCCEx_PLL2_Config>
 8006f54:	4603      	mov	r3, r0
 8006f56:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006f58:	e00c      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	3324      	adds	r3, #36	; 0x24
 8006f5e:	2102      	movs	r1, #2
 8006f60:	4618      	mov	r0, r3
 8006f62:	f000 fff5 	bl	8007f50 <RCCEx_PLL3_Config>
 8006f66:	4603      	mov	r3, r0
 8006f68:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006f6a:	e003      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	75fb      	strb	r3, [r7, #23]
      break;
 8006f70:	e000      	b.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006f72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f74:	7dfb      	ldrb	r3, [r7, #23]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d10a      	bne.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f7a:	4b2c      	ldr	r3, [pc, #176]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f7e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f88:	4928      	ldr	r1, [pc, #160]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	658b      	str	r3, [r1, #88]	; 0x58
 8006f8e:	e001      	b.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f90:	7dfb      	ldrb	r3, [r7, #23]
 8006f92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d02f      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fa6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006faa:	d00c      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006fac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006fb0:	d015      	beq.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0xb9a>
 8006fb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fb6:	d10f      	bne.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xb94>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fb8:	4b1c      	ldr	r3, [pc, #112]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fbc:	4a1b      	ldr	r2, [pc, #108]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006fbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006fc4:	e00c      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	3324      	adds	r3, #36	; 0x24
 8006fca:	2101      	movs	r1, #1
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f000 ffbf 	bl	8007f50 <RCCEx_PLL3_Config>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006fd6:	e003      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	75fb      	strb	r3, [r7, #23]
      break;
 8006fdc:	e000      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      break;
 8006fde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fe0:	7dfb      	ldrb	r3, [r7, #23]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10a      	bne.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006fe6:	4b11      	ldr	r3, [pc, #68]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ff4:	490d      	ldr	r1, [pc, #52]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	654b      	str	r3, [r1, #84]	; 0x54
 8006ffa:	e001      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ffc:	7dfb      	ldrb	r3, [r7, #23]
 8006ffe:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d02c      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0xc22>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007010:	2b00      	cmp	r3, #0
 8007012:	d003      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8007014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007018:	d00a      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 800701a:	e012      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800701c:	4b03      	ldr	r3, [pc, #12]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800701e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007020:	4a02      	ldr	r2, [pc, #8]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007026:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007028:	e00e      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xc04>
 800702a:	bf00      	nop
 800702c:	58024400 	.word	0x58024400

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	3304      	adds	r3, #4
 8007034:	2102      	movs	r1, #2
 8007036:	4618      	mov	r0, r3
 8007038:	f000 fed8 	bl	8007dec <RCCEx_PLL2_Config>
 800703c:	4603      	mov	r3, r0
 800703e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007040:	e002      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xc04>

    default:
      ret = HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	75fb      	strb	r3, [r7, #23]
      break;
 8007046:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007048:	7dfb      	ldrb	r3, [r7, #23]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d109      	bne.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800704e:	4b56      	ldr	r3, [pc, #344]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007052:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800705a:	4953      	ldr	r1, [pc, #332]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800705c:	4313      	orrs	r3, r2
 800705e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007060:	e001      	b.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007062:	7dfb      	ldrb	r3, [r7, #23]
 8007064:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00a      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0xc44>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	3324      	adds	r3, #36	; 0x24
 8007076:	2102      	movs	r1, #2
 8007078:	4618      	mov	r0, r3
 800707a:	f000 ff69 	bl	8007f50 <RCCEx_PLL3_Config>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d001      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0xc44>
    {
      status=HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007090:	2b00      	cmp	r3, #0
 8007092:	d031      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800709a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800709e:	d00c      	beq.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80070a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070a4:	d802      	bhi.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d011      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0xc8a>
 80070aa:	e00d      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80070ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070b0:	d00f      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0xc8e>
 80070b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070b6:	d00e      	beq.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80070b8:	e006      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070ba:	4b3b      	ldr	r3, [pc, #236]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80070bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070be:	4a3a      	ldr	r2, [pc, #232]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80070c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80070c6:	e007      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	75fb      	strb	r3, [r7, #23]
      break;
 80070cc:	e004      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 80070ce:	bf00      	nop
 80070d0:	e002      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 80070d2:	bf00      	nop
 80070d4:	e000      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 80070d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070d8:	7dfb      	ldrb	r3, [r7, #23]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d10a      	bne.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80070de:	4b32      	ldr	r3, [pc, #200]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80070e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070ec:	492e      	ldr	r1, [pc, #184]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80070ee:	4313      	orrs	r3, r2
 80070f0:	654b      	str	r3, [r1, #84]	; 0x54
 80070f2:	e001      	b.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070f4:	7dfb      	ldrb	r3, [r7, #23]
 80070f6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007100:	2b00      	cmp	r3, #0
 8007102:	d008      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007104:	4b28      	ldr	r3, [pc, #160]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007108:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007110:	4925      	ldr	r1, [pc, #148]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007112:	4313      	orrs	r3, r2
 8007114:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d008      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007122:	4b21      	ldr	r3, [pc, #132]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007126:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800712e:	491e      	ldr	r1, [pc, #120]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007130:	4313      	orrs	r3, r2
 8007132:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800713c:	2b00      	cmp	r3, #0
 800713e:	d008      	beq.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007140:	4b19      	ldr	r3, [pc, #100]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007144:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800714c:	4916      	ldr	r1, [pc, #88]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800714e:	4313      	orrs	r3, r2
 8007150:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00d      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0xd36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800715e:	4b12      	ldr	r3, [pc, #72]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	4a11      	ldr	r2, [pc, #68]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007164:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007168:	6113      	str	r3, [r2, #16]
 800716a:	4b0f      	ldr	r3, [pc, #60]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800716c:	691a      	ldr	r2, [r3, #16]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007174:	490c      	ldr	r1, [pc, #48]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007176:	4313      	orrs	r3, r2
 8007178:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	da08      	bge.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0xd50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007182:	4b09      	ldr	r3, [pc, #36]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007186:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800718e:	4906      	ldr	r1, [pc, #24]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007190:	4313      	orrs	r3, r2
 8007192:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007194:	7dbb      	ldrb	r3, [r7, #22]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d101      	bne.n	800719e <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    return HAL_OK;
 800719a:	2300      	movs	r3, #0
 800719c:	e000      	b.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
  }
  return HAL_ERROR;
 800719e:	2301      	movs	r3, #1
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3718      	adds	r7, #24
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	58024400 	.word	0x58024400

080071ac <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b090      	sub	sp, #64	; 0x40
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071ba:	d150      	bne.n	800725e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80071bc:	4ba1      	ldr	r3, [pc, #644]	; (8007444 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80071be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071c0:	f003 0307 	and.w	r3, r3, #7
 80071c4:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80071c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c8:	2b04      	cmp	r3, #4
 80071ca:	d844      	bhi.n	8007256 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 80071cc:	a201      	add	r2, pc, #4	; (adr r2, 80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80071ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d2:	bf00      	nop
 80071d4:	080071e9 	.word	0x080071e9
 80071d8:	080071f9 	.word	0x080071f9
 80071dc:	08007209 	.word	0x08007209
 80071e0:	08007251 	.word	0x08007251
 80071e4:	08007219 	.word	0x08007219
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071ec:	4618      	mov	r0, r3
 80071ee:	f000 fcb1 	bl	8007b54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071f6:	e1ef      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071f8:	f107 0318 	add.w	r3, r7, #24
 80071fc:	4618      	mov	r0, r3
 80071fe:	f000 fa11 	bl	8007624 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007206:	e1e7      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007208:	f107 030c 	add.w	r3, r7, #12
 800720c:	4618      	mov	r0, r3
 800720e:	f000 fb55 	bl	80078bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007216:	e1df      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007218:	4b8a      	ldr	r3, [pc, #552]	; (8007444 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800721a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800721c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007220:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007224:	2b00      	cmp	r3, #0
 8007226:	d102      	bne.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007228:	4b87      	ldr	r3, [pc, #540]	; (8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800722a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800722c:	e1d4      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800722e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007230:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007234:	d102      	bne.n	800723c <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8007236:	4b85      	ldr	r3, [pc, #532]	; (800744c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007238:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800723a:	e1cd      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800723c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800723e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007242:	d102      	bne.n	800724a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8007244:	4b82      	ldr	r3, [pc, #520]	; (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007246:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007248:	e1c6      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 800724a:	2300      	movs	r3, #0
 800724c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800724e:	e1c3      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007250:	4b80      	ldr	r3, [pc, #512]	; (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007252:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007254:	e1c0      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      default :
        {
          frequency = 0;
 8007256:	2300      	movs	r3, #0
 8007258:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800725a:	bf00      	nop
 800725c:	e1bc      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007264:	d14f      	bne.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 8007266:	4b77      	ldr	r3, [pc, #476]	; (8007444 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800726a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800726e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007272:	2b80      	cmp	r3, #128	; 0x80
 8007274:	d01c      	beq.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8007276:	2b80      	cmp	r3, #128	; 0x80
 8007278:	d804      	bhi.n	8007284 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800727a:	2b00      	cmp	r3, #0
 800727c:	d008      	beq.n	8007290 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800727e:	2b40      	cmp	r3, #64	; 0x40
 8007280:	d00e      	beq.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007282:	e03c      	b.n	80072fe <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8007284:	2bc0      	cmp	r3, #192	; 0xc0
 8007286:	d037      	beq.n	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007288:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800728c:	d018      	beq.n	80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800728e:	e036      	b.n	80072fe <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007294:	4618      	mov	r0, r3
 8007296:	f000 fc5d 	bl	8007b54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800729a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800729e:	e19b      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072a0:	f107 0318 	add.w	r3, r7, #24
 80072a4:	4618      	mov	r0, r3
 80072a6:	f000 f9bd 	bl	8007624 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072ae:	e193      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072b0:	f107 030c 	add.w	r3, r7, #12
 80072b4:	4618      	mov	r0, r3
 80072b6:	f000 fb01 	bl	80078bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072be:	e18b      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80072c0:	4b60      	ldr	r3, [pc, #384]	; (8007444 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80072c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80072c8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80072ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d102      	bne.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80072d0:	4b5d      	ldr	r3, [pc, #372]	; (8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80072d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80072d4:	e180      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80072d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072dc:	d102      	bne.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 80072de:	4b5b      	ldr	r3, [pc, #364]	; (800744c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80072e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072e2:	e179      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80072e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072ea:	d102      	bne.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 80072ec:	4b58      	ldr	r3, [pc, #352]	; (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80072ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072f0:	e172      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 80072f2:	2300      	movs	r3, #0
 80072f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072f6:	e16f      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80072f8:	4b56      	ldr	r3, [pc, #344]	; (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80072fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072fc:	e16c      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 80072fe:	2300      	movs	r3, #0
 8007300:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007302:	bf00      	nop
 8007304:	e168      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800730c:	d153      	bne.n	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 800730e:	4b4d      	ldr	r3, [pc, #308]	; (8007444 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007312:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8007316:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800731e:	d01f      	beq.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8007320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007324:	d805      	bhi.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00a      	beq.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800732a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800732e:	d00f      	beq.n	8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8007330:	e03d      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8007332:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007336:	d037      	beq.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8007338:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800733c:	d018      	beq.n	8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800733e:	e036      	b.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007344:	4618      	mov	r0, r3
 8007346:	f000 fc05 	bl	8007b54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800734a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800734e:	e143      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007350:	f107 0318 	add.w	r3, r7, #24
 8007354:	4618      	mov	r0, r3
 8007356:	f000 f965 	bl	8007624 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800735e:	e13b      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007360:	f107 030c 	add.w	r3, r7, #12
 8007364:	4618      	mov	r0, r3
 8007366:	f000 faa9 	bl	80078bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800736e:	e133      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007370:	4b34      	ldr	r3, [pc, #208]	; (8007444 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007374:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007378:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800737a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800737c:	2b00      	cmp	r3, #0
 800737e:	d102      	bne.n	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007380:	4b31      	ldr	r3, [pc, #196]	; (8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007382:	63fb      	str	r3, [r7, #60]	; 0x3c
          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }
          break;
 8007384:	e128      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007388:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800738c:	d102      	bne.n	8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800738e:	4b2f      	ldr	r3, [pc, #188]	; (800744c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007390:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007392:	e121      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007396:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800739a:	d102      	bne.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 800739c:	4b2c      	ldr	r3, [pc, #176]	; (8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800739e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073a0:	e11a      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 80073a2:	2300      	movs	r3, #0
 80073a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073a6:	e117      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80073a8:	4b2a      	ldr	r3, [pc, #168]	; (8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80073aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073ac:	e114      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 80073ae:	2300      	movs	r3, #0
 80073b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073b2:	bf00      	nop
 80073b4:	e110      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073bc:	d15d      	bne.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80073be:	4b21      	ldr	r3, [pc, #132]	; (8007444 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80073c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073c2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80073c6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80073c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073ce:	d01f      	beq.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80073d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073d4:	d805      	bhi.n	80073e2 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00a      	beq.n	80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80073da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073de:	d00f      	beq.n	8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80073e0:	e047      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 80073e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80073e6:	d041      	beq.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 80073e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073ec:	d018      	beq.n	8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80073ee:	e040      	b.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073f4:	4618      	mov	r0, r3
 80073f6:	f000 fbad 	bl	8007b54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80073fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073fe:	e0eb      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007400:	f107 0318 	add.w	r3, r7, #24
 8007404:	4618      	mov	r0, r3
 8007406:	f000 f90d 	bl	8007624 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800740e:	e0e3      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007410:	f107 030c 	add.w	r3, r7, #12
 8007414:	4618      	mov	r0, r3
 8007416:	f000 fa51 	bl	80078bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800741e:	e0db      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007420:	4b08      	ldr	r3, [pc, #32]	; (8007444 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007424:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007428:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800742a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800742c:	2b00      	cmp	r3, #0
 800742e:	d102      	bne.n	8007436 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007430:	4b05      	ldr	r3, [pc, #20]	; (8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007432:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007434:	e0d0      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007438:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800743c:	d10c      	bne.n	8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800743e:	4b03      	ldr	r3, [pc, #12]	; (800744c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007440:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007442:	e0c9      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
 8007444:	58024400 	.word	0x58024400
 8007448:	03d09000 	.word	0x03d09000
 800744c:	003d0900 	.word	0x003d0900
 8007450:	007a1200 	.word	0x007a1200
 8007454:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800745a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800745e:	d102      	bne.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8007460:	4b60      	ldr	r3, [pc, #384]	; (80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8007462:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007464:	e0b8      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 8007466:	2300      	movs	r3, #0
 8007468:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800746a:	e0b5      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800746c:	4b5e      	ldr	r3, [pc, #376]	; (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 800746e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007470:	e0b2      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      default :
        {
          frequency = 0;
 8007472:	2300      	movs	r3, #0
 8007474:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007476:	bf00      	nop
 8007478:	e0ae      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007480:	d13d      	bne.n	80074fe <HAL_RCCEx_GetPeriphCLKFreq+0x352>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007482:	4b5a      	ldr	r3, [pc, #360]	; (80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8007484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007486:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800748a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800748c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007492:	d00c      	beq.n	80074ae <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8007494:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007498:	d011      	beq.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 800749a:	2b00      	cmp	r3, #0
 800749c:	d12b      	bne.n	80074f6 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800749e:	f107 0318 	add.w	r3, r7, #24
 80074a2:	4618      	mov	r0, r3
 80074a4:	f000 f8be 	bl	8007624 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074ac:	e094      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074ae:	f107 030c 	add.w	r3, r7, #12
 80074b2:	4618      	mov	r0, r3
 80074b4:	f000 fa02 	bl	80078bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074bc:	e08c      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80074be:	4b4b      	ldr	r3, [pc, #300]	; (80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 80074c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80074c6:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80074c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d102      	bne.n	80074d4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80074ce:	4b48      	ldr	r3, [pc, #288]	; (80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x444>)
 80074d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80074d2:	e081      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80074d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074da:	d102      	bne.n	80074e2 <HAL_RCCEx_GetPeriphCLKFreq+0x336>
            frequency = CSI_VALUE;
 80074dc:	4b45      	ldr	r3, [pc, #276]	; (80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x448>)
 80074de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074e0:	e07a      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80074e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074e8:	d102      	bne.n	80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
            frequency = HSE_VALUE;
 80074ea:	4b3e      	ldr	r3, [pc, #248]	; (80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80074ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074ee:	e073      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 80074f0:	2300      	movs	r3, #0
 80074f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074f4:	e070      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 80074f6:	2300      	movs	r3, #0
 80074f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074fa:	bf00      	nop
 80074fc:	e06c      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007504:	d11f      	bne.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007506:	4b39      	ldr	r3, [pc, #228]	; (80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8007508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800750a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800750e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007512:	2b00      	cmp	r3, #0
 8007514:	d003      	beq.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007516:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800751a:	d008      	beq.n	800752e <HAL_RCCEx_GetPeriphCLKFreq+0x382>
 800751c:	e00f      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x392>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800751e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007522:	4618      	mov	r0, r3
 8007524:	f000 fb16 	bl	8007b54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800752c:	e054      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800752e:	f107 0318 	add.w	r3, r7, #24
 8007532:	4618      	mov	r0, r3
 8007534:	f000 f876 	bl	8007624 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007538:	6a3b      	ldr	r3, [r7, #32]
 800753a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800753c:	e04c      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 800753e:	2300      	movs	r3, #0
 8007540:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007542:	bf00      	nop
 8007544:	e048      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800754c:	d142      	bne.n	80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800754e:	4b27      	ldr	r3, [pc, #156]	; (80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8007550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007552:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007556:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800755e:	d029      	beq.n	80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x408>
 8007560:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007564:	d808      	bhi.n	8007578 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8007566:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800756a:	d013      	beq.n	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800756c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007570:	d018      	beq.n	80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00a      	beq.n	800758c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 8007576:	e029      	b.n	80075cc <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 8007578:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800757c:	d020      	beq.n	80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800757e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007582:	d020      	beq.n	80075c6 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 8007584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007588:	d017      	beq.n	80075ba <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 800758a:	e01f      	b.n	80075cc <HAL_RCCEx_GetPeriphCLKFreq+0x420>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800758c:	f000 f834 	bl	80075f8 <HAL_RCCEx_GetD3PCLK1Freq>
 8007590:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007592:	e021      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007594:	f107 0318 	add.w	r3, r7, #24
 8007598:	4618      	mov	r0, r3
 800759a:	f000 f843 	bl	8007624 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075a2:	e019      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075a4:	f107 030c 	add.w	r3, r7, #12
 80075a8:	4618      	mov	r0, r3
 80075aa:	f000 f987 	bl	80078bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075b2:	e011      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 80075b4:	4b0e      	ldr	r3, [pc, #56]	; (80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x444>)
 80075b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075b8:	e00e      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 80075ba:	4b0e      	ldr	r3, [pc, #56]	; (80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x448>)
 80075bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075be:	e00b      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 80075c0:	4b08      	ldr	r3, [pc, #32]	; (80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80075c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075c4:	e008      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80075c6:	4b08      	ldr	r3, [pc, #32]	; (80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 80075c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075ca:	e005      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80075cc:	2300      	movs	r3, #0
 80075ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075d0:	bf00      	nop
 80075d2:	e001      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else
    {
      frequency = 0;
 80075d4:	2300      	movs	r3, #0
 80075d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80075d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3740      	adds	r7, #64	; 0x40
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	007a1200 	.word	0x007a1200
 80075e8:	00bb8000 	.word	0x00bb8000
 80075ec:	58024400 	.word	0x58024400
 80075f0:	03d09000 	.word	0x03d09000
 80075f4:	003d0900 	.word	0x003d0900

080075f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80075fc:	f7fe fec6 	bl	800638c <HAL_RCC_GetHCLKFreq>
 8007600:	4601      	mov	r1, r0
 8007602:	4b06      	ldr	r3, [pc, #24]	; (800761c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007604:	6a1b      	ldr	r3, [r3, #32]
 8007606:	091b      	lsrs	r3, r3, #4
 8007608:	f003 0307 	and.w	r3, r3, #7
 800760c:	4a04      	ldr	r2, [pc, #16]	; (8007620 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800760e:	5cd3      	ldrb	r3, [r2, r3]
 8007610:	f003 031f 	and.w	r3, r3, #31
 8007614:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 8007618:	4618      	mov	r0, r3
 800761a:	bd80      	pop	{r7, pc}
 800761c:	58024400 	.word	0x58024400
 8007620:	0800978c 	.word	0x0800978c

08007624 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007624:	b480      	push	{r7}
 8007626:	b089      	sub	sp, #36	; 0x24
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800762c:	4b9d      	ldr	r3, [pc, #628]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800762e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007630:	f003 0303 	and.w	r3, r3, #3
 8007634:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007636:	4b9b      	ldr	r3, [pc, #620]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800763a:	0b1b      	lsrs	r3, r3, #12
 800763c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007640:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007642:	4b98      	ldr	r3, [pc, #608]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007646:	091b      	lsrs	r3, r3, #4
 8007648:	f003 0301 	and.w	r3, r3, #1
 800764c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800764e:	4b95      	ldr	r3, [pc, #596]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007652:	08db      	lsrs	r3, r3, #3
 8007654:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	fb02 f303 	mul.w	r3, r2, r3
 800765e:	ee07 3a90 	vmov	s15, r3
 8007662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007666:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	2b00      	cmp	r3, #0
 800766e:	f000 810a 	beq.w	8007886 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d05a      	beq.n	800772e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8007678:	2b01      	cmp	r3, #1
 800767a:	d302      	bcc.n	8007682 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800767c:	2b02      	cmp	r3, #2
 800767e:	d078      	beq.n	8007772 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8007680:	e099      	b.n	80077b6 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007682:	4b88      	ldr	r3, [pc, #544]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0320 	and.w	r3, r3, #32
 800768a:	2b00      	cmp	r3, #0
 800768c:	d02d      	beq.n	80076ea <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800768e:	4b85      	ldr	r3, [pc, #532]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	08db      	lsrs	r3, r3, #3
 8007694:	f003 0303 	and.w	r3, r3, #3
 8007698:	4a83      	ldr	r2, [pc, #524]	; (80078a8 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800769a:	fa22 f303 	lsr.w	r3, r2, r3
 800769e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	ee07 3a90 	vmov	s15, r3
 80076a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	ee07 3a90 	vmov	s15, r3
 80076b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076b8:	4b7a      	ldr	r3, [pc, #488]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80076ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076c0:	ee07 3a90 	vmov	s15, r3
 80076c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80076cc:	eddf 5a77 	vldr	s11, [pc, #476]	; 80078ac <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80076d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076e4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80076e8:	e087      	b.n	80077fa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	ee07 3a90 	vmov	s15, r3
 80076f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076f4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80078b0 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80076f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076fc:	4b69      	ldr	r3, [pc, #420]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80076fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007704:	ee07 3a90 	vmov	s15, r3
 8007708:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800770c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007710:	eddf 5a66 	vldr	s11, [pc, #408]	; 80078ac <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007714:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007718:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800771c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007720:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007728:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800772c:	e065      	b.n	80077fa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	ee07 3a90 	vmov	s15, r3
 8007734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007738:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80078b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800773c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007740:	4b58      	ldr	r3, [pc, #352]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007748:	ee07 3a90 	vmov	s15, r3
 800774c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007750:	ed97 6a03 	vldr	s12, [r7, #12]
 8007754:	eddf 5a55 	vldr	s11, [pc, #340]	; 80078ac <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007758:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800775c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007760:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007764:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800776c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007770:	e043      	b.n	80077fa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	ee07 3a90 	vmov	s15, r3
 8007778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800777c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80078b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8007780:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007784:	4b47      	ldr	r3, [pc, #284]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800778c:	ee07 3a90 	vmov	s15, r3
 8007790:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007794:	ed97 6a03 	vldr	s12, [r7, #12]
 8007798:	eddf 5a44 	vldr	s11, [pc, #272]	; 80078ac <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800779c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077b4:	e021      	b.n	80077fa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	ee07 3a90 	vmov	s15, r3
 80077bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077c0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80078b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80077c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077c8:	4b36      	ldr	r3, [pc, #216]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80077ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077d0:	ee07 3a90 	vmov	s15, r3
 80077d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80077dc:	eddf 5a33 	vldr	s11, [pc, #204]	; 80078ac <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80077e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077f8:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80077fa:	4b2a      	ldr	r3, [pc, #168]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80077fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fe:	0a5b      	lsrs	r3, r3, #9
 8007800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007804:	ee07 3a90 	vmov	s15, r3
 8007808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800780c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007810:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007814:	edd7 6a07 	vldr	s13, [r7, #28]
 8007818:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800781c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007820:	ee17 2a90 	vmov	r2, s15
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007828:	4b1e      	ldr	r3, [pc, #120]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800782a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782c:	0c1b      	lsrs	r3, r3, #16
 800782e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007832:	ee07 3a90 	vmov	s15, r3
 8007836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800783a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800783e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007842:	edd7 6a07 	vldr	s13, [r7, #28]
 8007846:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800784a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800784e:	ee17 2a90 	vmov	r2, s15
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007856:	4b13      	ldr	r3, [pc, #76]	; (80078a4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785a:	0e1b      	lsrs	r3, r3, #24
 800785c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007860:	ee07 3a90 	vmov	s15, r3
 8007864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007868:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800786c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007870:	edd7 6a07 	vldr	s13, [r7, #28]
 8007874:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007878:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800787c:	ee17 2a90 	vmov	r2, s15
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007884:	e008      	b.n	8007898 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	609a      	str	r2, [r3, #8]
}
 8007898:	bf00      	nop
 800789a:	3724      	adds	r7, #36	; 0x24
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr
 80078a4:	58024400 	.word	0x58024400
 80078a8:	03d09000 	.word	0x03d09000
 80078ac:	46000000 	.word	0x46000000
 80078b0:	4c742400 	.word	0x4c742400
 80078b4:	4a742400 	.word	0x4a742400
 80078b8:	4af42400 	.word	0x4af42400

080078bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80078bc:	b480      	push	{r7}
 80078be:	b089      	sub	sp, #36	; 0x24
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80078c4:	4b9d      	ldr	r3, [pc, #628]	; (8007b3c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80078c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c8:	f003 0303 	and.w	r3, r3, #3
 80078cc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80078ce:	4b9b      	ldr	r3, [pc, #620]	; (8007b3c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80078d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d2:	0d1b      	lsrs	r3, r3, #20
 80078d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078d8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80078da:	4b98      	ldr	r3, [pc, #608]	; (8007b3c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80078dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078de:	0a1b      	lsrs	r3, r3, #8
 80078e0:	f003 0301 	and.w	r3, r3, #1
 80078e4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80078e6:	4b95      	ldr	r3, [pc, #596]	; (8007b3c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80078e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ea:	08db      	lsrs	r3, r3, #3
 80078ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078f0:	693a      	ldr	r2, [r7, #16]
 80078f2:	fb02 f303 	mul.w	r3, r2, r3
 80078f6:	ee07 3a90 	vmov	s15, r3
 80078fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	2b00      	cmp	r3, #0
 8007906:	f000 810a 	beq.w	8007b1e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d05a      	beq.n	80079c6 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8007910:	2b01      	cmp	r3, #1
 8007912:	d302      	bcc.n	800791a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8007914:	2b02      	cmp	r3, #2
 8007916:	d078      	beq.n	8007a0a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8007918:	e099      	b.n	8007a4e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800791a:	4b88      	ldr	r3, [pc, #544]	; (8007b3c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f003 0320 	and.w	r3, r3, #32
 8007922:	2b00      	cmp	r3, #0
 8007924:	d02d      	beq.n	8007982 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007926:	4b85      	ldr	r3, [pc, #532]	; (8007b3c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	08db      	lsrs	r3, r3, #3
 800792c:	f003 0303 	and.w	r3, r3, #3
 8007930:	4a83      	ldr	r2, [pc, #524]	; (8007b40 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007932:	fa22 f303 	lsr.w	r3, r2, r3
 8007936:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	ee07 3a90 	vmov	s15, r3
 800793e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	ee07 3a90 	vmov	s15, r3
 8007948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800794c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007950:	4b7a      	ldr	r3, [pc, #488]	; (8007b3c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007958:	ee07 3a90 	vmov	s15, r3
 800795c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007960:	ed97 6a03 	vldr	s12, [r7, #12]
 8007964:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007b44 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007968:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800796c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007970:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007974:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800797c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007980:	e087      	b.n	8007a92 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	ee07 3a90 	vmov	s15, r3
 8007988:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800798c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007b48 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8007990:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007994:	4b69      	ldr	r3, [pc, #420]	; (8007b3c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800799c:	ee07 3a90 	vmov	s15, r3
 80079a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80079a8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007b44 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80079ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079c4:	e065      	b.n	8007a92 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	ee07 3a90 	vmov	s15, r3
 80079cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079d0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007b4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80079d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079d8:	4b58      	ldr	r3, [pc, #352]	; (8007b3c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80079da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079e0:	ee07 3a90 	vmov	s15, r3
 80079e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80079ec:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007b44 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80079f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a04:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a08:	e043      	b.n	8007a92 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	ee07 3a90 	vmov	s15, r3
 8007a10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a14:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007b50 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8007a18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a1c:	4b47      	ldr	r3, [pc, #284]	; (8007b3c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a24:	ee07 3a90 	vmov	s15, r3
 8007a28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a2c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a30:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007b44 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007a34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a48:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a4c:	e021      	b.n	8007a92 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	ee07 3a90 	vmov	s15, r3
 8007a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a58:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007b4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007a5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a60:	4b36      	ldr	r3, [pc, #216]	; (8007b3c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a68:	ee07 3a90 	vmov	s15, r3
 8007a6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a70:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a74:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007b44 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007a78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a8c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a90:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007a92:	4b2a      	ldr	r3, [pc, #168]	; (8007b3c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a96:	0a5b      	lsrs	r3, r3, #9
 8007a98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a9c:	ee07 3a90 	vmov	s15, r3
 8007aa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aa4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007aa8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007aac:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ab0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ab4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ab8:	ee17 2a90 	vmov	r2, s15
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007ac0:	4b1e      	ldr	r3, [pc, #120]	; (8007b3c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac4:	0c1b      	lsrs	r3, r3, #16
 8007ac6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007aca:	ee07 3a90 	vmov	s15, r3
 8007ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ad2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ad6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ada:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ade:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ae2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ae6:	ee17 2a90 	vmov	r2, s15
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007aee:	4b13      	ldr	r3, [pc, #76]	; (8007b3c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af2:	0e1b      	lsrs	r3, r3, #24
 8007af4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007af8:	ee07 3a90 	vmov	s15, r3
 8007afc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b08:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b14:	ee17 2a90 	vmov	r2, s15
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007b1c:	e008      	b.n	8007b30 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	609a      	str	r2, [r3, #8]
}
 8007b30:	bf00      	nop
 8007b32:	3724      	adds	r7, #36	; 0x24
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr
 8007b3c:	58024400 	.word	0x58024400
 8007b40:	03d09000 	.word	0x03d09000
 8007b44:	46000000 	.word	0x46000000
 8007b48:	4c742400 	.word	0x4c742400
 8007b4c:	4a742400 	.word	0x4a742400
 8007b50:	4af42400 	.word	0x4af42400

08007b54 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b089      	sub	sp, #36	; 0x24
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b5c:	4b9d      	ldr	r3, [pc, #628]	; (8007dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b60:	f003 0303 	and.w	r3, r3, #3
 8007b64:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007b66:	4b9b      	ldr	r3, [pc, #620]	; (8007dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b6a:	091b      	lsrs	r3, r3, #4
 8007b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b70:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007b72:	4b98      	ldr	r3, [pc, #608]	; (8007dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b76:	f003 0301 	and.w	r3, r3, #1
 8007b7a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007b7c:	4b95      	ldr	r3, [pc, #596]	; (8007dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b80:	08db      	lsrs	r3, r3, #3
 8007b82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b86:	693a      	ldr	r2, [r7, #16]
 8007b88:	fb02 f303 	mul.w	r3, r2, r3
 8007b8c:	ee07 3a90 	vmov	s15, r3
 8007b90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b94:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	f000 810a 	beq.w	8007db4 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d05a      	beq.n	8007c5c <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d302      	bcc.n	8007bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8007baa:	2b02      	cmp	r3, #2
 8007bac:	d078      	beq.n	8007ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8007bae:	e099      	b.n	8007ce4 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bb0:	4b88      	ldr	r3, [pc, #544]	; (8007dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f003 0320 	and.w	r3, r3, #32
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d02d      	beq.n	8007c18 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007bbc:	4b85      	ldr	r3, [pc, #532]	; (8007dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	08db      	lsrs	r3, r3, #3
 8007bc2:	f003 0303 	and.w	r3, r3, #3
 8007bc6:	4a84      	ldr	r2, [pc, #528]	; (8007dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8007bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8007bcc:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	ee07 3a90 	vmov	s15, r3
 8007bd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	ee07 3a90 	vmov	s15, r3
 8007bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007be6:	4b7b      	ldr	r3, [pc, #492]	; (8007dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bee:	ee07 3a90 	vmov	s15, r3
 8007bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bfa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007ddc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c12:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007c16:	e087      	b.n	8007d28 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	ee07 3a90 	vmov	s15, r3
 8007c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c22:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007de0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8007c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c2a:	4b6a      	ldr	r3, [pc, #424]	; (8007dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c32:	ee07 3a90 	vmov	s15, r3
 8007c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c3e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007ddc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c5a:	e065      	b.n	8007d28 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	ee07 3a90 	vmov	s15, r3
 8007c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c66:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007de4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c6e:	4b59      	ldr	r3, [pc, #356]	; (8007dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c76:	ee07 3a90 	vmov	s15, r3
 8007c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c82:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007ddc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c9e:	e043      	b.n	8007d28 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	ee07 3a90 	vmov	s15, r3
 8007ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007caa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007de8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cb2:	4b48      	ldr	r3, [pc, #288]	; (8007dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cba:	ee07 3a90 	vmov	s15, r3
 8007cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cc6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007ddc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ce2:	e021      	b.n	8007d28 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	ee07 3a90 	vmov	s15, r3
 8007cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007de4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cf6:	4b37      	ldr	r3, [pc, #220]	; (8007dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cfe:	ee07 3a90 	vmov	s15, r3
 8007d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d06:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d0a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007ddc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d26:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007d28:	4b2a      	ldr	r3, [pc, #168]	; (8007dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d2c:	0a5b      	lsrs	r3, r3, #9
 8007d2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d32:	ee07 3a90 	vmov	s15, r3
 8007d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d42:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d4e:	ee17 2a90 	vmov	r2, s15
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007d56:	4b1f      	ldr	r3, [pc, #124]	; (8007dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d5a:	0c1b      	lsrs	r3, r3, #16
 8007d5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d60:	ee07 3a90 	vmov	s15, r3
 8007d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d70:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d7c:	ee17 2a90 	vmov	r2, s15
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007d84:	4b13      	ldr	r3, [pc, #76]	; (8007dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d88:	0e1b      	lsrs	r3, r3, #24
 8007d8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d8e:	ee07 3a90 	vmov	s15, r3
 8007d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007da2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007da6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007daa:	ee17 2a90 	vmov	r2, s15
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007db2:	e008      	b.n	8007dc6 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	609a      	str	r2, [r3, #8]
}
 8007dc6:	bf00      	nop
 8007dc8:	3724      	adds	r7, #36	; 0x24
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop
 8007dd4:	58024400 	.word	0x58024400
 8007dd8:	03d09000 	.word	0x03d09000
 8007ddc:	46000000 	.word	0x46000000
 8007de0:	4c742400 	.word	0x4c742400
 8007de4:	4a742400 	.word	0x4a742400
 8007de8:	4af42400 	.word	0x4af42400

08007dec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007df6:	2300      	movs	r3, #0
 8007df8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007dfa:	4b53      	ldr	r3, [pc, #332]	; (8007f48 <RCCEx_PLL2_Config+0x15c>)
 8007dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dfe:	f003 0303 	and.w	r3, r3, #3
 8007e02:	2b03      	cmp	r3, #3
 8007e04:	d101      	bne.n	8007e0a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e099      	b.n	8007f3e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007e0a:	4b4f      	ldr	r3, [pc, #316]	; (8007f48 <RCCEx_PLL2_Config+0x15c>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a4e      	ldr	r2, [pc, #312]	; (8007f48 <RCCEx_PLL2_Config+0x15c>)
 8007e10:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007e14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e16:	f7f9 fa93 	bl	8001340 <HAL_GetTick>
 8007e1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007e1c:	e008      	b.n	8007e30 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007e1e:	f7f9 fa8f 	bl	8001340 <HAL_GetTick>
 8007e22:	4602      	mov	r2, r0
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d901      	bls.n	8007e30 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e086      	b.n	8007f3e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007e30:	4b45      	ldr	r3, [pc, #276]	; (8007f48 <RCCEx_PLL2_Config+0x15c>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1f0      	bne.n	8007e1e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007e3c:	4b42      	ldr	r3, [pc, #264]	; (8007f48 <RCCEx_PLL2_Config+0x15c>)
 8007e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e40:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	031b      	lsls	r3, r3, #12
 8007e4a:	493f      	ldr	r1, [pc, #252]	; (8007f48 <RCCEx_PLL2_Config+0x15c>)
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	628b      	str	r3, [r1, #40]	; 0x28
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	3b01      	subs	r3, #1
 8007e56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	3b01      	subs	r3, #1
 8007e60:	025b      	lsls	r3, r3, #9
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	431a      	orrs	r2, r3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	3b01      	subs	r3, #1
 8007e6c:	041b      	lsls	r3, r3, #16
 8007e6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007e72:	431a      	orrs	r2, r3
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	061b      	lsls	r3, r3, #24
 8007e7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007e80:	4931      	ldr	r1, [pc, #196]	; (8007f48 <RCCEx_PLL2_Config+0x15c>)
 8007e82:	4313      	orrs	r3, r2
 8007e84:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007e86:	4b30      	ldr	r3, [pc, #192]	; (8007f48 <RCCEx_PLL2_Config+0x15c>)
 8007e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	695b      	ldr	r3, [r3, #20]
 8007e92:	492d      	ldr	r1, [pc, #180]	; (8007f48 <RCCEx_PLL2_Config+0x15c>)
 8007e94:	4313      	orrs	r3, r2
 8007e96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007e98:	4b2b      	ldr	r3, [pc, #172]	; (8007f48 <RCCEx_PLL2_Config+0x15c>)
 8007e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e9c:	f023 0220 	bic.w	r2, r3, #32
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	699b      	ldr	r3, [r3, #24]
 8007ea4:	4928      	ldr	r1, [pc, #160]	; (8007f48 <RCCEx_PLL2_Config+0x15c>)
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007eaa:	4b27      	ldr	r3, [pc, #156]	; (8007f48 <RCCEx_PLL2_Config+0x15c>)
 8007eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eae:	4a26      	ldr	r2, [pc, #152]	; (8007f48 <RCCEx_PLL2_Config+0x15c>)
 8007eb0:	f023 0310 	bic.w	r3, r3, #16
 8007eb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007eb6:	4b24      	ldr	r3, [pc, #144]	; (8007f48 <RCCEx_PLL2_Config+0x15c>)
 8007eb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007eba:	4b24      	ldr	r3, [pc, #144]	; (8007f4c <RCCEx_PLL2_Config+0x160>)
 8007ebc:	4013      	ands	r3, r2
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	69d2      	ldr	r2, [r2, #28]
 8007ec2:	00d2      	lsls	r2, r2, #3
 8007ec4:	4920      	ldr	r1, [pc, #128]	; (8007f48 <RCCEx_PLL2_Config+0x15c>)
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007eca:	4b1f      	ldr	r3, [pc, #124]	; (8007f48 <RCCEx_PLL2_Config+0x15c>)
 8007ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ece:	4a1e      	ldr	r2, [pc, #120]	; (8007f48 <RCCEx_PLL2_Config+0x15c>)
 8007ed0:	f043 0310 	orr.w	r3, r3, #16
 8007ed4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d106      	bne.n	8007eea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007edc:	4b1a      	ldr	r3, [pc, #104]	; (8007f48 <RCCEx_PLL2_Config+0x15c>)
 8007ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee0:	4a19      	ldr	r2, [pc, #100]	; (8007f48 <RCCEx_PLL2_Config+0x15c>)
 8007ee2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ee6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ee8:	e00f      	b.n	8007f0a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d106      	bne.n	8007efe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007ef0:	4b15      	ldr	r3, [pc, #84]	; (8007f48 <RCCEx_PLL2_Config+0x15c>)
 8007ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef4:	4a14      	ldr	r2, [pc, #80]	; (8007f48 <RCCEx_PLL2_Config+0x15c>)
 8007ef6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007efa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007efc:	e005      	b.n	8007f0a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007efe:	4b12      	ldr	r3, [pc, #72]	; (8007f48 <RCCEx_PLL2_Config+0x15c>)
 8007f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f02:	4a11      	ldr	r2, [pc, #68]	; (8007f48 <RCCEx_PLL2_Config+0x15c>)
 8007f04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007f08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007f0a:	4b0f      	ldr	r3, [pc, #60]	; (8007f48 <RCCEx_PLL2_Config+0x15c>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a0e      	ldr	r2, [pc, #56]	; (8007f48 <RCCEx_PLL2_Config+0x15c>)
 8007f10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007f14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f16:	f7f9 fa13 	bl	8001340 <HAL_GetTick>
 8007f1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007f1c:	e008      	b.n	8007f30 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007f1e:	f7f9 fa0f 	bl	8001340 <HAL_GetTick>
 8007f22:	4602      	mov	r2, r0
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	1ad3      	subs	r3, r2, r3
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	d901      	bls.n	8007f30 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	e006      	b.n	8007f3e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007f30:	4b05      	ldr	r3, [pc, #20]	; (8007f48 <RCCEx_PLL2_Config+0x15c>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d0f0      	beq.n	8007f1e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	58024400 	.word	0x58024400
 8007f4c:	ffff0007 	.word	0xffff0007

08007f50 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007f5e:	4b53      	ldr	r3, [pc, #332]	; (80080ac <RCCEx_PLL3_Config+0x15c>)
 8007f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f62:	f003 0303 	and.w	r3, r3, #3
 8007f66:	2b03      	cmp	r3, #3
 8007f68:	d101      	bne.n	8007f6e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e099      	b.n	80080a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007f6e:	4b4f      	ldr	r3, [pc, #316]	; (80080ac <RCCEx_PLL3_Config+0x15c>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a4e      	ldr	r2, [pc, #312]	; (80080ac <RCCEx_PLL3_Config+0x15c>)
 8007f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f7a:	f7f9 f9e1 	bl	8001340 <HAL_GetTick>
 8007f7e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007f80:	e008      	b.n	8007f94 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007f82:	f7f9 f9dd 	bl	8001340 <HAL_GetTick>
 8007f86:	4602      	mov	r2, r0
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d901      	bls.n	8007f94 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007f90:	2303      	movs	r3, #3
 8007f92:	e086      	b.n	80080a2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007f94:	4b45      	ldr	r3, [pc, #276]	; (80080ac <RCCEx_PLL3_Config+0x15c>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1f0      	bne.n	8007f82 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007fa0:	4b42      	ldr	r3, [pc, #264]	; (80080ac <RCCEx_PLL3_Config+0x15c>)
 8007fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	051b      	lsls	r3, r3, #20
 8007fae:	493f      	ldr	r1, [pc, #252]	; (80080ac <RCCEx_PLL3_Config+0x15c>)
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	628b      	str	r3, [r1, #40]	; 0x28
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	025b      	lsls	r3, r3, #9
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	431a      	orrs	r2, r3
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	041b      	lsls	r3, r3, #16
 8007fd2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007fd6:	431a      	orrs	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	691b      	ldr	r3, [r3, #16]
 8007fdc:	3b01      	subs	r3, #1
 8007fde:	061b      	lsls	r3, r3, #24
 8007fe0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007fe4:	4931      	ldr	r1, [pc, #196]	; (80080ac <RCCEx_PLL3_Config+0x15c>)
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007fea:	4b30      	ldr	r3, [pc, #192]	; (80080ac <RCCEx_PLL3_Config+0x15c>)
 8007fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	695b      	ldr	r3, [r3, #20]
 8007ff6:	492d      	ldr	r1, [pc, #180]	; (80080ac <RCCEx_PLL3_Config+0x15c>)
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007ffc:	4b2b      	ldr	r3, [pc, #172]	; (80080ac <RCCEx_PLL3_Config+0x15c>)
 8007ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008000:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	699b      	ldr	r3, [r3, #24]
 8008008:	4928      	ldr	r1, [pc, #160]	; (80080ac <RCCEx_PLL3_Config+0x15c>)
 800800a:	4313      	orrs	r3, r2
 800800c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800800e:	4b27      	ldr	r3, [pc, #156]	; (80080ac <RCCEx_PLL3_Config+0x15c>)
 8008010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008012:	4a26      	ldr	r2, [pc, #152]	; (80080ac <RCCEx_PLL3_Config+0x15c>)
 8008014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008018:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800801a:	4b24      	ldr	r3, [pc, #144]	; (80080ac <RCCEx_PLL3_Config+0x15c>)
 800801c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800801e:	4b24      	ldr	r3, [pc, #144]	; (80080b0 <RCCEx_PLL3_Config+0x160>)
 8008020:	4013      	ands	r3, r2
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	69d2      	ldr	r2, [r2, #28]
 8008026:	00d2      	lsls	r2, r2, #3
 8008028:	4920      	ldr	r1, [pc, #128]	; (80080ac <RCCEx_PLL3_Config+0x15c>)
 800802a:	4313      	orrs	r3, r2
 800802c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800802e:	4b1f      	ldr	r3, [pc, #124]	; (80080ac <RCCEx_PLL3_Config+0x15c>)
 8008030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008032:	4a1e      	ldr	r2, [pc, #120]	; (80080ac <RCCEx_PLL3_Config+0x15c>)
 8008034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008038:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d106      	bne.n	800804e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008040:	4b1a      	ldr	r3, [pc, #104]	; (80080ac <RCCEx_PLL3_Config+0x15c>)
 8008042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008044:	4a19      	ldr	r2, [pc, #100]	; (80080ac <RCCEx_PLL3_Config+0x15c>)
 8008046:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800804a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800804c:	e00f      	b.n	800806e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	2b01      	cmp	r3, #1
 8008052:	d106      	bne.n	8008062 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008054:	4b15      	ldr	r3, [pc, #84]	; (80080ac <RCCEx_PLL3_Config+0x15c>)
 8008056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008058:	4a14      	ldr	r2, [pc, #80]	; (80080ac <RCCEx_PLL3_Config+0x15c>)
 800805a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800805e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008060:	e005      	b.n	800806e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008062:	4b12      	ldr	r3, [pc, #72]	; (80080ac <RCCEx_PLL3_Config+0x15c>)
 8008064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008066:	4a11      	ldr	r2, [pc, #68]	; (80080ac <RCCEx_PLL3_Config+0x15c>)
 8008068:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800806c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800806e:	4b0f      	ldr	r3, [pc, #60]	; (80080ac <RCCEx_PLL3_Config+0x15c>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a0e      	ldr	r2, [pc, #56]	; (80080ac <RCCEx_PLL3_Config+0x15c>)
 8008074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008078:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800807a:	f7f9 f961 	bl	8001340 <HAL_GetTick>
 800807e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008080:	e008      	b.n	8008094 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008082:	f7f9 f95d 	bl	8001340 <HAL_GetTick>
 8008086:	4602      	mov	r2, r0
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	1ad3      	subs	r3, r2, r3
 800808c:	2b02      	cmp	r3, #2
 800808e:	d901      	bls.n	8008094 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008090:	2303      	movs	r3, #3
 8008092:	e006      	b.n	80080a2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008094:	4b05      	ldr	r3, [pc, #20]	; (80080ac <RCCEx_PLL3_Config+0x15c>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800809c:	2b00      	cmp	r3, #0
 800809e:	d0f0      	beq.n	8008082 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80080a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	58024400 	.word	0x58024400
 80080b0:	ffff0007 	.word	0xffff0007

080080b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d101      	bne.n	80080c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e049      	b.n	800815a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d106      	bne.n	80080e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f7f8 ff56 	bl	8000f8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2202      	movs	r2, #2
 80080e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	3304      	adds	r3, #4
 80080f0:	4619      	mov	r1, r3
 80080f2:	4610      	mov	r0, r2
 80080f4:	f000 f864 	bl	80081c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2201      	movs	r2, #1
 8008144:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2201      	movs	r2, #1
 8008154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
	...

08008164 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008172:	b2db      	uxtb	r3, r3
 8008174:	2b01      	cmp	r3, #1
 8008176:	d001      	beq.n	800817c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	e019      	b.n	80081b0 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2202      	movs	r2, #2
 8008180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	689a      	ldr	r2, [r3, #8]
 800818a:	4b0c      	ldr	r3, [pc, #48]	; (80081bc <HAL_TIM_Base_Start+0x58>)
 800818c:	4013      	ands	r3, r2
 800818e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2b06      	cmp	r3, #6
 8008194:	d00b      	beq.n	80081ae <HAL_TIM_Base_Start+0x4a>
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800819c:	d007      	beq.n	80081ae <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f042 0201 	orr.w	r2, r2, #1
 80081ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3714      	adds	r7, #20
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr
 80081bc:	00010007 	.word	0x00010007

080081c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b085      	sub	sp, #20
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	4a40      	ldr	r2, [pc, #256]	; (80082d4 <TIM_Base_SetConfig+0x114>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d013      	beq.n	8008200 <TIM_Base_SetConfig+0x40>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081de:	d00f      	beq.n	8008200 <TIM_Base_SetConfig+0x40>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	4a3d      	ldr	r2, [pc, #244]	; (80082d8 <TIM_Base_SetConfig+0x118>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d00b      	beq.n	8008200 <TIM_Base_SetConfig+0x40>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4a3c      	ldr	r2, [pc, #240]	; (80082dc <TIM_Base_SetConfig+0x11c>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d007      	beq.n	8008200 <TIM_Base_SetConfig+0x40>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a3b      	ldr	r2, [pc, #236]	; (80082e0 <TIM_Base_SetConfig+0x120>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d003      	beq.n	8008200 <TIM_Base_SetConfig+0x40>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a3a      	ldr	r2, [pc, #232]	; (80082e4 <TIM_Base_SetConfig+0x124>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d108      	bne.n	8008212 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008206:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	68fa      	ldr	r2, [r7, #12]
 800820e:	4313      	orrs	r3, r2
 8008210:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4a2f      	ldr	r2, [pc, #188]	; (80082d4 <TIM_Base_SetConfig+0x114>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d01f      	beq.n	800825a <TIM_Base_SetConfig+0x9a>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008220:	d01b      	beq.n	800825a <TIM_Base_SetConfig+0x9a>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4a2c      	ldr	r2, [pc, #176]	; (80082d8 <TIM_Base_SetConfig+0x118>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d017      	beq.n	800825a <TIM_Base_SetConfig+0x9a>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4a2b      	ldr	r2, [pc, #172]	; (80082dc <TIM_Base_SetConfig+0x11c>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d013      	beq.n	800825a <TIM_Base_SetConfig+0x9a>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4a2a      	ldr	r2, [pc, #168]	; (80082e0 <TIM_Base_SetConfig+0x120>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d00f      	beq.n	800825a <TIM_Base_SetConfig+0x9a>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a29      	ldr	r2, [pc, #164]	; (80082e4 <TIM_Base_SetConfig+0x124>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d00b      	beq.n	800825a <TIM_Base_SetConfig+0x9a>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4a28      	ldr	r2, [pc, #160]	; (80082e8 <TIM_Base_SetConfig+0x128>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d007      	beq.n	800825a <TIM_Base_SetConfig+0x9a>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4a27      	ldr	r2, [pc, #156]	; (80082ec <TIM_Base_SetConfig+0x12c>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d003      	beq.n	800825a <TIM_Base_SetConfig+0x9a>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4a26      	ldr	r2, [pc, #152]	; (80082f0 <TIM_Base_SetConfig+0x130>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d108      	bne.n	800826c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008260:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	68fa      	ldr	r2, [r7, #12]
 8008268:	4313      	orrs	r3, r2
 800826a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	695b      	ldr	r3, [r3, #20]
 8008276:	4313      	orrs	r3, r2
 8008278:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	68fa      	ldr	r2, [r7, #12]
 800827e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	689a      	ldr	r2, [r3, #8]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	4a10      	ldr	r2, [pc, #64]	; (80082d4 <TIM_Base_SetConfig+0x114>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d00f      	beq.n	80082b8 <TIM_Base_SetConfig+0xf8>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	4a12      	ldr	r2, [pc, #72]	; (80082e4 <TIM_Base_SetConfig+0x124>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d00b      	beq.n	80082b8 <TIM_Base_SetConfig+0xf8>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	4a11      	ldr	r2, [pc, #68]	; (80082e8 <TIM_Base_SetConfig+0x128>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d007      	beq.n	80082b8 <TIM_Base_SetConfig+0xf8>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	4a10      	ldr	r2, [pc, #64]	; (80082ec <TIM_Base_SetConfig+0x12c>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d003      	beq.n	80082b8 <TIM_Base_SetConfig+0xf8>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	4a0f      	ldr	r2, [pc, #60]	; (80082f0 <TIM_Base_SetConfig+0x130>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d103      	bne.n	80082c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	691a      	ldr	r2, [r3, #16]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	615a      	str	r2, [r3, #20]
}
 80082c6:	bf00      	nop
 80082c8:	3714      	adds	r7, #20
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop
 80082d4:	40010000 	.word	0x40010000
 80082d8:	40000400 	.word	0x40000400
 80082dc:	40000800 	.word	0x40000800
 80082e0:	40000c00 	.word	0x40000c00
 80082e4:	40010400 	.word	0x40010400
 80082e8:	40014000 	.word	0x40014000
 80082ec:	40014400 	.word	0x40014400
 80082f0:	40014800 	.word	0x40014800

080082f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b085      	sub	sp, #20
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008304:	2b01      	cmp	r3, #1
 8008306:	d101      	bne.n	800830c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008308:	2302      	movs	r3, #2
 800830a:	e068      	b.n	80083de <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2202      	movs	r2, #2
 8008318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a2e      	ldr	r2, [pc, #184]	; (80083ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d004      	beq.n	8008340 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a2d      	ldr	r2, [pc, #180]	; (80083f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d108      	bne.n	8008352 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008346:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	4313      	orrs	r3, r2
 8008350:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008358:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68fa      	ldr	r2, [r7, #12]
 8008360:	4313      	orrs	r3, r2
 8008362:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a1e      	ldr	r2, [pc, #120]	; (80083ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d01d      	beq.n	80083b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800837e:	d018      	beq.n	80083b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a1b      	ldr	r2, [pc, #108]	; (80083f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d013      	beq.n	80083b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a1a      	ldr	r2, [pc, #104]	; (80083f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d00e      	beq.n	80083b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a18      	ldr	r2, [pc, #96]	; (80083fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d009      	beq.n	80083b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a13      	ldr	r2, [pc, #76]	; (80083f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d004      	beq.n	80083b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a14      	ldr	r2, [pc, #80]	; (8008400 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d10c      	bne.n	80083cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	68ba      	ldr	r2, [r7, #8]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	68ba      	ldr	r2, [r7, #8]
 80083ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083dc:	2300      	movs	r3, #0
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3714      	adds	r7, #20
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop
 80083ec:	40010000 	.word	0x40010000
 80083f0:	40010400 	.word	0x40010400
 80083f4:	40000400 	.word	0x40000400
 80083f8:	40000800 	.word	0x40000800
 80083fc:	40000c00 	.word	0x40000c00
 8008400:	40001800 	.word	0x40001800

08008404 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d101      	bne.n	8008416 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008412:	2301      	movs	r3, #1
 8008414:	e042      	b.n	800849c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800841c:	2b00      	cmp	r3, #0
 800841e:	d106      	bne.n	800842e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f7f8 fdd1 	bl	8000fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2224      	movs	r2, #36	; 0x24
 8008432:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f022 0201 	bic.w	r2, r2, #1
 8008444:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 f82c 	bl	80084a4 <UART_SetConfig>
 800844c:	4603      	mov	r3, r0
 800844e:	2b01      	cmp	r3, #1
 8008450:	d101      	bne.n	8008456 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	e022      	b.n	800849c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800845a:	2b00      	cmp	r3, #0
 800845c:	d002      	beq.n	8008464 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 fecc 	bl	80091fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	685a      	ldr	r2, [r3, #4]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008472:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	689a      	ldr	r2, [r3, #8]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008482:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f042 0201 	orr.w	r2, r2, #1
 8008492:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 ff53 	bl	8009340 <UART_CheckIdleState>
 800849a:	4603      	mov	r3, r0
}
 800849c:	4618      	mov	r0, r3
 800849e:	3708      	adds	r7, #8
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084a4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80084a8:	b08e      	sub	sp, #56	; 0x38
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80084ae:	2300      	movs	r3, #0
 80084b0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	689a      	ldr	r2, [r3, #8]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	431a      	orrs	r2, r3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	695b      	ldr	r3, [r3, #20]
 80084c2:	431a      	orrs	r2, r3
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	69db      	ldr	r3, [r3, #28]
 80084c8:	4313      	orrs	r3, r2
 80084ca:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084d2:	4313      	orrs	r3, r2
 80084d4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	4bc1      	ldr	r3, [pc, #772]	; (80087e4 <UART_SetConfig+0x340>)
 80084de:	4013      	ands	r3, r2
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	6812      	ldr	r2, [r2, #0]
 80084e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80084e6:	430b      	orrs	r3, r1
 80084e8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	68da      	ldr	r2, [r3, #12]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	430a      	orrs	r2, r1
 80084fe:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	699b      	ldr	r3, [r3, #24]
 8008504:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4ab7      	ldr	r2, [pc, #732]	; (80087e8 <UART_SetConfig+0x344>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d004      	beq.n	800851a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6a1b      	ldr	r3, [r3, #32]
 8008514:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008516:	4313      	orrs	r3, r2
 8008518:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	689a      	ldr	r2, [r3, #8]
 8008520:	4bb2      	ldr	r3, [pc, #712]	; (80087ec <UART_SetConfig+0x348>)
 8008522:	4013      	ands	r3, r2
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	6812      	ldr	r2, [r2, #0]
 8008528:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800852a:	430b      	orrs	r3, r1
 800852c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008534:	f023 010f 	bic.w	r1, r3, #15
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	430a      	orrs	r2, r1
 8008542:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4aa9      	ldr	r2, [pc, #676]	; (80087f0 <UART_SetConfig+0x34c>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d177      	bne.n	800863e <UART_SetConfig+0x19a>
 800854e:	4ba9      	ldr	r3, [pc, #676]	; (80087f4 <UART_SetConfig+0x350>)
 8008550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008552:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008556:	2b28      	cmp	r3, #40	; 0x28
 8008558:	d86c      	bhi.n	8008634 <UART_SetConfig+0x190>
 800855a:	a201      	add	r2, pc, #4	; (adr r2, 8008560 <UART_SetConfig+0xbc>)
 800855c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008560:	08008605 	.word	0x08008605
 8008564:	08008635 	.word	0x08008635
 8008568:	08008635 	.word	0x08008635
 800856c:	08008635 	.word	0x08008635
 8008570:	08008635 	.word	0x08008635
 8008574:	08008635 	.word	0x08008635
 8008578:	08008635 	.word	0x08008635
 800857c:	08008635 	.word	0x08008635
 8008580:	0800860d 	.word	0x0800860d
 8008584:	08008635 	.word	0x08008635
 8008588:	08008635 	.word	0x08008635
 800858c:	08008635 	.word	0x08008635
 8008590:	08008635 	.word	0x08008635
 8008594:	08008635 	.word	0x08008635
 8008598:	08008635 	.word	0x08008635
 800859c:	08008635 	.word	0x08008635
 80085a0:	08008615 	.word	0x08008615
 80085a4:	08008635 	.word	0x08008635
 80085a8:	08008635 	.word	0x08008635
 80085ac:	08008635 	.word	0x08008635
 80085b0:	08008635 	.word	0x08008635
 80085b4:	08008635 	.word	0x08008635
 80085b8:	08008635 	.word	0x08008635
 80085bc:	08008635 	.word	0x08008635
 80085c0:	0800861d 	.word	0x0800861d
 80085c4:	08008635 	.word	0x08008635
 80085c8:	08008635 	.word	0x08008635
 80085cc:	08008635 	.word	0x08008635
 80085d0:	08008635 	.word	0x08008635
 80085d4:	08008635 	.word	0x08008635
 80085d8:	08008635 	.word	0x08008635
 80085dc:	08008635 	.word	0x08008635
 80085e0:	08008625 	.word	0x08008625
 80085e4:	08008635 	.word	0x08008635
 80085e8:	08008635 	.word	0x08008635
 80085ec:	08008635 	.word	0x08008635
 80085f0:	08008635 	.word	0x08008635
 80085f4:	08008635 	.word	0x08008635
 80085f8:	08008635 	.word	0x08008635
 80085fc:	08008635 	.word	0x08008635
 8008600:	0800862d 	.word	0x0800862d
 8008604:	2301      	movs	r3, #1
 8008606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800860a:	e339      	b.n	8008c80 <UART_SetConfig+0x7dc>
 800860c:	2304      	movs	r3, #4
 800860e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008612:	e335      	b.n	8008c80 <UART_SetConfig+0x7dc>
 8008614:	2308      	movs	r3, #8
 8008616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800861a:	e331      	b.n	8008c80 <UART_SetConfig+0x7dc>
 800861c:	2310      	movs	r3, #16
 800861e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008622:	e32d      	b.n	8008c80 <UART_SetConfig+0x7dc>
 8008624:	2320      	movs	r3, #32
 8008626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800862a:	e329      	b.n	8008c80 <UART_SetConfig+0x7dc>
 800862c:	2340      	movs	r3, #64	; 0x40
 800862e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008632:	e325      	b.n	8008c80 <UART_SetConfig+0x7dc>
 8008634:	2380      	movs	r3, #128	; 0x80
 8008636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800863a:	bf00      	nop
 800863c:	e320      	b.n	8008c80 <UART_SetConfig+0x7dc>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a6d      	ldr	r2, [pc, #436]	; (80087f8 <UART_SetConfig+0x354>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d132      	bne.n	80086ae <UART_SetConfig+0x20a>
 8008648:	4b6a      	ldr	r3, [pc, #424]	; (80087f4 <UART_SetConfig+0x350>)
 800864a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800864c:	f003 0307 	and.w	r3, r3, #7
 8008650:	2b05      	cmp	r3, #5
 8008652:	d827      	bhi.n	80086a4 <UART_SetConfig+0x200>
 8008654:	a201      	add	r2, pc, #4	; (adr r2, 800865c <UART_SetConfig+0x1b8>)
 8008656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800865a:	bf00      	nop
 800865c:	08008675 	.word	0x08008675
 8008660:	0800867d 	.word	0x0800867d
 8008664:	08008685 	.word	0x08008685
 8008668:	0800868d 	.word	0x0800868d
 800866c:	08008695 	.word	0x08008695
 8008670:	0800869d 	.word	0x0800869d
 8008674:	2300      	movs	r3, #0
 8008676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800867a:	e301      	b.n	8008c80 <UART_SetConfig+0x7dc>
 800867c:	2304      	movs	r3, #4
 800867e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008682:	e2fd      	b.n	8008c80 <UART_SetConfig+0x7dc>
 8008684:	2308      	movs	r3, #8
 8008686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800868a:	e2f9      	b.n	8008c80 <UART_SetConfig+0x7dc>
 800868c:	2310      	movs	r3, #16
 800868e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008692:	e2f5      	b.n	8008c80 <UART_SetConfig+0x7dc>
 8008694:	2320      	movs	r3, #32
 8008696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800869a:	e2f1      	b.n	8008c80 <UART_SetConfig+0x7dc>
 800869c:	2340      	movs	r3, #64	; 0x40
 800869e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086a2:	e2ed      	b.n	8008c80 <UART_SetConfig+0x7dc>
 80086a4:	2380      	movs	r3, #128	; 0x80
 80086a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086aa:	bf00      	nop
 80086ac:	e2e8      	b.n	8008c80 <UART_SetConfig+0x7dc>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a52      	ldr	r2, [pc, #328]	; (80087fc <UART_SetConfig+0x358>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d132      	bne.n	800871e <UART_SetConfig+0x27a>
 80086b8:	4b4e      	ldr	r3, [pc, #312]	; (80087f4 <UART_SetConfig+0x350>)
 80086ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086bc:	f003 0307 	and.w	r3, r3, #7
 80086c0:	2b05      	cmp	r3, #5
 80086c2:	d827      	bhi.n	8008714 <UART_SetConfig+0x270>
 80086c4:	a201      	add	r2, pc, #4	; (adr r2, 80086cc <UART_SetConfig+0x228>)
 80086c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ca:	bf00      	nop
 80086cc:	080086e5 	.word	0x080086e5
 80086d0:	080086ed 	.word	0x080086ed
 80086d4:	080086f5 	.word	0x080086f5
 80086d8:	080086fd 	.word	0x080086fd
 80086dc:	08008705 	.word	0x08008705
 80086e0:	0800870d 	.word	0x0800870d
 80086e4:	2300      	movs	r3, #0
 80086e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086ea:	e2c9      	b.n	8008c80 <UART_SetConfig+0x7dc>
 80086ec:	2304      	movs	r3, #4
 80086ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086f2:	e2c5      	b.n	8008c80 <UART_SetConfig+0x7dc>
 80086f4:	2308      	movs	r3, #8
 80086f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086fa:	e2c1      	b.n	8008c80 <UART_SetConfig+0x7dc>
 80086fc:	2310      	movs	r3, #16
 80086fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008702:	e2bd      	b.n	8008c80 <UART_SetConfig+0x7dc>
 8008704:	2320      	movs	r3, #32
 8008706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800870a:	e2b9      	b.n	8008c80 <UART_SetConfig+0x7dc>
 800870c:	2340      	movs	r3, #64	; 0x40
 800870e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008712:	e2b5      	b.n	8008c80 <UART_SetConfig+0x7dc>
 8008714:	2380      	movs	r3, #128	; 0x80
 8008716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800871a:	bf00      	nop
 800871c:	e2b0      	b.n	8008c80 <UART_SetConfig+0x7dc>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a37      	ldr	r2, [pc, #220]	; (8008800 <UART_SetConfig+0x35c>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d132      	bne.n	800878e <UART_SetConfig+0x2ea>
 8008728:	4b32      	ldr	r3, [pc, #200]	; (80087f4 <UART_SetConfig+0x350>)
 800872a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800872c:	f003 0307 	and.w	r3, r3, #7
 8008730:	2b05      	cmp	r3, #5
 8008732:	d827      	bhi.n	8008784 <UART_SetConfig+0x2e0>
 8008734:	a201      	add	r2, pc, #4	; (adr r2, 800873c <UART_SetConfig+0x298>)
 8008736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800873a:	bf00      	nop
 800873c:	08008755 	.word	0x08008755
 8008740:	0800875d 	.word	0x0800875d
 8008744:	08008765 	.word	0x08008765
 8008748:	0800876d 	.word	0x0800876d
 800874c:	08008775 	.word	0x08008775
 8008750:	0800877d 	.word	0x0800877d
 8008754:	2300      	movs	r3, #0
 8008756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800875a:	e291      	b.n	8008c80 <UART_SetConfig+0x7dc>
 800875c:	2304      	movs	r3, #4
 800875e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008762:	e28d      	b.n	8008c80 <UART_SetConfig+0x7dc>
 8008764:	2308      	movs	r3, #8
 8008766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800876a:	e289      	b.n	8008c80 <UART_SetConfig+0x7dc>
 800876c:	2310      	movs	r3, #16
 800876e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008772:	e285      	b.n	8008c80 <UART_SetConfig+0x7dc>
 8008774:	2320      	movs	r3, #32
 8008776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800877a:	e281      	b.n	8008c80 <UART_SetConfig+0x7dc>
 800877c:	2340      	movs	r3, #64	; 0x40
 800877e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008782:	e27d      	b.n	8008c80 <UART_SetConfig+0x7dc>
 8008784:	2380      	movs	r3, #128	; 0x80
 8008786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800878a:	bf00      	nop
 800878c:	e278      	b.n	8008c80 <UART_SetConfig+0x7dc>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a1c      	ldr	r2, [pc, #112]	; (8008804 <UART_SetConfig+0x360>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d144      	bne.n	8008822 <UART_SetConfig+0x37e>
 8008798:	4b16      	ldr	r3, [pc, #88]	; (80087f4 <UART_SetConfig+0x350>)
 800879a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800879c:	f003 0307 	and.w	r3, r3, #7
 80087a0:	2b05      	cmp	r3, #5
 80087a2:	d839      	bhi.n	8008818 <UART_SetConfig+0x374>
 80087a4:	a201      	add	r2, pc, #4	; (adr r2, 80087ac <UART_SetConfig+0x308>)
 80087a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087aa:	bf00      	nop
 80087ac:	080087c5 	.word	0x080087c5
 80087b0:	080087cd 	.word	0x080087cd
 80087b4:	080087d5 	.word	0x080087d5
 80087b8:	080087dd 	.word	0x080087dd
 80087bc:	08008809 	.word	0x08008809
 80087c0:	08008811 	.word	0x08008811
 80087c4:	2300      	movs	r3, #0
 80087c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087ca:	e259      	b.n	8008c80 <UART_SetConfig+0x7dc>
 80087cc:	2304      	movs	r3, #4
 80087ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087d2:	e255      	b.n	8008c80 <UART_SetConfig+0x7dc>
 80087d4:	2308      	movs	r3, #8
 80087d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087da:	e251      	b.n	8008c80 <UART_SetConfig+0x7dc>
 80087dc:	2310      	movs	r3, #16
 80087de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087e2:	e24d      	b.n	8008c80 <UART_SetConfig+0x7dc>
 80087e4:	cfff69f3 	.word	0xcfff69f3
 80087e8:	58000c00 	.word	0x58000c00
 80087ec:	11fff4ff 	.word	0x11fff4ff
 80087f0:	40011000 	.word	0x40011000
 80087f4:	58024400 	.word	0x58024400
 80087f8:	40004400 	.word	0x40004400
 80087fc:	40004800 	.word	0x40004800
 8008800:	40004c00 	.word	0x40004c00
 8008804:	40005000 	.word	0x40005000
 8008808:	2320      	movs	r3, #32
 800880a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800880e:	e237      	b.n	8008c80 <UART_SetConfig+0x7dc>
 8008810:	2340      	movs	r3, #64	; 0x40
 8008812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008816:	e233      	b.n	8008c80 <UART_SetConfig+0x7dc>
 8008818:	2380      	movs	r3, #128	; 0x80
 800881a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800881e:	bf00      	nop
 8008820:	e22e      	b.n	8008c80 <UART_SetConfig+0x7dc>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4ab5      	ldr	r2, [pc, #724]	; (8008afc <UART_SetConfig+0x658>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d178      	bne.n	800891e <UART_SetConfig+0x47a>
 800882c:	4bb4      	ldr	r3, [pc, #720]	; (8008b00 <UART_SetConfig+0x65c>)
 800882e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008830:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008834:	2b28      	cmp	r3, #40	; 0x28
 8008836:	d86d      	bhi.n	8008914 <UART_SetConfig+0x470>
 8008838:	a201      	add	r2, pc, #4	; (adr r2, 8008840 <UART_SetConfig+0x39c>)
 800883a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883e:	bf00      	nop
 8008840:	080088e5 	.word	0x080088e5
 8008844:	08008915 	.word	0x08008915
 8008848:	08008915 	.word	0x08008915
 800884c:	08008915 	.word	0x08008915
 8008850:	08008915 	.word	0x08008915
 8008854:	08008915 	.word	0x08008915
 8008858:	08008915 	.word	0x08008915
 800885c:	08008915 	.word	0x08008915
 8008860:	080088ed 	.word	0x080088ed
 8008864:	08008915 	.word	0x08008915
 8008868:	08008915 	.word	0x08008915
 800886c:	08008915 	.word	0x08008915
 8008870:	08008915 	.word	0x08008915
 8008874:	08008915 	.word	0x08008915
 8008878:	08008915 	.word	0x08008915
 800887c:	08008915 	.word	0x08008915
 8008880:	080088f5 	.word	0x080088f5
 8008884:	08008915 	.word	0x08008915
 8008888:	08008915 	.word	0x08008915
 800888c:	08008915 	.word	0x08008915
 8008890:	08008915 	.word	0x08008915
 8008894:	08008915 	.word	0x08008915
 8008898:	08008915 	.word	0x08008915
 800889c:	08008915 	.word	0x08008915
 80088a0:	080088fd 	.word	0x080088fd
 80088a4:	08008915 	.word	0x08008915
 80088a8:	08008915 	.word	0x08008915
 80088ac:	08008915 	.word	0x08008915
 80088b0:	08008915 	.word	0x08008915
 80088b4:	08008915 	.word	0x08008915
 80088b8:	08008915 	.word	0x08008915
 80088bc:	08008915 	.word	0x08008915
 80088c0:	08008905 	.word	0x08008905
 80088c4:	08008915 	.word	0x08008915
 80088c8:	08008915 	.word	0x08008915
 80088cc:	08008915 	.word	0x08008915
 80088d0:	08008915 	.word	0x08008915
 80088d4:	08008915 	.word	0x08008915
 80088d8:	08008915 	.word	0x08008915
 80088dc:	08008915 	.word	0x08008915
 80088e0:	0800890d 	.word	0x0800890d
 80088e4:	2301      	movs	r3, #1
 80088e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088ea:	e1c9      	b.n	8008c80 <UART_SetConfig+0x7dc>
 80088ec:	2304      	movs	r3, #4
 80088ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088f2:	e1c5      	b.n	8008c80 <UART_SetConfig+0x7dc>
 80088f4:	2308      	movs	r3, #8
 80088f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088fa:	e1c1      	b.n	8008c80 <UART_SetConfig+0x7dc>
 80088fc:	2310      	movs	r3, #16
 80088fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008902:	e1bd      	b.n	8008c80 <UART_SetConfig+0x7dc>
 8008904:	2320      	movs	r3, #32
 8008906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800890a:	e1b9      	b.n	8008c80 <UART_SetConfig+0x7dc>
 800890c:	2340      	movs	r3, #64	; 0x40
 800890e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008912:	e1b5      	b.n	8008c80 <UART_SetConfig+0x7dc>
 8008914:	2380      	movs	r3, #128	; 0x80
 8008916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800891a:	bf00      	nop
 800891c:	e1b0      	b.n	8008c80 <UART_SetConfig+0x7dc>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a78      	ldr	r2, [pc, #480]	; (8008b04 <UART_SetConfig+0x660>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d132      	bne.n	800898e <UART_SetConfig+0x4ea>
 8008928:	4b75      	ldr	r3, [pc, #468]	; (8008b00 <UART_SetConfig+0x65c>)
 800892a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800892c:	f003 0307 	and.w	r3, r3, #7
 8008930:	2b05      	cmp	r3, #5
 8008932:	d827      	bhi.n	8008984 <UART_SetConfig+0x4e0>
 8008934:	a201      	add	r2, pc, #4	; (adr r2, 800893c <UART_SetConfig+0x498>)
 8008936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800893a:	bf00      	nop
 800893c:	08008955 	.word	0x08008955
 8008940:	0800895d 	.word	0x0800895d
 8008944:	08008965 	.word	0x08008965
 8008948:	0800896d 	.word	0x0800896d
 800894c:	08008975 	.word	0x08008975
 8008950:	0800897d 	.word	0x0800897d
 8008954:	2300      	movs	r3, #0
 8008956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800895a:	e191      	b.n	8008c80 <UART_SetConfig+0x7dc>
 800895c:	2304      	movs	r3, #4
 800895e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008962:	e18d      	b.n	8008c80 <UART_SetConfig+0x7dc>
 8008964:	2308      	movs	r3, #8
 8008966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800896a:	e189      	b.n	8008c80 <UART_SetConfig+0x7dc>
 800896c:	2310      	movs	r3, #16
 800896e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008972:	e185      	b.n	8008c80 <UART_SetConfig+0x7dc>
 8008974:	2320      	movs	r3, #32
 8008976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800897a:	e181      	b.n	8008c80 <UART_SetConfig+0x7dc>
 800897c:	2340      	movs	r3, #64	; 0x40
 800897e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008982:	e17d      	b.n	8008c80 <UART_SetConfig+0x7dc>
 8008984:	2380      	movs	r3, #128	; 0x80
 8008986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800898a:	bf00      	nop
 800898c:	e178      	b.n	8008c80 <UART_SetConfig+0x7dc>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a5d      	ldr	r2, [pc, #372]	; (8008b08 <UART_SetConfig+0x664>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d132      	bne.n	80089fe <UART_SetConfig+0x55a>
 8008998:	4b59      	ldr	r3, [pc, #356]	; (8008b00 <UART_SetConfig+0x65c>)
 800899a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800899c:	f003 0307 	and.w	r3, r3, #7
 80089a0:	2b05      	cmp	r3, #5
 80089a2:	d827      	bhi.n	80089f4 <UART_SetConfig+0x550>
 80089a4:	a201      	add	r2, pc, #4	; (adr r2, 80089ac <UART_SetConfig+0x508>)
 80089a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089aa:	bf00      	nop
 80089ac:	080089c5 	.word	0x080089c5
 80089b0:	080089cd 	.word	0x080089cd
 80089b4:	080089d5 	.word	0x080089d5
 80089b8:	080089dd 	.word	0x080089dd
 80089bc:	080089e5 	.word	0x080089e5
 80089c0:	080089ed 	.word	0x080089ed
 80089c4:	2300      	movs	r3, #0
 80089c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089ca:	e159      	b.n	8008c80 <UART_SetConfig+0x7dc>
 80089cc:	2304      	movs	r3, #4
 80089ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089d2:	e155      	b.n	8008c80 <UART_SetConfig+0x7dc>
 80089d4:	2308      	movs	r3, #8
 80089d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089da:	e151      	b.n	8008c80 <UART_SetConfig+0x7dc>
 80089dc:	2310      	movs	r3, #16
 80089de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089e2:	e14d      	b.n	8008c80 <UART_SetConfig+0x7dc>
 80089e4:	2320      	movs	r3, #32
 80089e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089ea:	e149      	b.n	8008c80 <UART_SetConfig+0x7dc>
 80089ec:	2340      	movs	r3, #64	; 0x40
 80089ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089f2:	e145      	b.n	8008c80 <UART_SetConfig+0x7dc>
 80089f4:	2380      	movs	r3, #128	; 0x80
 80089f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089fa:	bf00      	nop
 80089fc:	e140      	b.n	8008c80 <UART_SetConfig+0x7dc>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a42      	ldr	r2, [pc, #264]	; (8008b0c <UART_SetConfig+0x668>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	f040 8083 	bne.w	8008b10 <UART_SetConfig+0x66c>
 8008a0a:	4b3d      	ldr	r3, [pc, #244]	; (8008b00 <UART_SetConfig+0x65c>)
 8008a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a12:	2b28      	cmp	r3, #40	; 0x28
 8008a14:	d86c      	bhi.n	8008af0 <UART_SetConfig+0x64c>
 8008a16:	a201      	add	r2, pc, #4	; (adr r2, 8008a1c <UART_SetConfig+0x578>)
 8008a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a1c:	08008ac1 	.word	0x08008ac1
 8008a20:	08008af1 	.word	0x08008af1
 8008a24:	08008af1 	.word	0x08008af1
 8008a28:	08008af1 	.word	0x08008af1
 8008a2c:	08008af1 	.word	0x08008af1
 8008a30:	08008af1 	.word	0x08008af1
 8008a34:	08008af1 	.word	0x08008af1
 8008a38:	08008af1 	.word	0x08008af1
 8008a3c:	08008ac9 	.word	0x08008ac9
 8008a40:	08008af1 	.word	0x08008af1
 8008a44:	08008af1 	.word	0x08008af1
 8008a48:	08008af1 	.word	0x08008af1
 8008a4c:	08008af1 	.word	0x08008af1
 8008a50:	08008af1 	.word	0x08008af1
 8008a54:	08008af1 	.word	0x08008af1
 8008a58:	08008af1 	.word	0x08008af1
 8008a5c:	08008ad1 	.word	0x08008ad1
 8008a60:	08008af1 	.word	0x08008af1
 8008a64:	08008af1 	.word	0x08008af1
 8008a68:	08008af1 	.word	0x08008af1
 8008a6c:	08008af1 	.word	0x08008af1
 8008a70:	08008af1 	.word	0x08008af1
 8008a74:	08008af1 	.word	0x08008af1
 8008a78:	08008af1 	.word	0x08008af1
 8008a7c:	08008ad9 	.word	0x08008ad9
 8008a80:	08008af1 	.word	0x08008af1
 8008a84:	08008af1 	.word	0x08008af1
 8008a88:	08008af1 	.word	0x08008af1
 8008a8c:	08008af1 	.word	0x08008af1
 8008a90:	08008af1 	.word	0x08008af1
 8008a94:	08008af1 	.word	0x08008af1
 8008a98:	08008af1 	.word	0x08008af1
 8008a9c:	08008ae1 	.word	0x08008ae1
 8008aa0:	08008af1 	.word	0x08008af1
 8008aa4:	08008af1 	.word	0x08008af1
 8008aa8:	08008af1 	.word	0x08008af1
 8008aac:	08008af1 	.word	0x08008af1
 8008ab0:	08008af1 	.word	0x08008af1
 8008ab4:	08008af1 	.word	0x08008af1
 8008ab8:	08008af1 	.word	0x08008af1
 8008abc:	08008ae9 	.word	0x08008ae9
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ac6:	e0db      	b.n	8008c80 <UART_SetConfig+0x7dc>
 8008ac8:	2304      	movs	r3, #4
 8008aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ace:	e0d7      	b.n	8008c80 <UART_SetConfig+0x7dc>
 8008ad0:	2308      	movs	r3, #8
 8008ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ad6:	e0d3      	b.n	8008c80 <UART_SetConfig+0x7dc>
 8008ad8:	2310      	movs	r3, #16
 8008ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ade:	e0cf      	b.n	8008c80 <UART_SetConfig+0x7dc>
 8008ae0:	2320      	movs	r3, #32
 8008ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ae6:	e0cb      	b.n	8008c80 <UART_SetConfig+0x7dc>
 8008ae8:	2340      	movs	r3, #64	; 0x40
 8008aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008aee:	e0c7      	b.n	8008c80 <UART_SetConfig+0x7dc>
 8008af0:	2380      	movs	r3, #128	; 0x80
 8008af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008af6:	bf00      	nop
 8008af8:	e0c2      	b.n	8008c80 <UART_SetConfig+0x7dc>
 8008afa:	bf00      	nop
 8008afc:	40011400 	.word	0x40011400
 8008b00:	58024400 	.word	0x58024400
 8008b04:	40007800 	.word	0x40007800
 8008b08:	40007c00 	.word	0x40007c00
 8008b0c:	40011800 	.word	0x40011800
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4ab2      	ldr	r2, [pc, #712]	; (8008de0 <UART_SetConfig+0x93c>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d177      	bne.n	8008c0a <UART_SetConfig+0x766>
 8008b1a:	4bb2      	ldr	r3, [pc, #712]	; (8008de4 <UART_SetConfig+0x940>)
 8008b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b22:	2b28      	cmp	r3, #40	; 0x28
 8008b24:	d86c      	bhi.n	8008c00 <UART_SetConfig+0x75c>
 8008b26:	a201      	add	r2, pc, #4	; (adr r2, 8008b2c <UART_SetConfig+0x688>)
 8008b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b2c:	08008bd1 	.word	0x08008bd1
 8008b30:	08008c01 	.word	0x08008c01
 8008b34:	08008c01 	.word	0x08008c01
 8008b38:	08008c01 	.word	0x08008c01
 8008b3c:	08008c01 	.word	0x08008c01
 8008b40:	08008c01 	.word	0x08008c01
 8008b44:	08008c01 	.word	0x08008c01
 8008b48:	08008c01 	.word	0x08008c01
 8008b4c:	08008bd9 	.word	0x08008bd9
 8008b50:	08008c01 	.word	0x08008c01
 8008b54:	08008c01 	.word	0x08008c01
 8008b58:	08008c01 	.word	0x08008c01
 8008b5c:	08008c01 	.word	0x08008c01
 8008b60:	08008c01 	.word	0x08008c01
 8008b64:	08008c01 	.word	0x08008c01
 8008b68:	08008c01 	.word	0x08008c01
 8008b6c:	08008be1 	.word	0x08008be1
 8008b70:	08008c01 	.word	0x08008c01
 8008b74:	08008c01 	.word	0x08008c01
 8008b78:	08008c01 	.word	0x08008c01
 8008b7c:	08008c01 	.word	0x08008c01
 8008b80:	08008c01 	.word	0x08008c01
 8008b84:	08008c01 	.word	0x08008c01
 8008b88:	08008c01 	.word	0x08008c01
 8008b8c:	08008be9 	.word	0x08008be9
 8008b90:	08008c01 	.word	0x08008c01
 8008b94:	08008c01 	.word	0x08008c01
 8008b98:	08008c01 	.word	0x08008c01
 8008b9c:	08008c01 	.word	0x08008c01
 8008ba0:	08008c01 	.word	0x08008c01
 8008ba4:	08008c01 	.word	0x08008c01
 8008ba8:	08008c01 	.word	0x08008c01
 8008bac:	08008bf1 	.word	0x08008bf1
 8008bb0:	08008c01 	.word	0x08008c01
 8008bb4:	08008c01 	.word	0x08008c01
 8008bb8:	08008c01 	.word	0x08008c01
 8008bbc:	08008c01 	.word	0x08008c01
 8008bc0:	08008c01 	.word	0x08008c01
 8008bc4:	08008c01 	.word	0x08008c01
 8008bc8:	08008c01 	.word	0x08008c01
 8008bcc:	08008bf9 	.word	0x08008bf9
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bd6:	e053      	b.n	8008c80 <UART_SetConfig+0x7dc>
 8008bd8:	2304      	movs	r3, #4
 8008bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bde:	e04f      	b.n	8008c80 <UART_SetConfig+0x7dc>
 8008be0:	2308      	movs	r3, #8
 8008be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008be6:	e04b      	b.n	8008c80 <UART_SetConfig+0x7dc>
 8008be8:	2310      	movs	r3, #16
 8008bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bee:	e047      	b.n	8008c80 <UART_SetConfig+0x7dc>
 8008bf0:	2320      	movs	r3, #32
 8008bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bf6:	e043      	b.n	8008c80 <UART_SetConfig+0x7dc>
 8008bf8:	2340      	movs	r3, #64	; 0x40
 8008bfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bfe:	e03f      	b.n	8008c80 <UART_SetConfig+0x7dc>
 8008c00:	2380      	movs	r3, #128	; 0x80
 8008c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c06:	bf00      	nop
 8008c08:	e03a      	b.n	8008c80 <UART_SetConfig+0x7dc>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a76      	ldr	r2, [pc, #472]	; (8008de8 <UART_SetConfig+0x944>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d132      	bne.n	8008c7a <UART_SetConfig+0x7d6>
 8008c14:	4b73      	ldr	r3, [pc, #460]	; (8008de4 <UART_SetConfig+0x940>)
 8008c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c18:	f003 0307 	and.w	r3, r3, #7
 8008c1c:	2b05      	cmp	r3, #5
 8008c1e:	d827      	bhi.n	8008c70 <UART_SetConfig+0x7cc>
 8008c20:	a201      	add	r2, pc, #4	; (adr r2, 8008c28 <UART_SetConfig+0x784>)
 8008c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c26:	bf00      	nop
 8008c28:	08008c41 	.word	0x08008c41
 8008c2c:	08008c49 	.word	0x08008c49
 8008c30:	08008c51 	.word	0x08008c51
 8008c34:	08008c59 	.word	0x08008c59
 8008c38:	08008c61 	.word	0x08008c61
 8008c3c:	08008c69 	.word	0x08008c69
 8008c40:	2302      	movs	r3, #2
 8008c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c46:	e01b      	b.n	8008c80 <UART_SetConfig+0x7dc>
 8008c48:	2304      	movs	r3, #4
 8008c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c4e:	e017      	b.n	8008c80 <UART_SetConfig+0x7dc>
 8008c50:	2308      	movs	r3, #8
 8008c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c56:	e013      	b.n	8008c80 <UART_SetConfig+0x7dc>
 8008c58:	2310      	movs	r3, #16
 8008c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c5e:	e00f      	b.n	8008c80 <UART_SetConfig+0x7dc>
 8008c60:	2320      	movs	r3, #32
 8008c62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c66:	e00b      	b.n	8008c80 <UART_SetConfig+0x7dc>
 8008c68:	2340      	movs	r3, #64	; 0x40
 8008c6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c6e:	e007      	b.n	8008c80 <UART_SetConfig+0x7dc>
 8008c70:	2380      	movs	r3, #128	; 0x80
 8008c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c76:	bf00      	nop
 8008c78:	e002      	b.n	8008c80 <UART_SetConfig+0x7dc>
 8008c7a:	2380      	movs	r3, #128	; 0x80
 8008c7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a58      	ldr	r2, [pc, #352]	; (8008de8 <UART_SetConfig+0x944>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	f040 80b6 	bne.w	8008df8 <UART_SetConfig+0x954>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008c8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008c90:	2b08      	cmp	r3, #8
 8008c92:	d019      	beq.n	8008cc8 <UART_SetConfig+0x824>
 8008c94:	2b08      	cmp	r3, #8
 8008c96:	dc04      	bgt.n	8008ca2 <UART_SetConfig+0x7fe>
 8008c98:	2b02      	cmp	r3, #2
 8008c9a:	d009      	beq.n	8008cb0 <UART_SetConfig+0x80c>
 8008c9c:	2b04      	cmp	r3, #4
 8008c9e:	d00b      	beq.n	8008cb8 <UART_SetConfig+0x814>
 8008ca0:	e034      	b.n	8008d0c <UART_SetConfig+0x868>
 8008ca2:	2b20      	cmp	r3, #32
 8008ca4:	d02b      	beq.n	8008cfe <UART_SetConfig+0x85a>
 8008ca6:	2b40      	cmp	r3, #64	; 0x40
 8008ca8:	d02c      	beq.n	8008d04 <UART_SetConfig+0x860>
 8008caa:	2b10      	cmp	r3, #16
 8008cac:	d014      	beq.n	8008cd8 <UART_SetConfig+0x834>
 8008cae:	e02d      	b.n	8008d0c <UART_SetConfig+0x868>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008cb0:	f7fe fca2 	bl	80075f8 <HAL_RCCEx_GetD3PCLK1Freq>
 8008cb4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008cb6:	e02f      	b.n	8008d18 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cb8:	f107 0314 	add.w	r3, r7, #20
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7fe fcb1 	bl	8007624 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008cc6:	e027      	b.n	8008d18 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cc8:	f107 0308 	add.w	r3, r7, #8
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7fe fdf5 	bl	80078bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008cd6:	e01f      	b.n	8008d18 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cd8:	4b42      	ldr	r3, [pc, #264]	; (8008de4 <UART_SetConfig+0x940>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f003 0320 	and.w	r3, r3, #32
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d009      	beq.n	8008cf8 <UART_SetConfig+0x854>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008ce4:	4b3f      	ldr	r3, [pc, #252]	; (8008de4 <UART_SetConfig+0x940>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	08db      	lsrs	r3, r3, #3
 8008cea:	f003 0303 	and.w	r3, r3, #3
 8008cee:	4a3f      	ldr	r2, [pc, #252]	; (8008dec <UART_SetConfig+0x948>)
 8008cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8008cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008cf6:	e00f      	b.n	8008d18 <UART_SetConfig+0x874>
          pclk = (uint32_t) HSI_VALUE;
 8008cf8:	4b3c      	ldr	r3, [pc, #240]	; (8008dec <UART_SetConfig+0x948>)
 8008cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008cfc:	e00c      	b.n	8008d18 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008cfe:	4b3c      	ldr	r3, [pc, #240]	; (8008df0 <UART_SetConfig+0x94c>)
 8008d00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008d02:	e009      	b.n	8008d18 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008d0a:	e005      	b.n	8008d18 <UART_SetConfig+0x874>
      default:
        pclk = 0U;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008d10:	2301      	movs	r3, #1
 8008d12:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008d16:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	f000 8251 	beq.w	80091c2 <UART_SetConfig+0xd1e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d24:	4a33      	ldr	r2, [pc, #204]	; (8008df4 <UART_SetConfig+0x950>)
 8008d26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d32:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	685a      	ldr	r2, [r3, #4]
 8008d38:	4613      	mov	r3, r2
 8008d3a:	005b      	lsls	r3, r3, #1
 8008d3c:	4413      	add	r3, r2
 8008d3e:	6a3a      	ldr	r2, [r7, #32]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d305      	bcc.n	8008d50 <UART_SetConfig+0x8ac>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d4a:	6a3a      	ldr	r2, [r7, #32]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d903      	bls.n	8008d58 <UART_SetConfig+0x8b4>
      {
        ret = HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008d56:	e234      	b.n	80091c2 <UART_SetConfig+0xd1e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f04f 0100 	mov.w	r1, #0
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d64:	4a23      	ldr	r2, [pc, #140]	; (8008df4 <UART_SetConfig+0x950>)
 8008d66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	f04f 0400 	mov.w	r4, #0
 8008d70:	461a      	mov	r2, r3
 8008d72:	4623      	mov	r3, r4
 8008d74:	f7f7 faba 	bl	80002ec <__aeabi_uldivmod>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	460c      	mov	r4, r1
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	4622      	mov	r2, r4
 8008d80:	f04f 0300 	mov.w	r3, #0
 8008d84:	f04f 0400 	mov.w	r4, #0
 8008d88:	0214      	lsls	r4, r2, #8
 8008d8a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008d8e:	020b      	lsls	r3, r1, #8
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	6852      	ldr	r2, [r2, #4]
 8008d94:	0852      	lsrs	r2, r2, #1
 8008d96:	4611      	mov	r1, r2
 8008d98:	f04f 0200 	mov.w	r2, #0
 8008d9c:	eb13 0b01 	adds.w	fp, r3, r1
 8008da0:	eb44 0c02 	adc.w	ip, r4, r2
 8008da4:	4658      	mov	r0, fp
 8008da6:	4661      	mov	r1, ip
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	f04f 0400 	mov.w	r4, #0
 8008db0:	461a      	mov	r2, r3
 8008db2:	4623      	mov	r3, r4
 8008db4:	f7f7 fa9a 	bl	80002ec <__aeabi_uldivmod>
 8008db8:	4603      	mov	r3, r0
 8008dba:	460c      	mov	r4, r1
 8008dbc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008dc4:	d308      	bcc.n	8008dd8 <UART_SetConfig+0x934>
 8008dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dcc:	d204      	bcs.n	8008dd8 <UART_SetConfig+0x934>
        {
          huart->Instance->BRR = usartdiv;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dd4:	60da      	str	r2, [r3, #12]
 8008dd6:	e1f4      	b.n	80091c2 <UART_SetConfig+0xd1e>
        }
        else
        {
          ret = HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008dde:	e1f0      	b.n	80091c2 <UART_SetConfig+0xd1e>
 8008de0:	40011c00 	.word	0x40011c00
 8008de4:	58024400 	.word	0x58024400
 8008de8:	58000c00 	.word	0x58000c00
 8008dec:	03d09000 	.word	0x03d09000
 8008df0:	003d0900 	.word	0x003d0900
 8008df4:	080097a4 	.word	0x080097a4
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	69db      	ldr	r3, [r3, #28]
 8008dfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e00:	f040 80f8 	bne.w	8008ff4 <UART_SetConfig+0xb50>
  {
    switch (clocksource)
 8008e04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008e08:	2b40      	cmp	r3, #64	; 0x40
 8008e0a:	f200 80b7 	bhi.w	8008f7c <UART_SetConfig+0xad8>
 8008e0e:	a201      	add	r2, pc, #4	; (adr r2, 8008e14 <UART_SetConfig+0x970>)
 8008e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e14:	08008f19 	.word	0x08008f19
 8008e18:	08008f21 	.word	0x08008f21
 8008e1c:	08008f7d 	.word	0x08008f7d
 8008e20:	08008f7d 	.word	0x08008f7d
 8008e24:	08008f29 	.word	0x08008f29
 8008e28:	08008f7d 	.word	0x08008f7d
 8008e2c:	08008f7d 	.word	0x08008f7d
 8008e30:	08008f7d 	.word	0x08008f7d
 8008e34:	08008f39 	.word	0x08008f39
 8008e38:	08008f7d 	.word	0x08008f7d
 8008e3c:	08008f7d 	.word	0x08008f7d
 8008e40:	08008f7d 	.word	0x08008f7d
 8008e44:	08008f7d 	.word	0x08008f7d
 8008e48:	08008f7d 	.word	0x08008f7d
 8008e4c:	08008f7d 	.word	0x08008f7d
 8008e50:	08008f7d 	.word	0x08008f7d
 8008e54:	08008f49 	.word	0x08008f49
 8008e58:	08008f7d 	.word	0x08008f7d
 8008e5c:	08008f7d 	.word	0x08008f7d
 8008e60:	08008f7d 	.word	0x08008f7d
 8008e64:	08008f7d 	.word	0x08008f7d
 8008e68:	08008f7d 	.word	0x08008f7d
 8008e6c:	08008f7d 	.word	0x08008f7d
 8008e70:	08008f7d 	.word	0x08008f7d
 8008e74:	08008f7d 	.word	0x08008f7d
 8008e78:	08008f7d 	.word	0x08008f7d
 8008e7c:	08008f7d 	.word	0x08008f7d
 8008e80:	08008f7d 	.word	0x08008f7d
 8008e84:	08008f7d 	.word	0x08008f7d
 8008e88:	08008f7d 	.word	0x08008f7d
 8008e8c:	08008f7d 	.word	0x08008f7d
 8008e90:	08008f7d 	.word	0x08008f7d
 8008e94:	08008f6f 	.word	0x08008f6f
 8008e98:	08008f7d 	.word	0x08008f7d
 8008e9c:	08008f7d 	.word	0x08008f7d
 8008ea0:	08008f7d 	.word	0x08008f7d
 8008ea4:	08008f7d 	.word	0x08008f7d
 8008ea8:	08008f7d 	.word	0x08008f7d
 8008eac:	08008f7d 	.word	0x08008f7d
 8008eb0:	08008f7d 	.word	0x08008f7d
 8008eb4:	08008f7d 	.word	0x08008f7d
 8008eb8:	08008f7d 	.word	0x08008f7d
 8008ebc:	08008f7d 	.word	0x08008f7d
 8008ec0:	08008f7d 	.word	0x08008f7d
 8008ec4:	08008f7d 	.word	0x08008f7d
 8008ec8:	08008f7d 	.word	0x08008f7d
 8008ecc:	08008f7d 	.word	0x08008f7d
 8008ed0:	08008f7d 	.word	0x08008f7d
 8008ed4:	08008f7d 	.word	0x08008f7d
 8008ed8:	08008f7d 	.word	0x08008f7d
 8008edc:	08008f7d 	.word	0x08008f7d
 8008ee0:	08008f7d 	.word	0x08008f7d
 8008ee4:	08008f7d 	.word	0x08008f7d
 8008ee8:	08008f7d 	.word	0x08008f7d
 8008eec:	08008f7d 	.word	0x08008f7d
 8008ef0:	08008f7d 	.word	0x08008f7d
 8008ef4:	08008f7d 	.word	0x08008f7d
 8008ef8:	08008f7d 	.word	0x08008f7d
 8008efc:	08008f7d 	.word	0x08008f7d
 8008f00:	08008f7d 	.word	0x08008f7d
 8008f04:	08008f7d 	.word	0x08008f7d
 8008f08:	08008f7d 	.word	0x08008f7d
 8008f0c:	08008f7d 	.word	0x08008f7d
 8008f10:	08008f7d 	.word	0x08008f7d
 8008f14:	08008f75 	.word	0x08008f75
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f18:	f7fd fa68 	bl	80063ec <HAL_RCC_GetPCLK1Freq>
 8008f1c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008f1e:	e033      	b.n	8008f88 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f20:	f7fd fa7a 	bl	8006418 <HAL_RCC_GetPCLK2Freq>
 8008f24:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008f26:	e02f      	b.n	8008f88 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f28:	f107 0314 	add.w	r3, r7, #20
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7fe fb79 	bl	8007624 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f36:	e027      	b.n	8008f88 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f38:	f107 0308 	add.w	r3, r7, #8
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f7fe fcbd 	bl	80078bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f46:	e01f      	b.n	8008f88 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f48:	4ba8      	ldr	r3, [pc, #672]	; (80091ec <UART_SetConfig+0xd48>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f003 0320 	and.w	r3, r3, #32
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d009      	beq.n	8008f68 <UART_SetConfig+0xac4>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008f54:	4ba5      	ldr	r3, [pc, #660]	; (80091ec <UART_SetConfig+0xd48>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	08db      	lsrs	r3, r3, #3
 8008f5a:	f003 0303 	and.w	r3, r3, #3
 8008f5e:	4aa4      	ldr	r2, [pc, #656]	; (80091f0 <UART_SetConfig+0xd4c>)
 8008f60:	fa22 f303 	lsr.w	r3, r2, r3
 8008f64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008f66:	e00f      	b.n	8008f88 <UART_SetConfig+0xae4>
          pclk = (uint32_t) HSI_VALUE;
 8008f68:	4ba1      	ldr	r3, [pc, #644]	; (80091f0 <UART_SetConfig+0xd4c>)
 8008f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f6c:	e00c      	b.n	8008f88 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008f6e:	4ba1      	ldr	r3, [pc, #644]	; (80091f4 <UART_SetConfig+0xd50>)
 8008f70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f72:	e009      	b.n	8008f88 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f7a:	e005      	b.n	8008f88 <UART_SetConfig+0xae4>
      default:
        pclk = 0U;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008f86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	f000 8119 	beq.w	80091c2 <UART_SetConfig+0xd1e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f94:	4a98      	ldr	r2, [pc, #608]	; (80091f8 <UART_SetConfig+0xd54>)
 8008f96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008fa2:	005a      	lsls	r2, r3, #1
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	085b      	lsrs	r3, r3, #1
 8008faa:	441a      	add	r2, r3
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fba:	2b0f      	cmp	r3, #15
 8008fbc:	d916      	bls.n	8008fec <UART_SetConfig+0xb48>
 8008fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fc4:	d212      	bcs.n	8008fec <UART_SetConfig+0xb48>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	f023 030f 	bic.w	r3, r3, #15
 8008fce:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd2:	085b      	lsrs	r3, r3, #1
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	f003 0307 	and.w	r3, r3, #7
 8008fda:	b29a      	uxth	r2, r3
 8008fdc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008fe8:	60da      	str	r2, [r3, #12]
 8008fea:	e0ea      	b.n	80091c2 <UART_SetConfig+0xd1e>
      }
      else
      {
        ret = HAL_ERROR;
 8008fec:	2301      	movs	r3, #1
 8008fee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008ff2:	e0e6      	b.n	80091c2 <UART_SetConfig+0xd1e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ff4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008ff8:	2b40      	cmp	r3, #64	; 0x40
 8008ffa:	f200 80b7 	bhi.w	800916c <UART_SetConfig+0xcc8>
 8008ffe:	a201      	add	r2, pc, #4	; (adr r2, 8009004 <UART_SetConfig+0xb60>)
 8009000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009004:	08009109 	.word	0x08009109
 8009008:	08009111 	.word	0x08009111
 800900c:	0800916d 	.word	0x0800916d
 8009010:	0800916d 	.word	0x0800916d
 8009014:	08009119 	.word	0x08009119
 8009018:	0800916d 	.word	0x0800916d
 800901c:	0800916d 	.word	0x0800916d
 8009020:	0800916d 	.word	0x0800916d
 8009024:	08009129 	.word	0x08009129
 8009028:	0800916d 	.word	0x0800916d
 800902c:	0800916d 	.word	0x0800916d
 8009030:	0800916d 	.word	0x0800916d
 8009034:	0800916d 	.word	0x0800916d
 8009038:	0800916d 	.word	0x0800916d
 800903c:	0800916d 	.word	0x0800916d
 8009040:	0800916d 	.word	0x0800916d
 8009044:	08009139 	.word	0x08009139
 8009048:	0800916d 	.word	0x0800916d
 800904c:	0800916d 	.word	0x0800916d
 8009050:	0800916d 	.word	0x0800916d
 8009054:	0800916d 	.word	0x0800916d
 8009058:	0800916d 	.word	0x0800916d
 800905c:	0800916d 	.word	0x0800916d
 8009060:	0800916d 	.word	0x0800916d
 8009064:	0800916d 	.word	0x0800916d
 8009068:	0800916d 	.word	0x0800916d
 800906c:	0800916d 	.word	0x0800916d
 8009070:	0800916d 	.word	0x0800916d
 8009074:	0800916d 	.word	0x0800916d
 8009078:	0800916d 	.word	0x0800916d
 800907c:	0800916d 	.word	0x0800916d
 8009080:	0800916d 	.word	0x0800916d
 8009084:	0800915f 	.word	0x0800915f
 8009088:	0800916d 	.word	0x0800916d
 800908c:	0800916d 	.word	0x0800916d
 8009090:	0800916d 	.word	0x0800916d
 8009094:	0800916d 	.word	0x0800916d
 8009098:	0800916d 	.word	0x0800916d
 800909c:	0800916d 	.word	0x0800916d
 80090a0:	0800916d 	.word	0x0800916d
 80090a4:	0800916d 	.word	0x0800916d
 80090a8:	0800916d 	.word	0x0800916d
 80090ac:	0800916d 	.word	0x0800916d
 80090b0:	0800916d 	.word	0x0800916d
 80090b4:	0800916d 	.word	0x0800916d
 80090b8:	0800916d 	.word	0x0800916d
 80090bc:	0800916d 	.word	0x0800916d
 80090c0:	0800916d 	.word	0x0800916d
 80090c4:	0800916d 	.word	0x0800916d
 80090c8:	0800916d 	.word	0x0800916d
 80090cc:	0800916d 	.word	0x0800916d
 80090d0:	0800916d 	.word	0x0800916d
 80090d4:	0800916d 	.word	0x0800916d
 80090d8:	0800916d 	.word	0x0800916d
 80090dc:	0800916d 	.word	0x0800916d
 80090e0:	0800916d 	.word	0x0800916d
 80090e4:	0800916d 	.word	0x0800916d
 80090e8:	0800916d 	.word	0x0800916d
 80090ec:	0800916d 	.word	0x0800916d
 80090f0:	0800916d 	.word	0x0800916d
 80090f4:	0800916d 	.word	0x0800916d
 80090f8:	0800916d 	.word	0x0800916d
 80090fc:	0800916d 	.word	0x0800916d
 8009100:	0800916d 	.word	0x0800916d
 8009104:	08009165 	.word	0x08009165
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009108:	f7fd f970 	bl	80063ec <HAL_RCC_GetPCLK1Freq>
 800910c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800910e:	e033      	b.n	8009178 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009110:	f7fd f982 	bl	8006418 <HAL_RCC_GetPCLK2Freq>
 8009114:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009116:	e02f      	b.n	8009178 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009118:	f107 0314 	add.w	r3, r7, #20
 800911c:	4618      	mov	r0, r3
 800911e:	f7fe fa81 	bl	8007624 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009126:	e027      	b.n	8009178 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009128:	f107 0308 	add.w	r3, r7, #8
 800912c:	4618      	mov	r0, r3
 800912e:	f7fe fbc5 	bl	80078bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009136:	e01f      	b.n	8009178 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009138:	4b2c      	ldr	r3, [pc, #176]	; (80091ec <UART_SetConfig+0xd48>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f003 0320 	and.w	r3, r3, #32
 8009140:	2b00      	cmp	r3, #0
 8009142:	d009      	beq.n	8009158 <UART_SetConfig+0xcb4>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009144:	4b29      	ldr	r3, [pc, #164]	; (80091ec <UART_SetConfig+0xd48>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	08db      	lsrs	r3, r3, #3
 800914a:	f003 0303 	and.w	r3, r3, #3
 800914e:	4a28      	ldr	r2, [pc, #160]	; (80091f0 <UART_SetConfig+0xd4c>)
 8009150:	fa22 f303 	lsr.w	r3, r2, r3
 8009154:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009156:	e00f      	b.n	8009178 <UART_SetConfig+0xcd4>
          pclk = (uint32_t) HSI_VALUE;
 8009158:	4b25      	ldr	r3, [pc, #148]	; (80091f0 <UART_SetConfig+0xd4c>)
 800915a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800915c:	e00c      	b.n	8009178 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800915e:	4b25      	ldr	r3, [pc, #148]	; (80091f4 <UART_SetConfig+0xd50>)
 8009160:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009162:	e009      	b.n	8009178 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009164:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009168:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800916a:	e005      	b.n	8009178 <UART_SetConfig+0xcd4>
      default:
        pclk = 0U;
 800916c:	2300      	movs	r3, #0
 800916e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009176:	bf00      	nop
    }

    if (pclk != 0U)
 8009178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800917a:	2b00      	cmp	r3, #0
 800917c:	d021      	beq.n	80091c2 <UART_SetConfig+0xd1e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009182:	4a1d      	ldr	r2, [pc, #116]	; (80091f8 <UART_SetConfig+0xd54>)
 8009184:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009188:	461a      	mov	r2, r3
 800918a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800918c:	fbb3 f2f2 	udiv	r2, r3, r2
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	085b      	lsrs	r3, r3, #1
 8009196:	441a      	add	r2, r3
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	fbb2 f3f3 	udiv	r3, r2, r3
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a6:	2b0f      	cmp	r3, #15
 80091a8:	d908      	bls.n	80091bc <UART_SetConfig+0xd18>
 80091aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091b0:	d204      	bcs.n	80091bc <UART_SetConfig+0xd18>
      {
        huart->Instance->BRR = usartdiv;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091b8:	60da      	str	r2, [r3, #12]
 80091ba:	e002      	b.n	80091c2 <UART_SetConfig+0xd1e>
      }
      else
      {
        ret = HAL_ERROR;
 80091bc:	2301      	movs	r3, #1
 80091be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2201      	movs	r2, #1
 80091c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2201      	movs	r2, #1
 80091ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2200      	movs	r2, #0
 80091d6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80091de:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3738      	adds	r7, #56	; 0x38
 80091e6:	46bd      	mov	sp, r7
 80091e8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80091ec:	58024400 	.word	0x58024400
 80091f0:	03d09000 	.word	0x03d09000
 80091f4:	003d0900 	.word	0x003d0900
 80091f8:	080097a4 	.word	0x080097a4

080091fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009208:	f003 0301 	and.w	r3, r3, #1
 800920c:	2b00      	cmp	r3, #0
 800920e:	d00a      	beq.n	8009226 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	430a      	orrs	r2, r1
 8009224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800922a:	f003 0302 	and.w	r3, r3, #2
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00a      	beq.n	8009248 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	430a      	orrs	r2, r1
 8009246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800924c:	f003 0304 	and.w	r3, r3, #4
 8009250:	2b00      	cmp	r3, #0
 8009252:	d00a      	beq.n	800926a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	430a      	orrs	r2, r1
 8009268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800926e:	f003 0308 	and.w	r3, r3, #8
 8009272:	2b00      	cmp	r3, #0
 8009274:	d00a      	beq.n	800928c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	430a      	orrs	r2, r1
 800928a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009290:	f003 0310 	and.w	r3, r3, #16
 8009294:	2b00      	cmp	r3, #0
 8009296:	d00a      	beq.n	80092ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	430a      	orrs	r2, r1
 80092ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b2:	f003 0320 	and.w	r3, r3, #32
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d00a      	beq.n	80092d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	430a      	orrs	r2, r1
 80092ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d01a      	beq.n	8009312 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	430a      	orrs	r2, r1
 80092f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092fa:	d10a      	bne.n	8009312 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	430a      	orrs	r2, r1
 8009310:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800931a:	2b00      	cmp	r3, #0
 800931c:	d00a      	beq.n	8009334 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	430a      	orrs	r2, r1
 8009332:	605a      	str	r2, [r3, #4]
  }
}
 8009334:	bf00      	nop
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b086      	sub	sp, #24
 8009344:	af02      	add	r7, sp, #8
 8009346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009350:	f7f7 fff6 	bl	8001340 <HAL_GetTick>
 8009354:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f003 0308 	and.w	r3, r3, #8
 8009360:	2b08      	cmp	r3, #8
 8009362:	d10e      	bne.n	8009382 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009364:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009368:	9300      	str	r3, [sp, #0]
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2200      	movs	r2, #0
 800936e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f82c 	bl	80093d0 <UART_WaitOnFlagUntilTimeout>
 8009378:	4603      	mov	r3, r0
 800937a:	2b00      	cmp	r3, #0
 800937c:	d001      	beq.n	8009382 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800937e:	2303      	movs	r3, #3
 8009380:	e022      	b.n	80093c8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f003 0304 	and.w	r3, r3, #4
 800938c:	2b04      	cmp	r3, #4
 800938e:	d10e      	bne.n	80093ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009390:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009394:	9300      	str	r3, [sp, #0]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2200      	movs	r2, #0
 800939a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 f816 	bl	80093d0 <UART_WaitOnFlagUntilTimeout>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d001      	beq.n	80093ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093aa:	2303      	movs	r3, #3
 80093ac:	e00c      	b.n	80093c8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2220      	movs	r2, #32
 80093b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2220      	movs	r2, #32
 80093ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80093c6:	2300      	movs	r3, #0
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3710      	adds	r7, #16
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	60b9      	str	r1, [r7, #8]
 80093da:	603b      	str	r3, [r7, #0]
 80093dc:	4613      	mov	r3, r2
 80093de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093e0:	e062      	b.n	80094a8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093e2:	69bb      	ldr	r3, [r7, #24]
 80093e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093e8:	d05e      	beq.n	80094a8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093ea:	f7f7 ffa9 	bl	8001340 <HAL_GetTick>
 80093ee:	4602      	mov	r2, r0
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	1ad3      	subs	r3, r2, r3
 80093f4:	69ba      	ldr	r2, [r7, #24]
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d302      	bcc.n	8009400 <UART_WaitOnFlagUntilTimeout+0x30>
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d11d      	bne.n	800943c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800940e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	689a      	ldr	r2, [r3, #8]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f022 0201 	bic.w	r2, r2, #1
 800941e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2220      	movs	r2, #32
 8009424:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2220      	movs	r2, #32
 800942c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2200      	movs	r2, #0
 8009434:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009438:	2303      	movs	r3, #3
 800943a:	e045      	b.n	80094c8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f003 0304 	and.w	r3, r3, #4
 8009446:	2b00      	cmp	r3, #0
 8009448:	d02e      	beq.n	80094a8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	69db      	ldr	r3, [r3, #28]
 8009450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009454:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009458:	d126      	bne.n	80094a8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009462:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009472:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	689a      	ldr	r2, [r3, #8]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f022 0201 	bic.w	r2, r2, #1
 8009482:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2220      	movs	r2, #32
 8009488:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2220      	movs	r2, #32
 8009490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2220      	movs	r2, #32
 8009498:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2200      	movs	r2, #0
 80094a0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80094a4:	2303      	movs	r3, #3
 80094a6:	e00f      	b.n	80094c8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	69da      	ldr	r2, [r3, #28]
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	4013      	ands	r3, r2
 80094b2:	68ba      	ldr	r2, [r7, #8]
 80094b4:	429a      	cmp	r2, r3
 80094b6:	bf0c      	ite	eq
 80094b8:	2301      	moveq	r3, #1
 80094ba:	2300      	movne	r3, #0
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	461a      	mov	r2, r3
 80094c0:	79fb      	ldrb	r3, [r7, #7]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d08d      	beq.n	80093e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094c6:	2300      	movs	r3, #0
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3710      	adds	r7, #16
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b085      	sub	sp, #20
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d101      	bne.n	80094e6 <HAL_UARTEx_DisableFifoMode+0x16>
 80094e2:	2302      	movs	r3, #2
 80094e4:	e027      	b.n	8009536 <HAL_UARTEx_DisableFifoMode+0x66>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2201      	movs	r2, #1
 80094ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2224      	movs	r2, #36	; 0x24
 80094f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f022 0201 	bic.w	r2, r2, #1
 800950c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009514:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2200      	movs	r2, #0
 800951a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	68fa      	ldr	r2, [r7, #12]
 8009522:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2220      	movs	r2, #32
 8009528:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009534:	2300      	movs	r3, #0
}
 8009536:	4618      	mov	r0, r3
 8009538:	3714      	adds	r7, #20
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr

08009542 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009542:	b580      	push	{r7, lr}
 8009544:	b084      	sub	sp, #16
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
 800954a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009552:	2b01      	cmp	r3, #1
 8009554:	d101      	bne.n	800955a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009556:	2302      	movs	r3, #2
 8009558:	e02d      	b.n	80095b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2201      	movs	r2, #1
 800955e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2224      	movs	r2, #36	; 0x24
 8009566:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	681a      	ldr	r2, [r3, #0]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f022 0201 	bic.w	r2, r2, #1
 8009580:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	683a      	ldr	r2, [r7, #0]
 8009592:	430a      	orrs	r2, r1
 8009594:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f000 f850 	bl	800963c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	68fa      	ldr	r2, [r7, #12]
 80095a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2220      	movs	r2, #32
 80095a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80095b4:	2300      	movs	r3, #0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3710      	adds	r7, #16
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095be:	b580      	push	{r7, lr}
 80095c0:	b084      	sub	sp, #16
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
 80095c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d101      	bne.n	80095d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80095d2:	2302      	movs	r3, #2
 80095d4:	e02d      	b.n	8009632 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2201      	movs	r2, #1
 80095da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2224      	movs	r2, #36	; 0x24
 80095e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f022 0201 	bic.w	r2, r2, #1
 80095fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	683a      	ldr	r2, [r7, #0]
 800960e:	430a      	orrs	r2, r1
 8009610:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 f812 	bl	800963c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	68fa      	ldr	r2, [r7, #12]
 800961e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2220      	movs	r2, #32
 8009624:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2200      	movs	r2, #0
 800962c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009630:	2300      	movs	r3, #0
}
 8009632:	4618      	mov	r0, r3
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
	...

0800963c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800963c:	b480      	push	{r7}
 800963e:	b089      	sub	sp, #36	; 0x24
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009644:	4a2f      	ldr	r2, [pc, #188]	; (8009704 <UARTEx_SetNbDataToProcess+0xc8>)
 8009646:	f107 0314 	add.w	r3, r7, #20
 800964a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800964e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009652:	4a2d      	ldr	r2, [pc, #180]	; (8009708 <UARTEx_SetNbDataToProcess+0xcc>)
 8009654:	f107 030c 	add.w	r3, r7, #12
 8009658:	e892 0003 	ldmia.w	r2, {r0, r1}
 800965c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009664:	2b00      	cmp	r3, #0
 8009666:	d108      	bne.n	800967a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2201      	movs	r2, #1
 800966c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2201      	movs	r2, #1
 8009674:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009678:	e03d      	b.n	80096f6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800967a:	2310      	movs	r3, #16
 800967c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800967e:	2310      	movs	r3, #16
 8009680:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	0e5b      	lsrs	r3, r3, #25
 800968a:	b2db      	uxtb	r3, r3
 800968c:	f003 0307 	and.w	r3, r3, #7
 8009690:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	0f5b      	lsrs	r3, r3, #29
 800969a:	b2db      	uxtb	r3, r3
 800969c:	f003 0307 	and.w	r3, r3, #7
 80096a0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80096a2:	7fbb      	ldrb	r3, [r7, #30]
 80096a4:	7f3a      	ldrb	r2, [r7, #28]
 80096a6:	f107 0120 	add.w	r1, r7, #32
 80096aa:	440a      	add	r2, r1
 80096ac:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80096b0:	fb02 f303 	mul.w	r3, r2, r3
 80096b4:	7f3a      	ldrb	r2, [r7, #28]
 80096b6:	f107 0120 	add.w	r1, r7, #32
 80096ba:	440a      	add	r2, r1
 80096bc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80096c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80096c4:	b29a      	uxth	r2, r3
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80096cc:	7ffb      	ldrb	r3, [r7, #31]
 80096ce:	7f7a      	ldrb	r2, [r7, #29]
 80096d0:	f107 0120 	add.w	r1, r7, #32
 80096d4:	440a      	add	r2, r1
 80096d6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80096da:	fb02 f303 	mul.w	r3, r2, r3
 80096de:	7f7a      	ldrb	r2, [r7, #29]
 80096e0:	f107 0120 	add.w	r1, r7, #32
 80096e4:	440a      	add	r2, r1
 80096e6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80096ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80096ee:	b29a      	uxth	r2, r3
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80096f6:	bf00      	nop
 80096f8:	3724      	adds	r7, #36	; 0x24
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	0800977c 	.word	0x0800977c
 8009708:	08009784 	.word	0x08009784

0800970c <__libc_init_array>:
 800970c:	b570      	push	{r4, r5, r6, lr}
 800970e:	4e0d      	ldr	r6, [pc, #52]	; (8009744 <__libc_init_array+0x38>)
 8009710:	4c0d      	ldr	r4, [pc, #52]	; (8009748 <__libc_init_array+0x3c>)
 8009712:	1ba4      	subs	r4, r4, r6
 8009714:	10a4      	asrs	r4, r4, #2
 8009716:	2500      	movs	r5, #0
 8009718:	42a5      	cmp	r5, r4
 800971a:	d109      	bne.n	8009730 <__libc_init_array+0x24>
 800971c:	4e0b      	ldr	r6, [pc, #44]	; (800974c <__libc_init_array+0x40>)
 800971e:	4c0c      	ldr	r4, [pc, #48]	; (8009750 <__libc_init_array+0x44>)
 8009720:	f000 f820 	bl	8009764 <_init>
 8009724:	1ba4      	subs	r4, r4, r6
 8009726:	10a4      	asrs	r4, r4, #2
 8009728:	2500      	movs	r5, #0
 800972a:	42a5      	cmp	r5, r4
 800972c:	d105      	bne.n	800973a <__libc_init_array+0x2e>
 800972e:	bd70      	pop	{r4, r5, r6, pc}
 8009730:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009734:	4798      	blx	r3
 8009736:	3501      	adds	r5, #1
 8009738:	e7ee      	b.n	8009718 <__libc_init_array+0xc>
 800973a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800973e:	4798      	blx	r3
 8009740:	3501      	adds	r5, #1
 8009742:	e7f2      	b.n	800972a <__libc_init_array+0x1e>
 8009744:	080097c4 	.word	0x080097c4
 8009748:	080097c4 	.word	0x080097c4
 800974c:	080097c4 	.word	0x080097c4
 8009750:	080097c8 	.word	0x080097c8

08009754 <memset>:
 8009754:	4402      	add	r2, r0
 8009756:	4603      	mov	r3, r0
 8009758:	4293      	cmp	r3, r2
 800975a:	d100      	bne.n	800975e <memset+0xa>
 800975c:	4770      	bx	lr
 800975e:	f803 1b01 	strb.w	r1, [r3], #1
 8009762:	e7f9      	b.n	8009758 <memset+0x4>

08009764 <_init>:
 8009764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009766:	bf00      	nop
 8009768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800976a:	bc08      	pop	{r3}
 800976c:	469e      	mov	lr, r3
 800976e:	4770      	bx	lr

08009770 <_fini>:
 8009770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009772:	bf00      	nop
 8009774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009776:	bc08      	pop	{r3}
 8009778:	469e      	mov	lr, r3
 800977a:	4770      	bx	lr
