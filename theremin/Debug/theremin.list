
theremin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a068  080002b0  080002b0  000102b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800a318  0800a318  0001a318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3dc  0800a3dc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3dc  0800a3dc  0001a3dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3e4  0800a3e4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3e4  0800a3e4  0001a3e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3e8  0800a3e8  0001a3e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  0800a3ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  24000074  0800a460  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000338  0800a460  00020338  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002448a  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003983  00000000  00000000  0004452c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016d8  00000000  00000000  00047eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001570  00000000  00000000  00049588  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000336cd  00000000  00000000  0004aaf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001459e  00000000  00000000  0007e1c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001561c4  00000000  00000000  00092763  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e8927  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006890  00000000  00000000  001e89a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000074 	.word	0x24000074
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800a300 	.word	0x0800a300

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000078 	.word	0x24000078
 80002ec:	0800a300 	.word	0x0800a300

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	; 0x50
 80005f4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  int i;

  char uart_buf[50];
  int uart_buf_len;
  volatile uint32_t timer_count = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 ffb9 	bl	8001570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f84d 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 fadd 	bl	8000bc0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000606:	f000 faa3 	bl	8000b50 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800060a:	f000 fa4d 	bl	8000aa8 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800060e:	f000 fa97 	bl	8000b40 <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 8000612:	f000 f913 	bl	800083c <MX_ADC1_Init>
  MX_DAC1_Init();
 8000616:	f000 f98b 	bl	8000930 <MX_DAC1_Init>
  MX_TIM6_Init();
 800061a:	f000 fa0f 	bl	8000a3c <MX_TIM6_Init>
  MX_TIM2_Init();
 800061e:	f000 f9b9 	bl	8000994 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  s_ref = init_nco(100. / 4550., 0);
 8000622:	eddf 0a19 	vldr	s1, [pc, #100]	; 8000688 <main+0x98>
 8000626:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800068c <main+0x9c>
 800062a:	f000 fbfd 	bl	8000e28 <init_nco>
 800062e:	6478      	str	r0, [r7, #68]	; 0x44
//  s_ref = init_nco(250. / 1000., 0);
//  s_2 = init_nco(249. / 4000., 0);
//
  sin_buffer = calloc(BLOCKSIZE, sizeof(uint16_t));
 8000630:	2102      	movs	r1, #2
 8000632:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000636:	f009 f997 	bl	8009968 <calloc>
 800063a:	4603      	mov	r3, r0
 800063c:	643b      	str	r3, [r7, #64]	; 0x40
//	  printf("Failed to allocate memory for arrays\n");
//	  exit(EXIT_FAILURE);
//  }

  /* Start TIM6 and DAC with DMA */
  HAL_TIM_Base_Start(&htim6);
 800063e:	4814      	ldr	r0, [pc, #80]	; (8000690 <main+0xa0>)
 8000640:	f007 fd32 	bl	80080a8 <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000644:	2100      	movs	r1, #0
 8000646:	4813      	ldr	r0, [pc, #76]	; (8000694 <main+0xa4>)
 8000648:	f002 f883 	bl	8002752 <HAL_DAC_Start>

  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)sin_buffer, BLOCKSIZE, DAC_ALIGN_12B_R);
 800064c:	2300      	movs	r3, #0
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000654:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000656:	2100      	movs	r1, #0
 8000658:	480e      	ldr	r0, [pc, #56]	; (8000694 <main+0xa4>)
 800065a:	f002 f8cd 	bl	80027f8 <HAL_DAC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

//  uart_buf_len = sprintf(uart_buf, "\nTesting\r\n");
//  HAL_UART_Transmit(&huart3, uart_buf, uart_buf_len, 100);
  HAL_TIM_Base_Start(&htim2);
 800065e:	480e      	ldr	r0, [pc, #56]	; (8000698 <main+0xa8>)
 8000660:	f007 fd22 	bl	80080a8 <HAL_TIM_Base_Start>
  i = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	63fb      	str	r3, [r7, #60]	; 0x3c

  timer_count = __HAL_TIM_GET_COUNTER(&htim2);
 8000668:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <main+0xa8>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800066e:	607b      	str	r3, [r7, #4]
  while (1)
  {

	  timer_count = __HAL_TIM_GET_COUNTER(&htim2);
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <main+0xa8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000676:	607b      	str	r3, [r7, #4]

//	  uart_buf_len = sprintf(uart_buf, "%d us\r\n", timer_count);
//	  HAL_UART_Transmit(&huart3, uart_buf, uart_buf_len, 100);

//	  HAL_Delay(1000);
	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 4095);
 8000678:	f640 73ff 	movw	r3, #4095	; 0xfff
 800067c:	2200      	movs	r2, #0
 800067e:	2100      	movs	r1, #0
 8000680:	4804      	ldr	r0, [pc, #16]	; (8000694 <main+0xa4>)
 8000682:	f002 f977 	bl	8002974 <HAL_DAC_SetValue>
	  timer_count = __HAL_TIM_GET_COUNTER(&htim2);
 8000686:	e7f3      	b.n	8000670 <main+0x80>
 8000688:	00000000 	.word	0x00000000
 800068c:	3cb40b41 	.word	0x3cb40b41
 8000690:	24000298 	.word	0x24000298
 8000694:	2400009c 	.word	0x2400009c
 8000698:	240002e4 	.word	0x240002e4

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b0ca      	sub	sp, #296	; 0x128
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80006a6:	224c      	movs	r2, #76	; 0x4c
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f009 f9aa 	bl	8009a04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80006b4:	2220      	movs	r2, #32
 80006b6:	2100      	movs	r1, #0
 80006b8:	4618      	mov	r0, r3
 80006ba:	f009 f9a3 	bl	8009a04 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	4618      	mov	r0, r3
 80006c2:	23b8      	movs	r3, #184	; 0xb8
 80006c4:	461a      	mov	r2, r3
 80006c6:	2100      	movs	r1, #0
 80006c8:	f009 f99c 	bl	8009a04 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80006cc:	2004      	movs	r0, #4
 80006ce:	f004 fe95 	bl	80053fc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006d2:	463b      	mov	r3, r7
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	4b55      	ldr	r3, [pc, #340]	; (8000830 <SystemClock_Config+0x194>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a54      	ldr	r2, [pc, #336]	; (8000830 <SystemClock_Config+0x194>)
 80006de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b52      	ldr	r3, [pc, #328]	; (8000830 <SystemClock_Config+0x194>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80006ec:	463b      	mov	r3, r7
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	463b      	mov	r3, r7
 80006f2:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006f4:	bf00      	nop
 80006f6:	4b4e      	ldr	r3, [pc, #312]	; (8000830 <SystemClock_Config+0x194>)
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000702:	d1f8      	bne.n	80006f6 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000704:	4b4b      	ldr	r3, [pc, #300]	; (8000834 <SystemClock_Config+0x198>)
 8000706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000708:	f023 0303 	bic.w	r3, r3, #3
 800070c:	4a49      	ldr	r2, [pc, #292]	; (8000834 <SystemClock_Config+0x198>)
 800070e:	f043 0302 	orr.w	r3, r3, #2
 8000712:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8000714:	2329      	movs	r3, #41	; 0x29
 8000716:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800071a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800071e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000722:	2301      	movs	r3, #1
 8000724:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000728:	2301      	movs	r3, #1
 800072a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072e:	2302      	movs	r3, #2
 8000730:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000734:	2302      	movs	r3, #2
 8000736:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  RCC_OscInitStruct.PLL.PLLM = 1;
 800073a:	2301      	movs	r3, #1
 800073c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000740:	2318      	movs	r3, #24
 8000742:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000746:	2302      	movs	r3, #2
 8000748:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800074c:	2304      	movs	r3, #4
 800074e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000752:	2302      	movs	r3, #2
 8000754:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000758:	230c      	movs	r3, #12
 800075a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800075e:	2300      	movs	r3, #0
 8000760:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800076e:	4618      	mov	r0, r3
 8000770:	f004 fe9e 	bl	80054b0 <HAL_RCC_OscConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800077a:	f000 fb4b 	bl	8000e14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077e:	233f      	movs	r3, #63	; 0x3f
 8000780:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000784:	2303      	movs	r3, #3
 8000786:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ae:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80007b2:	2102      	movs	r1, #2
 80007b4:	4618      	mov	r0, r3
 80007b6:	f005 fa63 	bl	8005c80 <HAL_RCC_ClockConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0x128>
  {
    Error_Handler();
 80007c0:	f000 fb28 	bl	8000e14 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_ADC
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	4a1c      	ldr	r2, [pc, #112]	; (8000838 <SystemClock_Config+0x19c>)
 80007c8:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	2201      	movs	r2, #1
 80007ce:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2210      	movs	r2, #16
 80007d4:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	2202      	movs	r2, #2
 80007da:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2202      	movs	r2, #2
 80007e0:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2202      	movs	r2, #2
 80007e6:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	22c0      	movs	r2, #192	; 0xc0
 80007ec:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2200      	movs	r2, #0
 80007f2:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2200      	movs	r2, #0
 80007f8:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	2200      	movs	r2, #0
 80007fe:	67da      	str	r2, [r3, #124]	; 0x7c
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000806:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	2200      	movs	r2, #0
 800080e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	4618      	mov	r0, r3
 8000816:	f005 fdb7 	bl	8006388 <HAL_RCCEx_PeriphCLKConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0x188>
  {
    Error_Handler();
 8000820:	f000 faf8 	bl	8000e14 <Error_Handler>
  }
}
 8000824:	bf00      	nop
 8000826:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	58024800 	.word	0x58024800
 8000834:	58024400 	.word	0x58024400
 8000838:	000c0002 	.word	0x000c0002

0800083c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	; 0x28
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800084e:	463b      	mov	r3, r7
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
 800085c:	615a      	str	r2, [r3, #20]
 800085e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000860:	4b30      	ldr	r3, [pc, #192]	; (8000924 <MX_ADC1_Init+0xe8>)
 8000862:	4a31      	ldr	r2, [pc, #196]	; (8000928 <MX_ADC1_Init+0xec>)
 8000864:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000866:	4b2f      	ldr	r3, [pc, #188]	; (8000924 <MX_ADC1_Init+0xe8>)
 8000868:	2200      	movs	r2, #0
 800086a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800086c:	4b2d      	ldr	r3, [pc, #180]	; (8000924 <MX_ADC1_Init+0xe8>)
 800086e:	2208      	movs	r2, #8
 8000870:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000872:	4b2c      	ldr	r3, [pc, #176]	; (8000924 <MX_ADC1_Init+0xe8>)
 8000874:	2200      	movs	r2, #0
 8000876:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000878:	4b2a      	ldr	r3, [pc, #168]	; (8000924 <MX_ADC1_Init+0xe8>)
 800087a:	2204      	movs	r2, #4
 800087c:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800087e:	4b29      	ldr	r3, [pc, #164]	; (8000924 <MX_ADC1_Init+0xe8>)
 8000880:	2200      	movs	r2, #0
 8000882:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000884:	4b27      	ldr	r3, [pc, #156]	; (8000924 <MX_ADC1_Init+0xe8>)
 8000886:	2201      	movs	r2, #1
 8000888:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800088a:	4b26      	ldr	r3, [pc, #152]	; (8000924 <MX_ADC1_Init+0xe8>)
 800088c:	2201      	movs	r2, #1
 800088e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000890:	4b24      	ldr	r3, [pc, #144]	; (8000924 <MX_ADC1_Init+0xe8>)
 8000892:	2200      	movs	r2, #0
 8000894:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000896:	4b23      	ldr	r3, [pc, #140]	; (8000924 <MX_ADC1_Init+0xe8>)
 8000898:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 800089c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800089e:	4b21      	ldr	r3, [pc, #132]	; (8000924 <MX_ADC1_Init+0xe8>)
 80008a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80008a6:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <MX_ADC1_Init+0xe8>)
 80008a8:	2203      	movs	r2, #3
 80008aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008ac:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <MX_ADC1_Init+0xe8>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008b2:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <MX_ADC1_Init+0xe8>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008b8:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <MX_ADC1_Init+0xe8>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008c0:	4818      	ldr	r0, [pc, #96]	; (8000924 <MX_ADC1_Init+0xe8>)
 80008c2:	f001 f895 	bl	80019f0 <HAL_ADC_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80008cc:	f000 faa2 	bl	8000e14 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	4812      	ldr	r0, [pc, #72]	; (8000924 <MX_ADC1_Init+0xe8>)
 80008dc:	f001 fd70 	bl	80023c0 <HAL_ADCEx_MultiModeConfigChannel>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80008e6:	f000 fa95 	bl	8000e14 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <MX_ADC1_Init+0xf0>)
 80008ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ee:	2306      	movs	r3, #6
 80008f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008f6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008fa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008fc:	2304      	movs	r3, #4
 80008fe:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000908:	463b      	mov	r3, r7
 800090a:	4619      	mov	r1, r3
 800090c:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_ADC1_Init+0xe8>)
 800090e:	f001 f9c9 	bl	8001ca4 <HAL_ADC_ConfigChannel>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000918:	f000 fa7c 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	3728      	adds	r7, #40	; 0x28
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	240001b4 	.word	0x240001b4
 8000928:	40022000 	.word	0x40022000
 800092c:	14f00020 	.word	0x14f00020

08000930 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	; 0x28
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	2224      	movs	r2, #36	; 0x24
 800093a:	2100      	movs	r1, #0
 800093c:	4618      	mov	r0, r3
 800093e:	f009 f861 	bl	8009a04 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000942:	4b12      	ldr	r3, [pc, #72]	; (800098c <MX_DAC1_Init+0x5c>)
 8000944:	4a12      	ldr	r2, [pc, #72]	; (8000990 <MX_DAC1_Init+0x60>)
 8000946:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000948:	4810      	ldr	r0, [pc, #64]	; (800098c <MX_DAC1_Init+0x5c>)
 800094a:	f001 fee0 	bl	800270e <HAL_DAC_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000954:	f000 fa5e 	bl	8000e14 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800095c:	2316      	movs	r3, #22
 800095e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000964:	2302      	movs	r3, #2
 8000966:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	2200      	movs	r2, #0
 8000970:	4619      	mov	r1, r3
 8000972:	4806      	ldr	r0, [pc, #24]	; (800098c <MX_DAC1_Init+0x5c>)
 8000974:	f002 f842 	bl	80029fc <HAL_DAC_ConfigChannel>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800097e:	f000 fa49 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	3728      	adds	r7, #40	; 0x28
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	2400009c 	.word	0x2400009c
 8000990:	40007400 	.word	0x40007400

08000994 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b088      	sub	sp, #32
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009aa:	463b      	mov	r3, r7
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009b4:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <MX_TIM2_Init+0xa4>)
 80009b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009bc:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <MX_TIM2_Init+0xa4>)
 80009be:	2200      	movs	r2, #0
 80009c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c2:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <MX_TIM2_Init+0xa4>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80009c8:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <MX_TIM2_Init+0xa4>)
 80009ca:	f04f 32ff 	mov.w	r2, #4294967295
 80009ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d0:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <MX_TIM2_Init+0xa4>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d6:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <MX_TIM2_Init+0xa4>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009dc:	4816      	ldr	r0, [pc, #88]	; (8000a38 <MX_TIM2_Init+0xa4>)
 80009de:	f007 fb0b 	bl	8007ff8 <HAL_TIM_Base_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80009e8:	f000 fa14 	bl	8000e14 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80009ec:	2307      	movs	r3, #7
 80009ee:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80009f0:	2350      	movs	r3, #80	; 0x50
 80009f2:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 1;
 80009f8:	2301      	movs	r3, #1
 80009fa:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	4619      	mov	r1, r3
 8000a02:	480d      	ldr	r0, [pc, #52]	; (8000a38 <MX_TIM2_Init+0xa4>)
 8000a04:	f007 fb7e 	bl	8008104 <HAL_TIM_SlaveConfigSynchro>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000a0e:	f000 fa01 	bl	8000e14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a12:	2300      	movs	r3, #0
 8000a14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4806      	ldr	r0, [pc, #24]	; (8000a38 <MX_TIM2_Init+0xa4>)
 8000a20:	f007 fd96 	bl	8008550 <HAL_TIMEx_MasterConfigSynchronization>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000a2a:	f000 f9f3 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	3720      	adds	r7, #32
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	240002e4 	.word	0x240002e4

08000a3c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <MX_TIM6_Init+0x64>)
 8000a4e:	4a15      	ldr	r2, [pc, #84]	; (8000aa4 <MX_TIM6_Init+0x68>)
 8000a50:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <MX_TIM6_Init+0x64>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <MX_TIM6_Init+0x64>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20;
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <MX_TIM6_Init+0x64>)
 8000a60:	2214      	movs	r2, #20
 8000a62:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <MX_TIM6_Init+0x64>)
 8000a66:	2280      	movs	r2, #128	; 0x80
 8000a68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a6a:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <MX_TIM6_Init+0x64>)
 8000a6c:	f007 fac4 	bl	8007ff8 <HAL_TIM_Base_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000a76:	f000 f9cd 	bl	8000e14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a7a:	2320      	movs	r3, #32
 8000a7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	4619      	mov	r1, r3
 8000a86:	4806      	ldr	r0, [pc, #24]	; (8000aa0 <MX_TIM6_Init+0x64>)
 8000a88:	f007 fd62 	bl	8008550 <HAL_TIMEx_MasterConfigSynchronization>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000a92:	f000 f9bf 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	24000298 	.word	0x24000298
 8000aa4:	40001000 	.word	0x40001000

08000aa8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000aac:	4b22      	ldr	r3, [pc, #136]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000aae:	4a23      	ldr	r2, [pc, #140]	; (8000b3c <MX_USART3_UART_Init+0x94>)
 8000ab0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ab2:	4b21      	ldr	r3, [pc, #132]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ab4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aba:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ac0:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ac6:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000acc:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ace:	220c      	movs	r2, #12
 8000ad0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad2:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad8:	4b17      	ldr	r3, [pc, #92]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ade:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ae4:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aea:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000af0:	4811      	ldr	r0, [pc, #68]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000af2:	f007 fdb5 	bl	8008660 <HAL_UART_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000afc:	f000 f98a 	bl	8000e14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b00:	2100      	movs	r1, #0
 8000b02:	480d      	ldr	r0, [pc, #52]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000b04:	f008 fe4b 	bl	800979e <HAL_UARTEx_SetTxFifoThreshold>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b0e:	f000 f981 	bl	8000e14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b12:	2100      	movs	r1, #0
 8000b14:	4808      	ldr	r0, [pc, #32]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000b16:	f008 fe80 	bl	800981a <HAL_UARTEx_SetRxFifoThreshold>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b20:	f000 f978 	bl	8000e14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b24:	4804      	ldr	r0, [pc, #16]	; (8000b38 <MX_USART3_UART_Init+0x90>)
 8000b26:	f008 fe01 	bl	800972c <HAL_UARTEx_DisableFifoMode>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b30:	f000 f970 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	240000b0 	.word	0x240000b0
 8000b3c:	40004800 	.word	0x40004800

08000b40 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
	...

08000b50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b56:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <MX_DMA_Init+0x6c>)
 8000b58:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000b5c:	4a17      	ldr	r2, [pc, #92]	; (8000bbc <MX_DMA_Init+0x6c>)
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <MX_DMA_Init+0x6c>)
 8000b68:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000b6c:	f003 0301 	and.w	r3, r3, #1
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <MX_DMA_Init+0x6c>)
 8000b76:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000b7a:	4a10      	ldr	r2, [pc, #64]	; (8000bbc <MX_DMA_Init+0x6c>)
 8000b7c:	f043 0302 	orr.w	r3, r3, #2
 8000b80:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000b84:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <MX_DMA_Init+0x6c>)
 8000b86:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2100      	movs	r1, #0
 8000b96:	200b      	movs	r0, #11
 8000b98:	f001 fd85 	bl	80026a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b9c:	200b      	movs	r0, #11
 8000b9e:	f001 fd9c 	bl	80026da <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	2038      	movs	r0, #56	; 0x38
 8000ba8:	f001 fd7d 	bl	80026a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000bac:	2038      	movs	r0, #56	; 0x38
 8000bae:	f001 fd94 	bl	80026da <HAL_NVIC_EnableIRQ>

}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	58024400 	.word	0x58024400

08000bc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08e      	sub	sp, #56	; 0x38
 8000bc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
 8000bd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd6:	4b87      	ldr	r3, [pc, #540]	; (8000df4 <MX_GPIO_Init+0x234>)
 8000bd8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bdc:	4a85      	ldr	r2, [pc, #532]	; (8000df4 <MX_GPIO_Init+0x234>)
 8000bde:	f043 0304 	orr.w	r3, r3, #4
 8000be2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000be6:	4b83      	ldr	r3, [pc, #524]	; (8000df4 <MX_GPIO_Init+0x234>)
 8000be8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bec:	f003 0304 	and.w	r3, r3, #4
 8000bf0:	623b      	str	r3, [r7, #32]
 8000bf2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bf4:	4b7f      	ldr	r3, [pc, #508]	; (8000df4 <MX_GPIO_Init+0x234>)
 8000bf6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bfa:	4a7e      	ldr	r2, [pc, #504]	; (8000df4 <MX_GPIO_Init+0x234>)
 8000bfc:	f043 0320 	orr.w	r3, r3, #32
 8000c00:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c04:	4b7b      	ldr	r3, [pc, #492]	; (8000df4 <MX_GPIO_Init+0x234>)
 8000c06:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c0a:	f003 0320 	and.w	r3, r3, #32
 8000c0e:	61fb      	str	r3, [r7, #28]
 8000c10:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c12:	4b78      	ldr	r3, [pc, #480]	; (8000df4 <MX_GPIO_Init+0x234>)
 8000c14:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c18:	4a76      	ldr	r2, [pc, #472]	; (8000df4 <MX_GPIO_Init+0x234>)
 8000c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c1e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c22:	4b74      	ldr	r3, [pc, #464]	; (8000df4 <MX_GPIO_Init+0x234>)
 8000c24:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c2c:	61bb      	str	r3, [r7, #24]
 8000c2e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c30:	4b70      	ldr	r3, [pc, #448]	; (8000df4 <MX_GPIO_Init+0x234>)
 8000c32:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c36:	4a6f      	ldr	r2, [pc, #444]	; (8000df4 <MX_GPIO_Init+0x234>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c40:	4b6c      	ldr	r3, [pc, #432]	; (8000df4 <MX_GPIO_Init+0x234>)
 8000c42:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4e:	4b69      	ldr	r3, [pc, #420]	; (8000df4 <MX_GPIO_Init+0x234>)
 8000c50:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c54:	4a67      	ldr	r2, [pc, #412]	; (8000df4 <MX_GPIO_Init+0x234>)
 8000c56:	f043 0302 	orr.w	r3, r3, #2
 8000c5a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c5e:	4b65      	ldr	r3, [pc, #404]	; (8000df4 <MX_GPIO_Init+0x234>)
 8000c60:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c64:	f003 0302 	and.w	r3, r3, #2
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c6c:	4b61      	ldr	r3, [pc, #388]	; (8000df4 <MX_GPIO_Init+0x234>)
 8000c6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c72:	4a60      	ldr	r2, [pc, #384]	; (8000df4 <MX_GPIO_Init+0x234>)
 8000c74:	f043 0308 	orr.w	r3, r3, #8
 8000c78:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c7c:	4b5d      	ldr	r3, [pc, #372]	; (8000df4 <MX_GPIO_Init+0x234>)
 8000c7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c82:	f003 0308 	and.w	r3, r3, #8
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c8a:	4b5a      	ldr	r3, [pc, #360]	; (8000df4 <MX_GPIO_Init+0x234>)
 8000c8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c90:	4a58      	ldr	r2, [pc, #352]	; (8000df4 <MX_GPIO_Init+0x234>)
 8000c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c96:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c9a:	4b56      	ldr	r3, [pc, #344]	; (8000df4 <MX_GPIO_Init+0x234>)
 8000c9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ca8:	4b52      	ldr	r3, [pc, #328]	; (8000df4 <MX_GPIO_Init+0x234>)
 8000caa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cae:	4a51      	ldr	r2, [pc, #324]	; (8000df4 <MX_GPIO_Init+0x234>)
 8000cb0:	f043 0310 	orr.w	r3, r3, #16
 8000cb4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cb8:	4b4e      	ldr	r3, [pc, #312]	; (8000df4 <MX_GPIO_Init+0x234>)
 8000cba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cbe:	f003 0310 	and.w	r3, r3, #16
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ccc:	484a      	ldr	r0, [pc, #296]	; (8000df8 <MX_GPIO_Init+0x238>)
 8000cce:	f004 fb7b 	bl	80053c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f244 0101 	movw	r1, #16385	; 0x4001
 8000cd8:	4848      	ldr	r0, [pc, #288]	; (8000dfc <MX_GPIO_Init+0x23c>)
 8000cda:	f004 fb75 	bl	80053c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2102      	movs	r1, #2
 8000ce2:	4847      	ldr	r0, [pc, #284]	; (8000e00 <MX_GPIO_Init+0x240>)
 8000ce4:	f004 fb70 	bl	80053c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ce8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4841      	ldr	r0, [pc, #260]	; (8000e04 <MX_GPIO_Init+0x244>)
 8000cfe:	f004 f9b3 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000d02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4837      	ldr	r0, [pc, #220]	; (8000df8 <MX_GPIO_Init+0x238>)
 8000d1c:	f004 f9a4 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000d20:	f244 0301 	movw	r3, #16385	; 0x4001
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d26:	2301      	movs	r3, #1
 8000d28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d36:	4619      	mov	r1, r3
 8000d38:	4830      	ldr	r0, [pc, #192]	; (8000dfc <MX_GPIO_Init+0x23c>)
 8000d3a:	f004 f995 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000d3e:	2380      	movs	r3, #128	; 0x80
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d42:	4b31      	ldr	r3, [pc, #196]	; (8000e08 <MX_GPIO_Init+0x248>)
 8000d44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4e:	4619      	mov	r1, r3
 8000d50:	482e      	ldr	r0, [pc, #184]	; (8000e0c <MX_GPIO_Init+0x24c>)
 8000d52:	f004 f989 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000d56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4829      	ldr	r0, [pc, #164]	; (8000e10 <MX_GPIO_Init+0x250>)
 8000d6c:	f004 f97c 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000d70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000d82:	230a      	movs	r3, #10
 8000d84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4820      	ldr	r0, [pc, #128]	; (8000e10 <MX_GPIO_Init+0x250>)
 8000d8e:	f004 f96b 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000d92:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	2300      	movs	r3, #0
 8000da2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da8:	4619      	mov	r1, r3
 8000daa:	4819      	ldr	r0, [pc, #100]	; (8000e10 <MX_GPIO_Init+0x250>)
 8000dac:	f004 f95c 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000db0:	23c0      	movs	r3, #192	; 0xc0
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dc0:	2307      	movs	r3, #7
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc8:	4619      	mov	r1, r3
 8000dca:	480c      	ldr	r0, [pc, #48]	; (8000dfc <MX_GPIO_Init+0x23c>)
 8000dcc:	f004 f94c 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de4:	4619      	mov	r1, r3
 8000de6:	4806      	ldr	r0, [pc, #24]	; (8000e00 <MX_GPIO_Init+0x240>)
 8000de8:	f004 f93e 	bl	8005068 <HAL_GPIO_Init>

}
 8000dec:	bf00      	nop
 8000dee:	3738      	adds	r7, #56	; 0x38
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	58024400 	.word	0x58024400
 8000df8:	58021400 	.word	0x58021400
 8000dfc:	58020400 	.word	0x58020400
 8000e00:	58021000 	.word	0x58021000
 8000e04:	58020800 	.word	0x58020800
 8000e08:	11110000 	.word	0x11110000
 8000e0c:	58021800 	.word	0x58021800
 8000e10:	58020000 	.word	0x58020000

08000e14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	0000      	movs	r0, r0
 8000e24:	0000      	movs	r0, r0
	...

08000e28 <init_nco>:
 * @returns pointer to an initialized structure of type #NCO_T which may
 * be used to get NCO samples.
 */

NCO_T *init_nco(  float f0,            //!< [in] Frequency in cycles per sample
                  float theta){        //!< [in] Offset angle in radians
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e32:	edc7 0a00 	vstr	s1, [r7]

    //Allocate memory for s
    NCO_T *s = malloc(sizeof(NCO_T));
 8000e36:	200c      	movs	r0, #12
 8000e38:	f008 fddc 	bl	80099f4 <malloc>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	60fb      	str	r3, [r7, #12]
    if (s == NULL) {
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d105      	bne.n	8000e52 <init_nco+0x2a>
        printf("Failed to allocate memory for s\n");
 8000e46:	481a      	ldr	r0, [pc, #104]	; (8000eb0 <init_nco+0x88>)
 8000e48:	f008 fef6 	bl	8009c38 <puts>
        exit(EXIT_FAILURE);
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	f008 fd99 	bl	8009984 <exit>
    }

    //Initialize struct variables
    s->f0 = (int)(f0 * 2 * (1u << 31));
 8000e52:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e56:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000e5a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000eb4 <init_nco+0x8c>
 8000e5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e66:	ee17 2a90 	vmov	r2, s15
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	601a      	str	r2, [r3, #0]
    s->theta = (int)((theta * 2 * (1u << 31))/(2.*PI));
 8000e6e:	edd7 7a00 	vldr	s15, [r7]
 8000e72:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000e76:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000eb4 <init_nco+0x8c>
 8000e7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e7e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000e82:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000ea8 <init_nco+0x80>
 8000e86:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e8a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000e8e:	ee17 2a90 	vmov	r2, s15
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	605a      	str	r2, [r3, #4]
    s->acc = 0;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]

    //Return pointer to struct NCO_T
    return s;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	53c8d4f1 	.word	0x53c8d4f1
 8000eac:	401921fb 	.word	0x401921fb
 8000eb0:	0800a318 	.word	0x0800a318
 8000eb4:	4f000000 	.word	0x4f000000

08000eb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <HAL_MspInit+0x30>)
 8000ec0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ec4:	4a08      	ldr	r2, [pc, #32]	; (8000ee8 <HAL_MspInit+0x30>)
 8000ec6:	f043 0302 	orr.w	r3, r3, #2
 8000eca:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_MspInit+0x30>)
 8000ed0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ed4:	f003 0302 	and.w	r3, r3, #2
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	58024400 	.word	0x58024400

08000eec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	; 0x28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a30      	ldr	r2, [pc, #192]	; (8000fcc <HAL_ADC_MspInit+0xe0>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d159      	bne.n	8000fc2 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f0e:	4b30      	ldr	r3, [pc, #192]	; (8000fd0 <HAL_ADC_MspInit+0xe4>)
 8000f10:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000f14:	4a2e      	ldr	r2, [pc, #184]	; (8000fd0 <HAL_ADC_MspInit+0xe4>)
 8000f16:	f043 0320 	orr.w	r3, r3, #32
 8000f1a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000f1e:	4b2c      	ldr	r3, [pc, #176]	; (8000fd0 <HAL_ADC_MspInit+0xe4>)
 8000f20:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000f24:	f003 0320 	and.w	r3, r3, #32
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2c:	4b28      	ldr	r3, [pc, #160]	; (8000fd0 <HAL_ADC_MspInit+0xe4>)
 8000f2e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f32:	4a27      	ldr	r2, [pc, #156]	; (8000fd0 <HAL_ADC_MspInit+0xe4>)
 8000f34:	f043 0302 	orr.w	r3, r3, #2
 8000f38:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f3c:	4b24      	ldr	r3, [pc, #144]	; (8000fd0 <HAL_ADC_MspInit+0xe4>)
 8000f3e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	481d      	ldr	r0, [pc, #116]	; (8000fd4 <HAL_ADC_MspInit+0xe8>)
 8000f5e:	f004 f883 	bl	8005068 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000f62:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <HAL_ADC_MspInit+0xec>)
 8000f64:	4a1d      	ldr	r2, [pc, #116]	; (8000fdc <HAL_ADC_MspInit+0xf0>)
 8000f66:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f68:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <HAL_ADC_MspInit+0xec>)
 8000f6a:	2209      	movs	r2, #9
 8000f6c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f6e:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <HAL_ADC_MspInit+0xec>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f74:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <HAL_ADC_MspInit+0xec>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f7a:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <HAL_ADC_MspInit+0xec>)
 8000f7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f80:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f82:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <HAL_ADC_MspInit+0xec>)
 8000f84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f88:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f8a:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <HAL_ADC_MspInit+0xec>)
 8000f8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f90:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <HAL_ADC_MspInit+0xec>)
 8000f94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f98:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <HAL_ADC_MspInit+0xec>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fa0:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <HAL_ADC_MspInit+0xec>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fa6:	480c      	ldr	r0, [pc, #48]	; (8000fd8 <HAL_ADC_MspInit+0xec>)
 8000fa8:	f001 fee2 	bl	8002d70 <HAL_DMA_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_ADC_MspInit+0xca>
    {
      Error_Handler();
 8000fb2:	f7ff ff2f 	bl	8000e14 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <HAL_ADC_MspInit+0xec>)
 8000fba:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fbc:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <HAL_ADC_MspInit+0xec>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fc2:	bf00      	nop
 8000fc4:	3728      	adds	r7, #40	; 0x28
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40022000 	.word	0x40022000
 8000fd0:	58024400 	.word	0x58024400
 8000fd4:	58020400 	.word	0x58020400
 8000fd8:	24000220 	.word	0x24000220
 8000fdc:	40020010 	.word	0x40020010

08000fe0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	; 0x28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a30      	ldr	r2, [pc, #192]	; (80010c0 <HAL_DAC_MspInit+0xe0>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d159      	bne.n	80010b6 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001002:	4b30      	ldr	r3, [pc, #192]	; (80010c4 <HAL_DAC_MspInit+0xe4>)
 8001004:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001008:	4a2e      	ldr	r2, [pc, #184]	; (80010c4 <HAL_DAC_MspInit+0xe4>)
 800100a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800100e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001012:	4b2c      	ldr	r3, [pc, #176]	; (80010c4 <HAL_DAC_MspInit+0xe4>)
 8001014:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001018:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001020:	4b28      	ldr	r3, [pc, #160]	; (80010c4 <HAL_DAC_MspInit+0xe4>)
 8001022:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001026:	4a27      	ldr	r2, [pc, #156]	; (80010c4 <HAL_DAC_MspInit+0xe4>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001030:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <HAL_DAC_MspInit+0xe4>)
 8001032:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800103e:	2310      	movs	r3, #16
 8001040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001042:	2303      	movs	r3, #3
 8001044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	481d      	ldr	r0, [pc, #116]	; (80010c8 <HAL_DAC_MspInit+0xe8>)
 8001052:	f004 f809 	bl	8005068 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA2_Stream0;
 8001056:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <HAL_DAC_MspInit+0xec>)
 8001058:	4a1d      	ldr	r2, [pc, #116]	; (80010d0 <HAL_DAC_MspInit+0xf0>)
 800105a:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 800105c:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <HAL_DAC_MspInit+0xec>)
 800105e:	2243      	movs	r2, #67	; 0x43
 8001060:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001062:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <HAL_DAC_MspInit+0xec>)
 8001064:	2240      	movs	r2, #64	; 0x40
 8001066:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001068:	4b18      	ldr	r3, [pc, #96]	; (80010cc <HAL_DAC_MspInit+0xec>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800106e:	4b17      	ldr	r3, [pc, #92]	; (80010cc <HAL_DAC_MspInit+0xec>)
 8001070:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001074:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001076:	4b15      	ldr	r3, [pc, #84]	; (80010cc <HAL_DAC_MspInit+0xec>)
 8001078:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800107c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <HAL_DAC_MspInit+0xec>)
 8001080:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001084:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <HAL_DAC_MspInit+0xec>)
 8001088:	f44f 7280 	mov.w	r2, #256	; 0x100
 800108c:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <HAL_DAC_MspInit+0xec>)
 8001090:	2200      	movs	r2, #0
 8001092:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001094:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <HAL_DAC_MspInit+0xec>)
 8001096:	2200      	movs	r2, #0
 8001098:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800109a:	480c      	ldr	r0, [pc, #48]	; (80010cc <HAL_DAC_MspInit+0xec>)
 800109c:	f001 fe68 	bl	8002d70 <HAL_DMA_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 80010a6:	f7ff feb5 	bl	8000e14 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a07      	ldr	r2, [pc, #28]	; (80010cc <HAL_DAC_MspInit+0xec>)
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	4a06      	ldr	r2, [pc, #24]	; (80010cc <HAL_DAC_MspInit+0xec>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80010b6:	bf00      	nop
 80010b8:	3728      	adds	r7, #40	; 0x28
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40007400 	.word	0x40007400
 80010c4:	58024400 	.word	0x58024400
 80010c8:	58020000 	.word	0x58020000
 80010cc:	2400013c 	.word	0x2400013c
 80010d0:	40020410 	.word	0x40020410

080010d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010f4:	d12e      	bne.n	8001154 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010f6:	4b23      	ldr	r3, [pc, #140]	; (8001184 <HAL_TIM_Base_MspInit+0xb0>)
 80010f8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80010fc:	4a21      	ldr	r2, [pc, #132]	; (8001184 <HAL_TIM_Base_MspInit+0xb0>)
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001106:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <HAL_TIM_Base_MspInit+0xb0>)
 8001108:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001114:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <HAL_TIM_Base_MspInit+0xb0>)
 8001116:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800111a:	4a1a      	ldr	r2, [pc, #104]	; (8001184 <HAL_TIM_Base_MspInit+0xb0>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001124:	4b17      	ldr	r3, [pc, #92]	; (8001184 <HAL_TIM_Base_MspInit+0xb0>)
 8001126:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001132:	2301      	movs	r3, #1
 8001134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001136:	2302      	movs	r3, #2
 8001138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113e:	2303      	movs	r3, #3
 8001140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001142:	2301      	movs	r3, #1
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4619      	mov	r1, r3
 800114c:	480e      	ldr	r0, [pc, #56]	; (8001188 <HAL_TIM_Base_MspInit+0xb4>)
 800114e:	f003 ff8b 	bl	8005068 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001152:	e013      	b.n	800117c <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM6)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a0c      	ldr	r2, [pc, #48]	; (800118c <HAL_TIM_Base_MspInit+0xb8>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d10e      	bne.n	800117c <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <HAL_TIM_Base_MspInit+0xb0>)
 8001160:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001164:	4a07      	ldr	r2, [pc, #28]	; (8001184 <HAL_TIM_Base_MspInit+0xb0>)
 8001166:	f043 0310 	orr.w	r3, r3, #16
 800116a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800116e:	4b05      	ldr	r3, [pc, #20]	; (8001184 <HAL_TIM_Base_MspInit+0xb0>)
 8001170:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001174:	f003 0310 	and.w	r3, r3, #16
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
}
 800117c:	bf00      	nop
 800117e:	3728      	adds	r7, #40	; 0x28
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	58024400 	.word	0x58024400
 8001188:	58020000 	.word	0x58020000
 800118c:	40001000 	.word	0x40001000

08001190 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	; 0x28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a1a      	ldr	r2, [pc, #104]	; (8001218 <HAL_UART_MspInit+0x88>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d12e      	bne.n	8001210 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011b2:	4b1a      	ldr	r3, [pc, #104]	; (800121c <HAL_UART_MspInit+0x8c>)
 80011b4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80011b8:	4a18      	ldr	r2, [pc, #96]	; (800121c <HAL_UART_MspInit+0x8c>)
 80011ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011be:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80011c2:	4b16      	ldr	r3, [pc, #88]	; (800121c <HAL_UART_MspInit+0x8c>)
 80011c4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80011c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_UART_MspInit+0x8c>)
 80011d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011d6:	4a11      	ldr	r2, [pc, #68]	; (800121c <HAL_UART_MspInit+0x8c>)
 80011d8:	f043 0308 	orr.w	r3, r3, #8
 80011dc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80011e0:	4b0e      	ldr	r3, [pc, #56]	; (800121c <HAL_UART_MspInit+0x8c>)
 80011e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011e6:	f003 0308 	and.w	r3, r3, #8
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80011ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f4:	2302      	movs	r3, #2
 80011f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001200:	2307      	movs	r3, #7
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	4619      	mov	r1, r3
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <HAL_UART_MspInit+0x90>)
 800120c:	f003 ff2c 	bl	8005068 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001210:	bf00      	nop
 8001212:	3728      	adds	r7, #40	; 0x28
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40004800 	.word	0x40004800
 800121c:	58024400 	.word	0x58024400
 8001220:	58020c00 	.word	0x58020c00

08001224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001236:	e7fe      	b.n	8001236 <HardFault_Handler+0x4>

08001238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800123c:	e7fe      	b.n	800123c <MemManage_Handler+0x4>

0800123e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001242:	e7fe      	b.n	8001242 <BusFault_Handler+0x4>

08001244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <UsageFault_Handler+0x4>

0800124a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001278:	f000 f9ec 	bl	8001654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}

08001280 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001284:	4802      	ldr	r0, [pc, #8]	; (8001290 <DMA1_Stream0_IRQHandler+0x10>)
 8001286:	f002 fb6d 	bl	8003964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	24000220 	.word	0x24000220

08001294 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001298:	4802      	ldr	r0, [pc, #8]	; (80012a4 <DMA2_Stream0_IRQHandler+0x10>)
 800129a:	f002 fb63 	bl	8003964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	2400013c 	.word	0x2400013c

080012a8 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80012b2:	f008 fb61 	bl	8009978 <__errno>
 80012b6:	4602      	mov	r2, r0
 80012b8:	2316      	movs	r3, #22
 80012ba:	6013      	str	r3, [r2, #0]
	return -1;
 80012bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <_exit>:

void _exit (int status)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80012d0:	f04f 31ff 	mov.w	r1, #4294967295
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff ffe7 	bl	80012a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80012da:	e7fe      	b.n	80012da <_exit+0x12>

080012dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	e00a      	b.n	8001304 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012ee:	f3af 8000 	nop.w
 80012f2:	4601      	mov	r1, r0
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	60ba      	str	r2, [r7, #8]
 80012fa:	b2ca      	uxtb	r2, r1
 80012fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	3301      	adds	r3, #1
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	697a      	ldr	r2, [r7, #20]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	429a      	cmp	r2, r3
 800130a:	dbf0      	blt.n	80012ee <_read+0x12>
	}

return len;
 800130c:	687b      	ldr	r3, [r7, #4]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b086      	sub	sp, #24
 800131a:	af00      	add	r7, sp, #0
 800131c:	60f8      	str	r0, [r7, #12]
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	e009      	b.n	800133c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	1c5a      	adds	r2, r3, #1
 800132c:	60ba      	str	r2, [r7, #8]
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	3301      	adds	r3, #1
 800133a:	617b      	str	r3, [r7, #20]
 800133c:	697a      	ldr	r2, [r7, #20]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	429a      	cmp	r2, r3
 8001342:	dbf1      	blt.n	8001328 <_write+0x12>
	}
	return len;
 8001344:	687b      	ldr	r3, [r7, #4]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <_close>:

int _close(int file)
{
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
	return -1;
 8001356:	f04f 33ff 	mov.w	r3, #4294967295
}
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
 800136e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001376:	605a      	str	r2, [r3, #4]
	return 0;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <_isatty>:

int _isatty(int file)
{
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
	return 1;
 800138e:	2301      	movs	r3, #1
}
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
	return 0;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013c0:	4a14      	ldr	r2, [pc, #80]	; (8001414 <_sbrk+0x5c>)
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <_sbrk+0x60>)
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013cc:	4b13      	ldr	r3, [pc, #76]	; (800141c <_sbrk+0x64>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d102      	bne.n	80013da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013d4:	4b11      	ldr	r3, [pc, #68]	; (800141c <_sbrk+0x64>)
 80013d6:	4a12      	ldr	r2, [pc, #72]	; (8001420 <_sbrk+0x68>)
 80013d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013da:	4b10      	ldr	r3, [pc, #64]	; (800141c <_sbrk+0x64>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d207      	bcs.n	80013f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013e8:	f008 fac6 	bl	8009978 <__errno>
 80013ec:	4602      	mov	r2, r0
 80013ee:	230c      	movs	r3, #12
 80013f0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80013f2:	f04f 33ff 	mov.w	r3, #4294967295
 80013f6:	e009      	b.n	800140c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013f8:	4b08      	ldr	r3, [pc, #32]	; (800141c <_sbrk+0x64>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013fe:	4b07      	ldr	r3, [pc, #28]	; (800141c <_sbrk+0x64>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	4a05      	ldr	r2, [pc, #20]	; (800141c <_sbrk+0x64>)
 8001408:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800140a:	68fb      	ldr	r3, [r7, #12]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	24100000 	.word	0x24100000
 8001418:	00000400 	.word	0x00000400
 800141c:	24000090 	.word	0x24000090
 8001420:	24000338 	.word	0x24000338

08001424 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001428:	4b34      	ldr	r3, [pc, #208]	; (80014fc <SystemInit+0xd8>)
 800142a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800142e:	4a33      	ldr	r2, [pc, #204]	; (80014fc <SystemInit+0xd8>)
 8001430:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001434:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001438:	4b31      	ldr	r3, [pc, #196]	; (8001500 <SystemInit+0xdc>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 030f 	and.w	r3, r3, #15
 8001440:	2b02      	cmp	r3, #2
 8001442:	d807      	bhi.n	8001454 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001444:	4b2e      	ldr	r3, [pc, #184]	; (8001500 <SystemInit+0xdc>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f023 030f 	bic.w	r3, r3, #15
 800144c:	4a2c      	ldr	r2, [pc, #176]	; (8001500 <SystemInit+0xdc>)
 800144e:	f043 0303 	orr.w	r3, r3, #3
 8001452:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001454:	4b2b      	ldr	r3, [pc, #172]	; (8001504 <SystemInit+0xe0>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a2a      	ldr	r2, [pc, #168]	; (8001504 <SystemInit+0xe0>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001460:	4b28      	ldr	r3, [pc, #160]	; (8001504 <SystemInit+0xe0>)
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001466:	4b27      	ldr	r3, [pc, #156]	; (8001504 <SystemInit+0xe0>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	4926      	ldr	r1, [pc, #152]	; (8001504 <SystemInit+0xe0>)
 800146c:	4b26      	ldr	r3, [pc, #152]	; (8001508 <SystemInit+0xe4>)
 800146e:	4013      	ands	r3, r2
 8001470:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001472:	4b23      	ldr	r3, [pc, #140]	; (8001500 <SystemInit+0xdc>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 030f 	and.w	r3, r3, #15
 800147a:	2b03      	cmp	r3, #3
 800147c:	d907      	bls.n	800148e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800147e:	4b20      	ldr	r3, [pc, #128]	; (8001500 <SystemInit+0xdc>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f023 030f 	bic.w	r3, r3, #15
 8001486:	4a1e      	ldr	r2, [pc, #120]	; (8001500 <SystemInit+0xdc>)
 8001488:	f043 0303 	orr.w	r3, r3, #3
 800148c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800148e:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <SystemInit+0xe0>)
 8001490:	2200      	movs	r2, #0
 8001492:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001494:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <SystemInit+0xe0>)
 8001496:	2200      	movs	r2, #0
 8001498:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800149a:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <SystemInit+0xe0>)
 800149c:	2200      	movs	r2, #0
 800149e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014a0:	4b18      	ldr	r3, [pc, #96]	; (8001504 <SystemInit+0xe0>)
 80014a2:	4a1a      	ldr	r2, [pc, #104]	; (800150c <SystemInit+0xe8>)
 80014a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014a6:	4b17      	ldr	r3, [pc, #92]	; (8001504 <SystemInit+0xe0>)
 80014a8:	4a19      	ldr	r2, [pc, #100]	; (8001510 <SystemInit+0xec>)
 80014aa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014ac:	4b15      	ldr	r3, [pc, #84]	; (8001504 <SystemInit+0xe0>)
 80014ae:	4a19      	ldr	r2, [pc, #100]	; (8001514 <SystemInit+0xf0>)
 80014b0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014b2:	4b14      	ldr	r3, [pc, #80]	; (8001504 <SystemInit+0xe0>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <SystemInit+0xe0>)
 80014ba:	4a16      	ldr	r2, [pc, #88]	; (8001514 <SystemInit+0xf0>)
 80014bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014be:	4b11      	ldr	r3, [pc, #68]	; (8001504 <SystemInit+0xe0>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <SystemInit+0xe0>)
 80014c6:	4a13      	ldr	r2, [pc, #76]	; (8001514 <SystemInit+0xf0>)
 80014c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <SystemInit+0xe0>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <SystemInit+0xe0>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a0b      	ldr	r2, [pc, #44]	; (8001504 <SystemInit+0xe0>)
 80014d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <SystemInit+0xe0>)
 80014de:	2200      	movs	r2, #0
 80014e0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014e2:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <SystemInit+0xf4>)
 80014e4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80014e8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014ea:	4b04      	ldr	r3, [pc, #16]	; (80014fc <SystemInit+0xd8>)
 80014ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014f0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	e000ed00 	.word	0xe000ed00
 8001500:	52002000 	.word	0x52002000
 8001504:	58024400 	.word	0x58024400
 8001508:	eaf6ed7f 	.word	0xeaf6ed7f
 800150c:	02020200 	.word	0x02020200
 8001510:	01ff0000 	.word	0x01ff0000
 8001514:	01010280 	.word	0x01010280
 8001518:	52004000 	.word	0x52004000

0800151c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800151c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001554 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001520:	f7ff ff80 	bl	8001424 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001524:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001526:	e003      	b.n	8001530 <LoopCopyDataInit>

08001528 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001528:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800152a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800152c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800152e:	3104      	adds	r1, #4

08001530 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001530:	480a      	ldr	r0, [pc, #40]	; (800155c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001532:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001534:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001536:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001538:	d3f6      	bcc.n	8001528 <CopyDataInit>
  ldr  r2, =_sbss
 800153a:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 800153c:	e002      	b.n	8001544 <LoopFillZerobss>

0800153e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800153e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001540:	f842 3b04 	str.w	r3, [r2], #4

08001544 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001544:	4b08      	ldr	r3, [pc, #32]	; (8001568 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001546:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001548:	d3f9      	bcc.n	800153e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800154a:	f008 fa2f 	bl	80099ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800154e:	f7ff f84f 	bl	80005f0 <main>
  bx  lr
 8001552:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001554:	24100000 	.word	0x24100000
  ldr  r3, =_sidata
 8001558:	0800a3ec 	.word	0x0800a3ec
  ldr  r0, =_sdata
 800155c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001560:	24000074 	.word	0x24000074
  ldr  r2, =_sbss
 8001564:	24000074 	.word	0x24000074
  ldr  r3, = _ebss
 8001568:	24000338 	.word	0x24000338

0800156c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800156c:	e7fe      	b.n	800156c <ADC_IRQHandler>
	...

08001570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001576:	2003      	movs	r0, #3
 8001578:	f001 f88a 	bl	8002690 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800157c:	f004 fd36 	bl	8005fec <HAL_RCC_GetSysClockFreq>
 8001580:	4601      	mov	r1, r0
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <HAL_Init+0x68>)
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	0a1b      	lsrs	r3, r3, #8
 8001588:	f003 030f 	and.w	r3, r3, #15
 800158c:	4a13      	ldr	r2, [pc, #76]	; (80015dc <HAL_Init+0x6c>)
 800158e:	5cd3      	ldrb	r3, [r2, r3]
 8001590:	f003 031f 	and.w	r3, r3, #31
 8001594:	fa21 f303 	lsr.w	r3, r1, r3
 8001598:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800159a:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <HAL_Init+0x68>)
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	4a0e      	ldr	r2, [pc, #56]	; (80015dc <HAL_Init+0x6c>)
 80015a4:	5cd3      	ldrb	r3, [r2, r3]
 80015a6:	f003 031f 	and.w	r3, r3, #31
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	fa22 f303 	lsr.w	r3, r2, r3
 80015b0:	4a0b      	ldr	r2, [pc, #44]	; (80015e0 <HAL_Init+0x70>)
 80015b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80015b4:	4a0b      	ldr	r2, [pc, #44]	; (80015e4 <HAL_Init+0x74>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015ba:	2000      	movs	r0, #0
 80015bc:	f000 f814 	bl	80015e8 <HAL_InitTick>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e002      	b.n	80015d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80015ca:	f7ff fc75 	bl	8000eb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	58024400 	.word	0x58024400
 80015dc:	0800a348 	.word	0x0800a348
 80015e0:	24000004 	.word	0x24000004
 80015e4:	24000000 	.word	0x24000000

080015e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015f0:	4b15      	ldr	r3, [pc, #84]	; (8001648 <HAL_InitTick+0x60>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d101      	bne.n	80015fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e021      	b.n	8001640 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015fc:	4b13      	ldr	r3, [pc, #76]	; (800164c <HAL_InitTick+0x64>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <HAL_InitTick+0x60>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	4619      	mov	r1, r3
 8001606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160a:	fbb3 f3f1 	udiv	r3, r3, r1
 800160e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001612:	4618      	mov	r0, r3
 8001614:	f001 f86f 	bl	80026f6 <HAL_SYSTICK_Config>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e00e      	b.n	8001640 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b0f      	cmp	r3, #15
 8001626:	d80a      	bhi.n	800163e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001628:	2200      	movs	r2, #0
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	f04f 30ff 	mov.w	r0, #4294967295
 8001630:	f001 f839 	bl	80026a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001634:	4a06      	ldr	r2, [pc, #24]	; (8001650 <HAL_InitTick+0x68>)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800163a:	2300      	movs	r3, #0
 800163c:	e000      	b.n	8001640 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
}
 8001640:	4618      	mov	r0, r3
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	2400000c 	.word	0x2400000c
 800164c:	24000000 	.word	0x24000000
 8001650:	24000008 	.word	0x24000008

08001654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_IncTick+0x20>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_IncTick+0x24>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4413      	add	r3, r2
 8001664:	4a04      	ldr	r2, [pc, #16]	; (8001678 <HAL_IncTick+0x24>)
 8001666:	6013      	str	r3, [r2, #0]
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	2400000c 	.word	0x2400000c
 8001678:	24000330 	.word	0x24000330

0800167c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return uwTick;
 8001680:	4b03      	ldr	r3, [pc, #12]	; (8001690 <HAL_GetTick+0x14>)
 8001682:	681b      	ldr	r3, [r3, #0]
}
 8001684:	4618      	mov	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	24000330 	.word	0x24000330

08001694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800169c:	f7ff ffee 	bl	800167c <HAL_GetTick>
 80016a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ac:	d005      	beq.n	80016ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ae:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <HAL_Delay+0x40>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4413      	add	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ba:	bf00      	nop
 80016bc:	f7ff ffde 	bl	800167c <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d8f7      	bhi.n	80016bc <HAL_Delay+0x28>
  {
  }
}
 80016cc:	bf00      	nop
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	2400000c 	.word	0x2400000c

080016d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	431a      	orrs	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	609a      	str	r2, [r3, #8]
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
 8001706:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	609a      	str	r2, [r3, #8]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001734:	4618      	mov	r0, r3
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001740:	b480      	push	{r7}
 8001742:	b087      	sub	sp, #28
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
 800174c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	3360      	adds	r3, #96	; 0x60
 8001752:	461a      	mov	r2, r3
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	430b      	orrs	r3, r1
 800176e:	431a      	orrs	r2, r3
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001774:	bf00      	nop
 8001776:	371c      	adds	r7, #28
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	f003 031f 	and.w	r3, r3, #31
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	fa01 f303 	lsl.w	r3, r1, r3
 80017a0:	431a      	orrs	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	611a      	str	r2, [r3, #16]
}
 80017a6:	bf00      	nop
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b087      	sub	sp, #28
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	60f8      	str	r0, [r7, #12]
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	3360      	adds	r3, #96	; 0x60
 80017c2:	461a      	mov	r2, r3
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	431a      	orrs	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	601a      	str	r2, [r3, #0]
  }
}
 80017dc:	bf00      	nop
 80017de:	371c      	adds	r7, #28
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b087      	sub	sp, #28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	3330      	adds	r3, #48	; 0x30
 80017f8:	461a      	mov	r2, r3
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	0a1b      	lsrs	r3, r3, #8
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	f003 030c 	and.w	r3, r3, #12
 8001804:	4413      	add	r3, r2
 8001806:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	f003 031f 	and.w	r3, r3, #31
 8001812:	211f      	movs	r1, #31
 8001814:	fa01 f303 	lsl.w	r3, r1, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	401a      	ands	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	0e9b      	lsrs	r3, r3, #26
 8001820:	f003 011f 	and.w	r1, r3, #31
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	f003 031f 	and.w	r3, r3, #31
 800182a:	fa01 f303 	lsl.w	r3, r1, r3
 800182e:	431a      	orrs	r2, r3
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001834:	bf00      	nop
 8001836:	371c      	adds	r7, #28
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001840:	b480      	push	{r7}
 8001842:	b087      	sub	sp, #28
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	3314      	adds	r3, #20
 8001850:	461a      	mov	r2, r3
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	0e5b      	lsrs	r3, r3, #25
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	4413      	add	r3, r2
 800185e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	0d1b      	lsrs	r3, r3, #20
 8001868:	f003 031f 	and.w	r3, r3, #31
 800186c:	2107      	movs	r1, #7
 800186e:	fa01 f303 	lsl.w	r3, r1, r3
 8001872:	43db      	mvns	r3, r3
 8001874:	401a      	ands	r2, r3
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	0d1b      	lsrs	r3, r3, #20
 800187a:	f003 031f 	and.w	r3, r3, #31
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	fa01 f303 	lsl.w	r3, r1, r3
 8001884:	431a      	orrs	r2, r3
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800188a:	bf00      	nop
 800188c:	371c      	adds	r7, #28
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018b0:	43db      	mvns	r3, r3
 80018b2:	401a      	ands	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f003 0318 	and.w	r3, r3, #24
 80018ba:	4908      	ldr	r1, [pc, #32]	; (80018dc <LL_ADC_SetChannelSingleDiff+0x44>)
 80018bc:	40d9      	lsrs	r1, r3
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	400b      	ands	r3, r1
 80018c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018c6:	431a      	orrs	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80018ce:	bf00      	nop
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	000fffff 	.word	0x000fffff

080018e0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	4b04      	ldr	r3, [pc, #16]	; (8001900 <LL_ADC_DisableDeepPowerDown+0x20>)
 80018ee:	4013      	ands	r3, r2
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	6093      	str	r3, [r2, #8]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	5fffffc0 	.word	0x5fffffc0

08001904 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001914:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001918:	d101      	bne.n	800191e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800191a:	2301      	movs	r3, #1
 800191c:	e000      	b.n	8001920 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <LL_ADC_EnableInternalRegulator+0x24>)
 800193a:	4013      	ands	r3, r2
 800193c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	6fffffc0 	.word	0x6fffffc0

08001954 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001964:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001968:	d101      	bne.n	800196e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800196a:	2301      	movs	r3, #1
 800196c:	e000      	b.n	8001970 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b01      	cmp	r3, #1
 800198e:	d101      	bne.n	8001994 <LL_ADC_IsEnabled+0x18>
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <LL_ADC_IsEnabled+0x1a>
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 0304 	and.w	r3, r3, #4
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d101      	bne.n	80019ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80019b6:	2301      	movs	r3, #1
 80019b8:	e000      	b.n	80019bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 0308 	and.w	r3, r3, #8
 80019d8:	2b08      	cmp	r3, #8
 80019da:	d101      	bne.n	80019e0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80019dc:	2301      	movs	r3, #1
 80019de:	e000      	b.n	80019e2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019f0:	b590      	push	{r4, r7, lr}
 80019f2:	b089      	sub	sp, #36	; 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019f8:	2300      	movs	r3, #0
 80019fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e137      	b.n	8001c7a <HAL_ADC_Init+0x28a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d109      	bne.n	8001a2c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff fa67 	bl	8000eec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff67 	bl	8001904 <LL_ADC_IsDeepPowerDownEnabled>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d004      	beq.n	8001a46 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff4d 	bl	80018e0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff ff82 	bl	8001954 <LL_ADC_IsInternalRegulatorEnabled>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d113      	bne.n	8001a7e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff ff66 	bl	800192c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001a60:	4b88      	ldr	r3, [pc, #544]	; (8001c84 <HAL_ADC_Init+0x294>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	099b      	lsrs	r3, r3, #6
 8001a66:	4a88      	ldr	r2, [pc, #544]	; (8001c88 <HAL_ADC_Init+0x298>)
 8001a68:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6c:	099b      	lsrs	r3, r3, #6
 8001a6e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a70:	e002      	b.n	8001a78 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	3b01      	subs	r3, #1
 8001a76:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f9      	bne.n	8001a72 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff ff66 	bl	8001954 <LL_ADC_IsInternalRegulatorEnabled>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d10d      	bne.n	8001aaa <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a92:	f043 0210 	orr.w	r2, r3, #16
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9e:	f043 0201 	orr.w	r2, r3, #1
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff ff77 	bl	80019a2 <LL_ADC_REG_IsConversionOngoing>
 8001ab4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aba:	f003 0310 	and.w	r3, r3, #16
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f040 80d2 	bne.w	8001c68 <HAL_ADC_Init+0x278>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f040 80ce 	bne.w	8001c68 <HAL_ADC_Init+0x278>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ad4:	f043 0202 	orr.w	r2, r3, #2
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff4b 	bl	800197c <LL_ADC_IsEnabled>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d110      	bne.n	8001b0e <HAL_ADC_Init+0x11e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001aec:	4867      	ldr	r0, [pc, #412]	; (8001c8c <HAL_ADC_Init+0x29c>)
 8001aee:	f7ff ff45 	bl	800197c <LL_ADC_IsEnabled>
 8001af2:	4604      	mov	r4, r0
 8001af4:	4866      	ldr	r0, [pc, #408]	; (8001c90 <HAL_ADC_Init+0x2a0>)
 8001af6:	f7ff ff41 	bl	800197c <LL_ADC_IsEnabled>
 8001afa:	4603      	mov	r3, r0
 8001afc:	4323      	orrs	r3, r4
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d105      	bne.n	8001b0e <HAL_ADC_Init+0x11e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	4619      	mov	r1, r3
 8001b08:	4862      	ldr	r0, [pc, #392]	; (8001c94 <HAL_ADC_Init+0x2a4>)
 8001b0a:	f7ff fde5 	bl	80016d8 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	7d5b      	ldrb	r3, [r3, #21]
 8001b12:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b18:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001b1e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	7f1b      	ldrb	r3, [r3, #28]
 8001b24:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	7f1b      	ldrb	r3, [r3, #28]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d106      	bne.n	8001b40 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	045b      	lsls	r3, r3, #17
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d009      	beq.n	8001b5c <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b54:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68da      	ldr	r2, [r3, #12]
 8001b62:	4b4d      	ldr	r3, [pc, #308]	; (8001c98 <HAL_ADC_Init+0x2a8>)
 8001b64:	4013      	ands	r3, r2
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6812      	ldr	r2, [r2, #0]
 8001b6a:	69b9      	ldr	r1, [r7, #24]
 8001b6c:	430b      	orrs	r3, r1
 8001b6e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff ff14 	bl	80019a2 <LL_ADC_REG_IsConversionOngoing>
 8001b7a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff21 	bl	80019c8 <LL_ADC_INJ_IsConversionOngoing>
 8001b86:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d14a      	bne.n	8001c24 <HAL_ADC_Init+0x234>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d147      	bne.n	8001c24 <HAL_ADC_Init+0x234>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	7d1b      	ldrb	r3, [r3, #20]
 8001b98:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68da      	ldr	r2, [r3, #12]
 8001ba8:	4b3c      	ldr	r3, [pc, #240]	; (8001c9c <HAL_ADC_Init+0x2ac>)
 8001baa:	4013      	ands	r3, r2
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6812      	ldr	r2, [r2, #0]
 8001bb0:	69b9      	ldr	r1, [r7, #24]
 8001bb2:	430b      	orrs	r3, r1
 8001bb4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d11b      	bne.n	8001bf8 <HAL_ADC_Init+0x208>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc4:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	691a      	ldr	r2, [r3, #16]
 8001bcc:	4b34      	ldr	r3, [pc, #208]	; (8001ca0 <HAL_ADC_Init+0x2b0>)
 8001bce:	4013      	ands	r3, r2
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001bd4:	3a01      	subs	r2, #1
 8001bd6:	0411      	lsls	r1, r2, #16
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bdc:	4311      	orrs	r1, r2
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001be2:	4311      	orrs	r1, r2
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001be8:	430a      	orrs	r2, r1
 8001bea:	431a      	orrs	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f042 0201 	orr.w	r2, r2, #1
 8001bf4:	611a      	str	r2, [r3, #16]
 8001bf6:	e007      	b.n	8001c08 <HAL_ADC_Init+0x218>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	691a      	ldr	r2, [r3, #16]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 0201 	bic.w	r2, r2, #1
 8001c06:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 faee 	bl	8002200 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d10c      	bne.n	8001c46 <HAL_ADC_Init+0x256>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	f023 010f 	bic.w	r1, r3, #15
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	1e5a      	subs	r2, r3, #1
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	430a      	orrs	r2, r1
 8001c42:	631a      	str	r2, [r3, #48]	; 0x30
 8001c44:	e007      	b.n	8001c56 <HAL_ADC_Init+0x266>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 020f 	bic.w	r2, r2, #15
 8001c54:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c5a:	f023 0303 	bic.w	r3, r3, #3
 8001c5e:	f043 0201 	orr.w	r2, r3, #1
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	655a      	str	r2, [r3, #84]	; 0x54
 8001c66:	e007      	b.n	8001c78 <HAL_ADC_Init+0x288>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6c:	f043 0210 	orr.w	r2, r3, #16
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c78:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3724      	adds	r7, #36	; 0x24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd90      	pop	{r4, r7, pc}
 8001c82:	bf00      	nop
 8001c84:	24000000 	.word	0x24000000
 8001c88:	053e2d63 	.word	0x053e2d63
 8001c8c:	40022000 	.word	0x40022000
 8001c90:	40022100 	.word	0x40022100
 8001c94:	40022300 	.word	0x40022300
 8001c98:	fff0c003 	.word	0xfff0c003
 8001c9c:	ffffbffc 	.word	0xffffbffc
 8001ca0:	fc00f81e 	.word	0xfc00f81e

08001ca4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ca4:	b590      	push	{r4, r7, lr}
 8001ca6:	b099      	sub	sp, #100	; 0x64
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	4aa1      	ldr	r2, [pc, #644]	; (8001f44 <HAL_ADC_ConfigChannel+0x2a0>)
 8001cbe:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d101      	bne.n	8001cce <HAL_ADC_ConfigChannel+0x2a>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	e283      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x532>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fe61 	bl	80019a2 <LL_ADC_REG_IsConversionOngoing>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f040 8268 	bne.w	80021b8 <HAL_ADC_ConfigChannel+0x514>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d108      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x62>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	0e9b      	lsrs	r3, r3, #26
 8001cfa:	f003 031f 	and.w	r3, r3, #31
 8001cfe:	2201      	movs	r2, #1
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	e00f      	b.n	8001d26 <HAL_ADC_ConfigChannel+0x82>
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d0e:	fa93 f3a3 	rbit	r3, r3
 8001d12:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d16:	fab3 f383 	clz	r3, r3
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	f003 031f 	and.w	r3, r3, #31
 8001d20:	2201      	movs	r2, #1
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6812      	ldr	r2, [r2, #0]
 8001d2a:	69d1      	ldr	r1, [r2, #28]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6812      	ldr	r2, [r2, #0]
 8001d30:	430b      	orrs	r3, r1
 8001d32:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6818      	ldr	r0, [r3, #0]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	6859      	ldr	r1, [r3, #4]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	461a      	mov	r2, r3
 8001d42:	f7ff fd51 	bl	80017e8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff fe29 	bl	80019a2 <LL_ADC_REG_IsConversionOngoing>
 8001d50:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff fe36 	bl	80019c8 <LL_ADC_INJ_IsConversionOngoing>
 8001d5c:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f040 80a0 	bne.w	8001ea6 <HAL_ADC_ConfigChannel+0x202>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f040 809c 	bne.w	8001ea6 <HAL_ADC_ConfigChannel+0x202>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6818      	ldr	r0, [r3, #0]
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	6819      	ldr	r1, [r3, #0]
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	f7ff fd60 	bl	8001840 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	f003 0310 	and.w	r3, r3, #16
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10b      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x102>
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	695a      	ldr	r2, [r3, #20]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	089b      	lsrs	r3, r3, #2
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	e00a      	b.n	8001dbc <HAL_ADC_ConfigChannel+0x118>
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	695a      	ldr	r2, [r3, #20]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	089b      	lsrs	r3, r3, #2
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	d027      	beq.n	8001e16 <HAL_ADC_ConfigChannel+0x172>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6818      	ldr	r0, [r3, #0]
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	6919      	ldr	r1, [r3, #16]
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dd4:	f7ff fcb4 	bl	8001740 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6818      	ldr	r0, [r3, #0]
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	6919      	ldr	r1, [r3, #16]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	7e5b      	ldrb	r3, [r3, #25]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d102      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x14a>
 8001de8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001dec:	e000      	b.n	8001df0 <HAL_ADC_ConfigChannel+0x14c>
 8001dee:	2300      	movs	r3, #0
 8001df0:	461a      	mov	r2, r3
 8001df2:	f7ff fcde 	bl	80017b2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6818      	ldr	r0, [r3, #0]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	6919      	ldr	r1, [r3, #16]
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	7e1b      	ldrb	r3, [r3, #24]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d102      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x168>
 8001e06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e0a:	e000      	b.n	8001e0e <HAL_ADC_ConfigChannel+0x16a>
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	461a      	mov	r2, r3
 8001e10:	f7ff fcb6 	bl	8001780 <LL_ADC_SetDataRightShift>
 8001e14:	e047      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x202>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	069b      	lsls	r3, r3, #26
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d107      	bne.n	8001e3a <HAL_ADC_ConfigChannel+0x196>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e38:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	069b      	lsls	r3, r3, #26
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d107      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x1ba>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e5c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	069b      	lsls	r3, r3, #26
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d107      	bne.n	8001e82 <HAL_ADC_ConfigChannel+0x1de>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e80:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	069b      	lsls	r3, r3, #26
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d107      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x202>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ea4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff fd66 	bl	800197c <LL_ADC_IsEnabled>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f040 8189 	bne.w	80021ca <HAL_ADC_ConfigChannel+0x526>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6818      	ldr	r0, [r3, #0]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	6819      	ldr	r1, [r3, #0]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	f7ff fce7 	bl	8001898 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	4a1d      	ldr	r2, [pc, #116]	; (8001f44 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	f040 80ff 	bne.w	80020d4 <HAL_ADC_ConfigChannel+0x430>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10b      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x25a>
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	0e9b      	lsrs	r3, r3, #26
 8001eec:	3301      	adds	r3, #1
 8001eee:	f003 031f 	and.w	r3, r3, #31
 8001ef2:	2b09      	cmp	r3, #9
 8001ef4:	bf94      	ite	ls
 8001ef6:	2301      	movls	r3, #1
 8001ef8:	2300      	movhi	r3, #0
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	e012      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x280>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f06:	fa93 f3a3 	rbit	r3, r3
 8001f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f0e:	fab3 f383 	clz	r3, r3
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	3301      	adds	r3, #1
 8001f16:	f003 031f 	and.w	r3, r3, #31
 8001f1a:	2b09      	cmp	r3, #9
 8001f1c:	bf94      	ite	ls
 8001f1e:	2301      	movls	r3, #1
 8001f20:	2300      	movhi	r3, #0
 8001f22:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d066      	beq.n	8001ff6 <HAL_ADC_ConfigChannel+0x352>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d109      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x2a4>
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	0e9b      	lsrs	r3, r3, #26
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	069b      	lsls	r3, r3, #26
 8001f3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f42:	e010      	b.n	8001f66 <HAL_ADC_ConfigChannel+0x2c2>
 8001f44:	47ff0000 	.word	0x47ff0000
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f50:	fa93 f3a3 	rbit	r3, r3
 8001f54:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f58:	fab3 f383 	clz	r3, r3
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	3301      	adds	r3, #1
 8001f60:	069b      	lsls	r3, r3, #26
 8001f62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d109      	bne.n	8001f86 <HAL_ADC_ConfigChannel+0x2e2>
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	0e9b      	lsrs	r3, r3, #26
 8001f78:	3301      	adds	r3, #1
 8001f7a:	f003 031f 	and.w	r3, r3, #31
 8001f7e:	2101      	movs	r1, #1
 8001f80:	fa01 f303 	lsl.w	r3, r1, r3
 8001f84:	e010      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x304>
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8e:	fa93 f3a3 	rbit	r3, r3
 8001f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f96:	fab3 f383 	clz	r3, r3
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	f003 031f 	and.w	r3, r3, #31
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa8:	ea42 0103 	orr.w	r1, r2, r3
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10a      	bne.n	8001fce <HAL_ADC_ConfigChannel+0x32a>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	0e9b      	lsrs	r3, r3, #26
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	f003 021f 	and.w	r2, r3, #31
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	4413      	add	r3, r2
 8001fca:	051b      	lsls	r3, r3, #20
 8001fcc:	e011      	b.n	8001ff2 <HAL_ADC_ConfigChannel+0x34e>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd6:	fa93 f3a3 	rbit	r3, r3
 8001fda:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	fab3 f383 	clz	r3, r3
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	f003 021f 	and.w	r2, r3, #31
 8001fea:	4613      	mov	r3, r2
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	4413      	add	r3, r2
 8001ff0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ff2:	430b      	orrs	r3, r1
 8001ff4:	e069      	b.n	80020ca <HAL_ADC_ConfigChannel+0x426>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d107      	bne.n	8002012 <HAL_ADC_ConfigChannel+0x36e>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	0e9b      	lsrs	r3, r3, #26
 8002008:	3301      	adds	r3, #1
 800200a:	069b      	lsls	r3, r3, #26
 800200c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002010:	e00e      	b.n	8002030 <HAL_ADC_ConfigChannel+0x38c>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002018:	6a3b      	ldr	r3, [r7, #32]
 800201a:	fa93 f3a3 	rbit	r3, r3
 800201e:	61fb      	str	r3, [r7, #28]
  return result;
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	fab3 f383 	clz	r3, r3
 8002026:	b2db      	uxtb	r3, r3
 8002028:	3301      	adds	r3, #1
 800202a:	069b      	lsls	r3, r3, #26
 800202c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002038:	2b00      	cmp	r3, #0
 800203a:	d109      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x3ac>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	0e9b      	lsrs	r3, r3, #26
 8002042:	3301      	adds	r3, #1
 8002044:	f003 031f 	and.w	r3, r3, #31
 8002048:	2101      	movs	r1, #1
 800204a:	fa01 f303 	lsl.w	r3, r1, r3
 800204e:	e010      	b.n	8002072 <HAL_ADC_ConfigChannel+0x3ce>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	fa93 f3a3 	rbit	r3, r3
 800205c:	617b      	str	r3, [r7, #20]
  return result;
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	fab3 f383 	clz	r3, r3
 8002064:	b2db      	uxtb	r3, r3
 8002066:	3301      	adds	r3, #1
 8002068:	f003 031f 	and.w	r3, r3, #31
 800206c:	2101      	movs	r1, #1
 800206e:	fa01 f303 	lsl.w	r3, r1, r3
 8002072:	ea42 0103 	orr.w	r1, r2, r3
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10d      	bne.n	800209e <HAL_ADC_ConfigChannel+0x3fa>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	0e9b      	lsrs	r3, r3, #26
 8002088:	3301      	adds	r3, #1
 800208a:	f003 021f 	and.w	r2, r3, #31
 800208e:	4613      	mov	r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	4413      	add	r3, r2
 8002094:	3b1e      	subs	r3, #30
 8002096:	051b      	lsls	r3, r3, #20
 8002098:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800209c:	e014      	b.n	80020c8 <HAL_ADC_ConfigChannel+0x424>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	fa93 f3a3 	rbit	r3, r3
 80020aa:	60fb      	str	r3, [r7, #12]
  return result;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	fab3 f383 	clz	r3, r3
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	3301      	adds	r3, #1
 80020b6:	f003 021f 	and.w	r2, r3, #31
 80020ba:	4613      	mov	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	4413      	add	r3, r2
 80020c0:	3b1e      	subs	r3, #30
 80020c2:	051b      	lsls	r3, r3, #20
 80020c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020c8:	430b      	orrs	r3, r1
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	6892      	ldr	r2, [r2, #8]
 80020ce:	4619      	mov	r1, r3
 80020d0:	f7ff fbb6 	bl	8001840 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	da76      	bge.n	80021ca <HAL_ADC_ConfigChannel+0x526>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020dc:	4840      	ldr	r0, [pc, #256]	; (80021e0 <HAL_ADC_ConfigChannel+0x53c>)
 80020de:	f7ff fb21 	bl	8001724 <LL_ADC_GetCommonPathInternalCh>
 80020e2:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020e4:	483f      	ldr	r0, [pc, #252]	; (80021e4 <HAL_ADC_ConfigChannel+0x540>)
 80020e6:	f7ff fc49 	bl	800197c <LL_ADC_IsEnabled>
 80020ea:	4604      	mov	r4, r0
 80020ec:	483e      	ldr	r0, [pc, #248]	; (80021e8 <HAL_ADC_ConfigChannel+0x544>)
 80020ee:	f7ff fc45 	bl	800197c <LL_ADC_IsEnabled>
 80020f2:	4603      	mov	r3, r0
 80020f4:	4323      	orrs	r3, r4
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d154      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x500>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a3b      	ldr	r2, [pc, #236]	; (80021ec <HAL_ADC_ConfigChannel+0x548>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d121      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x4a4>
 8002104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002106:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d11c      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x4a4>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a35      	ldr	r2, [pc, #212]	; (80021e8 <HAL_ADC_ConfigChannel+0x544>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d158      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800211a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800211e:	4619      	mov	r1, r3
 8002120:	482f      	ldr	r0, [pc, #188]	; (80021e0 <HAL_ADC_ConfigChannel+0x53c>)
 8002122:	f7ff faec 	bl	80016fe <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002126:	4b32      	ldr	r3, [pc, #200]	; (80021f0 <HAL_ADC_ConfigChannel+0x54c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	099b      	lsrs	r3, r3, #6
 800212c:	4a31      	ldr	r2, [pc, #196]	; (80021f4 <HAL_ADC_ConfigChannel+0x550>)
 800212e:	fba2 2303 	umull	r2, r3, r2, r3
 8002132:	099b      	lsrs	r3, r3, #6
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002138:	e002      	b.n	8002140 <HAL_ADC_ConfigChannel+0x49c>
              {
                wait_loop_index--;
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	3b01      	subs	r3, #1
 800213e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1f9      	bne.n	800213a <HAL_ADC_ConfigChannel+0x496>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002146:	e040      	b.n	80021ca <HAL_ADC_ConfigChannel+0x526>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a2a      	ldr	r2, [pc, #168]	; (80021f8 <HAL_ADC_ConfigChannel+0x554>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d111      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x4d2>
 8002152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002154:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d10c      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x4d2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a21      	ldr	r2, [pc, #132]	; (80021e8 <HAL_ADC_ConfigChannel+0x544>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d131      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002168:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800216c:	4619      	mov	r1, r3
 800216e:	481c      	ldr	r0, [pc, #112]	; (80021e0 <HAL_ADC_ConfigChannel+0x53c>)
 8002170:	f7ff fac5 	bl	80016fe <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002174:	e029      	b.n	80021ca <HAL_ADC_ConfigChannel+0x526>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a20      	ldr	r2, [pc, #128]	; (80021fc <HAL_ADC_ConfigChannel+0x558>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d124      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x526>
 8002180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d11f      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x526>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a16      	ldr	r2, [pc, #88]	; (80021e8 <HAL_ADC_ConfigChannel+0x544>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d11a      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x526>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002196:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800219a:	4619      	mov	r1, r3
 800219c:	4810      	ldr	r0, [pc, #64]	; (80021e0 <HAL_ADC_ConfigChannel+0x53c>)
 800219e:	f7ff faae 	bl	80016fe <LL_ADC_SetCommonPathInternalCh>
 80021a2:	e012      	b.n	80021ca <HAL_ADC_ConfigChannel+0x526>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a8:	f043 0220 	orr.w	r2, r3, #32
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80021b6:	e008      	b.n	80021ca <HAL_ADC_ConfigChannel+0x526>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021bc:	f043 0220 	orr.w	r2, r3, #32
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80021d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3764      	adds	r7, #100	; 0x64
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd90      	pop	{r4, r7, pc}
 80021de:	bf00      	nop
 80021e0:	40022300 	.word	0x40022300
 80021e4:	40022000 	.word	0x40022000
 80021e8:	40022100 	.word	0x40022100
 80021ec:	cb840000 	.word	0xcb840000
 80021f0:	24000000 	.word	0x24000000
 80021f4:	053e2d63 	.word	0x053e2d63
 80021f8:	bac04000 	.word	0xbac04000
 80021fc:	cfb80000 	.word	0xcfb80000

08002200 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002208:	4b56      	ldr	r3, [pc, #344]	; (8002364 <ADC_ConfigureBoostMode+0x164>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d01a      	beq.n	800224a <ADC_ConfigureBoostMode+0x4a>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002214:	f004 f85c 	bl	80062d0 <HAL_RCC_GetHCLKFreq>
 8002218:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002222:	d006      	beq.n	8002232 <ADC_ConfigureBoostMode+0x32>
 8002224:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002228:	d00b      	beq.n	8002242 <ADC_ConfigureBoostMode+0x42>
 800222a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800222e:	d000      	beq.n	8002232 <ADC_ConfigureBoostMode+0x32>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8002230:	e05d      	b.n	80022ee <ADC_ConfigureBoostMode+0xee>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	0c1b      	lsrs	r3, r3, #16
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	fbb2 f3f3 	udiv	r3, r2, r3
 800223e:	60fb      	str	r3, [r7, #12]
        break;
 8002240:	e055      	b.n	80022ee <ADC_ConfigureBoostMode+0xee>
        freq /= 4UL;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	089b      	lsrs	r3, r3, #2
 8002246:	60fb      	str	r3, [r7, #12]
        break;
 8002248:	e051      	b.n	80022ee <ADC_ConfigureBoostMode+0xee>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800224a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800224e:	f004 ff4f 	bl	80070f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002252:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800225c:	d02a      	beq.n	80022b4 <ADC_ConfigureBoostMode+0xb4>
 800225e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002262:	d813      	bhi.n	800228c <ADC_ConfigureBoostMode+0x8c>
 8002264:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002268:	d024      	beq.n	80022b4 <ADC_ConfigureBoostMode+0xb4>
 800226a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800226e:	d806      	bhi.n	800227e <ADC_ConfigureBoostMode+0x7e>
 8002270:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002274:	d01e      	beq.n	80022b4 <ADC_ConfigureBoostMode+0xb4>
 8002276:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800227a:	d01b      	beq.n	80022b4 <ADC_ConfigureBoostMode+0xb4>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 800227c:	e037      	b.n	80022ee <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 800227e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002282:	d017      	beq.n	80022b4 <ADC_ConfigureBoostMode+0xb4>
 8002284:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002288:	d014      	beq.n	80022b4 <ADC_ConfigureBoostMode+0xb4>
        break;
 800228a:	e030      	b.n	80022ee <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 800228c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002290:	d021      	beq.n	80022d6 <ADC_ConfigureBoostMode+0xd6>
 8002292:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002296:	d806      	bhi.n	80022a6 <ADC_ConfigureBoostMode+0xa6>
 8002298:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800229c:	d013      	beq.n	80022c6 <ADC_ConfigureBoostMode+0xc6>
 800229e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022a2:	d014      	beq.n	80022ce <ADC_ConfigureBoostMode+0xce>
        break;
 80022a4:	e023      	b.n	80022ee <ADC_ConfigureBoostMode+0xee>
    switch (hadc->Init.ClockPrescaler)
 80022a6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80022aa:	d018      	beq.n	80022de <ADC_ConfigureBoostMode+0xde>
 80022ac:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80022b0:	d019      	beq.n	80022e6 <ADC_ConfigureBoostMode+0xe6>
        break;
 80022b2:	e01c      	b.n	80022ee <ADC_ConfigureBoostMode+0xee>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	0c9b      	lsrs	r3, r3, #18
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c2:	60fb      	str	r3, [r7, #12]
        break;
 80022c4:	e013      	b.n	80022ee <ADC_ConfigureBoostMode+0xee>
        freq /= 16UL;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	091b      	lsrs	r3, r3, #4
 80022ca:	60fb      	str	r3, [r7, #12]
        break;
 80022cc:	e00f      	b.n	80022ee <ADC_ConfigureBoostMode+0xee>
        freq /= 32UL;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	095b      	lsrs	r3, r3, #5
 80022d2:	60fb      	str	r3, [r7, #12]
        break;
 80022d4:	e00b      	b.n	80022ee <ADC_ConfigureBoostMode+0xee>
        freq /= 64UL;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	099b      	lsrs	r3, r3, #6
 80022da:	60fb      	str	r3, [r7, #12]
        break;
 80022dc:	e007      	b.n	80022ee <ADC_ConfigureBoostMode+0xee>
        freq /= 128UL;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	09db      	lsrs	r3, r3, #7
 80022e2:	60fb      	str	r3, [r7, #12]
        break;
 80022e4:	e003      	b.n	80022ee <ADC_ConfigureBoostMode+0xee>
        freq /= 256UL;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	0a1b      	lsrs	r3, r3, #8
 80022ea:	60fb      	str	r3, [r7, #12]
        break;
 80022ec:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	085b      	lsrs	r3, r3, #1
 80022f2:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4a1c      	ldr	r2, [pc, #112]	; (8002368 <ADC_ConfigureBoostMode+0x168>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d808      	bhi.n	800230e <ADC_ConfigureBoostMode+0x10e>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689a      	ldr	r2, [r3, #8]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800230a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800230c:	e025      	b.n	800235a <ADC_ConfigureBoostMode+0x15a>
  else if (freq <= 12500000UL)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4a16      	ldr	r2, [pc, #88]	; (800236c <ADC_ConfigureBoostMode+0x16c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d80a      	bhi.n	800232c <ADC_ConfigureBoostMode+0x12c>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002328:	609a      	str	r2, [r3, #8]
}
 800232a:	e016      	b.n	800235a <ADC_ConfigureBoostMode+0x15a>
  else if (freq <= 25000000UL)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4a10      	ldr	r2, [pc, #64]	; (8002370 <ADC_ConfigureBoostMode+0x170>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d80a      	bhi.n	800234a <ADC_ConfigureBoostMode+0x14a>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002346:	609a      	str	r2, [r3, #8]
}
 8002348:	e007      	b.n	800235a <ADC_ConfigureBoostMode+0x15a>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002358:	609a      	str	r2, [r3, #8]
}
 800235a:	bf00      	nop
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40022300 	.word	0x40022300
 8002368:	005f5e10 	.word	0x005f5e10
 800236c:	00bebc20 	.word	0x00bebc20
 8002370:	017d7840 	.word	0x017d7840

08002374 <LL_ADC_IsEnabled>:
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b01      	cmp	r3, #1
 8002386:	d101      	bne.n	800238c <LL_ADC_IsEnabled+0x18>
 8002388:	2301      	movs	r3, #1
 800238a:	e000      	b.n	800238e <LL_ADC_IsEnabled+0x1a>
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <LL_ADC_REG_IsConversionOngoing>:
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d101      	bne.n	80023b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023ae:	2301      	movs	r3, #1
 80023b0:	e000      	b.n	80023b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80023c0:	b590      	push	{r4, r7, lr}
 80023c2:	b09f      	sub	sp, #124	; 0x7c
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023ca:	2300      	movs	r3, #0
 80023cc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d101      	bne.n	80023de <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80023da:	2302      	movs	r3, #2
 80023dc:	e07c      	b.n	80024d8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a3d      	ldr	r2, [pc, #244]	; (80024e0 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d102      	bne.n	80023f6 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80023f0:	4b3c      	ldr	r3, [pc, #240]	; (80024e4 <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 80023f2:	60bb      	str	r3, [r7, #8]
 80023f4:	e001      	b.n	80023fa <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80023f6:	2300      	movs	r3, #0
 80023f8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10b      	bne.n	8002418 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002404:	f043 0220 	orr.w	r2, r3, #32
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e05f      	b.n	80024d8 <HAL_ADCEx_MultiModeConfigChannel+0x118>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff ffbd 	bl	800239a <LL_ADC_REG_IsConversionOngoing>
 8002420:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff ffb7 	bl	800239a <LL_ADC_REG_IsConversionOngoing>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d141      	bne.n	80024b6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002432:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002434:	2b00      	cmp	r3, #0
 8002436:	d13e      	bne.n	80024b6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002438:	4b2b      	ldr	r3, [pc, #172]	; (80024e8 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 800243a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d020      	beq.n	8002486 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	431a      	orrs	r2, r3
 8002452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002454:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002456:	4822      	ldr	r0, [pc, #136]	; (80024e0 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8002458:	f7ff ff8c 	bl	8002374 <LL_ADC_IsEnabled>
 800245c:	4604      	mov	r4, r0
 800245e:	4821      	ldr	r0, [pc, #132]	; (80024e4 <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 8002460:	f7ff ff88 	bl	8002374 <LL_ADC_IsEnabled>
 8002464:	4603      	mov	r3, r0
 8002466:	4323      	orrs	r3, r4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d12e      	bne.n	80024ca <HAL_ADCEx_MultiModeConfigChannel+0x10a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800246c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	4b1e      	ldr	r3, [pc, #120]	; (80024ec <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002472:	4013      	ands	r3, r2
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	6811      	ldr	r1, [r2, #0]
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	6892      	ldr	r2, [r2, #8]
 800247c:	430a      	orrs	r2, r1
 800247e:	431a      	orrs	r2, r3
 8002480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002482:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002484:	e021      	b.n	80024ca <HAL_ADCEx_MultiModeConfigChannel+0x10a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800248e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002490:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002492:	4813      	ldr	r0, [pc, #76]	; (80024e0 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8002494:	f7ff ff6e 	bl	8002374 <LL_ADC_IsEnabled>
 8002498:	4604      	mov	r4, r0
 800249a:	4812      	ldr	r0, [pc, #72]	; (80024e4 <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 800249c:	f7ff ff6a 	bl	8002374 <LL_ADC_IsEnabled>
 80024a0:	4603      	mov	r3, r0
 80024a2:	4323      	orrs	r3, r4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d110      	bne.n	80024ca <HAL_ADCEx_MultiModeConfigChannel+0x10a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80024a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80024ae:	4013      	ands	r3, r2
 80024b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80024b2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024b4:	e009      	b.n	80024ca <HAL_ADCEx_MultiModeConfigChannel+0x10a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ba:	f043 0220 	orr.w	r2, r3, #32
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80024c8:	e000      	b.n	80024cc <HAL_ADCEx_MultiModeConfigChannel+0x10c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024ca:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80024d4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80024d8:	4618      	mov	r0, r3
 80024da:	377c      	adds	r7, #124	; 0x7c
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd90      	pop	{r4, r7, pc}
 80024e0:	40022000 	.word	0x40022000
 80024e4:	40022100 	.word	0x40022100
 80024e8:	40022300 	.word	0x40022300
 80024ec:	fffff0e0 	.word	0xfffff0e0

080024f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002500:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <__NVIC_SetPriorityGrouping+0x40>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800250c:	4013      	ands	r3, r2
 800250e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <__NVIC_SetPriorityGrouping+0x44>)
 800251a:	4313      	orrs	r3, r2
 800251c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800251e:	4a04      	ldr	r2, [pc, #16]	; (8002530 <__NVIC_SetPriorityGrouping+0x40>)
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	60d3      	str	r3, [r2, #12]
}
 8002524:	bf00      	nop
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	e000ed00 	.word	0xe000ed00
 8002534:	05fa0000 	.word	0x05fa0000

08002538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800253c:	4b04      	ldr	r3, [pc, #16]	; (8002550 <__NVIC_GetPriorityGrouping+0x18>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	0a1b      	lsrs	r3, r3, #8
 8002542:	f003 0307 	and.w	r3, r3, #7
}
 8002546:	4618      	mov	r0, r3
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	e000ed00 	.word	0xe000ed00

08002554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800255e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002562:	2b00      	cmp	r3, #0
 8002564:	db0b      	blt.n	800257e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002566:	88fb      	ldrh	r3, [r7, #6]
 8002568:	f003 021f 	and.w	r2, r3, #31
 800256c:	4907      	ldr	r1, [pc, #28]	; (800258c <__NVIC_EnableIRQ+0x38>)
 800256e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002572:	095b      	lsrs	r3, r3, #5
 8002574:	2001      	movs	r0, #1
 8002576:	fa00 f202 	lsl.w	r2, r0, r2
 800257a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	e000e100 	.word	0xe000e100

08002590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	6039      	str	r1, [r7, #0]
 800259a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800259c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	db0a      	blt.n	80025ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	490c      	ldr	r1, [pc, #48]	; (80025dc <__NVIC_SetPriority+0x4c>)
 80025aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025ae:	0112      	lsls	r2, r2, #4
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	440b      	add	r3, r1
 80025b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025b8:	e00a      	b.n	80025d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	4908      	ldr	r1, [pc, #32]	; (80025e0 <__NVIC_SetPriority+0x50>)
 80025c0:	88fb      	ldrh	r3, [r7, #6]
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	3b04      	subs	r3, #4
 80025c8:	0112      	lsls	r2, r2, #4
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	440b      	add	r3, r1
 80025ce:	761a      	strb	r2, [r3, #24]
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	e000e100 	.word	0xe000e100
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b089      	sub	sp, #36	; 0x24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f1c3 0307 	rsb	r3, r3, #7
 80025fe:	2b04      	cmp	r3, #4
 8002600:	bf28      	it	cs
 8002602:	2304      	movcs	r3, #4
 8002604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	3304      	adds	r3, #4
 800260a:	2b06      	cmp	r3, #6
 800260c:	d902      	bls.n	8002614 <NVIC_EncodePriority+0x30>
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	3b03      	subs	r3, #3
 8002612:	e000      	b.n	8002616 <NVIC_EncodePriority+0x32>
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002618:	f04f 32ff 	mov.w	r2, #4294967295
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43da      	mvns	r2, r3
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	401a      	ands	r2, r3
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800262c:	f04f 31ff 	mov.w	r1, #4294967295
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	fa01 f303 	lsl.w	r3, r1, r3
 8002636:	43d9      	mvns	r1, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800263c:	4313      	orrs	r3, r2
         );
}
 800263e:	4618      	mov	r0, r3
 8002640:	3724      	adds	r7, #36	; 0x24
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
	...

0800264c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3b01      	subs	r3, #1
 8002658:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800265c:	d301      	bcc.n	8002662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800265e:	2301      	movs	r3, #1
 8002660:	e00f      	b.n	8002682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002662:	4a0a      	ldr	r2, [pc, #40]	; (800268c <SysTick_Config+0x40>)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3b01      	subs	r3, #1
 8002668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800266a:	210f      	movs	r1, #15
 800266c:	f04f 30ff 	mov.w	r0, #4294967295
 8002670:	f7ff ff8e 	bl	8002590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002674:	4b05      	ldr	r3, [pc, #20]	; (800268c <SysTick_Config+0x40>)
 8002676:	2200      	movs	r2, #0
 8002678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800267a:	4b04      	ldr	r3, [pc, #16]	; (800268c <SysTick_Config+0x40>)
 800267c:	2207      	movs	r2, #7
 800267e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	e000e010 	.word	0xe000e010

08002690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7ff ff29 	bl	80024f0 <__NVIC_SetPriorityGrouping>
}
 800269e:	bf00      	nop
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b086      	sub	sp, #24
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	4603      	mov	r3, r0
 80026ae:	60b9      	str	r1, [r7, #8]
 80026b0:	607a      	str	r2, [r7, #4]
 80026b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026b4:	f7ff ff40 	bl	8002538 <__NVIC_GetPriorityGrouping>
 80026b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	68b9      	ldr	r1, [r7, #8]
 80026be:	6978      	ldr	r0, [r7, #20]
 80026c0:	f7ff ff90 	bl	80025e4 <NVIC_EncodePriority>
 80026c4:	4602      	mov	r2, r0
 80026c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026ca:	4611      	mov	r1, r2
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff ff5f 	bl	8002590 <__NVIC_SetPriority>
}
 80026d2:	bf00      	nop
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	4603      	mov	r3, r0
 80026e2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff ff33 	bl	8002554 <__NVIC_EnableIRQ>
}
 80026ee:	bf00      	nop
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b082      	sub	sp, #8
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7ff ffa4 	bl	800264c <SysTick_Config>
 8002704:	4603      	mov	r3, r0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e014      	b.n	800274a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	791b      	ldrb	r3, [r3, #4]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d105      	bne.n	8002736 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f7fe fc55 	bl	8000fe0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2202      	movs	r2, #2
 800273a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
 800275a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	795b      	ldrb	r3, [r3, #5]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d101      	bne.n	8002768 <HAL_DAC_Start+0x16>
 8002764:	2302      	movs	r3, #2
 8002766:	e040      	b.n	80027ea <HAL_DAC_Start+0x98>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2202      	movs	r2, #2
 8002772:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6819      	ldr	r1, [r3, #0]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	f003 0310 	and.w	r3, r3, #16
 8002780:	2201      	movs	r2, #1
 8002782:	409a      	lsls	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10f      	bne.n	80027b2 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800279c:	2b02      	cmp	r3, #2
 800279e:	d11d      	bne.n	80027dc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0201 	orr.w	r2, r2, #1
 80027ae:	605a      	str	r2, [r3, #4]
 80027b0:	e014      	b.n	80027dc <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	f003 0310 	and.w	r3, r3, #16
 80027c2:	2102      	movs	r1, #2
 80027c4:	fa01 f303 	lsl.w	r3, r1, r3
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d107      	bne.n	80027dc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 0202 	orr.w	r2, r2, #2
 80027da:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
	...

080027f8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002806:	2300      	movs	r3, #0
 8002808:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	795b      	ldrb	r3, [r3, #5]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d101      	bne.n	8002816 <HAL_DAC_Start_DMA+0x1e>
 8002812:	2302      	movs	r3, #2
 8002814:	e09e      	b.n	8002954 <HAL_DAC_Start_DMA+0x15c>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2201      	movs	r2, #1
 800281a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2202      	movs	r2, #2
 8002820:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d12a      	bne.n	800287e <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4a4b      	ldr	r2, [pc, #300]	; (800295c <HAL_DAC_Start_DMA+0x164>)
 800282e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	4a4a      	ldr	r2, [pc, #296]	; (8002960 <HAL_DAC_Start_DMA+0x168>)
 8002836:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	4a49      	ldr	r2, [pc, #292]	; (8002964 <HAL_DAC_Start_DMA+0x16c>)
 800283e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800284e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002850:	6a3b      	ldr	r3, [r7, #32]
 8002852:	2b04      	cmp	r3, #4
 8002854:	d009      	beq.n	800286a <HAL_DAC_Start_DMA+0x72>
 8002856:	2b08      	cmp	r3, #8
 8002858:	d00c      	beq.n	8002874 <HAL_DAC_Start_DMA+0x7c>
 800285a:	2b00      	cmp	r3, #0
 800285c:	d000      	beq.n	8002860 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800285e:	e039      	b.n	80028d4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	3308      	adds	r3, #8
 8002866:	613b      	str	r3, [r7, #16]
        break;
 8002868:	e034      	b.n	80028d4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	330c      	adds	r3, #12
 8002870:	613b      	str	r3, [r7, #16]
        break;
 8002872:	e02f      	b.n	80028d4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	3310      	adds	r3, #16
 800287a:	613b      	str	r3, [r7, #16]
        break;
 800287c:	e02a      	b.n	80028d4 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	4a39      	ldr	r2, [pc, #228]	; (8002968 <HAL_DAC_Start_DMA+0x170>)
 8002884:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	4a38      	ldr	r2, [pc, #224]	; (800296c <HAL_DAC_Start_DMA+0x174>)
 800288c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	4a37      	ldr	r2, [pc, #220]	; (8002970 <HAL_DAC_Start_DMA+0x178>)
 8002894:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80028a4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80028a6:	6a3b      	ldr	r3, [r7, #32]
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	d009      	beq.n	80028c0 <HAL_DAC_Start_DMA+0xc8>
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d00c      	beq.n	80028ca <HAL_DAC_Start_DMA+0xd2>
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d000      	beq.n	80028b6 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80028b4:	e00e      	b.n	80028d4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	3314      	adds	r3, #20
 80028bc:	613b      	str	r3, [r7, #16]
        break;
 80028be:	e009      	b.n	80028d4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	3318      	adds	r3, #24
 80028c6:	613b      	str	r3, [r7, #16]
        break;
 80028c8:	e004      	b.n	80028d4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	331c      	adds	r3, #28
 80028d0:	613b      	str	r3, [r7, #16]
        break;
 80028d2:	bf00      	nop
    }
  }

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d111      	bne.n	80028fe <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028e8:	601a      	str	r2, [r3, #0]

   /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6898      	ldr	r0, [r3, #8]
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	f000 fdcc 	bl	8003490 <HAL_DMA_Start_IT>
 80028f8:	4603      	mov	r3, r0
 80028fa:	75fb      	strb	r3, [r7, #23]
 80028fc:	e010      	b.n	8002920 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800290c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	68d8      	ldr	r0, [r3, #12]
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	f000 fdba 	bl	8003490 <HAL_DMA_Start_IT>
 800291c:	4603      	mov	r3, r0
 800291e:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002926:	7dfb      	ldrb	r3, [r7, #23]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10c      	bne.n	8002946 <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6819      	ldr	r1, [r3, #0]
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	f003 0310 	and.w	r3, r3, #16
 8002938:	2201      	movs	r2, #1
 800293a:	409a      	lsls	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	e005      	b.n	8002952 <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	f043 0204 	orr.w	r2, r3, #4
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002952:	7dfb      	ldrb	r3, [r7, #23]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	08002c5d 	.word	0x08002c5d
 8002960:	08002c7f 	.word	0x08002c7f
 8002964:	08002c9b 	.word	0x08002c9b
 8002968:	08002d05 	.word	0x08002d05
 800296c:	08002d27 	.word	0x08002d27
 8002970:	08002d43 	.word	0x08002d43

08002974 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002974:	b480      	push	{r7}
 8002976:	b087      	sub	sp, #28
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
 8002980:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002982:	2300      	movs	r3, #0
 8002984:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d105      	bne.n	800299e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4413      	add	r3, r2
 8002998:	3308      	adds	r3, #8
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	e004      	b.n	80029a8 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4413      	add	r3, r2
 80029a4:	3314      	adds	r3, #20
 80029a6:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	461a      	mov	r2, r3
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	371c      	adds	r7, #28
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
	...

080029fc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	795b      	ldrb	r3, [r3, #5]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_DAC_ConfigChannel+0x18>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e11d      	b.n	8002c50 <HAL_DAC_ConfigChannel+0x254>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2201      	movs	r2, #1
 8002a18:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d174      	bne.n	8002b12 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002a28:	f7fe fe28 	bl	800167c <HAL_GetTick>
 8002a2c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d134      	bne.n	8002a9e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002a34:	e011      	b.n	8002a5a <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002a36:	f7fe fe21 	bl	800167c <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d90a      	bls.n	8002a5a <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	f043 0208 	orr.w	r2, r3, #8
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2203      	movs	r2, #3
 8002a54:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e0fa      	b.n	8002c50 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a60:	4b7d      	ldr	r3, [pc, #500]	; (8002c58 <HAL_DAC_ConfigChannel+0x25c>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1e6      	bne.n	8002a36 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8002a68:	2001      	movs	r0, #1
 8002a6a:	f7fe fe13 	bl	8001694 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	6992      	ldr	r2, [r2, #24]
 8002a76:	641a      	str	r2, [r3, #64]	; 0x40
 8002a78:	e01e      	b.n	8002ab8 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002a7a:	f7fe fdff 	bl	800167c <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d90a      	bls.n	8002a9e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	f043 0208 	orr.w	r2, r3, #8
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2203      	movs	r2, #3
 8002a98:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e0d8      	b.n	8002c50 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	dbe8      	blt.n	8002a7a <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8002aa8:	2001      	movs	r0, #1
 8002aaa:	f7fe fdf3 	bl	8001694 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68ba      	ldr	r2, [r7, #8]
 8002ab4:	6992      	ldr	r2, [r2, #24]
 8002ab6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f003 0310 	and.w	r3, r3, #16
 8002ac4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	ea02 0103 	and.w	r1, r2, r3
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	69da      	ldr	r2, [r3, #28]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f003 0310 	and.w	r3, r3, #16
 8002adc:	409a      	lsls	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f003 0310 	and.w	r3, r3, #16
 8002af2:	21ff      	movs	r1, #255	; 0xff
 8002af4:	fa01 f303 	lsl.w	r3, r1, r3
 8002af8:	43db      	mvns	r3, r3
 8002afa:	ea02 0103 	and.w	r1, r2, r3
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	6a1a      	ldr	r2, [r3, #32]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f003 0310 	and.w	r3, r3, #16
 8002b08:	409a      	lsls	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d11d      	bne.n	8002b56 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b20:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f003 0310 	and.w	r3, r3, #16
 8002b28:	221f      	movs	r2, #31
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	4013      	ands	r3, r2
 8002b34:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f003 0310 	and.w	r3, r3, #16
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b5c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f003 0310 	and.w	r3, r3, #16
 8002b64:	2207      	movs	r2, #7
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	43db      	mvns	r3, r3
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d102      	bne.n	8002b80 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61fb      	str	r3, [r7, #28]
 8002b7e:	e00f      	b.n	8002ba0 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d102      	bne.n	8002b8e <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	61fb      	str	r3, [r7, #28]
 8002b8c:	e008      	b.n	8002ba0 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d102      	bne.n	8002b9c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002b96:	2301      	movs	r3, #1
 8002b98:	61fb      	str	r3, [r7, #28]
 8002b9a:	e001      	b.n	8002ba0 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	69fa      	ldr	r2, [r7, #28]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f003 0310 	and.w	r3, r3, #16
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6819      	ldr	r1, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f003 0310 	and.w	r3, r3, #16
 8002bd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43da      	mvns	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	400a      	ands	r2, r1
 8002be6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f003 0310 	and.w	r3, r3, #16
 8002bf6:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	4013      	ands	r3, r2
 8002c04:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f003 0310 	and.w	r3, r3, #16
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6819      	ldr	r1, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f003 0310 	and.w	r3, r3, #16
 8002c32:	22c0      	movs	r2, #192	; 0xc0
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	43da      	mvns	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	400a      	ands	r2, r1
 8002c40:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2201      	movs	r2, #1
 8002c46:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3720      	adds	r7, #32
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	20008000 	.word	0x20008000

08002c5c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c68:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f7ff fea7 	bl	80029be <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2201      	movs	r2, #1
 8002c74:	711a      	strb	r2, [r3, #4]
}
 8002c76:	bf00      	nop
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b084      	sub	sp, #16
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f7ff fea0 	bl	80029d2 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002c92:	bf00      	nop
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b084      	sub	sp, #16
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	f043 0204 	orr.w	r2, r3, #4
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f7ff fe96 	bl	80029e6 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	711a      	strb	r2, [r3, #4]
}
 8002cc0:	bf00      	nop
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d10:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f7ff ffd8 	bl	8002cc8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	711a      	strb	r2, [r3, #4]
}
 8002d1e:	bf00      	nop
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b084      	sub	sp, #16
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d32:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f7ff ffd1 	bl	8002cdc <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002d3a:	bf00      	nop
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b084      	sub	sp, #16
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	f043 0204 	orr.w	r2, r3, #4
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f7ff ffc7 	bl	8002cf0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2201      	movs	r2, #1
 8002d66:	711a      	strb	r2, [r3, #4]
}
 8002d68:	bf00      	nop
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002d78:	f7fe fc80 	bl	800167c <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e37f      	b.n	8003488 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a66      	ldr	r2, [pc, #408]	; (8002f28 <HAL_DMA_Init+0x1b8>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d04a      	beq.n	8002e28 <HAL_DMA_Init+0xb8>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a65      	ldr	r2, [pc, #404]	; (8002f2c <HAL_DMA_Init+0x1bc>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d045      	beq.n	8002e28 <HAL_DMA_Init+0xb8>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a63      	ldr	r2, [pc, #396]	; (8002f30 <HAL_DMA_Init+0x1c0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d040      	beq.n	8002e28 <HAL_DMA_Init+0xb8>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a62      	ldr	r2, [pc, #392]	; (8002f34 <HAL_DMA_Init+0x1c4>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d03b      	beq.n	8002e28 <HAL_DMA_Init+0xb8>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a60      	ldr	r2, [pc, #384]	; (8002f38 <HAL_DMA_Init+0x1c8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d036      	beq.n	8002e28 <HAL_DMA_Init+0xb8>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a5f      	ldr	r2, [pc, #380]	; (8002f3c <HAL_DMA_Init+0x1cc>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d031      	beq.n	8002e28 <HAL_DMA_Init+0xb8>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a5d      	ldr	r2, [pc, #372]	; (8002f40 <HAL_DMA_Init+0x1d0>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d02c      	beq.n	8002e28 <HAL_DMA_Init+0xb8>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a5c      	ldr	r2, [pc, #368]	; (8002f44 <HAL_DMA_Init+0x1d4>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d027      	beq.n	8002e28 <HAL_DMA_Init+0xb8>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a5a      	ldr	r2, [pc, #360]	; (8002f48 <HAL_DMA_Init+0x1d8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d022      	beq.n	8002e28 <HAL_DMA_Init+0xb8>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a59      	ldr	r2, [pc, #356]	; (8002f4c <HAL_DMA_Init+0x1dc>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d01d      	beq.n	8002e28 <HAL_DMA_Init+0xb8>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a57      	ldr	r2, [pc, #348]	; (8002f50 <HAL_DMA_Init+0x1e0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d018      	beq.n	8002e28 <HAL_DMA_Init+0xb8>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a56      	ldr	r2, [pc, #344]	; (8002f54 <HAL_DMA_Init+0x1e4>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d013      	beq.n	8002e28 <HAL_DMA_Init+0xb8>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a54      	ldr	r2, [pc, #336]	; (8002f58 <HAL_DMA_Init+0x1e8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d00e      	beq.n	8002e28 <HAL_DMA_Init+0xb8>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a53      	ldr	r2, [pc, #332]	; (8002f5c <HAL_DMA_Init+0x1ec>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d009      	beq.n	8002e28 <HAL_DMA_Init+0xb8>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a51      	ldr	r2, [pc, #324]	; (8002f60 <HAL_DMA_Init+0x1f0>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d004      	beq.n	8002e28 <HAL_DMA_Init+0xb8>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a50      	ldr	r2, [pc, #320]	; (8002f64 <HAL_DMA_Init+0x1f4>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d101      	bne.n	8002e2c <HAL_DMA_Init+0xbc>
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <HAL_DMA_Init+0xbe>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 813c 	beq.w	80030ac <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a37      	ldr	r2, [pc, #220]	; (8002f28 <HAL_DMA_Init+0x1b8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d04a      	beq.n	8002ee4 <HAL_DMA_Init+0x174>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a36      	ldr	r2, [pc, #216]	; (8002f2c <HAL_DMA_Init+0x1bc>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d045      	beq.n	8002ee4 <HAL_DMA_Init+0x174>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a34      	ldr	r2, [pc, #208]	; (8002f30 <HAL_DMA_Init+0x1c0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d040      	beq.n	8002ee4 <HAL_DMA_Init+0x174>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a33      	ldr	r2, [pc, #204]	; (8002f34 <HAL_DMA_Init+0x1c4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d03b      	beq.n	8002ee4 <HAL_DMA_Init+0x174>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a31      	ldr	r2, [pc, #196]	; (8002f38 <HAL_DMA_Init+0x1c8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d036      	beq.n	8002ee4 <HAL_DMA_Init+0x174>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a30      	ldr	r2, [pc, #192]	; (8002f3c <HAL_DMA_Init+0x1cc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d031      	beq.n	8002ee4 <HAL_DMA_Init+0x174>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a2e      	ldr	r2, [pc, #184]	; (8002f40 <HAL_DMA_Init+0x1d0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d02c      	beq.n	8002ee4 <HAL_DMA_Init+0x174>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a2d      	ldr	r2, [pc, #180]	; (8002f44 <HAL_DMA_Init+0x1d4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d027      	beq.n	8002ee4 <HAL_DMA_Init+0x174>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a2b      	ldr	r2, [pc, #172]	; (8002f48 <HAL_DMA_Init+0x1d8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d022      	beq.n	8002ee4 <HAL_DMA_Init+0x174>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a2a      	ldr	r2, [pc, #168]	; (8002f4c <HAL_DMA_Init+0x1dc>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d01d      	beq.n	8002ee4 <HAL_DMA_Init+0x174>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a28      	ldr	r2, [pc, #160]	; (8002f50 <HAL_DMA_Init+0x1e0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d018      	beq.n	8002ee4 <HAL_DMA_Init+0x174>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a27      	ldr	r2, [pc, #156]	; (8002f54 <HAL_DMA_Init+0x1e4>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d013      	beq.n	8002ee4 <HAL_DMA_Init+0x174>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a25      	ldr	r2, [pc, #148]	; (8002f58 <HAL_DMA_Init+0x1e8>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d00e      	beq.n	8002ee4 <HAL_DMA_Init+0x174>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a24      	ldr	r2, [pc, #144]	; (8002f5c <HAL_DMA_Init+0x1ec>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d009      	beq.n	8002ee4 <HAL_DMA_Init+0x174>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a22      	ldr	r2, [pc, #136]	; (8002f60 <HAL_DMA_Init+0x1f0>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d004      	beq.n	8002ee4 <HAL_DMA_Init+0x174>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a21      	ldr	r2, [pc, #132]	; (8002f64 <HAL_DMA_Init+0x1f4>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d108      	bne.n	8002ef6 <HAL_DMA_Init+0x186>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0201 	bic.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	e007      	b.n	8002f06 <HAL_DMA_Init+0x196>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0201 	bic.w	r2, r2, #1
 8002f04:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002f06:	e02f      	b.n	8002f68 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f08:	f7fe fbb8 	bl	800167c <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b05      	cmp	r3, #5
 8002f14:	d928      	bls.n	8002f68 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2203      	movs	r2, #3
 8002f20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e2af      	b.n	8003488 <HAL_DMA_Init+0x718>
 8002f28:	40020010 	.word	0x40020010
 8002f2c:	40020028 	.word	0x40020028
 8002f30:	40020040 	.word	0x40020040
 8002f34:	40020058 	.word	0x40020058
 8002f38:	40020070 	.word	0x40020070
 8002f3c:	40020088 	.word	0x40020088
 8002f40:	400200a0 	.word	0x400200a0
 8002f44:	400200b8 	.word	0x400200b8
 8002f48:	40020410 	.word	0x40020410
 8002f4c:	40020428 	.word	0x40020428
 8002f50:	40020440 	.word	0x40020440
 8002f54:	40020458 	.word	0x40020458
 8002f58:	40020470 	.word	0x40020470
 8002f5c:	40020488 	.word	0x40020488
 8002f60:	400204a0 	.word	0x400204a0
 8002f64:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1c8      	bne.n	8002f08 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	4b73      	ldr	r3, [pc, #460]	; (8003150 <HAL_DMA_Init+0x3e0>)
 8002f82:	4013      	ands	r3, r2
 8002f84:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002f8e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f9a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fa6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d107      	bne.n	8002fcc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2b28      	cmp	r3, #40	; 0x28
 8002fd2:	d903      	bls.n	8002fdc <HAL_DMA_Init+0x26c>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b2e      	cmp	r3, #46	; 0x2e
 8002fda:	d91f      	bls.n	800301c <HAL_DMA_Init+0x2ac>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b3e      	cmp	r3, #62	; 0x3e
 8002fe2:	d903      	bls.n	8002fec <HAL_DMA_Init+0x27c>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2b42      	cmp	r3, #66	; 0x42
 8002fea:	d917      	bls.n	800301c <HAL_DMA_Init+0x2ac>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	2b46      	cmp	r3, #70	; 0x46
 8002ff2:	d903      	bls.n	8002ffc <HAL_DMA_Init+0x28c>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2b48      	cmp	r3, #72	; 0x48
 8002ffa:	d90f      	bls.n	800301c <HAL_DMA_Init+0x2ac>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2b4e      	cmp	r3, #78	; 0x4e
 8003002:	d903      	bls.n	800300c <HAL_DMA_Init+0x29c>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b52      	cmp	r3, #82	; 0x52
 800300a:	d907      	bls.n	800301c <HAL_DMA_Init+0x2ac>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	2b73      	cmp	r3, #115	; 0x73
 8003012:	d905      	bls.n	8003020 <HAL_DMA_Init+0x2b0>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b77      	cmp	r3, #119	; 0x77
 800301a:	d801      	bhi.n	8003020 <HAL_DMA_Init+0x2b0>
 800301c:	2301      	movs	r3, #1
 800301e:	e000      	b.n	8003022 <HAL_DMA_Init+0x2b2>
 8003020:	2300      	movs	r3, #0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800302c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f023 0307 	bic.w	r3, r3, #7
 8003044:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	4313      	orrs	r3, r2
 800304e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	2b04      	cmp	r3, #4
 8003056:	d117      	bne.n	8003088 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	4313      	orrs	r3, r2
 8003060:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00e      	beq.n	8003088 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f001 fe72 	bl	8004d54 <DMA_CheckFifoParam>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d008      	beq.n	8003088 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2240      	movs	r2, #64	; 0x40
 800307a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e1ff      	b.n	8003488 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f001 fdad 	bl	8004bf0 <DMA_CalcBaseAndBitshift>
 8003096:	4603      	mov	r3, r0
 8003098:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309e:	f003 031f 	and.w	r3, r3, #31
 80030a2:	223f      	movs	r2, #63	; 0x3f
 80030a4:	409a      	lsls	r2, r3
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	609a      	str	r2, [r3, #8]
 80030aa:	e0fe      	b.n	80032aa <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a28      	ldr	r2, [pc, #160]	; (8003154 <HAL_DMA_Init+0x3e4>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d04a      	beq.n	800314c <HAL_DMA_Init+0x3dc>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a27      	ldr	r2, [pc, #156]	; (8003158 <HAL_DMA_Init+0x3e8>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d045      	beq.n	800314c <HAL_DMA_Init+0x3dc>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a25      	ldr	r2, [pc, #148]	; (800315c <HAL_DMA_Init+0x3ec>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d040      	beq.n	800314c <HAL_DMA_Init+0x3dc>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a24      	ldr	r2, [pc, #144]	; (8003160 <HAL_DMA_Init+0x3f0>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d03b      	beq.n	800314c <HAL_DMA_Init+0x3dc>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a22      	ldr	r2, [pc, #136]	; (8003164 <HAL_DMA_Init+0x3f4>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d036      	beq.n	800314c <HAL_DMA_Init+0x3dc>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a21      	ldr	r2, [pc, #132]	; (8003168 <HAL_DMA_Init+0x3f8>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d031      	beq.n	800314c <HAL_DMA_Init+0x3dc>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a1f      	ldr	r2, [pc, #124]	; (800316c <HAL_DMA_Init+0x3fc>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d02c      	beq.n	800314c <HAL_DMA_Init+0x3dc>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a1e      	ldr	r2, [pc, #120]	; (8003170 <HAL_DMA_Init+0x400>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d027      	beq.n	800314c <HAL_DMA_Init+0x3dc>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a1c      	ldr	r2, [pc, #112]	; (8003174 <HAL_DMA_Init+0x404>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d022      	beq.n	800314c <HAL_DMA_Init+0x3dc>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a1b      	ldr	r2, [pc, #108]	; (8003178 <HAL_DMA_Init+0x408>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d01d      	beq.n	800314c <HAL_DMA_Init+0x3dc>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a19      	ldr	r2, [pc, #100]	; (800317c <HAL_DMA_Init+0x40c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d018      	beq.n	800314c <HAL_DMA_Init+0x3dc>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a18      	ldr	r2, [pc, #96]	; (8003180 <HAL_DMA_Init+0x410>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d013      	beq.n	800314c <HAL_DMA_Init+0x3dc>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a16      	ldr	r2, [pc, #88]	; (8003184 <HAL_DMA_Init+0x414>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d00e      	beq.n	800314c <HAL_DMA_Init+0x3dc>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a15      	ldr	r2, [pc, #84]	; (8003188 <HAL_DMA_Init+0x418>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d009      	beq.n	800314c <HAL_DMA_Init+0x3dc>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a13      	ldr	r2, [pc, #76]	; (800318c <HAL_DMA_Init+0x41c>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d004      	beq.n	800314c <HAL_DMA_Init+0x3dc>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a12      	ldr	r2, [pc, #72]	; (8003190 <HAL_DMA_Init+0x420>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d123      	bne.n	8003194 <HAL_DMA_Init+0x424>
 800314c:	2301      	movs	r3, #1
 800314e:	e022      	b.n	8003196 <HAL_DMA_Init+0x426>
 8003150:	fe10803f 	.word	0xfe10803f
 8003154:	48022c08 	.word	0x48022c08
 8003158:	48022c1c 	.word	0x48022c1c
 800315c:	48022c30 	.word	0x48022c30
 8003160:	48022c44 	.word	0x48022c44
 8003164:	48022c58 	.word	0x48022c58
 8003168:	48022c6c 	.word	0x48022c6c
 800316c:	48022c80 	.word	0x48022c80
 8003170:	48022c94 	.word	0x48022c94
 8003174:	58025408 	.word	0x58025408
 8003178:	5802541c 	.word	0x5802541c
 800317c:	58025430 	.word	0x58025430
 8003180:	58025444 	.word	0x58025444
 8003184:	58025458 	.word	0x58025458
 8003188:	5802546c 	.word	0x5802546c
 800318c:	58025480 	.word	0x58025480
 8003190:	58025494 	.word	0x58025494
 8003194:	2300      	movs	r3, #0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d07e      	beq.n	8003298 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a80      	ldr	r2, [pc, #512]	; (80033a0 <HAL_DMA_Init+0x630>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d021      	beq.n	80031e8 <HAL_DMA_Init+0x478>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a7e      	ldr	r2, [pc, #504]	; (80033a4 <HAL_DMA_Init+0x634>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d01c      	beq.n	80031e8 <HAL_DMA_Init+0x478>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a7d      	ldr	r2, [pc, #500]	; (80033a8 <HAL_DMA_Init+0x638>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d017      	beq.n	80031e8 <HAL_DMA_Init+0x478>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a7b      	ldr	r2, [pc, #492]	; (80033ac <HAL_DMA_Init+0x63c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d012      	beq.n	80031e8 <HAL_DMA_Init+0x478>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a7a      	ldr	r2, [pc, #488]	; (80033b0 <HAL_DMA_Init+0x640>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d00d      	beq.n	80031e8 <HAL_DMA_Init+0x478>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a78      	ldr	r2, [pc, #480]	; (80033b4 <HAL_DMA_Init+0x644>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d008      	beq.n	80031e8 <HAL_DMA_Init+0x478>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a77      	ldr	r2, [pc, #476]	; (80033b8 <HAL_DMA_Init+0x648>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d003      	beq.n	80031e8 <HAL_DMA_Init+0x478>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a75      	ldr	r2, [pc, #468]	; (80033bc <HAL_DMA_Init+0x64c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2202      	movs	r2, #2
 80031f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	4b6e      	ldr	r3, [pc, #440]	; (80033c0 <HAL_DMA_Init+0x650>)
 8003206:	4013      	ands	r3, r2
 8003208:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	2b40      	cmp	r3, #64	; 0x40
 8003210:	d008      	beq.n	8003224 <HAL_DMA_Init+0x4b4>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	2b80      	cmp	r3, #128	; 0x80
 8003218:	d102      	bne.n	8003220 <HAL_DMA_Init+0x4b0>
 800321a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800321e:	e002      	b.n	8003226 <HAL_DMA_Init+0x4b6>
 8003220:	2300      	movs	r3, #0
 8003222:	e000      	b.n	8003226 <HAL_DMA_Init+0x4b6>
 8003224:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	68d2      	ldr	r2, [r2, #12]
 800322a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800322c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003234:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800323c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003244:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800324c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003254:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	4313      	orrs	r3, r2
 800325a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	461a      	mov	r2, r3
 800326a:	4b56      	ldr	r3, [pc, #344]	; (80033c4 <HAL_DMA_Init+0x654>)
 800326c:	4413      	add	r3, r2
 800326e:	4a56      	ldr	r2, [pc, #344]	; (80033c8 <HAL_DMA_Init+0x658>)
 8003270:	fba2 2303 	umull	r2, r3, r2, r3
 8003274:	091b      	lsrs	r3, r3, #4
 8003276:	009a      	lsls	r2, r3, #2
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f001 fcb7 	bl	8004bf0 <DMA_CalcBaseAndBitshift>
 8003282:	4603      	mov	r3, r0
 8003284:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328a:	f003 031f 	and.w	r3, r3, #31
 800328e:	2201      	movs	r2, #1
 8003290:	409a      	lsls	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	605a      	str	r2, [r3, #4]
 8003296:	e008      	b.n	80032aa <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2240      	movs	r2, #64	; 0x40
 800329c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2203      	movs	r2, #3
 80032a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e0ee      	b.n	8003488 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a47      	ldr	r2, [pc, #284]	; (80033cc <HAL_DMA_Init+0x65c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d072      	beq.n	800339a <HAL_DMA_Init+0x62a>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a45      	ldr	r2, [pc, #276]	; (80033d0 <HAL_DMA_Init+0x660>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d06d      	beq.n	800339a <HAL_DMA_Init+0x62a>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a44      	ldr	r2, [pc, #272]	; (80033d4 <HAL_DMA_Init+0x664>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d068      	beq.n	800339a <HAL_DMA_Init+0x62a>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a42      	ldr	r2, [pc, #264]	; (80033d8 <HAL_DMA_Init+0x668>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d063      	beq.n	800339a <HAL_DMA_Init+0x62a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a41      	ldr	r2, [pc, #260]	; (80033dc <HAL_DMA_Init+0x66c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d05e      	beq.n	800339a <HAL_DMA_Init+0x62a>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a3f      	ldr	r2, [pc, #252]	; (80033e0 <HAL_DMA_Init+0x670>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d059      	beq.n	800339a <HAL_DMA_Init+0x62a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a3e      	ldr	r2, [pc, #248]	; (80033e4 <HAL_DMA_Init+0x674>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d054      	beq.n	800339a <HAL_DMA_Init+0x62a>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a3c      	ldr	r2, [pc, #240]	; (80033e8 <HAL_DMA_Init+0x678>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d04f      	beq.n	800339a <HAL_DMA_Init+0x62a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a3b      	ldr	r2, [pc, #236]	; (80033ec <HAL_DMA_Init+0x67c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d04a      	beq.n	800339a <HAL_DMA_Init+0x62a>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a39      	ldr	r2, [pc, #228]	; (80033f0 <HAL_DMA_Init+0x680>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d045      	beq.n	800339a <HAL_DMA_Init+0x62a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a38      	ldr	r2, [pc, #224]	; (80033f4 <HAL_DMA_Init+0x684>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d040      	beq.n	800339a <HAL_DMA_Init+0x62a>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a36      	ldr	r2, [pc, #216]	; (80033f8 <HAL_DMA_Init+0x688>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d03b      	beq.n	800339a <HAL_DMA_Init+0x62a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a35      	ldr	r2, [pc, #212]	; (80033fc <HAL_DMA_Init+0x68c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d036      	beq.n	800339a <HAL_DMA_Init+0x62a>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a33      	ldr	r2, [pc, #204]	; (8003400 <HAL_DMA_Init+0x690>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d031      	beq.n	800339a <HAL_DMA_Init+0x62a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a32      	ldr	r2, [pc, #200]	; (8003404 <HAL_DMA_Init+0x694>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d02c      	beq.n	800339a <HAL_DMA_Init+0x62a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a30      	ldr	r2, [pc, #192]	; (8003408 <HAL_DMA_Init+0x698>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d027      	beq.n	800339a <HAL_DMA_Init+0x62a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a14      	ldr	r2, [pc, #80]	; (80033a0 <HAL_DMA_Init+0x630>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d022      	beq.n	800339a <HAL_DMA_Init+0x62a>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a12      	ldr	r2, [pc, #72]	; (80033a4 <HAL_DMA_Init+0x634>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d01d      	beq.n	800339a <HAL_DMA_Init+0x62a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a11      	ldr	r2, [pc, #68]	; (80033a8 <HAL_DMA_Init+0x638>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d018      	beq.n	800339a <HAL_DMA_Init+0x62a>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a0f      	ldr	r2, [pc, #60]	; (80033ac <HAL_DMA_Init+0x63c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d013      	beq.n	800339a <HAL_DMA_Init+0x62a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a0e      	ldr	r2, [pc, #56]	; (80033b0 <HAL_DMA_Init+0x640>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d00e      	beq.n	800339a <HAL_DMA_Init+0x62a>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a0c      	ldr	r2, [pc, #48]	; (80033b4 <HAL_DMA_Init+0x644>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d009      	beq.n	800339a <HAL_DMA_Init+0x62a>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a0b      	ldr	r2, [pc, #44]	; (80033b8 <HAL_DMA_Init+0x648>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d004      	beq.n	800339a <HAL_DMA_Init+0x62a>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a09      	ldr	r2, [pc, #36]	; (80033bc <HAL_DMA_Init+0x64c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d138      	bne.n	800340c <HAL_DMA_Init+0x69c>
 800339a:	2301      	movs	r3, #1
 800339c:	e037      	b.n	800340e <HAL_DMA_Init+0x69e>
 800339e:	bf00      	nop
 80033a0:	58025408 	.word	0x58025408
 80033a4:	5802541c 	.word	0x5802541c
 80033a8:	58025430 	.word	0x58025430
 80033ac:	58025444 	.word	0x58025444
 80033b0:	58025458 	.word	0x58025458
 80033b4:	5802546c 	.word	0x5802546c
 80033b8:	58025480 	.word	0x58025480
 80033bc:	58025494 	.word	0x58025494
 80033c0:	fffe000f 	.word	0xfffe000f
 80033c4:	a7fdabf8 	.word	0xa7fdabf8
 80033c8:	cccccccd 	.word	0xcccccccd
 80033cc:	40020010 	.word	0x40020010
 80033d0:	40020028 	.word	0x40020028
 80033d4:	40020040 	.word	0x40020040
 80033d8:	40020058 	.word	0x40020058
 80033dc:	40020070 	.word	0x40020070
 80033e0:	40020088 	.word	0x40020088
 80033e4:	400200a0 	.word	0x400200a0
 80033e8:	400200b8 	.word	0x400200b8
 80033ec:	40020410 	.word	0x40020410
 80033f0:	40020428 	.word	0x40020428
 80033f4:	40020440 	.word	0x40020440
 80033f8:	40020458 	.word	0x40020458
 80033fc:	40020470 	.word	0x40020470
 8003400:	40020488 	.word	0x40020488
 8003404:	400204a0 	.word	0x400204a0
 8003408:	400204b8 	.word	0x400204b8
 800340c:	2300      	movs	r3, #0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d032      	beq.n	8003478 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f001 fd1a 	bl	8004e4c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	2b80      	cmp	r3, #128	; 0x80
 800341e:	d102      	bne.n	8003426 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800343a:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d010      	beq.n	8003466 <HAL_DMA_Init+0x6f6>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	2b08      	cmp	r3, #8
 800344a:	d80c      	bhi.n	8003466 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f001 fd97 	bl	8004f80 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003462:	605a      	str	r2, [r3, #4]
 8003464:	e008      	b.n	8003478 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
 800349c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800349e:	2300      	movs	r3, #0
 80034a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d101      	bne.n	80034ac <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e226      	b.n	80038fa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d101      	bne.n	80034ba <HAL_DMA_Start_IT+0x2a>
 80034b6:	2302      	movs	r3, #2
 80034b8:	e21f      	b.n	80038fa <HAL_DMA_Start_IT+0x46a>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	f040 820a 	bne.w	80038e4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2202      	movs	r2, #2
 80034d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a68      	ldr	r2, [pc, #416]	; (8003684 <HAL_DMA_Start_IT+0x1f4>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d04a      	beq.n	800357e <HAL_DMA_Start_IT+0xee>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a66      	ldr	r2, [pc, #408]	; (8003688 <HAL_DMA_Start_IT+0x1f8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d045      	beq.n	800357e <HAL_DMA_Start_IT+0xee>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a65      	ldr	r2, [pc, #404]	; (800368c <HAL_DMA_Start_IT+0x1fc>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d040      	beq.n	800357e <HAL_DMA_Start_IT+0xee>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a63      	ldr	r2, [pc, #396]	; (8003690 <HAL_DMA_Start_IT+0x200>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d03b      	beq.n	800357e <HAL_DMA_Start_IT+0xee>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a62      	ldr	r2, [pc, #392]	; (8003694 <HAL_DMA_Start_IT+0x204>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d036      	beq.n	800357e <HAL_DMA_Start_IT+0xee>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a60      	ldr	r2, [pc, #384]	; (8003698 <HAL_DMA_Start_IT+0x208>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d031      	beq.n	800357e <HAL_DMA_Start_IT+0xee>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a5f      	ldr	r2, [pc, #380]	; (800369c <HAL_DMA_Start_IT+0x20c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d02c      	beq.n	800357e <HAL_DMA_Start_IT+0xee>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a5d      	ldr	r2, [pc, #372]	; (80036a0 <HAL_DMA_Start_IT+0x210>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d027      	beq.n	800357e <HAL_DMA_Start_IT+0xee>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a5c      	ldr	r2, [pc, #368]	; (80036a4 <HAL_DMA_Start_IT+0x214>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d022      	beq.n	800357e <HAL_DMA_Start_IT+0xee>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a5a      	ldr	r2, [pc, #360]	; (80036a8 <HAL_DMA_Start_IT+0x218>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d01d      	beq.n	800357e <HAL_DMA_Start_IT+0xee>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a59      	ldr	r2, [pc, #356]	; (80036ac <HAL_DMA_Start_IT+0x21c>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d018      	beq.n	800357e <HAL_DMA_Start_IT+0xee>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a57      	ldr	r2, [pc, #348]	; (80036b0 <HAL_DMA_Start_IT+0x220>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d013      	beq.n	800357e <HAL_DMA_Start_IT+0xee>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a56      	ldr	r2, [pc, #344]	; (80036b4 <HAL_DMA_Start_IT+0x224>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d00e      	beq.n	800357e <HAL_DMA_Start_IT+0xee>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a54      	ldr	r2, [pc, #336]	; (80036b8 <HAL_DMA_Start_IT+0x228>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d009      	beq.n	800357e <HAL_DMA_Start_IT+0xee>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a53      	ldr	r2, [pc, #332]	; (80036bc <HAL_DMA_Start_IT+0x22c>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d004      	beq.n	800357e <HAL_DMA_Start_IT+0xee>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a51      	ldr	r2, [pc, #324]	; (80036c0 <HAL_DMA_Start_IT+0x230>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d108      	bne.n	8003590 <HAL_DMA_Start_IT+0x100>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 0201 	bic.w	r2, r2, #1
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	e007      	b.n	80035a0 <HAL_DMA_Start_IT+0x110>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0201 	bic.w	r2, r2, #1
 800359e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	68b9      	ldr	r1, [r7, #8]
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f001 f93e 	bl	8004828 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a34      	ldr	r2, [pc, #208]	; (8003684 <HAL_DMA_Start_IT+0x1f4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d04a      	beq.n	800364c <HAL_DMA_Start_IT+0x1bc>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a33      	ldr	r2, [pc, #204]	; (8003688 <HAL_DMA_Start_IT+0x1f8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d045      	beq.n	800364c <HAL_DMA_Start_IT+0x1bc>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a31      	ldr	r2, [pc, #196]	; (800368c <HAL_DMA_Start_IT+0x1fc>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d040      	beq.n	800364c <HAL_DMA_Start_IT+0x1bc>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a30      	ldr	r2, [pc, #192]	; (8003690 <HAL_DMA_Start_IT+0x200>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d03b      	beq.n	800364c <HAL_DMA_Start_IT+0x1bc>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a2e      	ldr	r2, [pc, #184]	; (8003694 <HAL_DMA_Start_IT+0x204>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d036      	beq.n	800364c <HAL_DMA_Start_IT+0x1bc>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a2d      	ldr	r2, [pc, #180]	; (8003698 <HAL_DMA_Start_IT+0x208>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d031      	beq.n	800364c <HAL_DMA_Start_IT+0x1bc>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a2b      	ldr	r2, [pc, #172]	; (800369c <HAL_DMA_Start_IT+0x20c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d02c      	beq.n	800364c <HAL_DMA_Start_IT+0x1bc>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a2a      	ldr	r2, [pc, #168]	; (80036a0 <HAL_DMA_Start_IT+0x210>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d027      	beq.n	800364c <HAL_DMA_Start_IT+0x1bc>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a28      	ldr	r2, [pc, #160]	; (80036a4 <HAL_DMA_Start_IT+0x214>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d022      	beq.n	800364c <HAL_DMA_Start_IT+0x1bc>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a27      	ldr	r2, [pc, #156]	; (80036a8 <HAL_DMA_Start_IT+0x218>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d01d      	beq.n	800364c <HAL_DMA_Start_IT+0x1bc>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a25      	ldr	r2, [pc, #148]	; (80036ac <HAL_DMA_Start_IT+0x21c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d018      	beq.n	800364c <HAL_DMA_Start_IT+0x1bc>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a24      	ldr	r2, [pc, #144]	; (80036b0 <HAL_DMA_Start_IT+0x220>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d013      	beq.n	800364c <HAL_DMA_Start_IT+0x1bc>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a22      	ldr	r2, [pc, #136]	; (80036b4 <HAL_DMA_Start_IT+0x224>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d00e      	beq.n	800364c <HAL_DMA_Start_IT+0x1bc>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a21      	ldr	r2, [pc, #132]	; (80036b8 <HAL_DMA_Start_IT+0x228>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d009      	beq.n	800364c <HAL_DMA_Start_IT+0x1bc>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a1f      	ldr	r2, [pc, #124]	; (80036bc <HAL_DMA_Start_IT+0x22c>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d004      	beq.n	800364c <HAL_DMA_Start_IT+0x1bc>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a1e      	ldr	r2, [pc, #120]	; (80036c0 <HAL_DMA_Start_IT+0x230>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d101      	bne.n	8003650 <HAL_DMA_Start_IT+0x1c0>
 800364c:	2301      	movs	r3, #1
 800364e:	e000      	b.n	8003652 <HAL_DMA_Start_IT+0x1c2>
 8003650:	2300      	movs	r3, #0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d036      	beq.n	80036c4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f023 021e 	bic.w	r2, r3, #30
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f042 0216 	orr.w	r2, r2, #22
 8003668:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	2b00      	cmp	r3, #0
 8003670:	d03e      	beq.n	80036f0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f042 0208 	orr.w	r2, r2, #8
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	e035      	b.n	80036f0 <HAL_DMA_Start_IT+0x260>
 8003684:	40020010 	.word	0x40020010
 8003688:	40020028 	.word	0x40020028
 800368c:	40020040 	.word	0x40020040
 8003690:	40020058 	.word	0x40020058
 8003694:	40020070 	.word	0x40020070
 8003698:	40020088 	.word	0x40020088
 800369c:	400200a0 	.word	0x400200a0
 80036a0:	400200b8 	.word	0x400200b8
 80036a4:	40020410 	.word	0x40020410
 80036a8:	40020428 	.word	0x40020428
 80036ac:	40020440 	.word	0x40020440
 80036b0:	40020458 	.word	0x40020458
 80036b4:	40020470 	.word	0x40020470
 80036b8:	40020488 	.word	0x40020488
 80036bc:	400204a0 	.word	0x400204a0
 80036c0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f023 020e 	bic.w	r2, r3, #14
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 020a 	orr.w	r2, r2, #10
 80036d6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d007      	beq.n	80036f0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0204 	orr.w	r2, r2, #4
 80036ee:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a83      	ldr	r2, [pc, #524]	; (8003904 <HAL_DMA_Start_IT+0x474>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d072      	beq.n	80037e0 <HAL_DMA_Start_IT+0x350>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a82      	ldr	r2, [pc, #520]	; (8003908 <HAL_DMA_Start_IT+0x478>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d06d      	beq.n	80037e0 <HAL_DMA_Start_IT+0x350>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a80      	ldr	r2, [pc, #512]	; (800390c <HAL_DMA_Start_IT+0x47c>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d068      	beq.n	80037e0 <HAL_DMA_Start_IT+0x350>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a7f      	ldr	r2, [pc, #508]	; (8003910 <HAL_DMA_Start_IT+0x480>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d063      	beq.n	80037e0 <HAL_DMA_Start_IT+0x350>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a7d      	ldr	r2, [pc, #500]	; (8003914 <HAL_DMA_Start_IT+0x484>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d05e      	beq.n	80037e0 <HAL_DMA_Start_IT+0x350>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a7c      	ldr	r2, [pc, #496]	; (8003918 <HAL_DMA_Start_IT+0x488>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d059      	beq.n	80037e0 <HAL_DMA_Start_IT+0x350>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a7a      	ldr	r2, [pc, #488]	; (800391c <HAL_DMA_Start_IT+0x48c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d054      	beq.n	80037e0 <HAL_DMA_Start_IT+0x350>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a79      	ldr	r2, [pc, #484]	; (8003920 <HAL_DMA_Start_IT+0x490>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d04f      	beq.n	80037e0 <HAL_DMA_Start_IT+0x350>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a77      	ldr	r2, [pc, #476]	; (8003924 <HAL_DMA_Start_IT+0x494>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d04a      	beq.n	80037e0 <HAL_DMA_Start_IT+0x350>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a76      	ldr	r2, [pc, #472]	; (8003928 <HAL_DMA_Start_IT+0x498>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d045      	beq.n	80037e0 <HAL_DMA_Start_IT+0x350>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a74      	ldr	r2, [pc, #464]	; (800392c <HAL_DMA_Start_IT+0x49c>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d040      	beq.n	80037e0 <HAL_DMA_Start_IT+0x350>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a73      	ldr	r2, [pc, #460]	; (8003930 <HAL_DMA_Start_IT+0x4a0>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d03b      	beq.n	80037e0 <HAL_DMA_Start_IT+0x350>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a71      	ldr	r2, [pc, #452]	; (8003934 <HAL_DMA_Start_IT+0x4a4>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d036      	beq.n	80037e0 <HAL_DMA_Start_IT+0x350>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a70      	ldr	r2, [pc, #448]	; (8003938 <HAL_DMA_Start_IT+0x4a8>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d031      	beq.n	80037e0 <HAL_DMA_Start_IT+0x350>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a6e      	ldr	r2, [pc, #440]	; (800393c <HAL_DMA_Start_IT+0x4ac>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d02c      	beq.n	80037e0 <HAL_DMA_Start_IT+0x350>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a6d      	ldr	r2, [pc, #436]	; (8003940 <HAL_DMA_Start_IT+0x4b0>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d027      	beq.n	80037e0 <HAL_DMA_Start_IT+0x350>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a6b      	ldr	r2, [pc, #428]	; (8003944 <HAL_DMA_Start_IT+0x4b4>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d022      	beq.n	80037e0 <HAL_DMA_Start_IT+0x350>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a6a      	ldr	r2, [pc, #424]	; (8003948 <HAL_DMA_Start_IT+0x4b8>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d01d      	beq.n	80037e0 <HAL_DMA_Start_IT+0x350>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a68      	ldr	r2, [pc, #416]	; (800394c <HAL_DMA_Start_IT+0x4bc>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d018      	beq.n	80037e0 <HAL_DMA_Start_IT+0x350>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a67      	ldr	r2, [pc, #412]	; (8003950 <HAL_DMA_Start_IT+0x4c0>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d013      	beq.n	80037e0 <HAL_DMA_Start_IT+0x350>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a65      	ldr	r2, [pc, #404]	; (8003954 <HAL_DMA_Start_IT+0x4c4>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d00e      	beq.n	80037e0 <HAL_DMA_Start_IT+0x350>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a64      	ldr	r2, [pc, #400]	; (8003958 <HAL_DMA_Start_IT+0x4c8>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d009      	beq.n	80037e0 <HAL_DMA_Start_IT+0x350>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a62      	ldr	r2, [pc, #392]	; (800395c <HAL_DMA_Start_IT+0x4cc>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d004      	beq.n	80037e0 <HAL_DMA_Start_IT+0x350>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a61      	ldr	r2, [pc, #388]	; (8003960 <HAL_DMA_Start_IT+0x4d0>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d101      	bne.n	80037e4 <HAL_DMA_Start_IT+0x354>
 80037e0:	2301      	movs	r3, #1
 80037e2:	e000      	b.n	80037e6 <HAL_DMA_Start_IT+0x356>
 80037e4:	2300      	movs	r3, #0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d01a      	beq.n	8003820 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d007      	beq.n	8003808 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003802:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003806:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800380c:	2b00      	cmp	r3, #0
 800380e:	d007      	beq.n	8003820 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800381a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800381e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a37      	ldr	r2, [pc, #220]	; (8003904 <HAL_DMA_Start_IT+0x474>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d04a      	beq.n	80038c0 <HAL_DMA_Start_IT+0x430>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a36      	ldr	r2, [pc, #216]	; (8003908 <HAL_DMA_Start_IT+0x478>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d045      	beq.n	80038c0 <HAL_DMA_Start_IT+0x430>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a34      	ldr	r2, [pc, #208]	; (800390c <HAL_DMA_Start_IT+0x47c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d040      	beq.n	80038c0 <HAL_DMA_Start_IT+0x430>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a33      	ldr	r2, [pc, #204]	; (8003910 <HAL_DMA_Start_IT+0x480>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d03b      	beq.n	80038c0 <HAL_DMA_Start_IT+0x430>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a31      	ldr	r2, [pc, #196]	; (8003914 <HAL_DMA_Start_IT+0x484>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d036      	beq.n	80038c0 <HAL_DMA_Start_IT+0x430>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a30      	ldr	r2, [pc, #192]	; (8003918 <HAL_DMA_Start_IT+0x488>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d031      	beq.n	80038c0 <HAL_DMA_Start_IT+0x430>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a2e      	ldr	r2, [pc, #184]	; (800391c <HAL_DMA_Start_IT+0x48c>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d02c      	beq.n	80038c0 <HAL_DMA_Start_IT+0x430>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a2d      	ldr	r2, [pc, #180]	; (8003920 <HAL_DMA_Start_IT+0x490>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d027      	beq.n	80038c0 <HAL_DMA_Start_IT+0x430>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a2b      	ldr	r2, [pc, #172]	; (8003924 <HAL_DMA_Start_IT+0x494>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d022      	beq.n	80038c0 <HAL_DMA_Start_IT+0x430>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a2a      	ldr	r2, [pc, #168]	; (8003928 <HAL_DMA_Start_IT+0x498>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d01d      	beq.n	80038c0 <HAL_DMA_Start_IT+0x430>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a28      	ldr	r2, [pc, #160]	; (800392c <HAL_DMA_Start_IT+0x49c>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d018      	beq.n	80038c0 <HAL_DMA_Start_IT+0x430>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a27      	ldr	r2, [pc, #156]	; (8003930 <HAL_DMA_Start_IT+0x4a0>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d013      	beq.n	80038c0 <HAL_DMA_Start_IT+0x430>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a25      	ldr	r2, [pc, #148]	; (8003934 <HAL_DMA_Start_IT+0x4a4>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d00e      	beq.n	80038c0 <HAL_DMA_Start_IT+0x430>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a24      	ldr	r2, [pc, #144]	; (8003938 <HAL_DMA_Start_IT+0x4a8>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d009      	beq.n	80038c0 <HAL_DMA_Start_IT+0x430>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a22      	ldr	r2, [pc, #136]	; (800393c <HAL_DMA_Start_IT+0x4ac>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d004      	beq.n	80038c0 <HAL_DMA_Start_IT+0x430>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a21      	ldr	r2, [pc, #132]	; (8003940 <HAL_DMA_Start_IT+0x4b0>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d108      	bne.n	80038d2 <HAL_DMA_Start_IT+0x442>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 0201 	orr.w	r2, r2, #1
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	e012      	b.n	80038f8 <HAL_DMA_Start_IT+0x468>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f042 0201 	orr.w	r2, r2, #1
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	e009      	b.n	80038f8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80038f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40020010 	.word	0x40020010
 8003908:	40020028 	.word	0x40020028
 800390c:	40020040 	.word	0x40020040
 8003910:	40020058 	.word	0x40020058
 8003914:	40020070 	.word	0x40020070
 8003918:	40020088 	.word	0x40020088
 800391c:	400200a0 	.word	0x400200a0
 8003920:	400200b8 	.word	0x400200b8
 8003924:	40020410 	.word	0x40020410
 8003928:	40020428 	.word	0x40020428
 800392c:	40020440 	.word	0x40020440
 8003930:	40020458 	.word	0x40020458
 8003934:	40020470 	.word	0x40020470
 8003938:	40020488 	.word	0x40020488
 800393c:	400204a0 	.word	0x400204a0
 8003940:	400204b8 	.word	0x400204b8
 8003944:	58025408 	.word	0x58025408
 8003948:	5802541c 	.word	0x5802541c
 800394c:	58025430 	.word	0x58025430
 8003950:	58025444 	.word	0x58025444
 8003954:	58025458 	.word	0x58025458
 8003958:	5802546c 	.word	0x5802546c
 800395c:	58025480 	.word	0x58025480
 8003960:	58025494 	.word	0x58025494

08003964 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b08a      	sub	sp, #40	; 0x28
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003970:	4b67      	ldr	r3, [pc, #412]	; (8003b10 <HAL_DMA_IRQHandler+0x1ac>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a67      	ldr	r2, [pc, #412]	; (8003b14 <HAL_DMA_IRQHandler+0x1b0>)
 8003976:	fba2 2303 	umull	r2, r3, r2, r3
 800397a:	0a9b      	lsrs	r3, r3, #10
 800397c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003982:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003988:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a5f      	ldr	r2, [pc, #380]	; (8003b18 <HAL_DMA_IRQHandler+0x1b4>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d04a      	beq.n	8003a36 <HAL_DMA_IRQHandler+0xd2>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a5d      	ldr	r2, [pc, #372]	; (8003b1c <HAL_DMA_IRQHandler+0x1b8>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d045      	beq.n	8003a36 <HAL_DMA_IRQHandler+0xd2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a5c      	ldr	r2, [pc, #368]	; (8003b20 <HAL_DMA_IRQHandler+0x1bc>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d040      	beq.n	8003a36 <HAL_DMA_IRQHandler+0xd2>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a5a      	ldr	r2, [pc, #360]	; (8003b24 <HAL_DMA_IRQHandler+0x1c0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d03b      	beq.n	8003a36 <HAL_DMA_IRQHandler+0xd2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a59      	ldr	r2, [pc, #356]	; (8003b28 <HAL_DMA_IRQHandler+0x1c4>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d036      	beq.n	8003a36 <HAL_DMA_IRQHandler+0xd2>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a57      	ldr	r2, [pc, #348]	; (8003b2c <HAL_DMA_IRQHandler+0x1c8>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d031      	beq.n	8003a36 <HAL_DMA_IRQHandler+0xd2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a56      	ldr	r2, [pc, #344]	; (8003b30 <HAL_DMA_IRQHandler+0x1cc>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d02c      	beq.n	8003a36 <HAL_DMA_IRQHandler+0xd2>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a54      	ldr	r2, [pc, #336]	; (8003b34 <HAL_DMA_IRQHandler+0x1d0>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d027      	beq.n	8003a36 <HAL_DMA_IRQHandler+0xd2>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a53      	ldr	r2, [pc, #332]	; (8003b38 <HAL_DMA_IRQHandler+0x1d4>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d022      	beq.n	8003a36 <HAL_DMA_IRQHandler+0xd2>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a51      	ldr	r2, [pc, #324]	; (8003b3c <HAL_DMA_IRQHandler+0x1d8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d01d      	beq.n	8003a36 <HAL_DMA_IRQHandler+0xd2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a50      	ldr	r2, [pc, #320]	; (8003b40 <HAL_DMA_IRQHandler+0x1dc>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d018      	beq.n	8003a36 <HAL_DMA_IRQHandler+0xd2>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a4e      	ldr	r2, [pc, #312]	; (8003b44 <HAL_DMA_IRQHandler+0x1e0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d013      	beq.n	8003a36 <HAL_DMA_IRQHandler+0xd2>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a4d      	ldr	r2, [pc, #308]	; (8003b48 <HAL_DMA_IRQHandler+0x1e4>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d00e      	beq.n	8003a36 <HAL_DMA_IRQHandler+0xd2>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a4b      	ldr	r2, [pc, #300]	; (8003b4c <HAL_DMA_IRQHandler+0x1e8>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d009      	beq.n	8003a36 <HAL_DMA_IRQHandler+0xd2>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a4a      	ldr	r2, [pc, #296]	; (8003b50 <HAL_DMA_IRQHandler+0x1ec>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d004      	beq.n	8003a36 <HAL_DMA_IRQHandler+0xd2>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a48      	ldr	r2, [pc, #288]	; (8003b54 <HAL_DMA_IRQHandler+0x1f0>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d101      	bne.n	8003a3a <HAL_DMA_IRQHandler+0xd6>
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <HAL_DMA_IRQHandler+0xd8>
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 842b 	beq.w	8004298 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a46:	f003 031f 	and.w	r3, r3, #31
 8003a4a:	2208      	movs	r2, #8
 8003a4c:	409a      	lsls	r2, r3
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	4013      	ands	r3, r2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f000 80a2 	beq.w	8003b9c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a2e      	ldr	r2, [pc, #184]	; (8003b18 <HAL_DMA_IRQHandler+0x1b4>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d04a      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x194>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a2d      	ldr	r2, [pc, #180]	; (8003b1c <HAL_DMA_IRQHandler+0x1b8>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d045      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x194>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a2b      	ldr	r2, [pc, #172]	; (8003b20 <HAL_DMA_IRQHandler+0x1bc>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d040      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x194>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a2a      	ldr	r2, [pc, #168]	; (8003b24 <HAL_DMA_IRQHandler+0x1c0>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d03b      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x194>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a28      	ldr	r2, [pc, #160]	; (8003b28 <HAL_DMA_IRQHandler+0x1c4>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d036      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x194>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a27      	ldr	r2, [pc, #156]	; (8003b2c <HAL_DMA_IRQHandler+0x1c8>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d031      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x194>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a25      	ldr	r2, [pc, #148]	; (8003b30 <HAL_DMA_IRQHandler+0x1cc>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d02c      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x194>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a24      	ldr	r2, [pc, #144]	; (8003b34 <HAL_DMA_IRQHandler+0x1d0>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d027      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x194>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a22      	ldr	r2, [pc, #136]	; (8003b38 <HAL_DMA_IRQHandler+0x1d4>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d022      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x194>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a21      	ldr	r2, [pc, #132]	; (8003b3c <HAL_DMA_IRQHandler+0x1d8>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d01d      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x194>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a1f      	ldr	r2, [pc, #124]	; (8003b40 <HAL_DMA_IRQHandler+0x1dc>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d018      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x194>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a1e      	ldr	r2, [pc, #120]	; (8003b44 <HAL_DMA_IRQHandler+0x1e0>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d013      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x194>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a1c      	ldr	r2, [pc, #112]	; (8003b48 <HAL_DMA_IRQHandler+0x1e4>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d00e      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x194>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a1b      	ldr	r2, [pc, #108]	; (8003b4c <HAL_DMA_IRQHandler+0x1e8>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d009      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x194>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a19      	ldr	r2, [pc, #100]	; (8003b50 <HAL_DMA_IRQHandler+0x1ec>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d004      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x194>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a18      	ldr	r2, [pc, #96]	; (8003b54 <HAL_DMA_IRQHandler+0x1f0>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d12f      	bne.n	8003b58 <HAL_DMA_IRQHandler+0x1f4>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0304 	and.w	r3, r3, #4
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	bf14      	ite	ne
 8003b06:	2301      	movne	r3, #1
 8003b08:	2300      	moveq	r3, #0
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	e02e      	b.n	8003b6c <HAL_DMA_IRQHandler+0x208>
 8003b0e:	bf00      	nop
 8003b10:	24000000 	.word	0x24000000
 8003b14:	1b4e81b5 	.word	0x1b4e81b5
 8003b18:	40020010 	.word	0x40020010
 8003b1c:	40020028 	.word	0x40020028
 8003b20:	40020040 	.word	0x40020040
 8003b24:	40020058 	.word	0x40020058
 8003b28:	40020070 	.word	0x40020070
 8003b2c:	40020088 	.word	0x40020088
 8003b30:	400200a0 	.word	0x400200a0
 8003b34:	400200b8 	.word	0x400200b8
 8003b38:	40020410 	.word	0x40020410
 8003b3c:	40020428 	.word	0x40020428
 8003b40:	40020440 	.word	0x40020440
 8003b44:	40020458 	.word	0x40020458
 8003b48:	40020470 	.word	0x40020470
 8003b4c:	40020488 	.word	0x40020488
 8003b50:	400204a0 	.word	0x400204a0
 8003b54:	400204b8 	.word	0x400204b8
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0308 	and.w	r3, r3, #8
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	bf14      	ite	ne
 8003b66:	2301      	movne	r3, #1
 8003b68:	2300      	moveq	r3, #0
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d015      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0204 	bic.w	r2, r2, #4
 8003b7e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b84:	f003 031f 	and.w	r3, r3, #31
 8003b88:	2208      	movs	r2, #8
 8003b8a:	409a      	lsls	r2, r3
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
 8003b8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b94:	f043 0201 	orr.w	r2, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba0:	f003 031f 	and.w	r3, r3, #31
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d06e      	beq.n	8003c90 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a69      	ldr	r2, [pc, #420]	; (8003d5c <HAL_DMA_IRQHandler+0x3f8>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d04a      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x2ee>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a67      	ldr	r2, [pc, #412]	; (8003d60 <HAL_DMA_IRQHandler+0x3fc>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d045      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x2ee>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a66      	ldr	r2, [pc, #408]	; (8003d64 <HAL_DMA_IRQHandler+0x400>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d040      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x2ee>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a64      	ldr	r2, [pc, #400]	; (8003d68 <HAL_DMA_IRQHandler+0x404>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d03b      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x2ee>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a63      	ldr	r2, [pc, #396]	; (8003d6c <HAL_DMA_IRQHandler+0x408>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d036      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x2ee>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a61      	ldr	r2, [pc, #388]	; (8003d70 <HAL_DMA_IRQHandler+0x40c>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d031      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x2ee>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a60      	ldr	r2, [pc, #384]	; (8003d74 <HAL_DMA_IRQHandler+0x410>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d02c      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x2ee>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a5e      	ldr	r2, [pc, #376]	; (8003d78 <HAL_DMA_IRQHandler+0x414>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d027      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x2ee>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a5d      	ldr	r2, [pc, #372]	; (8003d7c <HAL_DMA_IRQHandler+0x418>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d022      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x2ee>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a5b      	ldr	r2, [pc, #364]	; (8003d80 <HAL_DMA_IRQHandler+0x41c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d01d      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x2ee>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a5a      	ldr	r2, [pc, #360]	; (8003d84 <HAL_DMA_IRQHandler+0x420>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d018      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x2ee>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a58      	ldr	r2, [pc, #352]	; (8003d88 <HAL_DMA_IRQHandler+0x424>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d013      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x2ee>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a57      	ldr	r2, [pc, #348]	; (8003d8c <HAL_DMA_IRQHandler+0x428>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d00e      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x2ee>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a55      	ldr	r2, [pc, #340]	; (8003d90 <HAL_DMA_IRQHandler+0x42c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d009      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x2ee>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a54      	ldr	r2, [pc, #336]	; (8003d94 <HAL_DMA_IRQHandler+0x430>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d004      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x2ee>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a52      	ldr	r2, [pc, #328]	; (8003d98 <HAL_DMA_IRQHandler+0x434>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d10a      	bne.n	8003c68 <HAL_DMA_IRQHandler+0x304>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	bf14      	ite	ne
 8003c60:	2301      	movne	r3, #1
 8003c62:	2300      	moveq	r3, #0
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	e003      	b.n	8003c70 <HAL_DMA_IRQHandler+0x30c>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2300      	movs	r3, #0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00d      	beq.n	8003c90 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c78:	f003 031f 	and.w	r3, r3, #31
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	409a      	lsls	r2, r3
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c88:	f043 0202 	orr.w	r2, r3, #2
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c94:	f003 031f 	and.w	r3, r3, #31
 8003c98:	2204      	movs	r2, #4
 8003c9a:	409a      	lsls	r2, r3
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 808f 	beq.w	8003dc4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a2c      	ldr	r2, [pc, #176]	; (8003d5c <HAL_DMA_IRQHandler+0x3f8>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d04a      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x3e2>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a2a      	ldr	r2, [pc, #168]	; (8003d60 <HAL_DMA_IRQHandler+0x3fc>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d045      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x3e2>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a29      	ldr	r2, [pc, #164]	; (8003d64 <HAL_DMA_IRQHandler+0x400>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d040      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x3e2>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a27      	ldr	r2, [pc, #156]	; (8003d68 <HAL_DMA_IRQHandler+0x404>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d03b      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x3e2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a26      	ldr	r2, [pc, #152]	; (8003d6c <HAL_DMA_IRQHandler+0x408>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d036      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x3e2>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a24      	ldr	r2, [pc, #144]	; (8003d70 <HAL_DMA_IRQHandler+0x40c>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d031      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x3e2>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a23      	ldr	r2, [pc, #140]	; (8003d74 <HAL_DMA_IRQHandler+0x410>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d02c      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x3e2>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a21      	ldr	r2, [pc, #132]	; (8003d78 <HAL_DMA_IRQHandler+0x414>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d027      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x3e2>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a20      	ldr	r2, [pc, #128]	; (8003d7c <HAL_DMA_IRQHandler+0x418>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d022      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x3e2>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a1e      	ldr	r2, [pc, #120]	; (8003d80 <HAL_DMA_IRQHandler+0x41c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d01d      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x3e2>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a1d      	ldr	r2, [pc, #116]	; (8003d84 <HAL_DMA_IRQHandler+0x420>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d018      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x3e2>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a1b      	ldr	r2, [pc, #108]	; (8003d88 <HAL_DMA_IRQHandler+0x424>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d013      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x3e2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a1a      	ldr	r2, [pc, #104]	; (8003d8c <HAL_DMA_IRQHandler+0x428>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d00e      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x3e2>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a18      	ldr	r2, [pc, #96]	; (8003d90 <HAL_DMA_IRQHandler+0x42c>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d009      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x3e2>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a17      	ldr	r2, [pc, #92]	; (8003d94 <HAL_DMA_IRQHandler+0x430>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d004      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x3e2>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a15      	ldr	r2, [pc, #84]	; (8003d98 <HAL_DMA_IRQHandler+0x434>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d12a      	bne.n	8003d9c <HAL_DMA_IRQHandler+0x438>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	bf14      	ite	ne
 8003d54:	2301      	movne	r3, #1
 8003d56:	2300      	moveq	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	e023      	b.n	8003da4 <HAL_DMA_IRQHandler+0x440>
 8003d5c:	40020010 	.word	0x40020010
 8003d60:	40020028 	.word	0x40020028
 8003d64:	40020040 	.word	0x40020040
 8003d68:	40020058 	.word	0x40020058
 8003d6c:	40020070 	.word	0x40020070
 8003d70:	40020088 	.word	0x40020088
 8003d74:	400200a0 	.word	0x400200a0
 8003d78:	400200b8 	.word	0x400200b8
 8003d7c:	40020410 	.word	0x40020410
 8003d80:	40020428 	.word	0x40020428
 8003d84:	40020440 	.word	0x40020440
 8003d88:	40020458 	.word	0x40020458
 8003d8c:	40020470 	.word	0x40020470
 8003d90:	40020488 	.word	0x40020488
 8003d94:	400204a0 	.word	0x400204a0
 8003d98:	400204b8 	.word	0x400204b8
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2300      	movs	r3, #0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00d      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dac:	f003 031f 	and.w	r3, r3, #31
 8003db0:	2204      	movs	r2, #4
 8003db2:	409a      	lsls	r2, r3
 8003db4:	6a3b      	ldr	r3, [r7, #32]
 8003db6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dbc:	f043 0204 	orr.w	r2, r3, #4
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc8:	f003 031f 	and.w	r3, r3, #31
 8003dcc:	2210      	movs	r2, #16
 8003dce:	409a      	lsls	r2, r3
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 80a6 	beq.w	8003f26 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a85      	ldr	r2, [pc, #532]	; (8003ff4 <HAL_DMA_IRQHandler+0x690>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d04a      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x516>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a83      	ldr	r2, [pc, #524]	; (8003ff8 <HAL_DMA_IRQHandler+0x694>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d045      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x516>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a82      	ldr	r2, [pc, #520]	; (8003ffc <HAL_DMA_IRQHandler+0x698>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d040      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x516>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a80      	ldr	r2, [pc, #512]	; (8004000 <HAL_DMA_IRQHandler+0x69c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d03b      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x516>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a7f      	ldr	r2, [pc, #508]	; (8004004 <HAL_DMA_IRQHandler+0x6a0>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d036      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x516>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a7d      	ldr	r2, [pc, #500]	; (8004008 <HAL_DMA_IRQHandler+0x6a4>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d031      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x516>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a7c      	ldr	r2, [pc, #496]	; (800400c <HAL_DMA_IRQHandler+0x6a8>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d02c      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x516>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a7a      	ldr	r2, [pc, #488]	; (8004010 <HAL_DMA_IRQHandler+0x6ac>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d027      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x516>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a79      	ldr	r2, [pc, #484]	; (8004014 <HAL_DMA_IRQHandler+0x6b0>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d022      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x516>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a77      	ldr	r2, [pc, #476]	; (8004018 <HAL_DMA_IRQHandler+0x6b4>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d01d      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x516>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a76      	ldr	r2, [pc, #472]	; (800401c <HAL_DMA_IRQHandler+0x6b8>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d018      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x516>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a74      	ldr	r2, [pc, #464]	; (8004020 <HAL_DMA_IRQHandler+0x6bc>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d013      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x516>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a73      	ldr	r2, [pc, #460]	; (8004024 <HAL_DMA_IRQHandler+0x6c0>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d00e      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x516>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a71      	ldr	r2, [pc, #452]	; (8004028 <HAL_DMA_IRQHandler+0x6c4>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d009      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x516>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a70      	ldr	r2, [pc, #448]	; (800402c <HAL_DMA_IRQHandler+0x6c8>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d004      	beq.n	8003e7a <HAL_DMA_IRQHandler+0x516>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a6e      	ldr	r2, [pc, #440]	; (8004030 <HAL_DMA_IRQHandler+0x6cc>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d10a      	bne.n	8003e90 <HAL_DMA_IRQHandler+0x52c>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0308 	and.w	r3, r3, #8
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	bf14      	ite	ne
 8003e88:	2301      	movne	r3, #1
 8003e8a:	2300      	moveq	r3, #0
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	e009      	b.n	8003ea4 <HAL_DMA_IRQHandler+0x540>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0304 	and.w	r3, r3, #4
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	bf14      	ite	ne
 8003e9e:	2301      	movne	r3, #1
 8003ea0:	2300      	moveq	r3, #0
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d03e      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eac:	f003 031f 	and.w	r3, r3, #31
 8003eb0:	2210      	movs	r2, #16
 8003eb2:	409a      	lsls	r2, r3
 8003eb4:	6a3b      	ldr	r3, [r7, #32]
 8003eb6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d018      	beq.n	8003ef8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d108      	bne.n	8003ee6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d024      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	4798      	blx	r3
 8003ee4:	e01f      	b.n	8003f26 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d01b      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	4798      	blx	r3
 8003ef6:	e016      	b.n	8003f26 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d107      	bne.n	8003f16 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0208 	bic.w	r2, r2, #8
 8003f14:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2a:	f003 031f 	and.w	r3, r3, #31
 8003f2e:	2220      	movs	r2, #32
 8003f30:	409a      	lsls	r2, r3
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	4013      	ands	r3, r2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 8110 	beq.w	800415c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a2c      	ldr	r2, [pc, #176]	; (8003ff4 <HAL_DMA_IRQHandler+0x690>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d04a      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x678>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a2b      	ldr	r2, [pc, #172]	; (8003ff8 <HAL_DMA_IRQHandler+0x694>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d045      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x678>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a29      	ldr	r2, [pc, #164]	; (8003ffc <HAL_DMA_IRQHandler+0x698>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d040      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x678>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a28      	ldr	r2, [pc, #160]	; (8004000 <HAL_DMA_IRQHandler+0x69c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d03b      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x678>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a26      	ldr	r2, [pc, #152]	; (8004004 <HAL_DMA_IRQHandler+0x6a0>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d036      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x678>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a25      	ldr	r2, [pc, #148]	; (8004008 <HAL_DMA_IRQHandler+0x6a4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d031      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x678>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a23      	ldr	r2, [pc, #140]	; (800400c <HAL_DMA_IRQHandler+0x6a8>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d02c      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x678>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a22      	ldr	r2, [pc, #136]	; (8004010 <HAL_DMA_IRQHandler+0x6ac>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d027      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x678>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a20      	ldr	r2, [pc, #128]	; (8004014 <HAL_DMA_IRQHandler+0x6b0>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d022      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x678>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a1f      	ldr	r2, [pc, #124]	; (8004018 <HAL_DMA_IRQHandler+0x6b4>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d01d      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x678>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a1d      	ldr	r2, [pc, #116]	; (800401c <HAL_DMA_IRQHandler+0x6b8>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d018      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x678>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a1c      	ldr	r2, [pc, #112]	; (8004020 <HAL_DMA_IRQHandler+0x6bc>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d013      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x678>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a1a      	ldr	r2, [pc, #104]	; (8004024 <HAL_DMA_IRQHandler+0x6c0>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d00e      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x678>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a19      	ldr	r2, [pc, #100]	; (8004028 <HAL_DMA_IRQHandler+0x6c4>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d009      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x678>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a17      	ldr	r2, [pc, #92]	; (800402c <HAL_DMA_IRQHandler+0x6c8>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d004      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x678>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a16      	ldr	r2, [pc, #88]	; (8004030 <HAL_DMA_IRQHandler+0x6cc>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d12b      	bne.n	8004034 <HAL_DMA_IRQHandler+0x6d0>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0310 	and.w	r3, r3, #16
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	bf14      	ite	ne
 8003fea:	2301      	movne	r3, #1
 8003fec:	2300      	moveq	r3, #0
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	e02a      	b.n	8004048 <HAL_DMA_IRQHandler+0x6e4>
 8003ff2:	bf00      	nop
 8003ff4:	40020010 	.word	0x40020010
 8003ff8:	40020028 	.word	0x40020028
 8003ffc:	40020040 	.word	0x40020040
 8004000:	40020058 	.word	0x40020058
 8004004:	40020070 	.word	0x40020070
 8004008:	40020088 	.word	0x40020088
 800400c:	400200a0 	.word	0x400200a0
 8004010:	400200b8 	.word	0x400200b8
 8004014:	40020410 	.word	0x40020410
 8004018:	40020428 	.word	0x40020428
 800401c:	40020440 	.word	0x40020440
 8004020:	40020458 	.word	0x40020458
 8004024:	40020470 	.word	0x40020470
 8004028:	40020488 	.word	0x40020488
 800402c:	400204a0 	.word	0x400204a0
 8004030:	400204b8 	.word	0x400204b8
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	bf14      	ite	ne
 8004042:	2301      	movne	r3, #1
 8004044:	2300      	moveq	r3, #0
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 8087 	beq.w	800415c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004052:	f003 031f 	and.w	r3, r3, #31
 8004056:	2220      	movs	r2, #32
 8004058:	409a      	lsls	r2, r3
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b04      	cmp	r3, #4
 8004068:	d139      	bne.n	80040de <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 0216 	bic.w	r2, r2, #22
 8004078:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	695a      	ldr	r2, [r3, #20]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004088:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	2b00      	cmp	r3, #0
 8004090:	d103      	bne.n	800409a <HAL_DMA_IRQHandler+0x736>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004096:	2b00      	cmp	r3, #0
 8004098:	d007      	beq.n	80040aa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 0208 	bic.w	r2, r2, #8
 80040a8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ae:	f003 031f 	and.w	r3, r3, #31
 80040b2:	223f      	movs	r2, #63	; 0x3f
 80040b4:	409a      	lsls	r2, r3
 80040b6:	6a3b      	ldr	r3, [r7, #32]
 80040b8:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 8382 	beq.w	80047d8 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	4798      	blx	r3
          }
          return;
 80040dc:	e37c      	b.n	80047d8 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d018      	beq.n	800411e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d108      	bne.n	800410c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d02c      	beq.n	800415c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	4798      	blx	r3
 800410a:	e027      	b.n	800415c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004110:	2b00      	cmp	r3, #0
 8004112:	d023      	beq.n	800415c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	4798      	blx	r3
 800411c:	e01e      	b.n	800415c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10f      	bne.n	800414c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0210 	bic.w	r2, r2, #16
 800413a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004150:	2b00      	cmp	r3, #0
 8004152:	d003      	beq.n	800415c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 833e 	beq.w	80047e2 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 8088 	beq.w	8004284 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2204      	movs	r2, #4
 8004178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a8e      	ldr	r2, [pc, #568]	; (80043bc <HAL_DMA_IRQHandler+0xa58>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d04a      	beq.n	800421c <HAL_DMA_IRQHandler+0x8b8>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a8d      	ldr	r2, [pc, #564]	; (80043c0 <HAL_DMA_IRQHandler+0xa5c>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d045      	beq.n	800421c <HAL_DMA_IRQHandler+0x8b8>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a8b      	ldr	r2, [pc, #556]	; (80043c4 <HAL_DMA_IRQHandler+0xa60>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d040      	beq.n	800421c <HAL_DMA_IRQHandler+0x8b8>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a8a      	ldr	r2, [pc, #552]	; (80043c8 <HAL_DMA_IRQHandler+0xa64>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d03b      	beq.n	800421c <HAL_DMA_IRQHandler+0x8b8>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a88      	ldr	r2, [pc, #544]	; (80043cc <HAL_DMA_IRQHandler+0xa68>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d036      	beq.n	800421c <HAL_DMA_IRQHandler+0x8b8>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a87      	ldr	r2, [pc, #540]	; (80043d0 <HAL_DMA_IRQHandler+0xa6c>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d031      	beq.n	800421c <HAL_DMA_IRQHandler+0x8b8>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a85      	ldr	r2, [pc, #532]	; (80043d4 <HAL_DMA_IRQHandler+0xa70>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d02c      	beq.n	800421c <HAL_DMA_IRQHandler+0x8b8>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a84      	ldr	r2, [pc, #528]	; (80043d8 <HAL_DMA_IRQHandler+0xa74>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d027      	beq.n	800421c <HAL_DMA_IRQHandler+0x8b8>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a82      	ldr	r2, [pc, #520]	; (80043dc <HAL_DMA_IRQHandler+0xa78>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d022      	beq.n	800421c <HAL_DMA_IRQHandler+0x8b8>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a81      	ldr	r2, [pc, #516]	; (80043e0 <HAL_DMA_IRQHandler+0xa7c>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d01d      	beq.n	800421c <HAL_DMA_IRQHandler+0x8b8>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a7f      	ldr	r2, [pc, #508]	; (80043e4 <HAL_DMA_IRQHandler+0xa80>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d018      	beq.n	800421c <HAL_DMA_IRQHandler+0x8b8>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a7e      	ldr	r2, [pc, #504]	; (80043e8 <HAL_DMA_IRQHandler+0xa84>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d013      	beq.n	800421c <HAL_DMA_IRQHandler+0x8b8>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a7c      	ldr	r2, [pc, #496]	; (80043ec <HAL_DMA_IRQHandler+0xa88>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d00e      	beq.n	800421c <HAL_DMA_IRQHandler+0x8b8>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a7b      	ldr	r2, [pc, #492]	; (80043f0 <HAL_DMA_IRQHandler+0xa8c>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d009      	beq.n	800421c <HAL_DMA_IRQHandler+0x8b8>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a79      	ldr	r2, [pc, #484]	; (80043f4 <HAL_DMA_IRQHandler+0xa90>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d004      	beq.n	800421c <HAL_DMA_IRQHandler+0x8b8>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a78      	ldr	r2, [pc, #480]	; (80043f8 <HAL_DMA_IRQHandler+0xa94>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d108      	bne.n	800422e <HAL_DMA_IRQHandler+0x8ca>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 0201 	bic.w	r2, r2, #1
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	e007      	b.n	800423e <HAL_DMA_IRQHandler+0x8da>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 0201 	bic.w	r2, r2, #1
 800423c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	3301      	adds	r3, #1
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004246:	429a      	cmp	r2, r3
 8004248:	d307      	bcc.n	800425a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1f2      	bne.n	800423e <HAL_DMA_IRQHandler+0x8da>
 8004258:	e000      	b.n	800425c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800425a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d004      	beq.n	800427c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2203      	movs	r2, #3
 8004276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800427a:	e003      	b.n	8004284 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 82aa 	beq.w	80047e2 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	4798      	blx	r3
 8004296:	e2a4      	b.n	80047e2 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a57      	ldr	r2, [pc, #348]	; (80043fc <HAL_DMA_IRQHandler+0xa98>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d04a      	beq.n	8004338 <HAL_DMA_IRQHandler+0x9d4>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a56      	ldr	r2, [pc, #344]	; (8004400 <HAL_DMA_IRQHandler+0xa9c>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d045      	beq.n	8004338 <HAL_DMA_IRQHandler+0x9d4>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a54      	ldr	r2, [pc, #336]	; (8004404 <HAL_DMA_IRQHandler+0xaa0>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d040      	beq.n	8004338 <HAL_DMA_IRQHandler+0x9d4>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a53      	ldr	r2, [pc, #332]	; (8004408 <HAL_DMA_IRQHandler+0xaa4>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d03b      	beq.n	8004338 <HAL_DMA_IRQHandler+0x9d4>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a51      	ldr	r2, [pc, #324]	; (800440c <HAL_DMA_IRQHandler+0xaa8>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d036      	beq.n	8004338 <HAL_DMA_IRQHandler+0x9d4>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a50      	ldr	r2, [pc, #320]	; (8004410 <HAL_DMA_IRQHandler+0xaac>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d031      	beq.n	8004338 <HAL_DMA_IRQHandler+0x9d4>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a4e      	ldr	r2, [pc, #312]	; (8004414 <HAL_DMA_IRQHandler+0xab0>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d02c      	beq.n	8004338 <HAL_DMA_IRQHandler+0x9d4>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a4d      	ldr	r2, [pc, #308]	; (8004418 <HAL_DMA_IRQHandler+0xab4>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d027      	beq.n	8004338 <HAL_DMA_IRQHandler+0x9d4>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a4b      	ldr	r2, [pc, #300]	; (800441c <HAL_DMA_IRQHandler+0xab8>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d022      	beq.n	8004338 <HAL_DMA_IRQHandler+0x9d4>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a4a      	ldr	r2, [pc, #296]	; (8004420 <HAL_DMA_IRQHandler+0xabc>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d01d      	beq.n	8004338 <HAL_DMA_IRQHandler+0x9d4>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a48      	ldr	r2, [pc, #288]	; (8004424 <HAL_DMA_IRQHandler+0xac0>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d018      	beq.n	8004338 <HAL_DMA_IRQHandler+0x9d4>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a47      	ldr	r2, [pc, #284]	; (8004428 <HAL_DMA_IRQHandler+0xac4>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d013      	beq.n	8004338 <HAL_DMA_IRQHandler+0x9d4>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a45      	ldr	r2, [pc, #276]	; (800442c <HAL_DMA_IRQHandler+0xac8>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d00e      	beq.n	8004338 <HAL_DMA_IRQHandler+0x9d4>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a44      	ldr	r2, [pc, #272]	; (8004430 <HAL_DMA_IRQHandler+0xacc>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d009      	beq.n	8004338 <HAL_DMA_IRQHandler+0x9d4>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a42      	ldr	r2, [pc, #264]	; (8004434 <HAL_DMA_IRQHandler+0xad0>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d004      	beq.n	8004338 <HAL_DMA_IRQHandler+0x9d4>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a41      	ldr	r2, [pc, #260]	; (8004438 <HAL_DMA_IRQHandler+0xad4>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d101      	bne.n	800433c <HAL_DMA_IRQHandler+0x9d8>
 8004338:	2301      	movs	r3, #1
 800433a:	e000      	b.n	800433e <HAL_DMA_IRQHandler+0x9da>
 800433c:	2300      	movs	r3, #0
 800433e:	2b00      	cmp	r3, #0
 8004340:	f000 824f 	beq.w	80047e2 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004350:	f003 031f 	and.w	r3, r3, #31
 8004354:	2204      	movs	r2, #4
 8004356:	409a      	lsls	r2, r3
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	4013      	ands	r3, r2
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 80dd 	beq.w	800451c <HAL_DMA_IRQHandler+0xbb8>
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 80d7 	beq.w	800451c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004372:	f003 031f 	and.w	r3, r3, #31
 8004376:	2204      	movs	r2, #4
 8004378:	409a      	lsls	r2, r3
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d059      	beq.n	800443c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d109      	bne.n	80043a6 <HAL_DMA_IRQHandler+0xa42>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004396:	2b00      	cmp	r3, #0
 8004398:	f000 8220 	beq.w	80047dc <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043a4:	e21a      	b.n	80047dc <HAL_DMA_IRQHandler+0xe78>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 8216 	beq.w	80047dc <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043b8:	e210      	b.n	80047dc <HAL_DMA_IRQHandler+0xe78>
 80043ba:	bf00      	nop
 80043bc:	40020010 	.word	0x40020010
 80043c0:	40020028 	.word	0x40020028
 80043c4:	40020040 	.word	0x40020040
 80043c8:	40020058 	.word	0x40020058
 80043cc:	40020070 	.word	0x40020070
 80043d0:	40020088 	.word	0x40020088
 80043d4:	400200a0 	.word	0x400200a0
 80043d8:	400200b8 	.word	0x400200b8
 80043dc:	40020410 	.word	0x40020410
 80043e0:	40020428 	.word	0x40020428
 80043e4:	40020440 	.word	0x40020440
 80043e8:	40020458 	.word	0x40020458
 80043ec:	40020470 	.word	0x40020470
 80043f0:	40020488 	.word	0x40020488
 80043f4:	400204a0 	.word	0x400204a0
 80043f8:	400204b8 	.word	0x400204b8
 80043fc:	48022c08 	.word	0x48022c08
 8004400:	48022c1c 	.word	0x48022c1c
 8004404:	48022c30 	.word	0x48022c30
 8004408:	48022c44 	.word	0x48022c44
 800440c:	48022c58 	.word	0x48022c58
 8004410:	48022c6c 	.word	0x48022c6c
 8004414:	48022c80 	.word	0x48022c80
 8004418:	48022c94 	.word	0x48022c94
 800441c:	58025408 	.word	0x58025408
 8004420:	5802541c 	.word	0x5802541c
 8004424:	58025430 	.word	0x58025430
 8004428:	58025444 	.word	0x58025444
 800442c:	58025458 	.word	0x58025458
 8004430:	5802546c 	.word	0x5802546c
 8004434:	58025480 	.word	0x58025480
 8004438:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	f003 0320 	and.w	r3, r3, #32
 8004442:	2b00      	cmp	r3, #0
 8004444:	d160      	bne.n	8004508 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a8c      	ldr	r2, [pc, #560]	; (800467c <HAL_DMA_IRQHandler+0xd18>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d04a      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xb82>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a8a      	ldr	r2, [pc, #552]	; (8004680 <HAL_DMA_IRQHandler+0xd1c>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d045      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xb82>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a89      	ldr	r2, [pc, #548]	; (8004684 <HAL_DMA_IRQHandler+0xd20>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d040      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xb82>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a87      	ldr	r2, [pc, #540]	; (8004688 <HAL_DMA_IRQHandler+0xd24>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d03b      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xb82>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a86      	ldr	r2, [pc, #536]	; (800468c <HAL_DMA_IRQHandler+0xd28>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d036      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xb82>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a84      	ldr	r2, [pc, #528]	; (8004690 <HAL_DMA_IRQHandler+0xd2c>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d031      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xb82>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a83      	ldr	r2, [pc, #524]	; (8004694 <HAL_DMA_IRQHandler+0xd30>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d02c      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xb82>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a81      	ldr	r2, [pc, #516]	; (8004698 <HAL_DMA_IRQHandler+0xd34>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d027      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xb82>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a80      	ldr	r2, [pc, #512]	; (800469c <HAL_DMA_IRQHandler+0xd38>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d022      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xb82>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a7e      	ldr	r2, [pc, #504]	; (80046a0 <HAL_DMA_IRQHandler+0xd3c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d01d      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xb82>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a7d      	ldr	r2, [pc, #500]	; (80046a4 <HAL_DMA_IRQHandler+0xd40>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d018      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xb82>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a7b      	ldr	r2, [pc, #492]	; (80046a8 <HAL_DMA_IRQHandler+0xd44>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d013      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xb82>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a7a      	ldr	r2, [pc, #488]	; (80046ac <HAL_DMA_IRQHandler+0xd48>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d00e      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xb82>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a78      	ldr	r2, [pc, #480]	; (80046b0 <HAL_DMA_IRQHandler+0xd4c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d009      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xb82>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a77      	ldr	r2, [pc, #476]	; (80046b4 <HAL_DMA_IRQHandler+0xd50>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d004      	beq.n	80044e6 <HAL_DMA_IRQHandler+0xb82>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a75      	ldr	r2, [pc, #468]	; (80046b8 <HAL_DMA_IRQHandler+0xd54>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d108      	bne.n	80044f8 <HAL_DMA_IRQHandler+0xb94>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 0208 	bic.w	r2, r2, #8
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	e007      	b.n	8004508 <HAL_DMA_IRQHandler+0xba4>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0204 	bic.w	r2, r2, #4
 8004506:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450c:	2b00      	cmp	r3, #0
 800450e:	f000 8165 	beq.w	80047dc <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800451a:	e15f      	b.n	80047dc <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004520:	f003 031f 	and.w	r3, r3, #31
 8004524:	2202      	movs	r2, #2
 8004526:	409a      	lsls	r2, r3
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	4013      	ands	r3, r2
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 80c5 	beq.w	80046bc <HAL_DMA_IRQHandler+0xd58>
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 80bf 	beq.w	80046bc <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004542:	f003 031f 	and.w	r3, r3, #31
 8004546:	2202      	movs	r2, #2
 8004548:	409a      	lsls	r2, r3
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d018      	beq.n	800458a <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d109      	bne.n	8004576 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 813a 	beq.w	80047e0 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004574:	e134      	b.n	80047e0 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 8130 	beq.w	80047e0 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004588:	e12a      	b.n	80047e0 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	f003 0320 	and.w	r3, r3, #32
 8004590:	2b00      	cmp	r3, #0
 8004592:	d168      	bne.n	8004666 <HAL_DMA_IRQHandler+0xd02>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a38      	ldr	r2, [pc, #224]	; (800467c <HAL_DMA_IRQHandler+0xd18>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d04a      	beq.n	8004634 <HAL_DMA_IRQHandler+0xcd0>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a37      	ldr	r2, [pc, #220]	; (8004680 <HAL_DMA_IRQHandler+0xd1c>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d045      	beq.n	8004634 <HAL_DMA_IRQHandler+0xcd0>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a35      	ldr	r2, [pc, #212]	; (8004684 <HAL_DMA_IRQHandler+0xd20>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d040      	beq.n	8004634 <HAL_DMA_IRQHandler+0xcd0>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a34      	ldr	r2, [pc, #208]	; (8004688 <HAL_DMA_IRQHandler+0xd24>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d03b      	beq.n	8004634 <HAL_DMA_IRQHandler+0xcd0>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a32      	ldr	r2, [pc, #200]	; (800468c <HAL_DMA_IRQHandler+0xd28>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d036      	beq.n	8004634 <HAL_DMA_IRQHandler+0xcd0>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a31      	ldr	r2, [pc, #196]	; (8004690 <HAL_DMA_IRQHandler+0xd2c>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d031      	beq.n	8004634 <HAL_DMA_IRQHandler+0xcd0>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a2f      	ldr	r2, [pc, #188]	; (8004694 <HAL_DMA_IRQHandler+0xd30>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d02c      	beq.n	8004634 <HAL_DMA_IRQHandler+0xcd0>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a2e      	ldr	r2, [pc, #184]	; (8004698 <HAL_DMA_IRQHandler+0xd34>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d027      	beq.n	8004634 <HAL_DMA_IRQHandler+0xcd0>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a2c      	ldr	r2, [pc, #176]	; (800469c <HAL_DMA_IRQHandler+0xd38>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d022      	beq.n	8004634 <HAL_DMA_IRQHandler+0xcd0>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a2b      	ldr	r2, [pc, #172]	; (80046a0 <HAL_DMA_IRQHandler+0xd3c>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d01d      	beq.n	8004634 <HAL_DMA_IRQHandler+0xcd0>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a29      	ldr	r2, [pc, #164]	; (80046a4 <HAL_DMA_IRQHandler+0xd40>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d018      	beq.n	8004634 <HAL_DMA_IRQHandler+0xcd0>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a28      	ldr	r2, [pc, #160]	; (80046a8 <HAL_DMA_IRQHandler+0xd44>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d013      	beq.n	8004634 <HAL_DMA_IRQHandler+0xcd0>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a26      	ldr	r2, [pc, #152]	; (80046ac <HAL_DMA_IRQHandler+0xd48>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d00e      	beq.n	8004634 <HAL_DMA_IRQHandler+0xcd0>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a25      	ldr	r2, [pc, #148]	; (80046b0 <HAL_DMA_IRQHandler+0xd4c>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d009      	beq.n	8004634 <HAL_DMA_IRQHandler+0xcd0>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a23      	ldr	r2, [pc, #140]	; (80046b4 <HAL_DMA_IRQHandler+0xd50>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d004      	beq.n	8004634 <HAL_DMA_IRQHandler+0xcd0>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a22      	ldr	r2, [pc, #136]	; (80046b8 <HAL_DMA_IRQHandler+0xd54>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d108      	bne.n	8004646 <HAL_DMA_IRQHandler+0xce2>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 0214 	bic.w	r2, r2, #20
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	e007      	b.n	8004656 <HAL_DMA_IRQHandler+0xcf2>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 020a 	bic.w	r2, r2, #10
 8004654:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800466a:	2b00      	cmp	r3, #0
 800466c:	f000 80b8 	beq.w	80047e0 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004678:	e0b2      	b.n	80047e0 <HAL_DMA_IRQHandler+0xe7c>
 800467a:	bf00      	nop
 800467c:	40020010 	.word	0x40020010
 8004680:	40020028 	.word	0x40020028
 8004684:	40020040 	.word	0x40020040
 8004688:	40020058 	.word	0x40020058
 800468c:	40020070 	.word	0x40020070
 8004690:	40020088 	.word	0x40020088
 8004694:	400200a0 	.word	0x400200a0
 8004698:	400200b8 	.word	0x400200b8
 800469c:	40020410 	.word	0x40020410
 80046a0:	40020428 	.word	0x40020428
 80046a4:	40020440 	.word	0x40020440
 80046a8:	40020458 	.word	0x40020458
 80046ac:	40020470 	.word	0x40020470
 80046b0:	40020488 	.word	0x40020488
 80046b4:	400204a0 	.word	0x400204a0
 80046b8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c0:	f003 031f 	and.w	r3, r3, #31
 80046c4:	2208      	movs	r2, #8
 80046c6:	409a      	lsls	r2, r3
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	4013      	ands	r3, r2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 8088 	beq.w	80047e2 <HAL_DMA_IRQHandler+0xe7e>
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	f003 0308 	and.w	r3, r3, #8
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 8082 	beq.w	80047e2 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a41      	ldr	r2, [pc, #260]	; (80047e8 <HAL_DMA_IRQHandler+0xe84>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d04a      	beq.n	800477e <HAL_DMA_IRQHandler+0xe1a>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a3f      	ldr	r2, [pc, #252]	; (80047ec <HAL_DMA_IRQHandler+0xe88>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d045      	beq.n	800477e <HAL_DMA_IRQHandler+0xe1a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a3e      	ldr	r2, [pc, #248]	; (80047f0 <HAL_DMA_IRQHandler+0xe8c>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d040      	beq.n	800477e <HAL_DMA_IRQHandler+0xe1a>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a3c      	ldr	r2, [pc, #240]	; (80047f4 <HAL_DMA_IRQHandler+0xe90>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d03b      	beq.n	800477e <HAL_DMA_IRQHandler+0xe1a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a3b      	ldr	r2, [pc, #236]	; (80047f8 <HAL_DMA_IRQHandler+0xe94>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d036      	beq.n	800477e <HAL_DMA_IRQHandler+0xe1a>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a39      	ldr	r2, [pc, #228]	; (80047fc <HAL_DMA_IRQHandler+0xe98>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d031      	beq.n	800477e <HAL_DMA_IRQHandler+0xe1a>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a38      	ldr	r2, [pc, #224]	; (8004800 <HAL_DMA_IRQHandler+0xe9c>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d02c      	beq.n	800477e <HAL_DMA_IRQHandler+0xe1a>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a36      	ldr	r2, [pc, #216]	; (8004804 <HAL_DMA_IRQHandler+0xea0>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d027      	beq.n	800477e <HAL_DMA_IRQHandler+0xe1a>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a35      	ldr	r2, [pc, #212]	; (8004808 <HAL_DMA_IRQHandler+0xea4>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d022      	beq.n	800477e <HAL_DMA_IRQHandler+0xe1a>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a33      	ldr	r2, [pc, #204]	; (800480c <HAL_DMA_IRQHandler+0xea8>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d01d      	beq.n	800477e <HAL_DMA_IRQHandler+0xe1a>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a32      	ldr	r2, [pc, #200]	; (8004810 <HAL_DMA_IRQHandler+0xeac>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d018      	beq.n	800477e <HAL_DMA_IRQHandler+0xe1a>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a30      	ldr	r2, [pc, #192]	; (8004814 <HAL_DMA_IRQHandler+0xeb0>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d013      	beq.n	800477e <HAL_DMA_IRQHandler+0xe1a>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a2f      	ldr	r2, [pc, #188]	; (8004818 <HAL_DMA_IRQHandler+0xeb4>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d00e      	beq.n	800477e <HAL_DMA_IRQHandler+0xe1a>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a2d      	ldr	r2, [pc, #180]	; (800481c <HAL_DMA_IRQHandler+0xeb8>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d009      	beq.n	800477e <HAL_DMA_IRQHandler+0xe1a>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a2c      	ldr	r2, [pc, #176]	; (8004820 <HAL_DMA_IRQHandler+0xebc>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d004      	beq.n	800477e <HAL_DMA_IRQHandler+0xe1a>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a2a      	ldr	r2, [pc, #168]	; (8004824 <HAL_DMA_IRQHandler+0xec0>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d108      	bne.n	8004790 <HAL_DMA_IRQHandler+0xe2c>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 021c 	bic.w	r2, r2, #28
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	e007      	b.n	80047a0 <HAL_DMA_IRQHandler+0xe3c>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 020e 	bic.w	r2, r2, #14
 800479e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a4:	f003 031f 	and.w	r3, r3, #31
 80047a8:	2201      	movs	r2, #1
 80047aa:	409a      	lsls	r2, r3
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d009      	beq.n	80047e2 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	4798      	blx	r3
 80047d6:	e004      	b.n	80047e2 <HAL_DMA_IRQHandler+0xe7e>
          return;
 80047d8:	bf00      	nop
 80047da:	e002      	b.n	80047e2 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047dc:	bf00      	nop
 80047de:	e000      	b.n	80047e2 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047e0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80047e2:	3728      	adds	r7, #40	; 0x28
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	40020010 	.word	0x40020010
 80047ec:	40020028 	.word	0x40020028
 80047f0:	40020040 	.word	0x40020040
 80047f4:	40020058 	.word	0x40020058
 80047f8:	40020070 	.word	0x40020070
 80047fc:	40020088 	.word	0x40020088
 8004800:	400200a0 	.word	0x400200a0
 8004804:	400200b8 	.word	0x400200b8
 8004808:	40020410 	.word	0x40020410
 800480c:	40020428 	.word	0x40020428
 8004810:	40020440 	.word	0x40020440
 8004814:	40020458 	.word	0x40020458
 8004818:	40020470 	.word	0x40020470
 800481c:	40020488 	.word	0x40020488
 8004820:	400204a0 	.word	0x400204a0
 8004824:	400204b8 	.word	0x400204b8

08004828 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004828:	b480      	push	{r7}
 800482a:	b087      	sub	sp, #28
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
 8004834:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004840:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a84      	ldr	r2, [pc, #528]	; (8004a58 <DMA_SetConfig+0x230>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d072      	beq.n	8004932 <DMA_SetConfig+0x10a>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a82      	ldr	r2, [pc, #520]	; (8004a5c <DMA_SetConfig+0x234>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d06d      	beq.n	8004932 <DMA_SetConfig+0x10a>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a81      	ldr	r2, [pc, #516]	; (8004a60 <DMA_SetConfig+0x238>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d068      	beq.n	8004932 <DMA_SetConfig+0x10a>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a7f      	ldr	r2, [pc, #508]	; (8004a64 <DMA_SetConfig+0x23c>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d063      	beq.n	8004932 <DMA_SetConfig+0x10a>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a7e      	ldr	r2, [pc, #504]	; (8004a68 <DMA_SetConfig+0x240>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d05e      	beq.n	8004932 <DMA_SetConfig+0x10a>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a7c      	ldr	r2, [pc, #496]	; (8004a6c <DMA_SetConfig+0x244>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d059      	beq.n	8004932 <DMA_SetConfig+0x10a>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a7b      	ldr	r2, [pc, #492]	; (8004a70 <DMA_SetConfig+0x248>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d054      	beq.n	8004932 <DMA_SetConfig+0x10a>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a79      	ldr	r2, [pc, #484]	; (8004a74 <DMA_SetConfig+0x24c>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d04f      	beq.n	8004932 <DMA_SetConfig+0x10a>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a78      	ldr	r2, [pc, #480]	; (8004a78 <DMA_SetConfig+0x250>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d04a      	beq.n	8004932 <DMA_SetConfig+0x10a>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a76      	ldr	r2, [pc, #472]	; (8004a7c <DMA_SetConfig+0x254>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d045      	beq.n	8004932 <DMA_SetConfig+0x10a>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a75      	ldr	r2, [pc, #468]	; (8004a80 <DMA_SetConfig+0x258>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d040      	beq.n	8004932 <DMA_SetConfig+0x10a>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a73      	ldr	r2, [pc, #460]	; (8004a84 <DMA_SetConfig+0x25c>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d03b      	beq.n	8004932 <DMA_SetConfig+0x10a>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a72      	ldr	r2, [pc, #456]	; (8004a88 <DMA_SetConfig+0x260>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d036      	beq.n	8004932 <DMA_SetConfig+0x10a>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a70      	ldr	r2, [pc, #448]	; (8004a8c <DMA_SetConfig+0x264>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d031      	beq.n	8004932 <DMA_SetConfig+0x10a>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a6f      	ldr	r2, [pc, #444]	; (8004a90 <DMA_SetConfig+0x268>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d02c      	beq.n	8004932 <DMA_SetConfig+0x10a>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a6d      	ldr	r2, [pc, #436]	; (8004a94 <DMA_SetConfig+0x26c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d027      	beq.n	8004932 <DMA_SetConfig+0x10a>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a6c      	ldr	r2, [pc, #432]	; (8004a98 <DMA_SetConfig+0x270>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d022      	beq.n	8004932 <DMA_SetConfig+0x10a>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a6a      	ldr	r2, [pc, #424]	; (8004a9c <DMA_SetConfig+0x274>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d01d      	beq.n	8004932 <DMA_SetConfig+0x10a>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a69      	ldr	r2, [pc, #420]	; (8004aa0 <DMA_SetConfig+0x278>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d018      	beq.n	8004932 <DMA_SetConfig+0x10a>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a67      	ldr	r2, [pc, #412]	; (8004aa4 <DMA_SetConfig+0x27c>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d013      	beq.n	8004932 <DMA_SetConfig+0x10a>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a66      	ldr	r2, [pc, #408]	; (8004aa8 <DMA_SetConfig+0x280>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d00e      	beq.n	8004932 <DMA_SetConfig+0x10a>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a64      	ldr	r2, [pc, #400]	; (8004aac <DMA_SetConfig+0x284>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d009      	beq.n	8004932 <DMA_SetConfig+0x10a>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a63      	ldr	r2, [pc, #396]	; (8004ab0 <DMA_SetConfig+0x288>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d004      	beq.n	8004932 <DMA_SetConfig+0x10a>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a61      	ldr	r2, [pc, #388]	; (8004ab4 <DMA_SetConfig+0x28c>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d101      	bne.n	8004936 <DMA_SetConfig+0x10e>
 8004932:	2301      	movs	r3, #1
 8004934:	e000      	b.n	8004938 <DMA_SetConfig+0x110>
 8004936:	2300      	movs	r3, #0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00d      	beq.n	8004958 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004944:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800494a:	2b00      	cmp	r3, #0
 800494c:	d004      	beq.n	8004958 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004956:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a3e      	ldr	r2, [pc, #248]	; (8004a58 <DMA_SetConfig+0x230>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d04a      	beq.n	80049f8 <DMA_SetConfig+0x1d0>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a3d      	ldr	r2, [pc, #244]	; (8004a5c <DMA_SetConfig+0x234>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d045      	beq.n	80049f8 <DMA_SetConfig+0x1d0>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a3b      	ldr	r2, [pc, #236]	; (8004a60 <DMA_SetConfig+0x238>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d040      	beq.n	80049f8 <DMA_SetConfig+0x1d0>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a3a      	ldr	r2, [pc, #232]	; (8004a64 <DMA_SetConfig+0x23c>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d03b      	beq.n	80049f8 <DMA_SetConfig+0x1d0>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a38      	ldr	r2, [pc, #224]	; (8004a68 <DMA_SetConfig+0x240>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d036      	beq.n	80049f8 <DMA_SetConfig+0x1d0>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a37      	ldr	r2, [pc, #220]	; (8004a6c <DMA_SetConfig+0x244>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d031      	beq.n	80049f8 <DMA_SetConfig+0x1d0>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a35      	ldr	r2, [pc, #212]	; (8004a70 <DMA_SetConfig+0x248>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d02c      	beq.n	80049f8 <DMA_SetConfig+0x1d0>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a34      	ldr	r2, [pc, #208]	; (8004a74 <DMA_SetConfig+0x24c>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d027      	beq.n	80049f8 <DMA_SetConfig+0x1d0>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a32      	ldr	r2, [pc, #200]	; (8004a78 <DMA_SetConfig+0x250>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d022      	beq.n	80049f8 <DMA_SetConfig+0x1d0>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a31      	ldr	r2, [pc, #196]	; (8004a7c <DMA_SetConfig+0x254>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d01d      	beq.n	80049f8 <DMA_SetConfig+0x1d0>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a2f      	ldr	r2, [pc, #188]	; (8004a80 <DMA_SetConfig+0x258>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d018      	beq.n	80049f8 <DMA_SetConfig+0x1d0>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a2e      	ldr	r2, [pc, #184]	; (8004a84 <DMA_SetConfig+0x25c>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d013      	beq.n	80049f8 <DMA_SetConfig+0x1d0>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a2c      	ldr	r2, [pc, #176]	; (8004a88 <DMA_SetConfig+0x260>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d00e      	beq.n	80049f8 <DMA_SetConfig+0x1d0>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a2b      	ldr	r2, [pc, #172]	; (8004a8c <DMA_SetConfig+0x264>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d009      	beq.n	80049f8 <DMA_SetConfig+0x1d0>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a29      	ldr	r2, [pc, #164]	; (8004a90 <DMA_SetConfig+0x268>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d004      	beq.n	80049f8 <DMA_SetConfig+0x1d0>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a28      	ldr	r2, [pc, #160]	; (8004a94 <DMA_SetConfig+0x26c>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d101      	bne.n	80049fc <DMA_SetConfig+0x1d4>
 80049f8:	2301      	movs	r3, #1
 80049fa:	e000      	b.n	80049fe <DMA_SetConfig+0x1d6>
 80049fc:	2300      	movs	r3, #0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d05a      	beq.n	8004ab8 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a06:	f003 031f 	and.w	r3, r3, #31
 8004a0a:	223f      	movs	r2, #63	; 0x3f
 8004a0c:	409a      	lsls	r2, r3
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a20:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	2b40      	cmp	r3, #64	; 0x40
 8004a30:	d108      	bne.n	8004a44 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004a42:	e0af      	b.n	8004ba4 <DMA_SetConfig+0x37c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	60da      	str	r2, [r3, #12]
}
 8004a54:	e0a6      	b.n	8004ba4 <DMA_SetConfig+0x37c>
 8004a56:	bf00      	nop
 8004a58:	40020010 	.word	0x40020010
 8004a5c:	40020028 	.word	0x40020028
 8004a60:	40020040 	.word	0x40020040
 8004a64:	40020058 	.word	0x40020058
 8004a68:	40020070 	.word	0x40020070
 8004a6c:	40020088 	.word	0x40020088
 8004a70:	400200a0 	.word	0x400200a0
 8004a74:	400200b8 	.word	0x400200b8
 8004a78:	40020410 	.word	0x40020410
 8004a7c:	40020428 	.word	0x40020428
 8004a80:	40020440 	.word	0x40020440
 8004a84:	40020458 	.word	0x40020458
 8004a88:	40020470 	.word	0x40020470
 8004a8c:	40020488 	.word	0x40020488
 8004a90:	400204a0 	.word	0x400204a0
 8004a94:	400204b8 	.word	0x400204b8
 8004a98:	58025408 	.word	0x58025408
 8004a9c:	5802541c 	.word	0x5802541c
 8004aa0:	58025430 	.word	0x58025430
 8004aa4:	58025444 	.word	0x58025444
 8004aa8:	58025458 	.word	0x58025458
 8004aac:	5802546c 	.word	0x5802546c
 8004ab0:	58025480 	.word	0x58025480
 8004ab4:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a3c      	ldr	r2, [pc, #240]	; (8004bb0 <DMA_SetConfig+0x388>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d04a      	beq.n	8004b58 <DMA_SetConfig+0x330>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a3b      	ldr	r2, [pc, #236]	; (8004bb4 <DMA_SetConfig+0x38c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d045      	beq.n	8004b58 <DMA_SetConfig+0x330>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a39      	ldr	r2, [pc, #228]	; (8004bb8 <DMA_SetConfig+0x390>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d040      	beq.n	8004b58 <DMA_SetConfig+0x330>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a38      	ldr	r2, [pc, #224]	; (8004bbc <DMA_SetConfig+0x394>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d03b      	beq.n	8004b58 <DMA_SetConfig+0x330>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a36      	ldr	r2, [pc, #216]	; (8004bc0 <DMA_SetConfig+0x398>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d036      	beq.n	8004b58 <DMA_SetConfig+0x330>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a35      	ldr	r2, [pc, #212]	; (8004bc4 <DMA_SetConfig+0x39c>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d031      	beq.n	8004b58 <DMA_SetConfig+0x330>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a33      	ldr	r2, [pc, #204]	; (8004bc8 <DMA_SetConfig+0x3a0>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d02c      	beq.n	8004b58 <DMA_SetConfig+0x330>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a32      	ldr	r2, [pc, #200]	; (8004bcc <DMA_SetConfig+0x3a4>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d027      	beq.n	8004b58 <DMA_SetConfig+0x330>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a30      	ldr	r2, [pc, #192]	; (8004bd0 <DMA_SetConfig+0x3a8>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d022      	beq.n	8004b58 <DMA_SetConfig+0x330>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a2f      	ldr	r2, [pc, #188]	; (8004bd4 <DMA_SetConfig+0x3ac>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d01d      	beq.n	8004b58 <DMA_SetConfig+0x330>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a2d      	ldr	r2, [pc, #180]	; (8004bd8 <DMA_SetConfig+0x3b0>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d018      	beq.n	8004b58 <DMA_SetConfig+0x330>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a2c      	ldr	r2, [pc, #176]	; (8004bdc <DMA_SetConfig+0x3b4>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d013      	beq.n	8004b58 <DMA_SetConfig+0x330>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a2a      	ldr	r2, [pc, #168]	; (8004be0 <DMA_SetConfig+0x3b8>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d00e      	beq.n	8004b58 <DMA_SetConfig+0x330>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a29      	ldr	r2, [pc, #164]	; (8004be4 <DMA_SetConfig+0x3bc>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d009      	beq.n	8004b58 <DMA_SetConfig+0x330>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a27      	ldr	r2, [pc, #156]	; (8004be8 <DMA_SetConfig+0x3c0>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d004      	beq.n	8004b58 <DMA_SetConfig+0x330>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a26      	ldr	r2, [pc, #152]	; (8004bec <DMA_SetConfig+0x3c4>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d101      	bne.n	8004b5c <DMA_SetConfig+0x334>
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e000      	b.n	8004b5e <DMA_SetConfig+0x336>
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d020      	beq.n	8004ba4 <DMA_SetConfig+0x37c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b66:	f003 031f 	and.w	r3, r3, #31
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	409a      	lsls	r2, r3
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	2b40      	cmp	r3, #64	; 0x40
 8004b80:	d108      	bne.n	8004b94 <DMA_SetConfig+0x36c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	60da      	str	r2, [r3, #12]
}
 8004b92:	e007      	b.n	8004ba4 <DMA_SetConfig+0x37c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68ba      	ldr	r2, [r7, #8]
 8004b9a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	60da      	str	r2, [r3, #12]
}
 8004ba4:	bf00      	nop
 8004ba6:	371c      	adds	r7, #28
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	48022c08 	.word	0x48022c08
 8004bb4:	48022c1c 	.word	0x48022c1c
 8004bb8:	48022c30 	.word	0x48022c30
 8004bbc:	48022c44 	.word	0x48022c44
 8004bc0:	48022c58 	.word	0x48022c58
 8004bc4:	48022c6c 	.word	0x48022c6c
 8004bc8:	48022c80 	.word	0x48022c80
 8004bcc:	48022c94 	.word	0x48022c94
 8004bd0:	58025408 	.word	0x58025408
 8004bd4:	5802541c 	.word	0x5802541c
 8004bd8:	58025430 	.word	0x58025430
 8004bdc:	58025444 	.word	0x58025444
 8004be0:	58025458 	.word	0x58025458
 8004be4:	5802546c 	.word	0x5802546c
 8004be8:	58025480 	.word	0x58025480
 8004bec:	58025494 	.word	0x58025494

08004bf0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a42      	ldr	r2, [pc, #264]	; (8004d08 <DMA_CalcBaseAndBitshift+0x118>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d04a      	beq.n	8004c98 <DMA_CalcBaseAndBitshift+0xa8>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a41      	ldr	r2, [pc, #260]	; (8004d0c <DMA_CalcBaseAndBitshift+0x11c>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d045      	beq.n	8004c98 <DMA_CalcBaseAndBitshift+0xa8>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a3f      	ldr	r2, [pc, #252]	; (8004d10 <DMA_CalcBaseAndBitshift+0x120>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d040      	beq.n	8004c98 <DMA_CalcBaseAndBitshift+0xa8>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a3e      	ldr	r2, [pc, #248]	; (8004d14 <DMA_CalcBaseAndBitshift+0x124>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d03b      	beq.n	8004c98 <DMA_CalcBaseAndBitshift+0xa8>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a3c      	ldr	r2, [pc, #240]	; (8004d18 <DMA_CalcBaseAndBitshift+0x128>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d036      	beq.n	8004c98 <DMA_CalcBaseAndBitshift+0xa8>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a3b      	ldr	r2, [pc, #236]	; (8004d1c <DMA_CalcBaseAndBitshift+0x12c>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d031      	beq.n	8004c98 <DMA_CalcBaseAndBitshift+0xa8>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a39      	ldr	r2, [pc, #228]	; (8004d20 <DMA_CalcBaseAndBitshift+0x130>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d02c      	beq.n	8004c98 <DMA_CalcBaseAndBitshift+0xa8>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a38      	ldr	r2, [pc, #224]	; (8004d24 <DMA_CalcBaseAndBitshift+0x134>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d027      	beq.n	8004c98 <DMA_CalcBaseAndBitshift+0xa8>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a36      	ldr	r2, [pc, #216]	; (8004d28 <DMA_CalcBaseAndBitshift+0x138>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d022      	beq.n	8004c98 <DMA_CalcBaseAndBitshift+0xa8>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a35      	ldr	r2, [pc, #212]	; (8004d2c <DMA_CalcBaseAndBitshift+0x13c>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d01d      	beq.n	8004c98 <DMA_CalcBaseAndBitshift+0xa8>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a33      	ldr	r2, [pc, #204]	; (8004d30 <DMA_CalcBaseAndBitshift+0x140>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d018      	beq.n	8004c98 <DMA_CalcBaseAndBitshift+0xa8>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a32      	ldr	r2, [pc, #200]	; (8004d34 <DMA_CalcBaseAndBitshift+0x144>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d013      	beq.n	8004c98 <DMA_CalcBaseAndBitshift+0xa8>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a30      	ldr	r2, [pc, #192]	; (8004d38 <DMA_CalcBaseAndBitshift+0x148>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d00e      	beq.n	8004c98 <DMA_CalcBaseAndBitshift+0xa8>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a2f      	ldr	r2, [pc, #188]	; (8004d3c <DMA_CalcBaseAndBitshift+0x14c>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d009      	beq.n	8004c98 <DMA_CalcBaseAndBitshift+0xa8>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a2d      	ldr	r2, [pc, #180]	; (8004d40 <DMA_CalcBaseAndBitshift+0x150>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d004      	beq.n	8004c98 <DMA_CalcBaseAndBitshift+0xa8>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a2c      	ldr	r2, [pc, #176]	; (8004d44 <DMA_CalcBaseAndBitshift+0x154>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d101      	bne.n	8004c9c <DMA_CalcBaseAndBitshift+0xac>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e000      	b.n	8004c9e <DMA_CalcBaseAndBitshift+0xae>
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d024      	beq.n	8004cec <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	3b10      	subs	r3, #16
 8004caa:	4a27      	ldr	r2, [pc, #156]	; (8004d48 <DMA_CalcBaseAndBitshift+0x158>)
 8004cac:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb0:	091b      	lsrs	r3, r3, #4
 8004cb2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f003 0307 	and.w	r3, r3, #7
 8004cba:	4a24      	ldr	r2, [pc, #144]	; (8004d4c <DMA_CalcBaseAndBitshift+0x15c>)
 8004cbc:	5cd3      	ldrb	r3, [r2, r3]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	d908      	bls.n	8004cdc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	461a      	mov	r2, r3
 8004cd0:	4b1f      	ldr	r3, [pc, #124]	; (8004d50 <DMA_CalcBaseAndBitshift+0x160>)
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	1d1a      	adds	r2, r3, #4
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	659a      	str	r2, [r3, #88]	; 0x58
 8004cda:	e00d      	b.n	8004cf8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	4b1b      	ldr	r3, [pc, #108]	; (8004d50 <DMA_CalcBaseAndBitshift+0x160>)
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	6593      	str	r3, [r2, #88]	; 0x58
 8004cea:	e005      	b.n	8004cf8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	40020010 	.word	0x40020010
 8004d0c:	40020028 	.word	0x40020028
 8004d10:	40020040 	.word	0x40020040
 8004d14:	40020058 	.word	0x40020058
 8004d18:	40020070 	.word	0x40020070
 8004d1c:	40020088 	.word	0x40020088
 8004d20:	400200a0 	.word	0x400200a0
 8004d24:	400200b8 	.word	0x400200b8
 8004d28:	40020410 	.word	0x40020410
 8004d2c:	40020428 	.word	0x40020428
 8004d30:	40020440 	.word	0x40020440
 8004d34:	40020458 	.word	0x40020458
 8004d38:	40020470 	.word	0x40020470
 8004d3c:	40020488 	.word	0x40020488
 8004d40:	400204a0 	.word	0x400204a0
 8004d44:	400204b8 	.word	0x400204b8
 8004d48:	aaaaaaab 	.word	0xaaaaaaab
 8004d4c:	0800a358 	.word	0x0800a358
 8004d50:	fffffc00 	.word	0xfffffc00

08004d54 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d120      	bne.n	8004daa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6c:	2b03      	cmp	r3, #3
 8004d6e:	d858      	bhi.n	8004e22 <DMA_CheckFifoParam+0xce>
 8004d70:	a201      	add	r2, pc, #4	; (adr r2, 8004d78 <DMA_CheckFifoParam+0x24>)
 8004d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d76:	bf00      	nop
 8004d78:	08004d89 	.word	0x08004d89
 8004d7c:	08004d9b 	.word	0x08004d9b
 8004d80:	08004d89 	.word	0x08004d89
 8004d84:	08004e23 	.word	0x08004e23
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d048      	beq.n	8004e26 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d98:	e045      	b.n	8004e26 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004da2:	d142      	bne.n	8004e2a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004da8:	e03f      	b.n	8004e2a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004db2:	d123      	bne.n	8004dfc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db8:	2b03      	cmp	r3, #3
 8004dba:	d838      	bhi.n	8004e2e <DMA_CheckFifoParam+0xda>
 8004dbc:	a201      	add	r2, pc, #4	; (adr r2, 8004dc4 <DMA_CheckFifoParam+0x70>)
 8004dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc2:	bf00      	nop
 8004dc4:	08004dd5 	.word	0x08004dd5
 8004dc8:	08004ddb 	.word	0x08004ddb
 8004dcc:	08004dd5 	.word	0x08004dd5
 8004dd0:	08004ded 	.word	0x08004ded
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	73fb      	strb	r3, [r7, #15]
        break;
 8004dd8:	e030      	b.n	8004e3c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d025      	beq.n	8004e32 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004dea:	e022      	b.n	8004e32 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004df4:	d11f      	bne.n	8004e36 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004dfa:	e01c      	b.n	8004e36 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d902      	bls.n	8004e0a <DMA_CheckFifoParam+0xb6>
 8004e04:	2b03      	cmp	r3, #3
 8004e06:	d003      	beq.n	8004e10 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004e08:	e018      	b.n	8004e3c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	73fb      	strb	r3, [r7, #15]
        break;
 8004e0e:	e015      	b.n	8004e3c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00e      	beq.n	8004e3a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	73fb      	strb	r3, [r7, #15]
    break;
 8004e20:	e00b      	b.n	8004e3a <DMA_CheckFifoParam+0xe6>
        break;
 8004e22:	bf00      	nop
 8004e24:	e00a      	b.n	8004e3c <DMA_CheckFifoParam+0xe8>
        break;
 8004e26:	bf00      	nop
 8004e28:	e008      	b.n	8004e3c <DMA_CheckFifoParam+0xe8>
        break;
 8004e2a:	bf00      	nop
 8004e2c:	e006      	b.n	8004e3c <DMA_CheckFifoParam+0xe8>
        break;
 8004e2e:	bf00      	nop
 8004e30:	e004      	b.n	8004e3c <DMA_CheckFifoParam+0xe8>
        break;
 8004e32:	bf00      	nop
 8004e34:	e002      	b.n	8004e3c <DMA_CheckFifoParam+0xe8>
        break;
 8004e36:	bf00      	nop
 8004e38:	e000      	b.n	8004e3c <DMA_CheckFifoParam+0xe8>
    break;
 8004e3a:	bf00      	nop
    }
  }

  return status;
 8004e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop

08004e4c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a38      	ldr	r2, [pc, #224]	; (8004f40 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d022      	beq.n	8004eaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a36      	ldr	r2, [pc, #216]	; (8004f44 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d01d      	beq.n	8004eaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a35      	ldr	r2, [pc, #212]	; (8004f48 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d018      	beq.n	8004eaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a33      	ldr	r2, [pc, #204]	; (8004f4c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d013      	beq.n	8004eaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a32      	ldr	r2, [pc, #200]	; (8004f50 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d00e      	beq.n	8004eaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a30      	ldr	r2, [pc, #192]	; (8004f54 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d009      	beq.n	8004eaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a2f      	ldr	r2, [pc, #188]	; (8004f58 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d004      	beq.n	8004eaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a2d      	ldr	r2, [pc, #180]	; (8004f5c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d101      	bne.n	8004eae <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e000      	b.n	8004eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004eae:	2300      	movs	r3, #0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d01a      	beq.n	8004eea <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	3b08      	subs	r3, #8
 8004ebc:	4a28      	ldr	r2, [pc, #160]	; (8004f60 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec2:	091b      	lsrs	r3, r3, #4
 8004ec4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	4b26      	ldr	r3, [pc, #152]	; (8004f64 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004eca:	4413      	add	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	461a      	mov	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a24      	ldr	r2, [pc, #144]	; (8004f68 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004ed8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f003 031f 	and.w	r3, r3, #31
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	409a      	lsls	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004ee8:	e024      	b.n	8004f34 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	3b10      	subs	r3, #16
 8004ef2:	4a1e      	ldr	r2, [pc, #120]	; (8004f6c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef8:	091b      	lsrs	r3, r3, #4
 8004efa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	4a1c      	ldr	r2, [pc, #112]	; (8004f70 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d806      	bhi.n	8004f12 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	4a1b      	ldr	r2, [pc, #108]	; (8004f74 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d902      	bls.n	8004f12 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	3308      	adds	r3, #8
 8004f10:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	4b18      	ldr	r3, [pc, #96]	; (8004f78 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004f16:	4413      	add	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a16      	ldr	r2, [pc, #88]	; (8004f7c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004f24:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f003 031f 	and.w	r3, r3, #31
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	409a      	lsls	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004f34:	bf00      	nop
 8004f36:	3714      	adds	r7, #20
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	58025408 	.word	0x58025408
 8004f44:	5802541c 	.word	0x5802541c
 8004f48:	58025430 	.word	0x58025430
 8004f4c:	58025444 	.word	0x58025444
 8004f50:	58025458 	.word	0x58025458
 8004f54:	5802546c 	.word	0x5802546c
 8004f58:	58025480 	.word	0x58025480
 8004f5c:	58025494 	.word	0x58025494
 8004f60:	cccccccd 	.word	0xcccccccd
 8004f64:	16009600 	.word	0x16009600
 8004f68:	58025880 	.word	0x58025880
 8004f6c:	aaaaaaab 	.word	0xaaaaaaab
 8004f70:	400204b8 	.word	0x400204b8
 8004f74:	4002040f 	.word	0x4002040f
 8004f78:	10008200 	.word	0x10008200
 8004f7c:	40020880 	.word	0x40020880

08004f80 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d04a      	beq.n	800502c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2b08      	cmp	r3, #8
 8004f9a:	d847      	bhi.n	800502c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a25      	ldr	r2, [pc, #148]	; (8005038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d022      	beq.n	8004fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a24      	ldr	r2, [pc, #144]	; (800503c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d01d      	beq.n	8004fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a22      	ldr	r2, [pc, #136]	; (8005040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d018      	beq.n	8004fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a21      	ldr	r2, [pc, #132]	; (8005044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d013      	beq.n	8004fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a1f      	ldr	r2, [pc, #124]	; (8005048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d00e      	beq.n	8004fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a1e      	ldr	r2, [pc, #120]	; (800504c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d009      	beq.n	8004fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a1c      	ldr	r2, [pc, #112]	; (8005050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d004      	beq.n	8004fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a1b      	ldr	r2, [pc, #108]	; (8005054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d101      	bne.n	8004ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004fec:	2301      	movs	r3, #1
 8004fee:	e000      	b.n	8004ff2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	4b17      	ldr	r3, [pc, #92]	; (8005058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004ffa:	4413      	add	r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	461a      	mov	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a15      	ldr	r2, [pc, #84]	; (800505c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005008:	671a      	str	r2, [r3, #112]	; 0x70
 800500a:	e009      	b.n	8005020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	4b14      	ldr	r3, [pc, #80]	; (8005060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005010:	4413      	add	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	461a      	mov	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a11      	ldr	r2, [pc, #68]	; (8005064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800501e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	3b01      	subs	r3, #1
 8005024:	2201      	movs	r2, #1
 8005026:	409a      	lsls	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800502c:	bf00      	nop
 800502e:	3714      	adds	r7, #20
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	58025408 	.word	0x58025408
 800503c:	5802541c 	.word	0x5802541c
 8005040:	58025430 	.word	0x58025430
 8005044:	58025444 	.word	0x58025444
 8005048:	58025458 	.word	0x58025458
 800504c:	5802546c 	.word	0x5802546c
 8005050:	58025480 	.word	0x58025480
 8005054:	58025494 	.word	0x58025494
 8005058:	1600963f 	.word	0x1600963f
 800505c:	58025940 	.word	0x58025940
 8005060:	1000823f 	.word	0x1000823f
 8005064:	40020940 	.word	0x40020940

08005068 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005068:	b480      	push	{r7}
 800506a:	b089      	sub	sp, #36	; 0x24
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005072:	2300      	movs	r3, #0
 8005074:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005076:	4b89      	ldr	r3, [pc, #548]	; (800529c <HAL_GPIO_Init+0x234>)
 8005078:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800507a:	e194      	b.n	80053a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	2101      	movs	r1, #1
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	fa01 f303 	lsl.w	r3, r1, r3
 8005088:	4013      	ands	r3, r2
 800508a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	2b00      	cmp	r3, #0
 8005090:	f000 8186 	beq.w	80053a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d00b      	beq.n	80050b4 <HAL_GPIO_Init+0x4c>
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d007      	beq.n	80050b4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80050a8:	2b11      	cmp	r3, #17
 80050aa:	d003      	beq.n	80050b4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	2b12      	cmp	r3, #18
 80050b2:	d130      	bne.n	8005116 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	005b      	lsls	r3, r3, #1
 80050be:	2203      	movs	r2, #3
 80050c0:	fa02 f303 	lsl.w	r3, r2, r3
 80050c4:	43db      	mvns	r3, r3
 80050c6:	69ba      	ldr	r2, [r7, #24]
 80050c8:	4013      	ands	r3, r2
 80050ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	68da      	ldr	r2, [r3, #12]
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	fa02 f303 	lsl.w	r3, r2, r3
 80050d8:	69ba      	ldr	r2, [r7, #24]
 80050da:	4313      	orrs	r3, r2
 80050dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	69ba      	ldr	r2, [r7, #24]
 80050e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80050ea:	2201      	movs	r2, #1
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	fa02 f303 	lsl.w	r3, r2, r3
 80050f2:	43db      	mvns	r3, r3
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	4013      	ands	r3, r2
 80050f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	091b      	lsrs	r3, r3, #4
 8005100:	f003 0201 	and.w	r2, r3, #1
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	fa02 f303 	lsl.w	r3, r2, r3
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	4313      	orrs	r3, r2
 800510e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	2203      	movs	r2, #3
 8005122:	fa02 f303 	lsl.w	r3, r2, r3
 8005126:	43db      	mvns	r3, r3
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	4013      	ands	r3, r2
 800512c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	689a      	ldr	r2, [r3, #8]
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	fa02 f303 	lsl.w	r3, r2, r3
 800513a:	69ba      	ldr	r2, [r7, #24]
 800513c:	4313      	orrs	r3, r2
 800513e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	2b02      	cmp	r3, #2
 800514c:	d003      	beq.n	8005156 <HAL_GPIO_Init+0xee>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	2b12      	cmp	r3, #18
 8005154:	d123      	bne.n	800519e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	08da      	lsrs	r2, r3, #3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	3208      	adds	r2, #8
 800515e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005162:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	220f      	movs	r2, #15
 800516e:	fa02 f303 	lsl.w	r3, r2, r3
 8005172:	43db      	mvns	r3, r3
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	4013      	ands	r3, r2
 8005178:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	691a      	ldr	r2, [r3, #16]
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	f003 0307 	and.w	r3, r3, #7
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	fa02 f303 	lsl.w	r3, r2, r3
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	4313      	orrs	r3, r2
 800518e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	08da      	lsrs	r2, r3, #3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3208      	adds	r2, #8
 8005198:	69b9      	ldr	r1, [r7, #24]
 800519a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	2203      	movs	r2, #3
 80051aa:	fa02 f303 	lsl.w	r3, r2, r3
 80051ae:	43db      	mvns	r3, r3
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	4013      	ands	r3, r2
 80051b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f003 0203 	and.w	r2, r3, #3
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	005b      	lsls	r3, r3, #1
 80051c2:	fa02 f303 	lsl.w	r3, r2, r3
 80051c6:	69ba      	ldr	r2, [r7, #24]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f000 80e0 	beq.w	80053a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051e0:	4b2f      	ldr	r3, [pc, #188]	; (80052a0 <HAL_GPIO_Init+0x238>)
 80051e2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80051e6:	4a2e      	ldr	r2, [pc, #184]	; (80052a0 <HAL_GPIO_Init+0x238>)
 80051e8:	f043 0302 	orr.w	r3, r3, #2
 80051ec:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80051f0:	4b2b      	ldr	r3, [pc, #172]	; (80052a0 <HAL_GPIO_Init+0x238>)
 80051f2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	60fb      	str	r3, [r7, #12]
 80051fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80051fe:	4a29      	ldr	r2, [pc, #164]	; (80052a4 <HAL_GPIO_Init+0x23c>)
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	089b      	lsrs	r3, r3, #2
 8005204:	3302      	adds	r3, #2
 8005206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800520a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	f003 0303 	and.w	r3, r3, #3
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	220f      	movs	r2, #15
 8005216:	fa02 f303 	lsl.w	r3, r2, r3
 800521a:	43db      	mvns	r3, r3
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	4013      	ands	r3, r2
 8005220:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a20      	ldr	r2, [pc, #128]	; (80052a8 <HAL_GPIO_Init+0x240>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d052      	beq.n	80052d0 <HAL_GPIO_Init+0x268>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a1f      	ldr	r2, [pc, #124]	; (80052ac <HAL_GPIO_Init+0x244>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d031      	beq.n	8005296 <HAL_GPIO_Init+0x22e>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a1e      	ldr	r2, [pc, #120]	; (80052b0 <HAL_GPIO_Init+0x248>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d02b      	beq.n	8005292 <HAL_GPIO_Init+0x22a>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a1d      	ldr	r2, [pc, #116]	; (80052b4 <HAL_GPIO_Init+0x24c>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d025      	beq.n	800528e <HAL_GPIO_Init+0x226>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a1c      	ldr	r2, [pc, #112]	; (80052b8 <HAL_GPIO_Init+0x250>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d01f      	beq.n	800528a <HAL_GPIO_Init+0x222>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a1b      	ldr	r2, [pc, #108]	; (80052bc <HAL_GPIO_Init+0x254>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d019      	beq.n	8005286 <HAL_GPIO_Init+0x21e>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a1a      	ldr	r2, [pc, #104]	; (80052c0 <HAL_GPIO_Init+0x258>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d013      	beq.n	8005282 <HAL_GPIO_Init+0x21a>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a19      	ldr	r2, [pc, #100]	; (80052c4 <HAL_GPIO_Init+0x25c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d00d      	beq.n	800527e <HAL_GPIO_Init+0x216>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a18      	ldr	r2, [pc, #96]	; (80052c8 <HAL_GPIO_Init+0x260>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d007      	beq.n	800527a <HAL_GPIO_Init+0x212>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a17      	ldr	r2, [pc, #92]	; (80052cc <HAL_GPIO_Init+0x264>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d101      	bne.n	8005276 <HAL_GPIO_Init+0x20e>
 8005272:	2309      	movs	r3, #9
 8005274:	e02d      	b.n	80052d2 <HAL_GPIO_Init+0x26a>
 8005276:	230a      	movs	r3, #10
 8005278:	e02b      	b.n	80052d2 <HAL_GPIO_Init+0x26a>
 800527a:	2308      	movs	r3, #8
 800527c:	e029      	b.n	80052d2 <HAL_GPIO_Init+0x26a>
 800527e:	2307      	movs	r3, #7
 8005280:	e027      	b.n	80052d2 <HAL_GPIO_Init+0x26a>
 8005282:	2306      	movs	r3, #6
 8005284:	e025      	b.n	80052d2 <HAL_GPIO_Init+0x26a>
 8005286:	2305      	movs	r3, #5
 8005288:	e023      	b.n	80052d2 <HAL_GPIO_Init+0x26a>
 800528a:	2304      	movs	r3, #4
 800528c:	e021      	b.n	80052d2 <HAL_GPIO_Init+0x26a>
 800528e:	2303      	movs	r3, #3
 8005290:	e01f      	b.n	80052d2 <HAL_GPIO_Init+0x26a>
 8005292:	2302      	movs	r3, #2
 8005294:	e01d      	b.n	80052d2 <HAL_GPIO_Init+0x26a>
 8005296:	2301      	movs	r3, #1
 8005298:	e01b      	b.n	80052d2 <HAL_GPIO_Init+0x26a>
 800529a:	bf00      	nop
 800529c:	58000080 	.word	0x58000080
 80052a0:	58024400 	.word	0x58024400
 80052a4:	58000400 	.word	0x58000400
 80052a8:	58020000 	.word	0x58020000
 80052ac:	58020400 	.word	0x58020400
 80052b0:	58020800 	.word	0x58020800
 80052b4:	58020c00 	.word	0x58020c00
 80052b8:	58021000 	.word	0x58021000
 80052bc:	58021400 	.word	0x58021400
 80052c0:	58021800 	.word	0x58021800
 80052c4:	58021c00 	.word	0x58021c00
 80052c8:	58022000 	.word	0x58022000
 80052cc:	58022400 	.word	0x58022400
 80052d0:	2300      	movs	r3, #0
 80052d2:	69fa      	ldr	r2, [r7, #28]
 80052d4:	f002 0203 	and.w	r2, r2, #3
 80052d8:	0092      	lsls	r2, r2, #2
 80052da:	4093      	lsls	r3, r2
 80052dc:	69ba      	ldr	r2, [r7, #24]
 80052de:	4313      	orrs	r3, r2
 80052e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052e2:	4938      	ldr	r1, [pc, #224]	; (80053c4 <HAL_GPIO_Init+0x35c>)
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	089b      	lsrs	r3, r3, #2
 80052e8:	3302      	adds	r3, #2
 80052ea:	69ba      	ldr	r2, [r7, #24]
 80052ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	43db      	mvns	r3, r3
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	4013      	ands	r3, r2
 80052fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	4313      	orrs	r3, r2
 8005312:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	69ba      	ldr	r2, [r7, #24]
 8005318:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	43db      	mvns	r3, r3
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	4013      	ands	r3, r2
 8005328:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	4313      	orrs	r3, r2
 800533c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	43db      	mvns	r3, r3
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	4013      	ands	r3, r2
 8005354:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d003      	beq.n	800536a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005362:	69ba      	ldr	r2, [r7, #24]
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	4313      	orrs	r3, r2
 8005368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800536a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	43db      	mvns	r3, r3
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	4013      	ands	r3, r2
 8005382:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d003      	beq.n	8005398 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	4313      	orrs	r3, r2
 8005396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005398:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	3301      	adds	r3, #1
 80053a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	fa22 f303 	lsr.w	r3, r2, r3
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f47f ae63 	bne.w	800507c <HAL_GPIO_Init+0x14>
  }
}
 80053b6:	bf00      	nop
 80053b8:	3724      	adds	r7, #36	; 0x24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	58000400 	.word	0x58000400

080053c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	460b      	mov	r3, r1
 80053d2:	807b      	strh	r3, [r7, #2]
 80053d4:	4613      	mov	r3, r2
 80053d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053d8:	787b      	ldrb	r3, [r7, #1]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053de:	887a      	ldrh	r2, [r7, #2]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80053e4:	e003      	b.n	80053ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80053e6:	887b      	ldrh	r3, [r7, #2]
 80053e8:	041a      	lsls	r2, r3, #16
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	619a      	str	r2, [r3, #24]
}
 80053ee:	bf00      	nop
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
	...

080053fc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005404:	4b29      	ldr	r3, [pc, #164]	; (80054ac <HAL_PWREx_ConfigSupply+0xb0>)
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	f003 0307 	and.w	r3, r3, #7
 800540c:	2b06      	cmp	r3, #6
 800540e:	d00a      	beq.n	8005426 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005410:	4b26      	ldr	r3, [pc, #152]	; (80054ac <HAL_PWREx_ConfigSupply+0xb0>)
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	429a      	cmp	r2, r3
 800541c:	d001      	beq.n	8005422 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e040      	b.n	80054a4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005422:	2300      	movs	r3, #0
 8005424:	e03e      	b.n	80054a4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005426:	4b21      	ldr	r3, [pc, #132]	; (80054ac <HAL_PWREx_ConfigSupply+0xb0>)
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800542e:	491f      	ldr	r1, [pc, #124]	; (80054ac <HAL_PWREx_ConfigSupply+0xb0>)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4313      	orrs	r3, r2
 8005434:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005436:	f7fc f921 	bl	800167c <HAL_GetTick>
 800543a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800543c:	e009      	b.n	8005452 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800543e:	f7fc f91d 	bl	800167c <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800544c:	d901      	bls.n	8005452 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e028      	b.n	80054a4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005452:	4b16      	ldr	r3, [pc, #88]	; (80054ac <HAL_PWREx_ConfigSupply+0xb0>)
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800545a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800545e:	d1ee      	bne.n	800543e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b1e      	cmp	r3, #30
 8005464:	d008      	beq.n	8005478 <HAL_PWREx_ConfigSupply+0x7c>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b2e      	cmp	r3, #46	; 0x2e
 800546a:	d005      	beq.n	8005478 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b1d      	cmp	r3, #29
 8005470:	d002      	beq.n	8005478 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b2d      	cmp	r3, #45	; 0x2d
 8005476:	d114      	bne.n	80054a2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005478:	f7fc f900 	bl	800167c <HAL_GetTick>
 800547c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800547e:	e009      	b.n	8005494 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005480:	f7fc f8fc 	bl	800167c <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800548e:	d901      	bls.n	8005494 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e007      	b.n	80054a4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005494:	4b05      	ldr	r3, [pc, #20]	; (80054ac <HAL_PWREx_ConfigSupply+0xb0>)
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800549c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054a0:	d1ee      	bne.n	8005480 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	58024800 	.word	0x58024800

080054b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b08c      	sub	sp, #48	; 0x30
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e3d7      	b.n	8005c72 <HAL_RCC_OscConfig+0x7c2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f000 80b3 	beq.w	8005636 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054d0:	4b90      	ldr	r3, [pc, #576]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80054da:	4b8e      	ldr	r3, [pc, #568]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 80054dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054de:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80054e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e2:	2b10      	cmp	r3, #16
 80054e4:	d007      	beq.n	80054f6 <HAL_RCC_OscConfig+0x46>
 80054e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e8:	2b18      	cmp	r3, #24
 80054ea:	d112      	bne.n	8005512 <HAL_RCC_OscConfig+0x62>
 80054ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ee:	f003 0303 	and.w	r3, r3, #3
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d10d      	bne.n	8005512 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054f6:	4b87      	ldr	r3, [pc, #540]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f000 8098 	beq.w	8005634 <HAL_RCC_OscConfig+0x184>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	f040 8093 	bne.w	8005634 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e3af      	b.n	8005c72 <HAL_RCC_OscConfig+0x7c2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800551a:	d106      	bne.n	800552a <HAL_RCC_OscConfig+0x7a>
 800551c:	4b7d      	ldr	r3, [pc, #500]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a7c      	ldr	r2, [pc, #496]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 8005522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005526:	6013      	str	r3, [r2, #0]
 8005528:	e058      	b.n	80055dc <HAL_RCC_OscConfig+0x12c>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d112      	bne.n	8005558 <HAL_RCC_OscConfig+0xa8>
 8005532:	4b78      	ldr	r3, [pc, #480]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a77      	ldr	r2, [pc, #476]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 8005538:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800553c:	6013      	str	r3, [r2, #0]
 800553e:	4b75      	ldr	r3, [pc, #468]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a74      	ldr	r2, [pc, #464]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 8005544:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005548:	6013      	str	r3, [r2, #0]
 800554a:	4b72      	ldr	r3, [pc, #456]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a71      	ldr	r2, [pc, #452]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 8005550:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005554:	6013      	str	r3, [r2, #0]
 8005556:	e041      	b.n	80055dc <HAL_RCC_OscConfig+0x12c>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005560:	d112      	bne.n	8005588 <HAL_RCC_OscConfig+0xd8>
 8005562:	4b6c      	ldr	r3, [pc, #432]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a6b      	ldr	r2, [pc, #428]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 8005568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800556c:	6013      	str	r3, [r2, #0]
 800556e:	4b69      	ldr	r3, [pc, #420]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a68      	ldr	r2, [pc, #416]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 8005574:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005578:	6013      	str	r3, [r2, #0]
 800557a:	4b66      	ldr	r3, [pc, #408]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a65      	ldr	r2, [pc, #404]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 8005580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005584:	6013      	str	r3, [r2, #0]
 8005586:	e029      	b.n	80055dc <HAL_RCC_OscConfig+0x12c>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8005590:	d112      	bne.n	80055b8 <HAL_RCC_OscConfig+0x108>
 8005592:	4b60      	ldr	r3, [pc, #384]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a5f      	ldr	r2, [pc, #380]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 8005598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800559c:	6013      	str	r3, [r2, #0]
 800559e:	4b5d      	ldr	r3, [pc, #372]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a5c      	ldr	r2, [pc, #368]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 80055a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055a8:	6013      	str	r3, [r2, #0]
 80055aa:	4b5a      	ldr	r3, [pc, #360]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a59      	ldr	r2, [pc, #356]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 80055b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055b4:	6013      	str	r3, [r2, #0]
 80055b6:	e011      	b.n	80055dc <HAL_RCC_OscConfig+0x12c>
 80055b8:	4b56      	ldr	r3, [pc, #344]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a55      	ldr	r2, [pc, #340]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 80055be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055c2:	6013      	str	r3, [r2, #0]
 80055c4:	4b53      	ldr	r3, [pc, #332]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a52      	ldr	r2, [pc, #328]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 80055ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055ce:	6013      	str	r3, [r2, #0]
 80055d0:	4b50      	ldr	r3, [pc, #320]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a4f      	ldr	r2, [pc, #316]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 80055d6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80055da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d013      	beq.n	800560c <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e4:	f7fc f84a 	bl	800167c <HAL_GetTick>
 80055e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80055ea:	e008      	b.n	80055fe <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055ec:	f7fc f846 	bl	800167c <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b64      	cmp	r3, #100	; 0x64
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e339      	b.n	8005c72 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80055fe:	4b45      	ldr	r3, [pc, #276]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d0f0      	beq.n	80055ec <HAL_RCC_OscConfig+0x13c>
 800560a:	e014      	b.n	8005636 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800560c:	f7fc f836 	bl	800167c <HAL_GetTick>
 8005610:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005612:	e008      	b.n	8005626 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005614:	f7fc f832 	bl	800167c <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	2b64      	cmp	r3, #100	; 0x64
 8005620:	d901      	bls.n	8005626 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e325      	b.n	8005c72 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005626:	4b3b      	ldr	r3, [pc, #236]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1f0      	bne.n	8005614 <HAL_RCC_OscConfig+0x164>
 8005632:	e000      	b.n	8005636 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d070      	beq.n	8005724 <HAL_RCC_OscConfig+0x274>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005642:	4b34      	ldr	r3, [pc, #208]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800564a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800564c:	4b31      	ldr	r3, [pc, #196]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 800564e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005650:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005652:	6a3b      	ldr	r3, [r7, #32]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d007      	beq.n	8005668 <HAL_RCC_OscConfig+0x1b8>
 8005658:	6a3b      	ldr	r3, [r7, #32]
 800565a:	2b18      	cmp	r3, #24
 800565c:	d11b      	bne.n	8005696 <HAL_RCC_OscConfig+0x1e6>
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	f003 0303 	and.w	r3, r3, #3
 8005664:	2b00      	cmp	r3, #0
 8005666:	d116      	bne.n	8005696 <HAL_RCC_OscConfig+0x1e6>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005668:	4b2a      	ldr	r3, [pc, #168]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0304 	and.w	r3, r3, #4
 8005670:	2b00      	cmp	r3, #0
 8005672:	d005      	beq.n	8005680 <HAL_RCC_OscConfig+0x1d0>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <HAL_RCC_OscConfig+0x1d0>
      {
        return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e2f8      	b.n	8005c72 <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005680:	4b24      	ldr	r3, [pc, #144]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	061b      	lsls	r3, r3, #24
 800568e:	4921      	ldr	r1, [pc, #132]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 8005690:	4313      	orrs	r3, r2
 8005692:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005694:	e046      	b.n	8005724 <HAL_RCC_OscConfig+0x274>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d026      	beq.n	80056ec <HAL_RCC_OscConfig+0x23c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800569e:	4b1d      	ldr	r3, [pc, #116]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f023 0219 	bic.w	r2, r3, #25
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	491a      	ldr	r1, [pc, #104]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b0:	f7fb ffe4 	bl	800167c <HAL_GetTick>
 80056b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056b6:	e008      	b.n	80056ca <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056b8:	f7fb ffe0 	bl	800167c <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e2d3      	b.n	8005c72 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056ca:	4b12      	ldr	r3, [pc, #72]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0304 	and.w	r3, r3, #4
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d0f0      	beq.n	80056b8 <HAL_RCC_OscConfig+0x208>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056d6:	4b0f      	ldr	r3, [pc, #60]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	061b      	lsls	r3, r3, #24
 80056e4:	490b      	ldr	r1, [pc, #44]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	604b      	str	r3, [r1, #4]
 80056ea:	e01b      	b.n	8005724 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056ec:	4b09      	ldr	r3, [pc, #36]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a08      	ldr	r2, [pc, #32]	; (8005714 <HAL_RCC_OscConfig+0x264>)
 80056f2:	f023 0301 	bic.w	r3, r3, #1
 80056f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f8:	f7fb ffc0 	bl	800167c <HAL_GetTick>
 80056fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80056fe:	e00b      	b.n	8005718 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005700:	f7fb ffbc 	bl	800167c <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d904      	bls.n	8005718 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e2af      	b.n	8005c72 <HAL_RCC_OscConfig+0x7c2>
 8005712:	bf00      	nop
 8005714:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005718:	4b99      	ldr	r3, [pc, #612]	; (8005980 <HAL_RCC_OscConfig+0x4d0>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0304 	and.w	r3, r3, #4
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1ed      	bne.n	8005700 <HAL_RCC_OscConfig+0x250>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0310 	and.w	r3, r3, #16
 800572c:	2b00      	cmp	r3, #0
 800572e:	d06a      	beq.n	8005806 <HAL_RCC_OscConfig+0x356>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005730:	4b93      	ldr	r3, [pc, #588]	; (8005980 <HAL_RCC_OscConfig+0x4d0>)
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005738:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800573a:	4b91      	ldr	r3, [pc, #580]	; (8005980 <HAL_RCC_OscConfig+0x4d0>)
 800573c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	2b08      	cmp	r3, #8
 8005744:	d007      	beq.n	8005756 <HAL_RCC_OscConfig+0x2a6>
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	2b18      	cmp	r3, #24
 800574a:	d11b      	bne.n	8005784 <HAL_RCC_OscConfig+0x2d4>
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f003 0303 	and.w	r3, r3, #3
 8005752:	2b01      	cmp	r3, #1
 8005754:	d116      	bne.n	8005784 <HAL_RCC_OscConfig+0x2d4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005756:	4b8a      	ldr	r3, [pc, #552]	; (8005980 <HAL_RCC_OscConfig+0x4d0>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800575e:	2b00      	cmp	r3, #0
 8005760:	d005      	beq.n	800576e <HAL_RCC_OscConfig+0x2be>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	69db      	ldr	r3, [r3, #28]
 8005766:	2b80      	cmp	r3, #128	; 0x80
 8005768:	d001      	beq.n	800576e <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e281      	b.n	8005c72 <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800576e:	4b84      	ldr	r3, [pc, #528]	; (8005980 <HAL_RCC_OscConfig+0x4d0>)
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	061b      	lsls	r3, r3, #24
 800577c:	4980      	ldr	r1, [pc, #512]	; (8005980 <HAL_RCC_OscConfig+0x4d0>)
 800577e:	4313      	orrs	r3, r2
 8005780:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005782:	e040      	b.n	8005806 <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	69db      	ldr	r3, [r3, #28]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d023      	beq.n	80057d4 <HAL_RCC_OscConfig+0x324>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800578c:	4b7c      	ldr	r3, [pc, #496]	; (8005980 <HAL_RCC_OscConfig+0x4d0>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a7b      	ldr	r2, [pc, #492]	; (8005980 <HAL_RCC_OscConfig+0x4d0>)
 8005792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005798:	f7fb ff70 	bl	800167c <HAL_GetTick>
 800579c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800579e:	e008      	b.n	80057b2 <HAL_RCC_OscConfig+0x302>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80057a0:	f7fb ff6c 	bl	800167c <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e25f      	b.n	8005c72 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80057b2:	4b73      	ldr	r3, [pc, #460]	; (8005980 <HAL_RCC_OscConfig+0x4d0>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d0f0      	beq.n	80057a0 <HAL_RCC_OscConfig+0x2f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80057be:	4b70      	ldr	r3, [pc, #448]	; (8005980 <HAL_RCC_OscConfig+0x4d0>)
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	061b      	lsls	r3, r3, #24
 80057cc:	496c      	ldr	r1, [pc, #432]	; (8005980 <HAL_RCC_OscConfig+0x4d0>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	60cb      	str	r3, [r1, #12]
 80057d2:	e018      	b.n	8005806 <HAL_RCC_OscConfig+0x356>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80057d4:	4b6a      	ldr	r3, [pc, #424]	; (8005980 <HAL_RCC_OscConfig+0x4d0>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a69      	ldr	r2, [pc, #420]	; (8005980 <HAL_RCC_OscConfig+0x4d0>)
 80057da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e0:	f7fb ff4c 	bl	800167c <HAL_GetTick>
 80057e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80057e6:	e008      	b.n	80057fa <HAL_RCC_OscConfig+0x34a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80057e8:	f7fb ff48 	bl	800167c <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_OscConfig+0x34a>
          {
            return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e23b      	b.n	8005c72 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80057fa:	4b61      	ldr	r3, [pc, #388]	; (8005980 <HAL_RCC_OscConfig+0x4d0>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1f0      	bne.n	80057e8 <HAL_RCC_OscConfig+0x338>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0308 	and.w	r3, r3, #8
 800580e:	2b00      	cmp	r3, #0
 8005810:	d036      	beq.n	8005880 <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d019      	beq.n	800584e <HAL_RCC_OscConfig+0x39e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800581a:	4b59      	ldr	r3, [pc, #356]	; (8005980 <HAL_RCC_OscConfig+0x4d0>)
 800581c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800581e:	4a58      	ldr	r2, [pc, #352]	; (8005980 <HAL_RCC_OscConfig+0x4d0>)
 8005820:	f043 0301 	orr.w	r3, r3, #1
 8005824:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005826:	f7fb ff29 	bl	800167c <HAL_GetTick>
 800582a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800582c:	e008      	b.n	8005840 <HAL_RCC_OscConfig+0x390>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800582e:	f7fb ff25 	bl	800167c <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	2b02      	cmp	r3, #2
 800583a:	d901      	bls.n	8005840 <HAL_RCC_OscConfig+0x390>
        {
          return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e218      	b.n	8005c72 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005840:	4b4f      	ldr	r3, [pc, #316]	; (8005980 <HAL_RCC_OscConfig+0x4d0>)
 8005842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005844:	f003 0302 	and.w	r3, r3, #2
 8005848:	2b00      	cmp	r3, #0
 800584a:	d0f0      	beq.n	800582e <HAL_RCC_OscConfig+0x37e>
 800584c:	e018      	b.n	8005880 <HAL_RCC_OscConfig+0x3d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800584e:	4b4c      	ldr	r3, [pc, #304]	; (8005980 <HAL_RCC_OscConfig+0x4d0>)
 8005850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005852:	4a4b      	ldr	r2, [pc, #300]	; (8005980 <HAL_RCC_OscConfig+0x4d0>)
 8005854:	f023 0301 	bic.w	r3, r3, #1
 8005858:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800585a:	f7fb ff0f 	bl	800167c <HAL_GetTick>
 800585e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005860:	e008      	b.n	8005874 <HAL_RCC_OscConfig+0x3c4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005862:	f7fb ff0b 	bl	800167c <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	2b02      	cmp	r3, #2
 800586e:	d901      	bls.n	8005874 <HAL_RCC_OscConfig+0x3c4>
        {
          return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e1fe      	b.n	8005c72 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005874:	4b42      	ldr	r3, [pc, #264]	; (8005980 <HAL_RCC_OscConfig+0x4d0>)
 8005876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1f0      	bne.n	8005862 <HAL_RCC_OscConfig+0x3b2>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0320 	and.w	r3, r3, #32
 8005888:	2b00      	cmp	r3, #0
 800588a:	d036      	beq.n	80058fa <HAL_RCC_OscConfig+0x44a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d019      	beq.n	80058c8 <HAL_RCC_OscConfig+0x418>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005894:	4b3a      	ldr	r3, [pc, #232]	; (8005980 <HAL_RCC_OscConfig+0x4d0>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a39      	ldr	r2, [pc, #228]	; (8005980 <HAL_RCC_OscConfig+0x4d0>)
 800589a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800589e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80058a0:	f7fb feec 	bl	800167c <HAL_GetTick>
 80058a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80058a6:	e008      	b.n	80058ba <HAL_RCC_OscConfig+0x40a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80058a8:	f7fb fee8 	bl	800167c <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_OscConfig+0x40a>
        {
          return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e1db      	b.n	8005c72 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80058ba:	4b31      	ldr	r3, [pc, #196]	; (8005980 <HAL_RCC_OscConfig+0x4d0>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d0f0      	beq.n	80058a8 <HAL_RCC_OscConfig+0x3f8>
 80058c6:	e018      	b.n	80058fa <HAL_RCC_OscConfig+0x44a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80058c8:	4b2d      	ldr	r3, [pc, #180]	; (8005980 <HAL_RCC_OscConfig+0x4d0>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a2c      	ldr	r2, [pc, #176]	; (8005980 <HAL_RCC_OscConfig+0x4d0>)
 80058ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058d2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80058d4:	f7fb fed2 	bl	800167c <HAL_GetTick>
 80058d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80058da:	e008      	b.n	80058ee <HAL_RCC_OscConfig+0x43e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80058dc:	f7fb fece 	bl	800167c <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d901      	bls.n	80058ee <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e1c1      	b.n	8005c72 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80058ee:	4b24      	ldr	r3, [pc, #144]	; (8005980 <HAL_RCC_OscConfig+0x4d0>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1f0      	bne.n	80058dc <HAL_RCC_OscConfig+0x42c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0304 	and.w	r3, r3, #4
 8005902:	2b00      	cmp	r3, #0
 8005904:	f000 80af 	beq.w	8005a66 <HAL_RCC_OscConfig+0x5b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005908:	4b1e      	ldr	r3, [pc, #120]	; (8005984 <HAL_RCC_OscConfig+0x4d4>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a1d      	ldr	r2, [pc, #116]	; (8005984 <HAL_RCC_OscConfig+0x4d4>)
 800590e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005912:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005914:	f7fb feb2 	bl	800167c <HAL_GetTick>
 8005918:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800591a:	e008      	b.n	800592e <HAL_RCC_OscConfig+0x47e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800591c:	f7fb feae 	bl	800167c <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	2b64      	cmp	r3, #100	; 0x64
 8005928:	d901      	bls.n	800592e <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e1a1      	b.n	8005c72 <HAL_RCC_OscConfig+0x7c2>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800592e:	4b15      	ldr	r3, [pc, #84]	; (8005984 <HAL_RCC_OscConfig+0x4d4>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005936:	2b00      	cmp	r3, #0
 8005938:	d0f0      	beq.n	800591c <HAL_RCC_OscConfig+0x46c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d106      	bne.n	8005950 <HAL_RCC_OscConfig+0x4a0>
 8005942:	4b0f      	ldr	r3, [pc, #60]	; (8005980 <HAL_RCC_OscConfig+0x4d0>)
 8005944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005946:	4a0e      	ldr	r2, [pc, #56]	; (8005980 <HAL_RCC_OscConfig+0x4d0>)
 8005948:	f043 0301 	orr.w	r3, r3, #1
 800594c:	6713      	str	r3, [r2, #112]	; 0x70
 800594e:	e05b      	b.n	8005a08 <HAL_RCC_OscConfig+0x558>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d117      	bne.n	8005988 <HAL_RCC_OscConfig+0x4d8>
 8005958:	4b09      	ldr	r3, [pc, #36]	; (8005980 <HAL_RCC_OscConfig+0x4d0>)
 800595a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800595c:	4a08      	ldr	r2, [pc, #32]	; (8005980 <HAL_RCC_OscConfig+0x4d0>)
 800595e:	f023 0301 	bic.w	r3, r3, #1
 8005962:	6713      	str	r3, [r2, #112]	; 0x70
 8005964:	4b06      	ldr	r3, [pc, #24]	; (8005980 <HAL_RCC_OscConfig+0x4d0>)
 8005966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005968:	4a05      	ldr	r2, [pc, #20]	; (8005980 <HAL_RCC_OscConfig+0x4d0>)
 800596a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800596e:	6713      	str	r3, [r2, #112]	; 0x70
 8005970:	4b03      	ldr	r3, [pc, #12]	; (8005980 <HAL_RCC_OscConfig+0x4d0>)
 8005972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005974:	4a02      	ldr	r2, [pc, #8]	; (8005980 <HAL_RCC_OscConfig+0x4d0>)
 8005976:	f023 0304 	bic.w	r3, r3, #4
 800597a:	6713      	str	r3, [r2, #112]	; 0x70
 800597c:	e044      	b.n	8005a08 <HAL_RCC_OscConfig+0x558>
 800597e:	bf00      	nop
 8005980:	58024400 	.word	0x58024400
 8005984:	58024800 	.word	0x58024800
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	2b05      	cmp	r3, #5
 800598e:	d112      	bne.n	80059b6 <HAL_RCC_OscConfig+0x506>
 8005990:	4b95      	ldr	r3, [pc, #596]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 8005992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005994:	4a94      	ldr	r2, [pc, #592]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 8005996:	f043 0304 	orr.w	r3, r3, #4
 800599a:	6713      	str	r3, [r2, #112]	; 0x70
 800599c:	4b92      	ldr	r3, [pc, #584]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 800599e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a0:	4a91      	ldr	r2, [pc, #580]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 80059a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059a6:	6713      	str	r3, [r2, #112]	; 0x70
 80059a8:	4b8f      	ldr	r3, [pc, #572]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 80059aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ac:	4a8e      	ldr	r2, [pc, #568]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 80059ae:	f043 0301 	orr.w	r3, r3, #1
 80059b2:	6713      	str	r3, [r2, #112]	; 0x70
 80059b4:	e028      	b.n	8005a08 <HAL_RCC_OscConfig+0x558>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	2b85      	cmp	r3, #133	; 0x85
 80059bc:	d112      	bne.n	80059e4 <HAL_RCC_OscConfig+0x534>
 80059be:	4b8a      	ldr	r3, [pc, #552]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 80059c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c2:	4a89      	ldr	r2, [pc, #548]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 80059c4:	f043 0304 	orr.w	r3, r3, #4
 80059c8:	6713      	str	r3, [r2, #112]	; 0x70
 80059ca:	4b87      	ldr	r3, [pc, #540]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 80059cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ce:	4a86      	ldr	r2, [pc, #536]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 80059d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059d4:	6713      	str	r3, [r2, #112]	; 0x70
 80059d6:	4b84      	ldr	r3, [pc, #528]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 80059d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059da:	4a83      	ldr	r2, [pc, #524]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 80059dc:	f043 0301 	orr.w	r3, r3, #1
 80059e0:	6713      	str	r3, [r2, #112]	; 0x70
 80059e2:	e011      	b.n	8005a08 <HAL_RCC_OscConfig+0x558>
 80059e4:	4b80      	ldr	r3, [pc, #512]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 80059e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e8:	4a7f      	ldr	r2, [pc, #508]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 80059ea:	f023 0301 	bic.w	r3, r3, #1
 80059ee:	6713      	str	r3, [r2, #112]	; 0x70
 80059f0:	4b7d      	ldr	r3, [pc, #500]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 80059f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f4:	4a7c      	ldr	r2, [pc, #496]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 80059f6:	f023 0304 	bic.w	r3, r3, #4
 80059fa:	6713      	str	r3, [r2, #112]	; 0x70
 80059fc:	4b7a      	ldr	r3, [pc, #488]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 80059fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a00:	4a79      	ldr	r2, [pc, #484]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 8005a02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d015      	beq.n	8005a3c <HAL_RCC_OscConfig+0x58c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a10:	f7fb fe34 	bl	800167c <HAL_GetTick>
 8005a14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a16:	e00a      	b.n	8005a2e <HAL_RCC_OscConfig+0x57e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a18:	f7fb fe30 	bl	800167c <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d901      	bls.n	8005a2e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e121      	b.n	8005c72 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a2e:	4b6e      	ldr	r3, [pc, #440]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 8005a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d0ee      	beq.n	8005a18 <HAL_RCC_OscConfig+0x568>
 8005a3a:	e014      	b.n	8005a66 <HAL_RCC_OscConfig+0x5b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a3c:	f7fb fe1e 	bl	800167c <HAL_GetTick>
 8005a40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005a42:	e00a      	b.n	8005a5a <HAL_RCC_OscConfig+0x5aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a44:	f7fb fe1a 	bl	800167c <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d901      	bls.n	8005a5a <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e10b      	b.n	8005c72 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005a5a:	4b63      	ldr	r3, [pc, #396]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 8005a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1ee      	bne.n	8005a44 <HAL_RCC_OscConfig+0x594>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f000 8100 	beq.w	8005c70 <HAL_RCC_OscConfig+0x7c0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005a70:	4b5d      	ldr	r3, [pc, #372]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a78:	2b18      	cmp	r3, #24
 8005a7a:	f000 80bb 	beq.w	8005bf4 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	f040 8095 	bne.w	8005bb2 <HAL_RCC_OscConfig+0x702>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a88:	4b57      	ldr	r3, [pc, #348]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a56      	ldr	r2, [pc, #344]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 8005a8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a94:	f7fb fdf2 	bl	800167c <HAL_GetTick>
 8005a98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a9a:	e008      	b.n	8005aae <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a9c:	f7fb fdee 	bl	800167c <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d901      	bls.n	8005aae <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e0e1      	b.n	8005c72 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005aae:	4b4e      	ldr	r3, [pc, #312]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1f0      	bne.n	8005a9c <HAL_RCC_OscConfig+0x5ec>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005aba:	4b4b      	ldr	r3, [pc, #300]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 8005abc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005abe:	4b4b      	ldr	r3, [pc, #300]	; (8005bec <HAL_RCC_OscConfig+0x73c>)
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005aca:	0112      	lsls	r2, r2, #4
 8005acc:	430a      	orrs	r2, r1
 8005ace:	4946      	ldr	r1, [pc, #280]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	628b      	str	r3, [r1, #40]	; 0x28
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	025b      	lsls	r3, r3, #9
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	431a      	orrs	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aee:	3b01      	subs	r3, #1
 8005af0:	041b      	lsls	r3, r3, #16
 8005af2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005af6:	431a      	orrs	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005afc:	3b01      	subs	r3, #1
 8005afe:	061b      	lsls	r3, r3, #24
 8005b00:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005b04:	4938      	ldr	r1, [pc, #224]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005b0a:	4b37      	ldr	r3, [pc, #220]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 8005b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0e:	4a36      	ldr	r2, [pc, #216]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 8005b10:	f023 0301 	bic.w	r3, r3, #1
 8005b14:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005b16:	4b34      	ldr	r3, [pc, #208]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 8005b18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b1a:	4b35      	ldr	r3, [pc, #212]	; (8005bf0 <HAL_RCC_OscConfig+0x740>)
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005b22:	00d2      	lsls	r2, r2, #3
 8005b24:	4930      	ldr	r1, [pc, #192]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005b2a:	4b2f      	ldr	r3, [pc, #188]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 8005b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2e:	f023 020c 	bic.w	r2, r3, #12
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	492c      	ldr	r1, [pc, #176]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005b3c:	4b2a      	ldr	r3, [pc, #168]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 8005b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b40:	f023 0202 	bic.w	r2, r3, #2
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b48:	4927      	ldr	r1, [pc, #156]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005b4e:	4b26      	ldr	r3, [pc, #152]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 8005b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b52:	4a25      	ldr	r2, [pc, #148]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 8005b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b5a:	4b23      	ldr	r3, [pc, #140]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 8005b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5e:	4a22      	ldr	r2, [pc, #136]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 8005b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005b66:	4b20      	ldr	r3, [pc, #128]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 8005b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6a:	4a1f      	ldr	r2, [pc, #124]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 8005b6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005b72:	4b1d      	ldr	r3, [pc, #116]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 8005b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b76:	4a1c      	ldr	r2, [pc, #112]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 8005b78:	f043 0301 	orr.w	r3, r3, #1
 8005b7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b7e:	4b1a      	ldr	r3, [pc, #104]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a19      	ldr	r2, [pc, #100]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 8005b84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b8a:	f7fb fd77 	bl	800167c <HAL_GetTick>
 8005b8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b90:	e008      	b.n	8005ba4 <HAL_RCC_OscConfig+0x6f4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b92:	f7fb fd73 	bl	800167c <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d901      	bls.n	8005ba4 <HAL_RCC_OscConfig+0x6f4>
          {
            return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e066      	b.n	8005c72 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ba4:	4b10      	ldr	r3, [pc, #64]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d0f0      	beq.n	8005b92 <HAL_RCC_OscConfig+0x6e2>
 8005bb0:	e05e      	b.n	8005c70 <HAL_RCC_OscConfig+0x7c0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bb2:	4b0d      	ldr	r3, [pc, #52]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a0c      	ldr	r2, [pc, #48]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 8005bb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bbe:	f7fb fd5d 	bl	800167c <HAL_GetTick>
 8005bc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005bc4:	e008      	b.n	8005bd8 <HAL_RCC_OscConfig+0x728>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bc6:	f7fb fd59 	bl	800167c <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d901      	bls.n	8005bd8 <HAL_RCC_OscConfig+0x728>
          {
            return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e04c      	b.n	8005c72 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005bd8:	4b03      	ldr	r3, [pc, #12]	; (8005be8 <HAL_RCC_OscConfig+0x738>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1f0      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x716>
 8005be4:	e044      	b.n	8005c70 <HAL_RCC_OscConfig+0x7c0>
 8005be6:	bf00      	nop
 8005be8:	58024400 	.word	0x58024400
 8005bec:	fffffc0c 	.word	0xfffffc0c
 8005bf0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005bf4:	4b21      	ldr	r3, [pc, #132]	; (8005c7c <HAL_RCC_OscConfig+0x7cc>)
 8005bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005bfa:	4b20      	ldr	r3, [pc, #128]	; (8005c7c <HAL_RCC_OscConfig+0x7cc>)
 8005bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bfe:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d031      	beq.n	8005c6c <HAL_RCC_OscConfig+0x7bc>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	f003 0203 	and.w	r2, r3, #3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d12a      	bne.n	8005c6c <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	091b      	lsrs	r3, r3, #4
 8005c1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d122      	bne.n	8005c6c <HAL_RCC_OscConfig+0x7bc>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c30:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d11a      	bne.n	8005c6c <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	0a5b      	lsrs	r3, r3, #9
 8005c3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c42:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d111      	bne.n	8005c6c <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	0c1b      	lsrs	r3, r3, #16
 8005c4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c54:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d108      	bne.n	8005c6c <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	0e1b      	lsrs	r3, r3, #24
 8005c5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c66:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d001      	beq.n	8005c70 <HAL_RCC_OscConfig+0x7c0>
      {
        return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e000      	b.n	8005c72 <HAL_RCC_OscConfig+0x7c2>
      }
    }
  }
  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3730      	adds	r7, #48	; 0x30
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	58024400 	.word	0x58024400

08005c80 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e19c      	b.n	8005fce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c94:	4b8a      	ldr	r3, [pc, #552]	; (8005ec0 <HAL_RCC_ClockConfig+0x240>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 030f 	and.w	r3, r3, #15
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d910      	bls.n	8005cc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ca2:	4b87      	ldr	r3, [pc, #540]	; (8005ec0 <HAL_RCC_ClockConfig+0x240>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f023 020f 	bic.w	r2, r3, #15
 8005caa:	4985      	ldr	r1, [pc, #532]	; (8005ec0 <HAL_RCC_ClockConfig+0x240>)
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cb2:	4b83      	ldr	r3, [pc, #524]	; (8005ec0 <HAL_RCC_ClockConfig+0x240>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 030f 	and.w	r3, r3, #15
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d001      	beq.n	8005cc4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e184      	b.n	8005fce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0304 	and.w	r3, r3, #4
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d010      	beq.n	8005cf2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	691a      	ldr	r2, [r3, #16]
 8005cd4:	4b7b      	ldr	r3, [pc, #492]	; (8005ec4 <HAL_RCC_ClockConfig+0x244>)
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d908      	bls.n	8005cf2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005ce0:	4b78      	ldr	r3, [pc, #480]	; (8005ec4 <HAL_RCC_ClockConfig+0x244>)
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	4975      	ldr	r1, [pc, #468]	; (8005ec4 <HAL_RCC_ClockConfig+0x244>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0308 	and.w	r3, r3, #8
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d010      	beq.n	8005d20 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	695a      	ldr	r2, [r3, #20]
 8005d02:	4b70      	ldr	r3, [pc, #448]	; (8005ec4 <HAL_RCC_ClockConfig+0x244>)
 8005d04:	69db      	ldr	r3, [r3, #28]
 8005d06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d908      	bls.n	8005d20 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d0e:	4b6d      	ldr	r3, [pc, #436]	; (8005ec4 <HAL_RCC_ClockConfig+0x244>)
 8005d10:	69db      	ldr	r3, [r3, #28]
 8005d12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	496a      	ldr	r1, [pc, #424]	; (8005ec4 <HAL_RCC_ClockConfig+0x244>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0310 	and.w	r3, r3, #16
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d010      	beq.n	8005d4e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	699a      	ldr	r2, [r3, #24]
 8005d30:	4b64      	ldr	r3, [pc, #400]	; (8005ec4 <HAL_RCC_ClockConfig+0x244>)
 8005d32:	69db      	ldr	r3, [r3, #28]
 8005d34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d908      	bls.n	8005d4e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005d3c:	4b61      	ldr	r3, [pc, #388]	; (8005ec4 <HAL_RCC_ClockConfig+0x244>)
 8005d3e:	69db      	ldr	r3, [r3, #28]
 8005d40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	495e      	ldr	r1, [pc, #376]	; (8005ec4 <HAL_RCC_ClockConfig+0x244>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0320 	and.w	r3, r3, #32
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d010      	beq.n	8005d7c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	69da      	ldr	r2, [r3, #28]
 8005d5e:	4b59      	ldr	r3, [pc, #356]	; (8005ec4 <HAL_RCC_ClockConfig+0x244>)
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d908      	bls.n	8005d7c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005d6a:	4b56      	ldr	r3, [pc, #344]	; (8005ec4 <HAL_RCC_ClockConfig+0x244>)
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	4953      	ldr	r1, [pc, #332]	; (8005ec4 <HAL_RCC_ClockConfig+0x244>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0302 	and.w	r3, r3, #2
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d010      	beq.n	8005daa <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	68da      	ldr	r2, [r3, #12]
 8005d8c:	4b4d      	ldr	r3, [pc, #308]	; (8005ec4 <HAL_RCC_ClockConfig+0x244>)
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	f003 030f 	and.w	r3, r3, #15
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d908      	bls.n	8005daa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d98:	4b4a      	ldr	r3, [pc, #296]	; (8005ec4 <HAL_RCC_ClockConfig+0x244>)
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	f023 020f 	bic.w	r2, r3, #15
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	4947      	ldr	r1, [pc, #284]	; (8005ec4 <HAL_RCC_ClockConfig+0x244>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d055      	beq.n	8005e62 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005db6:	4b43      	ldr	r3, [pc, #268]	; (8005ec4 <HAL_RCC_ClockConfig+0x244>)
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	4940      	ldr	r1, [pc, #256]	; (8005ec4 <HAL_RCC_ClockConfig+0x244>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d107      	bne.n	8005de0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005dd0:	4b3c      	ldr	r3, [pc, #240]	; (8005ec4 <HAL_RCC_ClockConfig+0x244>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d121      	bne.n	8005e20 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e0f6      	b.n	8005fce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	2b03      	cmp	r3, #3
 8005de6:	d107      	bne.n	8005df8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005de8:	4b36      	ldr	r3, [pc, #216]	; (8005ec4 <HAL_RCC_ClockConfig+0x244>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d115      	bne.n	8005e20 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e0ea      	b.n	8005fce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d107      	bne.n	8005e10 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e00:	4b30      	ldr	r3, [pc, #192]	; (8005ec4 <HAL_RCC_ClockConfig+0x244>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d109      	bne.n	8005e20 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e0de      	b.n	8005fce <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e10:	4b2c      	ldr	r3, [pc, #176]	; (8005ec4 <HAL_RCC_ClockConfig+0x244>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0304 	and.w	r3, r3, #4
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d101      	bne.n	8005e20 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e0d6      	b.n	8005fce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e20:	4b28      	ldr	r3, [pc, #160]	; (8005ec4 <HAL_RCC_ClockConfig+0x244>)
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	f023 0207 	bic.w	r2, r3, #7
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	4925      	ldr	r1, [pc, #148]	; (8005ec4 <HAL_RCC_ClockConfig+0x244>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e32:	f7fb fc23 	bl	800167c <HAL_GetTick>
 8005e36:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e38:	e00a      	b.n	8005e50 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e3a:	f7fb fc1f 	bl	800167c <HAL_GetTick>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d901      	bls.n	8005e50 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e0be      	b.n	8005fce <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e50:	4b1c      	ldr	r3, [pc, #112]	; (8005ec4 <HAL_RCC_ClockConfig+0x244>)
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	00db      	lsls	r3, r3, #3
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d1eb      	bne.n	8005e3a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d010      	beq.n	8005e90 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68da      	ldr	r2, [r3, #12]
 8005e72:	4b14      	ldr	r3, [pc, #80]	; (8005ec4 <HAL_RCC_ClockConfig+0x244>)
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	f003 030f 	and.w	r3, r3, #15
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d208      	bcs.n	8005e90 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e7e:	4b11      	ldr	r3, [pc, #68]	; (8005ec4 <HAL_RCC_ClockConfig+0x244>)
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	f023 020f 	bic.w	r2, r3, #15
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	490e      	ldr	r1, [pc, #56]	; (8005ec4 <HAL_RCC_ClockConfig+0x244>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e90:	4b0b      	ldr	r3, [pc, #44]	; (8005ec0 <HAL_RCC_ClockConfig+0x240>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 030f 	and.w	r3, r3, #15
 8005e98:	683a      	ldr	r2, [r7, #0]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d214      	bcs.n	8005ec8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e9e:	4b08      	ldr	r3, [pc, #32]	; (8005ec0 <HAL_RCC_ClockConfig+0x240>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f023 020f 	bic.w	r2, r3, #15
 8005ea6:	4906      	ldr	r1, [pc, #24]	; (8005ec0 <HAL_RCC_ClockConfig+0x240>)
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eae:	4b04      	ldr	r3, [pc, #16]	; (8005ec0 <HAL_RCC_ClockConfig+0x240>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 030f 	and.w	r3, r3, #15
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d005      	beq.n	8005ec8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e086      	b.n	8005fce <HAL_RCC_ClockConfig+0x34e>
 8005ec0:	52002000 	.word	0x52002000
 8005ec4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0304 	and.w	r3, r3, #4
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d010      	beq.n	8005ef6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	691a      	ldr	r2, [r3, #16]
 8005ed8:	4b3f      	ldr	r3, [pc, #252]	; (8005fd8 <HAL_RCC_ClockConfig+0x358>)
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d208      	bcs.n	8005ef6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005ee4:	4b3c      	ldr	r3, [pc, #240]	; (8005fd8 <HAL_RCC_ClockConfig+0x358>)
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	4939      	ldr	r1, [pc, #228]	; (8005fd8 <HAL_RCC_ClockConfig+0x358>)
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0308 	and.w	r3, r3, #8
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d010      	beq.n	8005f24 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	695a      	ldr	r2, [r3, #20]
 8005f06:	4b34      	ldr	r3, [pc, #208]	; (8005fd8 <HAL_RCC_ClockConfig+0x358>)
 8005f08:	69db      	ldr	r3, [r3, #28]
 8005f0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d208      	bcs.n	8005f24 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005f12:	4b31      	ldr	r3, [pc, #196]	; (8005fd8 <HAL_RCC_ClockConfig+0x358>)
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	492e      	ldr	r1, [pc, #184]	; (8005fd8 <HAL_RCC_ClockConfig+0x358>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0310 	and.w	r3, r3, #16
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d010      	beq.n	8005f52 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	699a      	ldr	r2, [r3, #24]
 8005f34:	4b28      	ldr	r3, [pc, #160]	; (8005fd8 <HAL_RCC_ClockConfig+0x358>)
 8005f36:	69db      	ldr	r3, [r3, #28]
 8005f38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d208      	bcs.n	8005f52 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005f40:	4b25      	ldr	r3, [pc, #148]	; (8005fd8 <HAL_RCC_ClockConfig+0x358>)
 8005f42:	69db      	ldr	r3, [r3, #28]
 8005f44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	4922      	ldr	r1, [pc, #136]	; (8005fd8 <HAL_RCC_ClockConfig+0x358>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0320 	and.w	r3, r3, #32
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d010      	beq.n	8005f80 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	69da      	ldr	r2, [r3, #28]
 8005f62:	4b1d      	ldr	r3, [pc, #116]	; (8005fd8 <HAL_RCC_ClockConfig+0x358>)
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d208      	bcs.n	8005f80 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005f6e:	4b1a      	ldr	r3, [pc, #104]	; (8005fd8 <HAL_RCC_ClockConfig+0x358>)
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	4917      	ldr	r1, [pc, #92]	; (8005fd8 <HAL_RCC_ClockConfig+0x358>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005f80:	f000 f834 	bl	8005fec <HAL_RCC_GetSysClockFreq>
 8005f84:	4601      	mov	r1, r0
 8005f86:	4b14      	ldr	r3, [pc, #80]	; (8005fd8 <HAL_RCC_ClockConfig+0x358>)
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	0a1b      	lsrs	r3, r3, #8
 8005f8c:	f003 030f 	and.w	r3, r3, #15
 8005f90:	4a12      	ldr	r2, [pc, #72]	; (8005fdc <HAL_RCC_ClockConfig+0x35c>)
 8005f92:	5cd3      	ldrb	r3, [r2, r3]
 8005f94:	f003 031f 	and.w	r3, r3, #31
 8005f98:	fa21 f303 	lsr.w	r3, r1, r3
 8005f9c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005f9e:	4b0e      	ldr	r3, [pc, #56]	; (8005fd8 <HAL_RCC_ClockConfig+0x358>)
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	f003 030f 	and.w	r3, r3, #15
 8005fa6:	4a0d      	ldr	r2, [pc, #52]	; (8005fdc <HAL_RCC_ClockConfig+0x35c>)
 8005fa8:	5cd3      	ldrb	r3, [r2, r3]
 8005faa:	f003 031f 	and.w	r3, r3, #31
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8005fb4:	4a0a      	ldr	r2, [pc, #40]	; (8005fe0 <HAL_RCC_ClockConfig+0x360>)
 8005fb6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005fb8:	4a0a      	ldr	r2, [pc, #40]	; (8005fe4 <HAL_RCC_ClockConfig+0x364>)
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005fbe:	4b0a      	ldr	r3, [pc, #40]	; (8005fe8 <HAL_RCC_ClockConfig+0x368>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7fb fb10 	bl	80015e8 <HAL_InitTick>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3718      	adds	r7, #24
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	58024400 	.word	0x58024400
 8005fdc:	0800a348 	.word	0x0800a348
 8005fe0:	24000004 	.word	0x24000004
 8005fe4:	24000000 	.word	0x24000000
 8005fe8:	24000008 	.word	0x24000008

08005fec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b089      	sub	sp, #36	; 0x24
 8005ff0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ff2:	4baf      	ldr	r3, [pc, #700]	; (80062b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ffa:	2b18      	cmp	r3, #24
 8005ffc:	f200 814e 	bhi.w	800629c <HAL_RCC_GetSysClockFreq+0x2b0>
 8006000:	a201      	add	r2, pc, #4	; (adr r2, 8006008 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006006:	bf00      	nop
 8006008:	0800606d 	.word	0x0800606d
 800600c:	0800629d 	.word	0x0800629d
 8006010:	0800629d 	.word	0x0800629d
 8006014:	0800629d 	.word	0x0800629d
 8006018:	0800629d 	.word	0x0800629d
 800601c:	0800629d 	.word	0x0800629d
 8006020:	0800629d 	.word	0x0800629d
 8006024:	0800629d 	.word	0x0800629d
 8006028:	08006093 	.word	0x08006093
 800602c:	0800629d 	.word	0x0800629d
 8006030:	0800629d 	.word	0x0800629d
 8006034:	0800629d 	.word	0x0800629d
 8006038:	0800629d 	.word	0x0800629d
 800603c:	0800629d 	.word	0x0800629d
 8006040:	0800629d 	.word	0x0800629d
 8006044:	0800629d 	.word	0x0800629d
 8006048:	08006099 	.word	0x08006099
 800604c:	0800629d 	.word	0x0800629d
 8006050:	0800629d 	.word	0x0800629d
 8006054:	0800629d 	.word	0x0800629d
 8006058:	0800629d 	.word	0x0800629d
 800605c:	0800629d 	.word	0x0800629d
 8006060:	0800629d 	.word	0x0800629d
 8006064:	0800629d 	.word	0x0800629d
 8006068:	0800609f 	.word	0x0800609f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800606c:	4b90      	ldr	r3, [pc, #576]	; (80062b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0320 	and.w	r3, r3, #32
 8006074:	2b00      	cmp	r3, #0
 8006076:	d009      	beq.n	800608c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006078:	4b8d      	ldr	r3, [pc, #564]	; (80062b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	08db      	lsrs	r3, r3, #3
 800607e:	f003 0303 	and.w	r3, r3, #3
 8006082:	4a8c      	ldr	r2, [pc, #560]	; (80062b4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006084:	fa22 f303 	lsr.w	r3, r2, r3
 8006088:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800608a:	e10a      	b.n	80062a2 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800608c:	4b89      	ldr	r3, [pc, #548]	; (80062b4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800608e:	61bb      	str	r3, [r7, #24]
    break;
 8006090:	e107      	b.n	80062a2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006092:	4b89      	ldr	r3, [pc, #548]	; (80062b8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006094:	61bb      	str	r3, [r7, #24]
    break;
 8006096:	e104      	b.n	80062a2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006098:	4b88      	ldr	r3, [pc, #544]	; (80062bc <HAL_RCC_GetSysClockFreq+0x2d0>)
 800609a:	61bb      	str	r3, [r7, #24]
    break;
 800609c:	e101      	b.n	80062a2 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800609e:	4b84      	ldr	r3, [pc, #528]	; (80062b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80060a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a2:	f003 0303 	and.w	r3, r3, #3
 80060a6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80060a8:	4b81      	ldr	r3, [pc, #516]	; (80062b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80060aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ac:	091b      	lsrs	r3, r3, #4
 80060ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060b2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80060b4:	4b7e      	ldr	r3, [pc, #504]	; (80062b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80060b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80060be:	4b7c      	ldr	r3, [pc, #496]	; (80062b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80060c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060c2:	08db      	lsrs	r3, r3, #3
 80060c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	fb02 f303 	mul.w	r3, r2, r3
 80060ce:	ee07 3a90 	vmov	s15, r3
 80060d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060d6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f000 80da 	beq.w	8006296 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d05a      	beq.n	800619e <HAL_RCC_GetSysClockFreq+0x1b2>
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d302      	bcc.n	80060f2 <HAL_RCC_GetSysClockFreq+0x106>
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d078      	beq.n	80061e2 <HAL_RCC_GetSysClockFreq+0x1f6>
 80060f0:	e099      	b.n	8006226 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060f2:	4b6f      	ldr	r3, [pc, #444]	; (80062b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0320 	and.w	r3, r3, #32
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d02d      	beq.n	800615a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80060fe:	4b6c      	ldr	r3, [pc, #432]	; (80062b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	08db      	lsrs	r3, r3, #3
 8006104:	f003 0303 	and.w	r3, r3, #3
 8006108:	4a6a      	ldr	r2, [pc, #424]	; (80062b4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800610a:	fa22 f303 	lsr.w	r3, r2, r3
 800610e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	ee07 3a90 	vmov	s15, r3
 8006116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	ee07 3a90 	vmov	s15, r3
 8006120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006124:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006128:	4b61      	ldr	r3, [pc, #388]	; (80062b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800612a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006130:	ee07 3a90 	vmov	s15, r3
 8006134:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006138:	ed97 6a02 	vldr	s12, [r7, #8]
 800613c:	eddf 5a60 	vldr	s11, [pc, #384]	; 80062c0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006140:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006144:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006148:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800614c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006150:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006154:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006158:	e087      	b.n	800626a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	ee07 3a90 	vmov	s15, r3
 8006160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006164:	eddf 6a57 	vldr	s13, [pc, #348]	; 80062c4 <HAL_RCC_GetSysClockFreq+0x2d8>
 8006168:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800616c:	4b50      	ldr	r3, [pc, #320]	; (80062b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800616e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006174:	ee07 3a90 	vmov	s15, r3
 8006178:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800617c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006180:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80062c0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006184:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006188:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800618c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006190:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006194:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006198:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800619c:	e065      	b.n	800626a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	ee07 3a90 	vmov	s15, r3
 80061a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061a8:	eddf 6a47 	vldr	s13, [pc, #284]	; 80062c8 <HAL_RCC_GetSysClockFreq+0x2dc>
 80061ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061b0:	4b3f      	ldr	r3, [pc, #252]	; (80062b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80061b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061b8:	ee07 3a90 	vmov	s15, r3
 80061bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80061c4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80062c0 <HAL_RCC_GetSysClockFreq+0x2d4>
 80061c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061e0:	e043      	b.n	800626a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	ee07 3a90 	vmov	s15, r3
 80061e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ec:	eddf 6a37 	vldr	s13, [pc, #220]	; 80062cc <HAL_RCC_GetSysClockFreq+0x2e0>
 80061f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061f4:	4b2e      	ldr	r3, [pc, #184]	; (80062b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80061f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061fc:	ee07 3a90 	vmov	s15, r3
 8006200:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006204:	ed97 6a02 	vldr	s12, [r7, #8]
 8006208:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80062c0 <HAL_RCC_GetSysClockFreq+0x2d4>
 800620c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006210:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006214:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006218:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800621c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006220:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006224:	e021      	b.n	800626a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	ee07 3a90 	vmov	s15, r3
 800622c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006230:	eddf 6a25 	vldr	s13, [pc, #148]	; 80062c8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006234:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006238:	4b1d      	ldr	r3, [pc, #116]	; (80062b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800623a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006240:	ee07 3a90 	vmov	s15, r3
 8006244:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006248:	ed97 6a02 	vldr	s12, [r7, #8]
 800624c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80062c0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006250:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006254:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006258:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800625c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006264:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006268:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800626a:	4b11      	ldr	r3, [pc, #68]	; (80062b0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800626c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626e:	0a5b      	lsrs	r3, r3, #9
 8006270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006274:	3301      	adds	r3, #1
 8006276:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	ee07 3a90 	vmov	s15, r3
 800627e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006282:	edd7 6a07 	vldr	s13, [r7, #28]
 8006286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800628a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800628e:	ee17 3a90 	vmov	r3, s15
 8006292:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006294:	e005      	b.n	80062a2 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8006296:	2300      	movs	r3, #0
 8006298:	61bb      	str	r3, [r7, #24]
    break;
 800629a:	e002      	b.n	80062a2 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800629c:	4b06      	ldr	r3, [pc, #24]	; (80062b8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800629e:	61bb      	str	r3, [r7, #24]
    break;
 80062a0:	bf00      	nop
  }

  return sysclockfreq;
 80062a2:	69bb      	ldr	r3, [r7, #24]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3724      	adds	r7, #36	; 0x24
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	58024400 	.word	0x58024400
 80062b4:	03d09000 	.word	0x03d09000
 80062b8:	003d0900 	.word	0x003d0900
 80062bc:	007a1200 	.word	0x007a1200
 80062c0:	46000000 	.word	0x46000000
 80062c4:	4c742400 	.word	0x4c742400
 80062c8:	4a742400 	.word	0x4a742400
 80062cc:	4af42400 	.word	0x4af42400

080062d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80062d6:	f7ff fe89 	bl	8005fec <HAL_RCC_GetSysClockFreq>
 80062da:	4601      	mov	r1, r0
 80062dc:	4b10      	ldr	r3, [pc, #64]	; (8006320 <HAL_RCC_GetHCLKFreq+0x50>)
 80062de:	699b      	ldr	r3, [r3, #24]
 80062e0:	0a1b      	lsrs	r3, r3, #8
 80062e2:	f003 030f 	and.w	r3, r3, #15
 80062e6:	4a0f      	ldr	r2, [pc, #60]	; (8006324 <HAL_RCC_GetHCLKFreq+0x54>)
 80062e8:	5cd3      	ldrb	r3, [r2, r3]
 80062ea:	f003 031f 	and.w	r3, r3, #31
 80062ee:	fa21 f303 	lsr.w	r3, r1, r3
 80062f2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80062f4:	4b0a      	ldr	r3, [pc, #40]	; (8006320 <HAL_RCC_GetHCLKFreq+0x50>)
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	f003 030f 	and.w	r3, r3, #15
 80062fc:	4a09      	ldr	r2, [pc, #36]	; (8006324 <HAL_RCC_GetHCLKFreq+0x54>)
 80062fe:	5cd3      	ldrb	r3, [r2, r3]
 8006300:	f003 031f 	and.w	r3, r3, #31
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	fa22 f303 	lsr.w	r3, r2, r3
 800630a:	4a07      	ldr	r2, [pc, #28]	; (8006328 <HAL_RCC_GetHCLKFreq+0x58>)
 800630c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800630e:	4a07      	ldr	r2, [pc, #28]	; (800632c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006314:	4b04      	ldr	r3, [pc, #16]	; (8006328 <HAL_RCC_GetHCLKFreq+0x58>)
 8006316:	681b      	ldr	r3, [r3, #0]
}
 8006318:	4618      	mov	r0, r3
 800631a:	3708      	adds	r7, #8
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	58024400 	.word	0x58024400
 8006324:	0800a348 	.word	0x0800a348
 8006328:	24000004 	.word	0x24000004
 800632c:	24000000 	.word	0x24000000

08006330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8006334:	f7ff ffcc 	bl	80062d0 <HAL_RCC_GetHCLKFreq>
 8006338:	4601      	mov	r1, r0
 800633a:	4b06      	ldr	r3, [pc, #24]	; (8006354 <HAL_RCC_GetPCLK1Freq+0x24>)
 800633c:	69db      	ldr	r3, [r3, #28]
 800633e:	091b      	lsrs	r3, r3, #4
 8006340:	f003 0307 	and.w	r3, r3, #7
 8006344:	4a04      	ldr	r2, [pc, #16]	; (8006358 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006346:	5cd3      	ldrb	r3, [r2, r3]
 8006348:	f003 031f 	and.w	r3, r3, #31
 800634c:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 8006350:	4618      	mov	r0, r3
 8006352:	bd80      	pop	{r7, pc}
 8006354:	58024400 	.word	0x58024400
 8006358:	0800a348 	.word	0x0800a348

0800635c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8006360:	f7ff ffb6 	bl	80062d0 <HAL_RCC_GetHCLKFreq>
 8006364:	4601      	mov	r1, r0
 8006366:	4b06      	ldr	r3, [pc, #24]	; (8006380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006368:	69db      	ldr	r3, [r3, #28]
 800636a:	0a1b      	lsrs	r3, r3, #8
 800636c:	f003 0307 	and.w	r3, r3, #7
 8006370:	4a04      	ldr	r2, [pc, #16]	; (8006384 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006372:	5cd3      	ldrb	r3, [r2, r3]
 8006374:	f003 031f 	and.w	r3, r3, #31
 8006378:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 800637c:	4618      	mov	r0, r3
 800637e:	bd80      	pop	{r7, pc}
 8006380:	58024400 	.word	0x58024400
 8006384:	0800a348 	.word	0x0800a348

08006388 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b086      	sub	sp, #24
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006390:	2300      	movs	r3, #0
 8006392:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006394:	2300      	movs	r3, #0
 8006396:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d03d      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063ac:	d013      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80063ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063b2:	d802      	bhi.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x32>
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d007      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80063b8:	e01f      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x72>
 80063ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063be:	d013      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80063c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80063c4:	d01c      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80063c6:	e018      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063c8:	4bad      	ldr	r3, [pc, #692]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80063ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063cc:	4aac      	ldr	r2, [pc, #688]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80063ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80063d4:	e015      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	3304      	adds	r3, #4
 80063da:	2102      	movs	r1, #2
 80063dc:	4618      	mov	r0, r3
 80063de:	f001 fca7 	bl	8007d30 <RCCEx_PLL2_Config>
 80063e2:	4603      	mov	r3, r0
 80063e4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80063e6:	e00c      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	3324      	adds	r3, #36	; 0x24
 80063ec:	2102      	movs	r1, #2
 80063ee:	4618      	mov	r0, r3
 80063f0:	f001 fd50 	bl	8007e94 <RCCEx_PLL3_Config>
 80063f4:	4603      	mov	r3, r0
 80063f6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80063f8:	e003      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	75fb      	strb	r3, [r7, #23]
      break;
 80063fe:	e000      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006400:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006402:	7dfb      	ldrb	r3, [r7, #23]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d109      	bne.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006408:	4b9d      	ldr	r3, [pc, #628]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800640a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800640c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006414:	499a      	ldr	r1, [pc, #616]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006416:	4313      	orrs	r3, r2
 8006418:	650b      	str	r3, [r1, #80]	; 0x50
 800641a:	e001      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800641c:	7dfb      	ldrb	r3, [r7, #23]
 800641e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006428:	2b00      	cmp	r3, #0
 800642a:	d03d      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006430:	2b04      	cmp	r3, #4
 8006432:	d826      	bhi.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006434:	a201      	add	r2, pc, #4	; (adr r2, 800643c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643a:	bf00      	nop
 800643c:	08006451 	.word	0x08006451
 8006440:	0800645f 	.word	0x0800645f
 8006444:	08006471 	.word	0x08006471
 8006448:	08006489 	.word	0x08006489
 800644c:	08006489 	.word	0x08006489
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006450:	4b8b      	ldr	r3, [pc, #556]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006454:	4a8a      	ldr	r2, [pc, #552]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800645a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800645c:	e015      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	3304      	adds	r3, #4
 8006462:	2100      	movs	r1, #0
 8006464:	4618      	mov	r0, r3
 8006466:	f001 fc63 	bl	8007d30 <RCCEx_PLL2_Config>
 800646a:	4603      	mov	r3, r0
 800646c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800646e:	e00c      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	3324      	adds	r3, #36	; 0x24
 8006474:	2100      	movs	r1, #0
 8006476:	4618      	mov	r0, r3
 8006478:	f001 fd0c 	bl	8007e94 <RCCEx_PLL3_Config>
 800647c:	4603      	mov	r3, r0
 800647e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006480:	e003      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	75fb      	strb	r3, [r7, #23]
      break;
 8006486:	e000      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006488:	bf00      	nop
    }

    if(ret == HAL_OK)
 800648a:	7dfb      	ldrb	r3, [r7, #23]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d109      	bne.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006490:	4b7b      	ldr	r3, [pc, #492]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006494:	f023 0207 	bic.w	r2, r3, #7
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800649c:	4978      	ldr	r1, [pc, #480]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800649e:	4313      	orrs	r3, r2
 80064a0:	650b      	str	r3, [r1, #80]	; 0x50
 80064a2:	e001      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064a4:	7dfb      	ldrb	r3, [r7, #23]
 80064a6:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d043      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b8:	2b80      	cmp	r3, #128	; 0x80
 80064ba:	d01f      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x174>
 80064bc:	2b80      	cmp	r3, #128	; 0x80
 80064be:	d804      	bhi.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x142>
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00b      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80064c4:	2b40      	cmp	r3, #64	; 0x40
 80064c6:	d010      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x162>
 80064c8:	e021      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x186>
 80064ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064ce:	d021      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80064d0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80064d4:	d020      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80064d6:	2bc0      	cmp	r3, #192	; 0xc0
 80064d8:	d020      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x194>
 80064da:	e018      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064dc:	4b68      	ldr	r3, [pc, #416]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80064de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e0:	4a67      	ldr	r2, [pc, #412]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80064e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80064e8:	e019      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x196>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	3304      	adds	r3, #4
 80064ee:	2100      	movs	r1, #0
 80064f0:	4618      	mov	r0, r3
 80064f2:	f001 fc1d 	bl	8007d30 <RCCEx_PLL2_Config>
 80064f6:	4603      	mov	r3, r0
 80064f8:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80064fa:	e010      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x196>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	3324      	adds	r3, #36	; 0x24
 8006500:	2100      	movs	r1, #0
 8006502:	4618      	mov	r0, r3
 8006504:	f001 fcc6 	bl	8007e94 <RCCEx_PLL3_Config>
 8006508:	4603      	mov	r3, r0
 800650a:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800650c:	e007      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x196>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	75fb      	strb	r3, [r7, #23]
      break;
 8006512:	e004      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 8006514:	bf00      	nop
 8006516:	e002      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 8006518:	bf00      	nop
 800651a:	e000      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x196>
      break;
 800651c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800651e:	7dfb      	ldrb	r3, [r7, #23]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d109      	bne.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8006524:	4b56      	ldr	r3, [pc, #344]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006528:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006530:	4953      	ldr	r1, [pc, #332]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006532:	4313      	orrs	r3, r2
 8006534:	650b      	str	r3, [r1, #80]	; 0x50
 8006536:	e001      	b.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006538:	7dfb      	ldrb	r3, [r7, #23]
 800653a:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006544:	2b00      	cmp	r3, #0
 8006546:	d047      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800654c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006550:	d022      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8006552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006556:	d805      	bhi.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00d      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800655c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006560:	d011      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8006562:	e022      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x222>
 8006564:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006568:	d022      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800656a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800656e:	d021      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8006570:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006574:	d020      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006576:	e018      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x222>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006578:	4b41      	ldr	r3, [pc, #260]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800657a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657c:	4a40      	ldr	r2, [pc, #256]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800657e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006582:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006584:	e019      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x232>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	3304      	adds	r3, #4
 800658a:	2100      	movs	r1, #0
 800658c:	4618      	mov	r0, r3
 800658e:	f001 fbcf 	bl	8007d30 <RCCEx_PLL2_Config>
 8006592:	4603      	mov	r3, r0
 8006594:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006596:	e010      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x232>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	3324      	adds	r3, #36	; 0x24
 800659c:	2100      	movs	r1, #0
 800659e:	4618      	mov	r0, r3
 80065a0:	f001 fc78 	bl	8007e94 <RCCEx_PLL3_Config>
 80065a4:	4603      	mov	r3, r0
 80065a6:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80065a8:	e007      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x232>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	75fb      	strb	r3, [r7, #23]
      break;
 80065ae:	e004      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 80065b0:	bf00      	nop
 80065b2:	e002      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 80065b4:	bf00      	nop
 80065b6:	e000      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x232>
      break;
 80065b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065ba:	7dfb      	ldrb	r3, [r7, #23]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d109      	bne.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80065c0:	4b2f      	ldr	r3, [pc, #188]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80065c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065c4:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065cc:	492c      	ldr	r1, [pc, #176]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	650b      	str	r3, [r1, #80]	; 0x50
 80065d2:	e001      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x250>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d4:	7dfb      	ldrb	r3, [r7, #23]
 80065d6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d032      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065e8:	2b10      	cmp	r3, #16
 80065ea:	d009      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80065ec:	2b10      	cmp	r3, #16
 80065ee:	d802      	bhi.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d018      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x29e>
 80065f4:	e014      	b.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80065f6:	2b20      	cmp	r3, #32
 80065f8:	d009      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x286>
 80065fa:	2b30      	cmp	r3, #48	; 0x30
 80065fc:	d015      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 80065fe:	e00f      	b.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x298>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006600:	4b1f      	ldr	r3, [pc, #124]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006604:	4a1e      	ldr	r2, [pc, #120]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800660a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800660c:	e00e      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x2a4>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	3304      	adds	r3, #4
 8006612:	2102      	movs	r1, #2
 8006614:	4618      	mov	r0, r3
 8006616:	f001 fb8b 	bl	8007d30 <RCCEx_PLL2_Config>
 800661a:	4603      	mov	r3, r0
 800661c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800661e:	e005      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	75fb      	strb	r3, [r7, #23]
      break;
 8006624:	e002      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      break;
 8006626:	bf00      	nop
 8006628:	e000      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x2a4>
      break;
 800662a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800662c:	7dfb      	ldrb	r3, [r7, #23]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d109      	bne.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006632:	4b13      	ldr	r3, [pc, #76]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006636:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800663e:	4910      	ldr	r1, [pc, #64]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006640:	4313      	orrs	r3, r2
 8006642:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006644:	e001      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006646:	7dfb      	ldrb	r3, [r7, #23]
 8006648:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d044      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800665a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800665e:	d021      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8006660:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006664:	d805      	bhi.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00c      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800666a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800666e:	d010      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8006670:	e021      	b.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006672:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006676:	d021      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x334>
 8006678:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800667c:	d020      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
 800667e:	e01a      	b.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006680:	58024400 	.word	0x58024400
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006684:	4ba6      	ldr	r3, [pc, #664]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006688:	4aa5      	ldr	r2, [pc, #660]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800668a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800668e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006690:	e017      	b.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x33a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	3304      	adds	r3, #4
 8006696:	2100      	movs	r1, #0
 8006698:	4618      	mov	r0, r3
 800669a:	f001 fb49 	bl	8007d30 <RCCEx_PLL2_Config>
 800669e:	4603      	mov	r3, r0
 80066a0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80066a2:	e00e      	b.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x33a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	3324      	adds	r3, #36	; 0x24
 80066a8:	2100      	movs	r1, #0
 80066aa:	4618      	mov	r0, r3
 80066ac:	f001 fbf2 	bl	8007e94 <RCCEx_PLL3_Config>
 80066b0:	4603      	mov	r3, r0
 80066b2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80066b4:	e005      	b.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	75fb      	strb	r3, [r7, #23]
      break;
 80066ba:	e002      	b.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
      break;
 80066bc:	bf00      	nop
 80066be:	e000      	b.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
      break;
 80066c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066c2:	7dfb      	ldrb	r3, [r7, #23]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d109      	bne.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x354>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80066c8:	4b95      	ldr	r3, [pc, #596]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80066ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066cc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066d4:	4992      	ldr	r1, [pc, #584]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80066d6:	4313      	orrs	r3, r2
 80066d8:	650b      	str	r3, [r1, #80]	; 0x50
 80066da:	e001      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x358>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066dc:	7dfb      	ldrb	r3, [r7, #23]
 80066de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d042      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066f4:	d01b      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 80066f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066fa:	d805      	bhi.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x380>
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d022      	beq.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x3be>
 8006700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006704:	d00a      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x394>
 8006706:	e01b      	b.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8006708:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800670c:	d01d      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 800670e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006712:	d01c      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8006714:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006718:	d01b      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 800671a:	e011      	b.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	3304      	adds	r3, #4
 8006720:	2101      	movs	r1, #1
 8006722:	4618      	mov	r0, r3
 8006724:	f001 fb04 	bl	8007d30 <RCCEx_PLL2_Config>
 8006728:	4603      	mov	r3, r0
 800672a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800672c:	e012      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	3324      	adds	r3, #36	; 0x24
 8006732:	2101      	movs	r1, #1
 8006734:	4618      	mov	r0, r3
 8006736:	f001 fbad 	bl	8007e94 <RCCEx_PLL3_Config>
 800673a:	4603      	mov	r3, r0
 800673c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800673e:	e009      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	75fb      	strb	r3, [r7, #23]
      break;
 8006744:	e006      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006746:	bf00      	nop
 8006748:	e004      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 800674a:	bf00      	nop
 800674c:	e002      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 800674e:	bf00      	nop
 8006750:	e000      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      break;
 8006752:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006754:	7dfb      	ldrb	r3, [r7, #23]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d109      	bne.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800675a:	4b71      	ldr	r3, [pc, #452]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800675c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800675e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006766:	496e      	ldr	r1, [pc, #440]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006768:	4313      	orrs	r3, r2
 800676a:	650b      	str	r3, [r1, #80]	; 0x50
 800676c:	e001      	b.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800676e:	7dfb      	ldrb	r3, [r7, #23]
 8006770:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d049      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006784:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006788:	d02a      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x458>
 800678a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800678e:	d808      	bhi.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006790:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006794:	d00f      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006796:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800679a:	d015      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800679c:	2b00      	cmp	r3, #0
 800679e:	d021      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 80067a0:	e01b      	b.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x452>
 80067a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067a6:	d01f      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x460>
 80067a8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80067ac:	d01e      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x464>
 80067ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067b2:	d01d      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x468>
 80067b4:	e011      	b.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x452>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	3304      	adds	r3, #4
 80067ba:	2101      	movs	r1, #1
 80067bc:	4618      	mov	r0, r3
 80067be:	f001 fab7 	bl	8007d30 <RCCEx_PLL2_Config>
 80067c2:	4603      	mov	r3, r0
 80067c4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80067c6:	e014      	b.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	3324      	adds	r3, #36	; 0x24
 80067cc:	2101      	movs	r1, #1
 80067ce:	4618      	mov	r0, r3
 80067d0:	f001 fb60 	bl	8007e94 <RCCEx_PLL3_Config>
 80067d4:	4603      	mov	r3, r0
 80067d6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80067d8:	e00b      	b.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	75fb      	strb	r3, [r7, #23]
      break;
 80067de:	e008      	b.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 80067e0:	bf00      	nop
 80067e2:	e006      	b.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 80067e4:	bf00      	nop
 80067e6:	e004      	b.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 80067e8:	bf00      	nop
 80067ea:	e002      	b.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 80067ec:	bf00      	nop
 80067ee:	e000      	b.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
      break;
 80067f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067f2:	7dfb      	ldrb	r3, [r7, #23]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10a      	bne.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x486>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80067f8:	4b49      	ldr	r3, [pc, #292]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80067fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067fc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006806:	4946      	ldr	r1, [pc, #280]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006808:	4313      	orrs	r3, r2
 800680a:	658b      	str	r3, [r1, #88]	; 0x58
 800680c:	e001      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800680e:	7dfb      	ldrb	r3, [r7, #23]
 8006810:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d02d      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006822:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006826:	d005      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8006828:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800682c:	d009      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800682e:	2b00      	cmp	r3, #0
 8006830:	d013      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006832:	e00f      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006834:	4b3a      	ldr	r3, [pc, #232]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006838:	4a39      	ldr	r2, [pc, #228]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800683a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800683e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006840:	e00c      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x4d4>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	3304      	adds	r3, #4
 8006846:	2101      	movs	r1, #1
 8006848:	4618      	mov	r0, r3
 800684a:	f001 fa71 	bl	8007d30 <RCCEx_PLL2_Config>
 800684e:	4603      	mov	r3, r0
 8006850:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006852:	e003      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	75fb      	strb	r3, [r7, #23]
      break;
 8006858:	e000      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      break;
 800685a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800685c:	7dfb      	ldrb	r3, [r7, #23]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d109      	bne.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006862:	4b2f      	ldr	r3, [pc, #188]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006866:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800686e:	492c      	ldr	r1, [pc, #176]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006870:	4313      	orrs	r3, r2
 8006872:	650b      	str	r3, [r1, #80]	; 0x50
 8006874:	e001      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006876:	7dfb      	ldrb	r3, [r7, #23]
 8006878:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d031      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x562>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800688a:	2b03      	cmp	r3, #3
 800688c:	d81a      	bhi.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x53c>
 800688e:	a201      	add	r2, pc, #4	; (adr r2, 8006894 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006894:	080068cb 	.word	0x080068cb
 8006898:	080068a5 	.word	0x080068a5
 800689c:	080068b3 	.word	0x080068b3
 80068a0:	080068cb 	.word	0x080068cb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068a4:	4b1e      	ldr	r3, [pc, #120]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80068a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a8:	4a1d      	ldr	r2, [pc, #116]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80068aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80068b0:	e00c      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x544>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	3304      	adds	r3, #4
 80068b6:	2102      	movs	r1, #2
 80068b8:	4618      	mov	r0, r3
 80068ba:	f001 fa39 	bl	8007d30 <RCCEx_PLL2_Config>
 80068be:	4603      	mov	r3, r0
 80068c0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80068c2:	e003      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x544>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	75fb      	strb	r3, [r7, #23]
      break;
 80068c8:	e000      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x544>
      break;
 80068ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068cc:	7dfb      	ldrb	r3, [r7, #23]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d109      	bne.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80068d2:	4b13      	ldr	r3, [pc, #76]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80068d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068d6:	f023 0203 	bic.w	r2, r3, #3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068de:	4910      	ldr	r1, [pc, #64]	; (8006920 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80068e0:	4313      	orrs	r3, r2
 80068e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80068e4:	e001      	b.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x562>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e6:	7dfb      	ldrb	r3, [r7, #23]
 80068e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f000 808a 	beq.w	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x684>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068f8:	4b0a      	ldr	r3, [pc, #40]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a09      	ldr	r2, [pc, #36]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x59c>)
 80068fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006902:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006904:	f7fa feba 	bl	800167c <HAL_GetTick>
 8006908:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800690a:	e00d      	b.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800690c:	f7fa feb6 	bl	800167c <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	2b64      	cmp	r3, #100	; 0x64
 8006918:	d906      	bls.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        ret = HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	75fb      	strb	r3, [r7, #23]
        break;
 800691e:	e009      	b.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8006920:	58024400 	.word	0x58024400
 8006924:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006928:	4bba      	ldr	r3, [pc, #744]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0x88c>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006930:	2b00      	cmp	r3, #0
 8006932:	d0eb      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x584>
      }
    }

    if(ret == HAL_OK)
 8006934:	7dfb      	ldrb	r3, [r7, #23]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d166      	bne.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800693a:	4bb7      	ldr	r3, [pc, #732]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800693c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006944:	4053      	eors	r3, r2
 8006946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800694a:	2b00      	cmp	r3, #0
 800694c:	d013      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800694e:	4bb2      	ldr	r3, [pc, #712]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006952:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006956:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006958:	4baf      	ldr	r3, [pc, #700]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800695a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800695c:	4aae      	ldr	r2, [pc, #696]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800695e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006962:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006964:	4bac      	ldr	r3, [pc, #688]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006968:	4aab      	ldr	r2, [pc, #684]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800696a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800696e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006970:	4aa9      	ldr	r2, [pc, #676]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800697c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006980:	d115      	bne.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x626>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006982:	f7fa fe7b 	bl	800167c <HAL_GetTick>
 8006986:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006988:	e00b      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800698a:	f7fa fe77 	bl	800167c <HAL_GetTick>
 800698e:	4602      	mov	r2, r0
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	f241 3288 	movw	r2, #5000	; 0x1388
 8006998:	4293      	cmp	r3, r2
 800699a:	d902      	bls.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
          {
            ret = HAL_TIMEOUT;
 800699c:	2303      	movs	r3, #3
 800699e:	75fb      	strb	r3, [r7, #23]
            break;
 80069a0:	e005      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x626>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069a2:	4b9d      	ldr	r3, [pc, #628]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80069a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a6:	f003 0302 	and.w	r3, r3, #2
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d0ed      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x602>
          }
        }
      }

      if(ret == HAL_OK)
 80069ae:	7dfb      	ldrb	r3, [r7, #23]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d126      	bne.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069c2:	d10d      	bne.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x658>
 80069c4:	4b94      	ldr	r3, [pc, #592]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069d2:	0919      	lsrs	r1, r3, #4
 80069d4:	4b91      	ldr	r3, [pc, #580]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x894>)
 80069d6:	400b      	ands	r3, r1
 80069d8:	498f      	ldr	r1, [pc, #572]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80069da:	4313      	orrs	r3, r2
 80069dc:	610b      	str	r3, [r1, #16]
 80069de:	e005      	b.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x664>
 80069e0:	4b8d      	ldr	r3, [pc, #564]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	4a8c      	ldr	r2, [pc, #560]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80069e6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80069ea:	6113      	str	r3, [r2, #16]
 80069ec:	4b8a      	ldr	r3, [pc, #552]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80069ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069fa:	4987      	ldr	r1, [pc, #540]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	670b      	str	r3, [r1, #112]	; 0x70
 8006a00:	e004      	b.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x684>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a02:	7dfb      	ldrb	r3, [r7, #23]
 8006a04:	75bb      	strb	r3, [r7, #22]
 8006a06:	e001      	b.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x684>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a08:	7dfb      	ldrb	r3, [r7, #23]
 8006a0a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 0301 	and.w	r3, r3, #1
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d07f      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x790>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a1e:	2b28      	cmp	r3, #40	; 0x28
 8006a20:	d866      	bhi.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x768>
 8006a22:	a201      	add	r2, pc, #4	; (adr r2, 8006a28 <HAL_RCCEx_PeriphCLKConfig+0x6a0>)
 8006a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a28:	08006af7 	.word	0x08006af7
 8006a2c:	08006af1 	.word	0x08006af1
 8006a30:	08006af1 	.word	0x08006af1
 8006a34:	08006af1 	.word	0x08006af1
 8006a38:	08006af1 	.word	0x08006af1
 8006a3c:	08006af1 	.word	0x08006af1
 8006a40:	08006af1 	.word	0x08006af1
 8006a44:	08006af1 	.word	0x08006af1
 8006a48:	08006acd 	.word	0x08006acd
 8006a4c:	08006af1 	.word	0x08006af1
 8006a50:	08006af1 	.word	0x08006af1
 8006a54:	08006af1 	.word	0x08006af1
 8006a58:	08006af1 	.word	0x08006af1
 8006a5c:	08006af1 	.word	0x08006af1
 8006a60:	08006af1 	.word	0x08006af1
 8006a64:	08006af1 	.word	0x08006af1
 8006a68:	08006adf 	.word	0x08006adf
 8006a6c:	08006af1 	.word	0x08006af1
 8006a70:	08006af1 	.word	0x08006af1
 8006a74:	08006af1 	.word	0x08006af1
 8006a78:	08006af1 	.word	0x08006af1
 8006a7c:	08006af1 	.word	0x08006af1
 8006a80:	08006af1 	.word	0x08006af1
 8006a84:	08006af1 	.word	0x08006af1
 8006a88:	08006af7 	.word	0x08006af7
 8006a8c:	08006af1 	.word	0x08006af1
 8006a90:	08006af1 	.word	0x08006af1
 8006a94:	08006af1 	.word	0x08006af1
 8006a98:	08006af1 	.word	0x08006af1
 8006a9c:	08006af1 	.word	0x08006af1
 8006aa0:	08006af1 	.word	0x08006af1
 8006aa4:	08006af1 	.word	0x08006af1
 8006aa8:	08006af7 	.word	0x08006af7
 8006aac:	08006af1 	.word	0x08006af1
 8006ab0:	08006af1 	.word	0x08006af1
 8006ab4:	08006af1 	.word	0x08006af1
 8006ab8:	08006af1 	.word	0x08006af1
 8006abc:	08006af1 	.word	0x08006af1
 8006ac0:	08006af1 	.word	0x08006af1
 8006ac4:	08006af1 	.word	0x08006af1
 8006ac8:	08006af7 	.word	0x08006af7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	3304      	adds	r3, #4
 8006ad0:	2101      	movs	r1, #1
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f001 f92c 	bl	8007d30 <RCCEx_PLL2_Config>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006adc:	e00c      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x770>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	3324      	adds	r3, #36	; 0x24
 8006ae2:	2101      	movs	r1, #1
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f001 f9d5 	bl	8007e94 <RCCEx_PLL3_Config>
 8006aea:	4603      	mov	r3, r0
 8006aec:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006aee:	e003      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x770>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	75fb      	strb	r3, [r7, #23]
      break;
 8006af4:	e000      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x770>
      break;
 8006af6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006af8:	7dfb      	ldrb	r3, [r7, #23]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10a      	bne.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x78c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006afe:	4b46      	ldr	r3, [pc, #280]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b02:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b0c:	4942      	ldr	r1, [pc, #264]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	654b      	str	r3, [r1, #84]	; 0x54
 8006b12:	e001      	b.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x790>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b14:	7dfb      	ldrb	r3, [r7, #23]
 8006b16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0302 	and.w	r3, r3, #2
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d038      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x80e>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b28:	2b05      	cmp	r3, #5
 8006b2a:	d821      	bhi.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
 8006b2c:	a201      	add	r2, pc, #4	; (adr r2, 8006b34 <HAL_RCCEx_PeriphCLKConfig+0x7ac>)
 8006b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b32:	bf00      	nop
 8006b34:	08006b77 	.word	0x08006b77
 8006b38:	08006b4d 	.word	0x08006b4d
 8006b3c:	08006b5f 	.word	0x08006b5f
 8006b40:	08006b77 	.word	0x08006b77
 8006b44:	08006b77 	.word	0x08006b77
 8006b48:	08006b77 	.word	0x08006b77
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	3304      	adds	r3, #4
 8006b50:	2101      	movs	r1, #1
 8006b52:	4618      	mov	r0, r3
 8006b54:	f001 f8ec 	bl	8007d30 <RCCEx_PLL2_Config>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006b5c:	e00c      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x7f0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	3324      	adds	r3, #36	; 0x24
 8006b62:	2101      	movs	r1, #1
 8006b64:	4618      	mov	r0, r3
 8006b66:	f001 f995 	bl	8007e94 <RCCEx_PLL3_Config>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006b6e:	e003      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	75fb      	strb	r3, [r7, #23]
      break;
 8006b74:	e000      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      break;
 8006b76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b78:	7dfb      	ldrb	r3, [r7, #23]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d109      	bne.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006b7e:	4b26      	ldr	r3, [pc, #152]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b82:	f023 0207 	bic.w	r2, r3, #7
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b8a:	4923      	ldr	r1, [pc, #140]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	654b      	str	r3, [r1, #84]	; 0x54
 8006b90:	e001      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x80e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b92:	7dfb      	ldrb	r3, [r7, #23]
 8006b94:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 0304 	and.w	r3, r3, #4
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d040      	beq.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x89c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ba8:	2b05      	cmp	r3, #5
 8006baa:	d821      	bhi.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x868>
 8006bac:	a201      	add	r2, pc, #4	; (adr r2, 8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 8006bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb2:	bf00      	nop
 8006bb4:	08006bf7 	.word	0x08006bf7
 8006bb8:	08006bcd 	.word	0x08006bcd
 8006bbc:	08006bdf 	.word	0x08006bdf
 8006bc0:	08006bf7 	.word	0x08006bf7
 8006bc4:	08006bf7 	.word	0x08006bf7
 8006bc8:	08006bf7 	.word	0x08006bf7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	3304      	adds	r3, #4
 8006bd0:	2101      	movs	r1, #1
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f001 f8ac 	bl	8007d30 <RCCEx_PLL2_Config>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006bdc:	e00c      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x870>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	3324      	adds	r3, #36	; 0x24
 8006be2:	2101      	movs	r1, #1
 8006be4:	4618      	mov	r0, r3
 8006be6:	f001 f955 	bl	8007e94 <RCCEx_PLL3_Config>
 8006bea:	4603      	mov	r3, r0
 8006bec:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006bee:	e003      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x870>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	75fb      	strb	r3, [r7, #23]
      break;
 8006bf4:	e000      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x870>
      break;
 8006bf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bf8:	7dfb      	ldrb	r3, [r7, #23]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d110      	bne.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x898>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006bfe:	4b06      	ldr	r3, [pc, #24]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c02:	f023 0207 	bic.w	r2, r3, #7
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c0c:	4902      	ldr	r1, [pc, #8]	; (8006c18 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	658b      	str	r3, [r1, #88]	; 0x58
 8006c12:	e007      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 8006c14:	58024800 	.word	0x58024800
 8006c18:	58024400 	.word	0x58024400
 8006c1c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c20:	7dfb      	ldrb	r3, [r7, #23]
 8006c22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0320 	and.w	r3, r3, #32
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d044      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c3a:	d01b      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8006c3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c40:	d805      	bhi.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d022      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x904>
 8006c46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c4a:	d00a      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x8da>
 8006c4c:	e01b      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8006c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c52:	d01d      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x908>
 8006c54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c58:	d01c      	beq.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x90c>
 8006c5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c5e:	d01b      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8006c60:	e011      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	3304      	adds	r3, #4
 8006c66:	2100      	movs	r1, #0
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f001 f861 	bl	8007d30 <RCCEx_PLL2_Config>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006c72:	e012      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x912>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	3324      	adds	r3, #36	; 0x24
 8006c78:	2102      	movs	r1, #2
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f001 f90a 	bl	8007e94 <RCCEx_PLL3_Config>
 8006c80:	4603      	mov	r3, r0
 8006c82:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006c84:	e009      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	75fb      	strb	r3, [r7, #23]
      break;
 8006c8a:	e006      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8006c8c:	bf00      	nop
 8006c8e:	e004      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8006c90:	bf00      	nop
 8006c92:	e002      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8006c94:	bf00      	nop
 8006c96:	e000      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8006c98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c9a:	7dfb      	ldrb	r3, [r7, #23]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d10a      	bne.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006ca0:	4bb3      	ldr	r3, [pc, #716]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ca4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cae:	49b0      	ldr	r1, [pc, #704]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	654b      	str	r3, [r1, #84]	; 0x54
 8006cb4:	e001      	b.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x932>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb6:	7dfb      	ldrb	r3, [r7, #23]
 8006cb8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d044      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006ccc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cd0:	d01b      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x982>
 8006cd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cd6:	d805      	bhi.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d022      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x99a>
 8006cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ce0:	d00a      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x970>
 8006ce2:	e01b      	b.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x994>
 8006ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ce8:	d01d      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x99e>
 8006cea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006cee:	d01c      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 8006cf0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cf4:	d01b      	beq.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8006cf6:	e011      	b.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x994>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	3304      	adds	r3, #4
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f001 f816 	bl	8007d30 <RCCEx_PLL2_Config>
 8006d04:	4603      	mov	r3, r0
 8006d06:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006d08:	e012      	b.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x9a8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	3324      	adds	r3, #36	; 0x24
 8006d0e:	2102      	movs	r1, #2
 8006d10:	4618      	mov	r0, r3
 8006d12:	f001 f8bf 	bl	8007e94 <RCCEx_PLL3_Config>
 8006d16:	4603      	mov	r3, r0
 8006d18:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006d1a:	e009      	b.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	75fb      	strb	r3, [r7, #23]
      break;
 8006d20:	e006      	b.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 8006d22:	bf00      	nop
 8006d24:	e004      	b.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 8006d26:	bf00      	nop
 8006d28:	e002      	b.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 8006d2a:	bf00      	nop
 8006d2c:	e000      	b.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      break;
 8006d2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d30:	7dfb      	ldrb	r3, [r7, #23]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10a      	bne.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x9c4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d36:	4b8e      	ldr	r3, [pc, #568]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d3a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d44:	498a      	ldr	r1, [pc, #552]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006d46:	4313      	orrs	r3, r2
 8006d48:	658b      	str	r3, [r1, #88]	; 0x58
 8006d4a:	e001      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d4c:	7dfb      	ldrb	r3, [r7, #23]
 8006d4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d044      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006d62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d66:	d01b      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
 8006d68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d6c:	d805      	bhi.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d022      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006d72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d76:	d00a      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8006d78:	e01b      	b.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8006d7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d7e:	d01d      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8006d80:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006d84:	d01c      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xa38>
 8006d86:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006d8a:	d01b      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 8006d8c:	e011      	b.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	3304      	adds	r3, #4
 8006d92:	2100      	movs	r1, #0
 8006d94:	4618      	mov	r0, r3
 8006d96:	f000 ffcb 	bl	8007d30 <RCCEx_PLL2_Config>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006d9e:	e012      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	3324      	adds	r3, #36	; 0x24
 8006da4:	2102      	movs	r1, #2
 8006da6:	4618      	mov	r0, r3
 8006da8:	f001 f874 	bl	8007e94 <RCCEx_PLL3_Config>
 8006dac:	4603      	mov	r3, r0
 8006dae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006db0:	e009      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	75fb      	strb	r3, [r7, #23]
      break;
 8006db6:	e006      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 8006db8:	bf00      	nop
 8006dba:	e004      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 8006dbc:	bf00      	nop
 8006dbe:	e002      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 8006dc0:	bf00      	nop
 8006dc2:	e000      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      break;
 8006dc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dc6:	7dfb      	ldrb	r3, [r7, #23]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d10a      	bne.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006dcc:	4b68      	ldr	r3, [pc, #416]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dd0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006dda:	4965      	ldr	r1, [pc, #404]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	658b      	str	r3, [r1, #88]	; 0x58
 8006de0:	e001      	b.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006de2:	7dfb      	ldrb	r3, [r7, #23]
 8006de4:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 0308 	and.w	r3, r3, #8
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d01a      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dfc:	d10a      	bne.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	3324      	adds	r3, #36	; 0x24
 8006e02:	2102      	movs	r1, #2
 8006e04:	4618      	mov	r0, r3
 8006e06:	f001 f845 	bl	8007e94 <RCCEx_PLL3_Config>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d001      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
        {
          status = HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006e14:	4b56      	ldr	r3, [pc, #344]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e18:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e22:	4953      	ldr	r1, [pc, #332]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006e24:	4313      	orrs	r3, r2
 8006e26:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 0310 	and.w	r3, r3, #16
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d01a      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0xae2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e3e:	d10a      	bne.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	3324      	adds	r3, #36	; 0x24
 8006e44:	2102      	movs	r1, #2
 8006e46:	4618      	mov	r0, r3
 8006e48:	f001 f824 	bl	8007e94 <RCCEx_PLL3_Config>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d001      	beq.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0xace>
      {
        status = HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e56:	4b46      	ldr	r3, [pc, #280]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e64:	4942      	ldr	r1, [pc, #264]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d030      	beq.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e80:	d00d      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0xb16>
 8006e82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e86:	d016      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d111      	bne.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	3304      	adds	r3, #4
 8006e90:	2100      	movs	r1, #0
 8006e92:	4618      	mov	r0, r3
 8006e94:	f000 ff4c 	bl	8007d30 <RCCEx_PLL2_Config>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006e9c:	e00c      	b.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	3324      	adds	r3, #36	; 0x24
 8006ea2:	2102      	movs	r1, #2
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f000 fff5 	bl	8007e94 <RCCEx_PLL3_Config>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006eae:	e003      	b.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	75fb      	strb	r3, [r7, #23]
      break;
 8006eb4:	e000      	b.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006eb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006eb8:	7dfb      	ldrb	r3, [r7, #23]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10a      	bne.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ebe:	4b2c      	ldr	r3, [pc, #176]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ec2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006ecc:	4928      	ldr	r1, [pc, #160]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	658b      	str	r3, [r1, #88]	; 0x58
 8006ed2:	e001      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ed4:	7dfb      	ldrb	r3, [r7, #23]
 8006ed6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d02f      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006eea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006eee:	d00c      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006ef0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ef4:	d015      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xb9a>
 8006ef6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006efa:	d10f      	bne.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0xb94>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006efc:	4b1c      	ldr	r3, [pc, #112]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f00:	4a1b      	ldr	r2, [pc, #108]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006f08:	e00c      	b.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0xb9c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	3324      	adds	r3, #36	; 0x24
 8006f0e:	2101      	movs	r1, #1
 8006f10:	4618      	mov	r0, r3
 8006f12:	f000 ffbf 	bl	8007e94 <RCCEx_PLL3_Config>
 8006f16:	4603      	mov	r3, r0
 8006f18:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006f1a:	e003      	b.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	75fb      	strb	r3, [r7, #23]
      break;
 8006f20:	e000      	b.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      break;
 8006f22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f24:	7dfb      	ldrb	r3, [r7, #23]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10a      	bne.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f2a:	4b11      	ldr	r3, [pc, #68]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f38:	490d      	ldr	r1, [pc, #52]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	654b      	str	r3, [r1, #84]	; 0x54
 8006f3e:	e001      	b.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f40:	7dfb      	ldrb	r3, [r7, #23]
 8006f42:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d02c      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xc22>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d003      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8006f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f5c:	d00a      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8006f5e:	e012      	b.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f60:	4b03      	ldr	r3, [pc, #12]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f64:	4a02      	ldr	r2, [pc, #8]	; (8006f70 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8006f66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006f6c:	e00e      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0xc04>
 8006f6e:	bf00      	nop
 8006f70:	58024400 	.word	0x58024400

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	3304      	adds	r3, #4
 8006f78:	2102      	movs	r1, #2
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f000 fed8 	bl	8007d30 <RCCEx_PLL2_Config>
 8006f80:	4603      	mov	r3, r0
 8006f82:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006f84:	e002      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0xc04>

    default:
      ret = HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	75fb      	strb	r3, [r7, #23]
      break;
 8006f8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f8c:	7dfb      	ldrb	r3, [r7, #23]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d109      	bne.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006f92:	4b56      	ldr	r3, [pc, #344]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8006f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f96:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f9e:	4953      	ldr	r1, [pc, #332]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006fa4:	e001      	b.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xc22>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fa6:	7dfb      	ldrb	r3, [r7, #23]
 8006fa8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00a      	beq.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0xc44>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	3324      	adds	r3, #36	; 0x24
 8006fba:	2102      	movs	r1, #2
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f000 ff69 	bl	8007e94 <RCCEx_PLL3_Config>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d001      	beq.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0xc44>
    {
      status=HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d031      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fe2:	d00c      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8006fe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fe8:	d802      	bhi.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d011      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0xc8a>
 8006fee:	e00d      	b.n	800700c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8006ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ff4:	d00f      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0xc8e>
 8006ff6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ffa:	d00e      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8006ffc:	e006      	b.n	800700c <HAL_RCCEx_PeriphCLKConfig+0xc84>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ffe:	4b3b      	ldr	r3, [pc, #236]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007002:	4a3a      	ldr	r2, [pc, #232]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007008:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800700a:	e007      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0xc94>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	75fb      	strb	r3, [r7, #23]
      break;
 8007010:	e004      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 8007012:	bf00      	nop
 8007014:	e002      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 8007016:	bf00      	nop
 8007018:	e000      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0xc94>
      break;
 800701a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800701c:	7dfb      	ldrb	r3, [r7, #23]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d10a      	bne.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007022:	4b32      	ldr	r3, [pc, #200]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007026:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007030:	492e      	ldr	r1, [pc, #184]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007032:	4313      	orrs	r3, r2
 8007034:	654b      	str	r3, [r1, #84]	; 0x54
 8007036:	e001      	b.n	800703c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007038:	7dfb      	ldrb	r3, [r7, #23]
 800703a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d008      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007048:	4b28      	ldr	r3, [pc, #160]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 800704a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800704c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007054:	4925      	ldr	r1, [pc, #148]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007056:	4313      	orrs	r3, r2
 8007058:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d008      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007066:	4b21      	ldr	r3, [pc, #132]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800706a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007072:	491e      	ldr	r1, [pc, #120]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007074:	4313      	orrs	r3, r2
 8007076:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007080:	2b00      	cmp	r3, #0
 8007082:	d008      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007084:	4b19      	ldr	r3, [pc, #100]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007088:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007090:	4916      	ldr	r1, [pc, #88]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 8007092:	4313      	orrs	r3, r2
 8007094:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00d      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0xd36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80070a2:	4b12      	ldr	r3, [pc, #72]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	4a11      	ldr	r2, [pc, #68]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80070a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80070ac:	6113      	str	r3, [r2, #16]
 80070ae:	4b0f      	ldr	r3, [pc, #60]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80070b0:	691a      	ldr	r2, [r3, #16]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80070b8:	490c      	ldr	r1, [pc, #48]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80070ba:	4313      	orrs	r3, r2
 80070bc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	da08      	bge.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80070c6:	4b09      	ldr	r3, [pc, #36]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80070c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070d2:	4906      	ldr	r1, [pc, #24]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xd64>)
 80070d4:	4313      	orrs	r3, r2
 80070d6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80070d8:	7dbb      	ldrb	r3, [r7, #22]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d101      	bne.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    return HAL_OK;
 80070de:	2300      	movs	r3, #0
 80070e0:	e000      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
  }
  return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3718      	adds	r7, #24
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	58024400 	.word	0x58024400

080070f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b090      	sub	sp, #64	; 0x40
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070fe:	d150      	bne.n	80071a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007100:	4ba1      	ldr	r3, [pc, #644]	; (8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007104:	f003 0307 	and.w	r3, r3, #7
 8007108:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800710a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710c:	2b04      	cmp	r3, #4
 800710e:	d844      	bhi.n	800719a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8007110:	a201      	add	r2, pc, #4	; (adr r2, 8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007116:	bf00      	nop
 8007118:	0800712d 	.word	0x0800712d
 800711c:	0800713d 	.word	0x0800713d
 8007120:	0800714d 	.word	0x0800714d
 8007124:	08007195 	.word	0x08007195
 8007128:	0800715d 	.word	0x0800715d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800712c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007130:	4618      	mov	r0, r3
 8007132:	f000 fcb1 	bl	8007a98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007138:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800713a:	e1ef      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800713c:	f107 0318 	add.w	r3, r7, #24
 8007140:	4618      	mov	r0, r3
 8007142:	f000 fa11 	bl	8007568 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800714a:	e1e7      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800714c:	f107 030c 	add.w	r3, r7, #12
 8007150:	4618      	mov	r0, r3
 8007152:	f000 fb55 	bl	8007800 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800715a:	e1df      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800715c:	4b8a      	ldr	r3, [pc, #552]	; (8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800715e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007160:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007164:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007168:	2b00      	cmp	r3, #0
 800716a:	d102      	bne.n	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800716c:	4b87      	ldr	r3, [pc, #540]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800716e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007170:	e1d4      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007174:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007178:	d102      	bne.n	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800717a:	4b85      	ldr	r3, [pc, #532]	; (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800717c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800717e:	e1cd      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007182:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007186:	d102      	bne.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8007188:	4b82      	ldr	r3, [pc, #520]	; (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800718a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800718c:	e1c6      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 800718e:	2300      	movs	r3, #0
 8007190:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007192:	e1c3      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007194:	4b80      	ldr	r3, [pc, #512]	; (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007196:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007198:	e1c0      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      default :
        {
          frequency = 0;
 800719a:	2300      	movs	r3, #0
 800719c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800719e:	bf00      	nop
 80071a0:	e1bc      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071a8:	d14f      	bne.n	800724a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 80071aa:	4b77      	ldr	r3, [pc, #476]	; (8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80071ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ae:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80071b2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80071b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b6:	2b80      	cmp	r3, #128	; 0x80
 80071b8:	d01c      	beq.n	80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80071ba:	2b80      	cmp	r3, #128	; 0x80
 80071bc:	d804      	bhi.n	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d008      	beq.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 80071c2:	2b40      	cmp	r3, #64	; 0x40
 80071c4:	d00e      	beq.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80071c6:	e03c      	b.n	8007242 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 80071c8:	2bc0      	cmp	r3, #192	; 0xc0
 80071ca:	d037      	beq.n	800723c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80071cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071d0:	d018      	beq.n	8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 80071d2:	e036      	b.n	8007242 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071d8:	4618      	mov	r0, r3
 80071da:	f000 fc5d 	bl	8007a98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071e2:	e19b      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071e4:	f107 0318 	add.w	r3, r7, #24
 80071e8:	4618      	mov	r0, r3
 80071ea:	f000 f9bd 	bl	8007568 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071f2:	e193      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071f4:	f107 030c 	add.w	r3, r7, #12
 80071f8:	4618      	mov	r0, r3
 80071fa:	f000 fb01 	bl	8007800 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007202:	e18b      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007204:	4b60      	ldr	r3, [pc, #384]	; (8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007208:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800720c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800720e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007210:	2b00      	cmp	r3, #0
 8007212:	d102      	bne.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007214:	4b5d      	ldr	r3, [pc, #372]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007216:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007218:	e180      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800721a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800721c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007220:	d102      	bne.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8007222:	4b5b      	ldr	r3, [pc, #364]	; (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007224:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007226:	e179      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800722a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800722e:	d102      	bne.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8007230:	4b58      	ldr	r3, [pc, #352]	; (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007232:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007234:	e172      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 8007236:	2300      	movs	r3, #0
 8007238:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800723a:	e16f      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800723c:	4b56      	ldr	r3, [pc, #344]	; (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800723e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007240:	e16c      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 8007242:	2300      	movs	r3, #0
 8007244:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007246:	bf00      	nop
 8007248:	e168      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007250:	d153      	bne.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8007252:	4b4d      	ldr	r3, [pc, #308]	; (8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007256:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800725a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800725c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007262:	d01f      	beq.n	80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8007264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007268:	d805      	bhi.n	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00a      	beq.n	8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800726e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007272:	d00f      	beq.n	8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8007274:	e03d      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8007276:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800727a:	d037      	beq.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800727c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007280:	d018      	beq.n	80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8007282:	e036      	b.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007288:	4618      	mov	r0, r3
 800728a:	f000 fc05 	bl	8007a98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800728e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007290:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007292:	e143      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007294:	f107 0318 	add.w	r3, r7, #24
 8007298:	4618      	mov	r0, r3
 800729a:	f000 f965 	bl	8007568 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072a2:	e13b      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072a4:	f107 030c 	add.w	r3, r7, #12
 80072a8:	4618      	mov	r0, r3
 80072aa:	f000 faa9 	bl	8007800 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072b2:	e133      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80072b4:	4b34      	ldr	r3, [pc, #208]	; (8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80072b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80072bc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80072be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d102      	bne.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80072c4:	4b31      	ldr	r3, [pc, #196]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80072c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }
          break;
 80072c8:	e128      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80072ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072d0:	d102      	bne.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 80072d2:	4b2f      	ldr	r3, [pc, #188]	; (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80072d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072d6:	e121      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80072d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072de:	d102      	bne.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 80072e0:	4b2c      	ldr	r3, [pc, #176]	; (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80072e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072e4:	e11a      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 80072e6:	2300      	movs	r3, #0
 80072e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072ea:	e117      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80072ec:	4b2a      	ldr	r3, [pc, #168]	; (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80072ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072f0:	e114      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 80072f2:	2300      	movs	r3, #0
 80072f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072f6:	bf00      	nop
 80072f8:	e110      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007300:	d15d      	bne.n	80073be <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007302:	4b21      	ldr	r3, [pc, #132]	; (8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007306:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800730a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800730c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007312:	d01f      	beq.n	8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007318:	d805      	bhi.n	8007326 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00a      	beq.n	8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800731e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007322:	d00f      	beq.n	8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8007324:	e047      	b.n	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8007326:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800732a:	d041      	beq.n	80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800732c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007330:	d018      	beq.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8007332:	e040      	b.n	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007338:	4618      	mov	r0, r3
 800733a:	f000 fbad 	bl	8007a98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800733e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007340:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007342:	e0eb      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007344:	f107 0318 	add.w	r3, r7, #24
 8007348:	4618      	mov	r0, r3
 800734a:	f000 f90d 	bl	8007568 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007352:	e0e3      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007354:	f107 030c 	add.w	r3, r7, #12
 8007358:	4618      	mov	r0, r3
 800735a:	f000 fa51 	bl	8007800 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007362:	e0db      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007364:	4b08      	ldr	r3, [pc, #32]	; (8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007368:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800736c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800736e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007370:	2b00      	cmp	r3, #0
 8007372:	d102      	bne.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007374:	4b05      	ldr	r3, [pc, #20]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007376:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007378:	e0d0      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800737a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800737c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007380:	d10c      	bne.n	800739c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8007382:	4b03      	ldr	r3, [pc, #12]	; (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007384:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007386:	e0c9      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
 8007388:	58024400 	.word	0x58024400
 800738c:	03d09000 	.word	0x03d09000
 8007390:	003d0900 	.word	0x003d0900
 8007394:	007a1200 	.word	0x007a1200
 8007398:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800739c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800739e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073a2:	d102      	bne.n	80073aa <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 80073a4:	4b60      	ldr	r3, [pc, #384]	; (8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80073a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073a8:	e0b8      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 80073aa:	2300      	movs	r3, #0
 80073ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073ae:	e0b5      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80073b0:	4b5e      	ldr	r3, [pc, #376]	; (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 80073b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073b4:	e0b2      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      default :
        {
          frequency = 0;
 80073b6:	2300      	movs	r3, #0
 80073b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073ba:	bf00      	nop
 80073bc:	e0ae      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80073c4:	d13d      	bne.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80073c6:	4b5a      	ldr	r3, [pc, #360]	; (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 80073c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80073ce:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80073d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073d6:	d00c      	beq.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 80073d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073dc:	d011      	beq.n	8007402 <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d12b      	bne.n	800743a <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073e2:	f107 0318 	add.w	r3, r7, #24
 80073e6:	4618      	mov	r0, r3
 80073e8:	f000 f8be 	bl	8007568 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073f0:	e094      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073f2:	f107 030c 	add.w	r3, r7, #12
 80073f6:	4618      	mov	r0, r3
 80073f8:	f000 fa02 	bl	8007800 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007400:	e08c      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007402:	4b4b      	ldr	r3, [pc, #300]	; (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8007404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007406:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800740a:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800740c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800740e:	2b00      	cmp	r3, #0
 8007410:	d102      	bne.n	8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007412:	4b48      	ldr	r3, [pc, #288]	; (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x444>)
 8007414:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007416:	e081      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800741a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800741e:	d102      	bne.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x336>
            frequency = CSI_VALUE;
 8007420:	4b45      	ldr	r3, [pc, #276]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x448>)
 8007422:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007424:	e07a      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800742c:	d102      	bne.n	8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
            frequency = HSE_VALUE;
 800742e:	4b3e      	ldr	r3, [pc, #248]	; (8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8007430:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007432:	e073      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
            frequency = 0;
 8007434:	2300      	movs	r3, #0
 8007436:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007438:	e070      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 800743a:	2300      	movs	r3, #0
 800743c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800743e:	bf00      	nop
 8007440:	e06c      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007448:	d11f      	bne.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800744a:	4b39      	ldr	r3, [pc, #228]	; (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 800744c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800744e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007452:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007456:	2b00      	cmp	r3, #0
 8007458:	d003      	beq.n	8007462 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800745a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800745e:	d008      	beq.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
 8007460:	e00f      	b.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x392>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007466:	4618      	mov	r0, r3
 8007468:	f000 fb16 	bl	8007a98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800746c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007470:	e054      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007472:	f107 0318 	add.w	r3, r7, #24
 8007476:	4618      	mov	r0, r3
 8007478:	f000 f876 	bl	8007568 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800747c:	6a3b      	ldr	r3, [r7, #32]
 800747e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007480:	e04c      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }

      default :
        {
          frequency = 0;
 8007482:	2300      	movs	r3, #0
 8007484:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007486:	bf00      	nop
 8007488:	e048      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007490:	d142      	bne.n	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007492:	4b27      	ldr	r3, [pc, #156]	; (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8007494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007496:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800749a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800749c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80074a2:	d029      	beq.n	80074f8 <HAL_RCCEx_GetPeriphCLKFreq+0x408>
 80074a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80074a8:	d808      	bhi.n	80074bc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80074aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074ae:	d013      	beq.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80074b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074b4:	d018      	beq.n	80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00a      	beq.n	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 80074ba:	e029      	b.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 80074bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074c0:	d020      	beq.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 80074c2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80074c6:	d020      	beq.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 80074c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074cc:	d017      	beq.n	80074fe <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 80074ce:	e01f      	b.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80074d0:	f000 f834 	bl	800753c <HAL_RCCEx_GetD3PCLK1Freq>
 80074d4:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80074d6:	e021      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074d8:	f107 0318 	add.w	r3, r7, #24
 80074dc:	4618      	mov	r0, r3
 80074de:	f000 f843 	bl	8007568 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074e6:	e019      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074e8:	f107 030c 	add.w	r3, r7, #12
 80074ec:	4618      	mov	r0, r3
 80074ee:	f000 f987 	bl	8007800 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074f6:	e011      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 80074f8:	4b0e      	ldr	r3, [pc, #56]	; (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x444>)
 80074fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074fc:	e00e      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 80074fe:	4b0e      	ldr	r3, [pc, #56]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x448>)
 8007500:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007502:	e00b      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8007504:	4b08      	ldr	r3, [pc, #32]	; (8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8007506:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007508:	e008      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800750a:	4b08      	ldr	r3, [pc, #32]	; (800752c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 800750c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800750e:	e005      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007510:	2300      	movs	r3, #0
 8007512:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007514:	bf00      	nop
 8007516:	e001      	b.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        }
      }
    }
  else
    {
      frequency = 0;
 8007518:	2300      	movs	r3, #0
 800751a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800751c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800751e:	4618      	mov	r0, r3
 8007520:	3740      	adds	r7, #64	; 0x40
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	007a1200 	.word	0x007a1200
 800752c:	00bb8000 	.word	0x00bb8000
 8007530:	58024400 	.word	0x58024400
 8007534:	03d09000 	.word	0x03d09000
 8007538:	003d0900 	.word	0x003d0900

0800753c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8007540:	f7fe fec6 	bl	80062d0 <HAL_RCC_GetHCLKFreq>
 8007544:	4601      	mov	r1, r0
 8007546:	4b06      	ldr	r3, [pc, #24]	; (8007560 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007548:	6a1b      	ldr	r3, [r3, #32]
 800754a:	091b      	lsrs	r3, r3, #4
 800754c:	f003 0307 	and.w	r3, r3, #7
 8007550:	4a04      	ldr	r2, [pc, #16]	; (8007564 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007552:	5cd3      	ldrb	r3, [r2, r3]
 8007554:	f003 031f 	and.w	r3, r3, #31
 8007558:	fa21 f303 	lsr.w	r3, r1, r3
#endif
}
 800755c:	4618      	mov	r0, r3
 800755e:	bd80      	pop	{r7, pc}
 8007560:	58024400 	.word	0x58024400
 8007564:	0800a348 	.word	0x0800a348

08007568 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007568:	b480      	push	{r7}
 800756a:	b089      	sub	sp, #36	; 0x24
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007570:	4b9d      	ldr	r3, [pc, #628]	; (80077e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007574:	f003 0303 	and.w	r3, r3, #3
 8007578:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800757a:	4b9b      	ldr	r3, [pc, #620]	; (80077e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800757c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757e:	0b1b      	lsrs	r3, r3, #12
 8007580:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007584:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007586:	4b98      	ldr	r3, [pc, #608]	; (80077e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758a:	091b      	lsrs	r3, r3, #4
 800758c:	f003 0301 	and.w	r3, r3, #1
 8007590:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007592:	4b95      	ldr	r3, [pc, #596]	; (80077e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007596:	08db      	lsrs	r3, r3, #3
 8007598:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800759c:	693a      	ldr	r2, [r7, #16]
 800759e:	fb02 f303 	mul.w	r3, r2, r3
 80075a2:	ee07 3a90 	vmov	s15, r3
 80075a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	f000 810a 	beq.w	80077ca <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d05a      	beq.n	8007672 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d302      	bcc.n	80075c6 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	d078      	beq.n	80076b6 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80075c4:	e099      	b.n	80076fa <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075c6:	4b88      	ldr	r3, [pc, #544]	; (80077e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f003 0320 	and.w	r3, r3, #32
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d02d      	beq.n	800762e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80075d2:	4b85      	ldr	r3, [pc, #532]	; (80077e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	08db      	lsrs	r3, r3, #3
 80075d8:	f003 0303 	and.w	r3, r3, #3
 80075dc:	4a83      	ldr	r2, [pc, #524]	; (80077ec <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80075de:	fa22 f303 	lsr.w	r3, r2, r3
 80075e2:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	ee07 3a90 	vmov	s15, r3
 80075ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	ee07 3a90 	vmov	s15, r3
 80075f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075fc:	4b7a      	ldr	r3, [pc, #488]	; (80077e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80075fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007604:	ee07 3a90 	vmov	s15, r3
 8007608:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800760c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007610:	eddf 5a77 	vldr	s11, [pc, #476]	; 80077f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007614:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007618:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800761c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007620:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007628:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800762c:	e087      	b.n	800773e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	ee07 3a90 	vmov	s15, r3
 8007634:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007638:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80077f4 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800763c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007640:	4b69      	ldr	r3, [pc, #420]	; (80077e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007648:	ee07 3a90 	vmov	s15, r3
 800764c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007650:	ed97 6a03 	vldr	s12, [r7, #12]
 8007654:	eddf 5a66 	vldr	s11, [pc, #408]	; 80077f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007658:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800765c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007660:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007664:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800766c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007670:	e065      	b.n	800773e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	ee07 3a90 	vmov	s15, r3
 8007678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800767c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80077f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007680:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007684:	4b58      	ldr	r3, [pc, #352]	; (80077e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800768c:	ee07 3a90 	vmov	s15, r3
 8007690:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007694:	ed97 6a03 	vldr	s12, [r7, #12]
 8007698:	eddf 5a55 	vldr	s11, [pc, #340]	; 80077f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800769c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076b4:	e043      	b.n	800773e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	ee07 3a90 	vmov	s15, r3
 80076bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076c0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80077fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80076c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076c8:	4b47      	ldr	r3, [pc, #284]	; (80077e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80076ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076d0:	ee07 3a90 	vmov	s15, r3
 80076d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80076dc:	eddf 5a44 	vldr	s11, [pc, #272]	; 80077f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80076e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076f8:	e021      	b.n	800773e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	ee07 3a90 	vmov	s15, r3
 8007700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007704:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80077f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007708:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800770c:	4b36      	ldr	r3, [pc, #216]	; (80077e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800770e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007714:	ee07 3a90 	vmov	s15, r3
 8007718:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800771c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007720:	eddf 5a33 	vldr	s11, [pc, #204]	; 80077f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007724:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007728:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800772c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007730:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007738:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800773c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800773e:	4b2a      	ldr	r3, [pc, #168]	; (80077e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007742:	0a5b      	lsrs	r3, r3, #9
 8007744:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007748:	ee07 3a90 	vmov	s15, r3
 800774c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007750:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007754:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007758:	edd7 6a07 	vldr	s13, [r7, #28]
 800775c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007764:	ee17 2a90 	vmov	r2, s15
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800776c:	4b1e      	ldr	r3, [pc, #120]	; (80077e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800776e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007770:	0c1b      	lsrs	r3, r3, #16
 8007772:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007776:	ee07 3a90 	vmov	s15, r3
 800777a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800777e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007782:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007786:	edd7 6a07 	vldr	s13, [r7, #28]
 800778a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800778e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007792:	ee17 2a90 	vmov	r2, s15
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800779a:	4b13      	ldr	r3, [pc, #76]	; (80077e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800779c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779e:	0e1b      	lsrs	r3, r3, #24
 80077a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077a4:	ee07 3a90 	vmov	s15, r3
 80077a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80077b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077c0:	ee17 2a90 	vmov	r2, s15
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80077c8:	e008      	b.n	80077dc <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	609a      	str	r2, [r3, #8]
}
 80077dc:	bf00      	nop
 80077de:	3724      	adds	r7, #36	; 0x24
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr
 80077e8:	58024400 	.word	0x58024400
 80077ec:	03d09000 	.word	0x03d09000
 80077f0:	46000000 	.word	0x46000000
 80077f4:	4c742400 	.word	0x4c742400
 80077f8:	4a742400 	.word	0x4a742400
 80077fc:	4af42400 	.word	0x4af42400

08007800 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007800:	b480      	push	{r7}
 8007802:	b089      	sub	sp, #36	; 0x24
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007808:	4b9d      	ldr	r3, [pc, #628]	; (8007a80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800780a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800780c:	f003 0303 	and.w	r3, r3, #3
 8007810:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007812:	4b9b      	ldr	r3, [pc, #620]	; (8007a80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007816:	0d1b      	lsrs	r3, r3, #20
 8007818:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800781c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800781e:	4b98      	ldr	r3, [pc, #608]	; (8007a80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007822:	0a1b      	lsrs	r3, r3, #8
 8007824:	f003 0301 	and.w	r3, r3, #1
 8007828:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800782a:	4b95      	ldr	r3, [pc, #596]	; (8007a80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800782c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800782e:	08db      	lsrs	r3, r3, #3
 8007830:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007834:	693a      	ldr	r2, [r7, #16]
 8007836:	fb02 f303 	mul.w	r3, r2, r3
 800783a:	ee07 3a90 	vmov	s15, r3
 800783e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007842:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	2b00      	cmp	r3, #0
 800784a:	f000 810a 	beq.w	8007a62 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800784e:	69bb      	ldr	r3, [r7, #24]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d05a      	beq.n	800790a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8007854:	2b01      	cmp	r3, #1
 8007856:	d302      	bcc.n	800785e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8007858:	2b02      	cmp	r3, #2
 800785a:	d078      	beq.n	800794e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800785c:	e099      	b.n	8007992 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800785e:	4b88      	ldr	r3, [pc, #544]	; (8007a80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 0320 	and.w	r3, r3, #32
 8007866:	2b00      	cmp	r3, #0
 8007868:	d02d      	beq.n	80078c6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800786a:	4b85      	ldr	r3, [pc, #532]	; (8007a80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	08db      	lsrs	r3, r3, #3
 8007870:	f003 0303 	and.w	r3, r3, #3
 8007874:	4a83      	ldr	r2, [pc, #524]	; (8007a84 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007876:	fa22 f303 	lsr.w	r3, r2, r3
 800787a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	ee07 3a90 	vmov	s15, r3
 8007882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	ee07 3a90 	vmov	s15, r3
 800788c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007890:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007894:	4b7a      	ldr	r3, [pc, #488]	; (8007a80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800789c:	ee07 3a90 	vmov	s15, r3
 80078a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80078a8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007a88 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80078ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078c0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80078c4:	e087      	b.n	80079d6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	ee07 3a90 	vmov	s15, r3
 80078cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078d0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007a8c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80078d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078d8:	4b69      	ldr	r3, [pc, #420]	; (8007a80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80078da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078e0:	ee07 3a90 	vmov	s15, r3
 80078e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80078ec:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007a88 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80078f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007900:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007904:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007908:	e065      	b.n	80079d6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	ee07 3a90 	vmov	s15, r3
 8007910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007914:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007a90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007918:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800791c:	4b58      	ldr	r3, [pc, #352]	; (8007a80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800791e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007924:	ee07 3a90 	vmov	s15, r3
 8007928:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800792c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007930:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007a88 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007934:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007938:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800793c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007940:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007944:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007948:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800794c:	e043      	b.n	80079d6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	ee07 3a90 	vmov	s15, r3
 8007954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007958:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007a94 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800795c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007960:	4b47      	ldr	r3, [pc, #284]	; (8007a80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007968:	ee07 3a90 	vmov	s15, r3
 800796c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007970:	ed97 6a03 	vldr	s12, [r7, #12]
 8007974:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007a88 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007978:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800797c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007980:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007984:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800798c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007990:	e021      	b.n	80079d6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	ee07 3a90 	vmov	s15, r3
 8007998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800799c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007a90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80079a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079a4:	4b36      	ldr	r3, [pc, #216]	; (8007a80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80079a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ac:	ee07 3a90 	vmov	s15, r3
 80079b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80079b8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007a88 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80079bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079d4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80079d6:	4b2a      	ldr	r3, [pc, #168]	; (8007a80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80079d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079da:	0a5b      	lsrs	r3, r3, #9
 80079dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079e0:	ee07 3a90 	vmov	s15, r3
 80079e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80079f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079fc:	ee17 2a90 	vmov	r2, s15
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007a04:	4b1e      	ldr	r3, [pc, #120]	; (8007a80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a08:	0c1b      	lsrs	r3, r3, #16
 8007a0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a0e:	ee07 3a90 	vmov	s15, r3
 8007a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a2a:	ee17 2a90 	vmov	r2, s15
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007a32:	4b13      	ldr	r3, [pc, #76]	; (8007a80 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a36:	0e1b      	lsrs	r3, r3, #24
 8007a38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a3c:	ee07 3a90 	vmov	s15, r3
 8007a40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a58:	ee17 2a90 	vmov	r2, s15
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007a60:	e008      	b.n	8007a74 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	609a      	str	r2, [r3, #8]
}
 8007a74:	bf00      	nop
 8007a76:	3724      	adds	r7, #36	; 0x24
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr
 8007a80:	58024400 	.word	0x58024400
 8007a84:	03d09000 	.word	0x03d09000
 8007a88:	46000000 	.word	0x46000000
 8007a8c:	4c742400 	.word	0x4c742400
 8007a90:	4a742400 	.word	0x4a742400
 8007a94:	4af42400 	.word	0x4af42400

08007a98 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b089      	sub	sp, #36	; 0x24
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007aa0:	4b9d      	ldr	r3, [pc, #628]	; (8007d18 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa4:	f003 0303 	and.w	r3, r3, #3
 8007aa8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007aaa:	4b9b      	ldr	r3, [pc, #620]	; (8007d18 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aae:	091b      	lsrs	r3, r3, #4
 8007ab0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ab4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007ab6:	4b98      	ldr	r3, [pc, #608]	; (8007d18 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aba:	f003 0301 	and.w	r3, r3, #1
 8007abe:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007ac0:	4b95      	ldr	r3, [pc, #596]	; (8007d18 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ac4:	08db      	lsrs	r3, r3, #3
 8007ac6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007aca:	693a      	ldr	r2, [r7, #16]
 8007acc:	fb02 f303 	mul.w	r3, r2, r3
 8007ad0:	ee07 3a90 	vmov	s15, r3
 8007ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ad8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f000 810a 	beq.w	8007cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d05a      	beq.n	8007ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d302      	bcc.n	8007af4 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8007aee:	2b02      	cmp	r3, #2
 8007af0:	d078      	beq.n	8007be4 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8007af2:	e099      	b.n	8007c28 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007af4:	4b88      	ldr	r3, [pc, #544]	; (8007d18 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 0320 	and.w	r3, r3, #32
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d02d      	beq.n	8007b5c <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b00:	4b85      	ldr	r3, [pc, #532]	; (8007d18 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	08db      	lsrs	r3, r3, #3
 8007b06:	f003 0303 	and.w	r3, r3, #3
 8007b0a:	4a84      	ldr	r2, [pc, #528]	; (8007d1c <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8007b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b10:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	ee07 3a90 	vmov	s15, r3
 8007b18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	ee07 3a90 	vmov	s15, r3
 8007b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b2a:	4b7b      	ldr	r3, [pc, #492]	; (8007d18 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b32:	ee07 3a90 	vmov	s15, r3
 8007b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b3e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007d20 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b56:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007b5a:	e087      	b.n	8007c6c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	ee07 3a90 	vmov	s15, r3
 8007b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b66:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007d24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8007b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b6e:	4b6a      	ldr	r3, [pc, #424]	; (8007d18 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b76:	ee07 3a90 	vmov	s15, r3
 8007b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b82:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007d20 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b9e:	e065      	b.n	8007c6c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	ee07 3a90 	vmov	s15, r3
 8007ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007baa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007d28 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bb2:	4b59      	ldr	r3, [pc, #356]	; (8007d18 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bba:	ee07 3a90 	vmov	s15, r3
 8007bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bc6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007d20 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007be2:	e043      	b.n	8007c6c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	ee07 3a90 	vmov	s15, r3
 8007bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007d2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bf6:	4b48      	ldr	r3, [pc, #288]	; (8007d18 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bfe:	ee07 3a90 	vmov	s15, r3
 8007c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c0a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007d20 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c26:	e021      	b.n	8007c6c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	ee07 3a90 	vmov	s15, r3
 8007c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c32:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007d28 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c3a:	4b37      	ldr	r3, [pc, #220]	; (8007d18 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c42:	ee07 3a90 	vmov	s15, r3
 8007c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c4e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007d20 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c6a:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007c6c:	4b2a      	ldr	r3, [pc, #168]	; (8007d18 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c70:	0a5b      	lsrs	r3, r3, #9
 8007c72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c76:	ee07 3a90 	vmov	s15, r3
 8007c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c86:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c92:	ee17 2a90 	vmov	r2, s15
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007c9a:	4b1f      	ldr	r3, [pc, #124]	; (8007d18 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c9e:	0c1b      	lsrs	r3, r3, #16
 8007ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ca4:	ee07 3a90 	vmov	s15, r3
 8007ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cc0:	ee17 2a90 	vmov	r2, s15
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007cc8:	4b13      	ldr	r3, [pc, #76]	; (8007d18 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ccc:	0e1b      	lsrs	r3, r3, #24
 8007cce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cd2:	ee07 3a90 	vmov	s15, r3
 8007cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ce2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cee:	ee17 2a90 	vmov	r2, s15
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007cf6:	e008      	b.n	8007d0a <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	609a      	str	r2, [r3, #8]
}
 8007d0a:	bf00      	nop
 8007d0c:	3724      	adds	r7, #36	; 0x24
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr
 8007d16:	bf00      	nop
 8007d18:	58024400 	.word	0x58024400
 8007d1c:	03d09000 	.word	0x03d09000
 8007d20:	46000000 	.word	0x46000000
 8007d24:	4c742400 	.word	0x4c742400
 8007d28:	4a742400 	.word	0x4a742400
 8007d2c:	4af42400 	.word	0x4af42400

08007d30 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d3e:	4b53      	ldr	r3, [pc, #332]	; (8007e8c <RCCEx_PLL2_Config+0x15c>)
 8007d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d42:	f003 0303 	and.w	r3, r3, #3
 8007d46:	2b03      	cmp	r3, #3
 8007d48:	d101      	bne.n	8007d4e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e099      	b.n	8007e82 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007d4e:	4b4f      	ldr	r3, [pc, #316]	; (8007e8c <RCCEx_PLL2_Config+0x15c>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a4e      	ldr	r2, [pc, #312]	; (8007e8c <RCCEx_PLL2_Config+0x15c>)
 8007d54:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d5a:	f7f9 fc8f 	bl	800167c <HAL_GetTick>
 8007d5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d60:	e008      	b.n	8007d74 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007d62:	f7f9 fc8b 	bl	800167c <HAL_GetTick>
 8007d66:	4602      	mov	r2, r0
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	1ad3      	subs	r3, r2, r3
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d901      	bls.n	8007d74 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007d70:	2303      	movs	r3, #3
 8007d72:	e086      	b.n	8007e82 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d74:	4b45      	ldr	r3, [pc, #276]	; (8007e8c <RCCEx_PLL2_Config+0x15c>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d1f0      	bne.n	8007d62 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007d80:	4b42      	ldr	r3, [pc, #264]	; (8007e8c <RCCEx_PLL2_Config+0x15c>)
 8007d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d84:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	031b      	lsls	r3, r3, #12
 8007d8e:	493f      	ldr	r1, [pc, #252]	; (8007e8c <RCCEx_PLL2_Config+0x15c>)
 8007d90:	4313      	orrs	r3, r2
 8007d92:	628b      	str	r3, [r1, #40]	; 0x28
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	3b01      	subs	r3, #1
 8007d9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	3b01      	subs	r3, #1
 8007da4:	025b      	lsls	r3, r3, #9
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	431a      	orrs	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	3b01      	subs	r3, #1
 8007db0:	041b      	lsls	r3, r3, #16
 8007db2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007db6:	431a      	orrs	r2, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	061b      	lsls	r3, r3, #24
 8007dc0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007dc4:	4931      	ldr	r1, [pc, #196]	; (8007e8c <RCCEx_PLL2_Config+0x15c>)
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007dca:	4b30      	ldr	r3, [pc, #192]	; (8007e8c <RCCEx_PLL2_Config+0x15c>)
 8007dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	492d      	ldr	r1, [pc, #180]	; (8007e8c <RCCEx_PLL2_Config+0x15c>)
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007ddc:	4b2b      	ldr	r3, [pc, #172]	; (8007e8c <RCCEx_PLL2_Config+0x15c>)
 8007dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de0:	f023 0220 	bic.w	r2, r3, #32
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	699b      	ldr	r3, [r3, #24]
 8007de8:	4928      	ldr	r1, [pc, #160]	; (8007e8c <RCCEx_PLL2_Config+0x15c>)
 8007dea:	4313      	orrs	r3, r2
 8007dec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007dee:	4b27      	ldr	r3, [pc, #156]	; (8007e8c <RCCEx_PLL2_Config+0x15c>)
 8007df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df2:	4a26      	ldr	r2, [pc, #152]	; (8007e8c <RCCEx_PLL2_Config+0x15c>)
 8007df4:	f023 0310 	bic.w	r3, r3, #16
 8007df8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007dfa:	4b24      	ldr	r3, [pc, #144]	; (8007e8c <RCCEx_PLL2_Config+0x15c>)
 8007dfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007dfe:	4b24      	ldr	r3, [pc, #144]	; (8007e90 <RCCEx_PLL2_Config+0x160>)
 8007e00:	4013      	ands	r3, r2
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	69d2      	ldr	r2, [r2, #28]
 8007e06:	00d2      	lsls	r2, r2, #3
 8007e08:	4920      	ldr	r1, [pc, #128]	; (8007e8c <RCCEx_PLL2_Config+0x15c>)
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007e0e:	4b1f      	ldr	r3, [pc, #124]	; (8007e8c <RCCEx_PLL2_Config+0x15c>)
 8007e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e12:	4a1e      	ldr	r2, [pc, #120]	; (8007e8c <RCCEx_PLL2_Config+0x15c>)
 8007e14:	f043 0310 	orr.w	r3, r3, #16
 8007e18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d106      	bne.n	8007e2e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007e20:	4b1a      	ldr	r3, [pc, #104]	; (8007e8c <RCCEx_PLL2_Config+0x15c>)
 8007e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e24:	4a19      	ldr	r2, [pc, #100]	; (8007e8c <RCCEx_PLL2_Config+0x15c>)
 8007e26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e2c:	e00f      	b.n	8007e4e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d106      	bne.n	8007e42 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007e34:	4b15      	ldr	r3, [pc, #84]	; (8007e8c <RCCEx_PLL2_Config+0x15c>)
 8007e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e38:	4a14      	ldr	r2, [pc, #80]	; (8007e8c <RCCEx_PLL2_Config+0x15c>)
 8007e3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e40:	e005      	b.n	8007e4e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007e42:	4b12      	ldr	r3, [pc, #72]	; (8007e8c <RCCEx_PLL2_Config+0x15c>)
 8007e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e46:	4a11      	ldr	r2, [pc, #68]	; (8007e8c <RCCEx_PLL2_Config+0x15c>)
 8007e48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007e4c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007e4e:	4b0f      	ldr	r3, [pc, #60]	; (8007e8c <RCCEx_PLL2_Config+0x15c>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a0e      	ldr	r2, [pc, #56]	; (8007e8c <RCCEx_PLL2_Config+0x15c>)
 8007e54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e5a:	f7f9 fc0f 	bl	800167c <HAL_GetTick>
 8007e5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007e60:	e008      	b.n	8007e74 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007e62:	f7f9 fc0b 	bl	800167c <HAL_GetTick>
 8007e66:	4602      	mov	r2, r0
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	1ad3      	subs	r3, r2, r3
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d901      	bls.n	8007e74 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007e70:	2303      	movs	r3, #3
 8007e72:	e006      	b.n	8007e82 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007e74:	4b05      	ldr	r3, [pc, #20]	; (8007e8c <RCCEx_PLL2_Config+0x15c>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d0f0      	beq.n	8007e62 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	58024400 	.word	0x58024400
 8007e90:	ffff0007 	.word	0xffff0007

08007e94 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007ea2:	4b53      	ldr	r3, [pc, #332]	; (8007ff0 <RCCEx_PLL3_Config+0x15c>)
 8007ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea6:	f003 0303 	and.w	r3, r3, #3
 8007eaa:	2b03      	cmp	r3, #3
 8007eac:	d101      	bne.n	8007eb2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e099      	b.n	8007fe6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007eb2:	4b4f      	ldr	r3, [pc, #316]	; (8007ff0 <RCCEx_PLL3_Config+0x15c>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a4e      	ldr	r2, [pc, #312]	; (8007ff0 <RCCEx_PLL3_Config+0x15c>)
 8007eb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ebc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ebe:	f7f9 fbdd 	bl	800167c <HAL_GetTick>
 8007ec2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ec4:	e008      	b.n	8007ed8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007ec6:	f7f9 fbd9 	bl	800167c <HAL_GetTick>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	1ad3      	subs	r3, r2, r3
 8007ed0:	2b02      	cmp	r3, #2
 8007ed2:	d901      	bls.n	8007ed8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007ed4:	2303      	movs	r3, #3
 8007ed6:	e086      	b.n	8007fe6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ed8:	4b45      	ldr	r3, [pc, #276]	; (8007ff0 <RCCEx_PLL3_Config+0x15c>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d1f0      	bne.n	8007ec6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007ee4:	4b42      	ldr	r3, [pc, #264]	; (8007ff0 <RCCEx_PLL3_Config+0x15c>)
 8007ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	051b      	lsls	r3, r3, #20
 8007ef2:	493f      	ldr	r1, [pc, #252]	; (8007ff0 <RCCEx_PLL3_Config+0x15c>)
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	628b      	str	r3, [r1, #40]	; 0x28
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	3b01      	subs	r3, #1
 8007efe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	3b01      	subs	r3, #1
 8007f08:	025b      	lsls	r3, r3, #9
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	431a      	orrs	r2, r3
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	3b01      	subs	r3, #1
 8007f14:	041b      	lsls	r3, r3, #16
 8007f16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007f1a:	431a      	orrs	r2, r3
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	691b      	ldr	r3, [r3, #16]
 8007f20:	3b01      	subs	r3, #1
 8007f22:	061b      	lsls	r3, r3, #24
 8007f24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007f28:	4931      	ldr	r1, [pc, #196]	; (8007ff0 <RCCEx_PLL3_Config+0x15c>)
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007f2e:	4b30      	ldr	r3, [pc, #192]	; (8007ff0 <RCCEx_PLL3_Config+0x15c>)
 8007f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	695b      	ldr	r3, [r3, #20]
 8007f3a:	492d      	ldr	r1, [pc, #180]	; (8007ff0 <RCCEx_PLL3_Config+0x15c>)
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007f40:	4b2b      	ldr	r3, [pc, #172]	; (8007ff0 <RCCEx_PLL3_Config+0x15c>)
 8007f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f44:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	699b      	ldr	r3, [r3, #24]
 8007f4c:	4928      	ldr	r1, [pc, #160]	; (8007ff0 <RCCEx_PLL3_Config+0x15c>)
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007f52:	4b27      	ldr	r3, [pc, #156]	; (8007ff0 <RCCEx_PLL3_Config+0x15c>)
 8007f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f56:	4a26      	ldr	r2, [pc, #152]	; (8007ff0 <RCCEx_PLL3_Config+0x15c>)
 8007f58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007f5e:	4b24      	ldr	r3, [pc, #144]	; (8007ff0 <RCCEx_PLL3_Config+0x15c>)
 8007f60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f62:	4b24      	ldr	r3, [pc, #144]	; (8007ff4 <RCCEx_PLL3_Config+0x160>)
 8007f64:	4013      	ands	r3, r2
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	69d2      	ldr	r2, [r2, #28]
 8007f6a:	00d2      	lsls	r2, r2, #3
 8007f6c:	4920      	ldr	r1, [pc, #128]	; (8007ff0 <RCCEx_PLL3_Config+0x15c>)
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007f72:	4b1f      	ldr	r3, [pc, #124]	; (8007ff0 <RCCEx_PLL3_Config+0x15c>)
 8007f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f76:	4a1e      	ldr	r2, [pc, #120]	; (8007ff0 <RCCEx_PLL3_Config+0x15c>)
 8007f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d106      	bne.n	8007f92 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007f84:	4b1a      	ldr	r3, [pc, #104]	; (8007ff0 <RCCEx_PLL3_Config+0x15c>)
 8007f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f88:	4a19      	ldr	r2, [pc, #100]	; (8007ff0 <RCCEx_PLL3_Config+0x15c>)
 8007f8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007f8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007f90:	e00f      	b.n	8007fb2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d106      	bne.n	8007fa6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007f98:	4b15      	ldr	r3, [pc, #84]	; (8007ff0 <RCCEx_PLL3_Config+0x15c>)
 8007f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9c:	4a14      	ldr	r2, [pc, #80]	; (8007ff0 <RCCEx_PLL3_Config+0x15c>)
 8007f9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007fa2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007fa4:	e005      	b.n	8007fb2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007fa6:	4b12      	ldr	r3, [pc, #72]	; (8007ff0 <RCCEx_PLL3_Config+0x15c>)
 8007fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007faa:	4a11      	ldr	r2, [pc, #68]	; (8007ff0 <RCCEx_PLL3_Config+0x15c>)
 8007fac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007fb0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007fb2:	4b0f      	ldr	r3, [pc, #60]	; (8007ff0 <RCCEx_PLL3_Config+0x15c>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a0e      	ldr	r2, [pc, #56]	; (8007ff0 <RCCEx_PLL3_Config+0x15c>)
 8007fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fbe:	f7f9 fb5d 	bl	800167c <HAL_GetTick>
 8007fc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007fc4:	e008      	b.n	8007fd8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007fc6:	f7f9 fb59 	bl	800167c <HAL_GetTick>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	1ad3      	subs	r3, r2, r3
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d901      	bls.n	8007fd8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	e006      	b.n	8007fe6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007fd8:	4b05      	ldr	r3, [pc, #20]	; (8007ff0 <RCCEx_PLL3_Config+0x15c>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d0f0      	beq.n	8007fc6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	58024400 	.word	0x58024400
 8007ff4:	ffff0007 	.word	0xffff0007

08007ff8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d101      	bne.n	800800a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e049      	b.n	800809e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008010:	b2db      	uxtb	r3, r3
 8008012:	2b00      	cmp	r3, #0
 8008014:	d106      	bne.n	8008024 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f7f9 f858 	bl	80010d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2202      	movs	r2, #2
 8008028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	3304      	adds	r3, #4
 8008034:	4619      	mov	r1, r3
 8008036:	4610      	mov	r0, r2
 8008038:	f000 f8a6 	bl	8008188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2201      	movs	r2, #1
 8008048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
	...

080080a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d001      	beq.n	80080c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	e019      	b.n	80080f4 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2202      	movs	r2, #2
 80080c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	689a      	ldr	r2, [r3, #8]
 80080ce:	4b0c      	ldr	r3, [pc, #48]	; (8008100 <HAL_TIM_Base_Start+0x58>)
 80080d0:	4013      	ands	r3, r2
 80080d2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2b06      	cmp	r3, #6
 80080d8:	d00b      	beq.n	80080f2 <HAL_TIM_Base_Start+0x4a>
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080e0:	d007      	beq.n	80080f2 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f042 0201 	orr.w	r2, r2, #1
 80080f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80080f2:	2300      	movs	r3, #0
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3714      	adds	r7, #20
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr
 8008100:	00010007 	.word	0x00010007

08008104 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008114:	2b01      	cmp	r3, #1
 8008116:	d101      	bne.n	800811c <HAL_TIM_SlaveConfigSynchro+0x18>
 8008118:	2302      	movs	r3, #2
 800811a:	e031      	b.n	8008180 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2202      	movs	r2, #2
 8008128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800812c:	6839      	ldr	r1, [r7, #0]
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f8c4 	bl	80082bc <TIM_SlaveTimer_SetConfig>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d009      	beq.n	800814e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2201      	movs	r2, #1
 800813e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	e018      	b.n	8008180 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68da      	ldr	r2, [r3, #12]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800815c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	68da      	ldr	r2, [r3, #12]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800816c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2201      	movs	r2, #1
 8008172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800817e:	2300      	movs	r3, #0
}
 8008180:	4618      	mov	r0, r3
 8008182:	3708      	adds	r7, #8
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008188:	b480      	push	{r7}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a40      	ldr	r2, [pc, #256]	; (800829c <TIM_Base_SetConfig+0x114>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d013      	beq.n	80081c8 <TIM_Base_SetConfig+0x40>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081a6:	d00f      	beq.n	80081c8 <TIM_Base_SetConfig+0x40>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a3d      	ldr	r2, [pc, #244]	; (80082a0 <TIM_Base_SetConfig+0x118>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d00b      	beq.n	80081c8 <TIM_Base_SetConfig+0x40>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	4a3c      	ldr	r2, [pc, #240]	; (80082a4 <TIM_Base_SetConfig+0x11c>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d007      	beq.n	80081c8 <TIM_Base_SetConfig+0x40>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	4a3b      	ldr	r2, [pc, #236]	; (80082a8 <TIM_Base_SetConfig+0x120>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d003      	beq.n	80081c8 <TIM_Base_SetConfig+0x40>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	4a3a      	ldr	r2, [pc, #232]	; (80082ac <TIM_Base_SetConfig+0x124>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d108      	bne.n	80081da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	68fa      	ldr	r2, [r7, #12]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a2f      	ldr	r2, [pc, #188]	; (800829c <TIM_Base_SetConfig+0x114>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d01f      	beq.n	8008222 <TIM_Base_SetConfig+0x9a>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081e8:	d01b      	beq.n	8008222 <TIM_Base_SetConfig+0x9a>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a2c      	ldr	r2, [pc, #176]	; (80082a0 <TIM_Base_SetConfig+0x118>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d017      	beq.n	8008222 <TIM_Base_SetConfig+0x9a>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4a2b      	ldr	r2, [pc, #172]	; (80082a4 <TIM_Base_SetConfig+0x11c>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d013      	beq.n	8008222 <TIM_Base_SetConfig+0x9a>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4a2a      	ldr	r2, [pc, #168]	; (80082a8 <TIM_Base_SetConfig+0x120>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d00f      	beq.n	8008222 <TIM_Base_SetConfig+0x9a>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	4a29      	ldr	r2, [pc, #164]	; (80082ac <TIM_Base_SetConfig+0x124>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d00b      	beq.n	8008222 <TIM_Base_SetConfig+0x9a>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4a28      	ldr	r2, [pc, #160]	; (80082b0 <TIM_Base_SetConfig+0x128>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d007      	beq.n	8008222 <TIM_Base_SetConfig+0x9a>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4a27      	ldr	r2, [pc, #156]	; (80082b4 <TIM_Base_SetConfig+0x12c>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d003      	beq.n	8008222 <TIM_Base_SetConfig+0x9a>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a26      	ldr	r2, [pc, #152]	; (80082b8 <TIM_Base_SetConfig+0x130>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d108      	bne.n	8008234 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	68fa      	ldr	r2, [r7, #12]
 8008230:	4313      	orrs	r3, r2
 8008232:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	695b      	ldr	r3, [r3, #20]
 800823e:	4313      	orrs	r3, r2
 8008240:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	689a      	ldr	r2, [r3, #8]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4a10      	ldr	r2, [pc, #64]	; (800829c <TIM_Base_SetConfig+0x114>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d00f      	beq.n	8008280 <TIM_Base_SetConfig+0xf8>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	4a12      	ldr	r2, [pc, #72]	; (80082ac <TIM_Base_SetConfig+0x124>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d00b      	beq.n	8008280 <TIM_Base_SetConfig+0xf8>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4a11      	ldr	r2, [pc, #68]	; (80082b0 <TIM_Base_SetConfig+0x128>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d007      	beq.n	8008280 <TIM_Base_SetConfig+0xf8>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a10      	ldr	r2, [pc, #64]	; (80082b4 <TIM_Base_SetConfig+0x12c>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d003      	beq.n	8008280 <TIM_Base_SetConfig+0xf8>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4a0f      	ldr	r2, [pc, #60]	; (80082b8 <TIM_Base_SetConfig+0x130>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d103      	bne.n	8008288 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	691a      	ldr	r2, [r3, #16]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	615a      	str	r2, [r3, #20]
}
 800828e:	bf00      	nop
 8008290:	3714      	adds	r7, #20
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	40010000 	.word	0x40010000
 80082a0:	40000400 	.word	0x40000400
 80082a4:	40000800 	.word	0x40000800
 80082a8:	40000c00 	.word	0x40000c00
 80082ac:	40010400 	.word	0x40010400
 80082b0:	40014000 	.word	0x40014000
 80082b4:	40014400 	.word	0x40014400
 80082b8:	40014800 	.word	0x40014800

080082bc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b086      	sub	sp, #24
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80082ce:	697a      	ldr	r2, [r7, #20]
 80082d0:	4b56      	ldr	r3, [pc, #344]	; (800842c <TIM_SlaveTimer_SetConfig+0x170>)
 80082d2:	4013      	ands	r3, r2
 80082d4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	697a      	ldr	r2, [r7, #20]
 80082dc:	4313      	orrs	r3, r2
 80082de:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80082e0:	697a      	ldr	r2, [r7, #20]
 80082e2:	4b53      	ldr	r3, [pc, #332]	; (8008430 <TIM_SlaveTimer_SetConfig+0x174>)
 80082e4:	4013      	ands	r3, r2
 80082e6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	697a      	ldr	r2, [r7, #20]
 80082ee:	4313      	orrs	r3, r2
 80082f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	697a      	ldr	r2, [r7, #20]
 80082f8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008302:	f000 808c 	beq.w	800841e <TIM_SlaveTimer_SetConfig+0x162>
 8008306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800830a:	d818      	bhi.n	800833e <TIM_SlaveTimer_SetConfig+0x82>
 800830c:	2b30      	cmp	r3, #48	; 0x30
 800830e:	f000 8086 	beq.w	800841e <TIM_SlaveTimer_SetConfig+0x162>
 8008312:	2b30      	cmp	r3, #48	; 0x30
 8008314:	d807      	bhi.n	8008326 <TIM_SlaveTimer_SetConfig+0x6a>
 8008316:	2b10      	cmp	r3, #16
 8008318:	f000 8081 	beq.w	800841e <TIM_SlaveTimer_SetConfig+0x162>
 800831c:	2b20      	cmp	r3, #32
 800831e:	d07e      	beq.n	800841e <TIM_SlaveTimer_SetConfig+0x162>
 8008320:	2b00      	cmp	r3, #0
 8008322:	d07c      	beq.n	800841e <TIM_SlaveTimer_SetConfig+0x162>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8008324:	e07c      	b.n	8008420 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8008326:	2b50      	cmp	r3, #80	; 0x50
 8008328:	d065      	beq.n	80083f6 <TIM_SlaveTimer_SetConfig+0x13a>
 800832a:	2b50      	cmp	r3, #80	; 0x50
 800832c:	d802      	bhi.n	8008334 <TIM_SlaveTimer_SetConfig+0x78>
 800832e:	2b40      	cmp	r3, #64	; 0x40
 8008330:	d038      	beq.n	80083a4 <TIM_SlaveTimer_SetConfig+0xe8>
      break;
 8008332:	e075      	b.n	8008420 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8008334:	2b60      	cmp	r3, #96	; 0x60
 8008336:	d068      	beq.n	800840a <TIM_SlaveTimer_SetConfig+0x14e>
 8008338:	2b70      	cmp	r3, #112	; 0x70
 800833a:	d028      	beq.n	800838e <TIM_SlaveTimer_SetConfig+0xd2>
      break;
 800833c:	e070      	b.n	8008420 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 800833e:	4a3d      	ldr	r2, [pc, #244]	; (8008434 <TIM_SlaveTimer_SetConfig+0x178>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d06c      	beq.n	800841e <TIM_SlaveTimer_SetConfig+0x162>
 8008344:	4a3b      	ldr	r2, [pc, #236]	; (8008434 <TIM_SlaveTimer_SetConfig+0x178>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d810      	bhi.n	800836c <TIM_SlaveTimer_SetConfig+0xb0>
 800834a:	4a3b      	ldr	r2, [pc, #236]	; (8008438 <TIM_SlaveTimer_SetConfig+0x17c>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d066      	beq.n	800841e <TIM_SlaveTimer_SetConfig+0x162>
 8008350:	4a39      	ldr	r2, [pc, #228]	; (8008438 <TIM_SlaveTimer_SetConfig+0x17c>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d803      	bhi.n	800835e <TIM_SlaveTimer_SetConfig+0xa2>
 8008356:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800835a:	d060      	beq.n	800841e <TIM_SlaveTimer_SetConfig+0x162>
      break;
 800835c:	e060      	b.n	8008420 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 800835e:	4a37      	ldr	r2, [pc, #220]	; (800843c <TIM_SlaveTimer_SetConfig+0x180>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d05c      	beq.n	800841e <TIM_SlaveTimer_SetConfig+0x162>
 8008364:	4a36      	ldr	r2, [pc, #216]	; (8008440 <TIM_SlaveTimer_SetConfig+0x184>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d059      	beq.n	800841e <TIM_SlaveTimer_SetConfig+0x162>
      break;
 800836a:	e059      	b.n	8008420 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 800836c:	4a35      	ldr	r2, [pc, #212]	; (8008444 <TIM_SlaveTimer_SetConfig+0x188>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d055      	beq.n	800841e <TIM_SlaveTimer_SetConfig+0x162>
 8008372:	4a34      	ldr	r2, [pc, #208]	; (8008444 <TIM_SlaveTimer_SetConfig+0x188>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d803      	bhi.n	8008380 <TIM_SlaveTimer_SetConfig+0xc4>
 8008378:	4a33      	ldr	r2, [pc, #204]	; (8008448 <TIM_SlaveTimer_SetConfig+0x18c>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d04f      	beq.n	800841e <TIM_SlaveTimer_SetConfig+0x162>
      break;
 800837e:	e04f      	b.n	8008420 <TIM_SlaveTimer_SetConfig+0x164>
  switch (sSlaveConfig->InputTrigger)
 8008380:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008384:	d04b      	beq.n	800841e <TIM_SlaveTimer_SetConfig+0x162>
 8008386:	4a31      	ldr	r2, [pc, #196]	; (800844c <TIM_SlaveTimer_SetConfig+0x190>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d048      	beq.n	800841e <TIM_SlaveTimer_SetConfig+0x162>
      break;
 800838c:	e048      	b.n	8008420 <TIM_SlaveTimer_SetConfig+0x164>
      TIM_ETR_SetConfig(htim->Instance,
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6818      	ldr	r0, [r3, #0]
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	68d9      	ldr	r1, [r3, #12]
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	689a      	ldr	r2, [r3, #8]
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	691b      	ldr	r3, [r3, #16]
 800839e:	f000 f8b6 	bl	800850e <TIM_ETR_SetConfig>
      break;
 80083a2:	e03d      	b.n	8008420 <TIM_SlaveTimer_SetConfig+0x164>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2b05      	cmp	r3, #5
 80083aa:	d101      	bne.n	80083b0 <TIM_SlaveTimer_SetConfig+0xf4>
        return HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	e038      	b.n	8008422 <TIM_SlaveTimer_SetConfig+0x166>
      tmpccer = htim->Instance->CCER;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	6a1b      	ldr	r3, [r3, #32]
 80083b6:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	6a1a      	ldr	r2, [r3, #32]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f022 0201 	bic.w	r2, r2, #1
 80083c6:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80083d6:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	691b      	ldr	r3, [r3, #16]
 80083dc:	011b      	lsls	r3, r3, #4
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	693a      	ldr	r2, [r7, #16]
 80083f2:	621a      	str	r2, [r3, #32]
      break;
 80083f4:	e014      	b.n	8008420 <TIM_SlaveTimer_SetConfig+0x164>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6818      	ldr	r0, [r3, #0]
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	6899      	ldr	r1, [r3, #8]
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	461a      	mov	r2, r3
 8008404:	f000 f824 	bl	8008450 <TIM_TI1_ConfigInputStage>
      break;
 8008408:	e00a      	b.n	8008420 <TIM_SlaveTimer_SetConfig+0x164>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6818      	ldr	r0, [r3, #0]
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	6899      	ldr	r1, [r3, #8]
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	461a      	mov	r2, r3
 8008418:	f000 f849 	bl	80084ae <TIM_TI2_ConfigInputStage>
      break;
 800841c:	e000      	b.n	8008420 <TIM_SlaveTimer_SetConfig+0x164>
      break;
 800841e:	bf00      	nop
  }
  return HAL_OK;
 8008420:	2300      	movs	r3, #0
}
 8008422:	4618      	mov	r0, r3
 8008424:	3718      	adds	r7, #24
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	ffcfff8f 	.word	0xffcfff8f
 8008430:	fffefff8 	.word	0xfffefff8
 8008434:	00100050 	.word	0x00100050
 8008438:	00100020 	.word	0x00100020
 800843c:	00100030 	.word	0x00100030
 8008440:	00100040 	.word	0x00100040
 8008444:	00100070 	.word	0x00100070
 8008448:	00100060 	.word	0x00100060
 800844c:	00200010 	.word	0x00200010

08008450 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008450:	b480      	push	{r7}
 8008452:	b087      	sub	sp, #28
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6a1b      	ldr	r3, [r3, #32]
 8008460:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6a1b      	ldr	r3, [r3, #32]
 8008466:	f023 0201 	bic.w	r2, r3, #1
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	699b      	ldr	r3, [r3, #24]
 8008472:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800847a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	011b      	lsls	r3, r3, #4
 8008480:	693a      	ldr	r2, [r7, #16]
 8008482:	4313      	orrs	r3, r2
 8008484:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	f023 030a 	bic.w	r3, r3, #10
 800848c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800848e:	697a      	ldr	r2, [r7, #20]
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	4313      	orrs	r3, r2
 8008494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	693a      	ldr	r2, [r7, #16]
 800849a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	697a      	ldr	r2, [r7, #20]
 80084a0:	621a      	str	r2, [r3, #32]
}
 80084a2:	bf00      	nop
 80084a4:	371c      	adds	r7, #28
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr

080084ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084ae:	b480      	push	{r7}
 80084b0:	b087      	sub	sp, #28
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	60f8      	str	r0, [r7, #12]
 80084b6:	60b9      	str	r1, [r7, #8]
 80084b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6a1b      	ldr	r3, [r3, #32]
 80084be:	f023 0210 	bic.w	r2, r3, #16
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	699b      	ldr	r3, [r3, #24]
 80084ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6a1b      	ldr	r3, [r3, #32]
 80084d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80084d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	031b      	lsls	r3, r3, #12
 80084de:	697a      	ldr	r2, [r7, #20]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80084ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	011b      	lsls	r3, r3, #4
 80084f0:	693a      	ldr	r2, [r7, #16]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	697a      	ldr	r2, [r7, #20]
 80084fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	693a      	ldr	r2, [r7, #16]
 8008500:	621a      	str	r2, [r3, #32]
}
 8008502:	bf00      	nop
 8008504:	371c      	adds	r7, #28
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr

0800850e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800850e:	b480      	push	{r7}
 8008510:	b087      	sub	sp, #28
 8008512:	af00      	add	r7, sp, #0
 8008514:	60f8      	str	r0, [r7, #12]
 8008516:	60b9      	str	r1, [r7, #8]
 8008518:	607a      	str	r2, [r7, #4]
 800851a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008528:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	021a      	lsls	r2, r3, #8
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	431a      	orrs	r2, r3
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	4313      	orrs	r3, r2
 8008536:	697a      	ldr	r2, [r7, #20]
 8008538:	4313      	orrs	r3, r2
 800853a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	697a      	ldr	r2, [r7, #20]
 8008540:	609a      	str	r2, [r3, #8]
}
 8008542:	bf00      	nop
 8008544:	371c      	adds	r7, #28
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr
	...

08008550 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008550:	b480      	push	{r7}
 8008552:	b085      	sub	sp, #20
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008560:	2b01      	cmp	r3, #1
 8008562:	d101      	bne.n	8008568 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008564:	2302      	movs	r3, #2
 8008566:	e068      	b.n	800863a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2202      	movs	r2, #2
 8008574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a2e      	ldr	r2, [pc, #184]	; (8008648 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d004      	beq.n	800859c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a2d      	ldr	r2, [pc, #180]	; (800864c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d108      	bne.n	80085ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80085a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	68fa      	ldr	r2, [r7, #12]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	4313      	orrs	r3, r2
 80085be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	68fa      	ldr	r2, [r7, #12]
 80085c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a1e      	ldr	r2, [pc, #120]	; (8008648 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d01d      	beq.n	800860e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085da:	d018      	beq.n	800860e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a1b      	ldr	r2, [pc, #108]	; (8008650 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d013      	beq.n	800860e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a1a      	ldr	r2, [pc, #104]	; (8008654 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d00e      	beq.n	800860e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a18      	ldr	r2, [pc, #96]	; (8008658 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d009      	beq.n	800860e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a13      	ldr	r2, [pc, #76]	; (800864c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d004      	beq.n	800860e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a14      	ldr	r2, [pc, #80]	; (800865c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d10c      	bne.n	8008628 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008614:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	68ba      	ldr	r2, [r7, #8]
 800861c:	4313      	orrs	r3, r2
 800861e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	68ba      	ldr	r2, [r7, #8]
 8008626:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3714      	adds	r7, #20
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr
 8008646:	bf00      	nop
 8008648:	40010000 	.word	0x40010000
 800864c:	40010400 	.word	0x40010400
 8008650:	40000400 	.word	0x40000400
 8008654:	40000800 	.word	0x40000800
 8008658:	40000c00 	.word	0x40000c00
 800865c:	40001800 	.word	0x40001800

08008660 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d101      	bne.n	8008672 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	e042      	b.n	80086f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008678:	2b00      	cmp	r3, #0
 800867a:	d106      	bne.n	800868a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f7f8 fd83 	bl	8001190 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2224      	movs	r2, #36	; 0x24
 800868e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f022 0201 	bic.w	r2, r2, #1
 80086a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 f82c 	bl	8008700 <UART_SetConfig>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d101      	bne.n	80086b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	e022      	b.n	80086f8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d002      	beq.n	80086c0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 fecc 	bl	8009458 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	685a      	ldr	r2, [r3, #4]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80086ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	689a      	ldr	r2, [r3, #8]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80086de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f042 0201 	orr.w	r2, r2, #1
 80086ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 ff53 	bl	800959c <UART_CheckIdleState>
 80086f6:	4603      	mov	r3, r0
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3708      	adds	r7, #8
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008700:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008704:	b08e      	sub	sp, #56	; 0x38
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800870a:	2300      	movs	r3, #0
 800870c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	689a      	ldr	r2, [r3, #8]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	691b      	ldr	r3, [r3, #16]
 8008718:	431a      	orrs	r2, r3
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	695b      	ldr	r3, [r3, #20]
 800871e:	431a      	orrs	r2, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	69db      	ldr	r3, [r3, #28]
 8008724:	4313      	orrs	r3, r2
 8008726:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800872c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800872e:	4313      	orrs	r3, r2
 8008730:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	4bc1      	ldr	r3, [pc, #772]	; (8008a40 <UART_SetConfig+0x340>)
 800873a:	4013      	ands	r3, r2
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	6812      	ldr	r2, [r2, #0]
 8008740:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008742:	430b      	orrs	r3, r1
 8008744:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	68da      	ldr	r2, [r3, #12]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	430a      	orrs	r2, r1
 800875a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	699b      	ldr	r3, [r3, #24]
 8008760:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4ab7      	ldr	r2, [pc, #732]	; (8008a44 <UART_SetConfig+0x344>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d004      	beq.n	8008776 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6a1b      	ldr	r3, [r3, #32]
 8008770:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008772:	4313      	orrs	r3, r2
 8008774:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	689a      	ldr	r2, [r3, #8]
 800877c:	4bb2      	ldr	r3, [pc, #712]	; (8008a48 <UART_SetConfig+0x348>)
 800877e:	4013      	ands	r3, r2
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	6812      	ldr	r2, [r2, #0]
 8008784:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008786:	430b      	orrs	r3, r1
 8008788:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008790:	f023 010f 	bic.w	r1, r3, #15
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	430a      	orrs	r2, r1
 800879e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4aa9      	ldr	r2, [pc, #676]	; (8008a4c <UART_SetConfig+0x34c>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d177      	bne.n	800889a <UART_SetConfig+0x19a>
 80087aa:	4ba9      	ldr	r3, [pc, #676]	; (8008a50 <UART_SetConfig+0x350>)
 80087ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087b2:	2b28      	cmp	r3, #40	; 0x28
 80087b4:	d86c      	bhi.n	8008890 <UART_SetConfig+0x190>
 80087b6:	a201      	add	r2, pc, #4	; (adr r2, 80087bc <UART_SetConfig+0xbc>)
 80087b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087bc:	08008861 	.word	0x08008861
 80087c0:	08008891 	.word	0x08008891
 80087c4:	08008891 	.word	0x08008891
 80087c8:	08008891 	.word	0x08008891
 80087cc:	08008891 	.word	0x08008891
 80087d0:	08008891 	.word	0x08008891
 80087d4:	08008891 	.word	0x08008891
 80087d8:	08008891 	.word	0x08008891
 80087dc:	08008869 	.word	0x08008869
 80087e0:	08008891 	.word	0x08008891
 80087e4:	08008891 	.word	0x08008891
 80087e8:	08008891 	.word	0x08008891
 80087ec:	08008891 	.word	0x08008891
 80087f0:	08008891 	.word	0x08008891
 80087f4:	08008891 	.word	0x08008891
 80087f8:	08008891 	.word	0x08008891
 80087fc:	08008871 	.word	0x08008871
 8008800:	08008891 	.word	0x08008891
 8008804:	08008891 	.word	0x08008891
 8008808:	08008891 	.word	0x08008891
 800880c:	08008891 	.word	0x08008891
 8008810:	08008891 	.word	0x08008891
 8008814:	08008891 	.word	0x08008891
 8008818:	08008891 	.word	0x08008891
 800881c:	08008879 	.word	0x08008879
 8008820:	08008891 	.word	0x08008891
 8008824:	08008891 	.word	0x08008891
 8008828:	08008891 	.word	0x08008891
 800882c:	08008891 	.word	0x08008891
 8008830:	08008891 	.word	0x08008891
 8008834:	08008891 	.word	0x08008891
 8008838:	08008891 	.word	0x08008891
 800883c:	08008881 	.word	0x08008881
 8008840:	08008891 	.word	0x08008891
 8008844:	08008891 	.word	0x08008891
 8008848:	08008891 	.word	0x08008891
 800884c:	08008891 	.word	0x08008891
 8008850:	08008891 	.word	0x08008891
 8008854:	08008891 	.word	0x08008891
 8008858:	08008891 	.word	0x08008891
 800885c:	08008889 	.word	0x08008889
 8008860:	2301      	movs	r3, #1
 8008862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008866:	e339      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008868:	2304      	movs	r3, #4
 800886a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800886e:	e335      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008870:	2308      	movs	r3, #8
 8008872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008876:	e331      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008878:	2310      	movs	r3, #16
 800887a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800887e:	e32d      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008880:	2320      	movs	r3, #32
 8008882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008886:	e329      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008888:	2340      	movs	r3, #64	; 0x40
 800888a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800888e:	e325      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008890:	2380      	movs	r3, #128	; 0x80
 8008892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008896:	bf00      	nop
 8008898:	e320      	b.n	8008edc <UART_SetConfig+0x7dc>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a6d      	ldr	r2, [pc, #436]	; (8008a54 <UART_SetConfig+0x354>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d132      	bne.n	800890a <UART_SetConfig+0x20a>
 80088a4:	4b6a      	ldr	r3, [pc, #424]	; (8008a50 <UART_SetConfig+0x350>)
 80088a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088a8:	f003 0307 	and.w	r3, r3, #7
 80088ac:	2b05      	cmp	r3, #5
 80088ae:	d827      	bhi.n	8008900 <UART_SetConfig+0x200>
 80088b0:	a201      	add	r2, pc, #4	; (adr r2, 80088b8 <UART_SetConfig+0x1b8>)
 80088b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b6:	bf00      	nop
 80088b8:	080088d1 	.word	0x080088d1
 80088bc:	080088d9 	.word	0x080088d9
 80088c0:	080088e1 	.word	0x080088e1
 80088c4:	080088e9 	.word	0x080088e9
 80088c8:	080088f1 	.word	0x080088f1
 80088cc:	080088f9 	.word	0x080088f9
 80088d0:	2300      	movs	r3, #0
 80088d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088d6:	e301      	b.n	8008edc <UART_SetConfig+0x7dc>
 80088d8:	2304      	movs	r3, #4
 80088da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088de:	e2fd      	b.n	8008edc <UART_SetConfig+0x7dc>
 80088e0:	2308      	movs	r3, #8
 80088e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088e6:	e2f9      	b.n	8008edc <UART_SetConfig+0x7dc>
 80088e8:	2310      	movs	r3, #16
 80088ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088ee:	e2f5      	b.n	8008edc <UART_SetConfig+0x7dc>
 80088f0:	2320      	movs	r3, #32
 80088f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088f6:	e2f1      	b.n	8008edc <UART_SetConfig+0x7dc>
 80088f8:	2340      	movs	r3, #64	; 0x40
 80088fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80088fe:	e2ed      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008900:	2380      	movs	r3, #128	; 0x80
 8008902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008906:	bf00      	nop
 8008908:	e2e8      	b.n	8008edc <UART_SetConfig+0x7dc>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a52      	ldr	r2, [pc, #328]	; (8008a58 <UART_SetConfig+0x358>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d132      	bne.n	800897a <UART_SetConfig+0x27a>
 8008914:	4b4e      	ldr	r3, [pc, #312]	; (8008a50 <UART_SetConfig+0x350>)
 8008916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008918:	f003 0307 	and.w	r3, r3, #7
 800891c:	2b05      	cmp	r3, #5
 800891e:	d827      	bhi.n	8008970 <UART_SetConfig+0x270>
 8008920:	a201      	add	r2, pc, #4	; (adr r2, 8008928 <UART_SetConfig+0x228>)
 8008922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008926:	bf00      	nop
 8008928:	08008941 	.word	0x08008941
 800892c:	08008949 	.word	0x08008949
 8008930:	08008951 	.word	0x08008951
 8008934:	08008959 	.word	0x08008959
 8008938:	08008961 	.word	0x08008961
 800893c:	08008969 	.word	0x08008969
 8008940:	2300      	movs	r3, #0
 8008942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008946:	e2c9      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008948:	2304      	movs	r3, #4
 800894a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800894e:	e2c5      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008950:	2308      	movs	r3, #8
 8008952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008956:	e2c1      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008958:	2310      	movs	r3, #16
 800895a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800895e:	e2bd      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008960:	2320      	movs	r3, #32
 8008962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008966:	e2b9      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008968:	2340      	movs	r3, #64	; 0x40
 800896a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800896e:	e2b5      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008970:	2380      	movs	r3, #128	; 0x80
 8008972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008976:	bf00      	nop
 8008978:	e2b0      	b.n	8008edc <UART_SetConfig+0x7dc>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a37      	ldr	r2, [pc, #220]	; (8008a5c <UART_SetConfig+0x35c>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d132      	bne.n	80089ea <UART_SetConfig+0x2ea>
 8008984:	4b32      	ldr	r3, [pc, #200]	; (8008a50 <UART_SetConfig+0x350>)
 8008986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008988:	f003 0307 	and.w	r3, r3, #7
 800898c:	2b05      	cmp	r3, #5
 800898e:	d827      	bhi.n	80089e0 <UART_SetConfig+0x2e0>
 8008990:	a201      	add	r2, pc, #4	; (adr r2, 8008998 <UART_SetConfig+0x298>)
 8008992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008996:	bf00      	nop
 8008998:	080089b1 	.word	0x080089b1
 800899c:	080089b9 	.word	0x080089b9
 80089a0:	080089c1 	.word	0x080089c1
 80089a4:	080089c9 	.word	0x080089c9
 80089a8:	080089d1 	.word	0x080089d1
 80089ac:	080089d9 	.word	0x080089d9
 80089b0:	2300      	movs	r3, #0
 80089b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089b6:	e291      	b.n	8008edc <UART_SetConfig+0x7dc>
 80089b8:	2304      	movs	r3, #4
 80089ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089be:	e28d      	b.n	8008edc <UART_SetConfig+0x7dc>
 80089c0:	2308      	movs	r3, #8
 80089c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089c6:	e289      	b.n	8008edc <UART_SetConfig+0x7dc>
 80089c8:	2310      	movs	r3, #16
 80089ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089ce:	e285      	b.n	8008edc <UART_SetConfig+0x7dc>
 80089d0:	2320      	movs	r3, #32
 80089d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089d6:	e281      	b.n	8008edc <UART_SetConfig+0x7dc>
 80089d8:	2340      	movs	r3, #64	; 0x40
 80089da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089de:	e27d      	b.n	8008edc <UART_SetConfig+0x7dc>
 80089e0:	2380      	movs	r3, #128	; 0x80
 80089e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80089e6:	bf00      	nop
 80089e8:	e278      	b.n	8008edc <UART_SetConfig+0x7dc>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a1c      	ldr	r2, [pc, #112]	; (8008a60 <UART_SetConfig+0x360>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d144      	bne.n	8008a7e <UART_SetConfig+0x37e>
 80089f4:	4b16      	ldr	r3, [pc, #88]	; (8008a50 <UART_SetConfig+0x350>)
 80089f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089f8:	f003 0307 	and.w	r3, r3, #7
 80089fc:	2b05      	cmp	r3, #5
 80089fe:	d839      	bhi.n	8008a74 <UART_SetConfig+0x374>
 8008a00:	a201      	add	r2, pc, #4	; (adr r2, 8008a08 <UART_SetConfig+0x308>)
 8008a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a06:	bf00      	nop
 8008a08:	08008a21 	.word	0x08008a21
 8008a0c:	08008a29 	.word	0x08008a29
 8008a10:	08008a31 	.word	0x08008a31
 8008a14:	08008a39 	.word	0x08008a39
 8008a18:	08008a65 	.word	0x08008a65
 8008a1c:	08008a6d 	.word	0x08008a6d
 8008a20:	2300      	movs	r3, #0
 8008a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a26:	e259      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008a28:	2304      	movs	r3, #4
 8008a2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a2e:	e255      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008a30:	2308      	movs	r3, #8
 8008a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a36:	e251      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008a38:	2310      	movs	r3, #16
 8008a3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a3e:	e24d      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008a40:	cfff69f3 	.word	0xcfff69f3
 8008a44:	58000c00 	.word	0x58000c00
 8008a48:	11fff4ff 	.word	0x11fff4ff
 8008a4c:	40011000 	.word	0x40011000
 8008a50:	58024400 	.word	0x58024400
 8008a54:	40004400 	.word	0x40004400
 8008a58:	40004800 	.word	0x40004800
 8008a5c:	40004c00 	.word	0x40004c00
 8008a60:	40005000 	.word	0x40005000
 8008a64:	2320      	movs	r3, #32
 8008a66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a6a:	e237      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008a6c:	2340      	movs	r3, #64	; 0x40
 8008a6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a72:	e233      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008a74:	2380      	movs	r3, #128	; 0x80
 8008a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a7a:	bf00      	nop
 8008a7c:	e22e      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4ab5      	ldr	r2, [pc, #724]	; (8008d58 <UART_SetConfig+0x658>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d178      	bne.n	8008b7a <UART_SetConfig+0x47a>
 8008a88:	4bb4      	ldr	r3, [pc, #720]	; (8008d5c <UART_SetConfig+0x65c>)
 8008a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a90:	2b28      	cmp	r3, #40	; 0x28
 8008a92:	d86d      	bhi.n	8008b70 <UART_SetConfig+0x470>
 8008a94:	a201      	add	r2, pc, #4	; (adr r2, 8008a9c <UART_SetConfig+0x39c>)
 8008a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a9a:	bf00      	nop
 8008a9c:	08008b41 	.word	0x08008b41
 8008aa0:	08008b71 	.word	0x08008b71
 8008aa4:	08008b71 	.word	0x08008b71
 8008aa8:	08008b71 	.word	0x08008b71
 8008aac:	08008b71 	.word	0x08008b71
 8008ab0:	08008b71 	.word	0x08008b71
 8008ab4:	08008b71 	.word	0x08008b71
 8008ab8:	08008b71 	.word	0x08008b71
 8008abc:	08008b49 	.word	0x08008b49
 8008ac0:	08008b71 	.word	0x08008b71
 8008ac4:	08008b71 	.word	0x08008b71
 8008ac8:	08008b71 	.word	0x08008b71
 8008acc:	08008b71 	.word	0x08008b71
 8008ad0:	08008b71 	.word	0x08008b71
 8008ad4:	08008b71 	.word	0x08008b71
 8008ad8:	08008b71 	.word	0x08008b71
 8008adc:	08008b51 	.word	0x08008b51
 8008ae0:	08008b71 	.word	0x08008b71
 8008ae4:	08008b71 	.word	0x08008b71
 8008ae8:	08008b71 	.word	0x08008b71
 8008aec:	08008b71 	.word	0x08008b71
 8008af0:	08008b71 	.word	0x08008b71
 8008af4:	08008b71 	.word	0x08008b71
 8008af8:	08008b71 	.word	0x08008b71
 8008afc:	08008b59 	.word	0x08008b59
 8008b00:	08008b71 	.word	0x08008b71
 8008b04:	08008b71 	.word	0x08008b71
 8008b08:	08008b71 	.word	0x08008b71
 8008b0c:	08008b71 	.word	0x08008b71
 8008b10:	08008b71 	.word	0x08008b71
 8008b14:	08008b71 	.word	0x08008b71
 8008b18:	08008b71 	.word	0x08008b71
 8008b1c:	08008b61 	.word	0x08008b61
 8008b20:	08008b71 	.word	0x08008b71
 8008b24:	08008b71 	.word	0x08008b71
 8008b28:	08008b71 	.word	0x08008b71
 8008b2c:	08008b71 	.word	0x08008b71
 8008b30:	08008b71 	.word	0x08008b71
 8008b34:	08008b71 	.word	0x08008b71
 8008b38:	08008b71 	.word	0x08008b71
 8008b3c:	08008b69 	.word	0x08008b69
 8008b40:	2301      	movs	r3, #1
 8008b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b46:	e1c9      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008b48:	2304      	movs	r3, #4
 8008b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b4e:	e1c5      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008b50:	2308      	movs	r3, #8
 8008b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b56:	e1c1      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008b58:	2310      	movs	r3, #16
 8008b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b5e:	e1bd      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008b60:	2320      	movs	r3, #32
 8008b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b66:	e1b9      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008b68:	2340      	movs	r3, #64	; 0x40
 8008b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b6e:	e1b5      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008b70:	2380      	movs	r3, #128	; 0x80
 8008b72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b76:	bf00      	nop
 8008b78:	e1b0      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a78      	ldr	r2, [pc, #480]	; (8008d60 <UART_SetConfig+0x660>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d132      	bne.n	8008bea <UART_SetConfig+0x4ea>
 8008b84:	4b75      	ldr	r3, [pc, #468]	; (8008d5c <UART_SetConfig+0x65c>)
 8008b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b88:	f003 0307 	and.w	r3, r3, #7
 8008b8c:	2b05      	cmp	r3, #5
 8008b8e:	d827      	bhi.n	8008be0 <UART_SetConfig+0x4e0>
 8008b90:	a201      	add	r2, pc, #4	; (adr r2, 8008b98 <UART_SetConfig+0x498>)
 8008b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b96:	bf00      	nop
 8008b98:	08008bb1 	.word	0x08008bb1
 8008b9c:	08008bb9 	.word	0x08008bb9
 8008ba0:	08008bc1 	.word	0x08008bc1
 8008ba4:	08008bc9 	.word	0x08008bc9
 8008ba8:	08008bd1 	.word	0x08008bd1
 8008bac:	08008bd9 	.word	0x08008bd9
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bb6:	e191      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008bb8:	2304      	movs	r3, #4
 8008bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bbe:	e18d      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008bc0:	2308      	movs	r3, #8
 8008bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bc6:	e189      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008bc8:	2310      	movs	r3, #16
 8008bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bce:	e185      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008bd0:	2320      	movs	r3, #32
 8008bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bd6:	e181      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008bd8:	2340      	movs	r3, #64	; 0x40
 8008bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008bde:	e17d      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008be0:	2380      	movs	r3, #128	; 0x80
 8008be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008be6:	bf00      	nop
 8008be8:	e178      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a5d      	ldr	r2, [pc, #372]	; (8008d64 <UART_SetConfig+0x664>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d132      	bne.n	8008c5a <UART_SetConfig+0x55a>
 8008bf4:	4b59      	ldr	r3, [pc, #356]	; (8008d5c <UART_SetConfig+0x65c>)
 8008bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bf8:	f003 0307 	and.w	r3, r3, #7
 8008bfc:	2b05      	cmp	r3, #5
 8008bfe:	d827      	bhi.n	8008c50 <UART_SetConfig+0x550>
 8008c00:	a201      	add	r2, pc, #4	; (adr r2, 8008c08 <UART_SetConfig+0x508>)
 8008c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c06:	bf00      	nop
 8008c08:	08008c21 	.word	0x08008c21
 8008c0c:	08008c29 	.word	0x08008c29
 8008c10:	08008c31 	.word	0x08008c31
 8008c14:	08008c39 	.word	0x08008c39
 8008c18:	08008c41 	.word	0x08008c41
 8008c1c:	08008c49 	.word	0x08008c49
 8008c20:	2300      	movs	r3, #0
 8008c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c26:	e159      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008c28:	2304      	movs	r3, #4
 8008c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c2e:	e155      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008c30:	2308      	movs	r3, #8
 8008c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c36:	e151      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008c38:	2310      	movs	r3, #16
 8008c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c3e:	e14d      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008c40:	2320      	movs	r3, #32
 8008c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c46:	e149      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008c48:	2340      	movs	r3, #64	; 0x40
 8008c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c4e:	e145      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008c50:	2380      	movs	r3, #128	; 0x80
 8008c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c56:	bf00      	nop
 8008c58:	e140      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a42      	ldr	r2, [pc, #264]	; (8008d68 <UART_SetConfig+0x668>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	f040 8083 	bne.w	8008d6c <UART_SetConfig+0x66c>
 8008c66:	4b3d      	ldr	r3, [pc, #244]	; (8008d5c <UART_SetConfig+0x65c>)
 8008c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c6e:	2b28      	cmp	r3, #40	; 0x28
 8008c70:	d86c      	bhi.n	8008d4c <UART_SetConfig+0x64c>
 8008c72:	a201      	add	r2, pc, #4	; (adr r2, 8008c78 <UART_SetConfig+0x578>)
 8008c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c78:	08008d1d 	.word	0x08008d1d
 8008c7c:	08008d4d 	.word	0x08008d4d
 8008c80:	08008d4d 	.word	0x08008d4d
 8008c84:	08008d4d 	.word	0x08008d4d
 8008c88:	08008d4d 	.word	0x08008d4d
 8008c8c:	08008d4d 	.word	0x08008d4d
 8008c90:	08008d4d 	.word	0x08008d4d
 8008c94:	08008d4d 	.word	0x08008d4d
 8008c98:	08008d25 	.word	0x08008d25
 8008c9c:	08008d4d 	.word	0x08008d4d
 8008ca0:	08008d4d 	.word	0x08008d4d
 8008ca4:	08008d4d 	.word	0x08008d4d
 8008ca8:	08008d4d 	.word	0x08008d4d
 8008cac:	08008d4d 	.word	0x08008d4d
 8008cb0:	08008d4d 	.word	0x08008d4d
 8008cb4:	08008d4d 	.word	0x08008d4d
 8008cb8:	08008d2d 	.word	0x08008d2d
 8008cbc:	08008d4d 	.word	0x08008d4d
 8008cc0:	08008d4d 	.word	0x08008d4d
 8008cc4:	08008d4d 	.word	0x08008d4d
 8008cc8:	08008d4d 	.word	0x08008d4d
 8008ccc:	08008d4d 	.word	0x08008d4d
 8008cd0:	08008d4d 	.word	0x08008d4d
 8008cd4:	08008d4d 	.word	0x08008d4d
 8008cd8:	08008d35 	.word	0x08008d35
 8008cdc:	08008d4d 	.word	0x08008d4d
 8008ce0:	08008d4d 	.word	0x08008d4d
 8008ce4:	08008d4d 	.word	0x08008d4d
 8008ce8:	08008d4d 	.word	0x08008d4d
 8008cec:	08008d4d 	.word	0x08008d4d
 8008cf0:	08008d4d 	.word	0x08008d4d
 8008cf4:	08008d4d 	.word	0x08008d4d
 8008cf8:	08008d3d 	.word	0x08008d3d
 8008cfc:	08008d4d 	.word	0x08008d4d
 8008d00:	08008d4d 	.word	0x08008d4d
 8008d04:	08008d4d 	.word	0x08008d4d
 8008d08:	08008d4d 	.word	0x08008d4d
 8008d0c:	08008d4d 	.word	0x08008d4d
 8008d10:	08008d4d 	.word	0x08008d4d
 8008d14:	08008d4d 	.word	0x08008d4d
 8008d18:	08008d45 	.word	0x08008d45
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d22:	e0db      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008d24:	2304      	movs	r3, #4
 8008d26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d2a:	e0d7      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008d2c:	2308      	movs	r3, #8
 8008d2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d32:	e0d3      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008d34:	2310      	movs	r3, #16
 8008d36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d3a:	e0cf      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008d3c:	2320      	movs	r3, #32
 8008d3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d42:	e0cb      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008d44:	2340      	movs	r3, #64	; 0x40
 8008d46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d4a:	e0c7      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008d4c:	2380      	movs	r3, #128	; 0x80
 8008d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d52:	bf00      	nop
 8008d54:	e0c2      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008d56:	bf00      	nop
 8008d58:	40011400 	.word	0x40011400
 8008d5c:	58024400 	.word	0x58024400
 8008d60:	40007800 	.word	0x40007800
 8008d64:	40007c00 	.word	0x40007c00
 8008d68:	40011800 	.word	0x40011800
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4ab2      	ldr	r2, [pc, #712]	; (800903c <UART_SetConfig+0x93c>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d177      	bne.n	8008e66 <UART_SetConfig+0x766>
 8008d76:	4bb2      	ldr	r3, [pc, #712]	; (8009040 <UART_SetConfig+0x940>)
 8008d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d7e:	2b28      	cmp	r3, #40	; 0x28
 8008d80:	d86c      	bhi.n	8008e5c <UART_SetConfig+0x75c>
 8008d82:	a201      	add	r2, pc, #4	; (adr r2, 8008d88 <UART_SetConfig+0x688>)
 8008d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d88:	08008e2d 	.word	0x08008e2d
 8008d8c:	08008e5d 	.word	0x08008e5d
 8008d90:	08008e5d 	.word	0x08008e5d
 8008d94:	08008e5d 	.word	0x08008e5d
 8008d98:	08008e5d 	.word	0x08008e5d
 8008d9c:	08008e5d 	.word	0x08008e5d
 8008da0:	08008e5d 	.word	0x08008e5d
 8008da4:	08008e5d 	.word	0x08008e5d
 8008da8:	08008e35 	.word	0x08008e35
 8008dac:	08008e5d 	.word	0x08008e5d
 8008db0:	08008e5d 	.word	0x08008e5d
 8008db4:	08008e5d 	.word	0x08008e5d
 8008db8:	08008e5d 	.word	0x08008e5d
 8008dbc:	08008e5d 	.word	0x08008e5d
 8008dc0:	08008e5d 	.word	0x08008e5d
 8008dc4:	08008e5d 	.word	0x08008e5d
 8008dc8:	08008e3d 	.word	0x08008e3d
 8008dcc:	08008e5d 	.word	0x08008e5d
 8008dd0:	08008e5d 	.word	0x08008e5d
 8008dd4:	08008e5d 	.word	0x08008e5d
 8008dd8:	08008e5d 	.word	0x08008e5d
 8008ddc:	08008e5d 	.word	0x08008e5d
 8008de0:	08008e5d 	.word	0x08008e5d
 8008de4:	08008e5d 	.word	0x08008e5d
 8008de8:	08008e45 	.word	0x08008e45
 8008dec:	08008e5d 	.word	0x08008e5d
 8008df0:	08008e5d 	.word	0x08008e5d
 8008df4:	08008e5d 	.word	0x08008e5d
 8008df8:	08008e5d 	.word	0x08008e5d
 8008dfc:	08008e5d 	.word	0x08008e5d
 8008e00:	08008e5d 	.word	0x08008e5d
 8008e04:	08008e5d 	.word	0x08008e5d
 8008e08:	08008e4d 	.word	0x08008e4d
 8008e0c:	08008e5d 	.word	0x08008e5d
 8008e10:	08008e5d 	.word	0x08008e5d
 8008e14:	08008e5d 	.word	0x08008e5d
 8008e18:	08008e5d 	.word	0x08008e5d
 8008e1c:	08008e5d 	.word	0x08008e5d
 8008e20:	08008e5d 	.word	0x08008e5d
 8008e24:	08008e5d 	.word	0x08008e5d
 8008e28:	08008e55 	.word	0x08008e55
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e32:	e053      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008e34:	2304      	movs	r3, #4
 8008e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e3a:	e04f      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008e3c:	2308      	movs	r3, #8
 8008e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e42:	e04b      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008e44:	2310      	movs	r3, #16
 8008e46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e4a:	e047      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008e4c:	2320      	movs	r3, #32
 8008e4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e52:	e043      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008e54:	2340      	movs	r3, #64	; 0x40
 8008e56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e5a:	e03f      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008e5c:	2380      	movs	r3, #128	; 0x80
 8008e5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e62:	bf00      	nop
 8008e64:	e03a      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a76      	ldr	r2, [pc, #472]	; (8009044 <UART_SetConfig+0x944>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d132      	bne.n	8008ed6 <UART_SetConfig+0x7d6>
 8008e70:	4b73      	ldr	r3, [pc, #460]	; (8009040 <UART_SetConfig+0x940>)
 8008e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e74:	f003 0307 	and.w	r3, r3, #7
 8008e78:	2b05      	cmp	r3, #5
 8008e7a:	d827      	bhi.n	8008ecc <UART_SetConfig+0x7cc>
 8008e7c:	a201      	add	r2, pc, #4	; (adr r2, 8008e84 <UART_SetConfig+0x784>)
 8008e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e82:	bf00      	nop
 8008e84:	08008e9d 	.word	0x08008e9d
 8008e88:	08008ea5 	.word	0x08008ea5
 8008e8c:	08008ead 	.word	0x08008ead
 8008e90:	08008eb5 	.word	0x08008eb5
 8008e94:	08008ebd 	.word	0x08008ebd
 8008e98:	08008ec5 	.word	0x08008ec5
 8008e9c:	2302      	movs	r3, #2
 8008e9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ea2:	e01b      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008ea4:	2304      	movs	r3, #4
 8008ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008eaa:	e017      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008eac:	2308      	movs	r3, #8
 8008eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008eb2:	e013      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008eb4:	2310      	movs	r3, #16
 8008eb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008eba:	e00f      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008ebc:	2320      	movs	r3, #32
 8008ebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ec2:	e00b      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008ec4:	2340      	movs	r3, #64	; 0x40
 8008ec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008eca:	e007      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008ecc:	2380      	movs	r3, #128	; 0x80
 8008ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ed2:	bf00      	nop
 8008ed4:	e002      	b.n	8008edc <UART_SetConfig+0x7dc>
 8008ed6:	2380      	movs	r3, #128	; 0x80
 8008ed8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a58      	ldr	r2, [pc, #352]	; (8009044 <UART_SetConfig+0x944>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	f040 80b6 	bne.w	8009054 <UART_SetConfig+0x954>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008ee8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008eec:	2b08      	cmp	r3, #8
 8008eee:	d019      	beq.n	8008f24 <UART_SetConfig+0x824>
 8008ef0:	2b08      	cmp	r3, #8
 8008ef2:	dc04      	bgt.n	8008efe <UART_SetConfig+0x7fe>
 8008ef4:	2b02      	cmp	r3, #2
 8008ef6:	d009      	beq.n	8008f0c <UART_SetConfig+0x80c>
 8008ef8:	2b04      	cmp	r3, #4
 8008efa:	d00b      	beq.n	8008f14 <UART_SetConfig+0x814>
 8008efc:	e034      	b.n	8008f68 <UART_SetConfig+0x868>
 8008efe:	2b20      	cmp	r3, #32
 8008f00:	d02b      	beq.n	8008f5a <UART_SetConfig+0x85a>
 8008f02:	2b40      	cmp	r3, #64	; 0x40
 8008f04:	d02c      	beq.n	8008f60 <UART_SetConfig+0x860>
 8008f06:	2b10      	cmp	r3, #16
 8008f08:	d014      	beq.n	8008f34 <UART_SetConfig+0x834>
 8008f0a:	e02d      	b.n	8008f68 <UART_SetConfig+0x868>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008f0c:	f7fe fb16 	bl	800753c <HAL_RCCEx_GetD3PCLK1Freq>
 8008f10:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008f12:	e02f      	b.n	8008f74 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f14:	f107 0314 	add.w	r3, r7, #20
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7fe fb25 	bl	8007568 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f22:	e027      	b.n	8008f74 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f24:	f107 0308 	add.w	r3, r7, #8
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f7fe fc69 	bl	8007800 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f32:	e01f      	b.n	8008f74 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f34:	4b42      	ldr	r3, [pc, #264]	; (8009040 <UART_SetConfig+0x940>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f003 0320 	and.w	r3, r3, #32
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d009      	beq.n	8008f54 <UART_SetConfig+0x854>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008f40:	4b3f      	ldr	r3, [pc, #252]	; (8009040 <UART_SetConfig+0x940>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	08db      	lsrs	r3, r3, #3
 8008f46:	f003 0303 	and.w	r3, r3, #3
 8008f4a:	4a3f      	ldr	r2, [pc, #252]	; (8009048 <UART_SetConfig+0x948>)
 8008f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f50:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008f52:	e00f      	b.n	8008f74 <UART_SetConfig+0x874>
          pclk = (uint32_t) HSI_VALUE;
 8008f54:	4b3c      	ldr	r3, [pc, #240]	; (8009048 <UART_SetConfig+0x948>)
 8008f56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f58:	e00c      	b.n	8008f74 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008f5a:	4b3c      	ldr	r3, [pc, #240]	; (800904c <UART_SetConfig+0x94c>)
 8008f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f5e:	e009      	b.n	8008f74 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008f66:	e005      	b.n	8008f74 <UART_SetConfig+0x874>
      default:
        pclk = 0U;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008f72:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	f000 8251 	beq.w	800941e <UART_SetConfig+0xd1e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f80:	4a33      	ldr	r2, [pc, #204]	; (8009050 <UART_SetConfig+0x950>)
 8008f82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f86:	461a      	mov	r2, r3
 8008f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f8e:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	685a      	ldr	r2, [r3, #4]
 8008f94:	4613      	mov	r3, r2
 8008f96:	005b      	lsls	r3, r3, #1
 8008f98:	4413      	add	r3, r2
 8008f9a:	6a3a      	ldr	r2, [r7, #32]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d305      	bcc.n	8008fac <UART_SetConfig+0x8ac>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008fa6:	6a3a      	ldr	r2, [r7, #32]
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d903      	bls.n	8008fb4 <UART_SetConfig+0x8b4>
      {
        ret = HAL_ERROR;
 8008fac:	2301      	movs	r3, #1
 8008fae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008fb2:	e234      	b.n	800941e <UART_SetConfig+0xd1e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f04f 0100 	mov.w	r1, #0
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc0:	4a23      	ldr	r2, [pc, #140]	; (8009050 <UART_SetConfig+0x950>)
 8008fc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	f04f 0400 	mov.w	r4, #0
 8008fcc:	461a      	mov	r2, r3
 8008fce:	4623      	mov	r3, r4
 8008fd0:	f7f7 f98e 	bl	80002f0 <__aeabi_uldivmod>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	460c      	mov	r4, r1
 8008fd8:	4619      	mov	r1, r3
 8008fda:	4622      	mov	r2, r4
 8008fdc:	f04f 0300 	mov.w	r3, #0
 8008fe0:	f04f 0400 	mov.w	r4, #0
 8008fe4:	0214      	lsls	r4, r2, #8
 8008fe6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008fea:	020b      	lsls	r3, r1, #8
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	6852      	ldr	r2, [r2, #4]
 8008ff0:	0852      	lsrs	r2, r2, #1
 8008ff2:	4611      	mov	r1, r2
 8008ff4:	f04f 0200 	mov.w	r2, #0
 8008ff8:	eb13 0b01 	adds.w	fp, r3, r1
 8008ffc:	eb44 0c02 	adc.w	ip, r4, r2
 8009000:	4658      	mov	r0, fp
 8009002:	4661      	mov	r1, ip
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	f04f 0400 	mov.w	r4, #0
 800900c:	461a      	mov	r2, r3
 800900e:	4623      	mov	r3, r4
 8009010:	f7f7 f96e 	bl	80002f0 <__aeabi_uldivmod>
 8009014:	4603      	mov	r3, r0
 8009016:	460c      	mov	r4, r1
 8009018:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800901a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009020:	d308      	bcc.n	8009034 <UART_SetConfig+0x934>
 8009022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009024:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009028:	d204      	bcs.n	8009034 <UART_SetConfig+0x934>
        {
          huart->Instance->BRR = usartdiv;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009030:	60da      	str	r2, [r3, #12]
 8009032:	e1f4      	b.n	800941e <UART_SetConfig+0xd1e>
        }
        else
        {
          ret = HAL_ERROR;
 8009034:	2301      	movs	r3, #1
 8009036:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800903a:	e1f0      	b.n	800941e <UART_SetConfig+0xd1e>
 800903c:	40011c00 	.word	0x40011c00
 8009040:	58024400 	.word	0x58024400
 8009044:	58000c00 	.word	0x58000c00
 8009048:	03d09000 	.word	0x03d09000
 800904c:	003d0900 	.word	0x003d0900
 8009050:	0800a360 	.word	0x0800a360
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	69db      	ldr	r3, [r3, #28]
 8009058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800905c:	f040 80f8 	bne.w	8009250 <UART_SetConfig+0xb50>
  {
    switch (clocksource)
 8009060:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009064:	2b40      	cmp	r3, #64	; 0x40
 8009066:	f200 80b7 	bhi.w	80091d8 <UART_SetConfig+0xad8>
 800906a:	a201      	add	r2, pc, #4	; (adr r2, 8009070 <UART_SetConfig+0x970>)
 800906c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009070:	08009175 	.word	0x08009175
 8009074:	0800917d 	.word	0x0800917d
 8009078:	080091d9 	.word	0x080091d9
 800907c:	080091d9 	.word	0x080091d9
 8009080:	08009185 	.word	0x08009185
 8009084:	080091d9 	.word	0x080091d9
 8009088:	080091d9 	.word	0x080091d9
 800908c:	080091d9 	.word	0x080091d9
 8009090:	08009195 	.word	0x08009195
 8009094:	080091d9 	.word	0x080091d9
 8009098:	080091d9 	.word	0x080091d9
 800909c:	080091d9 	.word	0x080091d9
 80090a0:	080091d9 	.word	0x080091d9
 80090a4:	080091d9 	.word	0x080091d9
 80090a8:	080091d9 	.word	0x080091d9
 80090ac:	080091d9 	.word	0x080091d9
 80090b0:	080091a5 	.word	0x080091a5
 80090b4:	080091d9 	.word	0x080091d9
 80090b8:	080091d9 	.word	0x080091d9
 80090bc:	080091d9 	.word	0x080091d9
 80090c0:	080091d9 	.word	0x080091d9
 80090c4:	080091d9 	.word	0x080091d9
 80090c8:	080091d9 	.word	0x080091d9
 80090cc:	080091d9 	.word	0x080091d9
 80090d0:	080091d9 	.word	0x080091d9
 80090d4:	080091d9 	.word	0x080091d9
 80090d8:	080091d9 	.word	0x080091d9
 80090dc:	080091d9 	.word	0x080091d9
 80090e0:	080091d9 	.word	0x080091d9
 80090e4:	080091d9 	.word	0x080091d9
 80090e8:	080091d9 	.word	0x080091d9
 80090ec:	080091d9 	.word	0x080091d9
 80090f0:	080091cb 	.word	0x080091cb
 80090f4:	080091d9 	.word	0x080091d9
 80090f8:	080091d9 	.word	0x080091d9
 80090fc:	080091d9 	.word	0x080091d9
 8009100:	080091d9 	.word	0x080091d9
 8009104:	080091d9 	.word	0x080091d9
 8009108:	080091d9 	.word	0x080091d9
 800910c:	080091d9 	.word	0x080091d9
 8009110:	080091d9 	.word	0x080091d9
 8009114:	080091d9 	.word	0x080091d9
 8009118:	080091d9 	.word	0x080091d9
 800911c:	080091d9 	.word	0x080091d9
 8009120:	080091d9 	.word	0x080091d9
 8009124:	080091d9 	.word	0x080091d9
 8009128:	080091d9 	.word	0x080091d9
 800912c:	080091d9 	.word	0x080091d9
 8009130:	080091d9 	.word	0x080091d9
 8009134:	080091d9 	.word	0x080091d9
 8009138:	080091d9 	.word	0x080091d9
 800913c:	080091d9 	.word	0x080091d9
 8009140:	080091d9 	.word	0x080091d9
 8009144:	080091d9 	.word	0x080091d9
 8009148:	080091d9 	.word	0x080091d9
 800914c:	080091d9 	.word	0x080091d9
 8009150:	080091d9 	.word	0x080091d9
 8009154:	080091d9 	.word	0x080091d9
 8009158:	080091d9 	.word	0x080091d9
 800915c:	080091d9 	.word	0x080091d9
 8009160:	080091d9 	.word	0x080091d9
 8009164:	080091d9 	.word	0x080091d9
 8009168:	080091d9 	.word	0x080091d9
 800916c:	080091d9 	.word	0x080091d9
 8009170:	080091d1 	.word	0x080091d1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009174:	f7fd f8dc 	bl	8006330 <HAL_RCC_GetPCLK1Freq>
 8009178:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800917a:	e033      	b.n	80091e4 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800917c:	f7fd f8ee 	bl	800635c <HAL_RCC_GetPCLK2Freq>
 8009180:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009182:	e02f      	b.n	80091e4 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009184:	f107 0314 	add.w	r3, r7, #20
 8009188:	4618      	mov	r0, r3
 800918a:	f7fe f9ed 	bl	8007568 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009192:	e027      	b.n	80091e4 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009194:	f107 0308 	add.w	r3, r7, #8
 8009198:	4618      	mov	r0, r3
 800919a:	f7fe fb31 	bl	8007800 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80091a2:	e01f      	b.n	80091e4 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091a4:	4ba8      	ldr	r3, [pc, #672]	; (8009448 <UART_SetConfig+0xd48>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f003 0320 	and.w	r3, r3, #32
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d009      	beq.n	80091c4 <UART_SetConfig+0xac4>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80091b0:	4ba5      	ldr	r3, [pc, #660]	; (8009448 <UART_SetConfig+0xd48>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	08db      	lsrs	r3, r3, #3
 80091b6:	f003 0303 	and.w	r3, r3, #3
 80091ba:	4aa4      	ldr	r2, [pc, #656]	; (800944c <UART_SetConfig+0xd4c>)
 80091bc:	fa22 f303 	lsr.w	r3, r2, r3
 80091c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80091c2:	e00f      	b.n	80091e4 <UART_SetConfig+0xae4>
          pclk = (uint32_t) HSI_VALUE;
 80091c4:	4ba1      	ldr	r3, [pc, #644]	; (800944c <UART_SetConfig+0xd4c>)
 80091c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80091c8:	e00c      	b.n	80091e4 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80091ca:	4ba1      	ldr	r3, [pc, #644]	; (8009450 <UART_SetConfig+0xd50>)
 80091cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80091ce:	e009      	b.n	80091e4 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80091d6:	e005      	b.n	80091e4 <UART_SetConfig+0xae4>
      default:
        pclk = 0U;
 80091d8:	2300      	movs	r3, #0
 80091da:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80091dc:	2301      	movs	r3, #1
 80091de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80091e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80091e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	f000 8119 	beq.w	800941e <UART_SetConfig+0xd1e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f0:	4a98      	ldr	r2, [pc, #608]	; (8009454 <UART_SetConfig+0xd54>)
 80091f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091f6:	461a      	mov	r2, r3
 80091f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80091fe:	005a      	lsls	r2, r3, #1
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	085b      	lsrs	r3, r3, #1
 8009206:	441a      	add	r2, r3
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009210:	b29b      	uxth	r3, r3
 8009212:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009216:	2b0f      	cmp	r3, #15
 8009218:	d916      	bls.n	8009248 <UART_SetConfig+0xb48>
 800921a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009220:	d212      	bcs.n	8009248 <UART_SetConfig+0xb48>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009224:	b29b      	uxth	r3, r3
 8009226:	f023 030f 	bic.w	r3, r3, #15
 800922a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800922c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922e:	085b      	lsrs	r3, r3, #1
 8009230:	b29b      	uxth	r3, r3
 8009232:	f003 0307 	and.w	r3, r3, #7
 8009236:	b29a      	uxth	r2, r3
 8009238:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800923a:	4313      	orrs	r3, r2
 800923c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009244:	60da      	str	r2, [r3, #12]
 8009246:	e0ea      	b.n	800941e <UART_SetConfig+0xd1e>
      }
      else
      {
        ret = HAL_ERROR;
 8009248:	2301      	movs	r3, #1
 800924a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800924e:	e0e6      	b.n	800941e <UART_SetConfig+0xd1e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009250:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009254:	2b40      	cmp	r3, #64	; 0x40
 8009256:	f200 80b7 	bhi.w	80093c8 <UART_SetConfig+0xcc8>
 800925a:	a201      	add	r2, pc, #4	; (adr r2, 8009260 <UART_SetConfig+0xb60>)
 800925c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009260:	08009365 	.word	0x08009365
 8009264:	0800936d 	.word	0x0800936d
 8009268:	080093c9 	.word	0x080093c9
 800926c:	080093c9 	.word	0x080093c9
 8009270:	08009375 	.word	0x08009375
 8009274:	080093c9 	.word	0x080093c9
 8009278:	080093c9 	.word	0x080093c9
 800927c:	080093c9 	.word	0x080093c9
 8009280:	08009385 	.word	0x08009385
 8009284:	080093c9 	.word	0x080093c9
 8009288:	080093c9 	.word	0x080093c9
 800928c:	080093c9 	.word	0x080093c9
 8009290:	080093c9 	.word	0x080093c9
 8009294:	080093c9 	.word	0x080093c9
 8009298:	080093c9 	.word	0x080093c9
 800929c:	080093c9 	.word	0x080093c9
 80092a0:	08009395 	.word	0x08009395
 80092a4:	080093c9 	.word	0x080093c9
 80092a8:	080093c9 	.word	0x080093c9
 80092ac:	080093c9 	.word	0x080093c9
 80092b0:	080093c9 	.word	0x080093c9
 80092b4:	080093c9 	.word	0x080093c9
 80092b8:	080093c9 	.word	0x080093c9
 80092bc:	080093c9 	.word	0x080093c9
 80092c0:	080093c9 	.word	0x080093c9
 80092c4:	080093c9 	.word	0x080093c9
 80092c8:	080093c9 	.word	0x080093c9
 80092cc:	080093c9 	.word	0x080093c9
 80092d0:	080093c9 	.word	0x080093c9
 80092d4:	080093c9 	.word	0x080093c9
 80092d8:	080093c9 	.word	0x080093c9
 80092dc:	080093c9 	.word	0x080093c9
 80092e0:	080093bb 	.word	0x080093bb
 80092e4:	080093c9 	.word	0x080093c9
 80092e8:	080093c9 	.word	0x080093c9
 80092ec:	080093c9 	.word	0x080093c9
 80092f0:	080093c9 	.word	0x080093c9
 80092f4:	080093c9 	.word	0x080093c9
 80092f8:	080093c9 	.word	0x080093c9
 80092fc:	080093c9 	.word	0x080093c9
 8009300:	080093c9 	.word	0x080093c9
 8009304:	080093c9 	.word	0x080093c9
 8009308:	080093c9 	.word	0x080093c9
 800930c:	080093c9 	.word	0x080093c9
 8009310:	080093c9 	.word	0x080093c9
 8009314:	080093c9 	.word	0x080093c9
 8009318:	080093c9 	.word	0x080093c9
 800931c:	080093c9 	.word	0x080093c9
 8009320:	080093c9 	.word	0x080093c9
 8009324:	080093c9 	.word	0x080093c9
 8009328:	080093c9 	.word	0x080093c9
 800932c:	080093c9 	.word	0x080093c9
 8009330:	080093c9 	.word	0x080093c9
 8009334:	080093c9 	.word	0x080093c9
 8009338:	080093c9 	.word	0x080093c9
 800933c:	080093c9 	.word	0x080093c9
 8009340:	080093c9 	.word	0x080093c9
 8009344:	080093c9 	.word	0x080093c9
 8009348:	080093c9 	.word	0x080093c9
 800934c:	080093c9 	.word	0x080093c9
 8009350:	080093c9 	.word	0x080093c9
 8009354:	080093c9 	.word	0x080093c9
 8009358:	080093c9 	.word	0x080093c9
 800935c:	080093c9 	.word	0x080093c9
 8009360:	080093c1 	.word	0x080093c1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009364:	f7fc ffe4 	bl	8006330 <HAL_RCC_GetPCLK1Freq>
 8009368:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800936a:	e033      	b.n	80093d4 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800936c:	f7fc fff6 	bl	800635c <HAL_RCC_GetPCLK2Freq>
 8009370:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009372:	e02f      	b.n	80093d4 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009374:	f107 0314 	add.w	r3, r7, #20
 8009378:	4618      	mov	r0, r3
 800937a:	f7fe f8f5 	bl	8007568 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800937e:	69bb      	ldr	r3, [r7, #24]
 8009380:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009382:	e027      	b.n	80093d4 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009384:	f107 0308 	add.w	r3, r7, #8
 8009388:	4618      	mov	r0, r3
 800938a:	f7fe fa39 	bl	8007800 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009392:	e01f      	b.n	80093d4 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009394:	4b2c      	ldr	r3, [pc, #176]	; (8009448 <UART_SetConfig+0xd48>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f003 0320 	and.w	r3, r3, #32
 800939c:	2b00      	cmp	r3, #0
 800939e:	d009      	beq.n	80093b4 <UART_SetConfig+0xcb4>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80093a0:	4b29      	ldr	r3, [pc, #164]	; (8009448 <UART_SetConfig+0xd48>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	08db      	lsrs	r3, r3, #3
 80093a6:	f003 0303 	and.w	r3, r3, #3
 80093aa:	4a28      	ldr	r2, [pc, #160]	; (800944c <UART_SetConfig+0xd4c>)
 80093ac:	fa22 f303 	lsr.w	r3, r2, r3
 80093b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80093b2:	e00f      	b.n	80093d4 <UART_SetConfig+0xcd4>
          pclk = (uint32_t) HSI_VALUE;
 80093b4:	4b25      	ldr	r3, [pc, #148]	; (800944c <UART_SetConfig+0xd4c>)
 80093b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80093b8:	e00c      	b.n	80093d4 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80093ba:	4b25      	ldr	r3, [pc, #148]	; (8009450 <UART_SetConfig+0xd50>)
 80093bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80093be:	e009      	b.n	80093d4 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80093c6:	e005      	b.n	80093d4 <UART_SetConfig+0xcd4>
      default:
        pclk = 0U;
 80093c8:	2300      	movs	r3, #0
 80093ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80093cc:	2301      	movs	r3, #1
 80093ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80093d2:	bf00      	nop
    }

    if (pclk != 0U)
 80093d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d021      	beq.n	800941e <UART_SetConfig+0xd1e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093de:	4a1d      	ldr	r2, [pc, #116]	; (8009454 <UART_SetConfig+0xd54>)
 80093e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093e4:	461a      	mov	r2, r3
 80093e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e8:	fbb3 f2f2 	udiv	r2, r3, r2
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	085b      	lsrs	r3, r3, #1
 80093f2:	441a      	add	r2, r3
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009402:	2b0f      	cmp	r3, #15
 8009404:	d908      	bls.n	8009418 <UART_SetConfig+0xd18>
 8009406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800940c:	d204      	bcs.n	8009418 <UART_SetConfig+0xd18>
      {
        huart->Instance->BRR = usartdiv;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009414:	60da      	str	r2, [r3, #12]
 8009416:	e002      	b.n	800941e <UART_SetConfig+0xd1e>
      }
      else
      {
        ret = HAL_ERROR;
 8009418:	2301      	movs	r3, #1
 800941a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2201      	movs	r2, #1
 8009422:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2201      	movs	r2, #1
 800942a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2200      	movs	r2, #0
 8009432:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800943a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800943e:	4618      	mov	r0, r3
 8009440:	3738      	adds	r7, #56	; 0x38
 8009442:	46bd      	mov	sp, r7
 8009444:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8009448:	58024400 	.word	0x58024400
 800944c:	03d09000 	.word	0x03d09000
 8009450:	003d0900 	.word	0x003d0900
 8009454:	0800a360 	.word	0x0800a360

08009458 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009458:	b480      	push	{r7}
 800945a:	b083      	sub	sp, #12
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009464:	f003 0301 	and.w	r3, r3, #1
 8009468:	2b00      	cmp	r3, #0
 800946a:	d00a      	beq.n	8009482 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	430a      	orrs	r2, r1
 8009480:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009486:	f003 0302 	and.w	r3, r3, #2
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00a      	beq.n	80094a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	430a      	orrs	r2, r1
 80094a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094a8:	f003 0304 	and.w	r3, r3, #4
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d00a      	beq.n	80094c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	430a      	orrs	r2, r1
 80094c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ca:	f003 0308 	and.w	r3, r3, #8
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d00a      	beq.n	80094e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	430a      	orrs	r2, r1
 80094e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ec:	f003 0310 	and.w	r3, r3, #16
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d00a      	beq.n	800950a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	430a      	orrs	r2, r1
 8009508:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800950e:	f003 0320 	and.w	r3, r3, #32
 8009512:	2b00      	cmp	r3, #0
 8009514:	d00a      	beq.n	800952c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	430a      	orrs	r2, r1
 800952a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009534:	2b00      	cmp	r3, #0
 8009536:	d01a      	beq.n	800956e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	430a      	orrs	r2, r1
 800954c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009552:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009556:	d10a      	bne.n	800956e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	430a      	orrs	r2, r1
 800956c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009576:	2b00      	cmp	r3, #0
 8009578:	d00a      	beq.n	8009590 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	430a      	orrs	r2, r1
 800958e:	605a      	str	r2, [r3, #4]
  }
}
 8009590:	bf00      	nop
 8009592:	370c      	adds	r7, #12
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b086      	sub	sp, #24
 80095a0:	af02      	add	r7, sp, #8
 80095a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2200      	movs	r2, #0
 80095a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80095ac:	f7f8 f866 	bl	800167c <HAL_GetTick>
 80095b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f003 0308 	and.w	r3, r3, #8
 80095bc:	2b08      	cmp	r3, #8
 80095be:	d10e      	bne.n	80095de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80095c4:	9300      	str	r3, [sp, #0]
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 f82c 	bl	800962c <UART_WaitOnFlagUntilTimeout>
 80095d4:	4603      	mov	r3, r0
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d001      	beq.n	80095de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095da:	2303      	movs	r3, #3
 80095dc:	e022      	b.n	8009624 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f003 0304 	and.w	r3, r3, #4
 80095e8:	2b04      	cmp	r3, #4
 80095ea:	d10e      	bne.n	800960a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80095f0:	9300      	str	r3, [sp, #0]
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2200      	movs	r2, #0
 80095f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 f816 	bl	800962c <UART_WaitOnFlagUntilTimeout>
 8009600:	4603      	mov	r3, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	d001      	beq.n	800960a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009606:	2303      	movs	r3, #3
 8009608:	e00c      	b.n	8009624 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2220      	movs	r2, #32
 800960e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2220      	movs	r2, #32
 8009616:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2200      	movs	r2, #0
 800961e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009622:	2300      	movs	r3, #0
}
 8009624:	4618      	mov	r0, r3
 8009626:	3710      	adds	r7, #16
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	60b9      	str	r1, [r7, #8]
 8009636:	603b      	str	r3, [r7, #0]
 8009638:	4613      	mov	r3, r2
 800963a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800963c:	e062      	b.n	8009704 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800963e:	69bb      	ldr	r3, [r7, #24]
 8009640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009644:	d05e      	beq.n	8009704 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009646:	f7f8 f819 	bl	800167c <HAL_GetTick>
 800964a:	4602      	mov	r2, r0
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	1ad3      	subs	r3, r2, r3
 8009650:	69ba      	ldr	r2, [r7, #24]
 8009652:	429a      	cmp	r2, r3
 8009654:	d302      	bcc.n	800965c <UART_WaitOnFlagUntilTimeout+0x30>
 8009656:	69bb      	ldr	r3, [r7, #24]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d11d      	bne.n	8009698 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800966a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	689a      	ldr	r2, [r3, #8]
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f022 0201 	bic.w	r2, r2, #1
 800967a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2220      	movs	r2, #32
 8009680:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2220      	movs	r2, #32
 8009688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2200      	movs	r2, #0
 8009690:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009694:	2303      	movs	r3, #3
 8009696:	e045      	b.n	8009724 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f003 0304 	and.w	r3, r3, #4
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d02e      	beq.n	8009704 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	69db      	ldr	r3, [r3, #28]
 80096ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096b4:	d126      	bne.n	8009704 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80096be:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80096ce:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	689a      	ldr	r2, [r3, #8]
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f022 0201 	bic.w	r2, r2, #1
 80096de:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2220      	movs	r2, #32
 80096e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2220      	movs	r2, #32
 80096ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2220      	movs	r2, #32
 80096f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2200      	movs	r2, #0
 80096fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8009700:	2303      	movs	r3, #3
 8009702:	e00f      	b.n	8009724 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	69da      	ldr	r2, [r3, #28]
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	4013      	ands	r3, r2
 800970e:	68ba      	ldr	r2, [r7, #8]
 8009710:	429a      	cmp	r2, r3
 8009712:	bf0c      	ite	eq
 8009714:	2301      	moveq	r3, #1
 8009716:	2300      	movne	r3, #0
 8009718:	b2db      	uxtb	r3, r3
 800971a:	461a      	mov	r2, r3
 800971c:	79fb      	ldrb	r3, [r7, #7]
 800971e:	429a      	cmp	r2, r3
 8009720:	d08d      	beq.n	800963e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009722:	2300      	movs	r3, #0
}
 8009724:	4618      	mov	r0, r3
 8009726:	3710      	adds	r7, #16
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800972c:	b480      	push	{r7}
 800972e:	b085      	sub	sp, #20
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800973a:	2b01      	cmp	r3, #1
 800973c:	d101      	bne.n	8009742 <HAL_UARTEx_DisableFifoMode+0x16>
 800973e:	2302      	movs	r3, #2
 8009740:	e027      	b.n	8009792 <HAL_UARTEx_DisableFifoMode+0x66>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2201      	movs	r2, #1
 8009746:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2224      	movs	r2, #36	; 0x24
 800974e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	681a      	ldr	r2, [r3, #0]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f022 0201 	bic.w	r2, r2, #1
 8009768:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009770:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	68fa      	ldr	r2, [r7, #12]
 800977e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2220      	movs	r2, #32
 8009784:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009790:	2300      	movs	r3, #0
}
 8009792:	4618      	mov	r0, r3
 8009794:	3714      	adds	r7, #20
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr

0800979e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800979e:	b580      	push	{r7, lr}
 80097a0:	b084      	sub	sp, #16
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
 80097a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d101      	bne.n	80097b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80097b2:	2302      	movs	r3, #2
 80097b4:	e02d      	b.n	8009812 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2201      	movs	r2, #1
 80097ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2224      	movs	r2, #36	; 0x24
 80097c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f022 0201 	bic.w	r2, r2, #1
 80097dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	683a      	ldr	r2, [r7, #0]
 80097ee:	430a      	orrs	r2, r1
 80097f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 f850 	bl	8009898 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	68fa      	ldr	r2, [r7, #12]
 80097fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2220      	movs	r2, #32
 8009804:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2200      	movs	r2, #0
 800980c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009810:	2300      	movs	r3, #0
}
 8009812:	4618      	mov	r0, r3
 8009814:	3710      	adds	r7, #16
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800981a:	b580      	push	{r7, lr}
 800981c:	b084      	sub	sp, #16
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
 8009822:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800982a:	2b01      	cmp	r3, #1
 800982c:	d101      	bne.n	8009832 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800982e:	2302      	movs	r3, #2
 8009830:	e02d      	b.n	800988e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2201      	movs	r2, #1
 8009836:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2224      	movs	r2, #36	; 0x24
 800983e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	681a      	ldr	r2, [r3, #0]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f022 0201 	bic.w	r2, r2, #1
 8009858:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	689b      	ldr	r3, [r3, #8]
 8009860:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	683a      	ldr	r2, [r7, #0]
 800986a:	430a      	orrs	r2, r1
 800986c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 f812 	bl	8009898 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	68fa      	ldr	r2, [r7, #12]
 800987a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2220      	movs	r2, #32
 8009880:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800988c:	2300      	movs	r3, #0
}
 800988e:	4618      	mov	r0, r3
 8009890:	3710      	adds	r7, #16
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
	...

08009898 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009898:	b480      	push	{r7}
 800989a:	b089      	sub	sp, #36	; 0x24
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80098a0:	4a2f      	ldr	r2, [pc, #188]	; (8009960 <UARTEx_SetNbDataToProcess+0xc8>)
 80098a2:	f107 0314 	add.w	r3, r7, #20
 80098a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80098aa:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80098ae:	4a2d      	ldr	r2, [pc, #180]	; (8009964 <UARTEx_SetNbDataToProcess+0xcc>)
 80098b0:	f107 030c 	add.w	r3, r7, #12
 80098b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80098b8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d108      	bne.n	80098d6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2201      	movs	r2, #1
 80098c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2201      	movs	r2, #1
 80098d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80098d4:	e03d      	b.n	8009952 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80098d6:	2310      	movs	r3, #16
 80098d8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80098da:	2310      	movs	r3, #16
 80098dc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	689b      	ldr	r3, [r3, #8]
 80098e4:	0e5b      	lsrs	r3, r3, #25
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	f003 0307 	and.w	r3, r3, #7
 80098ec:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	0f5b      	lsrs	r3, r3, #29
 80098f6:	b2db      	uxtb	r3, r3
 80098f8:	f003 0307 	and.w	r3, r3, #7
 80098fc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80098fe:	7fbb      	ldrb	r3, [r7, #30]
 8009900:	7f3a      	ldrb	r2, [r7, #28]
 8009902:	f107 0120 	add.w	r1, r7, #32
 8009906:	440a      	add	r2, r1
 8009908:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800990c:	fb02 f303 	mul.w	r3, r2, r3
 8009910:	7f3a      	ldrb	r2, [r7, #28]
 8009912:	f107 0120 	add.w	r1, r7, #32
 8009916:	440a      	add	r2, r1
 8009918:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800991c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009920:	b29a      	uxth	r2, r3
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009928:	7ffb      	ldrb	r3, [r7, #31]
 800992a:	7f7a      	ldrb	r2, [r7, #29]
 800992c:	f107 0120 	add.w	r1, r7, #32
 8009930:	440a      	add	r2, r1
 8009932:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009936:	fb02 f303 	mul.w	r3, r2, r3
 800993a:	7f7a      	ldrb	r2, [r7, #29]
 800993c:	f107 0120 	add.w	r1, r7, #32
 8009940:	440a      	add	r2, r1
 8009942:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009946:	fb93 f3f2 	sdiv	r3, r3, r2
 800994a:	b29a      	uxth	r2, r3
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009952:	bf00      	nop
 8009954:	3724      	adds	r7, #36	; 0x24
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr
 800995e:	bf00      	nop
 8009960:	0800a338 	.word	0x0800a338
 8009964:	0800a340 	.word	0x0800a340

08009968 <calloc>:
 8009968:	4b02      	ldr	r3, [pc, #8]	; (8009974 <calloc+0xc>)
 800996a:	460a      	mov	r2, r1
 800996c:	4601      	mov	r1, r0
 800996e:	6818      	ldr	r0, [r3, #0]
 8009970:	f000 b850 	b.w	8009a14 <_calloc_r>
 8009974:	24000010 	.word	0x24000010

08009978 <__errno>:
 8009978:	4b01      	ldr	r3, [pc, #4]	; (8009980 <__errno+0x8>)
 800997a:	6818      	ldr	r0, [r3, #0]
 800997c:	4770      	bx	lr
 800997e:	bf00      	nop
 8009980:	24000010 	.word	0x24000010

08009984 <exit>:
 8009984:	b508      	push	{r3, lr}
 8009986:	4b07      	ldr	r3, [pc, #28]	; (80099a4 <exit+0x20>)
 8009988:	4604      	mov	r4, r0
 800998a:	b113      	cbz	r3, 8009992 <exit+0xe>
 800998c:	2100      	movs	r1, #0
 800998e:	f3af 8000 	nop.w
 8009992:	4b05      	ldr	r3, [pc, #20]	; (80099a8 <exit+0x24>)
 8009994:	6818      	ldr	r0, [r3, #0]
 8009996:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009998:	b103      	cbz	r3, 800999c <exit+0x18>
 800999a:	4798      	blx	r3
 800999c:	4620      	mov	r0, r4
 800999e:	f7f7 fc93 	bl	80012c8 <_exit>
 80099a2:	bf00      	nop
 80099a4:	00000000 	.word	0x00000000
 80099a8:	0800a378 	.word	0x0800a378

080099ac <__libc_init_array>:
 80099ac:	b570      	push	{r4, r5, r6, lr}
 80099ae:	4e0d      	ldr	r6, [pc, #52]	; (80099e4 <__libc_init_array+0x38>)
 80099b0:	4c0d      	ldr	r4, [pc, #52]	; (80099e8 <__libc_init_array+0x3c>)
 80099b2:	1ba4      	subs	r4, r4, r6
 80099b4:	10a4      	asrs	r4, r4, #2
 80099b6:	2500      	movs	r5, #0
 80099b8:	42a5      	cmp	r5, r4
 80099ba:	d109      	bne.n	80099d0 <__libc_init_array+0x24>
 80099bc:	4e0b      	ldr	r6, [pc, #44]	; (80099ec <__libc_init_array+0x40>)
 80099be:	4c0c      	ldr	r4, [pc, #48]	; (80099f0 <__libc_init_array+0x44>)
 80099c0:	f000 fc9e 	bl	800a300 <_init>
 80099c4:	1ba4      	subs	r4, r4, r6
 80099c6:	10a4      	asrs	r4, r4, #2
 80099c8:	2500      	movs	r5, #0
 80099ca:	42a5      	cmp	r5, r4
 80099cc:	d105      	bne.n	80099da <__libc_init_array+0x2e>
 80099ce:	bd70      	pop	{r4, r5, r6, pc}
 80099d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80099d4:	4798      	blx	r3
 80099d6:	3501      	adds	r5, #1
 80099d8:	e7ee      	b.n	80099b8 <__libc_init_array+0xc>
 80099da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80099de:	4798      	blx	r3
 80099e0:	3501      	adds	r5, #1
 80099e2:	e7f2      	b.n	80099ca <__libc_init_array+0x1e>
 80099e4:	0800a3e4 	.word	0x0800a3e4
 80099e8:	0800a3e4 	.word	0x0800a3e4
 80099ec:	0800a3e4 	.word	0x0800a3e4
 80099f0:	0800a3e8 	.word	0x0800a3e8

080099f4 <malloc>:
 80099f4:	4b02      	ldr	r3, [pc, #8]	; (8009a00 <malloc+0xc>)
 80099f6:	4601      	mov	r1, r0
 80099f8:	6818      	ldr	r0, [r3, #0]
 80099fa:	f000 b867 	b.w	8009acc <_malloc_r>
 80099fe:	bf00      	nop
 8009a00:	24000010 	.word	0x24000010

08009a04 <memset>:
 8009a04:	4402      	add	r2, r0
 8009a06:	4603      	mov	r3, r0
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d100      	bne.n	8009a0e <memset+0xa>
 8009a0c:	4770      	bx	lr
 8009a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8009a12:	e7f9      	b.n	8009a08 <memset+0x4>

08009a14 <_calloc_r>:
 8009a14:	b538      	push	{r3, r4, r5, lr}
 8009a16:	fb02 f401 	mul.w	r4, r2, r1
 8009a1a:	4621      	mov	r1, r4
 8009a1c:	f000 f856 	bl	8009acc <_malloc_r>
 8009a20:	4605      	mov	r5, r0
 8009a22:	b118      	cbz	r0, 8009a2c <_calloc_r+0x18>
 8009a24:	4622      	mov	r2, r4
 8009a26:	2100      	movs	r1, #0
 8009a28:	f7ff ffec 	bl	8009a04 <memset>
 8009a2c:	4628      	mov	r0, r5
 8009a2e:	bd38      	pop	{r3, r4, r5, pc}

08009a30 <_free_r>:
 8009a30:	b538      	push	{r3, r4, r5, lr}
 8009a32:	4605      	mov	r5, r0
 8009a34:	2900      	cmp	r1, #0
 8009a36:	d045      	beq.n	8009ac4 <_free_r+0x94>
 8009a38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a3c:	1f0c      	subs	r4, r1, #4
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	bfb8      	it	lt
 8009a42:	18e4      	addlt	r4, r4, r3
 8009a44:	f000 fbae 	bl	800a1a4 <__malloc_lock>
 8009a48:	4a1f      	ldr	r2, [pc, #124]	; (8009ac8 <_free_r+0x98>)
 8009a4a:	6813      	ldr	r3, [r2, #0]
 8009a4c:	4610      	mov	r0, r2
 8009a4e:	b933      	cbnz	r3, 8009a5e <_free_r+0x2e>
 8009a50:	6063      	str	r3, [r4, #4]
 8009a52:	6014      	str	r4, [r2, #0]
 8009a54:	4628      	mov	r0, r5
 8009a56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a5a:	f000 bba4 	b.w	800a1a6 <__malloc_unlock>
 8009a5e:	42a3      	cmp	r3, r4
 8009a60:	d90c      	bls.n	8009a7c <_free_r+0x4c>
 8009a62:	6821      	ldr	r1, [r4, #0]
 8009a64:	1862      	adds	r2, r4, r1
 8009a66:	4293      	cmp	r3, r2
 8009a68:	bf04      	itt	eq
 8009a6a:	681a      	ldreq	r2, [r3, #0]
 8009a6c:	685b      	ldreq	r3, [r3, #4]
 8009a6e:	6063      	str	r3, [r4, #4]
 8009a70:	bf04      	itt	eq
 8009a72:	1852      	addeq	r2, r2, r1
 8009a74:	6022      	streq	r2, [r4, #0]
 8009a76:	6004      	str	r4, [r0, #0]
 8009a78:	e7ec      	b.n	8009a54 <_free_r+0x24>
 8009a7a:	4613      	mov	r3, r2
 8009a7c:	685a      	ldr	r2, [r3, #4]
 8009a7e:	b10a      	cbz	r2, 8009a84 <_free_r+0x54>
 8009a80:	42a2      	cmp	r2, r4
 8009a82:	d9fa      	bls.n	8009a7a <_free_r+0x4a>
 8009a84:	6819      	ldr	r1, [r3, #0]
 8009a86:	1858      	adds	r0, r3, r1
 8009a88:	42a0      	cmp	r0, r4
 8009a8a:	d10b      	bne.n	8009aa4 <_free_r+0x74>
 8009a8c:	6820      	ldr	r0, [r4, #0]
 8009a8e:	4401      	add	r1, r0
 8009a90:	1858      	adds	r0, r3, r1
 8009a92:	4282      	cmp	r2, r0
 8009a94:	6019      	str	r1, [r3, #0]
 8009a96:	d1dd      	bne.n	8009a54 <_free_r+0x24>
 8009a98:	6810      	ldr	r0, [r2, #0]
 8009a9a:	6852      	ldr	r2, [r2, #4]
 8009a9c:	605a      	str	r2, [r3, #4]
 8009a9e:	4401      	add	r1, r0
 8009aa0:	6019      	str	r1, [r3, #0]
 8009aa2:	e7d7      	b.n	8009a54 <_free_r+0x24>
 8009aa4:	d902      	bls.n	8009aac <_free_r+0x7c>
 8009aa6:	230c      	movs	r3, #12
 8009aa8:	602b      	str	r3, [r5, #0]
 8009aaa:	e7d3      	b.n	8009a54 <_free_r+0x24>
 8009aac:	6820      	ldr	r0, [r4, #0]
 8009aae:	1821      	adds	r1, r4, r0
 8009ab0:	428a      	cmp	r2, r1
 8009ab2:	bf04      	itt	eq
 8009ab4:	6811      	ldreq	r1, [r2, #0]
 8009ab6:	6852      	ldreq	r2, [r2, #4]
 8009ab8:	6062      	str	r2, [r4, #4]
 8009aba:	bf04      	itt	eq
 8009abc:	1809      	addeq	r1, r1, r0
 8009abe:	6021      	streq	r1, [r4, #0]
 8009ac0:	605c      	str	r4, [r3, #4]
 8009ac2:	e7c7      	b.n	8009a54 <_free_r+0x24>
 8009ac4:	bd38      	pop	{r3, r4, r5, pc}
 8009ac6:	bf00      	nop
 8009ac8:	24000094 	.word	0x24000094

08009acc <_malloc_r>:
 8009acc:	b570      	push	{r4, r5, r6, lr}
 8009ace:	1ccd      	adds	r5, r1, #3
 8009ad0:	f025 0503 	bic.w	r5, r5, #3
 8009ad4:	3508      	adds	r5, #8
 8009ad6:	2d0c      	cmp	r5, #12
 8009ad8:	bf38      	it	cc
 8009ada:	250c      	movcc	r5, #12
 8009adc:	2d00      	cmp	r5, #0
 8009ade:	4606      	mov	r6, r0
 8009ae0:	db01      	blt.n	8009ae6 <_malloc_r+0x1a>
 8009ae2:	42a9      	cmp	r1, r5
 8009ae4:	d903      	bls.n	8009aee <_malloc_r+0x22>
 8009ae6:	230c      	movs	r3, #12
 8009ae8:	6033      	str	r3, [r6, #0]
 8009aea:	2000      	movs	r0, #0
 8009aec:	bd70      	pop	{r4, r5, r6, pc}
 8009aee:	f000 fb59 	bl	800a1a4 <__malloc_lock>
 8009af2:	4a21      	ldr	r2, [pc, #132]	; (8009b78 <_malloc_r+0xac>)
 8009af4:	6814      	ldr	r4, [r2, #0]
 8009af6:	4621      	mov	r1, r4
 8009af8:	b991      	cbnz	r1, 8009b20 <_malloc_r+0x54>
 8009afa:	4c20      	ldr	r4, [pc, #128]	; (8009b7c <_malloc_r+0xb0>)
 8009afc:	6823      	ldr	r3, [r4, #0]
 8009afe:	b91b      	cbnz	r3, 8009b08 <_malloc_r+0x3c>
 8009b00:	4630      	mov	r0, r6
 8009b02:	f000 f8a1 	bl	8009c48 <_sbrk_r>
 8009b06:	6020      	str	r0, [r4, #0]
 8009b08:	4629      	mov	r1, r5
 8009b0a:	4630      	mov	r0, r6
 8009b0c:	f000 f89c 	bl	8009c48 <_sbrk_r>
 8009b10:	1c43      	adds	r3, r0, #1
 8009b12:	d124      	bne.n	8009b5e <_malloc_r+0x92>
 8009b14:	230c      	movs	r3, #12
 8009b16:	6033      	str	r3, [r6, #0]
 8009b18:	4630      	mov	r0, r6
 8009b1a:	f000 fb44 	bl	800a1a6 <__malloc_unlock>
 8009b1e:	e7e4      	b.n	8009aea <_malloc_r+0x1e>
 8009b20:	680b      	ldr	r3, [r1, #0]
 8009b22:	1b5b      	subs	r3, r3, r5
 8009b24:	d418      	bmi.n	8009b58 <_malloc_r+0x8c>
 8009b26:	2b0b      	cmp	r3, #11
 8009b28:	d90f      	bls.n	8009b4a <_malloc_r+0x7e>
 8009b2a:	600b      	str	r3, [r1, #0]
 8009b2c:	50cd      	str	r5, [r1, r3]
 8009b2e:	18cc      	adds	r4, r1, r3
 8009b30:	4630      	mov	r0, r6
 8009b32:	f000 fb38 	bl	800a1a6 <__malloc_unlock>
 8009b36:	f104 000b 	add.w	r0, r4, #11
 8009b3a:	1d23      	adds	r3, r4, #4
 8009b3c:	f020 0007 	bic.w	r0, r0, #7
 8009b40:	1ac3      	subs	r3, r0, r3
 8009b42:	d0d3      	beq.n	8009aec <_malloc_r+0x20>
 8009b44:	425a      	negs	r2, r3
 8009b46:	50e2      	str	r2, [r4, r3]
 8009b48:	e7d0      	b.n	8009aec <_malloc_r+0x20>
 8009b4a:	428c      	cmp	r4, r1
 8009b4c:	684b      	ldr	r3, [r1, #4]
 8009b4e:	bf16      	itet	ne
 8009b50:	6063      	strne	r3, [r4, #4]
 8009b52:	6013      	streq	r3, [r2, #0]
 8009b54:	460c      	movne	r4, r1
 8009b56:	e7eb      	b.n	8009b30 <_malloc_r+0x64>
 8009b58:	460c      	mov	r4, r1
 8009b5a:	6849      	ldr	r1, [r1, #4]
 8009b5c:	e7cc      	b.n	8009af8 <_malloc_r+0x2c>
 8009b5e:	1cc4      	adds	r4, r0, #3
 8009b60:	f024 0403 	bic.w	r4, r4, #3
 8009b64:	42a0      	cmp	r0, r4
 8009b66:	d005      	beq.n	8009b74 <_malloc_r+0xa8>
 8009b68:	1a21      	subs	r1, r4, r0
 8009b6a:	4630      	mov	r0, r6
 8009b6c:	f000 f86c 	bl	8009c48 <_sbrk_r>
 8009b70:	3001      	adds	r0, #1
 8009b72:	d0cf      	beq.n	8009b14 <_malloc_r+0x48>
 8009b74:	6025      	str	r5, [r4, #0]
 8009b76:	e7db      	b.n	8009b30 <_malloc_r+0x64>
 8009b78:	24000094 	.word	0x24000094
 8009b7c:	24000098 	.word	0x24000098

08009b80 <_puts_r>:
 8009b80:	b570      	push	{r4, r5, r6, lr}
 8009b82:	460e      	mov	r6, r1
 8009b84:	4605      	mov	r5, r0
 8009b86:	b118      	cbz	r0, 8009b90 <_puts_r+0x10>
 8009b88:	6983      	ldr	r3, [r0, #24]
 8009b8a:	b90b      	cbnz	r3, 8009b90 <_puts_r+0x10>
 8009b8c:	f000 fa1c 	bl	8009fc8 <__sinit>
 8009b90:	69ab      	ldr	r3, [r5, #24]
 8009b92:	68ac      	ldr	r4, [r5, #8]
 8009b94:	b913      	cbnz	r3, 8009b9c <_puts_r+0x1c>
 8009b96:	4628      	mov	r0, r5
 8009b98:	f000 fa16 	bl	8009fc8 <__sinit>
 8009b9c:	4b23      	ldr	r3, [pc, #140]	; (8009c2c <_puts_r+0xac>)
 8009b9e:	429c      	cmp	r4, r3
 8009ba0:	d117      	bne.n	8009bd2 <_puts_r+0x52>
 8009ba2:	686c      	ldr	r4, [r5, #4]
 8009ba4:	89a3      	ldrh	r3, [r4, #12]
 8009ba6:	071b      	lsls	r3, r3, #28
 8009ba8:	d51d      	bpl.n	8009be6 <_puts_r+0x66>
 8009baa:	6923      	ldr	r3, [r4, #16]
 8009bac:	b1db      	cbz	r3, 8009be6 <_puts_r+0x66>
 8009bae:	3e01      	subs	r6, #1
 8009bb0:	68a3      	ldr	r3, [r4, #8]
 8009bb2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009bb6:	3b01      	subs	r3, #1
 8009bb8:	60a3      	str	r3, [r4, #8]
 8009bba:	b9e9      	cbnz	r1, 8009bf8 <_puts_r+0x78>
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	da2e      	bge.n	8009c1e <_puts_r+0x9e>
 8009bc0:	4622      	mov	r2, r4
 8009bc2:	210a      	movs	r1, #10
 8009bc4:	4628      	mov	r0, r5
 8009bc6:	f000 f84f 	bl	8009c68 <__swbuf_r>
 8009bca:	3001      	adds	r0, #1
 8009bcc:	d011      	beq.n	8009bf2 <_puts_r+0x72>
 8009bce:	200a      	movs	r0, #10
 8009bd0:	e011      	b.n	8009bf6 <_puts_r+0x76>
 8009bd2:	4b17      	ldr	r3, [pc, #92]	; (8009c30 <_puts_r+0xb0>)
 8009bd4:	429c      	cmp	r4, r3
 8009bd6:	d101      	bne.n	8009bdc <_puts_r+0x5c>
 8009bd8:	68ac      	ldr	r4, [r5, #8]
 8009bda:	e7e3      	b.n	8009ba4 <_puts_r+0x24>
 8009bdc:	4b15      	ldr	r3, [pc, #84]	; (8009c34 <_puts_r+0xb4>)
 8009bde:	429c      	cmp	r4, r3
 8009be0:	bf08      	it	eq
 8009be2:	68ec      	ldreq	r4, [r5, #12]
 8009be4:	e7de      	b.n	8009ba4 <_puts_r+0x24>
 8009be6:	4621      	mov	r1, r4
 8009be8:	4628      	mov	r0, r5
 8009bea:	f000 f88f 	bl	8009d0c <__swsetup_r>
 8009bee:	2800      	cmp	r0, #0
 8009bf0:	d0dd      	beq.n	8009bae <_puts_r+0x2e>
 8009bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf6:	bd70      	pop	{r4, r5, r6, pc}
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	da04      	bge.n	8009c06 <_puts_r+0x86>
 8009bfc:	69a2      	ldr	r2, [r4, #24]
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	dc06      	bgt.n	8009c10 <_puts_r+0x90>
 8009c02:	290a      	cmp	r1, #10
 8009c04:	d004      	beq.n	8009c10 <_puts_r+0x90>
 8009c06:	6823      	ldr	r3, [r4, #0]
 8009c08:	1c5a      	adds	r2, r3, #1
 8009c0a:	6022      	str	r2, [r4, #0]
 8009c0c:	7019      	strb	r1, [r3, #0]
 8009c0e:	e7cf      	b.n	8009bb0 <_puts_r+0x30>
 8009c10:	4622      	mov	r2, r4
 8009c12:	4628      	mov	r0, r5
 8009c14:	f000 f828 	bl	8009c68 <__swbuf_r>
 8009c18:	3001      	adds	r0, #1
 8009c1a:	d1c9      	bne.n	8009bb0 <_puts_r+0x30>
 8009c1c:	e7e9      	b.n	8009bf2 <_puts_r+0x72>
 8009c1e:	6823      	ldr	r3, [r4, #0]
 8009c20:	200a      	movs	r0, #10
 8009c22:	1c5a      	adds	r2, r3, #1
 8009c24:	6022      	str	r2, [r4, #0]
 8009c26:	7018      	strb	r0, [r3, #0]
 8009c28:	e7e5      	b.n	8009bf6 <_puts_r+0x76>
 8009c2a:	bf00      	nop
 8009c2c:	0800a39c 	.word	0x0800a39c
 8009c30:	0800a3bc 	.word	0x0800a3bc
 8009c34:	0800a37c 	.word	0x0800a37c

08009c38 <puts>:
 8009c38:	4b02      	ldr	r3, [pc, #8]	; (8009c44 <puts+0xc>)
 8009c3a:	4601      	mov	r1, r0
 8009c3c:	6818      	ldr	r0, [r3, #0]
 8009c3e:	f7ff bf9f 	b.w	8009b80 <_puts_r>
 8009c42:	bf00      	nop
 8009c44:	24000010 	.word	0x24000010

08009c48 <_sbrk_r>:
 8009c48:	b538      	push	{r3, r4, r5, lr}
 8009c4a:	4c06      	ldr	r4, [pc, #24]	; (8009c64 <_sbrk_r+0x1c>)
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	4605      	mov	r5, r0
 8009c50:	4608      	mov	r0, r1
 8009c52:	6023      	str	r3, [r4, #0]
 8009c54:	f7f7 fbb0 	bl	80013b8 <_sbrk>
 8009c58:	1c43      	adds	r3, r0, #1
 8009c5a:	d102      	bne.n	8009c62 <_sbrk_r+0x1a>
 8009c5c:	6823      	ldr	r3, [r4, #0]
 8009c5e:	b103      	cbz	r3, 8009c62 <_sbrk_r+0x1a>
 8009c60:	602b      	str	r3, [r5, #0]
 8009c62:	bd38      	pop	{r3, r4, r5, pc}
 8009c64:	24000334 	.word	0x24000334

08009c68 <__swbuf_r>:
 8009c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c6a:	460e      	mov	r6, r1
 8009c6c:	4614      	mov	r4, r2
 8009c6e:	4605      	mov	r5, r0
 8009c70:	b118      	cbz	r0, 8009c7a <__swbuf_r+0x12>
 8009c72:	6983      	ldr	r3, [r0, #24]
 8009c74:	b90b      	cbnz	r3, 8009c7a <__swbuf_r+0x12>
 8009c76:	f000 f9a7 	bl	8009fc8 <__sinit>
 8009c7a:	4b21      	ldr	r3, [pc, #132]	; (8009d00 <__swbuf_r+0x98>)
 8009c7c:	429c      	cmp	r4, r3
 8009c7e:	d12a      	bne.n	8009cd6 <__swbuf_r+0x6e>
 8009c80:	686c      	ldr	r4, [r5, #4]
 8009c82:	69a3      	ldr	r3, [r4, #24]
 8009c84:	60a3      	str	r3, [r4, #8]
 8009c86:	89a3      	ldrh	r3, [r4, #12]
 8009c88:	071a      	lsls	r2, r3, #28
 8009c8a:	d52e      	bpl.n	8009cea <__swbuf_r+0x82>
 8009c8c:	6923      	ldr	r3, [r4, #16]
 8009c8e:	b363      	cbz	r3, 8009cea <__swbuf_r+0x82>
 8009c90:	6923      	ldr	r3, [r4, #16]
 8009c92:	6820      	ldr	r0, [r4, #0]
 8009c94:	1ac0      	subs	r0, r0, r3
 8009c96:	6963      	ldr	r3, [r4, #20]
 8009c98:	b2f6      	uxtb	r6, r6
 8009c9a:	4283      	cmp	r3, r0
 8009c9c:	4637      	mov	r7, r6
 8009c9e:	dc04      	bgt.n	8009caa <__swbuf_r+0x42>
 8009ca0:	4621      	mov	r1, r4
 8009ca2:	4628      	mov	r0, r5
 8009ca4:	f000 f926 	bl	8009ef4 <_fflush_r>
 8009ca8:	bb28      	cbnz	r0, 8009cf6 <__swbuf_r+0x8e>
 8009caa:	68a3      	ldr	r3, [r4, #8]
 8009cac:	3b01      	subs	r3, #1
 8009cae:	60a3      	str	r3, [r4, #8]
 8009cb0:	6823      	ldr	r3, [r4, #0]
 8009cb2:	1c5a      	adds	r2, r3, #1
 8009cb4:	6022      	str	r2, [r4, #0]
 8009cb6:	701e      	strb	r6, [r3, #0]
 8009cb8:	6963      	ldr	r3, [r4, #20]
 8009cba:	3001      	adds	r0, #1
 8009cbc:	4283      	cmp	r3, r0
 8009cbe:	d004      	beq.n	8009cca <__swbuf_r+0x62>
 8009cc0:	89a3      	ldrh	r3, [r4, #12]
 8009cc2:	07db      	lsls	r3, r3, #31
 8009cc4:	d519      	bpl.n	8009cfa <__swbuf_r+0x92>
 8009cc6:	2e0a      	cmp	r6, #10
 8009cc8:	d117      	bne.n	8009cfa <__swbuf_r+0x92>
 8009cca:	4621      	mov	r1, r4
 8009ccc:	4628      	mov	r0, r5
 8009cce:	f000 f911 	bl	8009ef4 <_fflush_r>
 8009cd2:	b190      	cbz	r0, 8009cfa <__swbuf_r+0x92>
 8009cd4:	e00f      	b.n	8009cf6 <__swbuf_r+0x8e>
 8009cd6:	4b0b      	ldr	r3, [pc, #44]	; (8009d04 <__swbuf_r+0x9c>)
 8009cd8:	429c      	cmp	r4, r3
 8009cda:	d101      	bne.n	8009ce0 <__swbuf_r+0x78>
 8009cdc:	68ac      	ldr	r4, [r5, #8]
 8009cde:	e7d0      	b.n	8009c82 <__swbuf_r+0x1a>
 8009ce0:	4b09      	ldr	r3, [pc, #36]	; (8009d08 <__swbuf_r+0xa0>)
 8009ce2:	429c      	cmp	r4, r3
 8009ce4:	bf08      	it	eq
 8009ce6:	68ec      	ldreq	r4, [r5, #12]
 8009ce8:	e7cb      	b.n	8009c82 <__swbuf_r+0x1a>
 8009cea:	4621      	mov	r1, r4
 8009cec:	4628      	mov	r0, r5
 8009cee:	f000 f80d 	bl	8009d0c <__swsetup_r>
 8009cf2:	2800      	cmp	r0, #0
 8009cf4:	d0cc      	beq.n	8009c90 <__swbuf_r+0x28>
 8009cf6:	f04f 37ff 	mov.w	r7, #4294967295
 8009cfa:	4638      	mov	r0, r7
 8009cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	0800a39c 	.word	0x0800a39c
 8009d04:	0800a3bc 	.word	0x0800a3bc
 8009d08:	0800a37c 	.word	0x0800a37c

08009d0c <__swsetup_r>:
 8009d0c:	4b32      	ldr	r3, [pc, #200]	; (8009dd8 <__swsetup_r+0xcc>)
 8009d0e:	b570      	push	{r4, r5, r6, lr}
 8009d10:	681d      	ldr	r5, [r3, #0]
 8009d12:	4606      	mov	r6, r0
 8009d14:	460c      	mov	r4, r1
 8009d16:	b125      	cbz	r5, 8009d22 <__swsetup_r+0x16>
 8009d18:	69ab      	ldr	r3, [r5, #24]
 8009d1a:	b913      	cbnz	r3, 8009d22 <__swsetup_r+0x16>
 8009d1c:	4628      	mov	r0, r5
 8009d1e:	f000 f953 	bl	8009fc8 <__sinit>
 8009d22:	4b2e      	ldr	r3, [pc, #184]	; (8009ddc <__swsetup_r+0xd0>)
 8009d24:	429c      	cmp	r4, r3
 8009d26:	d10f      	bne.n	8009d48 <__swsetup_r+0x3c>
 8009d28:	686c      	ldr	r4, [r5, #4]
 8009d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d2e:	b29a      	uxth	r2, r3
 8009d30:	0715      	lsls	r5, r2, #28
 8009d32:	d42c      	bmi.n	8009d8e <__swsetup_r+0x82>
 8009d34:	06d0      	lsls	r0, r2, #27
 8009d36:	d411      	bmi.n	8009d5c <__swsetup_r+0x50>
 8009d38:	2209      	movs	r2, #9
 8009d3a:	6032      	str	r2, [r6, #0]
 8009d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d40:	81a3      	strh	r3, [r4, #12]
 8009d42:	f04f 30ff 	mov.w	r0, #4294967295
 8009d46:	e03e      	b.n	8009dc6 <__swsetup_r+0xba>
 8009d48:	4b25      	ldr	r3, [pc, #148]	; (8009de0 <__swsetup_r+0xd4>)
 8009d4a:	429c      	cmp	r4, r3
 8009d4c:	d101      	bne.n	8009d52 <__swsetup_r+0x46>
 8009d4e:	68ac      	ldr	r4, [r5, #8]
 8009d50:	e7eb      	b.n	8009d2a <__swsetup_r+0x1e>
 8009d52:	4b24      	ldr	r3, [pc, #144]	; (8009de4 <__swsetup_r+0xd8>)
 8009d54:	429c      	cmp	r4, r3
 8009d56:	bf08      	it	eq
 8009d58:	68ec      	ldreq	r4, [r5, #12]
 8009d5a:	e7e6      	b.n	8009d2a <__swsetup_r+0x1e>
 8009d5c:	0751      	lsls	r1, r2, #29
 8009d5e:	d512      	bpl.n	8009d86 <__swsetup_r+0x7a>
 8009d60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d62:	b141      	cbz	r1, 8009d76 <__swsetup_r+0x6a>
 8009d64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d68:	4299      	cmp	r1, r3
 8009d6a:	d002      	beq.n	8009d72 <__swsetup_r+0x66>
 8009d6c:	4630      	mov	r0, r6
 8009d6e:	f7ff fe5f 	bl	8009a30 <_free_r>
 8009d72:	2300      	movs	r3, #0
 8009d74:	6363      	str	r3, [r4, #52]	; 0x34
 8009d76:	89a3      	ldrh	r3, [r4, #12]
 8009d78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d7c:	81a3      	strh	r3, [r4, #12]
 8009d7e:	2300      	movs	r3, #0
 8009d80:	6063      	str	r3, [r4, #4]
 8009d82:	6923      	ldr	r3, [r4, #16]
 8009d84:	6023      	str	r3, [r4, #0]
 8009d86:	89a3      	ldrh	r3, [r4, #12]
 8009d88:	f043 0308 	orr.w	r3, r3, #8
 8009d8c:	81a3      	strh	r3, [r4, #12]
 8009d8e:	6923      	ldr	r3, [r4, #16]
 8009d90:	b94b      	cbnz	r3, 8009da6 <__swsetup_r+0x9a>
 8009d92:	89a3      	ldrh	r3, [r4, #12]
 8009d94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d9c:	d003      	beq.n	8009da6 <__swsetup_r+0x9a>
 8009d9e:	4621      	mov	r1, r4
 8009da0:	4630      	mov	r0, r6
 8009da2:	f000 f9bf 	bl	800a124 <__smakebuf_r>
 8009da6:	89a2      	ldrh	r2, [r4, #12]
 8009da8:	f012 0301 	ands.w	r3, r2, #1
 8009dac:	d00c      	beq.n	8009dc8 <__swsetup_r+0xbc>
 8009dae:	2300      	movs	r3, #0
 8009db0:	60a3      	str	r3, [r4, #8]
 8009db2:	6963      	ldr	r3, [r4, #20]
 8009db4:	425b      	negs	r3, r3
 8009db6:	61a3      	str	r3, [r4, #24]
 8009db8:	6923      	ldr	r3, [r4, #16]
 8009dba:	b953      	cbnz	r3, 8009dd2 <__swsetup_r+0xc6>
 8009dbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dc0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009dc4:	d1ba      	bne.n	8009d3c <__swsetup_r+0x30>
 8009dc6:	bd70      	pop	{r4, r5, r6, pc}
 8009dc8:	0792      	lsls	r2, r2, #30
 8009dca:	bf58      	it	pl
 8009dcc:	6963      	ldrpl	r3, [r4, #20]
 8009dce:	60a3      	str	r3, [r4, #8]
 8009dd0:	e7f2      	b.n	8009db8 <__swsetup_r+0xac>
 8009dd2:	2000      	movs	r0, #0
 8009dd4:	e7f7      	b.n	8009dc6 <__swsetup_r+0xba>
 8009dd6:	bf00      	nop
 8009dd8:	24000010 	.word	0x24000010
 8009ddc:	0800a39c 	.word	0x0800a39c
 8009de0:	0800a3bc 	.word	0x0800a3bc
 8009de4:	0800a37c 	.word	0x0800a37c

08009de8 <__sflush_r>:
 8009de8:	898a      	ldrh	r2, [r1, #12]
 8009dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dee:	4605      	mov	r5, r0
 8009df0:	0710      	lsls	r0, r2, #28
 8009df2:	460c      	mov	r4, r1
 8009df4:	d458      	bmi.n	8009ea8 <__sflush_r+0xc0>
 8009df6:	684b      	ldr	r3, [r1, #4]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	dc05      	bgt.n	8009e08 <__sflush_r+0x20>
 8009dfc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	dc02      	bgt.n	8009e08 <__sflush_r+0x20>
 8009e02:	2000      	movs	r0, #0
 8009e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e0a:	2e00      	cmp	r6, #0
 8009e0c:	d0f9      	beq.n	8009e02 <__sflush_r+0x1a>
 8009e0e:	2300      	movs	r3, #0
 8009e10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e14:	682f      	ldr	r7, [r5, #0]
 8009e16:	6a21      	ldr	r1, [r4, #32]
 8009e18:	602b      	str	r3, [r5, #0]
 8009e1a:	d032      	beq.n	8009e82 <__sflush_r+0x9a>
 8009e1c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e1e:	89a3      	ldrh	r3, [r4, #12]
 8009e20:	075a      	lsls	r2, r3, #29
 8009e22:	d505      	bpl.n	8009e30 <__sflush_r+0x48>
 8009e24:	6863      	ldr	r3, [r4, #4]
 8009e26:	1ac0      	subs	r0, r0, r3
 8009e28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e2a:	b10b      	cbz	r3, 8009e30 <__sflush_r+0x48>
 8009e2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e2e:	1ac0      	subs	r0, r0, r3
 8009e30:	2300      	movs	r3, #0
 8009e32:	4602      	mov	r2, r0
 8009e34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e36:	6a21      	ldr	r1, [r4, #32]
 8009e38:	4628      	mov	r0, r5
 8009e3a:	47b0      	blx	r6
 8009e3c:	1c43      	adds	r3, r0, #1
 8009e3e:	89a3      	ldrh	r3, [r4, #12]
 8009e40:	d106      	bne.n	8009e50 <__sflush_r+0x68>
 8009e42:	6829      	ldr	r1, [r5, #0]
 8009e44:	291d      	cmp	r1, #29
 8009e46:	d848      	bhi.n	8009eda <__sflush_r+0xf2>
 8009e48:	4a29      	ldr	r2, [pc, #164]	; (8009ef0 <__sflush_r+0x108>)
 8009e4a:	40ca      	lsrs	r2, r1
 8009e4c:	07d6      	lsls	r6, r2, #31
 8009e4e:	d544      	bpl.n	8009eda <__sflush_r+0xf2>
 8009e50:	2200      	movs	r2, #0
 8009e52:	6062      	str	r2, [r4, #4]
 8009e54:	04d9      	lsls	r1, r3, #19
 8009e56:	6922      	ldr	r2, [r4, #16]
 8009e58:	6022      	str	r2, [r4, #0]
 8009e5a:	d504      	bpl.n	8009e66 <__sflush_r+0x7e>
 8009e5c:	1c42      	adds	r2, r0, #1
 8009e5e:	d101      	bne.n	8009e64 <__sflush_r+0x7c>
 8009e60:	682b      	ldr	r3, [r5, #0]
 8009e62:	b903      	cbnz	r3, 8009e66 <__sflush_r+0x7e>
 8009e64:	6560      	str	r0, [r4, #84]	; 0x54
 8009e66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e68:	602f      	str	r7, [r5, #0]
 8009e6a:	2900      	cmp	r1, #0
 8009e6c:	d0c9      	beq.n	8009e02 <__sflush_r+0x1a>
 8009e6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e72:	4299      	cmp	r1, r3
 8009e74:	d002      	beq.n	8009e7c <__sflush_r+0x94>
 8009e76:	4628      	mov	r0, r5
 8009e78:	f7ff fdda 	bl	8009a30 <_free_r>
 8009e7c:	2000      	movs	r0, #0
 8009e7e:	6360      	str	r0, [r4, #52]	; 0x34
 8009e80:	e7c0      	b.n	8009e04 <__sflush_r+0x1c>
 8009e82:	2301      	movs	r3, #1
 8009e84:	4628      	mov	r0, r5
 8009e86:	47b0      	blx	r6
 8009e88:	1c41      	adds	r1, r0, #1
 8009e8a:	d1c8      	bne.n	8009e1e <__sflush_r+0x36>
 8009e8c:	682b      	ldr	r3, [r5, #0]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d0c5      	beq.n	8009e1e <__sflush_r+0x36>
 8009e92:	2b1d      	cmp	r3, #29
 8009e94:	d001      	beq.n	8009e9a <__sflush_r+0xb2>
 8009e96:	2b16      	cmp	r3, #22
 8009e98:	d101      	bne.n	8009e9e <__sflush_r+0xb6>
 8009e9a:	602f      	str	r7, [r5, #0]
 8009e9c:	e7b1      	b.n	8009e02 <__sflush_r+0x1a>
 8009e9e:	89a3      	ldrh	r3, [r4, #12]
 8009ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ea4:	81a3      	strh	r3, [r4, #12]
 8009ea6:	e7ad      	b.n	8009e04 <__sflush_r+0x1c>
 8009ea8:	690f      	ldr	r7, [r1, #16]
 8009eaa:	2f00      	cmp	r7, #0
 8009eac:	d0a9      	beq.n	8009e02 <__sflush_r+0x1a>
 8009eae:	0793      	lsls	r3, r2, #30
 8009eb0:	680e      	ldr	r6, [r1, #0]
 8009eb2:	bf08      	it	eq
 8009eb4:	694b      	ldreq	r3, [r1, #20]
 8009eb6:	600f      	str	r7, [r1, #0]
 8009eb8:	bf18      	it	ne
 8009eba:	2300      	movne	r3, #0
 8009ebc:	eba6 0807 	sub.w	r8, r6, r7
 8009ec0:	608b      	str	r3, [r1, #8]
 8009ec2:	f1b8 0f00 	cmp.w	r8, #0
 8009ec6:	dd9c      	ble.n	8009e02 <__sflush_r+0x1a>
 8009ec8:	4643      	mov	r3, r8
 8009eca:	463a      	mov	r2, r7
 8009ecc:	6a21      	ldr	r1, [r4, #32]
 8009ece:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009ed0:	4628      	mov	r0, r5
 8009ed2:	47b0      	blx	r6
 8009ed4:	2800      	cmp	r0, #0
 8009ed6:	dc06      	bgt.n	8009ee6 <__sflush_r+0xfe>
 8009ed8:	89a3      	ldrh	r3, [r4, #12]
 8009eda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ede:	81a3      	strh	r3, [r4, #12]
 8009ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee4:	e78e      	b.n	8009e04 <__sflush_r+0x1c>
 8009ee6:	4407      	add	r7, r0
 8009ee8:	eba8 0800 	sub.w	r8, r8, r0
 8009eec:	e7e9      	b.n	8009ec2 <__sflush_r+0xda>
 8009eee:	bf00      	nop
 8009ef0:	20400001 	.word	0x20400001

08009ef4 <_fflush_r>:
 8009ef4:	b538      	push	{r3, r4, r5, lr}
 8009ef6:	690b      	ldr	r3, [r1, #16]
 8009ef8:	4605      	mov	r5, r0
 8009efa:	460c      	mov	r4, r1
 8009efc:	b1db      	cbz	r3, 8009f36 <_fflush_r+0x42>
 8009efe:	b118      	cbz	r0, 8009f08 <_fflush_r+0x14>
 8009f00:	6983      	ldr	r3, [r0, #24]
 8009f02:	b90b      	cbnz	r3, 8009f08 <_fflush_r+0x14>
 8009f04:	f000 f860 	bl	8009fc8 <__sinit>
 8009f08:	4b0c      	ldr	r3, [pc, #48]	; (8009f3c <_fflush_r+0x48>)
 8009f0a:	429c      	cmp	r4, r3
 8009f0c:	d109      	bne.n	8009f22 <_fflush_r+0x2e>
 8009f0e:	686c      	ldr	r4, [r5, #4]
 8009f10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f14:	b17b      	cbz	r3, 8009f36 <_fflush_r+0x42>
 8009f16:	4621      	mov	r1, r4
 8009f18:	4628      	mov	r0, r5
 8009f1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f1e:	f7ff bf63 	b.w	8009de8 <__sflush_r>
 8009f22:	4b07      	ldr	r3, [pc, #28]	; (8009f40 <_fflush_r+0x4c>)
 8009f24:	429c      	cmp	r4, r3
 8009f26:	d101      	bne.n	8009f2c <_fflush_r+0x38>
 8009f28:	68ac      	ldr	r4, [r5, #8]
 8009f2a:	e7f1      	b.n	8009f10 <_fflush_r+0x1c>
 8009f2c:	4b05      	ldr	r3, [pc, #20]	; (8009f44 <_fflush_r+0x50>)
 8009f2e:	429c      	cmp	r4, r3
 8009f30:	bf08      	it	eq
 8009f32:	68ec      	ldreq	r4, [r5, #12]
 8009f34:	e7ec      	b.n	8009f10 <_fflush_r+0x1c>
 8009f36:	2000      	movs	r0, #0
 8009f38:	bd38      	pop	{r3, r4, r5, pc}
 8009f3a:	bf00      	nop
 8009f3c:	0800a39c 	.word	0x0800a39c
 8009f40:	0800a3bc 	.word	0x0800a3bc
 8009f44:	0800a37c 	.word	0x0800a37c

08009f48 <std>:
 8009f48:	2300      	movs	r3, #0
 8009f4a:	b510      	push	{r4, lr}
 8009f4c:	4604      	mov	r4, r0
 8009f4e:	e9c0 3300 	strd	r3, r3, [r0]
 8009f52:	6083      	str	r3, [r0, #8]
 8009f54:	8181      	strh	r1, [r0, #12]
 8009f56:	6643      	str	r3, [r0, #100]	; 0x64
 8009f58:	81c2      	strh	r2, [r0, #14]
 8009f5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f5e:	6183      	str	r3, [r0, #24]
 8009f60:	4619      	mov	r1, r3
 8009f62:	2208      	movs	r2, #8
 8009f64:	305c      	adds	r0, #92	; 0x5c
 8009f66:	f7ff fd4d 	bl	8009a04 <memset>
 8009f6a:	4b05      	ldr	r3, [pc, #20]	; (8009f80 <std+0x38>)
 8009f6c:	6263      	str	r3, [r4, #36]	; 0x24
 8009f6e:	4b05      	ldr	r3, [pc, #20]	; (8009f84 <std+0x3c>)
 8009f70:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f72:	4b05      	ldr	r3, [pc, #20]	; (8009f88 <std+0x40>)
 8009f74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f76:	4b05      	ldr	r3, [pc, #20]	; (8009f8c <std+0x44>)
 8009f78:	6224      	str	r4, [r4, #32]
 8009f7a:	6323      	str	r3, [r4, #48]	; 0x30
 8009f7c:	bd10      	pop	{r4, pc}
 8009f7e:	bf00      	nop
 8009f80:	0800a1a9 	.word	0x0800a1a9
 8009f84:	0800a1cb 	.word	0x0800a1cb
 8009f88:	0800a203 	.word	0x0800a203
 8009f8c:	0800a227 	.word	0x0800a227

08009f90 <_cleanup_r>:
 8009f90:	4901      	ldr	r1, [pc, #4]	; (8009f98 <_cleanup_r+0x8>)
 8009f92:	f000 b885 	b.w	800a0a0 <_fwalk_reent>
 8009f96:	bf00      	nop
 8009f98:	08009ef5 	.word	0x08009ef5

08009f9c <__sfmoreglue>:
 8009f9c:	b570      	push	{r4, r5, r6, lr}
 8009f9e:	1e4a      	subs	r2, r1, #1
 8009fa0:	2568      	movs	r5, #104	; 0x68
 8009fa2:	4355      	muls	r5, r2
 8009fa4:	460e      	mov	r6, r1
 8009fa6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009faa:	f7ff fd8f 	bl	8009acc <_malloc_r>
 8009fae:	4604      	mov	r4, r0
 8009fb0:	b140      	cbz	r0, 8009fc4 <__sfmoreglue+0x28>
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	e9c0 1600 	strd	r1, r6, [r0]
 8009fb8:	300c      	adds	r0, #12
 8009fba:	60a0      	str	r0, [r4, #8]
 8009fbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009fc0:	f7ff fd20 	bl	8009a04 <memset>
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	bd70      	pop	{r4, r5, r6, pc}

08009fc8 <__sinit>:
 8009fc8:	6983      	ldr	r3, [r0, #24]
 8009fca:	b510      	push	{r4, lr}
 8009fcc:	4604      	mov	r4, r0
 8009fce:	bb33      	cbnz	r3, 800a01e <__sinit+0x56>
 8009fd0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009fd4:	6503      	str	r3, [r0, #80]	; 0x50
 8009fd6:	4b12      	ldr	r3, [pc, #72]	; (800a020 <__sinit+0x58>)
 8009fd8:	4a12      	ldr	r2, [pc, #72]	; (800a024 <__sinit+0x5c>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	6282      	str	r2, [r0, #40]	; 0x28
 8009fde:	4298      	cmp	r0, r3
 8009fe0:	bf04      	itt	eq
 8009fe2:	2301      	moveq	r3, #1
 8009fe4:	6183      	streq	r3, [r0, #24]
 8009fe6:	f000 f81f 	bl	800a028 <__sfp>
 8009fea:	6060      	str	r0, [r4, #4]
 8009fec:	4620      	mov	r0, r4
 8009fee:	f000 f81b 	bl	800a028 <__sfp>
 8009ff2:	60a0      	str	r0, [r4, #8]
 8009ff4:	4620      	mov	r0, r4
 8009ff6:	f000 f817 	bl	800a028 <__sfp>
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	60e0      	str	r0, [r4, #12]
 8009ffe:	2104      	movs	r1, #4
 800a000:	6860      	ldr	r0, [r4, #4]
 800a002:	f7ff ffa1 	bl	8009f48 <std>
 800a006:	2201      	movs	r2, #1
 800a008:	2109      	movs	r1, #9
 800a00a:	68a0      	ldr	r0, [r4, #8]
 800a00c:	f7ff ff9c 	bl	8009f48 <std>
 800a010:	2202      	movs	r2, #2
 800a012:	2112      	movs	r1, #18
 800a014:	68e0      	ldr	r0, [r4, #12]
 800a016:	f7ff ff97 	bl	8009f48 <std>
 800a01a:	2301      	movs	r3, #1
 800a01c:	61a3      	str	r3, [r4, #24]
 800a01e:	bd10      	pop	{r4, pc}
 800a020:	0800a378 	.word	0x0800a378
 800a024:	08009f91 	.word	0x08009f91

0800a028 <__sfp>:
 800a028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a02a:	4b1b      	ldr	r3, [pc, #108]	; (800a098 <__sfp+0x70>)
 800a02c:	681e      	ldr	r6, [r3, #0]
 800a02e:	69b3      	ldr	r3, [r6, #24]
 800a030:	4607      	mov	r7, r0
 800a032:	b913      	cbnz	r3, 800a03a <__sfp+0x12>
 800a034:	4630      	mov	r0, r6
 800a036:	f7ff ffc7 	bl	8009fc8 <__sinit>
 800a03a:	3648      	adds	r6, #72	; 0x48
 800a03c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a040:	3b01      	subs	r3, #1
 800a042:	d503      	bpl.n	800a04c <__sfp+0x24>
 800a044:	6833      	ldr	r3, [r6, #0]
 800a046:	b133      	cbz	r3, 800a056 <__sfp+0x2e>
 800a048:	6836      	ldr	r6, [r6, #0]
 800a04a:	e7f7      	b.n	800a03c <__sfp+0x14>
 800a04c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a050:	b16d      	cbz	r5, 800a06e <__sfp+0x46>
 800a052:	3468      	adds	r4, #104	; 0x68
 800a054:	e7f4      	b.n	800a040 <__sfp+0x18>
 800a056:	2104      	movs	r1, #4
 800a058:	4638      	mov	r0, r7
 800a05a:	f7ff ff9f 	bl	8009f9c <__sfmoreglue>
 800a05e:	6030      	str	r0, [r6, #0]
 800a060:	2800      	cmp	r0, #0
 800a062:	d1f1      	bne.n	800a048 <__sfp+0x20>
 800a064:	230c      	movs	r3, #12
 800a066:	603b      	str	r3, [r7, #0]
 800a068:	4604      	mov	r4, r0
 800a06a:	4620      	mov	r0, r4
 800a06c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a06e:	4b0b      	ldr	r3, [pc, #44]	; (800a09c <__sfp+0x74>)
 800a070:	6665      	str	r5, [r4, #100]	; 0x64
 800a072:	e9c4 5500 	strd	r5, r5, [r4]
 800a076:	60a5      	str	r5, [r4, #8]
 800a078:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a07c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a080:	2208      	movs	r2, #8
 800a082:	4629      	mov	r1, r5
 800a084:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a088:	f7ff fcbc 	bl	8009a04 <memset>
 800a08c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a090:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a094:	e7e9      	b.n	800a06a <__sfp+0x42>
 800a096:	bf00      	nop
 800a098:	0800a378 	.word	0x0800a378
 800a09c:	ffff0001 	.word	0xffff0001

0800a0a0 <_fwalk_reent>:
 800a0a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0a4:	4680      	mov	r8, r0
 800a0a6:	4689      	mov	r9, r1
 800a0a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a0ac:	2600      	movs	r6, #0
 800a0ae:	b914      	cbnz	r4, 800a0b6 <_fwalk_reent+0x16>
 800a0b0:	4630      	mov	r0, r6
 800a0b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0b6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a0ba:	3f01      	subs	r7, #1
 800a0bc:	d501      	bpl.n	800a0c2 <_fwalk_reent+0x22>
 800a0be:	6824      	ldr	r4, [r4, #0]
 800a0c0:	e7f5      	b.n	800a0ae <_fwalk_reent+0xe>
 800a0c2:	89ab      	ldrh	r3, [r5, #12]
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d907      	bls.n	800a0d8 <_fwalk_reent+0x38>
 800a0c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	d003      	beq.n	800a0d8 <_fwalk_reent+0x38>
 800a0d0:	4629      	mov	r1, r5
 800a0d2:	4640      	mov	r0, r8
 800a0d4:	47c8      	blx	r9
 800a0d6:	4306      	orrs	r6, r0
 800a0d8:	3568      	adds	r5, #104	; 0x68
 800a0da:	e7ee      	b.n	800a0ba <_fwalk_reent+0x1a>

0800a0dc <__swhatbuf_r>:
 800a0dc:	b570      	push	{r4, r5, r6, lr}
 800a0de:	460e      	mov	r6, r1
 800a0e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0e4:	2900      	cmp	r1, #0
 800a0e6:	b096      	sub	sp, #88	; 0x58
 800a0e8:	4614      	mov	r4, r2
 800a0ea:	461d      	mov	r5, r3
 800a0ec:	da07      	bge.n	800a0fe <__swhatbuf_r+0x22>
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	602b      	str	r3, [r5, #0]
 800a0f2:	89b3      	ldrh	r3, [r6, #12]
 800a0f4:	061a      	lsls	r2, r3, #24
 800a0f6:	d410      	bmi.n	800a11a <__swhatbuf_r+0x3e>
 800a0f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0fc:	e00e      	b.n	800a11c <__swhatbuf_r+0x40>
 800a0fe:	466a      	mov	r2, sp
 800a100:	f000 f8b8 	bl	800a274 <_fstat_r>
 800a104:	2800      	cmp	r0, #0
 800a106:	dbf2      	blt.n	800a0ee <__swhatbuf_r+0x12>
 800a108:	9a01      	ldr	r2, [sp, #4]
 800a10a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a10e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a112:	425a      	negs	r2, r3
 800a114:	415a      	adcs	r2, r3
 800a116:	602a      	str	r2, [r5, #0]
 800a118:	e7ee      	b.n	800a0f8 <__swhatbuf_r+0x1c>
 800a11a:	2340      	movs	r3, #64	; 0x40
 800a11c:	2000      	movs	r0, #0
 800a11e:	6023      	str	r3, [r4, #0]
 800a120:	b016      	add	sp, #88	; 0x58
 800a122:	bd70      	pop	{r4, r5, r6, pc}

0800a124 <__smakebuf_r>:
 800a124:	898b      	ldrh	r3, [r1, #12]
 800a126:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a128:	079d      	lsls	r5, r3, #30
 800a12a:	4606      	mov	r6, r0
 800a12c:	460c      	mov	r4, r1
 800a12e:	d507      	bpl.n	800a140 <__smakebuf_r+0x1c>
 800a130:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a134:	6023      	str	r3, [r4, #0]
 800a136:	6123      	str	r3, [r4, #16]
 800a138:	2301      	movs	r3, #1
 800a13a:	6163      	str	r3, [r4, #20]
 800a13c:	b002      	add	sp, #8
 800a13e:	bd70      	pop	{r4, r5, r6, pc}
 800a140:	ab01      	add	r3, sp, #4
 800a142:	466a      	mov	r2, sp
 800a144:	f7ff ffca 	bl	800a0dc <__swhatbuf_r>
 800a148:	9900      	ldr	r1, [sp, #0]
 800a14a:	4605      	mov	r5, r0
 800a14c:	4630      	mov	r0, r6
 800a14e:	f7ff fcbd 	bl	8009acc <_malloc_r>
 800a152:	b948      	cbnz	r0, 800a168 <__smakebuf_r+0x44>
 800a154:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a158:	059a      	lsls	r2, r3, #22
 800a15a:	d4ef      	bmi.n	800a13c <__smakebuf_r+0x18>
 800a15c:	f023 0303 	bic.w	r3, r3, #3
 800a160:	f043 0302 	orr.w	r3, r3, #2
 800a164:	81a3      	strh	r3, [r4, #12]
 800a166:	e7e3      	b.n	800a130 <__smakebuf_r+0xc>
 800a168:	4b0d      	ldr	r3, [pc, #52]	; (800a1a0 <__smakebuf_r+0x7c>)
 800a16a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a16c:	89a3      	ldrh	r3, [r4, #12]
 800a16e:	6020      	str	r0, [r4, #0]
 800a170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a174:	81a3      	strh	r3, [r4, #12]
 800a176:	9b00      	ldr	r3, [sp, #0]
 800a178:	6163      	str	r3, [r4, #20]
 800a17a:	9b01      	ldr	r3, [sp, #4]
 800a17c:	6120      	str	r0, [r4, #16]
 800a17e:	b15b      	cbz	r3, 800a198 <__smakebuf_r+0x74>
 800a180:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a184:	4630      	mov	r0, r6
 800a186:	f000 f887 	bl	800a298 <_isatty_r>
 800a18a:	b128      	cbz	r0, 800a198 <__smakebuf_r+0x74>
 800a18c:	89a3      	ldrh	r3, [r4, #12]
 800a18e:	f023 0303 	bic.w	r3, r3, #3
 800a192:	f043 0301 	orr.w	r3, r3, #1
 800a196:	81a3      	strh	r3, [r4, #12]
 800a198:	89a3      	ldrh	r3, [r4, #12]
 800a19a:	431d      	orrs	r5, r3
 800a19c:	81a5      	strh	r5, [r4, #12]
 800a19e:	e7cd      	b.n	800a13c <__smakebuf_r+0x18>
 800a1a0:	08009f91 	.word	0x08009f91

0800a1a4 <__malloc_lock>:
 800a1a4:	4770      	bx	lr

0800a1a6 <__malloc_unlock>:
 800a1a6:	4770      	bx	lr

0800a1a8 <__sread>:
 800a1a8:	b510      	push	{r4, lr}
 800a1aa:	460c      	mov	r4, r1
 800a1ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1b0:	f000 f894 	bl	800a2dc <_read_r>
 800a1b4:	2800      	cmp	r0, #0
 800a1b6:	bfab      	itete	ge
 800a1b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a1ba:	89a3      	ldrhlt	r3, [r4, #12]
 800a1bc:	181b      	addge	r3, r3, r0
 800a1be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a1c2:	bfac      	ite	ge
 800a1c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a1c6:	81a3      	strhlt	r3, [r4, #12]
 800a1c8:	bd10      	pop	{r4, pc}

0800a1ca <__swrite>:
 800a1ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1ce:	461f      	mov	r7, r3
 800a1d0:	898b      	ldrh	r3, [r1, #12]
 800a1d2:	05db      	lsls	r3, r3, #23
 800a1d4:	4605      	mov	r5, r0
 800a1d6:	460c      	mov	r4, r1
 800a1d8:	4616      	mov	r6, r2
 800a1da:	d505      	bpl.n	800a1e8 <__swrite+0x1e>
 800a1dc:	2302      	movs	r3, #2
 800a1de:	2200      	movs	r2, #0
 800a1e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1e4:	f000 f868 	bl	800a2b8 <_lseek_r>
 800a1e8:	89a3      	ldrh	r3, [r4, #12]
 800a1ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1f2:	81a3      	strh	r3, [r4, #12]
 800a1f4:	4632      	mov	r2, r6
 800a1f6:	463b      	mov	r3, r7
 800a1f8:	4628      	mov	r0, r5
 800a1fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1fe:	f000 b817 	b.w	800a230 <_write_r>

0800a202 <__sseek>:
 800a202:	b510      	push	{r4, lr}
 800a204:	460c      	mov	r4, r1
 800a206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a20a:	f000 f855 	bl	800a2b8 <_lseek_r>
 800a20e:	1c43      	adds	r3, r0, #1
 800a210:	89a3      	ldrh	r3, [r4, #12]
 800a212:	bf15      	itete	ne
 800a214:	6560      	strne	r0, [r4, #84]	; 0x54
 800a216:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a21a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a21e:	81a3      	strheq	r3, [r4, #12]
 800a220:	bf18      	it	ne
 800a222:	81a3      	strhne	r3, [r4, #12]
 800a224:	bd10      	pop	{r4, pc}

0800a226 <__sclose>:
 800a226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a22a:	f000 b813 	b.w	800a254 <_close_r>
	...

0800a230 <_write_r>:
 800a230:	b538      	push	{r3, r4, r5, lr}
 800a232:	4c07      	ldr	r4, [pc, #28]	; (800a250 <_write_r+0x20>)
 800a234:	4605      	mov	r5, r0
 800a236:	4608      	mov	r0, r1
 800a238:	4611      	mov	r1, r2
 800a23a:	2200      	movs	r2, #0
 800a23c:	6022      	str	r2, [r4, #0]
 800a23e:	461a      	mov	r2, r3
 800a240:	f7f7 f869 	bl	8001316 <_write>
 800a244:	1c43      	adds	r3, r0, #1
 800a246:	d102      	bne.n	800a24e <_write_r+0x1e>
 800a248:	6823      	ldr	r3, [r4, #0]
 800a24a:	b103      	cbz	r3, 800a24e <_write_r+0x1e>
 800a24c:	602b      	str	r3, [r5, #0]
 800a24e:	bd38      	pop	{r3, r4, r5, pc}
 800a250:	24000334 	.word	0x24000334

0800a254 <_close_r>:
 800a254:	b538      	push	{r3, r4, r5, lr}
 800a256:	4c06      	ldr	r4, [pc, #24]	; (800a270 <_close_r+0x1c>)
 800a258:	2300      	movs	r3, #0
 800a25a:	4605      	mov	r5, r0
 800a25c:	4608      	mov	r0, r1
 800a25e:	6023      	str	r3, [r4, #0]
 800a260:	f7f7 f875 	bl	800134e <_close>
 800a264:	1c43      	adds	r3, r0, #1
 800a266:	d102      	bne.n	800a26e <_close_r+0x1a>
 800a268:	6823      	ldr	r3, [r4, #0]
 800a26a:	b103      	cbz	r3, 800a26e <_close_r+0x1a>
 800a26c:	602b      	str	r3, [r5, #0]
 800a26e:	bd38      	pop	{r3, r4, r5, pc}
 800a270:	24000334 	.word	0x24000334

0800a274 <_fstat_r>:
 800a274:	b538      	push	{r3, r4, r5, lr}
 800a276:	4c07      	ldr	r4, [pc, #28]	; (800a294 <_fstat_r+0x20>)
 800a278:	2300      	movs	r3, #0
 800a27a:	4605      	mov	r5, r0
 800a27c:	4608      	mov	r0, r1
 800a27e:	4611      	mov	r1, r2
 800a280:	6023      	str	r3, [r4, #0]
 800a282:	f7f7 f870 	bl	8001366 <_fstat>
 800a286:	1c43      	adds	r3, r0, #1
 800a288:	d102      	bne.n	800a290 <_fstat_r+0x1c>
 800a28a:	6823      	ldr	r3, [r4, #0]
 800a28c:	b103      	cbz	r3, 800a290 <_fstat_r+0x1c>
 800a28e:	602b      	str	r3, [r5, #0]
 800a290:	bd38      	pop	{r3, r4, r5, pc}
 800a292:	bf00      	nop
 800a294:	24000334 	.word	0x24000334

0800a298 <_isatty_r>:
 800a298:	b538      	push	{r3, r4, r5, lr}
 800a29a:	4c06      	ldr	r4, [pc, #24]	; (800a2b4 <_isatty_r+0x1c>)
 800a29c:	2300      	movs	r3, #0
 800a29e:	4605      	mov	r5, r0
 800a2a0:	4608      	mov	r0, r1
 800a2a2:	6023      	str	r3, [r4, #0]
 800a2a4:	f7f7 f86f 	bl	8001386 <_isatty>
 800a2a8:	1c43      	adds	r3, r0, #1
 800a2aa:	d102      	bne.n	800a2b2 <_isatty_r+0x1a>
 800a2ac:	6823      	ldr	r3, [r4, #0]
 800a2ae:	b103      	cbz	r3, 800a2b2 <_isatty_r+0x1a>
 800a2b0:	602b      	str	r3, [r5, #0]
 800a2b2:	bd38      	pop	{r3, r4, r5, pc}
 800a2b4:	24000334 	.word	0x24000334

0800a2b8 <_lseek_r>:
 800a2b8:	b538      	push	{r3, r4, r5, lr}
 800a2ba:	4c07      	ldr	r4, [pc, #28]	; (800a2d8 <_lseek_r+0x20>)
 800a2bc:	4605      	mov	r5, r0
 800a2be:	4608      	mov	r0, r1
 800a2c0:	4611      	mov	r1, r2
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	6022      	str	r2, [r4, #0]
 800a2c6:	461a      	mov	r2, r3
 800a2c8:	f7f7 f868 	bl	800139c <_lseek>
 800a2cc:	1c43      	adds	r3, r0, #1
 800a2ce:	d102      	bne.n	800a2d6 <_lseek_r+0x1e>
 800a2d0:	6823      	ldr	r3, [r4, #0]
 800a2d2:	b103      	cbz	r3, 800a2d6 <_lseek_r+0x1e>
 800a2d4:	602b      	str	r3, [r5, #0]
 800a2d6:	bd38      	pop	{r3, r4, r5, pc}
 800a2d8:	24000334 	.word	0x24000334

0800a2dc <_read_r>:
 800a2dc:	b538      	push	{r3, r4, r5, lr}
 800a2de:	4c07      	ldr	r4, [pc, #28]	; (800a2fc <_read_r+0x20>)
 800a2e0:	4605      	mov	r5, r0
 800a2e2:	4608      	mov	r0, r1
 800a2e4:	4611      	mov	r1, r2
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	6022      	str	r2, [r4, #0]
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	f7f6 fff6 	bl	80012dc <_read>
 800a2f0:	1c43      	adds	r3, r0, #1
 800a2f2:	d102      	bne.n	800a2fa <_read_r+0x1e>
 800a2f4:	6823      	ldr	r3, [r4, #0]
 800a2f6:	b103      	cbz	r3, 800a2fa <_read_r+0x1e>
 800a2f8:	602b      	str	r3, [r5, #0]
 800a2fa:	bd38      	pop	{r3, r4, r5, pc}
 800a2fc:	24000334 	.word	0x24000334

0800a300 <_init>:
 800a300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a302:	bf00      	nop
 800a304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a306:	bc08      	pop	{r3}
 800a308:	469e      	mov	lr, r3
 800a30a:	4770      	bx	lr

0800a30c <_fini>:
 800a30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a30e:	bf00      	nop
 800a310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a312:	bc08      	pop	{r3}
 800a314:	469e      	mov	lr, r3
 800a316:	4770      	bx	lr
